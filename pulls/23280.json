{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280",
    "id": 758505865,
    "node_id": "PR_kwDOABII584tNeGJ",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/23280",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/23280.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/23280.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23280",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23280/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/7f15eff2ddd86034e84a19413e1a42883987f660",
    "number": 23280,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "init: Coalesce Chainstate loading sequence between {,non-}unittest codepaths",
    "user": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This PR:\r\n1. Coalesce the Chainstate loading sequence between `AppInitMain` and `*TestingSetup` (which makes it more tested)\r\n2. Makes the Chainstate loading sequence reusable in preparation for future work extracting out our consensus engine.\r\n\r\nCode-wise, this PR:\r\n1. Extracts `AppInitMain`'s Chainstate loading sequence into a `::LoadChainstateSequence` function\r\n2. Makes this `::LoadChainstateSequence` function reusable by\r\n    1. Decoupling it from various concepts (`ArgsManager`, `uiInterface`, etc)\r\n    2. Making it report errors using an `enum` rather than by setting a `bilingual_str`\r\n3. Makes `*TestingSetup` use this new `::LoadChainstateSequence`\r\n\r\nReviewers: Aside from commentary, I've also included `git diff` flags of interest in the commit messages which I hope will aid review!\r\n",
    "labels": [
      {
        "id": 135961,
        "node_id": "MDU6TGFiZWwxMzU5NjE=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
        "name": "Refactoring",
        "color": "E6F6D6",
        "default": false
      }
    ],
    "created_at": "2021-10-14T16:18:06Z",
    "updated_at": "2022-12-23T10:04:22Z",
    "closed_at": "2021-12-10T16:19:20Z",
    "mergeable_state": "unknown",
    "merged_at": "2021-12-10T16:19:20Z",
    "merge_commit_sha": "a06364741358feae04813050e4225eb43fc386e3",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "dongcarl:2021-09-kernel-lib-v3",
      "ref": "2021-09-kernel-lib-v3",
      "sha": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "user": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 97671618,
        "node_id": "MDEwOlJlcG9zaXRvcnk5NzY3MTYxOA==",
        "name": "bitcoin",
        "full_name": "dongcarl/bitcoin",
        "owner": {
          "login": "dongcarl",
          "id": 3445290,
          "node_id": "MDQ6VXNlcjM0NDUyOTA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/dongcarl",
          "html_url": "https://github.com/dongcarl",
          "followers_url": "https://api.github.com/users/dongcarl/followers",
          "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
          "organizations_url": "https://api.github.com/users/dongcarl/orgs",
          "repos_url": "https://api.github.com/users/dongcarl/repos",
          "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/dongcarl/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/dongcarl/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/dongcarl/bitcoin",
        "archive_url": "https://api.github.com/repos/dongcarl/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/dongcarl/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/dongcarl/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/dongcarl/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/dongcarl/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/dongcarl/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/dongcarl/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/dongcarl/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/dongcarl/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/dongcarl/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/dongcarl/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/dongcarl/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/dongcarl/bitcoin/events",
        "forks_url": "https://api.github.com/repos/dongcarl/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/dongcarl/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/dongcarl/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/dongcarl/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/dongcarl/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/dongcarl/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/dongcarl/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/dongcarl/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/dongcarl/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/dongcarl/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/dongcarl/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/dongcarl/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/dongcarl/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/dongcarl/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/dongcarl/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/dongcarl/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:dongcarl/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/dongcarl/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/dongcarl/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/dongcarl/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/dongcarl/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/dongcarl/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/dongcarl/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/dongcarl/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/dongcarl/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/dongcarl/bitcoin/hooks",
        "svn_url": "https://github.com/dongcarl/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 2,
        "watchers_count": 2,
        "size": 204504,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-05-28T17:13:06Z",
        "created_at": "2017-07-19T04:07:18Z",
        "updated_at": "2022-06-03T10:08:14Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "63c63b5533e8d1c682aae3ae6d35b76836ab8341",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69819,
        "watchers_count": 69819,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-07T05:35:10Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T04:47:18Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 432,
    "deletions": 202,
    "changed_files": 11,
    "commits": 23,
    "review_comments": 86,
    "comments": 28
  },
  "events": [
    {
      "event": "reviewed",
      "id": 779992528,
      "node_id": "PRR_kwDOABII584ufb3Q",
      "url": null,
      "actor": null,
      "commit_id": "29c5c2b4700aa3f537e7291971dbd763469fce1c",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "Empact",
        "id": 5470,
        "node_id": "MDQ6VXNlcjU0NzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Empact",
        "html_url": "https://github.com/Empact",
        "followers_url": "https://api.github.com/users/Empact/followers",
        "following_url": "https://api.github.com/users/Empact/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Empact/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Empact/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
        "organizations_url": "https://api.github.com/users/Empact/orgs",
        "repos_url": "https://api.github.com/users/Empact/repos",
        "events_url": "https://api.github.com/users/Empact/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Empact/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#pullrequestreview-779992528",
      "submitted_at": "2021-10-14T16:25:36Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
    },
    {
      "event": "commented",
      "id": 943522697,
      "node_id": "IC_kwDOABII5844PQOJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/943522697",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-14T16:30:55Z",
      "updated_at": "2021-10-14T16:30:55Z",
      "author_association": "MEMBER",
      "body": "Concept ACK! I've already done a preliminary review of this code but will formally test and review very soon.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#issuecomment-943522697",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23280"
    },
    {
      "event": "labeled",
      "id": 5465164140,
      "node_id": "LE_lADOABII5849MHszzwAAAAFFv8ls",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5465164140",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-14T16:52:42Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5465226880,
      "node_id": "HRFPE_lADOABII5849MHszzwAAAAFFwL6A",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5465226880",
      "actor": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-14T17:04:18Z"
    },
    {
      "event": "commented",
      "id": 943549459,
      "node_id": "IC_kwDOABII5844PWwT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/943549459",
      "actor": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-14T17:04:42Z",
      "updated_at": "2021-10-14T17:04:57Z",
      "author_association": "MEMBER",
      "body": "Pushed 29c5c2b4700aa3f537e7291971dbd763469fce1c -> 3d5aa4b8503ed834e4e14651cd64f8a5d3d47f46\r\n- Rebased over master\r\n- Changed some commit messages",
      "user": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#issuecomment-943549459",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23280"
    },
    {
      "event": "unlabeled",
      "id": 5465792681,
      "node_id": "UNLE_lADOABII5849MHszzwAAAAFFyWCp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5465792681",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-14T18:57:45Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 5465802879,
      "node_id": "LE_lADOABII5849MHszzwAAAAFFyYh_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5465802879",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-14T18:59:45Z",
      "label": {
        "name": "Build system",
        "color": "5319e7"
      }
    },
    {
      "event": "labeled",
      "id": 5465802881,
      "node_id": "LE_lADOABII5849MHszzwAAAAFFyYiB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5465802881",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-14T18:59:45Z",
      "label": {
        "name": "RPC/REST/ZMQ",
        "color": "0052cc"
      }
    },
    {
      "event": "labeled",
      "id": 5465802883,
      "node_id": "LE_lADOABII5849MHszzwAAAAFFyYiD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5465802883",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-14T18:59:45Z",
      "label": {
        "name": "Validation",
        "color": "6060aa"
      }
    },
    {
      "event": "commented",
      "id": 943683489,
      "node_id": "IC_kwDOABII5844P3eh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/943683489",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-14T20:00:33Z",
      "updated_at": "2021-12-08T13:23:54Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#21763](https://github.com/bitcoin/bitcoin/pull/21763) (test: Run AppInitSanityChecks before all tests by MarcoFalke)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#issuecomment-943683489",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23280"
    },
    {
      "event": "commented",
      "id": 943766855,
      "node_id": "IC_kwDOABII5844QL1H",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/943766855",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-14T21:57:10Z",
      "updated_at": "2021-10-14T21:57:10Z",
      "author_association": "MEMBER",
      "body": "Concept ACK. Will review.",
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#issuecomment-943766855",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23280"
    },
    {
      "event": "labeled",
      "id": 5468802867,
      "node_id": "LE_lADOABII5849MHszzwAAAAFF908z",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5468802867",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-15T09:38:54Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5470649800,
      "node_id": "HRFPE_lADOABII5849MHszzwAAAAFGE33I",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5470649800",
      "actor": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-15T15:49:45Z"
    },
    {
      "event": "commented",
      "id": 944408573,
      "node_id": "IC_kwDOABII5844Sof9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/944408573",
      "actor": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-15T15:50:14Z",
      "updated_at": "2021-10-15T15:50:14Z",
      "author_association": "MEMBER",
      "body": "Pushed 3d5aa4b850...7dd898c0df:\r\n- Rebased over master\r\n- Tweaked last commit to minimize use of `gArgs` in setup_common",
      "user": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#issuecomment-944408573",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23280"
    },
    {
      "event": "unlabeled",
      "id": 5470680082,
      "node_id": "UNLE_lADOABII5849MHszzwAAAAFGE_QS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5470680082",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-15T15:55:48Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 5521763948,
      "node_id": "UNLE_lADOABII5849MHszzwAAAAFJH25s",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5521763948",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-26T16:03:11Z",
      "label": {
        "name": "Build system",
        "color": "5319e7"
      }
    },
    {
      "event": "unlabeled",
      "id": 5521763952,
      "node_id": "UNLE_lADOABII5849MHszzwAAAAFJH25w",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5521763952",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-26T16:03:11Z",
      "label": {
        "name": "RPC/REST/ZMQ",
        "color": "0052cc"
      }
    },
    {
      "event": "unlabeled",
      "id": 5521763954,
      "node_id": "UNLE_lADOABII5849MHszzwAAAAFJH25y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5521763954",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-26T16:03:11Z",
      "label": {
        "name": "Validation",
        "color": "6060aa"
      }
    },
    {
      "event": "labeled",
      "id": 5521763957,
      "node_id": "LE_lADOABII5849MHszzwAAAAFJH251",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5521763957",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-26T16:03:11Z",
      "label": {
        "name": "Refactoring",
        "color": "E6F6D6"
      }
    },
    {
      "event": "reviewed",
      "id": 793288260,
      "node_id": "PRR_kwDOABII584vSJ5E",
      "url": null,
      "actor": null,
      "commit_id": "7dd898c0df678859ca92773b6990e4e28a83ab24",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK 7dd898c0df678859ca92773b6990e4e28a83ab24 ([`jamesob/ackr/23280.2.dongcarl.init_coalesce_chainstate`](https://github.com/jamesob/bitcoin/tree/ackr/23280.2.dongcarl.init_coalesce_chainstate))\r\n\r\nThis is an excellent change in terms of cleaning up and modularizing our messy (and previously un-unittested) initialization code. I had actually taken a run at doing this previously as a part of #15606 but gave up because I thought it'd be too big a change. Carl has done a much better job of implementing it here than I had anyway, but for what it's worth the design I had sketched is very similar to this one.\r\n\r\nThis patch paves the way for further libbitcoinkernel work - but even aside from that, it ensures that we're reusing more (all?) of our chain initialization logic from within the unittests which has quite a bit of value on its own.\r\n\r\nI wrote #23289 specifically to test this change, and I've run it ~25 times on HEAD. I've also tested this branch with a pre-existing mainnet datadir, booting and interrupting init a number of times.\r\n\r\nGreat job, @dongcarl!\r\n\r\n<details><summary>Show signature data</summary>\r\n<p>\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nACK 7dd898c0df678859ca92773b6990e4e28a83ab24 ([`jamesob/ackr/23280.2.dongcarl.init_coalesce_chainstate`](https://github.com/jamesob/bitcoin/tree/ackr/23280.2.dongcarl.init_coalesce_chainstate))\r\n\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQIzBAEBCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmF8OJcACgkQepNdrbLE\r\nTwW1uxAAjTIPIZ4ddUhSlAax8GQR43wEE3Qvk5+I51RHNGyIS8QoPb0lgmBYgqJW\r\nbqvVyMC0cKg9QNDLELrQQ/ySVf2Vl9H/6va4P18ZAKLg8cNuyeVr3cl4Swe0ZH9F\r\nclRa8b75NTRUtOZlt34O2eTfigyKbnQ5L1+G8HJWNoBvWEPt5JSV7G2UU1tyLEh3\r\n3lvS5vHivSt+8WqIhB/lBIERJmI7vHjFAhN8P6SgLyQr7NxKA8Lw6cFUFeJIWKDP\r\npkza4uabu1cDqAurxO2jgIq4GDL7FXz3fkXcFzGTPgY1JlXI26dEkuWBSEA42zGs\r\nubizjy/JIyRUbzRv5jBia5woDJgR40eFfsb7GkZOHfZtoQsDN85xwvZpRCzl/YnY\r\ny1exK8fGSmCuP6cIP2mbbz9TrUlrGfyZm0vwIiqrRpGtO7q1CdTyiV7gnOwRUCjY\r\nLqUI2WXMuJGSD/WaPIghpllFBejadETVkfjMUHBtaTO8WdpPchdgnLZFtKlyjvLV\r\nx1UkNk3Xqkzzk75+XPEK+GBSDPnaD9fDnfypu7f18pin2O6gGFVErQto67xM1+HY\r\n0eRlQOhM/T+SdsDWcl9z4fUS1pA+zxxpr3BRNHR4aNbuxXj326VIVnQUatEotncy\r\nilPh7NYFFVMWpoOGG5HbucjlazQLf/Z4Q9FxUqdDglXRSqK+kQM=\r\n=XedH\r\n-----END PGP SIGNATURE-----\r\n\r\n```\r\n\r\n</p></details>\r\n\r\n<details><summary>Show platform data</summary>\r\n<p>\r\n\r\n```\r\nTested on Linux-5.10.0-9-amd64-x86_64-with-glibc2.28\r\n\r\nConfigured with ./configure LDFLAGS=-L/home/james/src/bitcoin/db4/lib/ CPPFLAGS=-I/home/james/src/bitcoin/db4/include/ CXXFLAGS=-fPIE -pipe -O2 -g -Wthread-safety-analysis -Wall -Werror=sign-compare -Wsign-compare -Werror=thread-safety-analysis --enable-wallet --enable-debug --with-daemon --enable-natpmp-default CXX=/usr/bin/clang++ CC=/usr/bin/clang PYTHONPATH= --disable-shared --with-pic --enable-benchmark=no --enable-module-recovery --enable-module-schnorrsig --enable-experimental --disable-openssl-tests --disable-shared --with-pic --enable-benchmark=no --enable-module-recovery --enable-module-schnorrsig --enable-experimental --no-create --no-recursion\r\n\r\nCompiled with /usr/bin/ccache /usr/bin/clang++ -std=c++17 -mavx -mavx2 -fPIE -pipe -O2 -g -Wthread-safety-analysis -Wall -Werror=sign-compare -Wsign-compare -Werror=thread-safety-analysis -O0 -g3 -ftrapv -fdebug-prefix-map=$(abs_top_srcdir)=.  -Wstack-protector -fstack-protector-all -fcf-protection=full -fstack-clash-protection -msse4 -msha -msse4.1 -msse4.2  i\r\n\r\nCompiler version: Debian clang version 13.0.1-++20211019122913+8a93745a7121-1~exp1~20211019003538.10\r\n```\r\n\r\n</p></details>\r\n\r\n",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#pullrequestreview-793288260",
      "submitted_at": "2021-10-29T18:16:43Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
    },
    {
      "event": "commented",
      "id": 955029268,
      "node_id": "IC_kwDOABII58447JcU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/955029268",
      "actor": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-29T20:28:03Z",
      "updated_at": "2021-10-29T20:28:24Z",
      "author_association": "MEMBER",
      "body": "My sincerest thanks for the thorough review @jamesob, that functional test in #23289 is certainly beyond the call of duty, and the `master` bug it revealed is leading to some excellent investigation in #23365. 🎉 \r\n\r\nI'm glad to hear that this sort of cleanup came up for the AssumeUTXO work as well, my hope is that the change will make future work easier involving the init sequence easier to reason about.\r\n\r\n> reusing more (all?) of our chain initialization logic from within the unittests\r\n\r\nOne thing to note is that although we _load_ the chainstate, we do not _activate_ it, which is done in `ThreadImport` with `ActivateBestChain`, this can be included in followup PRs.",
      "user": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#issuecomment-955029268",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23280"
    },
    {
      "event": "mentioned",
      "id": 5542670499,
      "node_id": "MEE_lADOABII5849MHszzwAAAAFKXnCj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5542670499",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-29T20:28:03Z"
    },
    {
      "event": "subscribed",
      "id": 5542670504,
      "node_id": "SE_lADOABII5849MHszzwAAAAFKXnCo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5542670504",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-29T20:28:03Z"
    },
    {
      "event": "reviewed",
      "id": 798853955,
      "node_id": "PRR_kwDOABII584vnYtD",
      "url": null,
      "actor": null,
      "commit_id": "7dd898c0df678859ca92773b6990e4e28a83ab24",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#pullrequestreview-798853955",
      "submitted_at": "2021-11-05T13:06:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
    },
    {
      "event": "reviewed",
      "id": 798882733,
      "node_id": "PRR_kwDOABII584vnfut",
      "url": null,
      "actor": null,
      "commit_id": "7dd898c0df678859ca92773b6990e4e28a83ab24",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK.\r\n\r\nA few questions/observations:\r\n\r\n1\r\nSeveral of the commit logs reference \"ACCS\" or \"ACSS\". Sorry if I'm being dense, but what are those?\r\n\r\n2\r\nThe commit log for _init/chainstate: Decouple from GetTimeMillis_ reads \"...instead require caller to pass in a std::function that returns the current system time in milliseconds as a int64_t\", but that doesn't match what the code does. Perhaps this is left over from an old version of this branch?\r\n\r\n3\r\nCan you explain the benefit of commit _init/chainstate: Reduce coupling of LogPrintf_? It doesn't seem a problem to me for `LoadChainstateSequence()` to call the global logger. Lots of other parts of the codebase do that already. Having the try/catch inside `LoadChainstateSequence()` means that it's noexcept and the caller doesn't need to worry about catching exceptions.\r\n\r\n4\r\nIn _validation: Call NotifyBlockTip in CCS::LoadChainTip_, you're moving the RPC notification into `CChainstate::LoadChainTip()`. However, that function is also called by `ChainstateManager::ActivateSnapshot()`, so that's potentially a behavior change there. You also change the call from `RPCNotifyBlockChange()` to `uiInterface.NotifyBlockTip()`. However, `uiInterface.NotifyBlockTip` has multiple other \"slots\", e.g. `BlockNotifyGenesisWait`. Are we sure that isn't also a behavior change?\r\n\r\nI think that the `RPCNotifyBlockChange()` call can just be brought down to immediately before RPC leaves warmup:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/77a2f5d30c5ecb764b8a7c098492e1f5cdec90f0/src/init.cpp#L1842\r\n\r\nThere can't be any pending RPC calls waiting for the blockchange notification (since RPC is still in warmup) so I think the only purpose of this call is to set the `latestblock` fields.\r\n\r\n5\r\nIn _init/chainstate: Decouple from GetAdjustedTime_, why not just pass in the time instead of a function that returns the time?",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#pullrequestreview-798882733",
      "submitted_at": "2021-11-05T15:45:23Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
    },
    {
      "event": "reviewed",
      "id": 799097823,
      "node_id": "PRR_kwDOABII584voUPf",
      "url": null,
      "actor": null,
      "commit_id": "7dd898c0df678859ca92773b6990e4e28a83ab24",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#pullrequestreview-799097823",
      "submitted_at": "2021-11-05T16:28:38Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
    },
    {
      "event": "reviewed",
      "id": 798165689,
      "node_id": "PRR_kwDOABII584vkwq5",
      "url": null,
      "actor": null,
      "commit_id": "83ed7db27b4c4798666b77d83fc8e7c3eab8c621",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "This looks very promising! Mostly reviewed this\r\n\r\n- [X] 83ed7db27b4c4798666b77d83fc8e7c3eab8c621 init: Extract chainstate loading sequence (1/17)\r\n- [X] b094ca4fd89b50c7179355f72113d794725f8a9d init/chainstate: Decouple from ArgsManager (2/17)\r\n- [X] 3ecaf812d4934d63124b640d2aeb008d4b742d89 init/chainstate: Decouple from concept of NodeContext (3/17)\r\n- [X] e53e85f8b4ff7642c876950942cadcc819aa50e1 init/chainstate: Decouple from GetTimeMillis (4/17)\r\n- [X] cd29d334a38fdaf0bbbe810a9cbdeeffad394daa init/chainstate: Decouple from stringy errors (5/17)\r\n- [X] 25cea87e6ea4a7cf59f38df1454265b2de8461c9 init/chainstate: Remove do/while loop (6/17)\r\n- [X] 0e61af06834c9a9331e620343e60e9104e08331e init/chainstate: Decouple from concept of uiInterface (7/17)\r\n- [X] 38d88e2950afc99caca31388fd75f03c4d06bcc9 init/chainstate: Reduce coupling of LogPrintf (8/17)\r\n- [X] 10564583429762ddfb6601d1f64ac663406bf8e2 init/chainstate: Move -checkblocks limitation to help (9/17)\r\n- [ ] b229024932ebd4775070149ff0f27d0fd329bf0a validation: Call NotifyBlockTip in CCS::LoadChainTip (10/17)\r\n- [X] 8eae069b0015524d877a6fc9f92ab85d2ad6b26b init/chainstate: Decouple from GetAdjustedTime (11/17)\r\n- [X] 855a86102095003779d63b514728d1f0ed4d3a91 init/chainstate: Decouple from ShutdownRequested (12/17)\r\n- [X] 391fe919a8321ed8ff9af990797b2cc737968b78 validation: VerifyDB only needs Consensus::Params (13/17)\r\n- [ ] 1f966b8d9fa41073a27a475715cf984b227197de init/caches: Extract cache calculation logic (14/17)\r\n- [X] f45b885db6636e135d617d915e0ef4ec9e1be8e6 init/chainstate: Add options for in-memory DBs (15/17)\r\n- [ ] 8e2817a66fb9c00b4392256c700c35380d7f7eb3 test/setup: Use LoadChainstateSequence (16/17)\r\n- [ ] 7dd898c0df678859ca92773b6990e4e28a83ab24 test/setup: Unify m_args and gArgs (17/17)",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#pullrequestreview-798165689",
      "submitted_at": "2021-11-05T19:43:12Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
    },
    {
      "event": "reviewed",
      "id": 799254153,
      "node_id": "PRR_kwDOABII584vo6aJ",
      "url": null,
      "actor": null,
      "commit_id": "83ed7db27b4c4798666b77d83fc8e7c3eab8c621",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "I like this. `LoadChainstateSequence` is still quite wonky, but at least it's better defined. Nice to have that really weird loop removed too.\r\n\r\nI'm curious to see what you think about splitting it up. I only reviewed \"Decouple from stringy errors\" and \"Extract cache calculation logic\" lightly. They look good but I'd want to scrutinize those two for edge-cases before I could be confident that they're no-ops.",
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#pullrequestreview-799254153",
      "submitted_at": "2021-11-05T21:16:25Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
    },
    {
      "event": "reviewed",
      "id": 805043197,
      "node_id": "PRR_kwDOABII584v-_v9",
      "url": null,
      "actor": null,
      "commit_id": "83ed7db27b4c4798666b77d83fc8e7c3eab8c621",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Just posting few more comments. I do like Cory's Load/Verify split idea, too.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#pullrequestreview-805043197",
      "submitted_at": "2021-11-12T17:46:29Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5620038303,
      "node_id": "HRFPE_lADOABII5849MHszzwAAAAFO-vqf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5620038303",
      "actor": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-15T18:07:41Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5620186340,
      "node_id": "HRFPE_lADOABII5849MHszzwAAAAFO_Tzk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5620186340",
      "actor": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-15T18:37:06Z"
    },
    {
      "event": "commented",
      "id": 969209205,
      "node_id": "IC_kwDOABII5845xPV1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/969209205",
      "actor": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-15T18:45:57Z",
      "updated_at": "2021-11-15T18:45:57Z",
      "author_association": "MEMBER",
      "body": "Thanks all for the reviews! I addressed a subset of the concerns in my latest 2 pushes. One thing I'd like some help with:\r\n\r\nFor the RPC block change notification, I decided to go with jnewbery's method here:\r\n     \r\n> In _validation: Call NotifyBlockTip in CCS::LoadChainTip_, you're moving the RPC notification into `CChainstate::LoadChainTip()`. However, that function is also called by `ChainstateManager::ActivateSnapshot()`, so that's potentially a behavior change there. You also change the call from `RPCNotifyBlockChange()` to `uiInterface.NotifyBlockTip()`. However, `uiInterface.NotifyBlockTip` has multiple other \"slots\", e.g. `BlockNotifyGenesisWait`. Are we sure that isn't also a behavior change?\r\n> \r\n> I think that the `RPCNotifyBlockChange()` call can just be brought down to immediately before RPC leaves warmup:\r\n> \r\n> https://github.com/bitcoin/bitcoin/blob/77a2f5d30c5ecb764b8a7c098492e1f5cdec90f0/src/init.cpp#L1842\r\n> \r\n> There can't be any pending RPC calls waiting for the blockchange notification (since RPC is still in warmup) so I think the only purpose of this call is to set the `latestblock` fields.\r\n\r\nThis change is in this commit: dea5766ccaed1db77f8ca335d913ecf1ea4d41d1. This seems quite safe to me, and answers some of the questions ryanofsky posed in https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743895731. However, I'm not well-versed in RPC and how that interacts with our multiple chainstates. So I'd love some input on that.\r\n",
      "user": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#issuecomment-969209205",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23280"
    },
    {
      "event": "commented",
      "id": 972365657,
      "node_id": "IC_kwDOABII58459R9Z",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/972365657",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-18T00:19:32Z",
      "updated_at": "2021-11-18T00:32:48Z",
      "author_association": "MEMBER",
      "body": "reACK https://github.com/bitcoin/bitcoin/pull/23280/commits/2c8f0e948d1ffe2fc729ce51fa42544616b51b5b\r\n\r\nI re-reviewed this from scratch (no easier way to do it) after rebasing on master to avoid the peers.dat v3/v4 startup error. Notable changes were `LoadChainstate`/`VerifyLoadedChainstate` split, import comment removal, and `cs::main` lock consolidation, which I think are all fine.\r\n\r\nEdit: forgot to mention the `RPCNotifyBlockChange()` change. While that looks fine to me, in general I would have preferred preserving `master`'s behavior in this changeset (by, say, parameterizing and injecting that method as we have done with others). But the change seems fine to me; just wish it wasn't blended in with this larger, ideally-non-behavioral change.\r\n\r\nRerunning my proposed functional tests (#23289) works for the most part, but there is a failure at the end when we intentionally create an init failure by removing block index *.ldb files (https://github.com/bitcoin/bitcoin/pull/23289/commits/d9803f7a0a33688f7429cf10384244f4770851ca#diff-1eb9875f38625ed8a456749c0a96ef72f7a5dc666c7c486f0b585d65680035a0R146). So I guess this change doesn't maintain strict output backwards compatibility, but personally I don't think that matters so much if the issue really is just what messages are shown. \r\n\r\n```\r\n node0 2021-11-18T00:06:03.158933Z [init] [dbwrapper.cpp:137] [CDBWrapper] Opening LevelDB in /tmp/bitcoin_func_test_y5h3tzr2/node0/regtest/blocks/index\r\n node0 2021-11-18T00:06:03.159032Z [init] [dbwrapper.cpp:253] [HandleError] Fatal LevelDB error: Corruption: 1 missing files; e.g.: /tmp/bitcoin_func_test_y5h3tzr2/node0/regtest/blocks/index/000035.ldb\r\n node0 2021-11-18T00:06:03.159039Z [init] [dbwrapper.cpp:254] [HandleError] You can use -debug=leveldb to get more complete diagnostic messages\r\n node0 2021-11-18T00:06:03.159101Z [init] [init.cpp:1420] [AppInitMain] Fatal LevelDB error: Corruption: 1 missing files; e.g.: /tmp/bitcoin_func_test_y5h3tzr2/node0/regtest/blocks/index/000035.ldb\r\n node0 2021-11-18T00:06:03.159121Z [init] [noui.cpp:56] [noui_InitMessage] init message: Verifying blocks…\r\n test  2021-11-18T00:06:03.190000Z TestFramework.node0 (DEBUG): [node 0] bitcoind exited with status -11 during initialization\r\n test  2021-11-18T00:06:03.191000Z TestFramework (ERROR): Assertion failed\r\n                                   Traceback (most recent call last):\r\n                                     File \"/home/james/src/bitcoin/test/functional/test_framework/test_framework.py\", line 132, in main\r\n                                       self.run_test()\r\n                                     File \"/home/james/src/bitcoin/./test/functional/feature_init.py\", line 163, in run_test\r\n                                       node.assert_start_raises_init_error(\r\n                                     File \"/home/james/src/bitcoin/test/functional/test_framework/test_node.py\", line 523, in assert_start_raises_init_error\r\n                                       self._raise_assertion_error(\r\n                                     File \"/home/james/src/bitcoin/test/functional/test_framework/test_node.py\", line 167, in _raise_assertion_error\r\n                                       raise AssertionError(self._node_msg(msg))\r\n                                   AssertionError: [node 0] Expected message \"Error opening block database.\" does not partially match stderr:\r\n                                   \"\"\r\n ```\r\nFor what it's worth, the failure is due to this change: https://github.com/bitcoin/bitcoin/pull/23280/commits/18be9fec4967327158ed05f4c3e2531178ba3f86#diff-1767ee60ee6478aaca24348d0fdc0ccdfcf82c35b4543823d9ef39950b50be14L161\r\n\r\n### Process note\r\n\r\nI'd request that we scope future reviews to matters of correctness (vs. style) and leave the latter for follow-up in smaller PRs. ACK invalidation on this PR is painful, and as-written it's a very substantial improvement (e.g. unittest init reuse) over what we have now.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#issuecomment-972365657",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23280"
    },
    {
      "event": "commented",
      "id": 972897080,
      "node_id": "IC_kwDOABII5845_Ts4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/972897080",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-18T14:07:30Z",
      "updated_at": "2021-11-18T14:07:30Z",
      "author_association": "MEMBER",
      "body": "> reACK [2c8f0e9](https://github.com/bitcoin/bitcoin/commit/2c8f0e948d1ffe2fc729ce51fa42544616b51b5b)\r\n> \r\n> I re-reviewed this from scratch (no easier way to do it)\r\n\r\nBlah, but thanks for confirming the best approach :)\r\n\r\nThanks @jamesob for another thorough review. I'll re-review from scratch soon as well.",
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#issuecomment-972897080",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23280"
    },
    {
      "event": "mentioned",
      "id": 5639025278,
      "node_id": "MEE_lADOABII5849MHszzwAAAAFQHLJ-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5639025278",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-18T14:07:30Z"
    },
    {
      "event": "subscribed",
      "id": 5639025283,
      "node_id": "SE_lADOABII5849MHszzwAAAAFQHLKD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5639025283",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-18T14:07:30Z"
    },
    {
      "event": "commented",
      "id": 972940682,
      "node_id": "IC_kwDOABII5845_eWK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/972940682",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-18T14:55:22Z",
      "updated_at": "2021-11-18T14:57:07Z",
      "author_association": "MEMBER",
      "body": "The main thing I'm waiting for is for the new code to be moved out of `src/init/` which is for generic process initialization to `src/node/` which is for libbitcoin_server node code. Should be easy to do this with a plain git rebase, or in the worst case with `git filter-branch mv` (https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743858865) if git rename detection chokes.\r\n\r\nIt would also be nice if LoadChainstate documentation was moved out of commit messages into a code comment for the LoadChainstate declaration so the PR would be easier to understand and review (https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743133511, https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743637480)",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#issuecomment-972940682",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23280"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5687827376,
      "node_id": "HRFPE_lADOABII5849MHszzwAAAAFTBVuw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5687827376",
      "actor": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-29T21:31:31Z"
    },
    {
      "event": "commented",
      "id": 982052626,
      "node_id": "IC_kwDOABII5846iO8S",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/982052626",
      "actor": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-29T21:45:43Z",
      "updated_at": "2021-11-29T21:45:43Z",
      "author_association": "MEMBER",
      "body": "Pushed 2c8f0e948d1ffe2fc729ce51fa42544616b51b5b -> fdc07a1d2916a85add9b11130a8c2cf6c02a09eb\r\n1. Moved some `LoadChainstate` documentation from commit messages to actual code as suggested by ryanofsky (actually a great idea and made things clearer)\r\n2. Moved the newly added files to `node/` instead of `init/`, fixed up alphabetical ordering where appropriate\r\n3. Added some comments about the nuance of the SHUTDOWN_REQUESTED/PROBED enum return value\r\n\r\nw/re point number 3, although I've implemented the reviewers' suggestion (returning an enum variant), I think this solution may actually be a bit more complicated than my original one. This is mostly because we can only guarantee that we detect shutdown requests up to our last call to `ShutdownRequested`, and there may be indirect shutdown requests after that that we won't catch. So in order to maintain behavior / be correct we still need to check `ShutdownRequested()` after we exit the sequence, and the enum return value is rendered somewhat useless: https://github.com/bitcoin/bitcoin/pull/23280/commits/64195bf2e4b8c6f74d0df7ba85a1ee0f0b6c4e5f#diff-b1e19192258d83199d8adaa5ac31f067af98f63554bfdd679bd8e8073815e69dR1450-R1451",
      "user": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#issuecomment-982052626",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23280"
    },
    {
      "event": "commented",
      "id": 982080608,
      "node_id": "IC_kwDOABII5846iVxg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/982080608",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-29T22:26:19Z",
      "updated_at": "2021-11-29T22:26:19Z",
      "author_association": "MEMBER",
      "body": "Thanks for updates! Will look more, but I don't think the fact that code might need to call `ShutdownRequested()` later makes having distinct `SUCCESS` / `FAILURE` / `INTERRUPTED` return codes useless. If calling code wants to treat `SUCCESS` and `INTERRUPTED` values the same way (by not printing errors, and going on to check whether a shutdown is currently requested), that's great, but it doesn't suggest to me that `SUCCESS` and `INTERRUPTED` should be merged together. `SUCCESS` and `INTERRUPTED` do actually mean different things, and it also would be reasonable for calling code to treat them differently, even if it isn't now, for example by logging the interruption when `INTERRUPTED` is returned, or by returning `INTERRUPTED` to the caller of the caller, and moving Shutdown handling to a higher level.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#issuecomment-982080608",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23280"
    },
    {
      "event": "commented",
      "id": 982935352,
      "node_id": "IC_kwDOABII5846lmc4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/982935352",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-30T19:10:02Z",
      "updated_at": "2021-11-30T19:10:02Z",
      "author_association": "MEMBER",
      "body": "ACK fdc07a1d2916a85add9b11130a8c2cf6c02a09eb ([`jamesob/ackr/23280.5.dongcarl.init_coalesce_chainstate`](https://github.com/jamesob/bitcoin/tree/ackr/23280.5.dongcarl.init_coalesce_chainstate))\r\n\r\nExamined interdiff, built, merged & tested recent master and my init functional tests. Changes are as Carl describes.\r\n\r\n<details><summary>Show signature data</summary>\r\n<p>\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nACK fdc07a1d2916a85add9b11130a8c2cf6c02a09eb ([`jamesob/ackr/23280.5.dongcarl.init_coalesce_chainstate`](https://github.com/jamesob/bitcoin/tree/ackr/23280.5.dongcarl.init_coalesce_chainstate))\r\n\r\nExamined interdiff, built, merged & tested recent master and my init functional tests. Changes are as Carl describes.\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQIzBAEBCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmGmduoACgkQepNdrbLE\r\nTwUqWRAAmizHsXiSXi+daWs5gX85JJUb/uetyo2r2qoNFsJh2YDCkrYj3VS/EM5D\r\nJzyscNQKRWSKEhGH7dCP8B1SwK8/7xpcTxw2orOw5Zy4QrbQoZzUy3zKZiV7mrwq\r\neiWeUlHq2qdruayNIwuWK0JsCDLkPc24jTmsi9Jr+OtvhHDVqfVWz5hRMzP590JX\r\nlDpi92cp7EauuLvrort41uir71WXt7id/n1lusqMRwkvjYDhgAFNG3PS8ooO+kNy\r\nbJRObP55GOizEWoIQ08mIrkbt0wq2ALiQEUFmTvg0ZCFFfuMk4brRrQFoYQwyqc0\r\nRfQrIfaTblLOefRycdDY+wbmNhEhS0ATmeBFrbikzzEcm5Zd9vaV4IaoD5cBsy5e\r\niKA8mQPX5IW1QC0hHxIEm7bJmJ+5dpwJbqxjm9KzVekw/nR/OjHpPIWj5rGG6xFV\r\nz7Iub6XSjY6w9h/3WSf3hEyTeCnq3kZ5aCUe40tOps1h4jXho70Qtu24l3zA9oza\r\n95dozmg6G2W6JyGl7nPGLoZE27++z2nkBkScs6zOQL8f16uCvXT5FIIM7xt9/uKg\r\nvoCeCFE4b3dfSSC4Cce1fx4bt4oGIFfhz6V4nlHcXJdRxaaAs+wcepD8uIR+gdZZ\r\n6Q0oWUrYIQHAi/+ZUqDax2YvNcuZJ6S9fewuS2tQIt+BZG88pMc=\r\n=N1CN\r\n-----END PGP SIGNATURE-----\r\n\r\n```\r\n\r\n</p></details>\r\n\r\n<details><summary>Show platform data</summary>\r\n<p>\r\n\r\n```\r\nTested on Linux-5.10.0-9-amd64-x86_64-with-glibc2.28\r\n\r\nConfigured with ./configure LDFLAGS=-L/home/james/src/bitcoin/db4/lib/ CPPFLAGS=-I/home/james/src/bitcoin/db4/include/ CXXFLAGS=-fPIE -pipe -O2 -g -Wthread-safety-analysis -Wall -Werror=sign-compare -Wsign-compare -Werror=thread-safety-analysis --enable-wallet --enable-debug --with-daemon --enable-natpmp-default CXX=/usr/bin/clang++ CC=/usr/bin/clang PYTHONPATH= --disable-shared --with-pic --enable-benchmark=no --enable-module-recovery --enable-module-schnorrsig --enable-experimental --disable-openssl-tests --disable-shared --with-pic --enable-benchmark=no --enable-module-recovery --enable-module-schnorrsig --enable-experimental --no-create --no-recursion\r\n\r\nCompiled with /usr/bin/ccache /usr/bin/clang++ -std=c++17 -mavx -mavx2 -fPIE -pipe -O2 -g -Wthread-safety-analysis -Wall -Werror=sign-compare -Wsign-compare -Werror=thread-safety-analysis -O0 -g3 -ftrapv -fdebug-prefix-map=$(abs_top_srcdir)=.  -Wstack-protector -fstack-protector-all -fcf-protection=full -fstack-clash-protection -msse4 -msha -msse4.1 -msse4.2  i\r\n\r\nCompiler version: Debian clang version 13.0.1-++20211110052940+162f3f18c945-1~exp1~20211110053502.25\r\n```\r\n\r\n</p></details>\r\n\r\n",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#issuecomment-982935352",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23280"
    },
    {
      "event": "commented",
      "id": 982947060,
      "node_id": "IC_kwDOABII5846lpT0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/982947060",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-30T19:24:59Z",
      "updated_at": "2021-11-30T19:24:59Z",
      "author_association": "MEMBER",
      "body": "`C:\\Users\\ContainerAdministrator\\AppData\\Local\\Temp\\cirrus-ci-build\\src\\node\\caches.cpp(32,9): error C7555: use of designated initializers requires at least '/std:c++20' [C:\\Users\\ContainerAdministrator\\AppData\\Local\\Temp\\cirrus-ci-build\\build_msvc\\libbitcoin_server\\libbitcoin_server.vcxproj]`",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#issuecomment-982947060",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23280"
    },
    {
      "event": "referenced",
      "id": 5694385544,
      "node_id": "REFE_lADOABII5849MHszzwAAAAFTaW2I",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5694385544",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "aef8c7cf82cff24ddd88fab0a3c5fb93de467886",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aef8c7cf82cff24ddd88fab0a3c5fb93de467886",
      "created_at": "2021-11-30T19:50:21Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5694955424,
      "node_id": "HRFPE_lADOABII5849MHszzwAAAAFTch-g",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5694955424",
      "actor": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-30T21:50:16Z"
    },
    {
      "event": "commented",
      "id": 983051896,
      "node_id": "IC_kwDOABII5846mC54",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/983051896",
      "actor": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-30T21:50:57Z",
      "updated_at": "2021-11-30T21:50:57Z",
      "author_association": "MEMBER",
      "body": "Did not realize designated initializers is a GNU extension, my bad.",
      "user": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#issuecomment-983051896",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23280"
    },
    {
      "event": "reviewed",
      "id": 819546004,
      "node_id": "PRR_kwDOABII584w2UeU",
      "url": null,
      "actor": null,
      "commit_id": "165b30b649923da4ed19749a399c4a4589da326b",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Mostly reviewed (will update list below with progress).\r\n- [X] 6345e65d3163f4f5b4545181813b8e8a5ea5a157 node: Extract chainstate loading sequence (1/22)\r\n- [X] 165b30b649923da4ed19749a399c4a4589da326b node/chainstate: Decouple from GetTimeMillis (2/22)\r\n- [X] 64195bf2e4b8c6f74d0df7ba85a1ee0f0b6c4e5f node/chainstate: Decouple from stringy errors (3/22)\r\n- [X] bb8245bedc18125309ca85e95dfc91eb7c4201bf node/chainstate: Decouple from ArgsManager (4/22)\r\n- [X] aa6bc732b148e5e27bfc1df23f42c6c55006185c node/chainstate: Decouple from concept of NodeContext (5/22)\r\n- [X] 0d2f1a458e5ad8cfbbdc039084ce554daaf41ba9 Move mempool nullptr Assert out of LoadChainstate (6/22)\r\n- [X] 49d2d11aa5dbe13cfcbb11605b2f60e62f4e848b Move init logistics message for BAD_GENESIS_BLOCK to init.cpp (7/22)\r\n- [X] 0b340cd58693d5c4956dbf1eda8f81cf0944b02b node/chainstate: Remove do/while loop (8/22)\r\n- [X] 019da3dc8493054b456222ef23761dd95130b6a7 Split off VerifyLoadedChainstate (9/22)\r\n- [X] efe9bd287656925a3bda50a809edeabe9824e37a node/chainstate: Decouple from concept of uiInterface (10/22)\r\n- [X] 71c78844ee2449e2e8086857bbef57d436cd7b24 node/chainstate: Reduce coupling of LogPrintf (11/22)\r\n- [X] 02c5d48532e9eadfd4832585e827aea53af7aaf5 Move -checkblocks LogPrintf to AppInitMain (12/22)\r\n- [ ] ca13555758e6d868d3cfa5b55e679fca74381b03 init: Delay RPC block notif until warmup finished (13/22)\r\n- [X] e073634c37f3a1e140920c6e5e3f2c1ae47cd293 node/chainstate: Decouple from GetAdjustedTime (14/22)\r\n- [X] 2a2a496fe898404876f4ed12cd61aae8600f3e47 node/chainstate: Decouple from ShutdownRequested (15/22)\r\n- [X] 7d0cf02654214e816734dffe30a466d4d12147f1 validation: VerifyDB only needs Consensus::Params (16/22)\r\n- [ ] fefd26434cc3bcac443a818903df1c31f40ecff1 node/caches: Extract cache calculation logic (17/22)\r\n- [ ] 4a50ef72d7367c35c52ca8f8e584b5f402ae79df node/chainstate: Add options for in-memory DBs (18/22)\r\n- [ ] 526b218273ead38e5d93198367542c4e97956fd8 test/setup: Use LoadChainstate (19/22)\r\n- [ ] 8b3080f2d662207ee0af2aa48a0a6c3db3a24c56 test/setup: Unify m_args and gArgs (20/22)\r\n- [ ] 97162b171e064ebf745fdee1dd3373c38b7195ed Remove all #include // for * comments (21/22)\r\n- [ ] fdc07a1d2916a85add9b11130a8c2cf6c02a09eb Collapse the 2 cs_main locks in LoadChainstate (22/22)",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#pullrequestreview-819546004",
      "submitted_at": "2021-11-30T22:57:33Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
    },
    {
      "event": "referenced",
      "id": 5696234986,
      "node_id": "REFE_lADOABII5849MHszzwAAAAFThaXq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5696234986",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "f5c617dc72bada3ac2be39163c50672b87585f50",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/f5c617dc72bada3ac2be39163c50672b87585f50",
      "created_at": "2021-12-01T04:09:43Z"
    },
    {
      "event": "labeled",
      "id": 5698176046,
      "node_id": "LE_lADOABII5849MHszzwAAAAFTo0Qu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5698176046",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-01T11:03:09Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 983543901,
      "node_id": "IC_kwDOABII5846n7Bd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/983543901",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-01T11:22:51Z",
      "updated_at": "2021-12-01T11:22:51Z",
      "author_association": "MEMBER",
      "body": "```\r\n�[0;36m test  2021-11-30T22:50:44.631000Z TestFramework.node0 (DEBUG): [node 0] bitcoind exited with status -11 during initialization �[0m\r\n�[0;36m test  2021-11-30T22:50:44.632000Z TestFramework (ERROR): Assertion failed �[0m\r\n�[0;36m                                   Traceback (most recent call last):�[0m\r\n�[0;36m                                     File \"/private/var/folders/tn/f_9sf1xx5t14qm_6f83q3b840000gn/T/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-apple-darwin19/test/functional/test_framework/test_framework.py\", line 132, in main�[0m\r\n�[0;36m                                       self.run_test()�[0m\r\n�[0;36m                                     File \"/private/var/folders/tn/f_9sf1xx5t14qm_6f83q3b840000gn/T/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-apple-darwin19/test/functional/feature_init.py\", line 168, in run_test�[0m\r\n�[0;36m                                       node.assert_start_raises_init_error(�[0m\r\n�[0;36m                                     File \"/private/var/folders/tn/f_9sf1xx5t14qm_6f83q3b840000gn/T/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-apple-darwin19/test/functional/test_framework/test_node.py\", line 523, in assert_start_raises_init_error�[0m\r\n�[0;36m                                       self._raise_assertion_error(�[0m\r\n�[0;36m                                     File \"/private/var/folders/tn/f_9sf1xx5t14qm_6f83q3b840000gn/T/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-apple-darwin19/test/functional/test_framework/test_node.py\", line 167, in _raise_assertion_error�[0m\r\n�[0;36m                                       raise AssertionError(self._node_msg(msg))�[0m\r\n�[0;36m                                   AssertionError: [node 0] Expected message \"Error opening block database.\" does not partially match stderr:�[0m\r\n�[0;36m                                   \"\"�[0m",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#issuecomment-983543901",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23280"
    },
    {
      "event": "commented",
      "id": 983763767,
      "node_id": "IC_kwDOABII5846ows3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/983763767",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-01T15:38:44Z",
      "updated_at": "2021-12-01T15:38:44Z",
      "author_association": "MEMBER",
      "body": "> ```\r\n> �[0;36m test  2021-11-30T22:50:44.631000Z TestFramework.node0 (DEBUG): [node 0] bitcoind exited with status -11 during initialization �[0m\r\n> �[0;36m test  2021-11-30T22:50:44.632000Z TestFramework (ERROR): Assertion failed �[0m\r\n> �[0;36m                                   Traceback (most recent call last):�[0m\r\n> �[0;36m                                     File \"/private/var/folders/tn/f_9sf1xx5t14qm_6f83q3b840000gn/T/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-apple-darwin19/test/functional/test_framework/test_framework.py\", line 132, in main�[0m\r\n> �[0;36m                                       self.run_test()�[0m\r\n> �[0;36m                                     File \"/private/var/folders/tn/f_9sf1xx5t14qm_6f83q3b840000gn/T/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-apple-darwin19/test/functional/feature_init.py\", line 168, in run_test�[0m\r\n> �[0;36m                                       node.assert_start_raises_init_error(�[0m\r\n> �[0;36m                                     File \"/private/var/folders/tn/f_9sf1xx5t14qm_6f83q3b840000gn/T/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-apple-darwin19/test/functional/test_framework/test_node.py\", line 523, in assert_start_raises_init_error�[0m\r\n> �[0;36m                                       self._raise_assertion_error(�[0m\r\n> �[0;36m                                     File \"/private/var/folders/tn/f_9sf1xx5t14qm_6f83q3b840000gn/T/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-apple-darwin19/test/functional/test_framework/test_node.py\", line 167, in _raise_assertion_error�[0m\r\n> �[0;36m                                       raise AssertionError(self._node_msg(msg))�[0m\r\n> �[0;36m                                   AssertionError: [node 0] Expected message \"Error opening block database.\" does not partially match stderr:�[0m\r\n> �[0;36m                                   \"\"�[0m\r\n> ```\r\n\r\nAh yeah, see my comment above (https://github.com/bitcoin/bitcoin/pull/23280#issuecomment-972365657). This should be a simple matter of tacking on a commit to this branch that updates output expectations in the functional test.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#issuecomment-983763767",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23280"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5701472640,
      "node_id": "HRFPE_lADOABII5849MHszzwAAAAFT1ZGA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5701472640",
      "actor": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-01T19:58:23Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5701549631,
      "node_id": "HRFPE_lADOABII5849MHszzwAAAAFT1r4_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5701549631",
      "actor": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-01T20:12:43Z"
    },
    {
      "event": "unlabeled",
      "id": 5701695479,
      "node_id": "UNLE_lADOABII5849MHszzwAAAAFT2Pf3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5701695479",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-01T20:44:13Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 820742565,
      "node_id": "PRR_kwDOABII584w64ml",
      "url": null,
      "actor": null,
      "commit_id": "ca13555758e6d868d3cfa5b55e679fca74381b03",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Code review ACK 8301c696d0a0be921ce01b6e9f74f7ff6e8c0f2f. PR is a nice improvement. A few things could be tweaked still, but I don't think any changes are actually needed, and this looks good in its current form.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#pullrequestreview-820742565",
      "submitted_at": "2021-12-01T21:29:47Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
    },
    {
      "event": "reviewed",
      "id": 820842452,
      "node_id": "PRR_kwDOABII584w7Q_U",
      "url": null,
      "actor": null,
      "commit_id": "258ce97cf72043ffa69d2b77a4438df723c734a6",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#pullrequestreview-820842452",
      "submitted_at": "2021-12-01T21:52:24Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
    },
    {
      "event": "commented",
      "id": 984149564,
      "node_id": "IC_kwDOABII5846qO48",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/984149564",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-01T23:24:02Z",
      "updated_at": "2021-12-01T23:24:56Z",
      "author_association": "MEMBER",
      "body": "Following up on the return codes discussion https://github.com/bitcoin/bitcoin/pull/23280#discussion_r748465779, I still think it would be good to reduce the number of status codes the caller needs to handle, and number of function parameters. Experimenting a little, I pushed a change (compiles, but untested) to do this here: b7c7f64dc86f0fcdf07cb1e765f7cccc3a3c8897 (+129/-210). It could be a followup, or feel free to adopt parts of this if they seem useful.\r\n\r\n\r\n\r\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#issuecomment-984149564",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23280"
    },
    {
      "event": "labeled",
      "id": 5706679288,
      "node_id": "LE_lADOABII5849MHszzwAAAAFUJQP4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5706679288",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-02T15:33:55Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 822853111,
      "node_id": "PRR_kwDOABII584xC733",
      "url": null,
      "actor": null,
      "commit_id": "8301c696d0a0be921ce01b6e9f74f7ff6e8c0f2f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "reACK 8301c696d0a0be921ce01b6e9f74f7ff6e8c0f2f ([`jamesob/ackr/23280.6.dongcarl.init_coalesce_chainstate`](https://github.com/jamesob/bitcoin/tree/ackr/23280.6.dongcarl.init_coalesce_chainstate))\r\n\r\nChanges since my last ACK include\r\n- minor formatting for the `LoadChainstate` call\r\n- break if an error is encountered during `LoadChainstate` instead of proceeding to `VerifyLoadedChainstate` (and displaying the \"Verifying blocks...\" message)\r\n- don't prefix parameter names when returning from CalculateCacheSizes\r\n\r\nI'm still singing the same tune:  this is a big improvement to init, importantly because it can be reused in unittests.\r\n\r\n<details><summary>Show signature data</summary>\r\n<p>\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nreACK 8301c696d0a0be921ce01b6e9f74f7ff6e8c0f2f ([`jamesob/ackr/23280.6.dongcarl.init_coalesce_chainstate`](https://github.com/jamesob/bitcoin/tree/ackr/23280.6.dongcarl.init_coalesce_chainstate))\r\n\r\nChanges since my last ACK include\r\n- - minor formatting changes for the `LoadChainstate` call\r\n- - break if an error is encountered during `LoadChainstate` instead of proceeding to `VerifyLoadedChainstate` (and displaying the \"Verifying blocks...\" message)\r\n- - don't prefix parameter names when returning from CalculateCacheSizes\r\n\r\nI'm still singing the same tune:  this is a big improvement to init, importantly because it can be reused in unittests.\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQIzBAEBCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmGqTYkACgkQepNdrbLE\r\nTwWFAg//Suzk9OqS3OCmxCijJEnCWXSv/afG26X5yTqTL/o1DyzQZrFddliL3VJN\r\nFx6j3Zln80cq1Jl4yeVRsQ8zU7MWv+hpVEyf4SAjcToJ3qxHan3pZfUalPE8nzFv\r\n1ubvztUag/xhO09/W6yBIFGl7IbUDA4uyayg+7QCM2Plv5IXiP3c01ufiGTpuRxg\r\n1H/VszdnQEjBaRLw1r+cv9pGYBUtzgXUk/i17esfAlZV71C/gUOvfVOwp3wHJB2G\r\nPGnpwQ7fQ+cQ/4KED/RIuMMQAztHjPqQUcsOFCFWohtGU7KXbQdD3TjlJYRJNIEW\r\nk5kW+ySVSypJyxuGJVK2wm4Fvu5uzKK2c2tqg714HHMtHxjIz857WTagKpyseKPb\r\nhhWZOSYdQxyinqXtCEF3r1ufBqxjeEPSjAwl2aDOi0bbZ01rBEFAp2VQzfwBSwoz\r\nL81/wLLlQg4AG8LRIcDdIi+yz1xHrBbHbvmjN1Yg8X8fQ7qzmnwxqB9MYz74IE1v\r\n7J4pgxgM6wT772fJIZnlNynVR5ZvlX3VcYTpvos4A4KM7BA2n0KFm3AvQB5s0gUi\r\nomtsbQbysQ5+rqpwUDmhqIhkkSI4pmExmn60Y0UkiLOMrbdKE0AbuGgdQ/p2RvOs\r\nbktDxlmOwraljitKSJHnD0UQuLmdSxuujFW4IO39dN+RrRwsYMQ=\r\n=0Nt0\r\n-----END PGP SIGNATURE-----\r\n\r\n```\r\n\r\n</p></details>\r\n\r\n<details><summary>Show platform data</summary>\r\n<p>\r\n\r\n```\r\nTested on Linux-5.10.0-9-amd64-x86_64-with-glibc2.28\r\n\r\nConfigured with ./configure LDFLAGS=-L/home/james/src/bitcoin/db4/lib/ CPPFLAGS=-I/home/james/src/bitcoin/db4/include/ CXXFLAGS=-fPIE -pipe -O2 -g -Wthread-safety-analysis -Wall -Werror=sign-compare -Wsign-compare -Werror=thread-safety-analysis --enable-wallet --enable-debug --with-daemon --enable-natpmp-default CXX=/usr/bin/clang++ CC=/usr/bin/clang PYTHONPATH= --disable-shared --with-pic --enable-benchmark=no --enable-module-recovery --enable-module-schnorrsig --enable-experimental --disable-openssl-tests --disable-shared --with-pic --enable-benchmark=no --enable-module-recovery --enable-module-schnorrsig --enable-experimental --disable-openssl-tests --no-create --no-recursion\r\n\r\nCompiled with /usr/bin/ccache /usr/bin/clang++ -std=c++17 -mavx -mavx2 -mpclmul -fPIE -pipe -O2 -g -Wthread-safety-analysis -Wall -Werror=sign-compare -Wsign-compare -Werror=thread-safety-analysis -O0 -g3 -ftrapv -fdebug-prefix-map=$(abs_top_srcdir)=.  -Wstack-protector -fstack-protector-all -fcf-protection=full -fstack-clash-protection -msse4 -msha -msse4.1 -msse4.2  i\r\n\r\nCompiler version: Debian clang version 13.0.1-++20211110052940+162f3f18c945-1~exp1~20211110053502.25\r\n```\r\n\r\n</p></details>\r\n\r\n",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#pullrequestreview-822853111",
      "submitted_at": "2021-12-03T17:02:57Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
    },
    {
      "event": "commented",
      "id": 985681773,
      "node_id": "IC_kwDOABII5846wE9t",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/985681773",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-03T17:03:44Z",
      "updated_at": "2021-12-03T17:03:44Z",
      "author_association": "MEMBER",
      "body": "Needs rebase, though.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#issuecomment-985681773",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23280"
    },
    {
      "event": "commented",
      "id": 986245853,
      "node_id": "IC_kwDOABII5846yOrd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/986245853",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-05T15:02:01Z",
      "updated_at": "2021-12-05T15:02:01Z",
      "author_association": "MEMBER",
      "body": "Approach ACK. Debug build clean, needs rebase.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#issuecomment-986245853",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23280"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGNiNjRhZjk2MzVhOTU1M2UzMzVmMmRjMGIxY2NhMjBjNmJiZDA5MzM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cb64af9635a9553e335f2dc0b1cca20c6bbd0933",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/cb64af9635a9553e335f2dc0b1cca20c6bbd0933",
      "tree": {
        "sha": "8ce04ae564f96bda6ace11434246f1afcd98fea4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8ce04ae564f96bda6ace11434246f1afcd98fea4"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/786ffb3ae488061e13c02ad3fb34a5d2fc785b3d",
          "sha": "786ffb3ae488061e13c02ad3fb34a5d2fc785b3d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/786ffb3ae488061e13c02ad3fb34a5d2fc785b3d"
        }
      ],
      "message": "node: Extract chainstate loading sequence\n\nI strongly recommend reviewing with the following git-diff flags:\n  --color-moved=dimmed_zebra --color-moved-ws=allow-indentation-change\n\n[META] This commit is intended to be as close to a move-only commit as\n       possible, and lingering ugliness will be resolved in subsequent\n       commits.\n\nA few variables that are passed in by value instead of by reference\ndeserve explanation:\n\n- fReset and fReindexChainstate are both local variables in AppInitMain\n  and are not modified in the sequence\n\n- fPruneMode, despite being a global, is only modified in\n  AppInitParameterInteraction, long before LoadChainstate is called\n\n----\n\n[META] This semantic will change in a future commit named\n       \"node/chainstate: Decouple from stringy errors\"",
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-12-06T20:55:16Z"
      },
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-09-20T20:12:18Z"
      },
      "sha": "cb64af9635a9553e335f2dc0b1cca20c6bbd0933"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGNiYWMyOGI3MmY1YjgzMWY2Zjg0Yjc2MjhmNzNlODU2MjdhZjNkOTQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cbac28b72f5b831f6f84b7628f73e85627af3d94",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/cbac28b72f5b831f6f84b7628f73e85627af3d94",
      "tree": {
        "sha": "daa3ea28ebb0b5be33c636c61eadb82ebc11dda9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/daa3ea28ebb0b5be33c636c61eadb82ebc11dda9"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cb64af9635a9553e335f2dc0b1cca20c6bbd0933",
          "sha": "cb64af9635a9553e335f2dc0b1cca20c6bbd0933",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/cb64af9635a9553e335f2dc0b1cca20c6bbd0933"
        }
      ],
      "message": "node/chainstate: Decouple from GetTimeMillis\n\n...instead just move it out",
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-12-06T20:55:49Z"
      },
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-09-20T21:08:18Z"
      },
      "sha": "cbac28b72f5b831f6f84b7628f73e85627af3d94"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGFlOTEyMWY5NThhNDEyNGVhNjIzOGNhZDBjM2YyYWNiOGI5ZWI0YmI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ae9121f958a4124ea6238cad0c3f2acb8b9eb4bb",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ae9121f958a4124ea6238cad0c3f2acb8b9eb4bb",
      "tree": {
        "sha": "aa63441abf035cb5c00ce9e48955f8d445b85803",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aa63441abf035cb5c00ce9e48955f8d445b85803"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cbac28b72f5b831f6f84b7628f73e85627af3d94",
          "sha": "cbac28b72f5b831f6f84b7628f73e85627af3d94",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/cbac28b72f5b831f6f84b7628f73e85627af3d94"
        }
      ],
      "message": "node/chainstate: Decouple from stringy errors\n\nThis allows us to separate the initialization code from translations and\nerror reporting.\n\nThis change changes the caller semantics of LoadChainstate quite\ndrastically.\n\nTo see that this change doesn't change behaviour, observe that:\n\n1. Prior to this change, LoadChainstate returned false only in the \"bad\n   genesis block\" failure case (by returning InitError()), indicating\n   that the caller should immediately bail. After this change, the\n   corresponding ERROR_BAD_GENESIS_BLOCK handler in src/init.cpp\n   maintains behavioue by also bailing immediately.\n\n2. The failed_* temporary booleans were only used to break out of the\n   outer do/while(false) loop. They can therefore be safely removed.",
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-12-06T20:56:50Z"
      },
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-08-17T22:07:14Z"
      },
      "sha": "ae9121f958a4124ea6238cad0c3f2acb8b9eb4bb"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGM3YTVjNDZlNmZkNmQ2ZmY0NmNhN2E2NWZjM2YwZmZmM2NiZGIyNGU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c7a5c46e6fd6d6ff46ca7a65fc3f0fff3cbdb24e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c7a5c46e6fd6d6ff46ca7a65fc3f0fff3cbdb24e",
      "tree": {
        "sha": "bf2095cf76e1e7f1677395f71c18d6feea62d922",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bf2095cf76e1e7f1677395f71c18d6feea62d922"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ae9121f958a4124ea6238cad0c3f2acb8b9eb4bb",
          "sha": "ae9121f958a4124ea6238cad0c3f2acb8b9eb4bb",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ae9121f958a4124ea6238cad0c3f2acb8b9eb4bb"
        }
      ],
      "message": "node/chainstate: Decouple from ArgsManager\n\n...instead pass in only the necessary information",
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-12-06T20:56:55Z"
      },
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-08-16T21:03:33Z"
      },
      "sha": "c7a5c46e6fd6d6ff46ca7a65fc3f0fff3cbdb24e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDkxNjJhNGY5M2VmNWFlYjU3ZmUxMWE2ZTA5ZjU4ODFjZjQzMWY1ZTY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9162a4f93ef5aeb57fe11a6e09f5881cf431f5e6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9162a4f93ef5aeb57fe11a6e09f5881cf431f5e6",
      "tree": {
        "sha": "1ef3829ddaadb842e7c20f921922ee336efb5141",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1ef3829ddaadb842e7c20f921922ee336efb5141"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c7a5c46e6fd6d6ff46ca7a65fc3f0fff3cbdb24e",
          "sha": "c7a5c46e6fd6d6ff46ca7a65fc3f0fff3cbdb24e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c7a5c46e6fd6d6ff46ca7a65fc3f0fff3cbdb24e"
        }
      ],
      "message": "node/chainstate: Decouple from concept of NodeContext\n\n...instead pass in only the necessary information\n\nAlso allow mempool to be a nullptr",
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-12-06T20:56:55Z"
      },
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-09-20T20:44:21Z"
      },
      "sha": "9162a4f93ef5aeb57fe11a6e09f5881cf431f5e6"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDg3MTU2NTg5ODNhMGEwN2M1NjUxM2FjZDhkZWQ4ZGZjNTljNWMxNjk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8715658983a0a07c56513acd8ded8dfc59c5c169",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/8715658983a0a07c56513acd8ded8dfc59c5c169",
      "tree": {
        "sha": "d6a398462208fcc025d07aee38e7dcac05e83d56",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d6a398462208fcc025d07aee38e7dcac05e83d56"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9162a4f93ef5aeb57fe11a6e09f5881cf431f5e6",
          "sha": "9162a4f93ef5aeb57fe11a6e09f5881cf431f5e6",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9162a4f93ef5aeb57fe11a6e09f5881cf431f5e6"
        }
      ],
      "message": "Move mempool nullptr Assert out of LoadChainstate",
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-12-06T20:56:55Z"
      },
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-11-12T00:19:09Z"
      },
      "sha": "8715658983a0a07c56513acd8ded8dfc59c5c169"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDk3NTIzNWNhMGE4ZjViY2Y5ZGY4ODA2OThiM2IwZDRiYmRlOWY3ZmI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/975235ca0a8f5bcf9df880698b3b0d4bbde9f7fb",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/975235ca0a8f5bcf9df880698b3b0d4bbde9f7fb",
      "tree": {
        "sha": "4193817014de87e70db3c716f4f91467f7d08eb0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4193817014de87e70db3c716f4f91467f7d08eb0"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8715658983a0a07c56513acd8ded8dfc59c5c169",
          "sha": "8715658983a0a07c56513acd8ded8dfc59c5c169",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/8715658983a0a07c56513acd8ded8dfc59c5c169"
        }
      ],
      "message": "Move init logistics message for BAD_GENESIS_BLOCK to init.cpp",
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-12-06T20:56:55Z"
      },
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-11-11T21:20:44Z"
      },
      "sha": "975235ca0a8f5bcf9df880698b3b0d4bbde9f7fb"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGFkZjQ5MTJkNzc0OTZiOWEyNDM0NzZjNTk0NDUyOGY5NTY0MWYxNGQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/adf4912d77496b9a243476c5944528f95641f14d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/adf4912d77496b9a243476c5944528f95641f14d",
      "tree": {
        "sha": "0171430c8d19fe87f96ae106dbf22dbdb7006219",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0171430c8d19fe87f96ae106dbf22dbdb7006219"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/975235ca0a8f5bcf9df880698b3b0d4bbde9f7fb",
          "sha": "975235ca0a8f5bcf9df880698b3b0d4bbde9f7fb",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/975235ca0a8f5bcf9df880698b3b0d4bbde9f7fb"
        }
      ],
      "message": "node/chainstate: Remove do/while loop\n\nI strongly recommend reviewing with the following git-diff flags:\n  --ignore-space-change",
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-12-06T20:57:46Z"
      },
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-09-20T21:46:06Z"
      },
      "sha": "adf4912d77496b9a243476c5944528f95641f14d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGNhN2MwYjkzNGRiNjhhY2RjNDEwZTNhODJmMWVkODk4MzgyZGEyZTU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ca7c0b934db68acdc410e3a82f1ed898382da2e5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ca7c0b934db68acdc410e3a82f1ed898382da2e5",
      "tree": {
        "sha": "f270e09b1d92fd1e3ac37e85e68a7f3918add8f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f270e09b1d92fd1e3ac37e85e68a7f3918add8f0"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/adf4912d77496b9a243476c5944528f95641f14d",
          "sha": "adf4912d77496b9a243476c5944528f95641f14d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/adf4912d77496b9a243476c5944528f95641f14d"
        }
      ],
      "message": "Split off VerifyLoadedChainstate",
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-12-06T20:58:10Z"
      },
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-11-10T20:57:14Z"
      },
      "sha": "ca7c0b934db68acdc410e3a82f1ed898382da2e5"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5723312977,
      "node_id": "HRFPE_lADOABII5849MHszzwAAAAFVItNR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5723312977",
      "actor": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-06T21:03:15Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5723484578,
      "node_id": "HRFPE_lADOABII5849MHszzwAAAAFVJXGi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5723484578",
      "actor": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-06T21:38:18Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGIzNDU5NzlhMmIwM2I2NzFjMDk4NGVkZDdlNDhlMGJhZWMyZTJmMzQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b345979a2b03b671c0984edd7e48e0baec2e2f34",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b345979a2b03b671c0984edd7e48e0baec2e2f34",
      "tree": {
        "sha": "9b4950b2309eb78dbadb6711c3406205dfb8eff5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9b4950b2309eb78dbadb6711c3406205dfb8eff5"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ca7c0b934db68acdc410e3a82f1ed898382da2e5",
          "sha": "ca7c0b934db68acdc410e3a82f1ed898382da2e5",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ca7c0b934db68acdc410e3a82f1ed898382da2e5"
        }
      ],
      "message": "node/chainstate: Decouple from concept of uiInterface\n\n...instead allow the caller to optionally pass in callbacks which are\ntriggered for certain events.\n\nBehaviour change: The string \"Verifying blocks...\" was previously\nprinted for each chainstate in chainman which did not have an\neffectively empty coinsview, now it will be printed once unconditionally\nbefore we call VerifyLoadedChain.",
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-12-06T21:41:33Z"
      },
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-08-18T17:39:34Z"
      },
      "sha": "b345979a2b03b671c0984edd7e48e0baec2e2f34"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGFhZDhkNTk3ODkwYzM3MDdhZTk2ZmRiMmI5ZmFkYzI3MGNhNTc0ZGQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aad8d597890c3707ae96fdb2b9fadc270ca574dd",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/aad8d597890c3707ae96fdb2b9fadc270ca574dd",
      "tree": {
        "sha": "65d313242f40e5070adbd1026ed54753dab5dd5d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/65d313242f40e5070adbd1026ed54753dab5dd5d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b345979a2b03b671c0984edd7e48e0baec2e2f34",
          "sha": "b345979a2b03b671c0984edd7e48e0baec2e2f34",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b345979a2b03b671c0984edd7e48e0baec2e2f34"
        }
      ],
      "message": "node/chainstate: Reduce coupling of LogPrintf\n\n...by moving the try/catch out of LoadChainstate\n\nI strongly recommend reviewing with the following git-diff flags:\n  --color-moved=dimmed_zebra --color-moved-ws=allow-indentation-change",
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-12-06T21:41:58Z"
      },
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-08-18T17:54:08Z"
      },
      "sha": "aad8d597890c3707ae96fdb2b9fadc270ca574dd"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDhkNDY2YTg1MDRiZmI4MWNlODY5OWQ2NTBhYTcyZWM5Y2M4YjBhNTQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8d466a8504bfb81ce8699d650aa72ec9cc8b0a54",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/8d466a8504bfb81ce8699d650aa72ec9cc8b0a54",
      "tree": {
        "sha": "582392dd69ad01396c4c2b47002c4f181e4bd10d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/582392dd69ad01396c4c2b47002c4f181e4bd10d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aad8d597890c3707ae96fdb2b9fadc270ca574dd",
          "sha": "aad8d597890c3707ae96fdb2b9fadc270ca574dd",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/aad8d597890c3707ae96fdb2b9fadc270ca574dd"
        }
      ],
      "message": "Move -checkblocks LogPrintf to AppInitMain",
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-12-06T21:41:58Z"
      },
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-11-12T23:15:47Z"
      },
      "sha": "8d466a8504bfb81ce8699d650aa72ec9cc8b0a54"
    },
    {
      "event": "unlabeled",
      "id": 5723504150,
      "node_id": "UNLE_lADOABII5849MHszzwAAAAFVJb4W",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5723504150",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-06T21:42:34Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 987334304,
      "node_id": "IC_kwDOABII58462Yag",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/987334304",
      "actor": {
        "login": "RandyMcMillan",
        "id": 152159,
        "node_id": "MDQ6VXNlcjE1MjE1OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/152159?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RandyMcMillan",
        "html_url": "https://github.com/RandyMcMillan",
        "followers_url": "https://api.github.com/users/RandyMcMillan/followers",
        "following_url": "https://api.github.com/users/RandyMcMillan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RandyMcMillan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RandyMcMillan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RandyMcMillan/subscriptions",
        "organizations_url": "https://api.github.com/users/RandyMcMillan/orgs",
        "repos_url": "https://api.github.com/users/RandyMcMillan/repos",
        "events_url": "https://api.github.com/users/RandyMcMillan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RandyMcMillan/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-06T22:59:55Z",
      "updated_at": "2021-12-06T22:59:55Z",
      "author_association": "CONTRIBUTOR",
      "body": "```\r\nDarwin ₿ 20.5.0 Darwin Kernel Version 20.5.0: Sat May  8 05:10:31 PDT 2021; root:xnu-7195.121.3~9/RELEASE_ARM64_T8101 arm64\r\n\r\n```\r\n\r\n![Screen Shot 2021-12-06 at 5 32 34 PM](https://user-images.githubusercontent.com/152159/144936209-1fb98b7b-1506-48d9-b18e-c73281fbedc5.png)\r\n\r\n![Screen Shot 2021-12-06 at 5 27 26 PM](https://user-images.githubusercontent.com/152159/144936292-2475f52d-6afd-4468-9ed4-611386f63150.png)\r\n\r\n\r\n",
      "user": {
        "login": "RandyMcMillan",
        "id": 152159,
        "node_id": "MDQ6VXNlcjE1MjE1OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/152159?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RandyMcMillan",
        "html_url": "https://github.com/RandyMcMillan",
        "followers_url": "https://api.github.com/users/RandyMcMillan/followers",
        "following_url": "https://api.github.com/users/RandyMcMillan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RandyMcMillan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RandyMcMillan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RandyMcMillan/subscriptions",
        "organizations_url": "https://api.github.com/users/RandyMcMillan/orgs",
        "repos_url": "https://api.github.com/users/RandyMcMillan/repos",
        "events_url": "https://api.github.com/users/RandyMcMillan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RandyMcMillan/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#issuecomment-987334304",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23280"
    },
    {
      "event": "commented",
      "id": 987350585,
      "node_id": "IC_kwDOABII58462cY5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/987350585",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-06T23:19:55Z",
      "updated_at": "2021-12-06T23:19:55Z",
      "author_association": "MEMBER",
      "body": "@RandyMcMillan: That happens on current master too when building without bdb, see #23684 -  so it's very likely not related to this PR.",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#issuecomment-987350585",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23280"
    },
    {
      "event": "mentioned",
      "id": 5723902316,
      "node_id": "MEE_lADOABII5849MHszzwAAAAFVK9Fs",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5723902316",
      "actor": {
        "login": "RandyMcMillan",
        "id": 152159,
        "node_id": "MDQ6VXNlcjE1MjE1OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/152159?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RandyMcMillan",
        "html_url": "https://github.com/RandyMcMillan",
        "followers_url": "https://api.github.com/users/RandyMcMillan/followers",
        "following_url": "https://api.github.com/users/RandyMcMillan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RandyMcMillan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RandyMcMillan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RandyMcMillan/subscriptions",
        "organizations_url": "https://api.github.com/users/RandyMcMillan/orgs",
        "repos_url": "https://api.github.com/users/RandyMcMillan/repos",
        "events_url": "https://api.github.com/users/RandyMcMillan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RandyMcMillan/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-06T23:19:55Z"
    },
    {
      "event": "subscribed",
      "id": 5723902334,
      "node_id": "SE_lADOABII5849MHszzwAAAAFVK9F-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5723902334",
      "actor": {
        "login": "RandyMcMillan",
        "id": 152159,
        "node_id": "MDQ6VXNlcjE1MjE1OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/152159?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RandyMcMillan",
        "html_url": "https://github.com/RandyMcMillan",
        "followers_url": "https://api.github.com/users/RandyMcMillan/followers",
        "following_url": "https://api.github.com/users/RandyMcMillan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RandyMcMillan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RandyMcMillan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RandyMcMillan/subscriptions",
        "organizations_url": "https://api.github.com/users/RandyMcMillan/orgs",
        "repos_url": "https://api.github.com/users/RandyMcMillan/repos",
        "events_url": "https://api.github.com/users/RandyMcMillan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RandyMcMillan/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-06T23:19:55Z"
    },
    {
      "event": "reviewed",
      "id": 825534948,
      "node_id": "PRR_kwDOABII584xNKnk",
      "url": null,
      "actor": null,
      "commit_id": "c6861476f7e58f7b6b2e5416d2a7b774d1796a0e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "reACK c6861476f7e58f7b6b2e5416d2a7b774d1796a0e ([`jamesob/ackr/23280.7.dongcarl.init_coalesce_chainstate`](https://github.com/jamesob/bitcoin/tree/ackr/23280.7.dongcarl.init_coalesce_chainstate))\r\n\r\nOnly changes include rebasing on recent master (GetAdjustedTime -> GetTime). Built locally and booted a few times with existing mainnet datadir. \r\n\r\n<details><summary>Show signature data</summary>\r\n<p>\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nreACK c6861476f7e58f7b6b2e5416d2a7b774d1796a0e ([`jamesob/ackr/23280.7.dongcarl.init_coalesce_chainstate`](https://github.com/jamesob/bitcoin/tree/ackr/23280.7.dongcarl.init_coalesce_chainstate))\r\n\r\nOnly changes include rebasing on recent master (GetAdjustedTime -> GetTime). Built locally and booted a few times with existing mainnet datadir. \r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQIzBAEBCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmGvj4IACgkQepNdrbLE\r\nTwW1RBAAnzie/0j3f5h7kn6pH5WLtr4np3ffokobdyfDuPsfhMIp1aqBDX0GQlrs\r\nsy62TEzoPgcD3EQL4TA29Em0/C+uWQIHuBjwnZXSQvFE38BIh4DfcKS+GE2v1j4H\r\nrBp7R60pRXjXNPYv7aTGvhkM2VPsOLt/n4xdSzvzBPjXWmSaCb+rJcivEZHciKXX\r\n4VH2djGJiFwmfmXPo0V9UhNLI86HJ3ju+vJTm32bURTuu7+Hm3P6rHotkhNYGgd7\r\nZwI35VobxCmU8qd2AD/6H0GwYYr6cketmVi6fwXWpGhzibGvAr7H4nznnNy66AWh\r\nJoVxIPcbCxJMm8WxzD8+Jn5kVMUeX1c1b7oDUGA6o5r3RLJ7tMD0wg6TXMBi2QQ8\r\nE8tC3tTF2NC9cgTBv3xQr1hxx6KIE7oT4tShl6G+ryMtq/kNKCAu2nd1qkEzsQW2\r\npIcpKUkXBhFrFagUfOri58tKBYEFmohalqjHiEmGAOqqX0FJR7xTEBFGQnlMDUmd\r\nv7/o6swc+w2dp5T7tDtdCtlNxTG57dPndZKEMzlnue6yBtjV8ZPm7PbqSSWhiLV2\r\nZvNDZp1kH1zbeePRf+bzGU8s448RMEG9c77xyNluTJkpCq+4kRFR1aVreWgJvTh+\r\nOM45ymO4vvYa+0HWqxQUA6CPW/gMr0gkeulQb+MOv/IjpH6dZ7s=\r\n=uM20\r\n-----END PGP SIGNATURE-----\r\n\r\n```\r\n\r\n</p></details>\r\n\r\n<details><summary>Show platform data</summary>\r\n<p>\r\n\r\n```\r\nTested on Linux-5.10.0-9-amd64-x86_64-with-glibc2.28\r\n\r\nConfigured with ./configure LDFLAGS=-L/home/james/src/bitcoin/db4/lib/ CPPFLAGS=-I/home/james/src/bitcoin/db4/include/ CXXFLAGS=-fPIE -pipe -O2 -g -Wthread-safety-analysis -Wall -Werror=sign-compare -Wsign-compare -Werror=thread-safety-analysis --enable-wallet --enable-debug --with-daemon --enable-natpmp-default CXX=/usr/bin/clang++ CC=/usr/bin/clang PYTHONPATH= --disable-shared --with-pic --enable-benchmark=no --enable-module-recovery --enable-module-schnorrsig --enable-experimental --disable-openssl-tests --disable-shared --with-pic --enable-benchmark=no --enable-module-recovery --enable-module-schnorrsig --enable-experimental --disable-openssl-tests --no-create --no-recursion\r\n\r\nCompiled with /usr/bin/ccache /usr/bin/clang++ -std=c++17 -mavx -mavx2 -mpclmul -fPIE -pipe -O2 -g -Wthread-safety-analysis -Wall -Werror=sign-compare -Wsign-compare -Werror=thread-safety-analysis -O0 -g3 -ftrapv -fdebug-prefix-map=$(abs_top_srcdir)=.  -Wstack-protector -fstack-protector-all -fcf-protection=full -fstack-clash-protection -msse4 -msha -msse4.1 -msse4.2  i\r\n\r\nCompiler version: Debian clang version 13.0.1-++20211110052940+162f3f18c945-1~exp1~20211110053502.25\r\n```\r\n\r\n</p></details>\r\n\r\n",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#pullrequestreview-825534948",
      "submitted_at": "2021-12-07T16:45:24Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
    },
    {
      "event": "reviewed",
      "id": 825684290,
      "node_id": "PRR_kwDOABII584xNvFC",
      "url": null,
      "actor": null,
      "commit_id": "c6861476f7e58f7b6b2e5416d2a7b774d1796a0e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Code review ACK c6861476f7e58f7b6b2e5416d2a7b774d1796a0e. Only change since last review is rebasing after #23636\r\n\r\nMaybe this PR is ready for merge. I would still like to drop commit \r\n\"test/setup: Unify m_args and gArgs\" (4e54d903a3b4643cc6d91c899a0ac401fc8f6529) which uses `gArgs` more in tests, instead off less (https://github.com/bitcoin/bitcoin/pull/23280#discussion_r760574720)\r\n\r\nI also think argument and error code code handling here could be simplified, suggested previously in b7c7f64dc86f0fcdf07cb1e765f7cccc3a3c8897 (+129/-210) https://github.com/bitcoin/bitcoin/pull/23280#issuecomment-984149564\r\n\r\nAnd there might be some other previous suggestions from reviewers that could use followup, but overall PR is an improvement in its current form, already",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#pullrequestreview-825684290",
      "submitted_at": "2021-12-07T19:16:38Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDI0MTRlYmMxOGI4YmViZjc5YzQ3ZTU4YTQyOTNkMGZjNjQyMGE4MTE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2414ebc18b8bebf79c47e58a4293d0fc6420a811",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2414ebc18b8bebf79c47e58a4293d0fc6420a811",
      "tree": {
        "sha": "2f12fa9c8c90fda63b430dcd0ad3860ab87675cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2f12fa9c8c90fda63b430dcd0ad3860ab87675cf"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8d466a8504bfb81ce8699d650aa72ec9cc8b0a54",
          "sha": "8d466a8504bfb81ce8699d650aa72ec9cc8b0a54",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/8d466a8504bfb81ce8699d650aa72ec9cc8b0a54"
        }
      ],
      "message": "init: Delay RPC block notif until warmup finished\n\nSee added code comment for more details.",
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-12-07T19:48:06Z"
      },
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-08-18T18:36:28Z"
      },
      "sha": "2414ebc18b8bebf79c47e58a4293d0fc6420a811"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDA1NDQxYzJkYzVmNjBlMjAyNTQ3NmQ4ZWM5NGM5MDI1MDMyZDExOGM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/05441c2dc5f60e2025476d8ec94c9025032d118c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/05441c2dc5f60e2025476d8ec94c9025032d118c",
      "tree": {
        "sha": "50585cd5303a9adb3af83dfc73a2e6405400f396",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/50585cd5303a9adb3af83dfc73a2e6405400f396"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2414ebc18b8bebf79c47e58a4293d0fc6420a811",
          "sha": "2414ebc18b8bebf79c47e58a4293d0fc6420a811",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2414ebc18b8bebf79c47e58a4293d0fc6420a811"
        }
      ],
      "message": "node/chainstate: Decouple from GetTime\n\n...instead pass in a std::function<int64_t()>\n\nNote that the static_cast is needed (apparently) for the compiler to\nknow which overloaded GetTime to choose.",
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-12-07T19:48:49Z"
      },
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-09-22T19:36:10Z"
      },
      "sha": "05441c2dc5f60e2025476d8ec94c9025032d118c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDRkYTljMDc2ZDFjZjEyNzI4NzMwYmIxZjdlODkwNmQ0ZTliZmFiYTU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4da9c076d1cf12728730bb1f7e8906d4e9bfaba5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/4da9c076d1cf12728730bb1f7e8906d4e9bfaba5",
      "tree": {
        "sha": "507a2cce76d7e59f936ef54c8d822765170247a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/507a2cce76d7e59f936ef54c8d822765170247a8"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/05441c2dc5f60e2025476d8ec94c9025032d118c",
          "sha": "05441c2dc5f60e2025476d8ec94c9025032d118c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/05441c2dc5f60e2025476d8ec94c9025032d118c"
        }
      ],
      "message": "node/chainstate: Decouple from ShutdownRequested\n\n...instead allow optionally passing in a std::function<bool()>",
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-12-07T19:48:49Z"
      },
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-09-22T19:36:24Z"
      },
      "sha": "4da9c076d1cf12728730bb1f7e8906d4e9bfaba5"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDE1ZjJlMzNiYjNkMWFkM2JjOTk3ZjZhODQ5NTYzMzdmNDY0OTUwOTE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/15f2e33bb3d1ad3bc997f6a84956337f46495091",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/15f2e33bb3d1ad3bc997f6a84956337f46495091",
      "tree": {
        "sha": "f645b983981d41f2da59acd1e6c0f11c3e5a9830",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f645b983981d41f2da59acd1e6c0f11c3e5a9830"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4da9c076d1cf12728730bb1f7e8906d4e9bfaba5",
          "sha": "4da9c076d1cf12728730bb1f7e8906d4e9bfaba5",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/4da9c076d1cf12728730bb1f7e8906d4e9bfaba5"
        }
      ],
      "message": "validation: VerifyDB only needs Consensus::Params\n\nPreviously we were passing in CChainParams, when VerifyDB only needed\nthe Consensus::Params subset.",
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-12-07T19:48:49Z"
      },
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-09-20T18:02:07Z"
      },
      "sha": "15f2e33bb3d1ad3bc997f6a84956337f46495091"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGFjNGJmMTM4Yjg0OWE4NTQ0Nzk4ZjM4OTFkNjYyMzgwMzA0MGMyNjU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ac4bf138b849a8544798f3891d6623803040c265",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ac4bf138b849a8544798f3891d6623803040c265",
      "tree": {
        "sha": "7ae646405acf38322912da24a0838eaa2212c9dc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7ae646405acf38322912da24a0838eaa2212c9dc"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/15f2e33bb3d1ad3bc997f6a84956337f46495091",
          "sha": "15f2e33bb3d1ad3bc997f6a84956337f46495091",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/15f2e33bb3d1ad3bc997f6a84956337f46495091"
        }
      ],
      "message": "node/caches: Extract cache calculation logic\n\nI strongly recommend reviewing with the following git-diff flags:\n  --color-moved=dimmed_zebra --color-moved-ws=allow-indentation-change\n\n[META] In a future commit, this function will be re-used in TestingSetup\n       so that the behaviour matches across test and non-test init\n       codepaths.",
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-12-07T19:48:49Z"
      },
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-09-21T15:37:03Z"
      },
      "sha": "ac4bf138b849a8544798f3891d6623803040c265"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGNlYjk3OTAzNDE4NDM0NWE2NjJiZTRlM2IzMjdhNTczZmJiMzFjNjM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ceb979034184345a662be4e3b327a573fbb31c63",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ceb979034184345a662be4e3b327a573fbb31c63",
      "tree": {
        "sha": "849c5a7b663de29b8e39c4768dbb6887974ba454",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/849c5a7b663de29b8e39c4768dbb6887974ba454"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ac4bf138b849a8544798f3891d6623803040c265",
          "sha": "ac4bf138b849a8544798f3891d6623803040c265",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ac4bf138b849a8544798f3891d6623803040c265"
        }
      ],
      "message": "node/caches: Remove intermediate variables",
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-12-07T19:48:49Z"
      },
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-12-06T21:52:18Z"
      },
      "sha": "ceb979034184345a662be4e3b327a573fbb31c63"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGM1NDFkYTBkNjJlYWY1ZTk2ZWNhMDBkNzUwODg5OWY5OGJkZmMxYmM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c541da0d62eaf5e96eca00d7508899f98bdfc1bc",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c541da0d62eaf5e96eca00d7508899f98bdfc1bc",
      "tree": {
        "sha": "0abe8e218e7099cce8bd26c9d9ba9bb601a80bb3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0abe8e218e7099cce8bd26c9d9ba9bb601a80bb3"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ceb979034184345a662be4e3b327a573fbb31c63",
          "sha": "ceb979034184345a662be4e3b327a573fbb31c63",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ceb979034184345a662be4e3b327a573fbb31c63"
        }
      ],
      "message": "node/chainstate: Add options for in-memory DBs\n\n[META] In a future commit, these options will be used in TestingSetup to\n       ensure that the DBs are in-memory.",
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-12-07T19:48:49Z"
      },
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-09-21T16:10:51Z"
      },
      "sha": "c541da0d62eaf5e96eca00d7508899f98bdfc1bc"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDlhNWE1YTNkMDhiMmMxMzBhYjkxNDc5MTQ3MzlmZjM1ODNiMGRjODQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9a5a5a3d08b2c130ab9147914739ff3583b0dc84",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9a5a5a3d08b2c130ab9147914739ff3583b0dc84",
      "tree": {
        "sha": "0df4a51dc8b30536ff033456c7cd6b459d5d1ec4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0df4a51dc8b30536ff033456c7cd6b459d5d1ec4"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c541da0d62eaf5e96eca00d7508899f98bdfc1bc",
          "sha": "c541da0d62eaf5e96eca00d7508899f98bdfc1bc",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c541da0d62eaf5e96eca00d7508899f98bdfc1bc"
        }
      ],
      "message": "test/setup: Use LoadChainstate\n\nThis commit coalesces the chainstate loading sequence between our unit\ntest and non-unit test init codepaths.",
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-12-07T19:48:49Z"
      },
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-09-21T18:09:23Z"
      },
      "sha": "9a5a5a3d08b2c130ab9147914739ff3583b0dc84"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDNiMTU4NGI3OTQ0OTkxNThlMGRmMDdiZDFiZWUxYjgwM2M1Njg2MTQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3b1584b794499158e0df07bd1bee1b803c568614",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3b1584b794499158e0df07bd1bee1b803c568614",
      "tree": {
        "sha": "0110374a1ee32e9e62541f523d3fe41dec306c2f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0110374a1ee32e9e62541f523d3fe41dec306c2f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9a5a5a3d08b2c130ab9147914739ff3583b0dc84",
          "sha": "9a5a5a3d08b2c130ab9147914739ff3583b0dc84",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9a5a5a3d08b2c130ab9147914739ff3583b0dc84"
        }
      ],
      "message": "Remove all #include // for * comments",
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-12-07T19:48:49Z"
      },
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-11-11T19:40:50Z"
      },
      "sha": "3b1584b794499158e0df07bd1bee1b803c568614"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDg5YmVjODI3ZmRlYTFjZWRkNTYwYmU4NTIwMWYwNGUwYTc4YWE0OGQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/89bec827fdea1cedd560be85201f04e0a78aa48d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/89bec827fdea1cedd560be85201f04e0a78aa48d",
      "tree": {
        "sha": "c4cb48a2f478dd98528e000495db459ad5d49449",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c4cb48a2f478dd98528e000495db459ad5d49449"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3b1584b794499158e0df07bd1bee1b803c568614",
          "sha": "3b1584b794499158e0df07bd1bee1b803c568614",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/3b1584b794499158e0df07bd1bee1b803c568614"
        }
      ],
      "message": "Collapse the 2 cs_main locks in LoadChainstate",
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-12-07T19:48:49Z"
      },
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-11-12T23:25:54Z"
      },
      "sha": "89bec827fdea1cedd560be85201f04e0a78aa48d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDdmMTVlZmYyZGRkODYwMzRlODRhMTk0MTNlMWE0Mjg4Mzk4N2Y2NjA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7f15eff2ddd86034e84a19413e1a42883987f660",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/7f15eff2ddd86034e84a19413e1a42883987f660",
      "tree": {
        "sha": "4743f3c75f2504aaca19c9c7bb1f34e5ca71c1f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4743f3c75f2504aaca19c9c7bb1f34e5ca71c1f2"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/89bec827fdea1cedd560be85201f04e0a78aa48d",
          "sha": "89bec827fdea1cedd560be85201f04e0a78aa48d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/89bec827fdea1cedd560be85201f04e0a78aa48d"
        }
      ],
      "message": "style-only: Remove redundant scope in *Chainstate\n\nI strongly recommend reviewing with the following git-diff flags:\n  --ignore-space-change",
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-12-07T19:48:49Z"
      },
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-12-07T17:06:03Z"
      },
      "sha": "7f15eff2ddd86034e84a19413e1a42883987f660"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5729736387,
      "node_id": "HRFPE_lADOABII5849MHszzwAAAAFVhNbD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5729736387",
      "actor": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-07T19:58:37Z"
    },
    {
      "event": "commented",
      "id": 988227398,
      "node_id": "IC_kwDOABII58465ydG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/988227398",
      "actor": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-07T20:03:31Z",
      "updated_at": "2021-12-07T20:03:31Z",
      "author_association": "MEMBER",
      "body": "Pushed c6861476f7e58f7b6b2e5416d2a7b774d1796a0e -> 7f15eff2ddd86034e84a19413e1a42883987f660\r\n- Use `std::function`'s inherent nullability (https://github.com/bitcoin/bitcoin/pull/23280#discussion_r760598661)\r\n- Added code comment in commit \"init: Delay RPC block notif until warmup finished\" (https://github.com/bitcoin/bitcoin/pull/23280#discussion_r760525288)\r\n- Added commit removing intermediate variables in `CalculateCacheSizes` (https://github.com/bitcoin/bitcoin/pull/23280#discussion_r760560829)\r\n- Removed commit \"test/setup: Unify m_args and gArgs\" (https://github.com/bitcoin/bitcoin/pull/23280#discussion_r760574720)\r\n- Added commit \"style-only: Remove redundant scope in *Chainstate\" (https://github.com/bitcoin/bitcoin/pull/23280#discussion_r762078294, https://github.com/bitcoin/bitcoin/pull/23280#discussion_r762079030)",
      "user": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#issuecomment-988227398",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23280"
    },
    {
      "event": "commented",
      "id": 988228044,
      "node_id": "IC_kwDOABII58465ynM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/988228044",
      "actor": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-07T20:04:32Z",
      "updated_at": "2021-12-07T20:04:32Z",
      "author_association": "MEMBER",
      "body": "> I also think argument and error code code handling here could be simplified, suggested previously in [b7c7f64](https://github.com/bitcoin/bitcoin/commit/b7c7f64dc86f0fcdf07cb1e765f7cccc3a3c8897) (+129/-210) [#23280 (comment)](https://github.com/bitcoin/bitcoin/pull/23280#issuecomment-984149564)\r\n\r\nI think we could put that in a followup PR for discussion, perhaps along with https://github.com/bitcoin/bitcoin/pull/23280#discussion_r762083060",
      "user": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#issuecomment-988228044",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23280"
    },
    {
      "event": "reviewed",
      "id": 825752192,
      "node_id": "PRR_kwDOABII584xN_qA",
      "url": null,
      "actor": null,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Code review ACK 7f15eff2ddd86034e84a19413e1a42883987f660. Thanks for updates!",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#pullrequestreview-825752192",
      "submitted_at": "2021-12-07T20:38:03Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
    },
    {
      "event": "reviewed",
      "id": 826601342,
      "node_id": "PRR_kwDOABII584xRO9-",
      "url": null,
      "actor": null,
      "commit_id": "c541da0d62eaf5e96eca00d7508899f98bdfc1bc",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#pullrequestreview-826601342",
      "submitted_at": "2021-12-08T15:42:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
    },
    {
      "event": "reviewed",
      "id": 826692527,
      "node_id": "PRR_kwDOABII584xRlOv",
      "url": null,
      "actor": null,
      "commit_id": "05441c2dc5f60e2025476d8ec94c9025032d118c",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#pullrequestreview-826692527",
      "submitted_at": "2021-12-08T16:58:10Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
    },
    {
      "event": "commented",
      "id": 989010326,
      "node_id": "IC_kwDOABII58468xmW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/989010326",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-08T17:16:23Z",
      "updated_at": "2021-12-08T17:16:23Z",
      "author_association": "MEMBER",
      "body": "Code review ACK\r\nThis is a big refactor but I think it moves things in the right direction:\r\n- Some welcome decoupling, only passing things to functions which they need is great\r\n- Much better to use error codes than string-y errors\r\n- Nice to have `CalculateCacheSizes` return a structure rather than the usual way with tons of output argument",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#issuecomment-989010326",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23280"
    },
    {
      "event": "commented",
      "id": 989047194,
      "node_id": "IC_kwDOABII584686ma",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/989047194",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-08T18:03:45Z",
      "updated_at": "2021-12-08T18:03:45Z",
      "author_association": "MEMBER",
      "body": "I'll reACK after the `MAX_FUTURE_BLOCK_TIME` rebase reversion is fixed",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#issuecomment-989047194",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23280"
    },
    {
      "event": "reviewed",
      "id": 829020675,
      "node_id": "PRR_kwDOABII584xadoD",
      "url": null,
      "actor": null,
      "commit_id": "ae9121f958a4124ea6238cad0c3f2acb8b9eb4bb",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "review ACK 7f15eff2ddd86034e84a19413e1a42883987f66 💳\r\n\r\n<details><summary>Show signature</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nreview ACK 7f15eff2ddd86034e84a19413e1a42883987f66 💳\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUhRtAv+ICYz6n3kVKJ2bJ1tF9yGZ2fyPthEKAjS/ZUsTPpa2PtQaIhogbJWd3JQ\r\nBsSdTafJk6P9+ODsSyuzwBYZ1NhBwSDS+PtWjvTOV0i5qE04v3Axd8naRWi2GEj+\r\ncai53kzt8vteJdLCq4clcLUsGwfqm1GtWFbZo0gzpZUwBBzR0a4d8w3cEZx8GTL6\r\nS9kvXOKxvnD07B1s+3BXC9bCksJvpAmAAg5U+mU2X0nKOTvlVU0EypZiZ0Ho2Adg\r\nNdRFHUAo2ZSaqvL1nccsmNxJIWvDBKowAwoZFOLsGkJ00YjajBGQW6lyfglb3UO3\r\n9YmFJ1h52sMDKJTL+dYIRvqJrAZ5rKaXgT271+UwvGmxe4Tw2pIn+7cAccypVsXr\r\n9MiwMXnoyYwoCa/5qHz6Pb8VOlpbcYAdrQ1KL1DZ64VKZPEgsCCqGjRvVkarn3WD\r\nj/2UFbANtOkUcorc4A9JgWcAskOXeMF+Bs2ApQWbxVuMsSDXwdNfT3C5C+7tMlhY\r\nqrz4e3ru\r\n=BAAV\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n\r\n</details>\r\n",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#pullrequestreview-829020675",
      "submitted_at": "2021-12-10T16:16:24Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
    },
    {
      "event": "merged",
      "id": 5748784157,
      "node_id": "ME_lADOABII5849MHszzwAAAAFWp3wd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5748784157",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "a06364741358feae04813050e4225eb43fc386e3",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a06364741358feae04813050e4225eb43fc386e3",
      "created_at": "2021-12-10T16:19:20Z"
    },
    {
      "event": "closed",
      "id": 5748784171,
      "node_id": "CE_lADOABII5849MHszzwAAAAFWp3wr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5748784171",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-10T16:19:20Z"
    },
    {
      "event": "comment_deleted",
      "id": 5748844858,
      "node_id": "CDE_lADOABII5849MHszzwAAAAFWqGk6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5748844858",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-10T16:29:33Z"
    },
    {
      "event": "referenced",
      "id": 5750236876,
      "node_id": "REFE_lADOABII5849MHszzwAAAAFWvabM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5750236876",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "355097a225f60723207268cbfec025f9459a962c",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/355097a225f60723207268cbfec025f9459a962c",
      "created_at": "2021-12-10T21:40:56Z"
    },
    {
      "event": "referenced",
      "id": 5807338007,
      "node_id": "REFE_lADOABII5849MHszzwAAAAFaJPIX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5807338007",
      "actor": {
        "login": "RandyMcMillan",
        "id": 152159,
        "node_id": "MDQ6VXNlcjE1MjE1OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/152159?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RandyMcMillan",
        "html_url": "https://github.com/RandyMcMillan",
        "followers_url": "https://api.github.com/users/RandyMcMillan/followers",
        "following_url": "https://api.github.com/users/RandyMcMillan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RandyMcMillan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RandyMcMillan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RandyMcMillan/subscriptions",
        "organizations_url": "https://api.github.com/users/RandyMcMillan/orgs",
        "repos_url": "https://api.github.com/users/RandyMcMillan/repos",
        "events_url": "https://api.github.com/users/RandyMcMillan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RandyMcMillan/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "daf6dfaddc58ec363745f5af74e6312df04289bf",
      "commit_url": "https://api.github.com/repos/RandyMcMillan/mempool-tab/commits/daf6dfaddc58ec363745f5af74e6312df04289bf",
      "created_at": "2021-12-23T00:12:20Z"
    },
    {
      "event": "referenced",
      "id": 5807848093,
      "node_id": "REFE_lADOABII5849MHszzwAAAAFaLLqd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5807848093",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "f5c678e5c3f013520078768027cc8ff860a15279",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5c678e5c3f013520078768027cc8ff860a15279",
      "created_at": "2021-12-23T04:10:39Z"
    },
    {
      "event": "commented",
      "id": 1000098754,
      "node_id": "IC_kwDOABII5847nEvC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1000098754",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-23T07:23:40Z",
      "updated_at": "2021-12-23T07:23:40Z",
      "author_association": "MEMBER",
      "body": "@dongcarl Are you going to address the feedback or do you want someone else to do it? Either is fine, just let us know.",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#issuecomment-1000098754",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23280"
    },
    {
      "event": "mentioned",
      "id": 5808357251,
      "node_id": "MEE_lADOABII5849MHszzwAAAAFaNH-D",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5808357251",
      "actor": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-23T07:23:40Z"
    },
    {
      "event": "subscribed",
      "id": 5808357254,
      "node_id": "SE_lADOABII5849MHszzwAAAAFaNH-G",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5808357254",
      "actor": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-23T07:23:41Z"
    },
    {
      "event": "commented",
      "id": 1000553037,
      "node_id": "IC_kwDOABII5847ozpN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1000553037",
      "actor": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-23T22:50:23Z",
      "updated_at": "2021-12-23T22:50:23Z",
      "author_association": "MEMBER",
      "body": "@MarcoFalke Thanks for the reminder! Opened #23855.",
      "user": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#issuecomment-1000553037",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/23280"
    },
    {
      "event": "mentioned",
      "id": 5811780545,
      "node_id": "MEE_lADOABII5849MHszzwAAAAFaaLvB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5811780545",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-23T22:50:23Z"
    },
    {
      "event": "subscribed",
      "id": 5811780550,
      "node_id": "SE_lADOABII5849MHszzwAAAAFaaLvG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5811780550",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-23T22:50:23Z"
    },
    {
      "event": "referenced",
      "id": 5816333176,
      "node_id": "REFE_lADOABII5849MHszzwAAAAFarjN4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5816333176",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "99d9e47d60f9f752a4cac93beaf7c69be3fc4300",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/99d9e47d60f9f752a4cac93beaf7c69be3fc4300",
      "created_at": "2021-12-27T03:22:29Z"
    },
    {
      "event": "referenced",
      "id": 5852106826,
      "node_id": "REFE_lADOABII5849MHszzwAAAAFc0BBK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5852106826",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "3917dff732b48e1b994dc199f91d11e9074e449f",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3917dff732b48e1b994dc199f91d11e9074e449f",
      "created_at": "2022-01-06T12:57:45Z"
    },
    {
      "event": "subscribed",
      "id": 7547057787,
      "node_id": "SE_lADOABII5849MHszzwAAAAHB1vZ7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7547057787",
      "actor": {
        "login": "Leylimahmud",
        "id": 99537361,
        "node_id": "U_kgDOBe7R0Q",
        "avatar_url": "https://avatars.githubusercontent.com/u/99537361?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Leylimahmud",
        "html_url": "https://github.com/Leylimahmud",
        "followers_url": "https://api.github.com/users/Leylimahmud/followers",
        "following_url": "https://api.github.com/users/Leylimahmud/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Leylimahmud/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Leylimahmud/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Leylimahmud/subscriptions",
        "organizations_url": "https://api.github.com/users/Leylimahmud/orgs",
        "repos_url": "https://api.github.com/users/Leylimahmud/repos",
        "events_url": "https://api.github.com/users/Leylimahmud/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Leylimahmud/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-07T23:34:59Z"
    },
    {
      "event": "referenced",
      "id": 7860557754,
      "node_id": "REFE_lADOABII5849MHszzwAAAAHUhpe6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7860557754",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "af94e524721528a6501dec20e7e34b2a6ac4bdb2",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/af94e524721528a6501dec20e7e34b2a6ac4bdb2",
      "created_at": "2022-11-21T19:30:26Z"
    },
    {
      "event": "referenced",
      "id": 7860557763,
      "node_id": "REFE_lADOABII5849MHszzwAAAAHUhpfD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7860557763",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "d0f1c29cd5c4dc4b55cca5403bb1ff125ebc2caa",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/d0f1c29cd5c4dc4b55cca5403bb1ff125ebc2caa",
      "created_at": "2022-11-21T19:30:26Z"
    },
    {
      "event": "referenced",
      "id": 7860557774,
      "node_id": "REFE_lADOABII5849MHszzwAAAAHUhpfO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7860557774",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "b9aeba3d9ca9b00faaa6094ee5a9494da4fa2bfe",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/b9aeba3d9ca9b00faaa6094ee5a9494da4fa2bfe",
      "created_at": "2022-11-21T19:30:26Z"
    },
    {
      "event": "referenced",
      "id": 7867919379,
      "node_id": "REFE_lADOABII5849MHszzwAAAAHU9uwT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7867919379",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "c899aedf2926a52f97b36e3f42e4f2b8c94ada78",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/c899aedf2926a52f97b36e3f42e4f2b8c94ada78",
      "created_at": "2022-11-22T13:30:26Z"
    },
    {
      "event": "referenced",
      "id": 7867919413,
      "node_id": "REFE_lADOABII5849MHszzwAAAAHU9uw1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7867919413",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "f57aef1d018f3cb6cd8af770a32acdd27c2ed5e1",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/f57aef1d018f3cb6cd8af770a32acdd27c2ed5e1",
      "created_at": "2022-11-22T13:30:26Z"
    },
    {
      "event": "referenced",
      "id": 7867919439,
      "node_id": "REFE_lADOABII5849MHszzwAAAAHU9uxP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7867919439",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "aa1cc478e2e9e1ce39172bfe8dac7afe64775076",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/aa1cc478e2e9e1ce39172bfe8dac7afe64775076",
      "created_at": "2022-11-22T13:30:26Z"
    },
    {
      "event": "referenced",
      "id": 7867919461,
      "node_id": "REFE_lADOABII5849MHszzwAAAAHU9uxl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7867919461",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "6df390479a247eedc217cc0a856575fe5a212745",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/6df390479a247eedc217cc0a856575fe5a212745",
      "created_at": "2022-11-22T13:30:27Z"
    },
    {
      "event": "referenced",
      "id": 7867919489,
      "node_id": "REFE_lADOABII5849MHszzwAAAAHU9uyB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7867919489",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "98e2e28c1a54d7187919e65298435b7bfbe720aa",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/98e2e28c1a54d7187919e65298435b7bfbe720aa",
      "created_at": "2022-11-22T13:30:27Z"
    },
    {
      "event": "referenced",
      "id": 7867919519,
      "node_id": "REFE_lADOABII5849MHszzwAAAAHU9uyf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7867919519",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "9a6c655473a93109ca8901462f1d4da631340d23",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/9a6c655473a93109ca8901462f1d4da631340d23",
      "created_at": "2022-11-22T13:30:27Z"
    },
    {
      "event": "referenced",
      "id": 7867919552,
      "node_id": "REFE_lADOABII5849MHszzwAAAAHU9uzA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7867919552",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "9d2aaee4925ecfe06920c537ae0b890e67328c1b",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/9d2aaee4925ecfe06920c537ae0b890e67328c1b",
      "created_at": "2022-11-22T13:30:27Z"
    },
    {
      "event": "referenced",
      "id": 7867919578,
      "node_id": "REFE_lADOABII5849MHszzwAAAAHU9uza",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7867919578",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "9439a964d2838045d144850b979ab4951066f994",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/9439a964d2838045d144850b979ab4951066f994",
      "created_at": "2022-11-22T13:30:27Z"
    },
    {
      "event": "referenced",
      "id": 7867919614,
      "node_id": "REFE_lADOABII5849MHszzwAAAAHU9uz-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7867919614",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "2e6d9aa12e7839ceab868d1a2fbd63d6753add55",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/2e6d9aa12e7839ceab868d1a2fbd63d6753add55",
      "created_at": "2022-11-22T13:30:27Z"
    },
    {
      "event": "referenced",
      "id": 7871134361,
      "node_id": "REFE_lADOABII5849MHszzwAAAAHVJ_qZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7871134361",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "ef89e93b7c35d2fb5e476576e4f7d6ca25ae1d40",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/ef89e93b7c35d2fb5e476576e4f7d6ca25ae1d40",
      "created_at": "2022-11-22T19:40:20Z"
    },
    {
      "event": "referenced",
      "id": 7871134377,
      "node_id": "REFE_lADOABII5849MHszzwAAAAHVJ_qp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7871134377",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "c333cb502df64257687048d21334dbd719378da2",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/c333cb502df64257687048d21334dbd719378da2",
      "created_at": "2022-11-22T19:40:20Z"
    },
    {
      "event": "referenced",
      "id": 7871134396,
      "node_id": "REFE_lADOABII5849MHszzwAAAAHVJ_q8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7871134396",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "8d9a8aa4ce6c9c16d2c288511bf24e920d8d98d3",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/8d9a8aa4ce6c9c16d2c288511bf24e920d8d98d3",
      "created_at": "2022-11-22T19:40:20Z"
    },
    {
      "event": "referenced",
      "id": 7871134410,
      "node_id": "REFE_lADOABII5849MHszzwAAAAHVJ_rK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7871134410",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "21ce559101419c47ec8f8cc7148b85fa8139a6b6",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/21ce559101419c47ec8f8cc7148b85fa8139a6b6",
      "created_at": "2022-11-22T19:40:20Z"
    },
    {
      "event": "referenced",
      "id": 7871134428,
      "node_id": "REFE_lADOABII5849MHszzwAAAAHVJ_rc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7871134428",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "39acc8c969990d334b4e6f6a34efd35a26269eb6",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/39acc8c969990d334b4e6f6a34efd35a26269eb6",
      "created_at": "2022-11-22T19:40:20Z"
    },
    {
      "event": "referenced",
      "id": 7871134435,
      "node_id": "REFE_lADOABII5849MHszzwAAAAHVJ_rj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7871134435",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "19ca6c853413d09563ebea6eb892b8a774865371",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/19ca6c853413d09563ebea6eb892b8a774865371",
      "created_at": "2022-11-22T19:40:20Z"
    },
    {
      "event": "referenced",
      "id": 7871134444,
      "node_id": "REFE_lADOABII5849MHszzwAAAAHVJ_rs",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7871134444",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "d4573e2b1d2c56c55eb10a6b2c855c4dda66f233",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/d4573e2b1d2c56c55eb10a6b2c855c4dda66f233",
      "created_at": "2022-11-22T19:40:21Z"
    },
    {
      "event": "referenced",
      "id": 7871134453,
      "node_id": "REFE_lADOABII5849MHszzwAAAAHVJ_r1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7871134453",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "275c7dfdd20540e12a7a01270fd46fe31b681962",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/275c7dfdd20540e12a7a01270fd46fe31b681962",
      "created_at": "2022-11-22T19:40:21Z"
    },
    {
      "event": "referenced",
      "id": 7871134462,
      "node_id": "REFE_lADOABII5849MHszzwAAAAHVJ_r-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7871134462",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "8769f8facbbec7e8996f86f9cb99855b77f26c16",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/8769f8facbbec7e8996f86f9cb99855b77f26c16",
      "created_at": "2022-11-22T19:40:21Z"
    },
    {
      "event": "referenced",
      "id": 7871134474,
      "node_id": "REFE_lADOABII5849MHszzwAAAAHVJ_sK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7871134474",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "b512db11f9cfc895909240680dc9f6ecdbe2f661",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/b512db11f9cfc895909240680dc9f6ecdbe2f661",
      "created_at": "2022-11-22T19:40:21Z"
    },
    {
      "event": "locked",
      "id": 8102279897,
      "node_id": "LOE_lADOABII5849MHszzwAAAAHi7vrZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8102279897",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-23T10:04:22Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/729149055",
      "pull_request_review_id": 779992528,
      "id": 729149055,
      "node_id": "PRRC_kwDOABII584rde5_",
      "diff_hunk": "@@ -24,6 +24,8 @@\n #include <index/blockfilterindex.h>\n #include <index/coinstatsindex.h>\n #include <index/txindex.h>\n+#include <init/caches.h> // for CalculateCacheSizes\n+#include <init/chainstate.h> // for LoadChainstateSequence",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "29c5c2b4700aa3f537e7291971dbd763469fce1c",
      "in_reply_to_id": null,
      "user": {
        "login": "Empact",
        "id": 5470,
        "node_id": "MDQ6VXNlcjU0NzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Empact",
        "html_url": "https://github.com/Empact",
        "followers_url": "https://api.github.com/users/Empact/followers",
        "following_url": "https://api.github.com/users/Empact/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Empact/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Empact/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
        "organizations_url": "https://api.github.com/users/Empact/orgs",
        "repos_url": "https://api.github.com/users/Empact/repos",
        "events_url": "https://api.github.com/users/Empact/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Empact/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: FYI @fanquake is discouraging \"for\" comments: https://github.com/bitcoin/bitcoin/pull/15294#pullrequestreview-779241491",
      "created_at": "2021-10-14T16:25:36Z",
      "updated_at": "2021-10-14T16:25:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r729149055",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/729149055"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/739412808",
      "pull_request_review_id": 793288260,
      "id": 739412808,
      "node_id": "PRRC_kwDOABII584sEotI",
      "diff_hunk": "@@ -1361,217 +1363,100 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     bool fReindexChainState = args.GetBoolArg(\"-reindex-chainstate\", false);\n \n     // cache size calculations\n-    int64_t nTotalCache = (args.GetIntArg(\"-dbcache\", nDefaultDbCache) << 20);\n-    nTotalCache = std::max(nTotalCache, nMinDbCache << 20); // total cache cannot be less than nMinDbCache\n-    nTotalCache = std::min(nTotalCache, nMaxDbCache << 20); // total cache cannot be greater than nMaxDbcache\n-    int64_t nBlockTreeDBCache = std::min(nTotalCache / 8, nMaxBlockDBCache << 20);\n-    nTotalCache -= nBlockTreeDBCache;\n-    int64_t nTxIndexCache = std::min(nTotalCache / 8, args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX) ? nMaxTxIndexCache << 20 : 0);\n-    nTotalCache -= nTxIndexCache;\n-    int64_t filter_index_cache = 0;\n-    if (!g_enabled_filter_types.empty()) {\n-        size_t n_indexes = g_enabled_filter_types.size();\n-        int64_t max_cache = std::min(nTotalCache / 8, max_filter_index_cache << 20);\n-        filter_index_cache = max_cache / n_indexes;\n-        nTotalCache -= filter_index_cache * n_indexes;\n-    }\n-    int64_t nCoinDBCache = std::min(nTotalCache / 2, (nTotalCache / 4) + (1 << 23)); // use 25%-50% of the remainder for disk cache\n-    nCoinDBCache = std::min(nCoinDBCache, nMaxCoinsDBCache << 20); // cap total coins db cache\n-    nTotalCache -= nCoinDBCache;\n-    int64_t nCoinCacheUsage = nTotalCache; // the rest goes to in-memory cache\n+    CacheSizes cache_sizes;\n+    CalculateCacheSizes(args, cache_sizes, g_enabled_filter_types.size());\n+\n     int64_t nMempoolSizeMax = args.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     LogPrintf(\"Cache configuration:\\n\");\n-    LogPrintf(\"* Using %.1f MiB for block index database\\n\", nBlockTreeDBCache * (1.0 / 1024 / 1024));\n+    LogPrintf(\"* Using %.1f MiB for block index database\\n\", cache_sizes.block_tree_db_cache_size * (1.0 / 1024 / 1024));\n     if (args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n-        LogPrintf(\"* Using %.1f MiB for transaction index database\\n\", nTxIndexCache * (1.0 / 1024 / 1024));\n+        LogPrintf(\"* Using %.1f MiB for transaction index database\\n\", cache_sizes.tx_index_cache_size * (1.0 / 1024 / 1024));\n     }\n     for (BlockFilterType filter_type : g_enabled_filter_types) {\n         LogPrintf(\"* Using %.1f MiB for %s block filter index database\\n\",\n-                  filter_index_cache * (1.0 / 1024 / 1024), BlockFilterTypeName(filter_type));\n+                  cache_sizes.filter_index_cache_size * (1.0 / 1024 / 1024), BlockFilterTypeName(filter_type));\n     }\n-    LogPrintf(\"* Using %.1f MiB for chain state database\\n\", nCoinDBCache * (1.0 / 1024 / 1024));\n-    LogPrintf(\"* Using %.1f MiB for in-memory UTXO set (plus up to %.1f MiB of unused mempool space)\\n\", nCoinCacheUsage * (1.0 / 1024 / 1024), nMempoolSizeMax * (1.0 / 1024 / 1024));\n+    LogPrintf(\"* Using %.1f MiB for chain state database\\n\", cache_sizes.coin_db_cache_size * (1.0 / 1024 / 1024));\n+    LogPrintf(\"* Using %.1f MiB for in-memory UTXO set (plus up to %.1f MiB of unused mempool space)\\n\", cache_sizes.coin_cache_usage_size * (1.0 / 1024 / 1024), nMempoolSizeMax * (1.0 / 1024 / 1024));\n \n     bool fLoaded = false;\n     while (!fLoaded && !ShutdownRequested()) {\n         const bool fReset = fReindex;\n-        auto is_coinsview_empty = [&](CChainState* chainstate) EXCLUSIVE_LOCKS_REQUIRED(::cs_main) {\n-            return fReset || fReindexChainState || chainstate->CoinsTip().GetBestBlock().IsNull();\n-        };\n         bilingual_str strLoadError;\n \n         uiInterface.InitMessage(_(\"Loading block index…\").translated);\n-\n-        do {\n-            const int64_t load_block_index_start_time = GetTimeMillis();\n-            try {\n-                LOCK(cs_main);\n-                chainman.InitializeChainstate(Assert(node.mempool.get()));\n-                chainman.m_total_coinstip_cache = nCoinCacheUsage;\n-                chainman.m_total_coinsdb_cache = nCoinDBCache;\n-\n-                UnloadBlockIndex(node.mempool.get(), chainman);\n-\n-                auto& pblocktree{chainman.m_blockman.m_block_tree_db};\n-                // new CBlockTreeDB tries to delete the existing file, which\n-                // fails if it's still open from the previous loop. Close it first:\n-                pblocktree.reset();\n-                pblocktree.reset(new CBlockTreeDB(nBlockTreeDBCache, false, fReset));\n-\n-                if (fReset) {\n-                    pblocktree->WriteReindexing(true);\n-                    //If we're reindexing in prune mode, wipe away unusable block files and all undo data files\n-                    if (fPruneMode)\n-                        CleanupBlockRevFiles();\n-                }\n-\n-                if (ShutdownRequested()) break;\n-\n-                // LoadBlockIndex will load fHavePruned if we've ever removed a\n-                // block file from disk.\n-                // Note that it also sets fReindex based on the disk flag!\n-                // From here on out fReindex and fReset mean something different!\n-                if (!chainman.LoadBlockIndex()) {\n-                    if (ShutdownRequested()) break;\n-                    strLoadError = _(\"Error loading block database\");\n-                    break;\n-                }\n-\n-                // If the loaded chain has a wrong genesis, bail out immediately\n-                // (we're likely using a testnet datadir, or the other way around).\n-                if (!chainman.BlockIndex().empty() &&\n-                        !chainman.m_blockman.LookupBlockIndex(chainparams.GetConsensus().hashGenesisBlock)) {\n-                    return InitError(_(\"Incorrect or no genesis block found. Wrong datadir for network?\"));\n-                }\n-\n-                // Check for changed -prune state.  What we are concerned about is a user who has pruned blocks\n-                // in the past, but is now trying to run unpruned.\n-                if (fHavePruned && !fPruneMode) {\n-                    strLoadError = _(\"You need to rebuild the database using -reindex to go back to unpruned mode.  This will redownload the entire blockchain\");\n-                    break;\n-                }\n-\n-                // At this point blocktree args are consistent with what's on disk.\n-                // If we're not mid-reindex (based on disk + args), add a genesis block on disk\n-                // (otherwise we use the one already on disk).\n-                // This is called again in ThreadImport after the reindex completes.\n-                if (!fReindex && !chainman.ActiveChainstate().LoadGenesisBlock()) {\n-                    strLoadError = _(\"Error initializing block database\");\n-                    break;\n-                }\n-\n-                // At this point we're either in reindex or we've loaded a useful\n-                // block tree into BlockIndex()!\n-\n-                bool failed_chainstate_init = false;\n-\n-                for (CChainState* chainstate : chainman.GetAll()) {\n-                    chainstate->InitCoinsDB(\n-                        /* cache_size_bytes */ nCoinDBCache,\n-                        /* in_memory */ false,\n-                        /* should_wipe */ fReset || fReindexChainState);\n-\n-                    chainstate->CoinsErrorCatcher().AddReadErrCallback([]() {\n-                        uiInterface.ThreadSafeMessageBox(\n-                            _(\"Error reading from database, shutting down.\"),\n-                            \"\", CClientUIInterface::MSG_ERROR);\n-                    });\n-\n-                    // If necessary, upgrade from older database format.\n-                    // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                    if (!chainstate->CoinsDB().Upgrade()) {\n-                        strLoadError = _(\"Error upgrading chainstate database\");\n-                        failed_chainstate_init = true;\n-                        break;\n-                    }\n-\n-                    // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                    if (!chainstate->ReplayBlocks()) {\n-                        strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\");\n-                        failed_chainstate_init = true;\n-                        break;\n-                    }\n-\n-                    // The on-disk coinsdb is now in a good state, create the cache\n-                    chainstate->InitCoinsCache(nCoinCacheUsage);\n-                    assert(chainstate->CanFlushToDisk());\n-\n-                    if (!is_coinsview_empty(chainstate)) {\n-                        // LoadChainTip initializes the chain based on CoinsTip()'s best block\n-                        if (!chainstate->LoadChainTip()) {\n-                            strLoadError = _(\"Error initializing block database\");\n-                            failed_chainstate_init = true;\n-                            break; // out of the per-chainstate loop\n-                        }\n-                        assert(chainstate->m_chain.Tip() != nullptr);\n-                    }\n-                }\n-\n-                if (failed_chainstate_init) {\n-                    break; // out of the chainstate activation do-while\n-                }\n-            } catch (const std::exception& e) {\n-                LogPrintf(\"%s\\n\", e.what());\n-                strLoadError = _(\"Error opening block database\");\n+        const int64_t load_block_index_start_time = GetTimeMillis();\n+        std::optional<ChainstateLoadingError> rv;\n+        try {\n+            rv = LoadChainstateSequence(fReset,\n+                                        chainman,\n+                                        Assert(node.mempool.get()),\n+                                        fPruneMode,\n+                                        chainparams.GetConsensus(),\n+                                        fReindexChainState,\n+                                        cache_sizes.block_tree_db_cache_size,\n+                                        cache_sizes.coin_db_cache_size,\n+                                        cache_sizes.coin_cache_usage_size,\n+                                        args.GetIntArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS),\n+                                        args.GetIntArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n+                                        false,\n+                                        false,\n+                                        GetAdjustedTime,\n+                                        ShutdownRequested,\n+                                        []() {\n+                                            uiInterface.ThreadSafeMessageBox(\n+                                                _(\"Error reading from database, shutting down.\"),\n+                                                \"\", CClientUIInterface::MSG_ERROR);\n+                                        },\n+                                        []() {\n+                                            uiInterface.InitMessage(_(\"Verifying blocks…\").translated);\n+                                        });\n+        } catch (const std::exception& e) {\n+            LogPrintf(\"%s\\n\", e.what()); // XXX",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 209,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "7dd898c0df678859ca92773b6990e4e28a83ab24",
      "in_reply_to_id": null,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "cd29d334a3 \r\n\r\n`XXX` to be removed/addressed?",
      "created_at": "2021-10-29T17:22:02Z",
      "updated_at": "2021-10-29T18:16:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r739412808",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/739412808"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1415,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/739424818",
      "pull_request_review_id": 793288260,
      "id": 739424818,
      "node_id": "PRRC_kwDOABII584sEroy",
      "diff_hunk": "@@ -3764,6 +3764,7 @@ bool CChainState::LoadChainTip()\n     PruneBlockIndexCandidates();\n \n     tip = m_chain.Tip();\n+    uiInterface.NotifyBlockTip(GetSynchronizationState(IsInitialBlockDownload()), tip);",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "7dd898c0df678859ca92773b6990e4e28a83ab24",
      "in_reply_to_id": null,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "b229024932 \r\n\r\nNote for other reviewers: NotifyBlockTip -> RPCNotifyBlockChange(tip) is performed here: https://github.com/jamesob/bitcoin/blob/master/src/init.cpp#L343-L347\r\n\r\nAlso note that `uiInterface.NotifyBlockTip()` is already called from within other `CChainState` methods (e.g. `ActivateBestChain()`), so there's no concern about introducing exposure to a global in CChainState code.",
      "created_at": "2021-10-29T17:41:51Z",
      "updated_at": "2021-10-29T18:16:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r739424818",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/739424818"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3767,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/739436153",
      "pull_request_review_id": 793288260,
      "id": 739436153,
      "node_id": "PRRC_kwDOABII584sEuZ5",
      "diff_hunk": "@@ -0,0 +1,36 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <init/caches.h>\n+\n+#include <txdb.h>\n+#include <util/system.h>\n+#include <validation.h>\n+\n+void CalculateCacheSizes(const ArgsManager& args, CacheSizes& cache_sizes, size_t n_indexes)",
      "path": "src/init/caches.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "7dd898c0df678859ca92773b6990e4e28a83ab24",
      "in_reply_to_id": null,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "1f966b8d9f\r\n\r\nOne naive question here might be: why are we using a mutable arg for `cache_sizes` vs. just returning a constructed `CacheSizes` instance to make the function pure? Answer seems to be that this is used within a unittest context to modify an existing `m_cache_sizes` instance.",
      "created_at": "2021-10-29T18:00:43Z",
      "updated_at": "2021-10-29T18:16:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r739436153",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/739436153"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 11,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743133511",
      "pull_request_review_id": 798165689,
      "id": 743133511,
      "node_id": "PRRC_kwDOABII584sS1FH",
      "diff_hunk": "@@ -0,0 +1,30 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INIT_CHAINSTATE_H\n+#define BITCOIN_INIT_CHAINSTATE_H\n+\n+#include <cstdint> // for int64_t\n+\n+class ArgsManager;\n+struct bilingual_str;\n+class CChainParams;\n+class CClientUIInterface;\n+class ChainstateManager;\n+struct NodeContext;\n+\n+bool LoadChainstateSequence(bool& fLoaded,",
      "path": "src/init/chainstate.h",
      "position": null,
      "original_position": 17,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "83ed7db27b4c4798666b77d83fc8e7c3eab8c621",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"init: Extract chainstate loading sequence\" (83ed7db27b4c4798666b77d83fc8e7c3eab8c621)\r\n\r\n>```\r\n>The sequence can have 4 types of outcomes:\r\n>\r\n>1. Success\r\n>2. Shutdown requested\r\n>  - nothing failed but a shutdown was triggered in the middle of the\r\n>    sequence\r\n>3. Soft failure\r\n>  - a failure that might be recovered from with a reindex\r\n>4. Hard failure\r\n>  - a failure that definitively cannot be recovered from with a reindex\r\n>\r\n>Currently, LoadChainstateSequence returns a bool which:\r\n>    - if false\r\n>        - Definitely a \"Hard failure\"\r\n>    - if true\r\n>        - if fLoaded -> \"Success\"\r\n>        - if ShutdownRequested() -> \"Shutdown requested\"\r\n>        - else -> \"Soft failure\"\r\n>```\r\n\r\nI'd remove this explanation from the commit message and move it to here above this function declaration, or to the .cpp file as a code comment. This is helpful information to know and a shame for it to be lost in a temporary commit message. Also it will make upcoming changes easier to understand if this documentation is updated in sync with the changes.",
      "created_at": "2021-11-04T19:15:28Z",
      "updated_at": "2021-11-05T19:43:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743133511",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743133511"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743624127",
      "pull_request_review_id": 798165689,
      "id": 743624127,
      "node_id": "PRRC_kwDOABII584sUs2_",
      "diff_hunk": "@@ -1415,8 +1412,46 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n                                          nCoinCacheUsage,\n                                          args.GetIntArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS),\n                                          args.GetIntArg(\"-checklevel\", DEFAULT_CHECKLEVEL));\n-        if (!rv) return false;\n-        if (fLoaded) {\n+        if (rv.has_value()) {\n+            switch (rv.value()) {\n+            case ChainstateLoadingError::ERROR_LOADING_BLOCK_DB:\n+                strLoadError = _(\"Error loading block database\");\n+                break;\n+            case ChainstateLoadingError::ERROR_BAD_GENESIS_BLOCK:\n+                return false;  // bail immediately!\n+            case ChainstateLoadingError::ERROR_PRUNED_NEEDS_REINDEX:\n+                strLoadError = _(\"You need to rebuild the database using -reindex to go back to unpruned mode.  This will redownload the entire blockchain\");\n+                break;\n+            case ChainstateLoadingError::ERROR_LOAD_GENESIS_BLOCK_FAILED:\n+                strLoadError = _(\"Error initializing block database\");\n+                break;\n+            case ChainstateLoadingError::ERROR_CHAINSTATE_UPGRADE_FAILED:\n+                strLoadError = _(\"Error upgrading chainstate database\");\n+                break;\n+            case ChainstateLoadingError::ERROR_REPLAYBLOCKS_FAILED:\n+                strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\");\n+                break;\n+            case ChainstateLoadingError::ERROR_LOADCHAINTIP_FAILED:\n+                strLoadError = _(\"Error initializing block database\");\n+                break;\n+            case ChainstateLoadingError::ERROR_GENERIC_BLOCKDB_OPEN_FAILED:\n+                strLoadError = _(\"Error opening block database\");\n+                break;\n+            case ChainstateLoadingError::ERROR_BLOCKS_WITNESS_INSUFFICIENTLY_VALIDATED:\n+                strLoadError = strprintf(_(\"Witness data for blocks after height %d requires validation. Please restart with -reindex.\"),\n+                                         chainparams.GetConsensus().SegwitHeight);\n+                break;\n+            case ChainstateLoadingError::ERROR_BLOCK_FROM_FUTURE:\n+                strLoadError = _(\"The block database contains a block which appears to be from the future. \"\n+                                 \"This may be due to your computer's date and time being set incorrectly. \"\n+                                 \"Only rebuild the block database if you are sure that your computer's date and time are correct\");\n+                break;\n+            case ChainstateLoadingError::ERROR_CORRUPTED_BLOCK_DB:\n+                strLoadError = _(\"Corrupted block database detected\");\n+                break;\n+            }\n+        } else if (!ShutdownRequested()) {",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 57,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "cd29d334a38fdaf0bbbe810a9cbdeeffad394daa",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"init/chainstate: Decouple from stringy errors\" (cd29d334a38fdaf0bbbe810a9cbdeeffad394daa)\r\n\r\nWith this commit introducing and returning a nice status type, I think it is a shame to add a new out-of-band global `ShutdownRequested` call to check the interrupted status separately from the return value. Would suggest adding a `ChainstateLoadingError::INTERRUPTED_SHUTDOWN_REQUESTED` or similar return code. And in the future hopefully we can get rid of  other global `ShutdownRequested` calls as well.\r\n\r\nIn case motivation for this request is unclear, reason I think a return code is better than a global status check is that requiring a global check makes function usage easier to screw up. It is easier to accidentally forget an external check than to forget to handle a return value. Also if there is a race where a shutdown is requested after the function returns, it doesn't seem right to skip logging the call's success. The right interruption point is after the function call and the log, not between.",
      "created_at": "2021-11-05T12:35:32Z",
      "updated_at": "2021-11-05T19:43:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743624127",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743624127"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1453,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743628897",
      "pull_request_review_id": 798165689,
      "id": 743628897,
      "node_id": "PRRC_kwDOABII584sUuBh",
      "diff_hunk": "@@ -1415,8 +1412,46 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n                                          nCoinCacheUsage,\n                                          args.GetIntArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS),\n                                          args.GetIntArg(\"-checklevel\", DEFAULT_CHECKLEVEL));\n-        if (!rv) return false;\n-        if (fLoaded) {\n+        if (rv.has_value()) {\n+            switch (rv.value()) {\n+            case ChainstateLoadingError::ERROR_LOADING_BLOCK_DB:\n+                strLoadError = _(\"Error loading block database\");\n+                break;\n+            case ChainstateLoadingError::ERROR_BAD_GENESIS_BLOCK:\n+                return false;  // bail immediately!",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "cd29d334a38fdaf0bbbe810a9cbdeeffad394daa",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"init/chainstate: Decouple from stringy errors\" (cd29d334a38fdaf0bbbe810a9cbdeeffad394daa)\r\n\r\nThis seems to be losing the \"Incorrect or no genesis block found. Wrong datadir for network?\" error string. Would be good to fix or say in the commit message if this is intentional.",
      "created_at": "2021-11-05T12:43:06Z",
      "updated_at": "2021-11-05T19:43:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743628897",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743628897"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1421,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743636334",
      "pull_request_review_id": 798853955,
      "id": 743636334,
      "node_id": "PRRC_kwDOABII584sUv1u",
      "diff_hunk": "@@ -0,0 +1,157 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <init/chainstate.h>\n+\n+#include <consensus/params.h> // for Consensus::Params\n+#include <node/blockstorage.h> // for CleanupBlockRevFiles, fHavePruned, fReindex\n+#include <validation.h> // for a lot of things\n+\n+std::optional<ChainstateLoadingError> LoadChainstateSequence(bool fReset,\n+                                                             ChainstateManager& chainman,\n+                                                             CTxMemPool* mempool,\n+                                                             bool fPruneMode,\n+                                                             const Consensus::Params& consensus_params,\n+                                                             bool fReindexChainState,\n+                                                             int64_t nBlockTreeDBCache,\n+                                                             int64_t nCoinDBCache,\n+                                                             int64_t nCoinCacheUsage,\n+                                                             unsigned int check_blocks,\n+                                                             unsigned int check_level,\n+                                                             bool block_tree_db_in_memory,\n+                                                             bool coins_db_in_memory,\n+                                                             std::function<int64_t()> get_unix_time_seconds,\n+                                                             std::optional<std::function<bool()>> shutdown_requested,\n+                                                             std::optional<std::function<void()>> coins_error_cb,\n+                                                             std::optional<std::function<void()>> verifying_blocks_cb) {",
      "path": "src/init/chainstate.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "7dd898c0df678859ca92773b6990e4e28a83ab24",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n                                                             std::optional<std::function<void()>> verifying_blocks_cb)\r\n{\r\n```",
      "created_at": "2021-11-05T12:54:08Z",
      "updated_at": "2021-11-05T13:06:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743636334",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743636334"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743637480",
      "pull_request_review_id": 798165689,
      "id": 743637480,
      "node_id": "PRRC_kwDOABII584sUwHo",
      "diff_hunk": "@@ -6,27 +6,24 @@\n \n #include <chainparams.h> // for CChainParams\n #include <rpc/blockchain.h> // for RPCNotifyBlockChange\n-#include <util/translation.h> // for bilingual_str\n #include <node/blockstorage.h> // for CleanupBlockRevFiles, fHavePruned, fReindex\n #include <node/ui_interface.h> // for InitError, CClientUIInterface member access\n #include <shutdown.h> // for ShutdownRequested\n #include <timedata.h> // for GetAdjustedTime\n #include <validation.h> // for a lot of things\n \n-bool LoadChainstateSequence(bool& fLoaded,\n-                            bilingual_str& strLoadError,\n-                            bool fReset,\n-                            CClientUIInterface& uiInterface,\n-                            ChainstateManager& chainman,\n-                            CTxMemPool* mempool,\n-                            bool fPruneMode,\n-                            const CChainParams& chainparams,\n-                            bool fReindexChainState,\n-                            int64_t nBlockTreeDBCache,\n-                            int64_t nCoinDBCache,\n-                            int64_t nCoinCacheUsage,\n-                            unsigned int check_blocks,\n-                            unsigned int check_level) {\n+std::optional<ChainstateLoadingError> LoadChainstateSequence(bool fReset,",
      "path": "src/init/chainstate.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "cd29d334a38fdaf0bbbe810a9cbdeeffad394daa",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"init/chainstate: Decouple from stringy errors\" (cd29d334a38fdaf0bbbe810a9cbdeeffad394daa)\r\n\r\n>```\r\n>1. Success\r\n>2. Shutdown requested\r\n>  - nothing failed but a shutdown was triggered in the middle of the\r\n>    sequence\r\n>3. Soft failure\r\n>  - a failure that might be recovered from with a reindex\r\n>4. Hard failure\r\n>  - a failure that definitively cannot be recovered from with a reindex\r\n>\r\n>Previously, LoadChainstateSequence returns a bool which:\r\n>    - if false\r\n>        - Definitely a \"Hard failure\"\r\n>    - if true\r\n>        - if fLoaded -> \"Success\"\r\n>        - if ShutdownRequested() -> \"Shutdown requested\"\r\n>        - else -> \"Soft failure\"\r\n>\r\n>After this change, LoadChainstateSequence returns a\r\n>std::optional<ChainstateLoadingError> which:\r\n>    - if has_value()\r\n>        - Either \"Soft failure\" or \"Hard failure\", caller decides what\r\n>          to do based on the specific ChainstateLoadingError enum\r\n>          member\r\n>    - else\r\n>        - Either \"Success\" or \"Shutdown requested\", caller checks\r\n>          ShutdownRequested() to determine which.\r\n>```\r\n\r\nAgain I think this information should be removed from the commit message and moved here to the function declaration or the chainstate.cpp file as documentation for the LoadChainstateSequence function. That way instead of having manually compare these two piece of documentation, the differences can be seen with standard diff tools. This will leave the code better documented, let documentation change in sync with the code, and let the commit message succinctly describe the changes in behavior without having to describe the full behavior.",
      "created_at": "2021-11-05T12:55:51Z",
      "updated_at": "2021-11-05T19:43:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743637480",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743637480"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 15,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743645041",
      "pull_request_review_id": 798853955,
      "id": 743645041,
      "node_id": "PRRC_kwDOABII584sUx9x",
      "diff_hunk": "@@ -24,6 +24,8 @@\n #include <index/blockfilterindex.h>\n #include <index/coinstatsindex.h>\n #include <index/txindex.h>\n+#include <init/caches.h> // for CalculateCacheSizes\n+#include <init/chainstate.h> // for LoadChainstateSequence",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "29c5c2b4700aa3f537e7291971dbd763469fce1c",
      "in_reply_to_id": 729149055,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I agree. These comments are unmaintainable.",
      "created_at": "2021-11-05T13:06:57Z",
      "updated_at": "2021-11-05T13:06:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743645041",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743645041"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743657031",
      "pull_request_review_id": 798882733,
      "id": 743657031,
      "node_id": "PRRC_kwDOABII584sU05H",
      "diff_hunk": "@@ -547,6 +549,8 @@ libbitcoin_common_a_SOURCES = \\\n   core_write.cpp \\\n   deploymentinfo.cpp \\\n   external_signer.cpp \\\n+  init/caches.cpp \\\n+  init/chainstate.cpp \\",
      "path": "src/Makefile.am",
      "position": null,
      "original_position": 14,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "7dd898c0df678859ca92773b6990e4e28a83ab24",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I would have guessed that this would be part of libbitcoin_server, since loading a chainstate is something that only bitcoind or bitcoin-qt would do.",
      "created_at": "2021-11-05T13:23:47Z",
      "updated_at": "2021-11-05T15:45:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743657031",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743657031"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 553,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743661160",
      "pull_request_review_id": 798882733,
      "id": 743661160,
      "node_id": "PRRC_kwDOABII584sU15o",
      "diff_hunk": "@@ -0,0 +1,49 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INIT_CHAINSTATE_H\n+#define BITCOIN_INIT_CHAINSTATE_H\n+\n+#include <cstdint> // for int64_t\n+#include <functional> // for std::function\n+#include <optional> // for std::optional\n+\n+class ChainstateManager;\n+namespace Consensus {\n+    struct Params;\n+}\n+class CTxMemPool;\n+\n+enum class ChainstateLoadingError {\n+    ERROR_LOADING_BLOCK_DB,\n+    ERROR_BAD_GENESIS_BLOCK,\n+    ERROR_PRUNED_NEEDS_REINDEX,\n+    ERROR_LOAD_GENESIS_BLOCK_FAILED,\n+    ERROR_CHAINSTATE_UPGRADE_FAILED,\n+    ERROR_REPLAYBLOCKS_FAILED,\n+    ERROR_LOADCHAINTIP_FAILED,\n+    ERROR_GENERIC_BLOCKDB_OPEN_FAILED,\n+    ERROR_BLOCKS_WITNESS_INSUFFICIENTLY_VALIDATED,\n+    ERROR_BLOCK_FROM_FUTURE,\n+    ERROR_CORRUPTED_BLOCK_DB,\n+};\n+\n+std::optional<ChainstateLoadingError> LoadChainstateSequence(bool fReset,",
      "path": "src/init/chainstate.h",
      "position": null,
      "original_position": 32,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "7dd898c0df678859ca92773b6990e4e28a83ab24",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It'd be great if there was a final commit that added a doxygen comment for all of these parameters.",
      "created_at": "2021-11-05T13:29:12Z",
      "updated_at": "2021-11-05T15:45:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743661160",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743661160"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743698625",
      "pull_request_review_id": 798882733,
      "id": 743698625,
      "node_id": "PRRC_kwDOABII584sU_DB",
      "diff_hunk": "@@ -1361,217 +1363,100 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     bool fReindexChainState = args.GetBoolArg(\"-reindex-chainstate\", false);\n \n     // cache size calculations\n-    int64_t nTotalCache = (args.GetIntArg(\"-dbcache\", nDefaultDbCache) << 20);\n-    nTotalCache = std::max(nTotalCache, nMinDbCache << 20); // total cache cannot be less than nMinDbCache\n-    nTotalCache = std::min(nTotalCache, nMaxDbCache << 20); // total cache cannot be greater than nMaxDbcache\n-    int64_t nBlockTreeDBCache = std::min(nTotalCache / 8, nMaxBlockDBCache << 20);\n-    nTotalCache -= nBlockTreeDBCache;\n-    int64_t nTxIndexCache = std::min(nTotalCache / 8, args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX) ? nMaxTxIndexCache << 20 : 0);\n-    nTotalCache -= nTxIndexCache;\n-    int64_t filter_index_cache = 0;\n-    if (!g_enabled_filter_types.empty()) {\n-        size_t n_indexes = g_enabled_filter_types.size();\n-        int64_t max_cache = std::min(nTotalCache / 8, max_filter_index_cache << 20);\n-        filter_index_cache = max_cache / n_indexes;\n-        nTotalCache -= filter_index_cache * n_indexes;\n-    }\n-    int64_t nCoinDBCache = std::min(nTotalCache / 2, (nTotalCache / 4) + (1 << 23)); // use 25%-50% of the remainder for disk cache\n-    nCoinDBCache = std::min(nCoinDBCache, nMaxCoinsDBCache << 20); // cap total coins db cache\n-    nTotalCache -= nCoinDBCache;\n-    int64_t nCoinCacheUsage = nTotalCache; // the rest goes to in-memory cache\n+    CacheSizes cache_sizes;\n+    CalculateCacheSizes(args, cache_sizes, g_enabled_filter_types.size());\n+\n     int64_t nMempoolSizeMax = args.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     LogPrintf(\"Cache configuration:\\n\");\n-    LogPrintf(\"* Using %.1f MiB for block index database\\n\", nBlockTreeDBCache * (1.0 / 1024 / 1024));\n+    LogPrintf(\"* Using %.1f MiB for block index database\\n\", cache_sizes.block_tree_db_cache_size * (1.0 / 1024 / 1024));\n     if (args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n-        LogPrintf(\"* Using %.1f MiB for transaction index database\\n\", nTxIndexCache * (1.0 / 1024 / 1024));\n+        LogPrintf(\"* Using %.1f MiB for transaction index database\\n\", cache_sizes.tx_index_cache_size * (1.0 / 1024 / 1024));\n     }\n     for (BlockFilterType filter_type : g_enabled_filter_types) {\n         LogPrintf(\"* Using %.1f MiB for %s block filter index database\\n\",\n-                  filter_index_cache * (1.0 / 1024 / 1024), BlockFilterTypeName(filter_type));\n+                  cache_sizes.filter_index_cache_size * (1.0 / 1024 / 1024), BlockFilterTypeName(filter_type));\n     }\n-    LogPrintf(\"* Using %.1f MiB for chain state database\\n\", nCoinDBCache * (1.0 / 1024 / 1024));\n-    LogPrintf(\"* Using %.1f MiB for in-memory UTXO set (plus up to %.1f MiB of unused mempool space)\\n\", nCoinCacheUsage * (1.0 / 1024 / 1024), nMempoolSizeMax * (1.0 / 1024 / 1024));\n+    LogPrintf(\"* Using %.1f MiB for chain state database\\n\", cache_sizes.coin_db_cache_size * (1.0 / 1024 / 1024));\n+    LogPrintf(\"* Using %.1f MiB for in-memory UTXO set (plus up to %.1f MiB of unused mempool space)\\n\", cache_sizes.coin_cache_usage_size * (1.0 / 1024 / 1024), nMempoolSizeMax * (1.0 / 1024 / 1024));\n \n     bool fLoaded = false;\n     while (!fLoaded && !ShutdownRequested()) {\n         const bool fReset = fReindex;\n-        auto is_coinsview_empty = [&](CChainState* chainstate) EXCLUSIVE_LOCKS_REQUIRED(::cs_main) {\n-            return fReset || fReindexChainState || chainstate->CoinsTip().GetBestBlock().IsNull();\n-        };\n         bilingual_str strLoadError;\n \n         uiInterface.InitMessage(_(\"Loading block index…\").translated);\n-\n-        do {\n-            const int64_t load_block_index_start_time = GetTimeMillis();\n-            try {\n-                LOCK(cs_main);\n-                chainman.InitializeChainstate(Assert(node.mempool.get()));\n-                chainman.m_total_coinstip_cache = nCoinCacheUsage;\n-                chainman.m_total_coinsdb_cache = nCoinDBCache;\n-\n-                UnloadBlockIndex(node.mempool.get(), chainman);\n-\n-                auto& pblocktree{chainman.m_blockman.m_block_tree_db};\n-                // new CBlockTreeDB tries to delete the existing file, which\n-                // fails if it's still open from the previous loop. Close it first:\n-                pblocktree.reset();\n-                pblocktree.reset(new CBlockTreeDB(nBlockTreeDBCache, false, fReset));\n-\n-                if (fReset) {\n-                    pblocktree->WriteReindexing(true);\n-                    //If we're reindexing in prune mode, wipe away unusable block files and all undo data files\n-                    if (fPruneMode)\n-                        CleanupBlockRevFiles();\n-                }\n-\n-                if (ShutdownRequested()) break;\n-\n-                // LoadBlockIndex will load fHavePruned if we've ever removed a\n-                // block file from disk.\n-                // Note that it also sets fReindex based on the disk flag!\n-                // From here on out fReindex and fReset mean something different!\n-                if (!chainman.LoadBlockIndex()) {\n-                    if (ShutdownRequested()) break;\n-                    strLoadError = _(\"Error loading block database\");\n-                    break;\n-                }\n-\n-                // If the loaded chain has a wrong genesis, bail out immediately\n-                // (we're likely using a testnet datadir, or the other way around).\n-                if (!chainman.BlockIndex().empty() &&\n-                        !chainman.m_blockman.LookupBlockIndex(chainparams.GetConsensus().hashGenesisBlock)) {\n-                    return InitError(_(\"Incorrect or no genesis block found. Wrong datadir for network?\"));\n-                }\n-\n-                // Check for changed -prune state.  What we are concerned about is a user who has pruned blocks\n-                // in the past, but is now trying to run unpruned.\n-                if (fHavePruned && !fPruneMode) {\n-                    strLoadError = _(\"You need to rebuild the database using -reindex to go back to unpruned mode.  This will redownload the entire blockchain\");\n-                    break;\n-                }\n-\n-                // At this point blocktree args are consistent with what's on disk.\n-                // If we're not mid-reindex (based on disk + args), add a genesis block on disk\n-                // (otherwise we use the one already on disk).\n-                // This is called again in ThreadImport after the reindex completes.\n-                if (!fReindex && !chainman.ActiveChainstate().LoadGenesisBlock()) {\n-                    strLoadError = _(\"Error initializing block database\");\n-                    break;\n-                }\n-\n-                // At this point we're either in reindex or we've loaded a useful\n-                // block tree into BlockIndex()!\n-\n-                bool failed_chainstate_init = false;\n-\n-                for (CChainState* chainstate : chainman.GetAll()) {\n-                    chainstate->InitCoinsDB(\n-                        /* cache_size_bytes */ nCoinDBCache,\n-                        /* in_memory */ false,\n-                        /* should_wipe */ fReset || fReindexChainState);\n-\n-                    chainstate->CoinsErrorCatcher().AddReadErrCallback([]() {\n-                        uiInterface.ThreadSafeMessageBox(\n-                            _(\"Error reading from database, shutting down.\"),\n-                            \"\", CClientUIInterface::MSG_ERROR);\n-                    });\n-\n-                    // If necessary, upgrade from older database format.\n-                    // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                    if (!chainstate->CoinsDB().Upgrade()) {\n-                        strLoadError = _(\"Error upgrading chainstate database\");\n-                        failed_chainstate_init = true;\n-                        break;\n-                    }\n-\n-                    // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                    if (!chainstate->ReplayBlocks()) {\n-                        strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\");\n-                        failed_chainstate_init = true;\n-                        break;\n-                    }\n-\n-                    // The on-disk coinsdb is now in a good state, create the cache\n-                    chainstate->InitCoinsCache(nCoinCacheUsage);\n-                    assert(chainstate->CanFlushToDisk());\n-\n-                    if (!is_coinsview_empty(chainstate)) {\n-                        // LoadChainTip initializes the chain based on CoinsTip()'s best block\n-                        if (!chainstate->LoadChainTip()) {\n-                            strLoadError = _(\"Error initializing block database\");\n-                            failed_chainstate_init = true;\n-                            break; // out of the per-chainstate loop\n-                        }\n-                        assert(chainstate->m_chain.Tip() != nullptr);\n-                    }\n-                }\n-\n-                if (failed_chainstate_init) {\n-                    break; // out of the chainstate activation do-while\n-                }\n-            } catch (const std::exception& e) {\n-                LogPrintf(\"%s\\n\", e.what());\n-                strLoadError = _(\"Error opening block database\");\n+        const int64_t load_block_index_start_time = GetTimeMillis();\n+        std::optional<ChainstateLoadingError> rv;\n+        try {\n+            rv = LoadChainstateSequence(fReset,\n+                                        chainman,\n+                                        Assert(node.mempool.get()),\n+                                        fPruneMode,\n+                                        chainparams.GetConsensus(),\n+                                        fReindexChainState,\n+                                        cache_sizes.block_tree_db_cache_size,\n+                                        cache_sizes.coin_db_cache_size,\n+                                        cache_sizes.coin_cache_usage_size,\n+                                        args.GetIntArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS),\n+                                        args.GetIntArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n+                                        false,\n+                                        false,\n+                                        GetAdjustedTime,\n+                                        ShutdownRequested,\n+                                        []() {\n+                                            uiInterface.ThreadSafeMessageBox(\n+                                                _(\"Error reading from database, shutting down.\"),\n+                                                \"\", CClientUIInterface::MSG_ERROR);\n+                                        },\n+                                        []() {\n+                                            uiInterface.InitMessage(_(\"Verifying blocks…\").translated);\n+                                        });\n+        } catch (const std::exception& e) {\n+            LogPrintf(\"%s\\n\", e.what()); // XXX\n+            rv = ChainstateLoadingError::ERROR_GENERIC_BLOCKDB_OPEN_FAILED;\n+        }\n+        if (rv.has_value()) {\n+            switch (rv.value()) {\n+            case ChainstateLoadingError::ERROR_LOADING_BLOCK_DB:\n+                strLoadError = _(\"Error loading block database\");\n                 break;\n-            }\n-\n-            if (!fReset) {\n-                LOCK(cs_main);\n-                auto chainstates{chainman.GetAll()};\n-                if (std::any_of(chainstates.begin(), chainstates.end(),\n-                                [](const CChainState* cs) EXCLUSIVE_LOCKS_REQUIRED(cs_main) { return cs->NeedsRedownload(); })) {\n-                    strLoadError = strprintf(_(\"Witness data for blocks after height %d requires validation. Please restart with -reindex.\"),\n-                                             chainparams.GetConsensus().SegwitHeight);\n-                    break;\n-                }\n-            }\n-\n-            bool failed_verification = false;\n-\n-            try {\n-                LOCK(cs_main);\n-\n-                for (CChainState* chainstate : chainman.GetAll()) {\n-                    if (!is_coinsview_empty(chainstate)) {\n-                        uiInterface.InitMessage(_(\"Verifying blocks…\").translated);\n-                        if (fHavePruned && args.GetIntArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {\n-                            LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; only checking available blocks\\n\",\n-                                MIN_BLOCKS_TO_KEEP);\n-                        }\n-\n-                        const CBlockIndex* tip = chainstate->m_chain.Tip();\n-                        RPCNotifyBlockChange(tip);\n-                        if (tip && tip->nTime > GetAdjustedTime() + 2 * 60 * 60) {\n-                            strLoadError = _(\"The block database contains a block which appears to be from the future. \"\n-                                    \"This may be due to your computer's date and time being set incorrectly. \"\n-                                    \"Only rebuild the block database if you are sure that your computer's date and time are correct\");\n-                            failed_verification = true;\n-                            break;\n-                        }\n-\n-                        if (!CVerifyDB().VerifyDB(\n-                                *chainstate, chainparams, chainstate->CoinsDB(),\n-                                args.GetIntArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n-                                args.GetIntArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS))) {\n-                            strLoadError = _(\"Corrupted block database detected\");\n-                            failed_verification = true;\n-                            break;\n-                        }\n-                    }\n-                }\n-            } catch (const std::exception& e) {\n-                LogPrintf(\"%s\\n\", e.what());\n+            case ChainstateLoadingError::ERROR_BAD_GENESIS_BLOCK:\n+                return false;  // bail immediately!",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 266,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "7dd898c0df678859ca92773b6990e4e28a83ab24",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't really like the use of \"bail\" here or in the commit log. It feels a bit colloquial and imprecise.",
      "created_at": "2021-11-05T14:15:37Z",
      "updated_at": "2021-11-05T15:45:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743698625",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743698625"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1424,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743703915",
      "pull_request_review_id": 798882733,
      "id": 743703915,
      "node_id": "PRRC_kwDOABII584sVAVr",
      "diff_hunk": "@@ -1361,217 +1363,100 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     bool fReindexChainState = args.GetBoolArg(\"-reindex-chainstate\", false);\n \n     // cache size calculations\n-    int64_t nTotalCache = (args.GetIntArg(\"-dbcache\", nDefaultDbCache) << 20);\n-    nTotalCache = std::max(nTotalCache, nMinDbCache << 20); // total cache cannot be less than nMinDbCache\n-    nTotalCache = std::min(nTotalCache, nMaxDbCache << 20); // total cache cannot be greater than nMaxDbcache\n-    int64_t nBlockTreeDBCache = std::min(nTotalCache / 8, nMaxBlockDBCache << 20);\n-    nTotalCache -= nBlockTreeDBCache;\n-    int64_t nTxIndexCache = std::min(nTotalCache / 8, args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX) ? nMaxTxIndexCache << 20 : 0);\n-    nTotalCache -= nTxIndexCache;\n-    int64_t filter_index_cache = 0;\n-    if (!g_enabled_filter_types.empty()) {\n-        size_t n_indexes = g_enabled_filter_types.size();\n-        int64_t max_cache = std::min(nTotalCache / 8, max_filter_index_cache << 20);\n-        filter_index_cache = max_cache / n_indexes;\n-        nTotalCache -= filter_index_cache * n_indexes;\n-    }\n-    int64_t nCoinDBCache = std::min(nTotalCache / 2, (nTotalCache / 4) + (1 << 23)); // use 25%-50% of the remainder for disk cache\n-    nCoinDBCache = std::min(nCoinDBCache, nMaxCoinsDBCache << 20); // cap total coins db cache\n-    nTotalCache -= nCoinDBCache;\n-    int64_t nCoinCacheUsage = nTotalCache; // the rest goes to in-memory cache\n+    CacheSizes cache_sizes;\n+    CalculateCacheSizes(args, cache_sizes, g_enabled_filter_types.size());\n+\n     int64_t nMempoolSizeMax = args.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     LogPrintf(\"Cache configuration:\\n\");\n-    LogPrintf(\"* Using %.1f MiB for block index database\\n\", nBlockTreeDBCache * (1.0 / 1024 / 1024));\n+    LogPrintf(\"* Using %.1f MiB for block index database\\n\", cache_sizes.block_tree_db_cache_size * (1.0 / 1024 / 1024));\n     if (args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n-        LogPrintf(\"* Using %.1f MiB for transaction index database\\n\", nTxIndexCache * (1.0 / 1024 / 1024));\n+        LogPrintf(\"* Using %.1f MiB for transaction index database\\n\", cache_sizes.tx_index_cache_size * (1.0 / 1024 / 1024));\n     }\n     for (BlockFilterType filter_type : g_enabled_filter_types) {\n         LogPrintf(\"* Using %.1f MiB for %s block filter index database\\n\",\n-                  filter_index_cache * (1.0 / 1024 / 1024), BlockFilterTypeName(filter_type));\n+                  cache_sizes.filter_index_cache_size * (1.0 / 1024 / 1024), BlockFilterTypeName(filter_type));\n     }\n-    LogPrintf(\"* Using %.1f MiB for chain state database\\n\", nCoinDBCache * (1.0 / 1024 / 1024));\n-    LogPrintf(\"* Using %.1f MiB for in-memory UTXO set (plus up to %.1f MiB of unused mempool space)\\n\", nCoinCacheUsage * (1.0 / 1024 / 1024), nMempoolSizeMax * (1.0 / 1024 / 1024));\n+    LogPrintf(\"* Using %.1f MiB for chain state database\\n\", cache_sizes.coin_db_cache_size * (1.0 / 1024 / 1024));\n+    LogPrintf(\"* Using %.1f MiB for in-memory UTXO set (plus up to %.1f MiB of unused mempool space)\\n\", cache_sizes.coin_cache_usage_size * (1.0 / 1024 / 1024), nMempoolSizeMax * (1.0 / 1024 / 1024));\n \n     bool fLoaded = false;\n     while (!fLoaded && !ShutdownRequested()) {\n         const bool fReset = fReindex;\n-        auto is_coinsview_empty = [&](CChainState* chainstate) EXCLUSIVE_LOCKS_REQUIRED(::cs_main) {\n-            return fReset || fReindexChainState || chainstate->CoinsTip().GetBestBlock().IsNull();\n-        };\n         bilingual_str strLoadError;\n \n         uiInterface.InitMessage(_(\"Loading block index…\").translated);\n-\n-        do {\n-            const int64_t load_block_index_start_time = GetTimeMillis();\n-            try {\n-                LOCK(cs_main);\n-                chainman.InitializeChainstate(Assert(node.mempool.get()));\n-                chainman.m_total_coinstip_cache = nCoinCacheUsage;\n-                chainman.m_total_coinsdb_cache = nCoinDBCache;\n-\n-                UnloadBlockIndex(node.mempool.get(), chainman);\n-\n-                auto& pblocktree{chainman.m_blockman.m_block_tree_db};\n-                // new CBlockTreeDB tries to delete the existing file, which\n-                // fails if it's still open from the previous loop. Close it first:\n-                pblocktree.reset();\n-                pblocktree.reset(new CBlockTreeDB(nBlockTreeDBCache, false, fReset));\n-\n-                if (fReset) {\n-                    pblocktree->WriteReindexing(true);\n-                    //If we're reindexing in prune mode, wipe away unusable block files and all undo data files\n-                    if (fPruneMode)\n-                        CleanupBlockRevFiles();\n-                }\n-\n-                if (ShutdownRequested()) break;\n-\n-                // LoadBlockIndex will load fHavePruned if we've ever removed a\n-                // block file from disk.\n-                // Note that it also sets fReindex based on the disk flag!\n-                // From here on out fReindex and fReset mean something different!\n-                if (!chainman.LoadBlockIndex()) {\n-                    if (ShutdownRequested()) break;\n-                    strLoadError = _(\"Error loading block database\");\n-                    break;\n-                }\n-\n-                // If the loaded chain has a wrong genesis, bail out immediately\n-                // (we're likely using a testnet datadir, or the other way around).\n-                if (!chainman.BlockIndex().empty() &&\n-                        !chainman.m_blockman.LookupBlockIndex(chainparams.GetConsensus().hashGenesisBlock)) {\n-                    return InitError(_(\"Incorrect or no genesis block found. Wrong datadir for network?\"));\n-                }\n-\n-                // Check for changed -prune state.  What we are concerned about is a user who has pruned blocks\n-                // in the past, but is now trying to run unpruned.\n-                if (fHavePruned && !fPruneMode) {\n-                    strLoadError = _(\"You need to rebuild the database using -reindex to go back to unpruned mode.  This will redownload the entire blockchain\");\n-                    break;\n-                }\n-\n-                // At this point blocktree args are consistent with what's on disk.\n-                // If we're not mid-reindex (based on disk + args), add a genesis block on disk\n-                // (otherwise we use the one already on disk).\n-                // This is called again in ThreadImport after the reindex completes.\n-                if (!fReindex && !chainman.ActiveChainstate().LoadGenesisBlock()) {\n-                    strLoadError = _(\"Error initializing block database\");\n-                    break;\n-                }\n-\n-                // At this point we're either in reindex or we've loaded a useful\n-                // block tree into BlockIndex()!\n-\n-                bool failed_chainstate_init = false;\n-\n-                for (CChainState* chainstate : chainman.GetAll()) {\n-                    chainstate->InitCoinsDB(\n-                        /* cache_size_bytes */ nCoinDBCache,\n-                        /* in_memory */ false,\n-                        /* should_wipe */ fReset || fReindexChainState);\n-\n-                    chainstate->CoinsErrorCatcher().AddReadErrCallback([]() {\n-                        uiInterface.ThreadSafeMessageBox(\n-                            _(\"Error reading from database, shutting down.\"),\n-                            \"\", CClientUIInterface::MSG_ERROR);\n-                    });\n-\n-                    // If necessary, upgrade from older database format.\n-                    // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                    if (!chainstate->CoinsDB().Upgrade()) {\n-                        strLoadError = _(\"Error upgrading chainstate database\");\n-                        failed_chainstate_init = true;\n-                        break;\n-                    }\n-\n-                    // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                    if (!chainstate->ReplayBlocks()) {\n-                        strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\");\n-                        failed_chainstate_init = true;\n-                        break;\n-                    }\n-\n-                    // The on-disk coinsdb is now in a good state, create the cache\n-                    chainstate->InitCoinsCache(nCoinCacheUsage);\n-                    assert(chainstate->CanFlushToDisk());\n-\n-                    if (!is_coinsview_empty(chainstate)) {\n-                        // LoadChainTip initializes the chain based on CoinsTip()'s best block\n-                        if (!chainstate->LoadChainTip()) {\n-                            strLoadError = _(\"Error initializing block database\");\n-                            failed_chainstate_init = true;\n-                            break; // out of the per-chainstate loop\n-                        }\n-                        assert(chainstate->m_chain.Tip() != nullptr);\n-                    }\n-                }\n-\n-                if (failed_chainstate_init) {\n-                    break; // out of the chainstate activation do-while\n-                }\n-            } catch (const std::exception& e) {\n-                LogPrintf(\"%s\\n\", e.what());\n-                strLoadError = _(\"Error opening block database\");\n+        const int64_t load_block_index_start_time = GetTimeMillis();\n+        std::optional<ChainstateLoadingError> rv;\n+        try {\n+            rv = LoadChainstateSequence(fReset,\n+                                        chainman,\n+                                        Assert(node.mempool.get()),\n+                                        fPruneMode,\n+                                        chainparams.GetConsensus(),\n+                                        fReindexChainState,\n+                                        cache_sizes.block_tree_db_cache_size,\n+                                        cache_sizes.coin_db_cache_size,\n+                                        cache_sizes.coin_cache_usage_size,\n+                                        args.GetIntArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS),\n+                                        args.GetIntArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n+                                        false,\n+                                        false,\n+                                        GetAdjustedTime,\n+                                        ShutdownRequested,\n+                                        []() {\n+                                            uiInterface.ThreadSafeMessageBox(\n+                                                _(\"Error reading from database, shutting down.\"),\n+                                                \"\", CClientUIInterface::MSG_ERROR);\n+                                        },\n+                                        []() {\n+                                            uiInterface.InitMessage(_(\"Verifying blocks…\").translated);\n+                                        });\n+        } catch (const std::exception& e) {\n+            LogPrintf(\"%s\\n\", e.what()); // XXX\n+            rv = ChainstateLoadingError::ERROR_GENERIC_BLOCKDB_OPEN_FAILED;\n+        }\n+        if (rv.has_value()) {\n+            switch (rv.value()) {\n+            case ChainstateLoadingError::ERROR_LOADING_BLOCK_DB:\n+                strLoadError = _(\"Error loading block database\");\n                 break;\n-            }\n-\n-            if (!fReset) {\n-                LOCK(cs_main);\n-                auto chainstates{chainman.GetAll()};\n-                if (std::any_of(chainstates.begin(), chainstates.end(),\n-                                [](const CChainState* cs) EXCLUSIVE_LOCKS_REQUIRED(cs_main) { return cs->NeedsRedownload(); })) {\n-                    strLoadError = strprintf(_(\"Witness data for blocks after height %d requires validation. Please restart with -reindex.\"),\n-                                             chainparams.GetConsensus().SegwitHeight);\n-                    break;\n-                }\n-            }\n-\n-            bool failed_verification = false;\n-\n-            try {\n-                LOCK(cs_main);\n-\n-                for (CChainState* chainstate : chainman.GetAll()) {\n-                    if (!is_coinsview_empty(chainstate)) {\n-                        uiInterface.InitMessage(_(\"Verifying blocks…\").translated);\n-                        if (fHavePruned && args.GetIntArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {\n-                            LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; only checking available blocks\\n\",\n-                                MIN_BLOCKS_TO_KEEP);\n-                        }\n-\n-                        const CBlockIndex* tip = chainstate->m_chain.Tip();\n-                        RPCNotifyBlockChange(tip);\n-                        if (tip && tip->nTime > GetAdjustedTime() + 2 * 60 * 60) {\n-                            strLoadError = _(\"The block database contains a block which appears to be from the future. \"\n-                                    \"This may be due to your computer's date and time being set incorrectly. \"\n-                                    \"Only rebuild the block database if you are sure that your computer's date and time are correct\");\n-                            failed_verification = true;\n-                            break;\n-                        }\n-\n-                        if (!CVerifyDB().VerifyDB(\n-                                *chainstate, chainparams, chainstate->CoinsDB(),\n-                                args.GetIntArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n-                                args.GetIntArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS))) {\n-                            strLoadError = _(\"Corrupted block database detected\");\n-                            failed_verification = true;\n-                            break;\n-                        }\n-                    }\n-                }\n-            } catch (const std::exception& e) {\n-                LogPrintf(\"%s\\n\", e.what());\n+            case ChainstateLoadingError::ERROR_BAD_GENESIS_BLOCK:\n+                return false;  // bail immediately!\n+            case ChainstateLoadingError::ERROR_PRUNED_NEEDS_REINDEX:\n+                strLoadError = _(\"You need to rebuild the database using -reindex to go back to unpruned mode.  This will redownload the entire blockchain\");\n+                break;\n+            case ChainstateLoadingError::ERROR_LOAD_GENESIS_BLOCK_FAILED:\n+                strLoadError = _(\"Error initializing block database\");\n+                break;\n+            case ChainstateLoadingError::ERROR_CHAINSTATE_UPGRADE_FAILED:\n+                strLoadError = _(\"Error upgrading chainstate database\");\n+                break;\n+            case ChainstateLoadingError::ERROR_REPLAYBLOCKS_FAILED:\n+                strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\");\n+                break;\n+            case ChainstateLoadingError::ERROR_LOADCHAINTIP_FAILED:\n+                strLoadError = _(\"Error initializing block database\");\n+                break;\n+            case ChainstateLoadingError::ERROR_GENERIC_BLOCKDB_OPEN_FAILED:\n                 strLoadError = _(\"Error opening block database\");\n-                failed_verification = true;\n+                break;\n+            case ChainstateLoadingError::ERROR_BLOCKS_WITNESS_INSUFFICIENTLY_VALIDATED:\n+                strLoadError = strprintf(_(\"Witness data for blocks after height %d requires validation. Please restart with -reindex.\"),\n+                                         chainparams.GetConsensus().SegwitHeight);\n+                break;\n+            case ChainstateLoadingError::ERROR_BLOCK_FROM_FUTURE:\n+                strLoadError = _(\"The block database contains a block which appears to be from the future. \"\n+                                 \"This may be due to your computer's date and time being set incorrectly. \"\n+                                 \"Only rebuild the block database if you are sure that your computer's date and time are correct\");\n+                break;\n+            case ChainstateLoadingError::ERROR_CORRUPTED_BLOCK_DB:\n+                strLoadError = _(\"Corrupted block database detected\");\n                 break;\n             }\n-\n-            if (!failed_verification) {\n-                fLoaded = true;\n-                LogPrintf(\" block index %15dms\\n\", GetTimeMillis() - load_block_index_start_time);\n-            }\n-        } while(false);\n+        } else if (!ShutdownRequested()) {",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 305,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "7dd898c0df678859ca92773b6990e4e28a83ab24",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What do you think about adding `ChainstateLoadingError::SHUTDOWN_REQUESTED` as an error reason, and then bringing the shutdown requested logic up into the switch statement above? I think that'd make the logic flow a bit easier to understand.",
      "created_at": "2021-11-05T14:21:57Z",
      "updated_at": "2021-11-05T15:45:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743703915",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743703915"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1456,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743709991",
      "pull_request_review_id": 798882733,
      "id": 743709991,
      "node_id": "PRRC_kwDOABII584sVB0n",
      "diff_hunk": "@@ -1361,217 +1363,100 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     bool fReindexChainState = args.GetBoolArg(\"-reindex-chainstate\", false);\n \n     // cache size calculations\n-    int64_t nTotalCache = (args.GetIntArg(\"-dbcache\", nDefaultDbCache) << 20);\n-    nTotalCache = std::max(nTotalCache, nMinDbCache << 20); // total cache cannot be less than nMinDbCache\n-    nTotalCache = std::min(nTotalCache, nMaxDbCache << 20); // total cache cannot be greater than nMaxDbcache\n-    int64_t nBlockTreeDBCache = std::min(nTotalCache / 8, nMaxBlockDBCache << 20);\n-    nTotalCache -= nBlockTreeDBCache;\n-    int64_t nTxIndexCache = std::min(nTotalCache / 8, args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX) ? nMaxTxIndexCache << 20 : 0);\n-    nTotalCache -= nTxIndexCache;\n-    int64_t filter_index_cache = 0;\n-    if (!g_enabled_filter_types.empty()) {\n-        size_t n_indexes = g_enabled_filter_types.size();\n-        int64_t max_cache = std::min(nTotalCache / 8, max_filter_index_cache << 20);\n-        filter_index_cache = max_cache / n_indexes;\n-        nTotalCache -= filter_index_cache * n_indexes;\n-    }\n-    int64_t nCoinDBCache = std::min(nTotalCache / 2, (nTotalCache / 4) + (1 << 23)); // use 25%-50% of the remainder for disk cache\n-    nCoinDBCache = std::min(nCoinDBCache, nMaxCoinsDBCache << 20); // cap total coins db cache\n-    nTotalCache -= nCoinDBCache;\n-    int64_t nCoinCacheUsage = nTotalCache; // the rest goes to in-memory cache\n+    CacheSizes cache_sizes;\n+    CalculateCacheSizes(args, cache_sizes, g_enabled_filter_types.size());\n+\n     int64_t nMempoolSizeMax = args.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     LogPrintf(\"Cache configuration:\\n\");\n-    LogPrintf(\"* Using %.1f MiB for block index database\\n\", nBlockTreeDBCache * (1.0 / 1024 / 1024));\n+    LogPrintf(\"* Using %.1f MiB for block index database\\n\", cache_sizes.block_tree_db_cache_size * (1.0 / 1024 / 1024));\n     if (args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n-        LogPrintf(\"* Using %.1f MiB for transaction index database\\n\", nTxIndexCache * (1.0 / 1024 / 1024));\n+        LogPrintf(\"* Using %.1f MiB for transaction index database\\n\", cache_sizes.tx_index_cache_size * (1.0 / 1024 / 1024));\n     }\n     for (BlockFilterType filter_type : g_enabled_filter_types) {\n         LogPrintf(\"* Using %.1f MiB for %s block filter index database\\n\",\n-                  filter_index_cache * (1.0 / 1024 / 1024), BlockFilterTypeName(filter_type));\n+                  cache_sizes.filter_index_cache_size * (1.0 / 1024 / 1024), BlockFilterTypeName(filter_type));\n     }\n-    LogPrintf(\"* Using %.1f MiB for chain state database\\n\", nCoinDBCache * (1.0 / 1024 / 1024));\n-    LogPrintf(\"* Using %.1f MiB for in-memory UTXO set (plus up to %.1f MiB of unused mempool space)\\n\", nCoinCacheUsage * (1.0 / 1024 / 1024), nMempoolSizeMax * (1.0 / 1024 / 1024));\n+    LogPrintf(\"* Using %.1f MiB for chain state database\\n\", cache_sizes.coin_db_cache_size * (1.0 / 1024 / 1024));\n+    LogPrintf(\"* Using %.1f MiB for in-memory UTXO set (plus up to %.1f MiB of unused mempool space)\\n\", cache_sizes.coin_cache_usage_size * (1.0 / 1024 / 1024), nMempoolSizeMax * (1.0 / 1024 / 1024));\n \n     bool fLoaded = false;\n     while (!fLoaded && !ShutdownRequested()) {\n         const bool fReset = fReindex;\n-        auto is_coinsview_empty = [&](CChainState* chainstate) EXCLUSIVE_LOCKS_REQUIRED(::cs_main) {\n-            return fReset || fReindexChainState || chainstate->CoinsTip().GetBestBlock().IsNull();\n-        };\n         bilingual_str strLoadError;\n \n         uiInterface.InitMessage(_(\"Loading block index…\").translated);\n-\n-        do {\n-            const int64_t load_block_index_start_time = GetTimeMillis();\n-            try {\n-                LOCK(cs_main);\n-                chainman.InitializeChainstate(Assert(node.mempool.get()));\n-                chainman.m_total_coinstip_cache = nCoinCacheUsage;\n-                chainman.m_total_coinsdb_cache = nCoinDBCache;\n-\n-                UnloadBlockIndex(node.mempool.get(), chainman);\n-\n-                auto& pblocktree{chainman.m_blockman.m_block_tree_db};\n-                // new CBlockTreeDB tries to delete the existing file, which\n-                // fails if it's still open from the previous loop. Close it first:\n-                pblocktree.reset();\n-                pblocktree.reset(new CBlockTreeDB(nBlockTreeDBCache, false, fReset));\n-\n-                if (fReset) {\n-                    pblocktree->WriteReindexing(true);\n-                    //If we're reindexing in prune mode, wipe away unusable block files and all undo data files\n-                    if (fPruneMode)\n-                        CleanupBlockRevFiles();\n-                }\n-\n-                if (ShutdownRequested()) break;\n-\n-                // LoadBlockIndex will load fHavePruned if we've ever removed a\n-                // block file from disk.\n-                // Note that it also sets fReindex based on the disk flag!\n-                // From here on out fReindex and fReset mean something different!\n-                if (!chainman.LoadBlockIndex()) {\n-                    if (ShutdownRequested()) break;\n-                    strLoadError = _(\"Error loading block database\");\n-                    break;\n-                }\n-\n-                // If the loaded chain has a wrong genesis, bail out immediately\n-                // (we're likely using a testnet datadir, or the other way around).\n-                if (!chainman.BlockIndex().empty() &&\n-                        !chainman.m_blockman.LookupBlockIndex(chainparams.GetConsensus().hashGenesisBlock)) {\n-                    return InitError(_(\"Incorrect or no genesis block found. Wrong datadir for network?\"));\n-                }\n-\n-                // Check for changed -prune state.  What we are concerned about is a user who has pruned blocks\n-                // in the past, but is now trying to run unpruned.\n-                if (fHavePruned && !fPruneMode) {\n-                    strLoadError = _(\"You need to rebuild the database using -reindex to go back to unpruned mode.  This will redownload the entire blockchain\");\n-                    break;\n-                }\n-\n-                // At this point blocktree args are consistent with what's on disk.\n-                // If we're not mid-reindex (based on disk + args), add a genesis block on disk\n-                // (otherwise we use the one already on disk).\n-                // This is called again in ThreadImport after the reindex completes.\n-                if (!fReindex && !chainman.ActiveChainstate().LoadGenesisBlock()) {\n-                    strLoadError = _(\"Error initializing block database\");\n-                    break;\n-                }\n-\n-                // At this point we're either in reindex or we've loaded a useful\n-                // block tree into BlockIndex()!\n-\n-                bool failed_chainstate_init = false;\n-\n-                for (CChainState* chainstate : chainman.GetAll()) {\n-                    chainstate->InitCoinsDB(\n-                        /* cache_size_bytes */ nCoinDBCache,\n-                        /* in_memory */ false,\n-                        /* should_wipe */ fReset || fReindexChainState);\n-\n-                    chainstate->CoinsErrorCatcher().AddReadErrCallback([]() {\n-                        uiInterface.ThreadSafeMessageBox(\n-                            _(\"Error reading from database, shutting down.\"),\n-                            \"\", CClientUIInterface::MSG_ERROR);\n-                    });\n-\n-                    // If necessary, upgrade from older database format.\n-                    // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                    if (!chainstate->CoinsDB().Upgrade()) {\n-                        strLoadError = _(\"Error upgrading chainstate database\");\n-                        failed_chainstate_init = true;\n-                        break;\n-                    }\n-\n-                    // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                    if (!chainstate->ReplayBlocks()) {\n-                        strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\");\n-                        failed_chainstate_init = true;\n-                        break;\n-                    }\n-\n-                    // The on-disk coinsdb is now in a good state, create the cache\n-                    chainstate->InitCoinsCache(nCoinCacheUsage);\n-                    assert(chainstate->CanFlushToDisk());\n-\n-                    if (!is_coinsview_empty(chainstate)) {\n-                        // LoadChainTip initializes the chain based on CoinsTip()'s best block\n-                        if (!chainstate->LoadChainTip()) {\n-                            strLoadError = _(\"Error initializing block database\");\n-                            failed_chainstate_init = true;\n-                            break; // out of the per-chainstate loop\n-                        }\n-                        assert(chainstate->m_chain.Tip() != nullptr);\n-                    }\n-                }\n-\n-                if (failed_chainstate_init) {\n-                    break; // out of the chainstate activation do-while\n-                }\n-            } catch (const std::exception& e) {\n-                LogPrintf(\"%s\\n\", e.what());\n-                strLoadError = _(\"Error opening block database\");\n+        const int64_t load_block_index_start_time = GetTimeMillis();\n+        std::optional<ChainstateLoadingError> rv;\n+        try {\n+            rv = LoadChainstateSequence(fReset,\n+                                        chainman,\n+                                        Assert(node.mempool.get()),\n+                                        fPruneMode,\n+                                        chainparams.GetConsensus(),\n+                                        fReindexChainState,\n+                                        cache_sizes.block_tree_db_cache_size,\n+                                        cache_sizes.coin_db_cache_size,\n+                                        cache_sizes.coin_cache_usage_size,\n+                                        args.GetIntArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS),\n+                                        args.GetIntArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n+                                        false,\n+                                        false,\n+                                        GetAdjustedTime,\n+                                        ShutdownRequested,\n+                                        []() {\n+                                            uiInterface.ThreadSafeMessageBox(\n+                                                _(\"Error reading from database, shutting down.\"),\n+                                                \"\", CClientUIInterface::MSG_ERROR);\n+                                        },\n+                                        []() {\n+                                            uiInterface.InitMessage(_(\"Verifying blocks…\").translated);\n+                                        });\n+        } catch (const std::exception& e) {\n+            LogPrintf(\"%s\\n\", e.what()); // XXX\n+            rv = ChainstateLoadingError::ERROR_GENERIC_BLOCKDB_OPEN_FAILED;\n+        }\n+        if (rv.has_value()) {\n+            switch (rv.value()) {\n+            case ChainstateLoadingError::ERROR_LOADING_BLOCK_DB:",
      "path": "src/init.cpp",
      "position": 122,
      "original_position": 214,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "7dd898c0df678859ca92773b6990e4e28a83ab24",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't like how the error strings have been separated from the error logic that they're describing. What do you think about returning an optional `std::pair` or struct from `LoadChainstateSequence()` that contains both the enum and error string? That'd simplify this switch statement (all the \"soft failure\" cases could share the same statement, and there'd be one separate statement for the \"hard failure\")",
      "created_at": "2021-11-05T14:29:09Z",
      "updated_at": "2021-11-05T15:45:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743709991",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743709991"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1432,
      "original_line": 1432,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743713370",
      "pull_request_review_id": 798882733,
      "id": 743713370,
      "node_id": "PRRC_kwDOABII584sVCpa",
      "diff_hunk": "@@ -1361,217 +1363,100 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     bool fReindexChainState = args.GetBoolArg(\"-reindex-chainstate\", false);\n \n     // cache size calculations\n-    int64_t nTotalCache = (args.GetIntArg(\"-dbcache\", nDefaultDbCache) << 20);\n-    nTotalCache = std::max(nTotalCache, nMinDbCache << 20); // total cache cannot be less than nMinDbCache\n-    nTotalCache = std::min(nTotalCache, nMaxDbCache << 20); // total cache cannot be greater than nMaxDbcache\n-    int64_t nBlockTreeDBCache = std::min(nTotalCache / 8, nMaxBlockDBCache << 20);\n-    nTotalCache -= nBlockTreeDBCache;\n-    int64_t nTxIndexCache = std::min(nTotalCache / 8, args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX) ? nMaxTxIndexCache << 20 : 0);\n-    nTotalCache -= nTxIndexCache;\n-    int64_t filter_index_cache = 0;\n-    if (!g_enabled_filter_types.empty()) {\n-        size_t n_indexes = g_enabled_filter_types.size();\n-        int64_t max_cache = std::min(nTotalCache / 8, max_filter_index_cache << 20);\n-        filter_index_cache = max_cache / n_indexes;\n-        nTotalCache -= filter_index_cache * n_indexes;\n-    }\n-    int64_t nCoinDBCache = std::min(nTotalCache / 2, (nTotalCache / 4) + (1 << 23)); // use 25%-50% of the remainder for disk cache\n-    nCoinDBCache = std::min(nCoinDBCache, nMaxCoinsDBCache << 20); // cap total coins db cache\n-    nTotalCache -= nCoinDBCache;\n-    int64_t nCoinCacheUsage = nTotalCache; // the rest goes to in-memory cache\n+    CacheSizes cache_sizes;\n+    CalculateCacheSizes(args, cache_sizes, g_enabled_filter_types.size());\n+\n     int64_t nMempoolSizeMax = args.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     LogPrintf(\"Cache configuration:\\n\");\n-    LogPrintf(\"* Using %.1f MiB for block index database\\n\", nBlockTreeDBCache * (1.0 / 1024 / 1024));\n+    LogPrintf(\"* Using %.1f MiB for block index database\\n\", cache_sizes.block_tree_db_cache_size * (1.0 / 1024 / 1024));\n     if (args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n-        LogPrintf(\"* Using %.1f MiB for transaction index database\\n\", nTxIndexCache * (1.0 / 1024 / 1024));\n+        LogPrintf(\"* Using %.1f MiB for transaction index database\\n\", cache_sizes.tx_index_cache_size * (1.0 / 1024 / 1024));\n     }\n     for (BlockFilterType filter_type : g_enabled_filter_types) {\n         LogPrintf(\"* Using %.1f MiB for %s block filter index database\\n\",\n-                  filter_index_cache * (1.0 / 1024 / 1024), BlockFilterTypeName(filter_type));\n+                  cache_sizes.filter_index_cache_size * (1.0 / 1024 / 1024), BlockFilterTypeName(filter_type));\n     }\n-    LogPrintf(\"* Using %.1f MiB for chain state database\\n\", nCoinDBCache * (1.0 / 1024 / 1024));\n-    LogPrintf(\"* Using %.1f MiB for in-memory UTXO set (plus up to %.1f MiB of unused mempool space)\\n\", nCoinCacheUsage * (1.0 / 1024 / 1024), nMempoolSizeMax * (1.0 / 1024 / 1024));\n+    LogPrintf(\"* Using %.1f MiB for chain state database\\n\", cache_sizes.coin_db_cache_size * (1.0 / 1024 / 1024));\n+    LogPrintf(\"* Using %.1f MiB for in-memory UTXO set (plus up to %.1f MiB of unused mempool space)\\n\", cache_sizes.coin_cache_usage_size * (1.0 / 1024 / 1024), nMempoolSizeMax * (1.0 / 1024 / 1024));\n \n     bool fLoaded = false;\n     while (!fLoaded && !ShutdownRequested()) {\n         const bool fReset = fReindex;\n-        auto is_coinsview_empty = [&](CChainState* chainstate) EXCLUSIVE_LOCKS_REQUIRED(::cs_main) {\n-            return fReset || fReindexChainState || chainstate->CoinsTip().GetBestBlock().IsNull();\n-        };\n         bilingual_str strLoadError;\n \n         uiInterface.InitMessage(_(\"Loading block index…\").translated);\n-\n-        do {\n-            const int64_t load_block_index_start_time = GetTimeMillis();\n-            try {\n-                LOCK(cs_main);\n-                chainman.InitializeChainstate(Assert(node.mempool.get()));\n-                chainman.m_total_coinstip_cache = nCoinCacheUsage;\n-                chainman.m_total_coinsdb_cache = nCoinDBCache;\n-\n-                UnloadBlockIndex(node.mempool.get(), chainman);\n-\n-                auto& pblocktree{chainman.m_blockman.m_block_tree_db};\n-                // new CBlockTreeDB tries to delete the existing file, which\n-                // fails if it's still open from the previous loop. Close it first:\n-                pblocktree.reset();\n-                pblocktree.reset(new CBlockTreeDB(nBlockTreeDBCache, false, fReset));\n-\n-                if (fReset) {\n-                    pblocktree->WriteReindexing(true);\n-                    //If we're reindexing in prune mode, wipe away unusable block files and all undo data files\n-                    if (fPruneMode)\n-                        CleanupBlockRevFiles();\n-                }\n-\n-                if (ShutdownRequested()) break;\n-\n-                // LoadBlockIndex will load fHavePruned if we've ever removed a\n-                // block file from disk.\n-                // Note that it also sets fReindex based on the disk flag!\n-                // From here on out fReindex and fReset mean something different!\n-                if (!chainman.LoadBlockIndex()) {\n-                    if (ShutdownRequested()) break;\n-                    strLoadError = _(\"Error loading block database\");\n-                    break;\n-                }\n-\n-                // If the loaded chain has a wrong genesis, bail out immediately\n-                // (we're likely using a testnet datadir, or the other way around).\n-                if (!chainman.BlockIndex().empty() &&\n-                        !chainman.m_blockman.LookupBlockIndex(chainparams.GetConsensus().hashGenesisBlock)) {\n-                    return InitError(_(\"Incorrect or no genesis block found. Wrong datadir for network?\"));",
      "path": "src/init.cpp",
      "position": 130,
      "original_position": 110,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "7dd898c0df678859ca92773b6990e4e28a83ab24",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It looks like this init error string has been lost. I think that previously this would have been displayed to the user.",
      "created_at": "2021-11-05T14:33:08Z",
      "updated_at": "2021-11-05T15:45:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743713370",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743713370"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1463,
      "original_line": 1463,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743767227",
      "pull_request_review_id": 798882733,
      "id": 743767227,
      "node_id": "PRRC_kwDOABII584sVPy7",
      "diff_hunk": "@@ -0,0 +1,22 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INIT_CACHES_H\n+#define BITCOIN_INIT_CACHES_H\n+\n+#include <cstddef> // for size_t\n+#include <cstdint> // for int64_t\n+\n+class ArgsManager;\n+\n+struct CacheSizes {\n+    int64_t block_tree_db_cache_size;\n+    int64_t coin_db_cache_size;\n+    int64_t coin_cache_usage_size;\n+    int64_t tx_index_cache_size;\n+    int64_t filter_index_cache_size;\n+};\n+void CalculateCacheSizes(const ArgsManager& args, CacheSizes& cache_sizes, size_t n_indexes = 0);",
      "path": "src/init/caches.h",
      "position": null,
      "original_position": 20,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "7dd898c0df678859ca92773b6990e4e28a83ab24",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Again, it'd be nice to have a doxygen comment here. It's not immediately obvious what `n_indexes` represents.\r\n\r\nIs there any reason that you made `cache_sizes` an out-param rather than the return value for this function?\r\n\r\nSince this is a new function and you're adding all the call sites, can we make `n_indexes` a required argument?",
      "created_at": "2021-11-05T15:35:13Z",
      "updated_at": "2021-11-05T15:45:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743767227",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743767227"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743768587",
      "pull_request_review_id": 798882733,
      "id": 743768587,
      "node_id": "PRRC_kwDOABII584sVQIL",
      "diff_hunk": "@@ -0,0 +1,22 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INIT_CACHES_H\n+#define BITCOIN_INIT_CACHES_H\n+\n+#include <cstddef> // for size_t\n+#include <cstdint> // for int64_t\n+\n+class ArgsManager;\n+\n+struct CacheSizes {\n+    int64_t block_tree_db_cache_size;",
      "path": "src/init/caches.h",
      "position": null,
      "original_position": 14,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "7dd898c0df678859ca92773b6990e4e28a83ab24",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The `_cache_size` parts to all these member names seems redundant with the fact they're members of a struct called `CacheSizes`",
      "created_at": "2021-11-05T15:36:50Z",
      "updated_at": "2021-11-05T15:45:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743768587",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743768587"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743771983",
      "pull_request_review_id": 798882733,
      "id": 743771983,
      "node_id": "PRRC_kwDOABII584sVQ9P",
      "diff_hunk": "@@ -1361,217 +1363,100 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     bool fReindexChainState = args.GetBoolArg(\"-reindex-chainstate\", false);\n \n     // cache size calculations\n-    int64_t nTotalCache = (args.GetIntArg(\"-dbcache\", nDefaultDbCache) << 20);\n-    nTotalCache = std::max(nTotalCache, nMinDbCache << 20); // total cache cannot be less than nMinDbCache\n-    nTotalCache = std::min(nTotalCache, nMaxDbCache << 20); // total cache cannot be greater than nMaxDbcache\n-    int64_t nBlockTreeDBCache = std::min(nTotalCache / 8, nMaxBlockDBCache << 20);\n-    nTotalCache -= nBlockTreeDBCache;\n-    int64_t nTxIndexCache = std::min(nTotalCache / 8, args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX) ? nMaxTxIndexCache << 20 : 0);\n-    nTotalCache -= nTxIndexCache;\n-    int64_t filter_index_cache = 0;\n-    if (!g_enabled_filter_types.empty()) {\n-        size_t n_indexes = g_enabled_filter_types.size();\n-        int64_t max_cache = std::min(nTotalCache / 8, max_filter_index_cache << 20);\n-        filter_index_cache = max_cache / n_indexes;\n-        nTotalCache -= filter_index_cache * n_indexes;\n-    }\n-    int64_t nCoinDBCache = std::min(nTotalCache / 2, (nTotalCache / 4) + (1 << 23)); // use 25%-50% of the remainder for disk cache\n-    nCoinDBCache = std::min(nCoinDBCache, nMaxCoinsDBCache << 20); // cap total coins db cache\n-    nTotalCache -= nCoinDBCache;\n-    int64_t nCoinCacheUsage = nTotalCache; // the rest goes to in-memory cache\n+    CacheSizes cache_sizes;\n+    CalculateCacheSizes(args, cache_sizes, g_enabled_filter_types.size());\n+\n     int64_t nMempoolSizeMax = args.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     LogPrintf(\"Cache configuration:\\n\");\n-    LogPrintf(\"* Using %.1f MiB for block index database\\n\", nBlockTreeDBCache * (1.0 / 1024 / 1024));\n+    LogPrintf(\"* Using %.1f MiB for block index database\\n\", cache_sizes.block_tree_db_cache_size * (1.0 / 1024 / 1024));\n     if (args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n-        LogPrintf(\"* Using %.1f MiB for transaction index database\\n\", nTxIndexCache * (1.0 / 1024 / 1024));\n+        LogPrintf(\"* Using %.1f MiB for transaction index database\\n\", cache_sizes.tx_index_cache_size * (1.0 / 1024 / 1024));\n     }\n     for (BlockFilterType filter_type : g_enabled_filter_types) {\n         LogPrintf(\"* Using %.1f MiB for %s block filter index database\\n\",\n-                  filter_index_cache * (1.0 / 1024 / 1024), BlockFilterTypeName(filter_type));\n+                  cache_sizes.filter_index_cache_size * (1.0 / 1024 / 1024), BlockFilterTypeName(filter_type));\n     }\n-    LogPrintf(\"* Using %.1f MiB for chain state database\\n\", nCoinDBCache * (1.0 / 1024 / 1024));\n-    LogPrintf(\"* Using %.1f MiB for in-memory UTXO set (plus up to %.1f MiB of unused mempool space)\\n\", nCoinCacheUsage * (1.0 / 1024 / 1024), nMempoolSizeMax * (1.0 / 1024 / 1024));\n+    LogPrintf(\"* Using %.1f MiB for chain state database\\n\", cache_sizes.coin_db_cache_size * (1.0 / 1024 / 1024));\n+    LogPrintf(\"* Using %.1f MiB for in-memory UTXO set (plus up to %.1f MiB of unused mempool space)\\n\", cache_sizes.coin_cache_usage_size * (1.0 / 1024 / 1024), nMempoolSizeMax * (1.0 / 1024 / 1024));\n \n     bool fLoaded = false;\n     while (!fLoaded && !ShutdownRequested()) {\n         const bool fReset = fReindex;\n-        auto is_coinsview_empty = [&](CChainState* chainstate) EXCLUSIVE_LOCKS_REQUIRED(::cs_main) {\n-            return fReset || fReindexChainState || chainstate->CoinsTip().GetBestBlock().IsNull();\n-        };\n         bilingual_str strLoadError;\n \n         uiInterface.InitMessage(_(\"Loading block index…\").translated);\n-\n-        do {\n-            const int64_t load_block_index_start_time = GetTimeMillis();\n-            try {\n-                LOCK(cs_main);\n-                chainman.InitializeChainstate(Assert(node.mempool.get()));\n-                chainman.m_total_coinstip_cache = nCoinCacheUsage;\n-                chainman.m_total_coinsdb_cache = nCoinDBCache;\n-\n-                UnloadBlockIndex(node.mempool.get(), chainman);\n-\n-                auto& pblocktree{chainman.m_blockman.m_block_tree_db};\n-                // new CBlockTreeDB tries to delete the existing file, which\n-                // fails if it's still open from the previous loop. Close it first:\n-                pblocktree.reset();\n-                pblocktree.reset(new CBlockTreeDB(nBlockTreeDBCache, false, fReset));\n-\n-                if (fReset) {\n-                    pblocktree->WriteReindexing(true);\n-                    //If we're reindexing in prune mode, wipe away unusable block files and all undo data files\n-                    if (fPruneMode)\n-                        CleanupBlockRevFiles();\n-                }\n-\n-                if (ShutdownRequested()) break;\n-\n-                // LoadBlockIndex will load fHavePruned if we've ever removed a\n-                // block file from disk.\n-                // Note that it also sets fReindex based on the disk flag!\n-                // From here on out fReindex and fReset mean something different!\n-                if (!chainman.LoadBlockIndex()) {\n-                    if (ShutdownRequested()) break;\n-                    strLoadError = _(\"Error loading block database\");\n-                    break;\n-                }\n-\n-                // If the loaded chain has a wrong genesis, bail out immediately\n-                // (we're likely using a testnet datadir, or the other way around).\n-                if (!chainman.BlockIndex().empty() &&\n-                        !chainman.m_blockman.LookupBlockIndex(chainparams.GetConsensus().hashGenesisBlock)) {\n-                    return InitError(_(\"Incorrect or no genesis block found. Wrong datadir for network?\"));\n-                }\n-\n-                // Check for changed -prune state.  What we are concerned about is a user who has pruned blocks\n-                // in the past, but is now trying to run unpruned.\n-                if (fHavePruned && !fPruneMode) {\n-                    strLoadError = _(\"You need to rebuild the database using -reindex to go back to unpruned mode.  This will redownload the entire blockchain\");\n-                    break;\n-                }\n-\n-                // At this point blocktree args are consistent with what's on disk.\n-                // If we're not mid-reindex (based on disk + args), add a genesis block on disk\n-                // (otherwise we use the one already on disk).\n-                // This is called again in ThreadImport after the reindex completes.\n-                if (!fReindex && !chainman.ActiveChainstate().LoadGenesisBlock()) {\n-                    strLoadError = _(\"Error initializing block database\");\n-                    break;\n-                }\n-\n-                // At this point we're either in reindex or we've loaded a useful\n-                // block tree into BlockIndex()!\n-\n-                bool failed_chainstate_init = false;\n-\n-                for (CChainState* chainstate : chainman.GetAll()) {\n-                    chainstate->InitCoinsDB(\n-                        /* cache_size_bytes */ nCoinDBCache,\n-                        /* in_memory */ false,\n-                        /* should_wipe */ fReset || fReindexChainState);\n-\n-                    chainstate->CoinsErrorCatcher().AddReadErrCallback([]() {\n-                        uiInterface.ThreadSafeMessageBox(\n-                            _(\"Error reading from database, shutting down.\"),\n-                            \"\", CClientUIInterface::MSG_ERROR);\n-                    });\n-\n-                    // If necessary, upgrade from older database format.\n-                    // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                    if (!chainstate->CoinsDB().Upgrade()) {\n-                        strLoadError = _(\"Error upgrading chainstate database\");\n-                        failed_chainstate_init = true;\n-                        break;\n-                    }\n-\n-                    // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                    if (!chainstate->ReplayBlocks()) {\n-                        strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\");\n-                        failed_chainstate_init = true;\n-                        break;\n-                    }\n-\n-                    // The on-disk coinsdb is now in a good state, create the cache\n-                    chainstate->InitCoinsCache(nCoinCacheUsage);\n-                    assert(chainstate->CanFlushToDisk());\n-\n-                    if (!is_coinsview_empty(chainstate)) {\n-                        // LoadChainTip initializes the chain based on CoinsTip()'s best block\n-                        if (!chainstate->LoadChainTip()) {\n-                            strLoadError = _(\"Error initializing block database\");\n-                            failed_chainstate_init = true;\n-                            break; // out of the per-chainstate loop\n-                        }\n-                        assert(chainstate->m_chain.Tip() != nullptr);\n-                    }\n-                }\n-\n-                if (failed_chainstate_init) {\n-                    break; // out of the chainstate activation do-while\n-                }\n-            } catch (const std::exception& e) {\n-                LogPrintf(\"%s\\n\", e.what());\n-                strLoadError = _(\"Error opening block database\");\n+        const int64_t load_block_index_start_time = GetTimeMillis();\n+        std::optional<ChainstateLoadingError> rv;\n+        try {\n+            rv = LoadChainstateSequence(fReset,\n+                                        chainman,\n+                                        Assert(node.mempool.get()),\n+                                        fPruneMode,\n+                                        chainparams.GetConsensus(),\n+                                        fReindexChainState,\n+                                        cache_sizes.block_tree_db_cache_size,\n+                                        cache_sizes.coin_db_cache_size,\n+                                        cache_sizes.coin_cache_usage_size,\n+                                        args.GetIntArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS),\n+                                        args.GetIntArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n+                                        false,\n+                                        false,",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 197,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "7dd898c0df678859ca92773b6990e4e28a83ab24",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Can you add inline comments for these arguments (that can be checked by a clang-tidy):\r\n\r\n```suggestion\r\n                                        /*block_tree_db_in_memory=*/false,\r\n                                        /*coins_db_in_memory=*/false,\r\n```",
      "created_at": "2021-11-05T15:40:57Z",
      "updated_at": "2021-11-05T15:45:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743771983",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743771983"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": 1402,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1403,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743809355",
      "pull_request_review_id": 799097823,
      "id": 743809355,
      "node_id": "PRRC_kwDOABII584sVaFL",
      "diff_hunk": "@@ -0,0 +1,157 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <init/chainstate.h>\n+\n+#include <consensus/params.h> // for Consensus::Params\n+#include <node/blockstorage.h> // for CleanupBlockRevFiles, fHavePruned, fReindex\n+#include <validation.h> // for a lot of things\n+\n+std::optional<ChainstateLoadingError> LoadChainstateSequence(bool fReset,\n+                                                             ChainstateManager& chainman,\n+                                                             CTxMemPool* mempool,\n+                                                             bool fPruneMode,\n+                                                             const Consensus::Params& consensus_params,\n+                                                             bool fReindexChainState,\n+                                                             int64_t nBlockTreeDBCache,\n+                                                             int64_t nCoinDBCache,\n+                                                             int64_t nCoinCacheUsage,\n+                                                             unsigned int check_blocks,\n+                                                             unsigned int check_level,\n+                                                             bool block_tree_db_in_memory,\n+                                                             bool coins_db_in_memory,\n+                                                             std::function<int64_t()> get_unix_time_seconds,\n+                                                             std::optional<std::function<bool()>> shutdown_requested,\n+                                                             std::optional<std::function<void()>> coins_error_cb,\n+                                                             std::optional<std::function<void()>> verifying_blocks_cb) {\n+    auto is_coinsview_empty = [&](CChainState* chainstate) EXCLUSIVE_LOCKS_REQUIRED(::cs_main) {\n+        return fReset || fReindexChainState || chainstate->CoinsTip().GetBestBlock().IsNull();\n+    };\n+\n+    {\n+        LOCK(cs_main);",
      "path": "src/init/chainstate.cpp",
      "position": null,
      "original_position": 33,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "7dd898c0df678859ca92773b6990e4e28a83ab24",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This function now consists of three code blocks that each lock `cs_main`. What do you think about just taking `cs_main` at the top of the function and holding it throughout?",
      "created_at": "2021-11-05T16:28:38Z",
      "updated_at": "2021-11-05T16:28:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743809355",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743809355"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743851104",
      "pull_request_review_id": 798165689,
      "id": 743851104,
      "node_id": "PRRC_kwDOABII584sVkRg",
      "diff_hunk": "@@ -0,0 +1,30 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INIT_CHAINSTATE_H\n+#define BITCOIN_INIT_CHAINSTATE_H\n+\n+#include <cstdint> // for int64_t\n+\n+class ArgsManager;\n+struct bilingual_str;\n+class CChainParams;\n+class CClientUIInterface;\n+class ChainstateManager;\n+struct NodeContext;\n+\n+bool LoadChainstateSequence(bool& fLoaded,",
      "path": "src/init/chainstate.h",
      "position": null,
      "original_position": 17,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "83ed7db27b4c4798666b77d83fc8e7c3eab8c621",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"init: Extract chainstate loading sequence\" (83ed7db27b4c4798666b77d83fc8e7c3eab8c621)\r\n\r\nOther code in the `src/init/` directory is using the `init:: namespace, and I think it'd be good to follow that pattern:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/77a2f5d30c5ecb764b8a7c098492e1f5cdec90f0/src/init/common.cpp#L25\r\nhttps://github.com/bitcoin/bitcoin/blob/77a2f5d30c5ecb764b8a7c098492e1f5cdec90f0/src/init/bitcoind.cpp#L15\r\n\r\nIn general, I'd like to expand use of pattern putting `src/init` code in `init::`, `src/util` code in `util::`, `src/interfaces` code in `interfaces::`, `src/node` code in `node::`, etc,",
      "created_at": "2021-11-05T17:25:28Z",
      "updated_at": "2021-11-05T19:43:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743851104",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743851104"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743858865",
      "pull_request_review_id": 798165689,
      "id": 743858865,
      "node_id": "PRRC_kwDOABII584sVmKx",
      "diff_hunk": "@@ -0,0 +1,30 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INIT_CHAINSTATE_H",
      "path": "src/init/chainstate.h",
      "position": null,
      "original_position": 5,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "83ed7db27b4c4798666b77d83fc8e7c3eab8c621",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"init: Extract chainstate loading sequence\" (83ed7db27b4c4798666b77d83fc8e7c3eab8c621)\r\n\r\nI think the new files here `chainstate.h`, `chainstate.cpp`, `caches.h`, `caches.cpp` all belong in `src/node/` not `src/init/`.\r\n\r\nI maybe I should have given the [`src/init/`](https://github.com/bitcoin/bitcoin/tree/master/src/init) directory a more descriptive name like `src/process_init/`, but I was intending it to hold common code that various bitcoin executables: `bitcoind`, `bitcoin-qt`, `bitcoin-node`, `bitcoin-wallet`, and `bitcoin-gui` all generically need to start up, and to be place for them to customize their individual behavior by overriding `interfaces::Init` methods.\r\n\r\nThe new code being added in this PR is all node specific, and would be at home in `src/node/`. The new code is also not really related to any existing `src/init/` code except for being called during startup, and it would be unusual in this case to organize source code based on when it is called, instead of what it does.\r\n\r\nI think it should be possible to rename these files pretty painlessly in a rebase and git should be smart enough detect it and not create conflicts. Otherwise a handy command for a git rename over a series of commits is:\r\n\r\n```shell\r\ngit filter-branch --index-filter 'git mv <old name> <new name>' <base>..<head>\r\n```",
      "created_at": "2021-11-05T17:36:54Z",
      "updated_at": "2021-11-05T19:43:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743858865",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743858865"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743895731",
      "pull_request_review_id": 798165689,
      "id": 743895731,
      "node_id": "PRRC_kwDOABII584sVvKz",
      "diff_hunk": "@@ -3764,6 +3764,7 @@ bool CChainState::LoadChainTip()\n     PruneBlockIndexCandidates();\n \n     tip = m_chain.Tip();\n+    uiInterface.NotifyBlockTip(GetSynchronizationState(IsInitialBlockDownload()), tip);",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "b229024932ebd4775070149ff0f27d0fd329bf0a",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"validation: Call NotifyBlockTip in CCS::LoadChainTip\" (b229024932ebd4775070149ff0f27d0fd329bf0a)\r\n\r\nThis seems like a good change, but two questions come to mind here that might be good to address in commit message:\r\n\r\n1-Previously this code would work regardless of whether `OnRPCStarted` was called before `NotifyBlockTip`. Now it *must* be called before or the notification will be lost. I'm assuming the correct thing does happen, but it would be good to say if it does, or if something guarantees it.\r\n\r\n2-It looks like there are some other callers of `NotifyBlockTip_connect` in the node code and `handleNotifyBlockTip` in GUI code that may now receive new notifications. Is this the case, and are all these callers ok receiving it it? Are they are also OK being called with `cs_main` held?\r\n\r\n---\r\n\r\nEDIT: The newer version of b229024932ebd4775070149ff0f27d0fd329bf0a in ca13555758e6d868d3cfa5b55e679fca74381b03 in just moves the `OnRPCStarted` call instead of replacing it, to avoid potential problems above.",
      "created_at": "2021-11-05T18:34:30Z",
      "updated_at": "2021-12-01T19:50:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743895731",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743895731"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3767,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743901275",
      "pull_request_review_id": 798165689,
      "id": 743901275,
      "node_id": "PRRC_kwDOABII584sVwhb",
      "diff_hunk": "@@ -0,0 +1,30 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INIT_CHAINSTATE_H\n+#define BITCOIN_INIT_CHAINSTATE_H\n+\n+#include <cstdint> // for int64_t\n+\n+class ArgsManager;\n+struct bilingual_str;\n+class CChainParams;\n+class CClientUIInterface;\n+class ChainstateManager;\n+struct NodeContext;\n+\n+bool LoadChainstateSequence(bool& fLoaded,",
      "path": "src/init/chainstate.h",
      "position": null,
      "original_position": 17,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "83ed7db27b4c4798666b77d83fc8e7c3eab8c621",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"init: Extract chainstate loading sequence\" (83ed7db27b4c4798666b77d83fc8e7c3eab8c621)\r\n\r\n\"Sequence\" here seems like a strange thing to include in a the function name. Most functions are sequences. IMO an ideal name for this function would be something like `node::LoadChainStates` (assuming this is moved to `src/node/` directory and put in `node::` namespace).",
      "created_at": "2021-11-05T18:43:57Z",
      "updated_at": "2021-11-05T19:43:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743901275",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743901275"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743904232",
      "pull_request_review_id": 798165689,
      "id": 743904232,
      "node_id": "PRRC_kwDOABII584sVxPo",
      "diff_hunk": "@@ -0,0 +1,49 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INIT_CHAINSTATE_H\n+#define BITCOIN_INIT_CHAINSTATE_H\n+\n+#include <cstdint> // for int64_t\n+#include <functional> // for std::function\n+#include <optional> // for std::optional\n+\n+class ChainstateManager;\n+namespace Consensus {\n+    struct Params;\n+}\n+class CTxMemPool;\n+\n+enum class ChainstateLoadingError {\n+    ERROR_LOADING_BLOCK_DB,\n+    ERROR_BAD_GENESIS_BLOCK,\n+    ERROR_PRUNED_NEEDS_REINDEX,\n+    ERROR_LOAD_GENESIS_BLOCK_FAILED,\n+    ERROR_CHAINSTATE_UPGRADE_FAILED,\n+    ERROR_REPLAYBLOCKS_FAILED,\n+    ERROR_LOADCHAINTIP_FAILED,\n+    ERROR_GENERIC_BLOCKDB_OPEN_FAILED,\n+    ERROR_BLOCKS_WITNESS_INSUFFICIENTLY_VALIDATED,\n+    ERROR_BLOCK_FROM_FUTURE,\n+    ERROR_CORRUPTED_BLOCK_DB,\n+};\n+\n+std::optional<ChainstateLoadingError> LoadChainstateSequence(bool fReset,\n+                                                             ChainstateManager& chainman,\n+                                                             CTxMemPool* mempool,\n+                                                             bool fPruneMode,\n+                                                             const Consensus::Params& consensus_params,\n+                                                             bool fReindexChainState,\n+                                                             int64_t nBlockTreeDBCache,\n+                                                             int64_t nCoinDBCache,\n+                                                             int64_t nCoinCacheUsage,\n+                                                             unsigned int check_blocks,\n+                                                             unsigned int check_level,\n+                                                             bool block_tree_db_in_memory,\n+                                                             bool coins_db_in_memory,\n+                                                             std::function<int64_t()> get_unix_time_seconds,\n+                                                             std::optional<std::function<bool()>> shutdown_requested = std::nullopt,\n+                                                             std::optional<std::function<void()>> coins_error_cb = std::nullopt,\n+                                                             std::optional<std::function<void()>> verifying_blocks_cb = std::nullopt);",
      "path": "src/init/chainstate.h",
      "position": null,
      "original_position": 48,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "7dd898c0df678859ca92773b6990e4e28a83ab24",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"init/chainstate: Add options for in-memory DBs\" (f45b885db6636e135d617d915e0ef4ec9e1be8e6)\r\n\r\nI think the `LoadChainstateSequence` function already has so many arguments that if we're going to add optional ones they should really be consolidated in an options struct like:\r\n\r\n```c++\r\nstruct LoadChainStatesOptions {\r\n    std::optional<std::function<bool()>> shutdown_requested_cb;\r\n    std::optional<std::function<void()>> coins_error_cb;\r\n    std::optional<std::function<void()>> verifying_blocks_cb;\r\n};\r\n```\r\n\r\nIf it's possible to eliminate other function arguments that have sensible default values and move them to the options struct as well, that would be great:\r\n\r\n```c++\r\n    bool block_tree_db_in_memory = false;\r\n    bool coins_db_in_memory = false;\r\n```",
      "created_at": "2021-11-05T18:49:05Z",
      "updated_at": "2021-11-05T19:43:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743904232",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743904232"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": 46,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 48,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743923908",
      "pull_request_review_id": 799254153,
      "id": 743923908,
      "node_id": "PRRC_kwDOABII584sV2DE",
      "diff_hunk": "@@ -0,0 +1,206 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <init/chainstate.h>\n+\n+#include <chainparams.h> // for CChainParams\n+#include <rpc/blockchain.h> // for RPCNotifyBlockChange\n+#include <util/time.h> // for GetTimeMillis\n+#include <util/translation.h> // for bilingual_str\n+#include <node/blockstorage.h> // for CleanupBlockRevFiles, fHavePruned, fReindex\n+#include <node/context.h> // for NodeContext\n+#include <node/ui_interface.h> // for InitError, CClientUIInterface member access\n+#include <shutdown.h> // for ShutdownRequested\n+#include <timedata.h> // for GetAdjustedTime\n+#include <validation.h> // for a lot of things\n+\n+bool LoadChainstateSequence(bool& fLoaded,\n+                            bilingual_str& strLoadError,\n+                            bool fReset,\n+                            CClientUIInterface& uiInterface,",
      "path": "src/init/chainstate.cpp",
      "position": null,
      "original_position": 21,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "83ed7db27b4c4798666b77d83fc8e7c3eab8c621",
      "in_reply_to_id": null,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"init: Extract chainstate loading sequence\"\r\n\r\nCould you please use a new variable here rather than shadowing the global? I was very confused about what changed that required `AddReadErrCallback([](...))` -> `AddReadErrCallback([&](...))`",
      "created_at": "2021-11-05T19:24:22Z",
      "updated_at": "2021-11-05T21:16:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743923908",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743923908"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 21,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743933885",
      "pull_request_review_id": 799254153,
      "id": 743933885,
      "node_id": "PRRC_kwDOABII584sV4e9",
      "diff_hunk": "@@ -37,11 +36,11 @@ bool LoadChainstateSequence(bool& fLoaded,\n         const int64_t load_block_index_start_time = GetTimeMillis();\n         try {\n             LOCK(cs_main);\n-            chainman.InitializeChainstate(Assert(node.mempool.get()));\n+            chainman.InitializeChainstate(mempool);",
      "path": "src/init/chainstate.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "3ecaf812d4934d63124b640d2aeb008d4b742d89",
      "in_reply_to_id": null,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"init/chainstate: Decouple from concept of NodeContext\"\r\n\r\nI think it makes sense to split this into two commits, one for the decoupling and one for the nullable mempool. I think that's a significant thing to signal for review.\r\n\r\nSome justification for why this is safe (and maybe why it wasn't this way before) would be helpful context for review as well.",
      "created_at": "2021-11-05T19:43:28Z",
      "updated_at": "2021-11-05T21:16:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743933885",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743933885"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743935696",
      "pull_request_review_id": 799254153,
      "id": 743935696,
      "node_id": "PRRC_kwDOABII584sV47Q",
      "diff_hunk": "@@ -1400,6 +1400,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n \n         uiInterface.InitMessage(_(\"Loading block index…\").translated);\n \n+        const int64_t load_block_index_start_time = GetTimeMillis();",
      "path": "src/init.cpp",
      "position": 96,
      "original_position": 4,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "e53e85f8b4ff7642c876950942cadcc819aa50e1",
      "in_reply_to_id": null,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"init/chainstate: Decouple from GetTimeMillis\"\r\n\r\nThe commit message mentions passing in a callback for the current time, but that's not what's happening here. Fingers crossed that's not what happens in the next commit, because it sounds ugly :p",
      "created_at": "2021-11-05T19:47:00Z",
      "updated_at": "2021-11-05T21:16:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743935696",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743935696"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1406,
      "original_line": 1406,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743937762",
      "pull_request_review_id": 799254153,
      "id": 743937762,
      "node_id": "PRRC_kwDOABII584sV5bi",
      "diff_hunk": "@@ -1361,217 +1363,100 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     bool fReindexChainState = args.GetBoolArg(\"-reindex-chainstate\", false);\n \n     // cache size calculations\n-    int64_t nTotalCache = (args.GetIntArg(\"-dbcache\", nDefaultDbCache) << 20);\n-    nTotalCache = std::max(nTotalCache, nMinDbCache << 20); // total cache cannot be less than nMinDbCache\n-    nTotalCache = std::min(nTotalCache, nMaxDbCache << 20); // total cache cannot be greater than nMaxDbcache\n-    int64_t nBlockTreeDBCache = std::min(nTotalCache / 8, nMaxBlockDBCache << 20);\n-    nTotalCache -= nBlockTreeDBCache;\n-    int64_t nTxIndexCache = std::min(nTotalCache / 8, args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX) ? nMaxTxIndexCache << 20 : 0);\n-    nTotalCache -= nTxIndexCache;\n-    int64_t filter_index_cache = 0;\n-    if (!g_enabled_filter_types.empty()) {\n-        size_t n_indexes = g_enabled_filter_types.size();\n-        int64_t max_cache = std::min(nTotalCache / 8, max_filter_index_cache << 20);\n-        filter_index_cache = max_cache / n_indexes;\n-        nTotalCache -= filter_index_cache * n_indexes;\n-    }\n-    int64_t nCoinDBCache = std::min(nTotalCache / 2, (nTotalCache / 4) + (1 << 23)); // use 25%-50% of the remainder for disk cache\n-    nCoinDBCache = std::min(nCoinDBCache, nMaxCoinsDBCache << 20); // cap total coins db cache\n-    nTotalCache -= nCoinDBCache;\n-    int64_t nCoinCacheUsage = nTotalCache; // the rest goes to in-memory cache\n+    CacheSizes cache_sizes;\n+    CalculateCacheSizes(args, cache_sizes, g_enabled_filter_types.size());\n+\n     int64_t nMempoolSizeMax = args.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     LogPrintf(\"Cache configuration:\\n\");\n-    LogPrintf(\"* Using %.1f MiB for block index database\\n\", nBlockTreeDBCache * (1.0 / 1024 / 1024));\n+    LogPrintf(\"* Using %.1f MiB for block index database\\n\", cache_sizes.block_tree_db_cache_size * (1.0 / 1024 / 1024));\n     if (args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n-        LogPrintf(\"* Using %.1f MiB for transaction index database\\n\", nTxIndexCache * (1.0 / 1024 / 1024));\n+        LogPrintf(\"* Using %.1f MiB for transaction index database\\n\", cache_sizes.tx_index_cache_size * (1.0 / 1024 / 1024));\n     }\n     for (BlockFilterType filter_type : g_enabled_filter_types) {\n         LogPrintf(\"* Using %.1f MiB for %s block filter index database\\n\",\n-                  filter_index_cache * (1.0 / 1024 / 1024), BlockFilterTypeName(filter_type));\n+                  cache_sizes.filter_index_cache_size * (1.0 / 1024 / 1024), BlockFilterTypeName(filter_type));\n     }\n-    LogPrintf(\"* Using %.1f MiB for chain state database\\n\", nCoinDBCache * (1.0 / 1024 / 1024));\n-    LogPrintf(\"* Using %.1f MiB for in-memory UTXO set (plus up to %.1f MiB of unused mempool space)\\n\", nCoinCacheUsage * (1.0 / 1024 / 1024), nMempoolSizeMax * (1.0 / 1024 / 1024));\n+    LogPrintf(\"* Using %.1f MiB for chain state database\\n\", cache_sizes.coin_db_cache_size * (1.0 / 1024 / 1024));\n+    LogPrintf(\"* Using %.1f MiB for in-memory UTXO set (plus up to %.1f MiB of unused mempool space)\\n\", cache_sizes.coin_cache_usage_size * (1.0 / 1024 / 1024), nMempoolSizeMax * (1.0 / 1024 / 1024));\n \n     bool fLoaded = false;\n     while (!fLoaded && !ShutdownRequested()) {\n         const bool fReset = fReindex;\n-        auto is_coinsview_empty = [&](CChainState* chainstate) EXCLUSIVE_LOCKS_REQUIRED(::cs_main) {\n-            return fReset || fReindexChainState || chainstate->CoinsTip().GetBestBlock().IsNull();\n-        };\n         bilingual_str strLoadError;\n \n         uiInterface.InitMessage(_(\"Loading block index…\").translated);\n-\n-        do {\n-            const int64_t load_block_index_start_time = GetTimeMillis();\n-            try {\n-                LOCK(cs_main);\n-                chainman.InitializeChainstate(Assert(node.mempool.get()));\n-                chainman.m_total_coinstip_cache = nCoinCacheUsage;\n-                chainman.m_total_coinsdb_cache = nCoinDBCache;\n-\n-                UnloadBlockIndex(node.mempool.get(), chainman);\n-\n-                auto& pblocktree{chainman.m_blockman.m_block_tree_db};\n-                // new CBlockTreeDB tries to delete the existing file, which\n-                // fails if it's still open from the previous loop. Close it first:\n-                pblocktree.reset();\n-                pblocktree.reset(new CBlockTreeDB(nBlockTreeDBCache, false, fReset));\n-\n-                if (fReset) {\n-                    pblocktree->WriteReindexing(true);\n-                    //If we're reindexing in prune mode, wipe away unusable block files and all undo data files\n-                    if (fPruneMode)\n-                        CleanupBlockRevFiles();\n-                }\n-\n-                if (ShutdownRequested()) break;\n-\n-                // LoadBlockIndex will load fHavePruned if we've ever removed a\n-                // block file from disk.\n-                // Note that it also sets fReindex based on the disk flag!\n-                // From here on out fReindex and fReset mean something different!\n-                if (!chainman.LoadBlockIndex()) {\n-                    if (ShutdownRequested()) break;\n-                    strLoadError = _(\"Error loading block database\");\n-                    break;\n-                }\n-\n-                // If the loaded chain has a wrong genesis, bail out immediately\n-                // (we're likely using a testnet datadir, or the other way around).\n-                if (!chainman.BlockIndex().empty() &&\n-                        !chainman.m_blockman.LookupBlockIndex(chainparams.GetConsensus().hashGenesisBlock)) {\n-                    return InitError(_(\"Incorrect or no genesis block found. Wrong datadir for network?\"));\n-                }\n-\n-                // Check for changed -prune state.  What we are concerned about is a user who has pruned blocks\n-                // in the past, but is now trying to run unpruned.\n-                if (fHavePruned && !fPruneMode) {\n-                    strLoadError = _(\"You need to rebuild the database using -reindex to go back to unpruned mode.  This will redownload the entire blockchain\");\n-                    break;\n-                }\n-\n-                // At this point blocktree args are consistent with what's on disk.\n-                // If we're not mid-reindex (based on disk + args), add a genesis block on disk\n-                // (otherwise we use the one already on disk).\n-                // This is called again in ThreadImport after the reindex completes.\n-                if (!fReindex && !chainman.ActiveChainstate().LoadGenesisBlock()) {\n-                    strLoadError = _(\"Error initializing block database\");\n-                    break;\n-                }\n-\n-                // At this point we're either in reindex or we've loaded a useful\n-                // block tree into BlockIndex()!\n-\n-                bool failed_chainstate_init = false;\n-\n-                for (CChainState* chainstate : chainman.GetAll()) {\n-                    chainstate->InitCoinsDB(\n-                        /* cache_size_bytes */ nCoinDBCache,\n-                        /* in_memory */ false,\n-                        /* should_wipe */ fReset || fReindexChainState);\n-\n-                    chainstate->CoinsErrorCatcher().AddReadErrCallback([]() {\n-                        uiInterface.ThreadSafeMessageBox(\n-                            _(\"Error reading from database, shutting down.\"),\n-                            \"\", CClientUIInterface::MSG_ERROR);\n-                    });\n-\n-                    // If necessary, upgrade from older database format.\n-                    // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                    if (!chainstate->CoinsDB().Upgrade()) {\n-                        strLoadError = _(\"Error upgrading chainstate database\");\n-                        failed_chainstate_init = true;\n-                        break;\n-                    }\n-\n-                    // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                    if (!chainstate->ReplayBlocks()) {\n-                        strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\");\n-                        failed_chainstate_init = true;\n-                        break;\n-                    }\n-\n-                    // The on-disk coinsdb is now in a good state, create the cache\n-                    chainstate->InitCoinsCache(nCoinCacheUsage);\n-                    assert(chainstate->CanFlushToDisk());\n-\n-                    if (!is_coinsview_empty(chainstate)) {\n-                        // LoadChainTip initializes the chain based on CoinsTip()'s best block\n-                        if (!chainstate->LoadChainTip()) {\n-                            strLoadError = _(\"Error initializing block database\");\n-                            failed_chainstate_init = true;\n-                            break; // out of the per-chainstate loop\n-                        }\n-                        assert(chainstate->m_chain.Tip() != nullptr);\n-                    }\n-                }\n-\n-                if (failed_chainstate_init) {\n-                    break; // out of the chainstate activation do-while\n-                }\n-            } catch (const std::exception& e) {\n-                LogPrintf(\"%s\\n\", e.what());\n-                strLoadError = _(\"Error opening block database\");\n+        const int64_t load_block_index_start_time = GetTimeMillis();\n+        std::optional<ChainstateLoadingError> rv;\n+        try {\n+            rv = LoadChainstateSequence(fReset,\n+                                        chainman,\n+                                        Assert(node.mempool.get()),\n+                                        fPruneMode,\n+                                        chainparams.GetConsensus(),\n+                                        fReindexChainState,\n+                                        cache_sizes.block_tree_db_cache_size,\n+                                        cache_sizes.coin_db_cache_size,\n+                                        cache_sizes.coin_cache_usage_size,\n+                                        args.GetIntArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS),\n+                                        args.GetIntArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n+                                        false,\n+                                        false,\n+                                        GetAdjustedTime,\n+                                        ShutdownRequested,\n+                                        []() {\n+                                            uiInterface.ThreadSafeMessageBox(\n+                                                _(\"Error reading from database, shutting down.\"),\n+                                                \"\", CClientUIInterface::MSG_ERROR);\n+                                        },\n+                                        []() {\n+                                            uiInterface.InitMessage(_(\"Verifying blocks…\").translated);\n+                                        });\n+        } catch (const std::exception& e) {\n+            LogPrintf(\"%s\\n\", e.what()); // XXX\n+            rv = ChainstateLoadingError::ERROR_GENERIC_BLOCKDB_OPEN_FAILED;\n+        }\n+        if (rv.has_value()) {\n+            switch (rv.value()) {\n+            case ChainstateLoadingError::ERROR_LOADING_BLOCK_DB:",
      "path": "src/init.cpp",
      "position": 122,
      "original_position": 214,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "7dd898c0df678859ca92773b6990e4e28a83ab24",
      "in_reply_to_id": 743709991,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hmm, I rather like the separation of logic. How about a lookup function rather than marrying them? Something like https://github.com/bitcoin/bitcoin/blob/master/src/script/script_error.cpp#L10 ",
      "created_at": "2021-11-05T19:50:45Z",
      "updated_at": "2021-11-05T21:16:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743937762",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743937762"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1432,
      "original_line": 1432,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743953515",
      "pull_request_review_id": 799254153,
      "id": 743953515,
      "node_id": "PRRC_kwDOABII584sV9Rr",
      "diff_hunk": "@@ -1415,8 +1412,46 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n                                          nCoinCacheUsage,\n                                          args.GetIntArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS),\n                                          args.GetIntArg(\"-checklevel\", DEFAULT_CHECKLEVEL));\n-        if (!rv) return false;\n-        if (fLoaded) {\n+        if (rv.has_value()) {\n+            switch (rv.value()) {\n+            case ChainstateLoadingError::ERROR_LOADING_BLOCK_DB:\n+                strLoadError = _(\"Error loading block database\");\n+                break;\n+            case ChainstateLoadingError::ERROR_BAD_GENESIS_BLOCK:\n+                return false;  // bail immediately!\n+            case ChainstateLoadingError::ERROR_PRUNED_NEEDS_REINDEX:\n+                strLoadError = _(\"You need to rebuild the database using -reindex to go back to unpruned mode.  This will redownload the entire blockchain\");\n+                break;\n+            case ChainstateLoadingError::ERROR_LOAD_GENESIS_BLOCK_FAILED:\n+                strLoadError = _(\"Error initializing block database\");\n+                break;\n+            case ChainstateLoadingError::ERROR_CHAINSTATE_UPGRADE_FAILED:\n+                strLoadError = _(\"Error upgrading chainstate database\");\n+                break;\n+            case ChainstateLoadingError::ERROR_REPLAYBLOCKS_FAILED:\n+                strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\");\n+                break;\n+            case ChainstateLoadingError::ERROR_LOADCHAINTIP_FAILED:\n+                strLoadError = _(\"Error initializing block database\");\n+                break;\n+            case ChainstateLoadingError::ERROR_GENERIC_BLOCKDB_OPEN_FAILED:\n+                strLoadError = _(\"Error opening block database\");\n+                break;\n+            case ChainstateLoadingError::ERROR_BLOCKS_WITNESS_INSUFFICIENTLY_VALIDATED:\n+                strLoadError = strprintf(_(\"Witness data for blocks after height %d requires validation. Please restart with -reindex.\"),\n+                                         chainparams.GetConsensus().SegwitHeight);\n+                break;\n+            case ChainstateLoadingError::ERROR_BLOCK_FROM_FUTURE:\n+                strLoadError = _(\"The block database contains a block which appears to be from the future. \"\n+                                 \"This may be due to your computer's date and time being set incorrectly. \"\n+                                 \"Only rebuild the block database if you are sure that your computer's date and time are correct\");\n+                break;\n+            case ChainstateLoadingError::ERROR_CORRUPTED_BLOCK_DB:\n+                strLoadError = _(\"Corrupted block database detected\");\n+                break;\n+            }\n+        } else if (!ShutdownRequested()) {",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 57,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "cd29d334a38fdaf0bbbe810a9cbdeeffad394daa",
      "in_reply_to_id": 743624127,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I third this idea. It's what I would've expected, and the alternative here seems weird. Additionally, we might want to specify in the future _why_ shutdown was requested (rpc, console, etc). ",
      "created_at": "2021-11-05T20:17:47Z",
      "updated_at": "2021-11-05T21:16:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743953515",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743953515"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1453,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743954607",
      "pull_request_review_id": 799254153,
      "id": 743954607,
      "node_id": "PRRC_kwDOABII584sV9iv",
      "diff_hunk": "@@ -127,36 +115,25 @@ bool LoadChainstateSequence(bool& fLoaded,\n                 if (!is_coinsview_empty(chainstate)) {\n                     // LoadChainTip initializes the chain based on CoinsTip()'s best block\n                     if (!chainstate->LoadChainTip()) {\n-                        strLoadError = _(\"Error initializing block database\");\n-                        failed_chainstate_init = true;\n-                        break; // out of the per-chainstate loop\n+                        return ChainstateLoadingError::ERROR_LOADCHAINTIP_FAILED;\n                     }\n                     assert(chainstate->m_chain.Tip() != nullptr);\n                 }\n             }\n-\n-            if (failed_chainstate_init) {\n-                break; // out of the chainstate activation do-while\n-            }\n         } catch (const std::exception& e) {\n-            LogPrintf(\"%s\\n\", e.what());\n-            strLoadError = _(\"Error opening block database\");\n-            break;\n+            LogPrintf(\"%s\\n\", e.what()); // XXX",
      "path": "src/init/chainstate.cpp",
      "position": null,
      "original_position": 132,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "cd29d334a38fdaf0bbbe810a9cbdeeffad394daa",
      "in_reply_to_id": null,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "why why why",
      "created_at": "2021-11-05T20:20:00Z",
      "updated_at": "2021-11-05T21:16:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743954607",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743954607"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 124,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743961236",
      "pull_request_review_id": 799254153,
      "id": 743961236,
      "node_id": "PRRC_kwDOABII584sV_KU",
      "diff_hunk": "@@ -90,11 +90,9 @@ std::optional<ChainstateLoadingError> LoadChainstateSequence(bool fReset,\n                 /* in_memory */ false,\n                 /* should_wipe */ fReset || fReindexChainState);\n \n-            chainstate->CoinsErrorCatcher().AddReadErrCallback([&]() {\n-                uiInterface.ThreadSafeMessageBox(\n-                    _(\"Error reading from database, shutting down.\"),\n-                    \"\", CClientUIInterface::MSG_ERROR);\n-            });\n+            if (coins_error_cb.has_value()) {\n+                chainstate->CoinsErrorCatcher().AddReadErrCallback(coins_error_cb.value());",
      "path": "src/init/chainstate.cpp",
      "position": null,
      "original_position": 35,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "0e61af06834c9a9331e620343e60e9104e08331e",
      "in_reply_to_id": null,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"init/chainstate: Decouple from concept of uiInterface\"\r\n\r\nHmm, this seems strange. Before, it printed \"Error reading from database, shutting down\". Was that innacurate?\r\n\r\nWhy not instead return an error type and let the caller print the message and shutdown?",
      "created_at": "2021-11-05T20:32:56Z",
      "updated_at": "2021-11-05T21:16:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743961236",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743961236"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743965561",
      "pull_request_review_id": 799254153,
      "id": 743965561,
      "node_id": "PRRC_kwDOABII584sWAN5",
      "diff_hunk": "@@ -138,7 +136,9 @@ std::optional<ChainstateLoadingError> LoadChainstateSequence(bool fReset,\n \n         for (CChainState* chainstate : chainman.GetAll()) {\n             if (!is_coinsview_empty(chainstate)) {\n-                uiInterface.InitMessage(_(\"Verifying blocks…\").translated);\n+                if (verifying_blocks_cb.has_value()) {",
      "path": "src/init/chainstate.cpp",
      "position": null,
      "original_position": 45,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "0e61af06834c9a9331e620343e60e9104e08331e",
      "in_reply_to_id": null,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Might it make sense to split this function in two rather than requiring a callback in the middle? `LoadChainstateSequence` / `VerifyChainState` or so?\r\n\r\nNeeding to tell that we've moved on from one thing to another is a hint to me that maybe those things should be separate functions :)",
      "created_at": "2021-11-05T20:41:57Z",
      "updated_at": "2021-11-05T21:16:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743965561",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743965561"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 139,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743969616",
      "pull_request_review_id": 799254153,
      "id": 743969616,
      "node_id": "PRRC_kwDOABII584sWBNQ",
      "diff_hunk": "@@ -1400,25 +1400,31 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n \n         uiInterface.InitMessage(_(\"Loading block index…\").translated);\n         const int64_t load_block_index_start_time = GetTimeMillis();\n-        auto rv = LoadChainstateSequence(fReset,\n-                                         chainman,\n-                                         Assert(node.mempool.get()),\n-                                         fPruneMode,\n-                                         chainparams,\n-                                         fReindexChainState,\n-                                         nBlockTreeDBCache,\n-                                         nCoinDBCache,\n-                                         nCoinCacheUsage,\n-                                         args.GetIntArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS),\n-                                         args.GetIntArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n-                                         []() {\n-                                             uiInterface.ThreadSafeMessageBox(\n-                                                 _(\"Error reading from database, shutting down.\"),\n-                                                 \"\", CClientUIInterface::MSG_ERROR);\n-                                         },\n-                                         []() {\n-                                             uiInterface.InitMessage(_(\"Verifying blocks…\").translated);\n-                                         });\n+        std::optional<ChainstateLoadingError> rv;\n+        try {",
      "path": "src/init.cpp",
      "position": 98,
      "original_position": 24,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "38d88e2950afc99caca31388fd75f03c4d06bcc9",
      "in_reply_to_id": null,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"init/chainstate: Reduce coupling of LogPrintf\"\r\n\r\nGrouping the two try/catch looks safe to me, but I think it'd be easier to split this into two commits: one to combine, and one to move it out to init. That way the second is pretty much move-only.\r\n\r\nOr if you end up going the `LoadChainstateSequence`/`VerifyChainState` route, this logic doesn't need to change.",
      "created_at": "2021-11-05T20:50:25Z",
      "updated_at": "2021-11-05T21:16:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743969616",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743969616"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1408,
      "original_line": 1408,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743971845",
      "pull_request_review_id": 799254153,
      "id": 743971845,
      "node_id": "PRRC_kwDOABII584sWBwF",
      "diff_hunk": "@@ -136,10 +136,6 @@ std::optional<ChainstateLoadingError> LoadChainstateSequence(bool fReset,\n                 if (verifying_blocks_cb.has_value()) {\n                     verifying_blocks_cb.value()();\n                 }\n-                if (fHavePruned && check_blocks > MIN_BLOCKS_TO_KEEP) {",
      "path": "src/init/chainstate.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "10564583429762ddfb6601d1f64ac663406bf8e2",
      "in_reply_to_id": null,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I belive this change also wouldn't be necessary with this function split in half.",
      "created_at": "2021-11-05T20:55:16Z",
      "updated_at": "2021-11-05T21:16:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743971845",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743971845"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 139,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743976213",
      "pull_request_review_id": 799254153,
      "id": 743976213,
      "node_id": "PRRC_kwDOABII584sWC0V",
      "diff_hunk": "@@ -137,7 +137,7 @@ std::optional<ChainstateLoadingError> LoadChainstateSequence(bool fReset,\n                 }\n \n                 const CBlockIndex* tip = chainstate->m_chain.Tip();\n-                if (tip && tip->nTime > GetAdjustedTime() + 2 * 60 * 60) {\n+                if (tip && tip->nTime > get_unix_time_seconds() + 2 * 60 * 60) {",
      "path": "src/init/chainstate.cpp",
      "position": null,
      "original_position": 21,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "8eae069b0015524d877a6fc9f92ab85d2ad6b26b",
      "in_reply_to_id": null,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"init/chainstate: Decouple from GetAdjustedTime\"\r\n\r\nI suppose we can't just pass a timeout time in here because the current logic includes the runtime of the loading/checking itself?\r\n\r\nThis seems like yet something else that would be unnecessary if this function were split. That keeps coming up as a potential alternative, but I'm unsure if there's something that would prevent it, so I'll stop suggesting it.",
      "created_at": "2021-11-05T21:04:52Z",
      "updated_at": "2021-11-05T21:16:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743976213",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743976213"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 147,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743977609",
      "pull_request_review_id": 799254153,
      "id": 743977609,
      "node_id": "PRRC_kwDOABII584sWDKJ",
      "diff_hunk": "@@ -21,6 +20,7 @@ std::optional<ChainstateLoadingError> LoadChainstateSequence(bool fReset,\n                                                              unsigned int check_blocks,\n                                                              unsigned int check_level,\n                                                              std::function<int64_t()> get_unix_time_seconds,\n+                                                             std::optional<std::function<bool()>> shutdown_requested,",
      "path": "src/init/chainstate.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "855a86102095003779d63b514728d1f0ed4d3a91",
      "in_reply_to_id": null,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"init/chainstate: Decouple from ShutdownRequested\"\r\n\r\nWithout actually trying it.. I think it would be more straightforward here to use a `CThreadInterrupt` which gets triggered for this.",
      "created_at": "2021-11-05T21:08:05Z",
      "updated_at": "2021-11-05T21:16:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743977609",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743977609"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 23,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745731433",
      "pull_request_review_id": 801435209,
      "id": 745731433,
      "node_id": "PRRC_kwDOABII584scvVp",
      "diff_hunk": "@@ -1361,217 +1363,100 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     bool fReindexChainState = args.GetBoolArg(\"-reindex-chainstate\", false);\n \n     // cache size calculations\n-    int64_t nTotalCache = (args.GetIntArg(\"-dbcache\", nDefaultDbCache) << 20);\n-    nTotalCache = std::max(nTotalCache, nMinDbCache << 20); // total cache cannot be less than nMinDbCache\n-    nTotalCache = std::min(nTotalCache, nMaxDbCache << 20); // total cache cannot be greater than nMaxDbcache\n-    int64_t nBlockTreeDBCache = std::min(nTotalCache / 8, nMaxBlockDBCache << 20);\n-    nTotalCache -= nBlockTreeDBCache;\n-    int64_t nTxIndexCache = std::min(nTotalCache / 8, args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX) ? nMaxTxIndexCache << 20 : 0);\n-    nTotalCache -= nTxIndexCache;\n-    int64_t filter_index_cache = 0;\n-    if (!g_enabled_filter_types.empty()) {\n-        size_t n_indexes = g_enabled_filter_types.size();\n-        int64_t max_cache = std::min(nTotalCache / 8, max_filter_index_cache << 20);\n-        filter_index_cache = max_cache / n_indexes;\n-        nTotalCache -= filter_index_cache * n_indexes;\n-    }\n-    int64_t nCoinDBCache = std::min(nTotalCache / 2, (nTotalCache / 4) + (1 << 23)); // use 25%-50% of the remainder for disk cache\n-    nCoinDBCache = std::min(nCoinDBCache, nMaxCoinsDBCache << 20); // cap total coins db cache\n-    nTotalCache -= nCoinDBCache;\n-    int64_t nCoinCacheUsage = nTotalCache; // the rest goes to in-memory cache\n+    CacheSizes cache_sizes;\n+    CalculateCacheSizes(args, cache_sizes, g_enabled_filter_types.size());\n+\n     int64_t nMempoolSizeMax = args.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     LogPrintf(\"Cache configuration:\\n\");\n-    LogPrintf(\"* Using %.1f MiB for block index database\\n\", nBlockTreeDBCache * (1.0 / 1024 / 1024));\n+    LogPrintf(\"* Using %.1f MiB for block index database\\n\", cache_sizes.block_tree_db_cache_size * (1.0 / 1024 / 1024));\n     if (args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n-        LogPrintf(\"* Using %.1f MiB for transaction index database\\n\", nTxIndexCache * (1.0 / 1024 / 1024));\n+        LogPrintf(\"* Using %.1f MiB for transaction index database\\n\", cache_sizes.tx_index_cache_size * (1.0 / 1024 / 1024));\n     }\n     for (BlockFilterType filter_type : g_enabled_filter_types) {\n         LogPrintf(\"* Using %.1f MiB for %s block filter index database\\n\",\n-                  filter_index_cache * (1.0 / 1024 / 1024), BlockFilterTypeName(filter_type));\n+                  cache_sizes.filter_index_cache_size * (1.0 / 1024 / 1024), BlockFilterTypeName(filter_type));\n     }\n-    LogPrintf(\"* Using %.1f MiB for chain state database\\n\", nCoinDBCache * (1.0 / 1024 / 1024));\n-    LogPrintf(\"* Using %.1f MiB for in-memory UTXO set (plus up to %.1f MiB of unused mempool space)\\n\", nCoinCacheUsage * (1.0 / 1024 / 1024), nMempoolSizeMax * (1.0 / 1024 / 1024));\n+    LogPrintf(\"* Using %.1f MiB for chain state database\\n\", cache_sizes.coin_db_cache_size * (1.0 / 1024 / 1024));\n+    LogPrintf(\"* Using %.1f MiB for in-memory UTXO set (plus up to %.1f MiB of unused mempool space)\\n\", cache_sizes.coin_cache_usage_size * (1.0 / 1024 / 1024), nMempoolSizeMax * (1.0 / 1024 / 1024));\n \n     bool fLoaded = false;\n     while (!fLoaded && !ShutdownRequested()) {\n         const bool fReset = fReindex;\n-        auto is_coinsview_empty = [&](CChainState* chainstate) EXCLUSIVE_LOCKS_REQUIRED(::cs_main) {\n-            return fReset || fReindexChainState || chainstate->CoinsTip().GetBestBlock().IsNull();\n-        };\n         bilingual_str strLoadError;\n \n         uiInterface.InitMessage(_(\"Loading block index…\").translated);\n-\n-        do {\n-            const int64_t load_block_index_start_time = GetTimeMillis();\n-            try {\n-                LOCK(cs_main);\n-                chainman.InitializeChainstate(Assert(node.mempool.get()));\n-                chainman.m_total_coinstip_cache = nCoinCacheUsage;\n-                chainman.m_total_coinsdb_cache = nCoinDBCache;\n-\n-                UnloadBlockIndex(node.mempool.get(), chainman);\n-\n-                auto& pblocktree{chainman.m_blockman.m_block_tree_db};\n-                // new CBlockTreeDB tries to delete the existing file, which\n-                // fails if it's still open from the previous loop. Close it first:\n-                pblocktree.reset();\n-                pblocktree.reset(new CBlockTreeDB(nBlockTreeDBCache, false, fReset));\n-\n-                if (fReset) {\n-                    pblocktree->WriteReindexing(true);\n-                    //If we're reindexing in prune mode, wipe away unusable block files and all undo data files\n-                    if (fPruneMode)\n-                        CleanupBlockRevFiles();\n-                }\n-\n-                if (ShutdownRequested()) break;\n-\n-                // LoadBlockIndex will load fHavePruned if we've ever removed a\n-                // block file from disk.\n-                // Note that it also sets fReindex based on the disk flag!\n-                // From here on out fReindex and fReset mean something different!\n-                if (!chainman.LoadBlockIndex()) {\n-                    if (ShutdownRequested()) break;\n-                    strLoadError = _(\"Error loading block database\");\n-                    break;\n-                }\n-\n-                // If the loaded chain has a wrong genesis, bail out immediately\n-                // (we're likely using a testnet datadir, or the other way around).\n-                if (!chainman.BlockIndex().empty() &&\n-                        !chainman.m_blockman.LookupBlockIndex(chainparams.GetConsensus().hashGenesisBlock)) {\n-                    return InitError(_(\"Incorrect or no genesis block found. Wrong datadir for network?\"));\n-                }\n-\n-                // Check for changed -prune state.  What we are concerned about is a user who has pruned blocks\n-                // in the past, but is now trying to run unpruned.\n-                if (fHavePruned && !fPruneMode) {\n-                    strLoadError = _(\"You need to rebuild the database using -reindex to go back to unpruned mode.  This will redownload the entire blockchain\");\n-                    break;\n-                }\n-\n-                // At this point blocktree args are consistent with what's on disk.\n-                // If we're not mid-reindex (based on disk + args), add a genesis block on disk\n-                // (otherwise we use the one already on disk).\n-                // This is called again in ThreadImport after the reindex completes.\n-                if (!fReindex && !chainman.ActiveChainstate().LoadGenesisBlock()) {\n-                    strLoadError = _(\"Error initializing block database\");\n-                    break;\n-                }\n-\n-                // At this point we're either in reindex or we've loaded a useful\n-                // block tree into BlockIndex()!\n-\n-                bool failed_chainstate_init = false;\n-\n-                for (CChainState* chainstate : chainman.GetAll()) {\n-                    chainstate->InitCoinsDB(\n-                        /* cache_size_bytes */ nCoinDBCache,\n-                        /* in_memory */ false,\n-                        /* should_wipe */ fReset || fReindexChainState);\n-\n-                    chainstate->CoinsErrorCatcher().AddReadErrCallback([]() {\n-                        uiInterface.ThreadSafeMessageBox(\n-                            _(\"Error reading from database, shutting down.\"),\n-                            \"\", CClientUIInterface::MSG_ERROR);\n-                    });\n-\n-                    // If necessary, upgrade from older database format.\n-                    // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                    if (!chainstate->CoinsDB().Upgrade()) {\n-                        strLoadError = _(\"Error upgrading chainstate database\");\n-                        failed_chainstate_init = true;\n-                        break;\n-                    }\n-\n-                    // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                    if (!chainstate->ReplayBlocks()) {\n-                        strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\");\n-                        failed_chainstate_init = true;\n-                        break;\n-                    }\n-\n-                    // The on-disk coinsdb is now in a good state, create the cache\n-                    chainstate->InitCoinsCache(nCoinCacheUsage);\n-                    assert(chainstate->CanFlushToDisk());\n-\n-                    if (!is_coinsview_empty(chainstate)) {\n-                        // LoadChainTip initializes the chain based on CoinsTip()'s best block\n-                        if (!chainstate->LoadChainTip()) {\n-                            strLoadError = _(\"Error initializing block database\");\n-                            failed_chainstate_init = true;\n-                            break; // out of the per-chainstate loop\n-                        }\n-                        assert(chainstate->m_chain.Tip() != nullptr);\n-                    }\n-                }\n-\n-                if (failed_chainstate_init) {\n-                    break; // out of the chainstate activation do-while\n-                }\n-            } catch (const std::exception& e) {\n-                LogPrintf(\"%s\\n\", e.what());\n-                strLoadError = _(\"Error opening block database\");\n+        const int64_t load_block_index_start_time = GetTimeMillis();\n+        std::optional<ChainstateLoadingError> rv;\n+        try {\n+            rv = LoadChainstateSequence(fReset,\n+                                        chainman,\n+                                        Assert(node.mempool.get()),\n+                                        fPruneMode,\n+                                        chainparams.GetConsensus(),\n+                                        fReindexChainState,\n+                                        cache_sizes.block_tree_db_cache_size,\n+                                        cache_sizes.coin_db_cache_size,\n+                                        cache_sizes.coin_cache_usage_size,\n+                                        args.GetIntArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS),\n+                                        args.GetIntArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n+                                        false,\n+                                        false,\n+                                        GetAdjustedTime,\n+                                        ShutdownRequested,\n+                                        []() {\n+                                            uiInterface.ThreadSafeMessageBox(\n+                                                _(\"Error reading from database, shutting down.\"),\n+                                                \"\", CClientUIInterface::MSG_ERROR);\n+                                        },\n+                                        []() {\n+                                            uiInterface.InitMessage(_(\"Verifying blocks…\").translated);\n+                                        });\n+        } catch (const std::exception& e) {\n+            LogPrintf(\"%s\\n\", e.what()); // XXX\n+            rv = ChainstateLoadingError::ERROR_GENERIC_BLOCKDB_OPEN_FAILED;\n+        }\n+        if (rv.has_value()) {\n+            switch (rv.value()) {\n+            case ChainstateLoadingError::ERROR_LOADING_BLOCK_DB:",
      "path": "src/init.cpp",
      "position": 122,
      "original_position": 214,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "7dd898c0df678859ca92773b6990e4e28a83ab24",
      "in_reply_to_id": 743709991,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I agree with @theuni but in any case this feels like bikeshedding to me. What's written as-is is a clear improvement and refining this further should be optional or follow-up IMO.",
      "created_at": "2021-11-09T15:30:07Z",
      "updated_at": "2021-11-09T15:30:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r745731433",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745731433"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1432,
      "original_line": 1432,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745734466",
      "pull_request_review_id": 801439296,
      "id": 745734466,
      "node_id": "PRRC_kwDOABII584scwFC",
      "diff_hunk": "@@ -0,0 +1,22 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INIT_CACHES_H\n+#define BITCOIN_INIT_CACHES_H\n+\n+#include <cstddef> // for size_t\n+#include <cstdint> // for int64_t\n+\n+class ArgsManager;\n+\n+struct CacheSizes {\n+    int64_t block_tree_db_cache_size;\n+    int64_t coin_db_cache_size;\n+    int64_t coin_cache_usage_size;\n+    int64_t tx_index_cache_size;\n+    int64_t filter_index_cache_size;\n+};\n+void CalculateCacheSizes(const ArgsManager& args, CacheSizes& cache_sizes, size_t n_indexes = 0);",
      "path": "src/init/caches.h",
      "position": null,
      "original_position": 20,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "7dd898c0df678859ca92773b6990e4e28a83ab24",
      "in_reply_to_id": 743767227,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Is there any reason that you made cache_sizes an out-param rather than the return value for this function?\r\n\r\nhttps://github.com/bitcoin/bitcoin/pull/23280#discussion_r739436153",
      "created_at": "2021-11-09T15:33:06Z",
      "updated_at": "2021-11-09T15:33:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r745734466",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745734466"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745738495",
      "pull_request_review_id": 801444655,
      "id": 745738495,
      "node_id": "PRRC_kwDOABII584scxD_",
      "diff_hunk": "@@ -1361,217 +1363,100 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     bool fReindexChainState = args.GetBoolArg(\"-reindex-chainstate\", false);\n \n     // cache size calculations\n-    int64_t nTotalCache = (args.GetIntArg(\"-dbcache\", nDefaultDbCache) << 20);\n-    nTotalCache = std::max(nTotalCache, nMinDbCache << 20); // total cache cannot be less than nMinDbCache\n-    nTotalCache = std::min(nTotalCache, nMaxDbCache << 20); // total cache cannot be greater than nMaxDbcache\n-    int64_t nBlockTreeDBCache = std::min(nTotalCache / 8, nMaxBlockDBCache << 20);\n-    nTotalCache -= nBlockTreeDBCache;\n-    int64_t nTxIndexCache = std::min(nTotalCache / 8, args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX) ? nMaxTxIndexCache << 20 : 0);\n-    nTotalCache -= nTxIndexCache;\n-    int64_t filter_index_cache = 0;\n-    if (!g_enabled_filter_types.empty()) {\n-        size_t n_indexes = g_enabled_filter_types.size();\n-        int64_t max_cache = std::min(nTotalCache / 8, max_filter_index_cache << 20);\n-        filter_index_cache = max_cache / n_indexes;\n-        nTotalCache -= filter_index_cache * n_indexes;\n-    }\n-    int64_t nCoinDBCache = std::min(nTotalCache / 2, (nTotalCache / 4) + (1 << 23)); // use 25%-50% of the remainder for disk cache\n-    nCoinDBCache = std::min(nCoinDBCache, nMaxCoinsDBCache << 20); // cap total coins db cache\n-    nTotalCache -= nCoinDBCache;\n-    int64_t nCoinCacheUsage = nTotalCache; // the rest goes to in-memory cache\n+    CacheSizes cache_sizes;\n+    CalculateCacheSizes(args, cache_sizes, g_enabled_filter_types.size());\n+\n     int64_t nMempoolSizeMax = args.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     LogPrintf(\"Cache configuration:\\n\");\n-    LogPrintf(\"* Using %.1f MiB for block index database\\n\", nBlockTreeDBCache * (1.0 / 1024 / 1024));\n+    LogPrintf(\"* Using %.1f MiB for block index database\\n\", cache_sizes.block_tree_db_cache_size * (1.0 / 1024 / 1024));\n     if (args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n-        LogPrintf(\"* Using %.1f MiB for transaction index database\\n\", nTxIndexCache * (1.0 / 1024 / 1024));\n+        LogPrintf(\"* Using %.1f MiB for transaction index database\\n\", cache_sizes.tx_index_cache_size * (1.0 / 1024 / 1024));\n     }\n     for (BlockFilterType filter_type : g_enabled_filter_types) {\n         LogPrintf(\"* Using %.1f MiB for %s block filter index database\\n\",\n-                  filter_index_cache * (1.0 / 1024 / 1024), BlockFilterTypeName(filter_type));\n+                  cache_sizes.filter_index_cache_size * (1.0 / 1024 / 1024), BlockFilterTypeName(filter_type));\n     }\n-    LogPrintf(\"* Using %.1f MiB for chain state database\\n\", nCoinDBCache * (1.0 / 1024 / 1024));\n-    LogPrintf(\"* Using %.1f MiB for in-memory UTXO set (plus up to %.1f MiB of unused mempool space)\\n\", nCoinCacheUsage * (1.0 / 1024 / 1024), nMempoolSizeMax * (1.0 / 1024 / 1024));\n+    LogPrintf(\"* Using %.1f MiB for chain state database\\n\", cache_sizes.coin_db_cache_size * (1.0 / 1024 / 1024));\n+    LogPrintf(\"* Using %.1f MiB for in-memory UTXO set (plus up to %.1f MiB of unused mempool space)\\n\", cache_sizes.coin_cache_usage_size * (1.0 / 1024 / 1024), nMempoolSizeMax * (1.0 / 1024 / 1024));\n \n     bool fLoaded = false;\n     while (!fLoaded && !ShutdownRequested()) {\n         const bool fReset = fReindex;\n-        auto is_coinsview_empty = [&](CChainState* chainstate) EXCLUSIVE_LOCKS_REQUIRED(::cs_main) {\n-            return fReset || fReindexChainState || chainstate->CoinsTip().GetBestBlock().IsNull();\n-        };\n         bilingual_str strLoadError;\n \n         uiInterface.InitMessage(_(\"Loading block index…\").translated);\n-\n-        do {\n-            const int64_t load_block_index_start_time = GetTimeMillis();\n-            try {\n-                LOCK(cs_main);\n-                chainman.InitializeChainstate(Assert(node.mempool.get()));\n-                chainman.m_total_coinstip_cache = nCoinCacheUsage;\n-                chainman.m_total_coinsdb_cache = nCoinDBCache;\n-\n-                UnloadBlockIndex(node.mempool.get(), chainman);\n-\n-                auto& pblocktree{chainman.m_blockman.m_block_tree_db};\n-                // new CBlockTreeDB tries to delete the existing file, which\n-                // fails if it's still open from the previous loop. Close it first:\n-                pblocktree.reset();\n-                pblocktree.reset(new CBlockTreeDB(nBlockTreeDBCache, false, fReset));\n-\n-                if (fReset) {\n-                    pblocktree->WriteReindexing(true);\n-                    //If we're reindexing in prune mode, wipe away unusable block files and all undo data files\n-                    if (fPruneMode)\n-                        CleanupBlockRevFiles();\n-                }\n-\n-                if (ShutdownRequested()) break;\n-\n-                // LoadBlockIndex will load fHavePruned if we've ever removed a\n-                // block file from disk.\n-                // Note that it also sets fReindex based on the disk flag!\n-                // From here on out fReindex and fReset mean something different!\n-                if (!chainman.LoadBlockIndex()) {\n-                    if (ShutdownRequested()) break;\n-                    strLoadError = _(\"Error loading block database\");\n-                    break;\n-                }\n-\n-                // If the loaded chain has a wrong genesis, bail out immediately\n-                // (we're likely using a testnet datadir, or the other way around).\n-                if (!chainman.BlockIndex().empty() &&\n-                        !chainman.m_blockman.LookupBlockIndex(chainparams.GetConsensus().hashGenesisBlock)) {\n-                    return InitError(_(\"Incorrect or no genesis block found. Wrong datadir for network?\"));\n-                }\n-\n-                // Check for changed -prune state.  What we are concerned about is a user who has pruned blocks\n-                // in the past, but is now trying to run unpruned.\n-                if (fHavePruned && !fPruneMode) {\n-                    strLoadError = _(\"You need to rebuild the database using -reindex to go back to unpruned mode.  This will redownload the entire blockchain\");\n-                    break;\n-                }\n-\n-                // At this point blocktree args are consistent with what's on disk.\n-                // If we're not mid-reindex (based on disk + args), add a genesis block on disk\n-                // (otherwise we use the one already on disk).\n-                // This is called again in ThreadImport after the reindex completes.\n-                if (!fReindex && !chainman.ActiveChainstate().LoadGenesisBlock()) {\n-                    strLoadError = _(\"Error initializing block database\");\n-                    break;\n-                }\n-\n-                // At this point we're either in reindex or we've loaded a useful\n-                // block tree into BlockIndex()!\n-\n-                bool failed_chainstate_init = false;\n-\n-                for (CChainState* chainstate : chainman.GetAll()) {\n-                    chainstate->InitCoinsDB(\n-                        /* cache_size_bytes */ nCoinDBCache,\n-                        /* in_memory */ false,\n-                        /* should_wipe */ fReset || fReindexChainState);\n-\n-                    chainstate->CoinsErrorCatcher().AddReadErrCallback([]() {\n-                        uiInterface.ThreadSafeMessageBox(\n-                            _(\"Error reading from database, shutting down.\"),\n-                            \"\", CClientUIInterface::MSG_ERROR);\n-                    });\n-\n-                    // If necessary, upgrade from older database format.\n-                    // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                    if (!chainstate->CoinsDB().Upgrade()) {\n-                        strLoadError = _(\"Error upgrading chainstate database\");\n-                        failed_chainstate_init = true;\n-                        break;\n-                    }\n-\n-                    // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                    if (!chainstate->ReplayBlocks()) {\n-                        strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\");\n-                        failed_chainstate_init = true;\n-                        break;\n-                    }\n-\n-                    // The on-disk coinsdb is now in a good state, create the cache\n-                    chainstate->InitCoinsCache(nCoinCacheUsage);\n-                    assert(chainstate->CanFlushToDisk());\n-\n-                    if (!is_coinsview_empty(chainstate)) {\n-                        // LoadChainTip initializes the chain based on CoinsTip()'s best block\n-                        if (!chainstate->LoadChainTip()) {\n-                            strLoadError = _(\"Error initializing block database\");\n-                            failed_chainstate_init = true;\n-                            break; // out of the per-chainstate loop\n-                        }\n-                        assert(chainstate->m_chain.Tip() != nullptr);\n-                    }\n-                }\n-\n-                if (failed_chainstate_init) {\n-                    break; // out of the chainstate activation do-while\n-                }\n-            } catch (const std::exception& e) {\n-                LogPrintf(\"%s\\n\", e.what());\n-                strLoadError = _(\"Error opening block database\");\n+        const int64_t load_block_index_start_time = GetTimeMillis();\n+        std::optional<ChainstateLoadingError> rv;\n+        try {\n+            rv = LoadChainstateSequence(fReset,\n+                                        chainman,\n+                                        Assert(node.mempool.get()),\n+                                        fPruneMode,\n+                                        chainparams.GetConsensus(),\n+                                        fReindexChainState,\n+                                        cache_sizes.block_tree_db_cache_size,\n+                                        cache_sizes.coin_db_cache_size,\n+                                        cache_sizes.coin_cache_usage_size,\n+                                        args.GetIntArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS),\n+                                        args.GetIntArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n+                                        false,\n+                                        false,\n+                                        GetAdjustedTime,\n+                                        ShutdownRequested,\n+                                        []() {\n+                                            uiInterface.ThreadSafeMessageBox(\n+                                                _(\"Error reading from database, shutting down.\"),\n+                                                \"\", CClientUIInterface::MSG_ERROR);\n+                                        },\n+                                        []() {\n+                                            uiInterface.InitMessage(_(\"Verifying blocks…\").translated);\n+                                        });\n+        } catch (const std::exception& e) {\n+            LogPrintf(\"%s\\n\", e.what()); // XXX\n+            rv = ChainstateLoadingError::ERROR_GENERIC_BLOCKDB_OPEN_FAILED;\n+        }\n+        if (rv.has_value()) {\n+            switch (rv.value()) {\n+            case ChainstateLoadingError::ERROR_LOADING_BLOCK_DB:",
      "path": "src/init.cpp",
      "position": 122,
      "original_position": 214,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "7dd898c0df678859ca92773b6990e4e28a83ab24",
      "in_reply_to_id": 743709991,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": ">  How about a lookup function rather than marrying them? Something like master/src/script/script_error.cpp#L10\r\n\r\nI agree that this would be an improvement, separating the error code:string lookup from the recovery logic.",
      "created_at": "2021-11-09T15:37:08Z",
      "updated_at": "2021-11-09T15:37:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r745738495",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745738495"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1432,
      "original_line": 1432,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/747746404",
      "pull_request_review_id": 804124570,
      "id": 747746404,
      "node_id": "PRRC_kwDOABII584skbRk",
      "diff_hunk": "@@ -0,0 +1,30 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INIT_CHAINSTATE_H",
      "path": "src/init/chainstate.h",
      "position": null,
      "original_position": 5,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "83ed7db27b4c4798666b77d83fc8e7c3eab8c621",
      "in_reply_to_id": 743858865,
      "user": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah I see! What do you think about putting the files under `src/node/init`? And I supposed everything would be under the `node::init` namespace?",
      "created_at": "2021-11-11T19:00:54Z",
      "updated_at": "2021-11-11T19:00:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r747746404",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/747746404"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/747818124",
      "pull_request_review_id": 804218181,
      "id": 747818124,
      "node_id": "PRRC_kwDOABII584sksyM",
      "diff_hunk": "@@ -0,0 +1,30 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INIT_CHAINSTATE_H",
      "path": "src/init/chainstate.h",
      "position": null,
      "original_position": 5,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "83ed7db27b4c4798666b77d83fc8e7c3eab8c621",
      "in_reply_to_id": 743858865,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Ah I see! What do you think about putting the files under `src/node/init`? And I supposed everything would be under the `node::init` namespace?\r\n\r\nProbably best to use your own judgement, and other people may have opinions, but IMO just moving things into top level, `node`, `wallet`, `util` directories is ideal for seeing where things come from and making it obvious when you may be doing something bad like calling wallet code from node code. Extra nesting may be good, but I think only if there is some specific justification for it. In this case, I think having an \"init\" module is not good, because it will encourage people to add startup code from disparate parts of code there instead of closer to the actual database/index/connection structures that are being initialized. \r\n\r\nI also think it's nice when there's a 1:1 correspondence between directories and namespaces and personally would not suggest extra nesting for namespaces either.",
      "created_at": "2021-11-11T21:08:25Z",
      "updated_at": "2021-11-11T21:08:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r747818124",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/747818124"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/748454947",
      "pull_request_review_id": 805043197,
      "id": 748454947,
      "node_id": "PRRC_kwDOABII584snIQj",
      "diff_hunk": "@@ -0,0 +1,206 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <init/chainstate.h>\n+\n+#include <chainparams.h> // for CChainParams\n+#include <rpc/blockchain.h> // for RPCNotifyBlockChange\n+#include <util/time.h> // for GetTimeMillis\n+#include <util/translation.h> // for bilingual_str\n+#include <node/blockstorage.h> // for CleanupBlockRevFiles, fHavePruned, fReindex\n+#include <node/context.h> // for NodeContext\n+#include <node/ui_interface.h> // for InitError, CClientUIInterface member access\n+#include <shutdown.h> // for ShutdownRequested\n+#include <timedata.h> // for GetAdjustedTime\n+#include <validation.h> // for a lot of things\n+\n+bool LoadChainstateSequence(bool& fLoaded,\n+                            bilingual_str& strLoadError,\n+                            bool fReset,\n+                            CClientUIInterface& uiInterface,",
      "path": "src/init/chainstate.cpp",
      "position": null,
      "original_position": 21,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "83ed7db27b4c4798666b77d83fc8e7c3eab8c621",
      "in_reply_to_id": 743923908,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743923908\r\n\r\n> In commit \"init: Extract chainstate loading sequence\"\r\n> \r\n> Could you please use a new variable here rather than shadowing the global? I was very confused about what changed that required `AddReadErrCallback([](...))` -> `AddReadErrCallback([&](...))`\r\n\r\nIMO ideal thing to do here so this commit remains moveonly and easy to review and doesn't require thinking about renames or new variables or adding `[&]`, is just to keep `uiInterface` a global instead of a parameter here, since it is already going away later anyway in 83ed7db27b4c4798666b77d83fc8e7c3eab8c621.",
      "created_at": "2021-11-12T17:14:20Z",
      "updated_at": "2021-11-12T17:46:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r748454947",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/748454947"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 21,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/748465779",
      "pull_request_review_id": 805043197,
      "id": 748465779,
      "node_id": "PRRC_kwDOABII584snK5z",
      "diff_hunk": "@@ -1361,217 +1363,100 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     bool fReindexChainState = args.GetBoolArg(\"-reindex-chainstate\", false);\n \n     // cache size calculations\n-    int64_t nTotalCache = (args.GetIntArg(\"-dbcache\", nDefaultDbCache) << 20);\n-    nTotalCache = std::max(nTotalCache, nMinDbCache << 20); // total cache cannot be less than nMinDbCache\n-    nTotalCache = std::min(nTotalCache, nMaxDbCache << 20); // total cache cannot be greater than nMaxDbcache\n-    int64_t nBlockTreeDBCache = std::min(nTotalCache / 8, nMaxBlockDBCache << 20);\n-    nTotalCache -= nBlockTreeDBCache;\n-    int64_t nTxIndexCache = std::min(nTotalCache / 8, args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX) ? nMaxTxIndexCache << 20 : 0);\n-    nTotalCache -= nTxIndexCache;\n-    int64_t filter_index_cache = 0;\n-    if (!g_enabled_filter_types.empty()) {\n-        size_t n_indexes = g_enabled_filter_types.size();\n-        int64_t max_cache = std::min(nTotalCache / 8, max_filter_index_cache << 20);\n-        filter_index_cache = max_cache / n_indexes;\n-        nTotalCache -= filter_index_cache * n_indexes;\n-    }\n-    int64_t nCoinDBCache = std::min(nTotalCache / 2, (nTotalCache / 4) + (1 << 23)); // use 25%-50% of the remainder for disk cache\n-    nCoinDBCache = std::min(nCoinDBCache, nMaxCoinsDBCache << 20); // cap total coins db cache\n-    nTotalCache -= nCoinDBCache;\n-    int64_t nCoinCacheUsage = nTotalCache; // the rest goes to in-memory cache\n+    CacheSizes cache_sizes;\n+    CalculateCacheSizes(args, cache_sizes, g_enabled_filter_types.size());\n+\n     int64_t nMempoolSizeMax = args.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     LogPrintf(\"Cache configuration:\\n\");\n-    LogPrintf(\"* Using %.1f MiB for block index database\\n\", nBlockTreeDBCache * (1.0 / 1024 / 1024));\n+    LogPrintf(\"* Using %.1f MiB for block index database\\n\", cache_sizes.block_tree_db_cache_size * (1.0 / 1024 / 1024));\n     if (args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n-        LogPrintf(\"* Using %.1f MiB for transaction index database\\n\", nTxIndexCache * (1.0 / 1024 / 1024));\n+        LogPrintf(\"* Using %.1f MiB for transaction index database\\n\", cache_sizes.tx_index_cache_size * (1.0 / 1024 / 1024));\n     }\n     for (BlockFilterType filter_type : g_enabled_filter_types) {\n         LogPrintf(\"* Using %.1f MiB for %s block filter index database\\n\",\n-                  filter_index_cache * (1.0 / 1024 / 1024), BlockFilterTypeName(filter_type));\n+                  cache_sizes.filter_index_cache_size * (1.0 / 1024 / 1024), BlockFilterTypeName(filter_type));\n     }\n-    LogPrintf(\"* Using %.1f MiB for chain state database\\n\", nCoinDBCache * (1.0 / 1024 / 1024));\n-    LogPrintf(\"* Using %.1f MiB for in-memory UTXO set (plus up to %.1f MiB of unused mempool space)\\n\", nCoinCacheUsage * (1.0 / 1024 / 1024), nMempoolSizeMax * (1.0 / 1024 / 1024));\n+    LogPrintf(\"* Using %.1f MiB for chain state database\\n\", cache_sizes.coin_db_cache_size * (1.0 / 1024 / 1024));\n+    LogPrintf(\"* Using %.1f MiB for in-memory UTXO set (plus up to %.1f MiB of unused mempool space)\\n\", cache_sizes.coin_cache_usage_size * (1.0 / 1024 / 1024), nMempoolSizeMax * (1.0 / 1024 / 1024));\n \n     bool fLoaded = false;\n     while (!fLoaded && !ShutdownRequested()) {\n         const bool fReset = fReindex;\n-        auto is_coinsview_empty = [&](CChainState* chainstate) EXCLUSIVE_LOCKS_REQUIRED(::cs_main) {\n-            return fReset || fReindexChainState || chainstate->CoinsTip().GetBestBlock().IsNull();\n-        };\n         bilingual_str strLoadError;\n \n         uiInterface.InitMessage(_(\"Loading block index…\").translated);\n-\n-        do {\n-            const int64_t load_block_index_start_time = GetTimeMillis();\n-            try {\n-                LOCK(cs_main);\n-                chainman.InitializeChainstate(Assert(node.mempool.get()));\n-                chainman.m_total_coinstip_cache = nCoinCacheUsage;\n-                chainman.m_total_coinsdb_cache = nCoinDBCache;\n-\n-                UnloadBlockIndex(node.mempool.get(), chainman);\n-\n-                auto& pblocktree{chainman.m_blockman.m_block_tree_db};\n-                // new CBlockTreeDB tries to delete the existing file, which\n-                // fails if it's still open from the previous loop. Close it first:\n-                pblocktree.reset();\n-                pblocktree.reset(new CBlockTreeDB(nBlockTreeDBCache, false, fReset));\n-\n-                if (fReset) {\n-                    pblocktree->WriteReindexing(true);\n-                    //If we're reindexing in prune mode, wipe away unusable block files and all undo data files\n-                    if (fPruneMode)\n-                        CleanupBlockRevFiles();\n-                }\n-\n-                if (ShutdownRequested()) break;\n-\n-                // LoadBlockIndex will load fHavePruned if we've ever removed a\n-                // block file from disk.\n-                // Note that it also sets fReindex based on the disk flag!\n-                // From here on out fReindex and fReset mean something different!\n-                if (!chainman.LoadBlockIndex()) {\n-                    if (ShutdownRequested()) break;\n-                    strLoadError = _(\"Error loading block database\");\n-                    break;\n-                }\n-\n-                // If the loaded chain has a wrong genesis, bail out immediately\n-                // (we're likely using a testnet datadir, or the other way around).\n-                if (!chainman.BlockIndex().empty() &&\n-                        !chainman.m_blockman.LookupBlockIndex(chainparams.GetConsensus().hashGenesisBlock)) {\n-                    return InitError(_(\"Incorrect or no genesis block found. Wrong datadir for network?\"));\n-                }\n-\n-                // Check for changed -prune state.  What we are concerned about is a user who has pruned blocks\n-                // in the past, but is now trying to run unpruned.\n-                if (fHavePruned && !fPruneMode) {\n-                    strLoadError = _(\"You need to rebuild the database using -reindex to go back to unpruned mode.  This will redownload the entire blockchain\");\n-                    break;\n-                }\n-\n-                // At this point blocktree args are consistent with what's on disk.\n-                // If we're not mid-reindex (based on disk + args), add a genesis block on disk\n-                // (otherwise we use the one already on disk).\n-                // This is called again in ThreadImport after the reindex completes.\n-                if (!fReindex && !chainman.ActiveChainstate().LoadGenesisBlock()) {\n-                    strLoadError = _(\"Error initializing block database\");\n-                    break;\n-                }\n-\n-                // At this point we're either in reindex or we've loaded a useful\n-                // block tree into BlockIndex()!\n-\n-                bool failed_chainstate_init = false;\n-\n-                for (CChainState* chainstate : chainman.GetAll()) {\n-                    chainstate->InitCoinsDB(\n-                        /* cache_size_bytes */ nCoinDBCache,\n-                        /* in_memory */ false,\n-                        /* should_wipe */ fReset || fReindexChainState);\n-\n-                    chainstate->CoinsErrorCatcher().AddReadErrCallback([]() {\n-                        uiInterface.ThreadSafeMessageBox(\n-                            _(\"Error reading from database, shutting down.\"),\n-                            \"\", CClientUIInterface::MSG_ERROR);\n-                    });\n-\n-                    // If necessary, upgrade from older database format.\n-                    // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                    if (!chainstate->CoinsDB().Upgrade()) {\n-                        strLoadError = _(\"Error upgrading chainstate database\");\n-                        failed_chainstate_init = true;\n-                        break;\n-                    }\n-\n-                    // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                    if (!chainstate->ReplayBlocks()) {\n-                        strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\");\n-                        failed_chainstate_init = true;\n-                        break;\n-                    }\n-\n-                    // The on-disk coinsdb is now in a good state, create the cache\n-                    chainstate->InitCoinsCache(nCoinCacheUsage);\n-                    assert(chainstate->CanFlushToDisk());\n-\n-                    if (!is_coinsview_empty(chainstate)) {\n-                        // LoadChainTip initializes the chain based on CoinsTip()'s best block\n-                        if (!chainstate->LoadChainTip()) {\n-                            strLoadError = _(\"Error initializing block database\");\n-                            failed_chainstate_init = true;\n-                            break; // out of the per-chainstate loop\n-                        }\n-                        assert(chainstate->m_chain.Tip() != nullptr);\n-                    }\n-                }\n-\n-                if (failed_chainstate_init) {\n-                    break; // out of the chainstate activation do-while\n-                }\n-            } catch (const std::exception& e) {\n-                LogPrintf(\"%s\\n\", e.what());\n-                strLoadError = _(\"Error opening block database\");\n+        const int64_t load_block_index_start_time = GetTimeMillis();\n+        std::optional<ChainstateLoadingError> rv;\n+        try {\n+            rv = LoadChainstateSequence(fReset,\n+                                        chainman,\n+                                        Assert(node.mempool.get()),\n+                                        fPruneMode,\n+                                        chainparams.GetConsensus(),\n+                                        fReindexChainState,\n+                                        cache_sizes.block_tree_db_cache_size,\n+                                        cache_sizes.coin_db_cache_size,\n+                                        cache_sizes.coin_cache_usage_size,\n+                                        args.GetIntArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS),\n+                                        args.GetIntArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n+                                        false,\n+                                        false,\n+                                        GetAdjustedTime,\n+                                        ShutdownRequested,\n+                                        []() {\n+                                            uiInterface.ThreadSafeMessageBox(\n+                                                _(\"Error reading from database, shutting down.\"),\n+                                                \"\", CClientUIInterface::MSG_ERROR);\n+                                        },\n+                                        []() {\n+                                            uiInterface.InitMessage(_(\"Verifying blocks…\").translated);\n+                                        });\n+        } catch (const std::exception& e) {\n+            LogPrintf(\"%s\\n\", e.what()); // XXX\n+            rv = ChainstateLoadingError::ERROR_GENERIC_BLOCKDB_OPEN_FAILED;\n+        }\n+        if (rv.has_value()) {\n+            switch (rv.value()) {\n+            case ChainstateLoadingError::ERROR_LOADING_BLOCK_DB:",
      "path": "src/init.cpp",
      "position": 122,
      "original_position": 214,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "7dd898c0df678859ca92773b6990e4e28a83ab24",
      "in_reply_to_id": 743709991,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"init/chainstate: Decouple from stringy errors\" (cd29d334a38fdaf0bbbe810a9cbdeeffad394daa)\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743709991\r\n\r\nI agree with John's original comment, and do not think fine grained error codes are good or that some kind of external error code -> string indirection would be good. I think the ideal thing would be for this to return a straightforward SUCCESS / FAILURE / INTERRUPTED status, with a detailed error string or list of error strings in the case of failure. The problem with fine grained return codes is:\r\n\r\n- They are maintenance burden making code more verbose than it needs to be and hard to spot inconsistencies easier to introduce.\r\n- They are unergnomic for callers (important if this is supposed evolve into a libbitcoin kernel API) because it's more work for callers to figure out how to handle a long list error codes correctly than a small set of cases.\r\n- They are worse for user experience because it's not possible to include specific information about errors that may be helpful like filenames, timestamps, hashes.",
      "created_at": "2021-11-12T17:31:11Z",
      "updated_at": "2021-11-12T17:46:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r748465779",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/748465779"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1432,
      "original_line": 1432,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/748472926",
      "pull_request_review_id": 805043197,
      "id": 748472926,
      "node_id": "PRRC_kwDOABII584snMpe",
      "diff_hunk": "@@ -0,0 +1,30 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INIT_CHAINSTATE_H",
      "path": "src/init/chainstate.h",
      "position": null,
      "original_position": 5,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "83ed7db27b4c4798666b77d83fc8e7c3eab8c621",
      "in_reply_to_id": 743858865,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/23280#discussion_r743133511\r\n\r\nFWIW, followed up with more `node::` namespace in #23497",
      "created_at": "2021-11-12T17:42:06Z",
      "updated_at": "2021-11-12T19:38:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r748472926",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/748472926"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/749570801",
      "pull_request_review_id": 806400875,
      "id": 749570801,
      "node_id": "PRRC_kwDOABII584srYrx",
      "diff_hunk": "@@ -1361,217 +1363,100 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     bool fReindexChainState = args.GetBoolArg(\"-reindex-chainstate\", false);\n \n     // cache size calculations\n-    int64_t nTotalCache = (args.GetIntArg(\"-dbcache\", nDefaultDbCache) << 20);\n-    nTotalCache = std::max(nTotalCache, nMinDbCache << 20); // total cache cannot be less than nMinDbCache\n-    nTotalCache = std::min(nTotalCache, nMaxDbCache << 20); // total cache cannot be greater than nMaxDbcache\n-    int64_t nBlockTreeDBCache = std::min(nTotalCache / 8, nMaxBlockDBCache << 20);\n-    nTotalCache -= nBlockTreeDBCache;\n-    int64_t nTxIndexCache = std::min(nTotalCache / 8, args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX) ? nMaxTxIndexCache << 20 : 0);\n-    nTotalCache -= nTxIndexCache;\n-    int64_t filter_index_cache = 0;\n-    if (!g_enabled_filter_types.empty()) {\n-        size_t n_indexes = g_enabled_filter_types.size();\n-        int64_t max_cache = std::min(nTotalCache / 8, max_filter_index_cache << 20);\n-        filter_index_cache = max_cache / n_indexes;\n-        nTotalCache -= filter_index_cache * n_indexes;\n-    }\n-    int64_t nCoinDBCache = std::min(nTotalCache / 2, (nTotalCache / 4) + (1 << 23)); // use 25%-50% of the remainder for disk cache\n-    nCoinDBCache = std::min(nCoinDBCache, nMaxCoinsDBCache << 20); // cap total coins db cache\n-    nTotalCache -= nCoinDBCache;\n-    int64_t nCoinCacheUsage = nTotalCache; // the rest goes to in-memory cache\n+    CacheSizes cache_sizes;\n+    CalculateCacheSizes(args, cache_sizes, g_enabled_filter_types.size());\n+\n     int64_t nMempoolSizeMax = args.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     LogPrintf(\"Cache configuration:\\n\");\n-    LogPrintf(\"* Using %.1f MiB for block index database\\n\", nBlockTreeDBCache * (1.0 / 1024 / 1024));\n+    LogPrintf(\"* Using %.1f MiB for block index database\\n\", cache_sizes.block_tree_db_cache_size * (1.0 / 1024 / 1024));\n     if (args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n-        LogPrintf(\"* Using %.1f MiB for transaction index database\\n\", nTxIndexCache * (1.0 / 1024 / 1024));\n+        LogPrintf(\"* Using %.1f MiB for transaction index database\\n\", cache_sizes.tx_index_cache_size * (1.0 / 1024 / 1024));\n     }\n     for (BlockFilterType filter_type : g_enabled_filter_types) {\n         LogPrintf(\"* Using %.1f MiB for %s block filter index database\\n\",\n-                  filter_index_cache * (1.0 / 1024 / 1024), BlockFilterTypeName(filter_type));\n+                  cache_sizes.filter_index_cache_size * (1.0 / 1024 / 1024), BlockFilterTypeName(filter_type));\n     }\n-    LogPrintf(\"* Using %.1f MiB for chain state database\\n\", nCoinDBCache * (1.0 / 1024 / 1024));\n-    LogPrintf(\"* Using %.1f MiB for in-memory UTXO set (plus up to %.1f MiB of unused mempool space)\\n\", nCoinCacheUsage * (1.0 / 1024 / 1024), nMempoolSizeMax * (1.0 / 1024 / 1024));\n+    LogPrintf(\"* Using %.1f MiB for chain state database\\n\", cache_sizes.coin_db_cache_size * (1.0 / 1024 / 1024));\n+    LogPrintf(\"* Using %.1f MiB for in-memory UTXO set (plus up to %.1f MiB of unused mempool space)\\n\", cache_sizes.coin_cache_usage_size * (1.0 / 1024 / 1024), nMempoolSizeMax * (1.0 / 1024 / 1024));\n \n     bool fLoaded = false;\n     while (!fLoaded && !ShutdownRequested()) {\n         const bool fReset = fReindex;\n-        auto is_coinsview_empty = [&](CChainState* chainstate) EXCLUSIVE_LOCKS_REQUIRED(::cs_main) {\n-            return fReset || fReindexChainState || chainstate->CoinsTip().GetBestBlock().IsNull();\n-        };\n         bilingual_str strLoadError;\n \n         uiInterface.InitMessage(_(\"Loading block index…\").translated);\n-\n-        do {\n-            const int64_t load_block_index_start_time = GetTimeMillis();\n-            try {\n-                LOCK(cs_main);\n-                chainman.InitializeChainstate(Assert(node.mempool.get()));\n-                chainman.m_total_coinstip_cache = nCoinCacheUsage;\n-                chainman.m_total_coinsdb_cache = nCoinDBCache;\n-\n-                UnloadBlockIndex(node.mempool.get(), chainman);\n-\n-                auto& pblocktree{chainman.m_blockman.m_block_tree_db};\n-                // new CBlockTreeDB tries to delete the existing file, which\n-                // fails if it's still open from the previous loop. Close it first:\n-                pblocktree.reset();\n-                pblocktree.reset(new CBlockTreeDB(nBlockTreeDBCache, false, fReset));\n-\n-                if (fReset) {\n-                    pblocktree->WriteReindexing(true);\n-                    //If we're reindexing in prune mode, wipe away unusable block files and all undo data files\n-                    if (fPruneMode)\n-                        CleanupBlockRevFiles();\n-                }\n-\n-                if (ShutdownRequested()) break;\n-\n-                // LoadBlockIndex will load fHavePruned if we've ever removed a\n-                // block file from disk.\n-                // Note that it also sets fReindex based on the disk flag!\n-                // From here on out fReindex and fReset mean something different!\n-                if (!chainman.LoadBlockIndex()) {\n-                    if (ShutdownRequested()) break;\n-                    strLoadError = _(\"Error loading block database\");\n-                    break;\n-                }\n-\n-                // If the loaded chain has a wrong genesis, bail out immediately\n-                // (we're likely using a testnet datadir, or the other way around).\n-                if (!chainman.BlockIndex().empty() &&\n-                        !chainman.m_blockman.LookupBlockIndex(chainparams.GetConsensus().hashGenesisBlock)) {\n-                    return InitError(_(\"Incorrect or no genesis block found. Wrong datadir for network?\"));\n-                }\n-\n-                // Check for changed -prune state.  What we are concerned about is a user who has pruned blocks\n-                // in the past, but is now trying to run unpruned.\n-                if (fHavePruned && !fPruneMode) {\n-                    strLoadError = _(\"You need to rebuild the database using -reindex to go back to unpruned mode.  This will redownload the entire blockchain\");\n-                    break;\n-                }\n-\n-                // At this point blocktree args are consistent with what's on disk.\n-                // If we're not mid-reindex (based on disk + args), add a genesis block on disk\n-                // (otherwise we use the one already on disk).\n-                // This is called again in ThreadImport after the reindex completes.\n-                if (!fReindex && !chainman.ActiveChainstate().LoadGenesisBlock()) {\n-                    strLoadError = _(\"Error initializing block database\");\n-                    break;\n-                }\n-\n-                // At this point we're either in reindex or we've loaded a useful\n-                // block tree into BlockIndex()!\n-\n-                bool failed_chainstate_init = false;\n-\n-                for (CChainState* chainstate : chainman.GetAll()) {\n-                    chainstate->InitCoinsDB(\n-                        /* cache_size_bytes */ nCoinDBCache,\n-                        /* in_memory */ false,\n-                        /* should_wipe */ fReset || fReindexChainState);\n-\n-                    chainstate->CoinsErrorCatcher().AddReadErrCallback([]() {\n-                        uiInterface.ThreadSafeMessageBox(\n-                            _(\"Error reading from database, shutting down.\"),\n-                            \"\", CClientUIInterface::MSG_ERROR);\n-                    });\n-\n-                    // If necessary, upgrade from older database format.\n-                    // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                    if (!chainstate->CoinsDB().Upgrade()) {\n-                        strLoadError = _(\"Error upgrading chainstate database\");\n-                        failed_chainstate_init = true;\n-                        break;\n-                    }\n-\n-                    // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                    if (!chainstate->ReplayBlocks()) {\n-                        strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\");\n-                        failed_chainstate_init = true;\n-                        break;\n-                    }\n-\n-                    // The on-disk coinsdb is now in a good state, create the cache\n-                    chainstate->InitCoinsCache(nCoinCacheUsage);\n-                    assert(chainstate->CanFlushToDisk());\n-\n-                    if (!is_coinsview_empty(chainstate)) {\n-                        // LoadChainTip initializes the chain based on CoinsTip()'s best block\n-                        if (!chainstate->LoadChainTip()) {\n-                            strLoadError = _(\"Error initializing block database\");\n-                            failed_chainstate_init = true;\n-                            break; // out of the per-chainstate loop\n-                        }\n-                        assert(chainstate->m_chain.Tip() != nullptr);\n-                    }\n-                }\n-\n-                if (failed_chainstate_init) {\n-                    break; // out of the chainstate activation do-while\n-                }\n-            } catch (const std::exception& e) {\n-                LogPrintf(\"%s\\n\", e.what());\n-                strLoadError = _(\"Error opening block database\");\n+        const int64_t load_block_index_start_time = GetTimeMillis();\n+        std::optional<ChainstateLoadingError> rv;\n+        try {\n+            rv = LoadChainstateSequence(fReset,\n+                                        chainman,\n+                                        Assert(node.mempool.get()),\n+                                        fPruneMode,\n+                                        chainparams.GetConsensus(),\n+                                        fReindexChainState,\n+                                        cache_sizes.block_tree_db_cache_size,\n+                                        cache_sizes.coin_db_cache_size,\n+                                        cache_sizes.coin_cache_usage_size,\n+                                        args.GetIntArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS),\n+                                        args.GetIntArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n+                                        false,\n+                                        false,\n+                                        GetAdjustedTime,\n+                                        ShutdownRequested,\n+                                        []() {\n+                                            uiInterface.ThreadSafeMessageBox(\n+                                                _(\"Error reading from database, shutting down.\"),\n+                                                \"\", CClientUIInterface::MSG_ERROR);\n+                                        },\n+                                        []() {\n+                                            uiInterface.InitMessage(_(\"Verifying blocks…\").translated);\n+                                        });\n+        } catch (const std::exception& e) {\n+            LogPrintf(\"%s\\n\", e.what()); // XXX",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 209,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "7dd898c0df678859ca92773b6990e4e28a83ab24",
      "in_reply_to_id": 739412808,
      "user": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed as of 6736e24a490d756e0e1e70b9e212775cf305ebe6",
      "created_at": "2021-11-15T18:13:23Z",
      "updated_at": "2021-11-15T18:13:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r749570801",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/749570801"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1415,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/749571227",
      "pull_request_review_id": 806401457,
      "id": 749571227,
      "node_id": "PRRC_kwDOABII584srYyb",
      "diff_hunk": "@@ -0,0 +1,157 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <init/chainstate.h>\n+\n+#include <consensus/params.h> // for Consensus::Params\n+#include <node/blockstorage.h> // for CleanupBlockRevFiles, fHavePruned, fReindex\n+#include <validation.h> // for a lot of things\n+\n+std::optional<ChainstateLoadingError> LoadChainstateSequence(bool fReset,\n+                                                             ChainstateManager& chainman,\n+                                                             CTxMemPool* mempool,\n+                                                             bool fPruneMode,\n+                                                             const Consensus::Params& consensus_params,\n+                                                             bool fReindexChainState,\n+                                                             int64_t nBlockTreeDBCache,\n+                                                             int64_t nCoinDBCache,\n+                                                             int64_t nCoinCacheUsage,\n+                                                             unsigned int check_blocks,\n+                                                             unsigned int check_level,\n+                                                             bool block_tree_db_in_memory,\n+                                                             bool coins_db_in_memory,\n+                                                             std::function<int64_t()> get_unix_time_seconds,\n+                                                             std::optional<std::function<bool()>> shutdown_requested,\n+                                                             std::optional<std::function<void()>> coins_error_cb,\n+                                                             std::optional<std::function<void()>> verifying_blocks_cb) {",
      "path": "src/init/chainstate.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "7dd898c0df678859ca92773b6990e4e28a83ab24",
      "in_reply_to_id": 743636334,
      "user": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed as of 6736e24a490d756e0e1e70b9e212775cf305ebe6",
      "created_at": "2021-11-15T18:14:06Z",
      "updated_at": "2021-11-15T18:14:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r749571227",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/749571227"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/749571294",
      "pull_request_review_id": 806401540,
      "id": 749571294,
      "node_id": "PRRC_kwDOABII584srYze",
      "diff_hunk": "@@ -547,6 +549,8 @@ libbitcoin_common_a_SOURCES = \\\n   core_write.cpp \\\n   deploymentinfo.cpp \\\n   external_signer.cpp \\\n+  init/caches.cpp \\\n+  init/chainstate.cpp \\",
      "path": "src/Makefile.am",
      "position": null,
      "original_position": 14,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "7dd898c0df678859ca92773b6990e4e28a83ab24",
      "in_reply_to_id": 743657031,
      "user": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed as of 6736e24a490d756e0e1e70b9e212775cf305ebe6",
      "created_at": "2021-11-15T18:14:12Z",
      "updated_at": "2021-11-15T18:14:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r749571294",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/749571294"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 553,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/749571632",
      "pull_request_review_id": 806402019,
      "id": 749571632,
      "node_id": "PRRC_kwDOABII584srY4w",
      "diff_hunk": "@@ -1361,217 +1363,100 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     bool fReindexChainState = args.GetBoolArg(\"-reindex-chainstate\", false);\n \n     // cache size calculations\n-    int64_t nTotalCache = (args.GetIntArg(\"-dbcache\", nDefaultDbCache) << 20);\n-    nTotalCache = std::max(nTotalCache, nMinDbCache << 20); // total cache cannot be less than nMinDbCache\n-    nTotalCache = std::min(nTotalCache, nMaxDbCache << 20); // total cache cannot be greater than nMaxDbcache\n-    int64_t nBlockTreeDBCache = std::min(nTotalCache / 8, nMaxBlockDBCache << 20);\n-    nTotalCache -= nBlockTreeDBCache;\n-    int64_t nTxIndexCache = std::min(nTotalCache / 8, args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX) ? nMaxTxIndexCache << 20 : 0);\n-    nTotalCache -= nTxIndexCache;\n-    int64_t filter_index_cache = 0;\n-    if (!g_enabled_filter_types.empty()) {\n-        size_t n_indexes = g_enabled_filter_types.size();\n-        int64_t max_cache = std::min(nTotalCache / 8, max_filter_index_cache << 20);\n-        filter_index_cache = max_cache / n_indexes;\n-        nTotalCache -= filter_index_cache * n_indexes;\n-    }\n-    int64_t nCoinDBCache = std::min(nTotalCache / 2, (nTotalCache / 4) + (1 << 23)); // use 25%-50% of the remainder for disk cache\n-    nCoinDBCache = std::min(nCoinDBCache, nMaxCoinsDBCache << 20); // cap total coins db cache\n-    nTotalCache -= nCoinDBCache;\n-    int64_t nCoinCacheUsage = nTotalCache; // the rest goes to in-memory cache\n+    CacheSizes cache_sizes;\n+    CalculateCacheSizes(args, cache_sizes, g_enabled_filter_types.size());\n+\n     int64_t nMempoolSizeMax = args.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     LogPrintf(\"Cache configuration:\\n\");\n-    LogPrintf(\"* Using %.1f MiB for block index database\\n\", nBlockTreeDBCache * (1.0 / 1024 / 1024));\n+    LogPrintf(\"* Using %.1f MiB for block index database\\n\", cache_sizes.block_tree_db_cache_size * (1.0 / 1024 / 1024));\n     if (args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n-        LogPrintf(\"* Using %.1f MiB for transaction index database\\n\", nTxIndexCache * (1.0 / 1024 / 1024));\n+        LogPrintf(\"* Using %.1f MiB for transaction index database\\n\", cache_sizes.tx_index_cache_size * (1.0 / 1024 / 1024));\n     }\n     for (BlockFilterType filter_type : g_enabled_filter_types) {\n         LogPrintf(\"* Using %.1f MiB for %s block filter index database\\n\",\n-                  filter_index_cache * (1.0 / 1024 / 1024), BlockFilterTypeName(filter_type));\n+                  cache_sizes.filter_index_cache_size * (1.0 / 1024 / 1024), BlockFilterTypeName(filter_type));\n     }\n-    LogPrintf(\"* Using %.1f MiB for chain state database\\n\", nCoinDBCache * (1.0 / 1024 / 1024));\n-    LogPrintf(\"* Using %.1f MiB for in-memory UTXO set (plus up to %.1f MiB of unused mempool space)\\n\", nCoinCacheUsage * (1.0 / 1024 / 1024), nMempoolSizeMax * (1.0 / 1024 / 1024));\n+    LogPrintf(\"* Using %.1f MiB for chain state database\\n\", cache_sizes.coin_db_cache_size * (1.0 / 1024 / 1024));\n+    LogPrintf(\"* Using %.1f MiB for in-memory UTXO set (plus up to %.1f MiB of unused mempool space)\\n\", cache_sizes.coin_cache_usage_size * (1.0 / 1024 / 1024), nMempoolSizeMax * (1.0 / 1024 / 1024));\n \n     bool fLoaded = false;\n     while (!fLoaded && !ShutdownRequested()) {\n         const bool fReset = fReindex;\n-        auto is_coinsview_empty = [&](CChainState* chainstate) EXCLUSIVE_LOCKS_REQUIRED(::cs_main) {\n-            return fReset || fReindexChainState || chainstate->CoinsTip().GetBestBlock().IsNull();\n-        };\n         bilingual_str strLoadError;\n \n         uiInterface.InitMessage(_(\"Loading block index…\").translated);\n-\n-        do {\n-            const int64_t load_block_index_start_time = GetTimeMillis();\n-            try {\n-                LOCK(cs_main);\n-                chainman.InitializeChainstate(Assert(node.mempool.get()));\n-                chainman.m_total_coinstip_cache = nCoinCacheUsage;\n-                chainman.m_total_coinsdb_cache = nCoinDBCache;\n-\n-                UnloadBlockIndex(node.mempool.get(), chainman);\n-\n-                auto& pblocktree{chainman.m_blockman.m_block_tree_db};\n-                // new CBlockTreeDB tries to delete the existing file, which\n-                // fails if it's still open from the previous loop. Close it first:\n-                pblocktree.reset();\n-                pblocktree.reset(new CBlockTreeDB(nBlockTreeDBCache, false, fReset));\n-\n-                if (fReset) {\n-                    pblocktree->WriteReindexing(true);\n-                    //If we're reindexing in prune mode, wipe away unusable block files and all undo data files\n-                    if (fPruneMode)\n-                        CleanupBlockRevFiles();\n-                }\n-\n-                if (ShutdownRequested()) break;\n-\n-                // LoadBlockIndex will load fHavePruned if we've ever removed a\n-                // block file from disk.\n-                // Note that it also sets fReindex based on the disk flag!\n-                // From here on out fReindex and fReset mean something different!\n-                if (!chainman.LoadBlockIndex()) {\n-                    if (ShutdownRequested()) break;\n-                    strLoadError = _(\"Error loading block database\");\n-                    break;\n-                }\n-\n-                // If the loaded chain has a wrong genesis, bail out immediately\n-                // (we're likely using a testnet datadir, or the other way around).\n-                if (!chainman.BlockIndex().empty() &&\n-                        !chainman.m_blockman.LookupBlockIndex(chainparams.GetConsensus().hashGenesisBlock)) {\n-                    return InitError(_(\"Incorrect or no genesis block found. Wrong datadir for network?\"));\n-                }\n-\n-                // Check for changed -prune state.  What we are concerned about is a user who has pruned blocks\n-                // in the past, but is now trying to run unpruned.\n-                if (fHavePruned && !fPruneMode) {\n-                    strLoadError = _(\"You need to rebuild the database using -reindex to go back to unpruned mode.  This will redownload the entire blockchain\");\n-                    break;\n-                }\n-\n-                // At this point blocktree args are consistent with what's on disk.\n-                // If we're not mid-reindex (based on disk + args), add a genesis block on disk\n-                // (otherwise we use the one already on disk).\n-                // This is called again in ThreadImport after the reindex completes.\n-                if (!fReindex && !chainman.ActiveChainstate().LoadGenesisBlock()) {\n-                    strLoadError = _(\"Error initializing block database\");\n-                    break;\n-                }\n-\n-                // At this point we're either in reindex or we've loaded a useful\n-                // block tree into BlockIndex()!\n-\n-                bool failed_chainstate_init = false;\n-\n-                for (CChainState* chainstate : chainman.GetAll()) {\n-                    chainstate->InitCoinsDB(\n-                        /* cache_size_bytes */ nCoinDBCache,\n-                        /* in_memory */ false,\n-                        /* should_wipe */ fReset || fReindexChainState);\n-\n-                    chainstate->CoinsErrorCatcher().AddReadErrCallback([]() {\n-                        uiInterface.ThreadSafeMessageBox(\n-                            _(\"Error reading from database, shutting down.\"),\n-                            \"\", CClientUIInterface::MSG_ERROR);\n-                    });\n-\n-                    // If necessary, upgrade from older database format.\n-                    // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                    if (!chainstate->CoinsDB().Upgrade()) {\n-                        strLoadError = _(\"Error upgrading chainstate database\");\n-                        failed_chainstate_init = true;\n-                        break;\n-                    }\n-\n-                    // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                    if (!chainstate->ReplayBlocks()) {\n-                        strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\");\n-                        failed_chainstate_init = true;\n-                        break;\n-                    }\n-\n-                    // The on-disk coinsdb is now in a good state, create the cache\n-                    chainstate->InitCoinsCache(nCoinCacheUsage);\n-                    assert(chainstate->CanFlushToDisk());\n-\n-                    if (!is_coinsview_empty(chainstate)) {\n-                        // LoadChainTip initializes the chain based on CoinsTip()'s best block\n-                        if (!chainstate->LoadChainTip()) {\n-                            strLoadError = _(\"Error initializing block database\");\n-                            failed_chainstate_init = true;\n-                            break; // out of the per-chainstate loop\n-                        }\n-                        assert(chainstate->m_chain.Tip() != nullptr);\n-                    }\n-                }\n-\n-                if (failed_chainstate_init) {\n-                    break; // out of the chainstate activation do-while\n-                }\n-            } catch (const std::exception& e) {\n-                LogPrintf(\"%s\\n\", e.what());\n-                strLoadError = _(\"Error opening block database\");\n+        const int64_t load_block_index_start_time = GetTimeMillis();\n+        std::optional<ChainstateLoadingError> rv;\n+        try {\n+            rv = LoadChainstateSequence(fReset,\n+                                        chainman,\n+                                        Assert(node.mempool.get()),\n+                                        fPruneMode,\n+                                        chainparams.GetConsensus(),\n+                                        fReindexChainState,\n+                                        cache_sizes.block_tree_db_cache_size,\n+                                        cache_sizes.coin_db_cache_size,\n+                                        cache_sizes.coin_cache_usage_size,\n+                                        args.GetIntArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS),\n+                                        args.GetIntArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n+                                        false,\n+                                        false,\n+                                        GetAdjustedTime,\n+                                        ShutdownRequested,\n+                                        []() {\n+                                            uiInterface.ThreadSafeMessageBox(\n+                                                _(\"Error reading from database, shutting down.\"),\n+                                                \"\", CClientUIInterface::MSG_ERROR);\n+                                        },\n+                                        []() {\n+                                            uiInterface.InitMessage(_(\"Verifying blocks…\").translated);\n+                                        });\n+        } catch (const std::exception& e) {\n+            LogPrintf(\"%s\\n\", e.what()); // XXX\n+            rv = ChainstateLoadingError::ERROR_GENERIC_BLOCKDB_OPEN_FAILED;\n+        }\n+        if (rv.has_value()) {\n+            switch (rv.value()) {\n+            case ChainstateLoadingError::ERROR_LOADING_BLOCK_DB:\n+                strLoadError = _(\"Error loading block database\");\n                 break;\n-            }\n-\n-            if (!fReset) {\n-                LOCK(cs_main);\n-                auto chainstates{chainman.GetAll()};\n-                if (std::any_of(chainstates.begin(), chainstates.end(),\n-                                [](const CChainState* cs) EXCLUSIVE_LOCKS_REQUIRED(cs_main) { return cs->NeedsRedownload(); })) {\n-                    strLoadError = strprintf(_(\"Witness data for blocks after height %d requires validation. Please restart with -reindex.\"),\n-                                             chainparams.GetConsensus().SegwitHeight);\n-                    break;\n-                }\n-            }\n-\n-            bool failed_verification = false;\n-\n-            try {\n-                LOCK(cs_main);\n-\n-                for (CChainState* chainstate : chainman.GetAll()) {\n-                    if (!is_coinsview_empty(chainstate)) {\n-                        uiInterface.InitMessage(_(\"Verifying blocks…\").translated);\n-                        if (fHavePruned && args.GetIntArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {\n-                            LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; only checking available blocks\\n\",\n-                                MIN_BLOCKS_TO_KEEP);\n-                        }\n-\n-                        const CBlockIndex* tip = chainstate->m_chain.Tip();\n-                        RPCNotifyBlockChange(tip);\n-                        if (tip && tip->nTime > GetAdjustedTime() + 2 * 60 * 60) {\n-                            strLoadError = _(\"The block database contains a block which appears to be from the future. \"\n-                                    \"This may be due to your computer's date and time being set incorrectly. \"\n-                                    \"Only rebuild the block database if you are sure that your computer's date and time are correct\");\n-                            failed_verification = true;\n-                            break;\n-                        }\n-\n-                        if (!CVerifyDB().VerifyDB(\n-                                *chainstate, chainparams, chainstate->CoinsDB(),\n-                                args.GetIntArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n-                                args.GetIntArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS))) {\n-                            strLoadError = _(\"Corrupted block database detected\");\n-                            failed_verification = true;\n-                            break;\n-                        }\n-                    }\n-                }\n-            } catch (const std::exception& e) {\n-                LogPrintf(\"%s\\n\", e.what());\n+            case ChainstateLoadingError::ERROR_BAD_GENESIS_BLOCK:\n+                return false;  // bail immediately!",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 266,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "7dd898c0df678859ca92773b6990e4e28a83ab24",
      "in_reply_to_id": 743698625,
      "user": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed as of 6736e24a490d756e0e1e70b9e212775cf305ebe6, just copied over the existing comment which mostly describes error handling anyway",
      "created_at": "2021-11-15T18:14:47Z",
      "updated_at": "2021-11-15T18:14:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r749571632",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/749571632"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1424,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/749571722",
      "pull_request_review_id": 806402136,
      "id": 749571722,
      "node_id": "PRRC_kwDOABII584srY6K",
      "diff_hunk": "@@ -1361,217 +1363,100 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     bool fReindexChainState = args.GetBoolArg(\"-reindex-chainstate\", false);\n \n     // cache size calculations\n-    int64_t nTotalCache = (args.GetIntArg(\"-dbcache\", nDefaultDbCache) << 20);\n-    nTotalCache = std::max(nTotalCache, nMinDbCache << 20); // total cache cannot be less than nMinDbCache\n-    nTotalCache = std::min(nTotalCache, nMaxDbCache << 20); // total cache cannot be greater than nMaxDbcache\n-    int64_t nBlockTreeDBCache = std::min(nTotalCache / 8, nMaxBlockDBCache << 20);\n-    nTotalCache -= nBlockTreeDBCache;\n-    int64_t nTxIndexCache = std::min(nTotalCache / 8, args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX) ? nMaxTxIndexCache << 20 : 0);\n-    nTotalCache -= nTxIndexCache;\n-    int64_t filter_index_cache = 0;\n-    if (!g_enabled_filter_types.empty()) {\n-        size_t n_indexes = g_enabled_filter_types.size();\n-        int64_t max_cache = std::min(nTotalCache / 8, max_filter_index_cache << 20);\n-        filter_index_cache = max_cache / n_indexes;\n-        nTotalCache -= filter_index_cache * n_indexes;\n-    }\n-    int64_t nCoinDBCache = std::min(nTotalCache / 2, (nTotalCache / 4) + (1 << 23)); // use 25%-50% of the remainder for disk cache\n-    nCoinDBCache = std::min(nCoinDBCache, nMaxCoinsDBCache << 20); // cap total coins db cache\n-    nTotalCache -= nCoinDBCache;\n-    int64_t nCoinCacheUsage = nTotalCache; // the rest goes to in-memory cache\n+    CacheSizes cache_sizes;\n+    CalculateCacheSizes(args, cache_sizes, g_enabled_filter_types.size());\n+\n     int64_t nMempoolSizeMax = args.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     LogPrintf(\"Cache configuration:\\n\");\n-    LogPrintf(\"* Using %.1f MiB for block index database\\n\", nBlockTreeDBCache * (1.0 / 1024 / 1024));\n+    LogPrintf(\"* Using %.1f MiB for block index database\\n\", cache_sizes.block_tree_db_cache_size * (1.0 / 1024 / 1024));\n     if (args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n-        LogPrintf(\"* Using %.1f MiB for transaction index database\\n\", nTxIndexCache * (1.0 / 1024 / 1024));\n+        LogPrintf(\"* Using %.1f MiB for transaction index database\\n\", cache_sizes.tx_index_cache_size * (1.0 / 1024 / 1024));\n     }\n     for (BlockFilterType filter_type : g_enabled_filter_types) {\n         LogPrintf(\"* Using %.1f MiB for %s block filter index database\\n\",\n-                  filter_index_cache * (1.0 / 1024 / 1024), BlockFilterTypeName(filter_type));\n+                  cache_sizes.filter_index_cache_size * (1.0 / 1024 / 1024), BlockFilterTypeName(filter_type));\n     }\n-    LogPrintf(\"* Using %.1f MiB for chain state database\\n\", nCoinDBCache * (1.0 / 1024 / 1024));\n-    LogPrintf(\"* Using %.1f MiB for in-memory UTXO set (plus up to %.1f MiB of unused mempool space)\\n\", nCoinCacheUsage * (1.0 / 1024 / 1024), nMempoolSizeMax * (1.0 / 1024 / 1024));\n+    LogPrintf(\"* Using %.1f MiB for chain state database\\n\", cache_sizes.coin_db_cache_size * (1.0 / 1024 / 1024));\n+    LogPrintf(\"* Using %.1f MiB for in-memory UTXO set (plus up to %.1f MiB of unused mempool space)\\n\", cache_sizes.coin_cache_usage_size * (1.0 / 1024 / 1024), nMempoolSizeMax * (1.0 / 1024 / 1024));\n \n     bool fLoaded = false;\n     while (!fLoaded && !ShutdownRequested()) {\n         const bool fReset = fReindex;\n-        auto is_coinsview_empty = [&](CChainState* chainstate) EXCLUSIVE_LOCKS_REQUIRED(::cs_main) {\n-            return fReset || fReindexChainState || chainstate->CoinsTip().GetBestBlock().IsNull();\n-        };\n         bilingual_str strLoadError;\n \n         uiInterface.InitMessage(_(\"Loading block index…\").translated);\n-\n-        do {\n-            const int64_t load_block_index_start_time = GetTimeMillis();\n-            try {\n-                LOCK(cs_main);\n-                chainman.InitializeChainstate(Assert(node.mempool.get()));\n-                chainman.m_total_coinstip_cache = nCoinCacheUsage;\n-                chainman.m_total_coinsdb_cache = nCoinDBCache;\n-\n-                UnloadBlockIndex(node.mempool.get(), chainman);\n-\n-                auto& pblocktree{chainman.m_blockman.m_block_tree_db};\n-                // new CBlockTreeDB tries to delete the existing file, which\n-                // fails if it's still open from the previous loop. Close it first:\n-                pblocktree.reset();\n-                pblocktree.reset(new CBlockTreeDB(nBlockTreeDBCache, false, fReset));\n-\n-                if (fReset) {\n-                    pblocktree->WriteReindexing(true);\n-                    //If we're reindexing in prune mode, wipe away unusable block files and all undo data files\n-                    if (fPruneMode)\n-                        CleanupBlockRevFiles();\n-                }\n-\n-                if (ShutdownRequested()) break;\n-\n-                // LoadBlockIndex will load fHavePruned if we've ever removed a\n-                // block file from disk.\n-                // Note that it also sets fReindex based on the disk flag!\n-                // From here on out fReindex and fReset mean something different!\n-                if (!chainman.LoadBlockIndex()) {\n-                    if (ShutdownRequested()) break;\n-                    strLoadError = _(\"Error loading block database\");\n-                    break;\n-                }\n-\n-                // If the loaded chain has a wrong genesis, bail out immediately\n-                // (we're likely using a testnet datadir, or the other way around).\n-                if (!chainman.BlockIndex().empty() &&\n-                        !chainman.m_blockman.LookupBlockIndex(chainparams.GetConsensus().hashGenesisBlock)) {\n-                    return InitError(_(\"Incorrect or no genesis block found. Wrong datadir for network?\"));\n-                }\n-\n-                // Check for changed -prune state.  What we are concerned about is a user who has pruned blocks\n-                // in the past, but is now trying to run unpruned.\n-                if (fHavePruned && !fPruneMode) {\n-                    strLoadError = _(\"You need to rebuild the database using -reindex to go back to unpruned mode.  This will redownload the entire blockchain\");\n-                    break;\n-                }\n-\n-                // At this point blocktree args are consistent with what's on disk.\n-                // If we're not mid-reindex (based on disk + args), add a genesis block on disk\n-                // (otherwise we use the one already on disk).\n-                // This is called again in ThreadImport after the reindex completes.\n-                if (!fReindex && !chainman.ActiveChainstate().LoadGenesisBlock()) {\n-                    strLoadError = _(\"Error initializing block database\");\n-                    break;\n-                }\n-\n-                // At this point we're either in reindex or we've loaded a useful\n-                // block tree into BlockIndex()!\n-\n-                bool failed_chainstate_init = false;\n-\n-                for (CChainState* chainstate : chainman.GetAll()) {\n-                    chainstate->InitCoinsDB(\n-                        /* cache_size_bytes */ nCoinDBCache,\n-                        /* in_memory */ false,\n-                        /* should_wipe */ fReset || fReindexChainState);\n-\n-                    chainstate->CoinsErrorCatcher().AddReadErrCallback([]() {\n-                        uiInterface.ThreadSafeMessageBox(\n-                            _(\"Error reading from database, shutting down.\"),\n-                            \"\", CClientUIInterface::MSG_ERROR);\n-                    });\n-\n-                    // If necessary, upgrade from older database format.\n-                    // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                    if (!chainstate->CoinsDB().Upgrade()) {\n-                        strLoadError = _(\"Error upgrading chainstate database\");\n-                        failed_chainstate_init = true;\n-                        break;\n-                    }\n-\n-                    // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                    if (!chainstate->ReplayBlocks()) {\n-                        strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\");\n-                        failed_chainstate_init = true;\n-                        break;\n-                    }\n-\n-                    // The on-disk coinsdb is now in a good state, create the cache\n-                    chainstate->InitCoinsCache(nCoinCacheUsage);\n-                    assert(chainstate->CanFlushToDisk());\n-\n-                    if (!is_coinsview_empty(chainstate)) {\n-                        // LoadChainTip initializes the chain based on CoinsTip()'s best block\n-                        if (!chainstate->LoadChainTip()) {\n-                            strLoadError = _(\"Error initializing block database\");\n-                            failed_chainstate_init = true;\n-                            break; // out of the per-chainstate loop\n-                        }\n-                        assert(chainstate->m_chain.Tip() != nullptr);\n-                    }\n-                }\n-\n-                if (failed_chainstate_init) {\n-                    break; // out of the chainstate activation do-while\n-                }\n-            } catch (const std::exception& e) {\n-                LogPrintf(\"%s\\n\", e.what());\n-                strLoadError = _(\"Error opening block database\");\n+        const int64_t load_block_index_start_time = GetTimeMillis();\n+        std::optional<ChainstateLoadingError> rv;\n+        try {\n+            rv = LoadChainstateSequence(fReset,\n+                                        chainman,\n+                                        Assert(node.mempool.get()),\n+                                        fPruneMode,\n+                                        chainparams.GetConsensus(),\n+                                        fReindexChainState,\n+                                        cache_sizes.block_tree_db_cache_size,\n+                                        cache_sizes.coin_db_cache_size,\n+                                        cache_sizes.coin_cache_usage_size,\n+                                        args.GetIntArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS),\n+                                        args.GetIntArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n+                                        false,\n+                                        false,\n+                                        GetAdjustedTime,\n+                                        ShutdownRequested,\n+                                        []() {\n+                                            uiInterface.ThreadSafeMessageBox(\n+                                                _(\"Error reading from database, shutting down.\"),\n+                                                \"\", CClientUIInterface::MSG_ERROR);\n+                                        },\n+                                        []() {\n+                                            uiInterface.InitMessage(_(\"Verifying blocks…\").translated);\n+                                        });\n+        } catch (const std::exception& e) {\n+            LogPrintf(\"%s\\n\", e.what()); // XXX\n+            rv = ChainstateLoadingError::ERROR_GENERIC_BLOCKDB_OPEN_FAILED;\n+        }\n+        if (rv.has_value()) {\n+            switch (rv.value()) {\n+            case ChainstateLoadingError::ERROR_LOADING_BLOCK_DB:\n+                strLoadError = _(\"Error loading block database\");\n                 break;\n-            }\n-\n-            if (!fReset) {\n-                LOCK(cs_main);\n-                auto chainstates{chainman.GetAll()};\n-                if (std::any_of(chainstates.begin(), chainstates.end(),\n-                                [](const CChainState* cs) EXCLUSIVE_LOCKS_REQUIRED(cs_main) { return cs->NeedsRedownload(); })) {\n-                    strLoadError = strprintf(_(\"Witness data for blocks after height %d requires validation. Please restart with -reindex.\"),\n-                                             chainparams.GetConsensus().SegwitHeight);\n-                    break;\n-                }\n-            }\n-\n-            bool failed_verification = false;\n-\n-            try {\n-                LOCK(cs_main);\n-\n-                for (CChainState* chainstate : chainman.GetAll()) {\n-                    if (!is_coinsview_empty(chainstate)) {\n-                        uiInterface.InitMessage(_(\"Verifying blocks…\").translated);\n-                        if (fHavePruned && args.GetIntArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {\n-                            LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; only checking available blocks\\n\",\n-                                MIN_BLOCKS_TO_KEEP);\n-                        }\n-\n-                        const CBlockIndex* tip = chainstate->m_chain.Tip();\n-                        RPCNotifyBlockChange(tip);\n-                        if (tip && tip->nTime > GetAdjustedTime() + 2 * 60 * 60) {\n-                            strLoadError = _(\"The block database contains a block which appears to be from the future. \"\n-                                    \"This may be due to your computer's date and time being set incorrectly. \"\n-                                    \"Only rebuild the block database if you are sure that your computer's date and time are correct\");\n-                            failed_verification = true;\n-                            break;\n-                        }\n-\n-                        if (!CVerifyDB().VerifyDB(\n-                                *chainstate, chainparams, chainstate->CoinsDB(),\n-                                args.GetIntArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n-                                args.GetIntArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS))) {\n-                            strLoadError = _(\"Corrupted block database detected\");\n-                            failed_verification = true;\n-                            break;\n-                        }\n-                    }\n-                }\n-            } catch (const std::exception& e) {\n-                LogPrintf(\"%s\\n\", e.what());\n+            case ChainstateLoadingError::ERROR_BAD_GENESIS_BLOCK:\n+                return false;  // bail immediately!\n+            case ChainstateLoadingError::ERROR_PRUNED_NEEDS_REINDEX:\n+                strLoadError = _(\"You need to rebuild the database using -reindex to go back to unpruned mode.  This will redownload the entire blockchain\");\n+                break;\n+            case ChainstateLoadingError::ERROR_LOAD_GENESIS_BLOCK_FAILED:\n+                strLoadError = _(\"Error initializing block database\");\n+                break;\n+            case ChainstateLoadingError::ERROR_CHAINSTATE_UPGRADE_FAILED:\n+                strLoadError = _(\"Error upgrading chainstate database\");\n+                break;\n+            case ChainstateLoadingError::ERROR_REPLAYBLOCKS_FAILED:\n+                strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\");\n+                break;\n+            case ChainstateLoadingError::ERROR_LOADCHAINTIP_FAILED:\n+                strLoadError = _(\"Error initializing block database\");\n+                break;\n+            case ChainstateLoadingError::ERROR_GENERIC_BLOCKDB_OPEN_FAILED:\n                 strLoadError = _(\"Error opening block database\");\n-                failed_verification = true;\n+                break;\n+            case ChainstateLoadingError::ERROR_BLOCKS_WITNESS_INSUFFICIENTLY_VALIDATED:\n+                strLoadError = strprintf(_(\"Witness data for blocks after height %d requires validation. Please restart with -reindex.\"),\n+                                         chainparams.GetConsensus().SegwitHeight);\n+                break;\n+            case ChainstateLoadingError::ERROR_BLOCK_FROM_FUTURE:\n+                strLoadError = _(\"The block database contains a block which appears to be from the future. \"\n+                                 \"This may be due to your computer's date and time being set incorrectly. \"\n+                                 \"Only rebuild the block database if you are sure that your computer's date and time are correct\");\n+                break;\n+            case ChainstateLoadingError::ERROR_CORRUPTED_BLOCK_DB:\n+                strLoadError = _(\"Corrupted block database detected\");\n                 break;\n             }\n-\n-            if (!failed_verification) {\n-                fLoaded = true;\n-                LogPrintf(\" block index %15dms\\n\", GetTimeMillis() - load_block_index_start_time);\n-            }\n-        } while(false);\n+        } else if (!ShutdownRequested()) {",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 305,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "7dd898c0df678859ca92773b6990e4e28a83ab24",
      "in_reply_to_id": 743703915,
      "user": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed as of 6736e24a490d756e0e1e70b9e212775cf305ebe6",
      "created_at": "2021-11-15T18:14:54Z",
      "updated_at": "2021-11-15T18:14:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r749571722",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/749571722"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1456,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/749571802",
      "pull_request_review_id": 806402253,
      "id": 749571802,
      "node_id": "PRRC_kwDOABII584srY7a",
      "diff_hunk": "@@ -1361,217 +1363,100 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     bool fReindexChainState = args.GetBoolArg(\"-reindex-chainstate\", false);\n \n     // cache size calculations\n-    int64_t nTotalCache = (args.GetIntArg(\"-dbcache\", nDefaultDbCache) << 20);\n-    nTotalCache = std::max(nTotalCache, nMinDbCache << 20); // total cache cannot be less than nMinDbCache\n-    nTotalCache = std::min(nTotalCache, nMaxDbCache << 20); // total cache cannot be greater than nMaxDbcache\n-    int64_t nBlockTreeDBCache = std::min(nTotalCache / 8, nMaxBlockDBCache << 20);\n-    nTotalCache -= nBlockTreeDBCache;\n-    int64_t nTxIndexCache = std::min(nTotalCache / 8, args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX) ? nMaxTxIndexCache << 20 : 0);\n-    nTotalCache -= nTxIndexCache;\n-    int64_t filter_index_cache = 0;\n-    if (!g_enabled_filter_types.empty()) {\n-        size_t n_indexes = g_enabled_filter_types.size();\n-        int64_t max_cache = std::min(nTotalCache / 8, max_filter_index_cache << 20);\n-        filter_index_cache = max_cache / n_indexes;\n-        nTotalCache -= filter_index_cache * n_indexes;\n-    }\n-    int64_t nCoinDBCache = std::min(nTotalCache / 2, (nTotalCache / 4) + (1 << 23)); // use 25%-50% of the remainder for disk cache\n-    nCoinDBCache = std::min(nCoinDBCache, nMaxCoinsDBCache << 20); // cap total coins db cache\n-    nTotalCache -= nCoinDBCache;\n-    int64_t nCoinCacheUsage = nTotalCache; // the rest goes to in-memory cache\n+    CacheSizes cache_sizes;\n+    CalculateCacheSizes(args, cache_sizes, g_enabled_filter_types.size());\n+\n     int64_t nMempoolSizeMax = args.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     LogPrintf(\"Cache configuration:\\n\");\n-    LogPrintf(\"* Using %.1f MiB for block index database\\n\", nBlockTreeDBCache * (1.0 / 1024 / 1024));\n+    LogPrintf(\"* Using %.1f MiB for block index database\\n\", cache_sizes.block_tree_db_cache_size * (1.0 / 1024 / 1024));\n     if (args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n-        LogPrintf(\"* Using %.1f MiB for transaction index database\\n\", nTxIndexCache * (1.0 / 1024 / 1024));\n+        LogPrintf(\"* Using %.1f MiB for transaction index database\\n\", cache_sizes.tx_index_cache_size * (1.0 / 1024 / 1024));\n     }\n     for (BlockFilterType filter_type : g_enabled_filter_types) {\n         LogPrintf(\"* Using %.1f MiB for %s block filter index database\\n\",\n-                  filter_index_cache * (1.0 / 1024 / 1024), BlockFilterTypeName(filter_type));\n+                  cache_sizes.filter_index_cache_size * (1.0 / 1024 / 1024), BlockFilterTypeName(filter_type));\n     }\n-    LogPrintf(\"* Using %.1f MiB for chain state database\\n\", nCoinDBCache * (1.0 / 1024 / 1024));\n-    LogPrintf(\"* Using %.1f MiB for in-memory UTXO set (plus up to %.1f MiB of unused mempool space)\\n\", nCoinCacheUsage * (1.0 / 1024 / 1024), nMempoolSizeMax * (1.0 / 1024 / 1024));\n+    LogPrintf(\"* Using %.1f MiB for chain state database\\n\", cache_sizes.coin_db_cache_size * (1.0 / 1024 / 1024));\n+    LogPrintf(\"* Using %.1f MiB for in-memory UTXO set (plus up to %.1f MiB of unused mempool space)\\n\", cache_sizes.coin_cache_usage_size * (1.0 / 1024 / 1024), nMempoolSizeMax * (1.0 / 1024 / 1024));\n \n     bool fLoaded = false;\n     while (!fLoaded && !ShutdownRequested()) {\n         const bool fReset = fReindex;\n-        auto is_coinsview_empty = [&](CChainState* chainstate) EXCLUSIVE_LOCKS_REQUIRED(::cs_main) {\n-            return fReset || fReindexChainState || chainstate->CoinsTip().GetBestBlock().IsNull();\n-        };\n         bilingual_str strLoadError;\n \n         uiInterface.InitMessage(_(\"Loading block index…\").translated);\n-\n-        do {\n-            const int64_t load_block_index_start_time = GetTimeMillis();\n-            try {\n-                LOCK(cs_main);\n-                chainman.InitializeChainstate(Assert(node.mempool.get()));\n-                chainman.m_total_coinstip_cache = nCoinCacheUsage;\n-                chainman.m_total_coinsdb_cache = nCoinDBCache;\n-\n-                UnloadBlockIndex(node.mempool.get(), chainman);\n-\n-                auto& pblocktree{chainman.m_blockman.m_block_tree_db};\n-                // new CBlockTreeDB tries to delete the existing file, which\n-                // fails if it's still open from the previous loop. Close it first:\n-                pblocktree.reset();\n-                pblocktree.reset(new CBlockTreeDB(nBlockTreeDBCache, false, fReset));\n-\n-                if (fReset) {\n-                    pblocktree->WriteReindexing(true);\n-                    //If we're reindexing in prune mode, wipe away unusable block files and all undo data files\n-                    if (fPruneMode)\n-                        CleanupBlockRevFiles();\n-                }\n-\n-                if (ShutdownRequested()) break;\n-\n-                // LoadBlockIndex will load fHavePruned if we've ever removed a\n-                // block file from disk.\n-                // Note that it also sets fReindex based on the disk flag!\n-                // From here on out fReindex and fReset mean something different!\n-                if (!chainman.LoadBlockIndex()) {\n-                    if (ShutdownRequested()) break;\n-                    strLoadError = _(\"Error loading block database\");\n-                    break;\n-                }\n-\n-                // If the loaded chain has a wrong genesis, bail out immediately\n-                // (we're likely using a testnet datadir, or the other way around).\n-                if (!chainman.BlockIndex().empty() &&\n-                        !chainman.m_blockman.LookupBlockIndex(chainparams.GetConsensus().hashGenesisBlock)) {\n-                    return InitError(_(\"Incorrect or no genesis block found. Wrong datadir for network?\"));",
      "path": "src/init.cpp",
      "position": 130,
      "original_position": 110,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "7dd898c0df678859ca92773b6990e4e28a83ab24",
      "in_reply_to_id": 743713370,
      "user": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed as of 6736e24a490d756e0e1e70b9e212775cf305ebe6",
      "created_at": "2021-11-15T18:15:02Z",
      "updated_at": "2021-11-15T18:15:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r749571802",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/749571802"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1463,
      "original_line": 1463,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/749572057",
      "pull_request_review_id": 806402618,
      "id": 749572057,
      "node_id": "PRRC_kwDOABII584srY_Z",
      "diff_hunk": "@@ -0,0 +1,22 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INIT_CACHES_H\n+#define BITCOIN_INIT_CACHES_H\n+\n+#include <cstddef> // for size_t\n+#include <cstdint> // for int64_t\n+\n+class ArgsManager;\n+\n+struct CacheSizes {\n+    int64_t block_tree_db_cache_size;",
      "path": "src/init/caches.h",
      "position": null,
      "original_position": 14,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "7dd898c0df678859ca92773b6990e4e28a83ab24",
      "in_reply_to_id": 743768587,
      "user": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed as of 6736e24a490d756e0e1e70b9e212775cf305ebe6",
      "created_at": "2021-11-15T18:15:24Z",
      "updated_at": "2021-11-15T18:15:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r749572057",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/749572057"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/749572297",
      "pull_request_review_id": 806402897,
      "id": 749572297,
      "node_id": "PRRC_kwDOABII584srZDJ",
      "diff_hunk": "@@ -0,0 +1,157 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <init/chainstate.h>\n+\n+#include <consensus/params.h> // for Consensus::Params\n+#include <node/blockstorage.h> // for CleanupBlockRevFiles, fHavePruned, fReindex\n+#include <validation.h> // for a lot of things\n+\n+std::optional<ChainstateLoadingError> LoadChainstateSequence(bool fReset,\n+                                                             ChainstateManager& chainman,\n+                                                             CTxMemPool* mempool,\n+                                                             bool fPruneMode,\n+                                                             const Consensus::Params& consensus_params,\n+                                                             bool fReindexChainState,\n+                                                             int64_t nBlockTreeDBCache,\n+                                                             int64_t nCoinDBCache,\n+                                                             int64_t nCoinCacheUsage,\n+                                                             unsigned int check_blocks,\n+                                                             unsigned int check_level,\n+                                                             bool block_tree_db_in_memory,\n+                                                             bool coins_db_in_memory,\n+                                                             std::function<int64_t()> get_unix_time_seconds,\n+                                                             std::optional<std::function<bool()>> shutdown_requested,\n+                                                             std::optional<std::function<void()>> coins_error_cb,\n+                                                             std::optional<std::function<void()>> verifying_blocks_cb) {\n+    auto is_coinsview_empty = [&](CChainState* chainstate) EXCLUSIVE_LOCKS_REQUIRED(::cs_main) {\n+        return fReset || fReindexChainState || chainstate->CoinsTip().GetBestBlock().IsNull();\n+    };\n+\n+    {\n+        LOCK(cs_main);",
      "path": "src/init/chainstate.cpp",
      "position": null,
      "original_position": 33,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "7dd898c0df678859ca92773b6990e4e28a83ab24",
      "in_reply_to_id": 743809355,
      "user": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed as of 6736e24a490d756e0e1e70b9e212775cf305ebe6",
      "created_at": "2021-11-15T18:15:46Z",
      "updated_at": "2021-11-15T18:15:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r749572297",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/749572297"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/749572455",
      "pull_request_review_id": 806403096,
      "id": 749572455,
      "node_id": "PRRC_kwDOABII584srZFn",
      "diff_hunk": "@@ -1415,8 +1412,46 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n                                          nCoinCacheUsage,\n                                          args.GetIntArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS),\n                                          args.GetIntArg(\"-checklevel\", DEFAULT_CHECKLEVEL));\n-        if (!rv) return false;\n-        if (fLoaded) {\n+        if (rv.has_value()) {\n+            switch (rv.value()) {\n+            case ChainstateLoadingError::ERROR_LOADING_BLOCK_DB:\n+                strLoadError = _(\"Error loading block database\");\n+                break;\n+            case ChainstateLoadingError::ERROR_BAD_GENESIS_BLOCK:\n+                return false;  // bail immediately!\n+            case ChainstateLoadingError::ERROR_PRUNED_NEEDS_REINDEX:\n+                strLoadError = _(\"You need to rebuild the database using -reindex to go back to unpruned mode.  This will redownload the entire blockchain\");\n+                break;\n+            case ChainstateLoadingError::ERROR_LOAD_GENESIS_BLOCK_FAILED:\n+                strLoadError = _(\"Error initializing block database\");\n+                break;\n+            case ChainstateLoadingError::ERROR_CHAINSTATE_UPGRADE_FAILED:\n+                strLoadError = _(\"Error upgrading chainstate database\");\n+                break;\n+            case ChainstateLoadingError::ERROR_REPLAYBLOCKS_FAILED:\n+                strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\");\n+                break;\n+            case ChainstateLoadingError::ERROR_LOADCHAINTIP_FAILED:\n+                strLoadError = _(\"Error initializing block database\");\n+                break;\n+            case ChainstateLoadingError::ERROR_GENERIC_BLOCKDB_OPEN_FAILED:\n+                strLoadError = _(\"Error opening block database\");\n+                break;\n+            case ChainstateLoadingError::ERROR_BLOCKS_WITNESS_INSUFFICIENTLY_VALIDATED:\n+                strLoadError = strprintf(_(\"Witness data for blocks after height %d requires validation. Please restart with -reindex.\"),\n+                                         chainparams.GetConsensus().SegwitHeight);\n+                break;\n+            case ChainstateLoadingError::ERROR_BLOCK_FROM_FUTURE:\n+                strLoadError = _(\"The block database contains a block which appears to be from the future. \"\n+                                 \"This may be due to your computer's date and time being set incorrectly. \"\n+                                 \"Only rebuild the block database if you are sure that your computer's date and time are correct\");\n+                break;\n+            case ChainstateLoadingError::ERROR_CORRUPTED_BLOCK_DB:\n+                strLoadError = _(\"Corrupted block database detected\");\n+                break;\n+            }\n+        } else if (!ShutdownRequested()) {",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 57,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "cd29d334a38fdaf0bbbe810a9cbdeeffad394daa",
      "in_reply_to_id": 743624127,
      "user": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed as of 6736e24a490d756e0e1e70b9e212775cf305ebe6",
      "created_at": "2021-11-15T18:16:00Z",
      "updated_at": "2021-11-15T18:16:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r749572455",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/749572455"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1453,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/749572922",
      "pull_request_review_id": 806403747,
      "id": 749572922,
      "node_id": "PRRC_kwDOABII584srZM6",
      "diff_hunk": "@@ -1415,8 +1412,46 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n                                          nCoinCacheUsage,\n                                          args.GetIntArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS),\n                                          args.GetIntArg(\"-checklevel\", DEFAULT_CHECKLEVEL));\n-        if (!rv) return false;\n-        if (fLoaded) {\n+        if (rv.has_value()) {\n+            switch (rv.value()) {\n+            case ChainstateLoadingError::ERROR_LOADING_BLOCK_DB:\n+                strLoadError = _(\"Error loading block database\");\n+                break;\n+            case ChainstateLoadingError::ERROR_BAD_GENESIS_BLOCK:\n+                return false;  // bail immediately!",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "cd29d334a38fdaf0bbbe810a9cbdeeffad394daa",
      "in_reply_to_id": 743628897,
      "user": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed as of 6736e24a490d756e0e1e70b9e212775cf305ebe6",
      "created_at": "2021-11-15T18:16:44Z",
      "updated_at": "2021-11-15T18:16:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r749572922",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/749572922"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1421,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/749573114",
      "pull_request_review_id": 806404031,
      "id": 749573114,
      "node_id": "PRRC_kwDOABII584srZP6",
      "diff_hunk": "@@ -0,0 +1,30 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INIT_CHAINSTATE_H\n+#define BITCOIN_INIT_CHAINSTATE_H\n+\n+#include <cstdint> // for int64_t\n+\n+class ArgsManager;\n+struct bilingual_str;\n+class CChainParams;\n+class CClientUIInterface;\n+class ChainstateManager;\n+struct NodeContext;\n+\n+bool LoadChainstateSequence(bool& fLoaded,",
      "path": "src/init/chainstate.h",
      "position": null,
      "original_position": 17,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "83ed7db27b4c4798666b77d83fc8e7c3eab8c621",
      "in_reply_to_id": 743901275,
      "user": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed as of 6736e24a490d756e0e1e70b9e212775cf305ebe6",
      "created_at": "2021-11-15T18:17:04Z",
      "updated_at": "2021-11-15T18:17:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r749573114",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/749573114"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/749573230",
      "pull_request_review_id": 806404199,
      "id": 749573230,
      "node_id": "PRRC_kwDOABII584srZRu",
      "diff_hunk": "@@ -37,11 +36,11 @@ bool LoadChainstateSequence(bool& fLoaded,\n         const int64_t load_block_index_start_time = GetTimeMillis();\n         try {\n             LOCK(cs_main);\n-            chainman.InitializeChainstate(Assert(node.mempool.get()));\n+            chainman.InitializeChainstate(mempool);",
      "path": "src/init/chainstate.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "3ecaf812d4934d63124b640d2aeb008d4b742d89",
      "in_reply_to_id": 743933885,
      "user": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed as of 6736e24a490d756e0e1e70b9e212775cf305ebe6",
      "created_at": "2021-11-15T18:17:16Z",
      "updated_at": "2021-11-15T18:17:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r749573230",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/749573230"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/749573320",
      "pull_request_review_id": 806404325,
      "id": 749573320,
      "node_id": "PRRC_kwDOABII584srZTI",
      "diff_hunk": "@@ -0,0 +1,206 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <init/chainstate.h>\n+\n+#include <chainparams.h> // for CChainParams\n+#include <rpc/blockchain.h> // for RPCNotifyBlockChange\n+#include <util/time.h> // for GetTimeMillis\n+#include <util/translation.h> // for bilingual_str\n+#include <node/blockstorage.h> // for CleanupBlockRevFiles, fHavePruned, fReindex\n+#include <node/context.h> // for NodeContext\n+#include <node/ui_interface.h> // for InitError, CClientUIInterface member access\n+#include <shutdown.h> // for ShutdownRequested\n+#include <timedata.h> // for GetAdjustedTime\n+#include <validation.h> // for a lot of things\n+\n+bool LoadChainstateSequence(bool& fLoaded,\n+                            bilingual_str& strLoadError,\n+                            bool fReset,\n+                            CClientUIInterface& uiInterface,",
      "path": "src/init/chainstate.cpp",
      "position": null,
      "original_position": 21,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "83ed7db27b4c4798666b77d83fc8e7c3eab8c621",
      "in_reply_to_id": 743923908,
      "user": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed as of 6736e24a490d756e0e1e70b9e212775cf305ebe6, thanks Russ for the neat idea!",
      "created_at": "2021-11-15T18:17:24Z",
      "updated_at": "2021-11-15T18:17:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r749573320",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/749573320"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 21,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/749573623",
      "pull_request_review_id": 806404759,
      "id": 749573623,
      "node_id": "PRRC_kwDOABII584srZX3",
      "diff_hunk": "@@ -127,36 +115,25 @@ bool LoadChainstateSequence(bool& fLoaded,\n                 if (!is_coinsview_empty(chainstate)) {\n                     // LoadChainTip initializes the chain based on CoinsTip()'s best block\n                     if (!chainstate->LoadChainTip()) {\n-                        strLoadError = _(\"Error initializing block database\");\n-                        failed_chainstate_init = true;\n-                        break; // out of the per-chainstate loop\n+                        return ChainstateLoadingError::ERROR_LOADCHAINTIP_FAILED;\n                     }\n                     assert(chainstate->m_chain.Tip() != nullptr);\n                 }\n             }\n-\n-            if (failed_chainstate_init) {\n-                break; // out of the chainstate activation do-while\n-            }\n         } catch (const std::exception& e) {\n-            LogPrintf(\"%s\\n\", e.what());\n-            strLoadError = _(\"Error opening block database\");\n-            break;\n+            LogPrintf(\"%s\\n\", e.what()); // XXX",
      "path": "src/init/chainstate.cpp",
      "position": null,
      "original_position": 132,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "cd29d334a38fdaf0bbbe810a9cbdeeffad394daa",
      "in_reply_to_id": 743954607,
      "user": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed as of 6736e24a490d756e0e1e70b9e212775cf305ebe6",
      "created_at": "2021-11-15T18:17:55Z",
      "updated_at": "2021-11-15T18:17:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r749573623",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/749573623"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 124,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/749573676",
      "pull_request_review_id": 806404851,
      "id": 749573676,
      "node_id": "PRRC_kwDOABII584srZYs",
      "diff_hunk": "@@ -90,11 +90,9 @@ std::optional<ChainstateLoadingError> LoadChainstateSequence(bool fReset,\n                 /* in_memory */ false,\n                 /* should_wipe */ fReset || fReindexChainState);\n \n-            chainstate->CoinsErrorCatcher().AddReadErrCallback([&]() {\n-                uiInterface.ThreadSafeMessageBox(\n-                    _(\"Error reading from database, shutting down.\"),\n-                    \"\", CClientUIInterface::MSG_ERROR);\n-            });\n+            if (coins_error_cb.has_value()) {\n+                chainstate->CoinsErrorCatcher().AddReadErrCallback(coins_error_cb.value());",
      "path": "src/init/chainstate.cpp",
      "position": null,
      "original_position": 35,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "0e61af06834c9a9331e620343e60e9104e08331e",
      "in_reply_to_id": 743961236,
      "user": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not inaccurate, but I think we're adding a callback here and can't return immediately?",
      "created_at": "2021-11-15T18:18:01Z",
      "updated_at": "2021-11-15T18:19:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r749573676",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/749573676"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/749574706",
      "pull_request_review_id": 806406349,
      "id": 749574706,
      "node_id": "PRRC_kwDOABII584srZoy",
      "diff_hunk": "@@ -138,7 +136,9 @@ std::optional<ChainstateLoadingError> LoadChainstateSequence(bool fReset,\n \n         for (CChainState* chainstate : chainman.GetAll()) {\n             if (!is_coinsview_empty(chainstate)) {\n-                uiInterface.InitMessage(_(\"Verifying blocks…\").translated);\n+                if (verifying_blocks_cb.has_value()) {",
      "path": "src/init/chainstate.cpp",
      "position": null,
      "original_position": 45,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "0e61af06834c9a9331e620343e60e9104e08331e",
      "in_reply_to_id": 743965561,
      "user": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed as of 6736e24a490d756e0e1e70b9e212775cf305ebe6",
      "created_at": "2021-11-15T18:19:38Z",
      "updated_at": "2021-11-15T18:19:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r749574706",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/749574706"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 139,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/749574770",
      "pull_request_review_id": 806406435,
      "id": 749574770,
      "node_id": "PRRC_kwDOABII584srZpy",
      "diff_hunk": "@@ -1400,25 +1400,31 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n \n         uiInterface.InitMessage(_(\"Loading block index…\").translated);\n         const int64_t load_block_index_start_time = GetTimeMillis();\n-        auto rv = LoadChainstateSequence(fReset,\n-                                         chainman,\n-                                         Assert(node.mempool.get()),\n-                                         fPruneMode,\n-                                         chainparams,\n-                                         fReindexChainState,\n-                                         nBlockTreeDBCache,\n-                                         nCoinDBCache,\n-                                         nCoinCacheUsage,\n-                                         args.GetIntArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS),\n-                                         args.GetIntArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n-                                         []() {\n-                                             uiInterface.ThreadSafeMessageBox(\n-                                                 _(\"Error reading from database, shutting down.\"),\n-                                                 \"\", CClientUIInterface::MSG_ERROR);\n-                                         },\n-                                         []() {\n-                                             uiInterface.InitMessage(_(\"Verifying blocks…\").translated);\n-                                         });\n+        std::optional<ChainstateLoadingError> rv;\n+        try {",
      "path": "src/init.cpp",
      "position": 98,
      "original_position": 24,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "38d88e2950afc99caca31388fd75f03c4d06bcc9",
      "in_reply_to_id": 743969616,
      "user": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed as of 6736e24a490d756e0e1e70b9e212775cf305ebe6",
      "created_at": "2021-11-15T18:19:43Z",
      "updated_at": "2021-11-15T18:19:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r749574770",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/749574770"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1408,
      "original_line": 1408,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/749575067",
      "pull_request_review_id": 806406823,
      "id": 749575067,
      "node_id": "PRRC_kwDOABII584srZub",
      "diff_hunk": "@@ -136,10 +136,6 @@ std::optional<ChainstateLoadingError> LoadChainstateSequence(bool fReset,\n                 if (verifying_blocks_cb.has_value()) {\n                     verifying_blocks_cb.value()();\n                 }\n-                if (fHavePruned && check_blocks > MIN_BLOCKS_TO_KEEP) {",
      "path": "src/init/chainstate.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "10564583429762ddfb6601d1f64ac663406bf8e2",
      "in_reply_to_id": 743971845,
      "user": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed as of 6736e24a490d756e0e1e70b9e212775cf305ebe6",
      "created_at": "2021-11-15T18:20:08Z",
      "updated_at": "2021-11-15T18:20:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r749575067",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/749575067"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 139,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/749578481",
      "pull_request_review_id": 806411467,
      "id": 749578481,
      "node_id": "PRRC_kwDOABII584srajx",
      "diff_hunk": "@@ -0,0 +1,22 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INIT_CACHES_H\n+#define BITCOIN_INIT_CACHES_H\n+\n+#include <cstddef> // for size_t\n+#include <cstdint> // for int64_t\n+\n+class ArgsManager;\n+\n+struct CacheSizes {\n+    int64_t block_tree_db_cache_size;\n+    int64_t coin_db_cache_size;\n+    int64_t coin_cache_usage_size;\n+    int64_t tx_index_cache_size;\n+    int64_t filter_index_cache_size;\n+};\n+void CalculateCacheSizes(const ArgsManager& args, CacheSizes& cache_sizes, size_t n_indexes = 0);",
      "path": "src/init/caches.h",
      "position": null,
      "original_position": 20,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "7dd898c0df678859ca92773b6990e4e28a83ab24",
      "in_reply_to_id": 743767227,
      "user": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In my latest push (6736e24a490d756e0e1e70b9e212775cf305ebe6), I ended up having `CalculateCacheSizes` return a CacheSize, which is perhaps a bit more readable.",
      "created_at": "2021-11-15T18:25:30Z",
      "updated_at": "2021-11-15T18:25:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r749578481",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/749578481"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/759652338",
      "pull_request_review_id": 819546004,
      "id": 759652338,
      "node_id": "PRRC_kwDOABII584tR1_y",
      "diff_hunk": "@@ -1400,6 +1400,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n \n         uiInterface.InitMessage(_(\"Loading block index…\").translated);\n \n+        const int64_t load_block_index_start_time = GetTimeMillis();",
      "path": "src/init.cpp",
      "position": 96,
      "original_position": 4,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "165b30b649923da4ed19749a399c4a4589da326b",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"node/chainstate: Decouple from GetTimeMillis\" (165b30b649923da4ed19749a399c4a4589da326b)\r\n\r\nCommit description seems out of date. This commit is not passing a std::function to replace GetTimeMillis, it is just moving the GetTimeMillis call ",
      "created_at": "2021-11-30T20:54:49Z",
      "updated_at": "2021-11-30T22:57:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r759652338",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/759652338"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1406,
      "original_line": 1406,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/759714243",
      "pull_request_review_id": 819546004,
      "id": 759714243,
      "node_id": "PRRC_kwDOABII584tSFHD",
      "diff_hunk": "@@ -1408,9 +1408,14 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n                                  fReindexChainState,\n                                  nBlockTreeDBCache,\n                                  nCoinDBCache,\n-                                 nCoinCacheUsage,\n-                                 args.GetIntArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS),\n-                                 args.GetIntArg(\"-checklevel\", DEFAULT_CHECKLEVEL));\n+                                 nCoinCacheUsage);\n+        auto rv2 = VerifyLoadedChainstate(chainman,",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "019da3dc8493054b456222ef23761dd95130b6a7",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Split off VerifyLoadedChainstate\" (019da3dc8493054b456222ef23761dd95130b6a7)\r\n\r\nSeems like this only be called if `rv` is `nullopt`, and it should be skipped if `LoadChainstate` fails or is interrupted for shutdown. Otherwise this is running verification code that did not run previously.\r\n\r\nWould be better to preserve behavior I think. Either way it would also be good to say in commit description whether behavior is changing or not.",
      "created_at": "2021-11-30T22:36:22Z",
      "updated_at": "2021-11-30T22:57:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r759714243",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/759714243"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1412,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/759717906",
      "pull_request_review_id": 819546004,
      "id": 759717906,
      "node_id": "PRRC_kwDOABII584tSGAS",
      "diff_hunk": "@@ -1408,7 +1408,14 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n                                  fReindexChainState,\n                                  nBlockTreeDBCache,\n                                  nCoinDBCache,\n-                                 nCoinCacheUsage);\n+                                 nCoinCacheUsage,\n+                                 []() {\n+                                     uiInterface.ThreadSafeMessageBox(\n+                                         _(\"Error reading from database, shutting down.\"),\n+                                         \"\", CClientUIInterface::MSG_ERROR);\n+                                 });\n+\n+        uiInterface.InitMessage(_(\"Verifying blocks…\").translated);",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "efe9bd287656925a3bda50a809edeabe9824e37a",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"node/chainstate: Decouple from concept of uiInterface\" (efe9bd287656925a3bda50a809edeabe9824e37a)\r\n\r\nSeems like there is a minor change in behavior with the verifying blocks message being shown even if is_coinsview_empty is true. This seems ok, but would be good to mention whether behavior change is intentional in commit message.",
      "created_at": "2021-11-30T22:43:07Z",
      "updated_at": "2021-11-30T22:57:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r759717906",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/759717906"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1418,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/760525288",
      "pull_request_review_id": 820742565,
      "id": 760525288,
      "node_id": "PRRC_kwDOABII584tVLHo",
      "diff_hunk": "@@ -1759,6 +1759,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n \n     // ********************************************************* Step 13: finished\n \n+    RPCNotifyBlockChange(chainman.ActiveTip());",
      "path": "src/init.cpp",
      "position": 347,
      "original_position": 4,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "ca13555758e6d868d3cfa5b55e679fca74381b03",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"init: Delay RPC block notif until warmup finished\" (9217003327b6849d67dcd5c427e232157854997d)\r\n\r\nWould be good to have a code comment saying why this is needed, since no block is changing here.\r\n\r\n(Previous commit message b229024932ebd4775070149ff0f27d0fd329bf0a had some information, but I'm not sure how much of it is relevant)",
      "created_at": "2021-12-01T19:55:37Z",
      "updated_at": "2021-12-01T21:29:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r760525288",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/760525288"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1777,
      "original_line": 1777,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/760560829",
      "pull_request_review_id": 820742565,
      "id": 760560829,
      "node_id": "PRRC_kwDOABII584tVTy9",
      "diff_hunk": "@@ -0,0 +1,38 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/caches.h>\n+\n+#include <txdb.h>\n+#include <util/system.h>\n+#include <validation.h>\n+\n+CacheSizes CalculateCacheSizes(const ArgsManager& args, size_t n_indexes)\n+{\n+    int64_t nTotalCache = (args.GetIntArg(\"-dbcache\", nDefaultDbCache) << 20);\n+    nTotalCache = std::max(nTotalCache, nMinDbCache << 20); // total cache cannot be less than nMinDbCache\n+    nTotalCache = std::min(nTotalCache, nMaxDbCache << 20); // total cache cannot be greater than nMaxDbcache\n+    int64_t nBlockTreeDBCache = std::min(nTotalCache / 8, nMaxBlockDBCache << 20);\n+    nTotalCache -= nBlockTreeDBCache;\n+    int64_t nTxIndexCache = std::min(nTotalCache / 8, args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX) ? nMaxTxIndexCache << 20 : 0);\n+    nTotalCache -= nTxIndexCache;\n+    int64_t filter_index_cache = 0;\n+    if (n_indexes > 0) {\n+        int64_t max_cache = std::min(nTotalCache / 8, max_filter_index_cache << 20);\n+        filter_index_cache = max_cache / n_indexes;\n+        nTotalCache -= filter_index_cache * n_indexes;\n+    }\n+    int64_t nCoinDBCache = std::min(nTotalCache / 2, (nTotalCache / 4) + (1 << 23)); // use 25%-50% of the remainder for disk cache\n+    nCoinDBCache = std::min(nCoinDBCache, nMaxCoinsDBCache << 20); // cap total coins db cache\n+    nTotalCache -= nCoinDBCache;\n+    int64_t nCoinCacheUsage = nTotalCache; // the rest goes to in-memory cache\n+\n+    return {\n+        nBlockTreeDBCache,\n+        nCoinDBCache,\n+        nCoinCacheUsage,\n+        nTxIndexCache,\n+        filter_index_cache,\n+    };",
      "path": "src/node/caches.cpp",
      "position": null,
      "original_position": 37,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "79ae725d8062761a6650862fd49b7de96ce7616e",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"node/caches: Extract cache calculation logic\" (79ae725d8062761a6650862fd49b7de96ce7616e)\r\n\r\nIt's good that this is a moveonly commit, but it would be nice to avoid the intermediate variables in a followup\r\n\r\n```c++\r\nCacheSizes CalculateCacheSizes(const ArgsManager& args, size_t n_indexes)\r\n{\r\n    int64_t nTotalCache = (args.GetIntArg(\"-dbcache\", nDefaultDbCache) << 20);\r\n    nTotalCache = std::max(nTotalCache, nMinDbCache << 20); // total cache cannot be less than nMinDbCache\r\n    nTotalCache = std::min(nTotalCache, nMaxDbCache << 20); // total cache cannot be greater than nMaxDbcache\r\n    CacheSizes sizes;\r\n    sizes.block_tree_db = std::min(nTotalCache / 8, nMaxBlockDBCache << 20);\r\n    nTotalCache -= sizes.block_tree_db;\r\n    sizes.tx_index = std::min(nTotalCache / 8, args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX) ? nMaxTxIndexCache << 20 : 0);\r\n    nTotalCache -= sizes.tx_index;\r\n    sizes.filter_index = 0;\r\n    if (n_indexes > 0) {\r\n        int64_t max_cache = std::min(nTotalCache / 8, max_filter_index_cache << 20);\r\n        sizes.filter_index = max_cache / n_indexes;\r\n        nTotalCache -= sizes.filter_index * n_indexes;\r\n    }\r\n    sizes.coins_db = std::min(nTotalCache / 2, (nTotalCache / 4) + (1 << 23)); // use 25%-50% of the remainder for disk cache\r\n    sizes.coins_db = std::min(sizes.coins_db, nMaxCoinsDBCache << 20); // cap total coins db cache\r\n    nTotalCache -= sizes.coins_db;\r\n    sizes.coins = nTotalCache; // the rest goes to in-memory cache\r\n    return sizes;\r\n}\r\n```",
      "created_at": "2021-12-01T20:51:13Z",
      "updated_at": "2021-12-01T21:29:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r760560829",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/760560829"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": 31,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/760574720",
      "pull_request_review_id": 820742565,
      "id": 760574720,
      "node_id": "PRRC_kwDOABII584tVXMA",
      "diff_hunk": "@@ -77,9 +77,9 @@ std::ostream& operator<<(std::ostream& os, const uint256& num)\n \n BasicTestingSetup::BasicTestingSetup(const std::string& chainName, const std::vector<const char*>& extra_args)\n     : m_path_root{fs::temp_directory_path() / \"test_common_\" PACKAGE_NAME / g_insecure_rand_ctx_temp_path.rand256().ToString()},\n-      m_args{}\n+      m_args{gArgs}",
      "path": "src/test/util/setup_common.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "7ede150299ea46d38a0797910c95028e7e948e0d",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"test/setup: Unify m_args and gArgs\" (7ede150299ea46d38a0797910c95028e7e948e0d)\r\n\r\nI think it would be better to drop this change, and let `BasicTestingSetup::m_args` keep being a variable instead of a `gArgs` reference. The reason the `BasicTestingSetup::m_args` member exists is to provide a way for tests to stop using a shared `gArgs` instance and let each test have it's own standalone ArgsManager. This way tests can do `m_args.ForceSetArg` and other operations without affecting global state and potentially breaking each other.\r\n\r\nThe other change below which stops using `gArgs` would be good to keep if it still works:\r\n\r\n```diff\r\n-    m_node.args = &gArgs;\r\n+    m_node.args = &m_args;\r\n```\r\n\r\nIf it doesn't work now, it should work later when @kiminuo gets around to removing more `gArgs` uses in other code https://github.com/bitcoin/bitcoin/pull/21244#discussion_r610080299",
      "created_at": "2021-12-01T21:13:31Z",
      "updated_at": "2021-12-01T21:29:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r760574720",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/760574720"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 80,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/760598661",
      "pull_request_review_id": 820842452,
      "id": 760598661,
      "node_id": "PRRC_kwDOABII584tVdCF",
      "diff_hunk": "@@ -18,6 +17,7 @@ std::optional<ChainstateLoadingError> LoadChainstate(bool fReset,\n                                                      int64_t nBlockTreeDBCache,\n                                                      int64_t nCoinDBCache,\n                                                      int64_t nCoinCacheUsage,\n+                                                     std::optional<std::function<bool()>> shutdown_requested,",
      "path": "src/node/chainstate.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "258ce97cf72043ffa69d2b77a4438df723c734a6",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"node/chainstate: Decouple from ShutdownRequested\" (258ce97cf72043ffa69d2b77a4438df723c734a6)\r\n\r\nFunction objects can be null so here and other places should replace `optional<function<X>>` with `function<X>` so there is one null value instead of two",
      "created_at": "2021-12-01T21:52:23Z",
      "updated_at": "2021-12-01T21:52:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r760598661",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/760598661"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 22,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762078294",
      "pull_request_review_id": 822853111,
      "id": 762078294,
      "node_id": "PRRC_kwDOABII584tbGRW",
      "diff_hunk": "@@ -0,0 +1,162 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/chainstate.h>\n+\n+#include <consensus/params.h>\n+#include <node/blockstorage.h>\n+#include <validation.h>\n+\n+std::optional<ChainstateLoadingError> LoadChainstate(bool fReset,\n+                                                     ChainstateManager& chainman,\n+                                                     CTxMemPool* mempool,\n+                                                     bool fPruneMode,\n+                                                     const Consensus::Params& consensus_params,\n+                                                     bool fReindexChainState,\n+                                                     int64_t nBlockTreeDBCache,\n+                                                     int64_t nCoinDBCache,\n+                                                     int64_t nCoinCacheUsage,\n+                                                     bool block_tree_db_in_memory,\n+                                                     bool coins_db_in_memory,\n+                                                     std::optional<std::function<bool()>> shutdown_requested,\n+                                                     std::optional<std::function<void()>> coins_error_cb)\n+{\n+    auto is_coinsview_empty = [&](CChainState* chainstate) EXCLUSIVE_LOCKS_REQUIRED(::cs_main) {\n+        return fReset || fReindexChainState || chainstate->CoinsTip().GetBestBlock().IsNull();\n+    };\n+\n+    {",
      "path": "src/node/chainstate.cpp",
      "position": null,
      "original_position": 29,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "8301c696d0a0be921ce01b6e9f74f7ff6e8c0f2f",
      "in_reply_to_id": null,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit for follow-up: we can probably just eliminate these braces/indent, eh?",
      "created_at": "2021-12-03T16:27:50Z",
      "updated_at": "2021-12-03T17:02:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r762078294",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762078294"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762079030",
      "pull_request_review_id": 822853111,
      "id": 762079030,
      "node_id": "PRRC_kwDOABII584tbGc2",
      "diff_hunk": "@@ -0,0 +1,162 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/chainstate.h>\n+\n+#include <consensus/params.h>\n+#include <node/blockstorage.h>\n+#include <validation.h>\n+\n+std::optional<ChainstateLoadingError> LoadChainstate(bool fReset,\n+                                                     ChainstateManager& chainman,\n+                                                     CTxMemPool* mempool,\n+                                                     bool fPruneMode,\n+                                                     const Consensus::Params& consensus_params,\n+                                                     bool fReindexChainState,\n+                                                     int64_t nBlockTreeDBCache,\n+                                                     int64_t nCoinDBCache,\n+                                                     int64_t nCoinCacheUsage,\n+                                                     bool block_tree_db_in_memory,\n+                                                     bool coins_db_in_memory,\n+                                                     std::optional<std::function<bool()>> shutdown_requested,\n+                                                     std::optional<std::function<void()>> coins_error_cb)\n+{\n+    auto is_coinsview_empty = [&](CChainState* chainstate) EXCLUSIVE_LOCKS_REQUIRED(::cs_main) {\n+        return fReset || fReindexChainState || chainstate->CoinsTip().GetBestBlock().IsNull();\n+    };\n+\n+    {\n+        LOCK(cs_main);\n+        chainman.InitializeChainstate(mempool);\n+        chainman.m_total_coinstip_cache = nCoinCacheUsage;\n+        chainman.m_total_coinsdb_cache = nCoinDBCache;\n+\n+        UnloadBlockIndex(mempool, chainman);\n+\n+        auto& pblocktree{chainman.m_blockman.m_block_tree_db};\n+        // new CBlockTreeDB tries to delete the existing file, which\n+        // fails if it's still open from the previous loop. Close it first:\n+        pblocktree.reset();\n+        pblocktree.reset(new CBlockTreeDB(nBlockTreeDBCache, block_tree_db_in_memory, fReset));\n+\n+        if (fReset) {\n+            pblocktree->WriteReindexing(true);\n+            //If we're reindexing in prune mode, wipe away unusable block files and all undo data files\n+            if (fPruneMode)\n+                CleanupBlockRevFiles();\n+        }\n+\n+        if (shutdown_requested && (*shutdown_requested)()) return ChainstateLoadingError::SHUTDOWN_PROBED;\n+\n+        // LoadBlockIndex will load fHavePruned if we've ever removed a\n+        // block file from disk.\n+        // Note that it also sets fReindex based on the disk flag!\n+        // From here on out fReindex and fReset mean something different!\n+        if (!chainman.LoadBlockIndex()) {\n+            if (shutdown_requested && (*shutdown_requested)()) return ChainstateLoadingError::SHUTDOWN_PROBED;\n+            return ChainstateLoadingError::ERROR_LOADING_BLOCK_DB;\n+        }\n+\n+        if (!chainman.BlockIndex().empty() &&\n+                !chainman.m_blockman.LookupBlockIndex(consensus_params.hashGenesisBlock)) {\n+            return ChainstateLoadingError::ERROR_BAD_GENESIS_BLOCK;\n+        }\n+\n+        // Check for changed -prune state.  What we are concerned about is a user who has pruned blocks\n+        // in the past, but is now trying to run unpruned.\n+        if (fHavePruned && !fPruneMode) {\n+            return ChainstateLoadingError::ERROR_PRUNED_NEEDS_REINDEX;\n+        }\n+\n+        // At this point blocktree args are consistent with what's on disk.\n+        // If we're not mid-reindex (based on disk + args), add a genesis block on disk\n+        // (otherwise we use the one already on disk).\n+        // This is called again in ThreadImport after the reindex completes.\n+        if (!fReindex && !chainman.ActiveChainstate().LoadGenesisBlock()) {\n+            return ChainstateLoadingError::ERROR_LOAD_GENESIS_BLOCK_FAILED;\n+        }\n+\n+        // At this point we're either in reindex or we've loaded a useful\n+        // block tree into BlockIndex()!\n+\n+        for (CChainState* chainstate : chainman.GetAll()) {\n+            chainstate->InitCoinsDB(\n+                /* cache_size_bytes */ nCoinDBCache,\n+                /* in_memory */ coins_db_in_memory,\n+                /* should_wipe */ fReset || fReindexChainState);\n+\n+            if (coins_error_cb.has_value()) {\n+                chainstate->CoinsErrorCatcher().AddReadErrCallback(coins_error_cb.value());\n+            }\n+\n+            // If necessary, upgrade from older database format.\n+            // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n+            if (!chainstate->CoinsDB().Upgrade()) {\n+                return ChainstateLoadingError::ERROR_CHAINSTATE_UPGRADE_FAILED;\n+            }\n+\n+            // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n+            if (!chainstate->ReplayBlocks()) {\n+                return ChainstateLoadingError::ERROR_REPLAYBLOCKS_FAILED;\n+            }\n+\n+            // The on-disk coinsdb is now in a good state, create the cache\n+            chainstate->InitCoinsCache(nCoinCacheUsage);\n+            assert(chainstate->CanFlushToDisk());\n+\n+            if (!is_coinsview_empty(chainstate)) {\n+                // LoadChainTip initializes the chain based on CoinsTip()'s best block\n+                if (!chainstate->LoadChainTip()) {\n+                    return ChainstateLoadingError::ERROR_LOADCHAINTIP_FAILED;\n+                }\n+                assert(chainstate->m_chain.Tip() != nullptr);\n+            }\n+        }\n+\n+        if (!fReset) {\n+            auto chainstates{chainman.GetAll()};\n+            if (std::any_of(chainstates.begin(), chainstates.end(),\n+                            [](const CChainState* cs) EXCLUSIVE_LOCKS_REQUIRED(cs_main) { return cs->NeedsRedownload(); })) {\n+                return ChainstateLoadingError::ERROR_BLOCKS_WITNESS_INSUFFICIENTLY_VALIDATED;\n+            }\n+        }\n+    }\n+\n+    return std::nullopt;\n+}\n+\n+std::optional<ChainstateLoadVerifyError> VerifyLoadedChainstate(ChainstateManager& chainman,\n+                                                                bool fReset,\n+                                                                bool fReindexChainState,\n+                                                                const Consensus::Params& consensus_params,\n+                                                                unsigned int check_blocks,\n+                                                                unsigned int check_level,\n+                                                                std::function<int64_t()> get_unix_time_seconds)\n+{\n+    auto is_coinsview_empty = [&](CChainState* chainstate) EXCLUSIVE_LOCKS_REQUIRED(::cs_main) {\n+        return fReset || fReindexChainState || chainstate->CoinsTip().GetBestBlock().IsNull();\n+    };\n+\n+    {",
      "path": "src/node/chainstate.cpp",
      "position": null,
      "original_position": 141,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "8301c696d0a0be921ce01b6e9f74f7ff6e8c0f2f",
      "in_reply_to_id": null,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit for follow-up: same here.",
      "created_at": "2021-12-03T16:28:49Z",
      "updated_at": "2021-12-03T17:02:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r762079030",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762079030"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762081278",
      "pull_request_review_id": 822853111,
      "id": 762081278,
      "node_id": "PRRC_kwDOABII584tbG_-",
      "diff_hunk": "@@ -77,9 +77,9 @@ std::ostream& operator<<(std::ostream& os, const uint256& num)\n \n BasicTestingSetup::BasicTestingSetup(const std::string& chainName, const std::vector<const char*>& extra_args)\n     : m_path_root{fs::temp_directory_path() / \"test_common_\" PACKAGE_NAME / g_insecure_rand_ctx_temp_path.rand256().ToString()},\n-      m_args{}\n+      m_args{gArgs}",
      "path": "src/test/util/setup_common.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "7ede150299ea46d38a0797910c95028e7e948e0d",
      "in_reply_to_id": 760574720,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Agree that we can (should?) leave this out provided it doesn't make things too difficult in subsequent commits. I do like the idea of shedding use of `gArgs` from within this test class, but maybe that should be handled separately if there are non-obvious behavior changes as Russ is mentioning.",
      "created_at": "2021-12-03T16:31:45Z",
      "updated_at": "2021-12-03T17:02:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r762081278",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762081278"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 80,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762083060",
      "pull_request_review_id": 822853111,
      "id": 762083060,
      "node_id": "PRRC_kwDOABII584tbHb0",
      "diff_hunk": "@@ -177,15 +181,18 @@ TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const\n     // instead of unit tests, but for now we need these here.\n     RegisterAllCoreRPCCommands(tableRPC);\n \n-    m_node.chainman->InitializeChainstate(m_node.mempool.get());\n-    m_node.chainman->ActiveChainstate().InitCoinsDB(\n-        /*cache_size_bytes=*/1 << 23, /*in_memory=*/true, /*should_wipe=*/false);\n-    assert(!m_node.chainman->ActiveChainstate().CanFlushToDisk());\n-    m_node.chainman->ActiveChainstate().InitCoinsCache(1 << 23);\n-    assert(m_node.chainman->ActiveChainstate().CanFlushToDisk());\n-    if (!m_node.chainman->ActiveChainstate().LoadGenesisBlock()) {\n-        throw std::runtime_error(\"LoadGenesisBlock failed.\");\n-    }\n+    auto rv = LoadChainstate(fReindex.load(),\n+                             *Assert(m_node.chainman.get()),\n+                             Assert(m_node.mempool.get()),\n+                             fPruneMode,\n+                             chainparams.GetConsensus(),\n+                             m_args.GetBoolArg(\"-reindex-chainstate\", false),\n+                             m_cache_sizes.block_tree_db,\n+                             m_cache_sizes.coins_db,\n+                             m_cache_sizes.coins,\n+                             true,\n+                             true);\n+    assert(!rv.has_value());",
      "path": "src/test/util/setup_common.cpp",
      "position": 53,
      "original_position": 84,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "8301c696d0a0be921ce01b6e9f74f7ff6e8c0f2f",
      "in_reply_to_id": null,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Out of curiosity and not-blocking, is there any reason we shouldn't also call `VerifyLoadedChainstate` here just for the sake of coverage?\r\n\r\nE.g. this seems to work: https://github.com/jamesob/bitcoin/commit/f8d386913ce8b0dd012b42268926c1501c6b0f03. Feel free to cherry-pick/steal. ",
      "created_at": "2021-12-03T16:34:18Z",
      "updated_at": "2021-12-03T17:02:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r762083060",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762083060"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 196,
      "original_line": 196,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/764984657",
      "pull_request_review_id": 826601342,
      "id": 764984657,
      "node_id": "PRRC_kwDOABII584tmL1R",
      "diff_hunk": "@@ -1415,6 +1415,8 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n                                 cache_sizes.block_tree_db,\n                                 cache_sizes.coins_db,\n                                 cache_sizes.coins,\n+                                false,",
      "path": "src/init.cpp",
      "position": 108,
      "original_position": 4,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "c541da0d62eaf5e96eca00d7508899f98bdfc1bc",
      "in_reply_to_id": null,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Please use named argument style here",
      "created_at": "2021-12-08T15:42:57Z",
      "updated_at": "2021-12-08T15:42:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r764984657",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/764984657"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1418,
      "original_line": 1418,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765041498",
      "pull_request_review_id": 826679124,
      "id": 765041498,
      "node_id": "PRRC_kwDOABII584tmZta",
      "diff_hunk": "@@ -1415,6 +1415,8 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n                                 cache_sizes.block_tree_db,\n                                 cache_sizes.coins_db,\n                                 cache_sizes.coins,\n+                                false,",
      "path": "src/init.cpp",
      "position": 108,
      "original_position": 4,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "c541da0d62eaf5e96eca00d7508899f98bdfc1bc",
      "in_reply_to_id": 764984657,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Please use named argument style here\r\n\r\nThis suggestion makes sense. But one way or the other I would also like to incorporate or follow up with b7c7f64dc86f0fcdf07cb1e765f7cccc3a3c8897 (+129/-210) [#23280 (comment)](https://github.com/bitcoin/bitcoin/pull/23280#issuecomment-984149564) which gets rid of these arguments.",
      "created_at": "2021-12-08T16:46:34Z",
      "updated_at": "2021-12-08T16:46:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r765041498",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765041498"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1418,
      "original_line": 1418,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765051533",
      "pull_request_review_id": 826692527,
      "id": 765051533,
      "node_id": "PRRC_kwDOABII584tmcKN",
      "diff_hunk": "@@ -143,7 +143,7 @@ std::optional<ChainstateLoadVerifyError> VerifyLoadedChainstate(ChainstateManage\n         for (CChainState* chainstate : chainman.GetAll()) {\n             if (!is_coinsview_empty(chainstate)) {\n                 const CBlockIndex* tip = chainstate->m_chain.Tip();\n-                if (tip && tip->nTime > GetTime() + MAX_FUTURE_BLOCK_TIME) {\n+                if (tip && tip->nTime > get_unix_time_seconds() + 2 * 60 * 60) {",
      "path": "src/node/chainstate.cpp",
      "position": null,
      "original_position": 23,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "05441c2dc5f60e2025476d8ec94c9025032d118c",
      "in_reply_to_id": null,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "As there is no need for precision here, wouldn't it be simpler to pass in the time here instead of a function that returns the time?\r\n(or can this function take that long to run?)",
      "created_at": "2021-12-08T16:58:09Z",
      "updated_at": "2021-12-08T16:59:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r765051533",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765051533"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 146,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765055266",
      "pull_request_review_id": 826697758,
      "id": 765055266,
      "node_id": "PRRC_kwDOABII584tmdEi",
      "diff_hunk": "@@ -1415,6 +1415,8 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n                                 cache_sizes.block_tree_db,\n                                 cache_sizes.coins_db,\n                                 cache_sizes.coins,\n+                                false,",
      "path": "src/init.cpp",
      "position": 108,
      "original_position": 4,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "c541da0d62eaf5e96eca00d7508899f98bdfc1bc",
      "in_reply_to_id": 764984657,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sure, getting rid of them is even better.",
      "created_at": "2021-12-08T17:02:42Z",
      "updated_at": "2021-12-08T17:02:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r765055266",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765055266"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1418,
      "original_line": 1418,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765057869",
      "pull_request_review_id": 826701422,
      "id": 765057869,
      "node_id": "PRRC_kwDOABII584tmdtN",
      "diff_hunk": "@@ -143,7 +143,7 @@ std::optional<ChainstateLoadVerifyError> VerifyLoadedChainstate(ChainstateManage\n         for (CChainState* chainstate : chainman.GetAll()) {\n             if (!is_coinsview_empty(chainstate)) {\n                 const CBlockIndex* tip = chainstate->m_chain.Tip();\n-                if (tip && tip->nTime > GetTime() + MAX_FUTURE_BLOCK_TIME) {\n+                if (tip && tip->nTime > get_unix_time_seconds() + 2 * 60 * 60) {",
      "path": "src/node/chainstate.cpp",
      "position": null,
      "original_position": 23,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "05441c2dc5f60e2025476d8ec94c9025032d118c",
      "in_reply_to_id": 765051533,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "why is this removing `MAX_FUTURE_BLOCK_TIME`?\r\n\r\nThis reverts https://github.com/bitcoin/bitcoin/commit/26a1147ce56083d7aa820ac115c16b01e47d911c",
      "created_at": "2021-12-08T17:05:58Z",
      "updated_at": "2021-12-08T17:05:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r765057869",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765057869"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 146,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766766339",
      "pull_request_review_id": 829020675,
      "id": 766766339,
      "node_id": "PRRC_kwDOABII584ts-0D",
      "diff_hunk": "@@ -1418,11 +1418,8 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n         bilingual_str strLoadError;\n \n         uiInterface.InitMessage(_(\"Loading block index…\").translated);\n-\n         const int64_t load_block_index_start_time = GetTimeMillis();\n-        bool rv = LoadChainstate(fLoaded,\n-                                 strLoadError,\n-                                 fReset,\n+        auto rv = LoadChainstate(fReset,",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 9,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "ae9121f958a4124ea6238cad0c3f2acb8b9eb4bb",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "any reason to call this rv when better names can be chosen? Like `err`?",
      "created_at": "2021-12-10T15:24:45Z",
      "updated_at": "2021-12-10T16:16:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r766766339",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766766339"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1422,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766793777",
      "pull_request_review_id": 829020675,
      "id": 766793777,
      "node_id": "PRRC_kwDOABII584ttFgx",
      "diff_hunk": "@@ -1461,20 +1459,34 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n                 strLoadError = strprintf(_(\"Witness data for blocks after height %d requires validation. Please restart with -reindex.\"),\n                                          chainparams.GetConsensus().SegwitHeight);\n                 break;\n-            case ChainstateLoadingError::ERROR_BLOCK_FROM_FUTURE:\n-                strLoadError = _(\"The block database contains a block which appears to be from the future. \"\n-                                 \"This may be due to your computer's date and time being set incorrectly. \"\n-                                 \"Only rebuild the block database if you are sure that your computer's date and time are correct\");\n-                break;\n-            case ChainstateLoadingError::ERROR_CORRUPTED_BLOCK_DB:\n-                strLoadError = _(\"Corrupted block database detected\");\n-                break;\n             case ChainstateLoadingError::SHUTDOWN_PROBED:\n                 break;\n             }\n         } else {\n-            fLoaded = true;\n-            LogPrintf(\" block index %15dms\\n\", GetTimeMillis() - load_block_index_start_time);\n+            auto rv2 = VerifyLoadedChainstate(chainman,",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 29,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "ca7c0b934db68acdc410e3a82f1ed898382da2e5",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "same",
      "created_at": "2021-12-10T15:59:18Z",
      "updated_at": "2021-12-10T16:16:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r766793777",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766793777"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1466,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766794627",
      "pull_request_review_id": 829020675,
      "id": 766794627,
      "node_id": "PRRC_kwDOABII584ttFuD",
      "diff_hunk": "@@ -143,7 +143,7 @@ std::optional<ChainstateLoadVerifyError> VerifyLoadedChainstate(ChainstateManage\n         for (CChainState* chainstate : chainman.GetAll()) {\n             if (!is_coinsview_empty(chainstate)) {\n                 const CBlockIndex* tip = chainstate->m_chain.Tip();\n-                if (tip && tip->nTime > GetTime() + MAX_FUTURE_BLOCK_TIME) {\n+                if (tip && tip->nTime > get_unix_time_seconds() + 2 * 60 * 60) {",
      "path": "src/node/chainstate.cpp",
      "position": null,
      "original_position": 23,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "05441c2dc5f60e2025476d8ec94c9025032d118c",
      "in_reply_to_id": 765051533,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Also, agree with laanwj. This only calls `is_coinsview_empty`, which shouldn't take more than a second (aka the precision of our clock), so it might be better to just pass in the time.",
      "created_at": "2021-12-10T16:00:25Z",
      "updated_at": "2021-12-10T16:16:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r766794627",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766794627"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 146,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766797325",
      "pull_request_review_id": 829020675,
      "id": 766797325,
      "node_id": "PRRC_kwDOABII584ttGYN",
      "diff_hunk": "@@ -45,10 +45,10 @@ enum class ChainstateLoadingError {\n  *        differentiable by the specific enumerator.\n  *\n  *        Note that a return value of SHUTDOWN_PROBED means ONLY that \"during\n- *        this sequence, when we explicitly checked ShutdownRequested() at\n+ *        this sequence, when we explicitly checked shutdown_requested() at\n  *        arbitrary points, one of those calls returned true\". Therefore, a\n  *        return value other than SHUTDOWN_PROBED does not guarantee that\n- *        ShutdownRequested() hasn't been called indirectly.\n+ *        shutdown_requested() hasn't been called indirectly.",
      "path": "src/node/chainstate.h",
      "position": 53,
      "original_position": 9,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "4da9c076d1cf12728730bb1f7e8906d4e9bfaba5",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this comment is \"wrong\". `shutdown_requested` is a local symbol to the function, so there is no other place calling it.\r\n\r\nMaybe just rephrase as \"shutdown hasn't been requested indirectly\"",
      "created_at": "2021-12-10T16:03:56Z",
      "updated_at": "2021-12-10T16:16:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r766797325",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766797325"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 53,
      "original_line": 51,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766802045",
      "pull_request_review_id": 829020675,
      "id": 766802045,
      "node_id": "PRRC_kwDOABII584ttHh9",
      "diff_hunk": "@@ -0,0 +1,22 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_CACHES_H\n+#define BITCOIN_NODE_CACHES_H\n+\n+#include <cstddef> // for size_t\n+#include <cstdint> // for int64_t\n+\n+class ArgsManager;\n+\n+struct CacheSizes {\n+    int64_t block_tree_db;\n+    int64_t coins_db;\n+    int64_t coins;\n+    int64_t tx_index;\n+    int64_t filter_index;\n+};\n+CacheSizes CalculateCacheSizes(const ArgsManager& args, size_t n_indexes = 0);",
      "path": "src/node/caches.h",
      "position": 20,
      "original_position": 20,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "ac4bf138b849a8544798f3891d6623803040c265",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "seems fragile to provide a default value that is unused, no?",
      "created_at": "2021-12-10T16:10:23Z",
      "updated_at": "2021-12-10T16:16:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r766802045",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766802045"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 20,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/774304965",
      "pull_request_review_id": 838992636,
      "id": 774304965,
      "node_id": "PRRC_kwDOABII584uJvTF",
      "diff_hunk": "@@ -177,15 +181,18 @@ TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const\n     // instead of unit tests, but for now we need these here.\n     RegisterAllCoreRPCCommands(tableRPC);\n \n-    m_node.chainman->InitializeChainstate(m_node.mempool.get());\n-    m_node.chainman->ActiveChainstate().InitCoinsDB(\n-        /*cache_size_bytes=*/1 << 23, /*in_memory=*/true, /*should_wipe=*/false);\n-    assert(!m_node.chainman->ActiveChainstate().CanFlushToDisk());\n-    m_node.chainman->ActiveChainstate().InitCoinsCache(1 << 23);\n-    assert(m_node.chainman->ActiveChainstate().CanFlushToDisk());\n-    if (!m_node.chainman->ActiveChainstate().LoadGenesisBlock()) {\n-        throw std::runtime_error(\"LoadGenesisBlock failed.\");\n-    }\n+    auto rv = LoadChainstate(fReindex.load(),\n+                             *Assert(m_node.chainman.get()),\n+                             Assert(m_node.mempool.get()),\n+                             fPruneMode,\n+                             chainparams.GetConsensus(),\n+                             m_args.GetBoolArg(\"-reindex-chainstate\", false),\n+                             m_cache_sizes.block_tree_db,\n+                             m_cache_sizes.coins_db,\n+                             m_cache_sizes.coins,\n+                             true,\n+                             true);\n+    assert(!rv.has_value());",
      "path": "src/test/util/setup_common.cpp",
      "position": 53,
      "original_position": 84,
      "commit_id": "7f15eff2ddd86034e84a19413e1a42883987f660",
      "original_commit_id": "8301c696d0a0be921ce01b6e9f74f7ff6e8c0f2f",
      "in_reply_to_id": 762083060,
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Followed up with in #23736.",
      "created_at": "2021-12-23T04:10:02Z",
      "updated_at": "2021-12-23T04:10:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/23280#discussion_r774304965",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/774304965"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/23280"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 196,
      "original_line": 196,
      "side": "RIGHT"
    }
  ]
}