{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055",
    "id": 422111355,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDIyMTExMzU1",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19055",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/19055.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/19055.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/9815332d5158d69a94abeaf465a2c07bd8e43359",
    "number": 19055,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "Add MuHash3072 implementation",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This is the first split of #18000 which implements the Muhash algorithm and uses it to calculate the UTXO set hash in `gettxoutsetinfo`.",
    "labels": [
      {
        "id": 98279177,
        "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
        "name": "RPC/REST/ZMQ",
        "color": "0052cc",
        "default": false
      },
      {
        "id": 1648013533,
        "node_id": "MDU6TGFiZWwxNjQ4MDEzNTMz",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Review%20club",
        "name": "Review club",
        "description": "",
        "color": "0052cc",
        "default": false
      }
    ],
    "active_lock_reason": "resolved",
    "created_at": "2020-05-22T19:37:41Z",
    "updated_at": "2022-08-16T17:06:37Z",
    "closed_at": "2021-01-07T16:57:50Z",
    "mergeable_state": "unknown",
    "merged_at": "2021-01-07T16:57:50Z",
    "merge_commit_sha": "b6a71b80d28c79796b557cdb6bae05abb34d1225",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "fjahr:csi-1-muhash",
      "ref": "csi-1-muhash",
      "sha": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 196253948,
        "node_id": "MDEwOlJlcG9zaXRvcnkxOTYyNTM5NDg=",
        "name": "bitcoin",
        "full_name": "fjahr/bitcoin",
        "owner": {
          "login": "fjahr",
          "id": 1322187,
          "node_id": "MDQ6VXNlcjEzMjIxODc=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/fjahr",
          "html_url": "https://github.com/fjahr",
          "followers_url": "https://api.github.com/users/fjahr/followers",
          "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
          "organizations_url": "https://api.github.com/users/fjahr/orgs",
          "repos_url": "https://api.github.com/users/fjahr/repos",
          "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/fjahr/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/fjahr/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/fjahr/bitcoin",
        "archive_url": "https://api.github.com/repos/fjahr/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/fjahr/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/fjahr/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/fjahr/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/fjahr/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/fjahr/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/fjahr/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/fjahr/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/fjahr/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/fjahr/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/fjahr/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/fjahr/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/fjahr/bitcoin/events",
        "forks_url": "https://api.github.com/repos/fjahr/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/fjahr/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/fjahr/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/fjahr/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/fjahr/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/fjahr/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/fjahr/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/fjahr/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/fjahr/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/fjahr/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/fjahr/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/fjahr/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/fjahr/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/fjahr/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/fjahr/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/fjahr/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:fjahr/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/fjahr/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/fjahr/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/fjahr/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/fjahr/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/fjahr/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/fjahr/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/fjahr/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/fjahr/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/fjahr/bitcoin/hooks",
        "svn_url": "https://github.com/fjahr/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 1,
        "stargazers_count": 4,
        "watchers_count": 4,
        "size": 218657,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-05-24T19:49:55Z",
        "created_at": "2019-07-10T18:11:06Z",
        "updated_at": "2022-02-24T18:41:19Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "f4ac48d30a84906d648664c77bf839f012bebdbf",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69818,
        "watchers_count": 69818,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T22:42:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T03:51:27Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 694,
    "deletions": 7,
    "changed_files": 10,
    "commits": 8,
    "review_comments": 180,
    "comments": 64
  },
  "events": [
    {
      "event": "labeled",
      "id": 3366423277,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDMzNjY0MjMyNzc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3366423277",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-22T23:34:35Z",
      "label": {
        "name": "Build system",
        "color": "5319e7"
      }
    },
    {
      "event": "labeled",
      "id": 3366423279,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDMzNjY0MjMyNzk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3366423279",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-22T23:34:35Z",
      "label": {
        "name": "RPC/REST/ZMQ",
        "color": "0052cc"
      }
    },
    {
      "event": "labeled",
      "id": 3366423280,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDMzNjY0MjMyODA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3366423280",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-22T23:34:35Z",
      "label": {
        "name": "Tests",
        "color": "d4c5f9"
      }
    },
    {
      "event": "labeled",
      "id": 3366423282,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDMzNjY0MjMyODI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3366423282",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-22T23:34:35Z",
      "label": {
        "name": "Utils/log/libs",
        "color": "5319e7"
      }
    },
    {
      "event": "commented",
      "id": 633971712,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzMzk3MTcxMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/633971712",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-26T11:38:47Z",
      "updated_at": "2020-05-26T11:38:47Z",
      "author_association": "MEMBER",
      "body": "Reviewers: This PR is being discussed in the review club at https://bitcoincore.reviews/19055\r\n\r\n(A `Review club` tag for this PR would be helpful to indicate that review notes and discussion are available there.)",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-633971712",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "unlabeled",
      "id": 3373153225,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MzM3MzE1MzIyNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3373153225",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-26T11:43:38Z",
      "label": {
        "name": "Build system",
        "color": "5319e7"
      }
    },
    {
      "event": "unlabeled",
      "id": 3373153226,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MzM3MzE1MzIyNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3373153226",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-26T11:43:38Z",
      "label": {
        "name": "Tests",
        "color": "d4c5f9"
      }
    },
    {
      "event": "unlabeled",
      "id": 3373153229,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MzM3MzE1MzIyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3373153229",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-26T11:43:38Z",
      "label": {
        "name": "Utils/log/libs",
        "color": "5319e7"
      }
    },
    {
      "event": "labeled",
      "id": 3373153231,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDMzNzMxNTMyMzE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3373153231",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-26T11:43:38Z",
      "label": {
        "name": "Review club",
        "color": "0052cc"
      }
    },
    {
      "event": "labeled",
      "id": 3373153232,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDMzNzMxNTMyMzI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3373153232",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-26T11:43:38Z",
      "label": {
        "name": "Validation",
        "color": "6060aa"
      }
    },
    {
      "event": "commented",
      "id": 633981639,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzMzk4MTYzOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/633981639",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-26T12:02:08Z",
      "updated_at": "2020-05-26T12:02:08Z",
      "author_association": "CONTRIBUTOR",
      "body": "Some history for the context:\r\n* https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014337.html\r\n* based on #10434",
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-633981639",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "reviewed",
      "id": 418468591,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4NDY4NTkx",
      "url": null,
      "actor": null,
      "commit_id": "23914091d9d1a40f673fe88568ea6e5fbb7de9ae",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK - this is so cool!\r\n\r\nRegarding approaches (i.e. which hash function) I looked at your comparison [in this doc](https://gist.github.com/fjahr/fa4892874b090d3a4f4fccc5bafa0210), and have a question about the \"rolling-ness\" consideration and why it's important. It also seems that ECMH (which is noted as non-rolling) performed better and has a maintainability plus since it's part of Secp256k1.\r\n\r\nFrom what I’ve gathered:\r\n- incremental hashing is efficient with arbitrary additions/deletions from a large set, at any point in the data\r\n- rolling hash functions have this same efficiency idea but are particularly optimized for adding/popping at the ends (i.e. like a \"rolling\" window) \r\n(Please correct me if I'm mistaken here, since you've definitely spent more time with this. I also understand that they aren't mutually exclusive).\r\n\r\nSince the UTXO set is not spent in any particular order and you can’t sort it ahead of time, I definitely see (theoretically as well as from the tangible performance wins) why an incremental hash is better, but I fail to understand why _rolling_ is particularly important?",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#pullrequestreview-418468591",
      "submitted_at": "2020-05-26T16:24:19Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
    },
    {
      "event": "commented",
      "id": 634142704,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzNDE0MjcwNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/634142704",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-26T16:45:17Z",
      "updated_at": "2020-05-26T16:45:17Z",
      "author_association": "MEMBER",
      "body": "@gzhao408 I think there is a bit of a miscommunication. The term \"rolling\" here just means efficient addition as well as deletion from the set being hashed. There is no actual window, as sets are unordered. Perhaps the term was chosen badly (which would be my fault).\r\n\r\nAll of LtHash, MuHash, and ECMH support incremental addition and deletion. The \"non-rolling\" mention in @fjahr's document refers to the fact that he hasn't implemented continuous UTXO set hashing with these functions, only a from scratch computation. It has nothing to do with what these functions can or can't do.\r\n\r\nThe primary difference between MuHash and ECMH is caching:\r\n\r\n* ECMH is more CPU time overall, but the time is mostly in computing the \"effect\" of a set of additions/deletions; applying that effect to the overall hash is extremely cheap. Furthermore, a 64-byte precomputed \"patch\" per set of additions/deletions can be created, which means a patch could be cached per-transaction, and then very cheaply applied when the transaction confirms. So it allows doing most of the work ahead of time (before the block arrives).\r\n\r\n* MuHash is cheaper overall, but the time is mostly in applying the changes to the overall hash. This means caching isn't very useful (and also the caches would be 768 bytes, which is pretty large). If the intent is computing things in the background, or at block connection time, then this is a better (and simpler) approach.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-634142704",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "mentioned",
      "id": 3374431139,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzM3NDQzMTEzOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3374431139",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-26T16:45:17Z"
    },
    {
      "event": "subscribed",
      "id": 3374431142,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMzNzQ0MzExNDI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3374431142",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-26T16:45:17Z"
    },
    {
      "event": "mentioned",
      "id": 3374431150,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzM3NDQzMTE1MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3374431150",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-26T16:45:17Z"
    },
    {
      "event": "subscribed",
      "id": 3374431152,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMzNzQ0MzExNTI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3374431152",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-26T16:45:17Z"
    },
    {
      "event": "commented",
      "id": 634155367,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzNDE1NTM2Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/634155367",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-26T17:08:17Z",
      "updated_at": "2020-05-26T17:08:17Z",
      "author_association": "MEMBER",
      "body": "AaaAHhhh, thank you @sipa for the clarification! \r\n\r\n> The term \"rolling\" here just means efficient addition as well as deletion from the set being hashed.\r\n> The \"non-rolling\" mention in @fjahr's document refers to the fact that he hasn't implemented continuous UTXO set hashing with these functions\r\n\r\nThis makes a lot more sense; I had thought he meant the hash function itself is rolling/non-rolling. I didn't have much info but was super interested and went for a textbook definition 😅 now I feel embarrassed. This information is super helpful, thanks!",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-634155367",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "mentioned",
      "id": 3374531685,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzM3NDUzMTY4NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3374531685",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-26T17:08:17Z"
    },
    {
      "event": "subscribed",
      "id": 3374531690,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMzNzQ1MzE2OTA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3374531690",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-26T17:08:17Z"
    },
    {
      "event": "mentioned",
      "id": 3374531701,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzM3NDUzMTcwMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3374531701",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-26T17:08:17Z"
    },
    {
      "event": "subscribed",
      "id": 3374531704,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMzNzQ1MzE3MDQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3374531704",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-26T17:08:17Z"
    },
    {
      "event": "commented",
      "id": 634207235,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzNDIwNzIzNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/634207235",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-26T18:44:49Z",
      "updated_at": "2020-05-26T18:44:49Z",
      "author_association": "MEMBER",
      "body": "> It also seems that ECMH (which is noted as non-rolling) performed better and has a maintainability plus since it's part of Secp256k1.\r\n\r\nPlease also note that there is an implementation of ECMH that is an open pull request to Secp256k1 but it is not merged and has been stale for some time. So the work to get it merged is more or less the same and I don't think there is a big difference in maintainability between having it in core or secp.",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-634207235",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "commented",
      "id": 634282984,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzNDI4Mjk4NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/634282984",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-26T21:14:49Z",
      "updated_at": "2020-05-26T21:14:49Z",
      "author_association": "MEMBER",
      "body": "@fjahr I've written a Python implementation of MuHash3072, so it can be more easily tested: https://github.com/sipa/bitcoin/commits/202005_muhash_python (no tests are included, but I've verified it matches the C++ code in a few simple examples).",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-634282984",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "mentioned",
      "id": 3375444584,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzM3NTQ0NDU4NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3375444584",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-26T21:14:49Z"
    },
    {
      "event": "subscribed",
      "id": 3375444587,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMzNzU0NDQ1ODc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3375444587",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-26T21:14:49Z"
    },
    {
      "event": "labeled",
      "id": 3375446967,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDMzNzU0NDY5Njc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3375446967",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-26T21:15:27Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3375623621,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzM3NTYyMzYyMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3375623621",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-26T22:17:31Z"
    },
    {
      "event": "commented",
      "id": 634312013,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzNDMxMjAxMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/634312013",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-26T22:22:29Z",
      "updated_at": "2020-05-26T22:22:29Z",
      "author_association": "MEMBER",
      "body": "> @fjahr I've written a Python implementation of MuHash3072, so it can be more easily tested: [sipa/bitcoin@`202005_muhash_python` (commits)](https://github.com/sipa/bitcoin/commits/202005_muhash_python) (no tests are included, but I've verified it matches the C++ code in a few simple examples).\r\n\r\nAwesome, I have just pulled it in here and will build further tests on top of it.",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-634312013",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "mentioned",
      "id": 3375636273,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzM3NTYzNjI3Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3375636273",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-26T22:22:29Z"
    },
    {
      "event": "subscribed",
      "id": 3375636276,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMzNzU2MzYyNzY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3375636276",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-26T22:22:29Z"
    },
    {
      "event": "commented",
      "id": 634314204,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzNDMxNDIwNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/634314204",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-26T22:28:40Z",
      "updated_at": "2020-05-26T22:28:40Z",
      "author_association": "MEMBER",
      "body": "Rebased and added a6cf0df104728a587283578735e7f11c5f0f2ae4 which allows the user to use the legacy hash with the use of a flag. This will definitely be squashed but I decided to keep it separate for the moment to make discussions easier in the review club tomorrow. I figured I would need to do something like this anyway in order go through a deprecation cycle with `gettxoutsetinfo`, the question is if that is still needed with the flag. Also added 4438aed09e87de0afb37da64ffb5e7489084e8ab which is @sipa 's python implementation of Muhash, currently unused.",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-634314204",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "mentioned",
      "id": 3375651001,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzM3NTY1MTAwMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3375651001",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-26T22:28:40Z"
    },
    {
      "event": "subscribed",
      "id": 3375651002,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMzNzU2NTEwMDI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3375651002",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-26T22:28:40Z"
    },
    {
      "event": "unlabeled",
      "id": 3375764396,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MzM3NTc2NDM5Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3375764396",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-26T23:20:04Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 419143541,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5MTQzNTQx",
      "url": null,
      "actor": null,
      "commit_id": "4438aed09e87de0afb37da64ffb5e7489084e8ab",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK / partial ACK 4438aed. Code review. Did not yet compare the C++ MuHash implementation to the Python one or look for other implementations to verify with. Built, ran tests, ran benchmarks. Verified that minor mutations to `muhash.cpp` duly broke the new unit test. Tested the new RPC `gettxoutsetinfo` help and boolean. Some comments:\r\n\r\n- This PR essentially makes `gettxoutsetinfo` too slow to be useable in testnet and mainnet (it times out and raises after 15 minutes); for that reason, until the -coinstatsindex in #18000 is merged, the MuHash algorithm should be opt-in for rpc `gettxoutsetinfo` and not the default\r\n\r\n- What are your plans regarding ECMH?\r\n\r\n- it looks like `TruncatedSHA512Writer` could use unit tests (perhaps just sanity checks if not viable to use test vectors, `CHashWriter` is also not tested directly but used by other unit tests: addrman, hash, sighash)\r\n\r\n- a fuzz harness would be ideal\r\n\r\n- do you plan to add tests using the just-added Python MuHash3072 implementation?\r\n\r\n- 06ae4ab0 commit message s/256/512/?\r\n\r\n- 04d088da commit message could mention the renaming of `hash_serialized_2` to `utxo_set_hash` and why it was changed (I didn't see any explanation anywhere)\r\n\r\n- 04d088da and a6cf0df ought to be squashed to one commit; keeping them separate unnecessarily complicates reviewing -- I squashed them locally in order to see the relevant diff, as ApplyStats() is weird enough to review already\r\n\r\n- at some point you'll want to add a release note\r\n\r\n- some nits below; feel free to ignore\r\n\r\n<details><summary>tested the new benchmarks</summary><p>\r\n\r\n```diff\r\n$ src/bench/bench_bitcoin -filter=MuHash*.*\r\n# Benchmark, evals, iterations, total, min, max, median\r\nMuHash, 5, 5000, 0.287426, 7.45603e-06, 1.72302e-05, 1.08339e-05\r\nMuHashAdd, 5, 5000, 0.243778, 7.93741e-06, 1.17234e-05, 9.61388e-06\r\nMuHashDiv, 5, 100, 8.62069, 0.0146344, 0.0216452, 0.0169485\r\nMuHashPrecompute, 5, 5000, 0.0557224, 1.55965e-06, 4.40565e-06, 1.65373e-06\r\n\r\n$ src/bench/bench_bitcoin -filter=MuHash*.* -evals=10\r\n# Benchmark, evals, iterations, total, min, max, median\r\nMuHash, 10, 5000, 0.286697, 5.3029e-06, 6.24744e-06, 5.78305e-06\r\nMuHashAdd, 10, 5000, 0.227103, 4.1665e-06, 5.39662e-06, 4.52542e-06\r\nMuHashDiv, 10, 100, 12.7459, 0.0106584, 0.0182222, 0.0120859\r\nMuHashPrecompute, 10, 5000, 0.096089, 1.67035e-06, 2.37696e-06, 1.89207e-06\r\n\r\n$ src/bench/bench_bitcoin -filter=MuHash*.* -evals=50\r\n# Benchmark, evals, iterations, total, min, max, median\r\nMuHash, 50, 5000, 1.92384, 6.04054e-06, 1.34205e-05, 7.3487e-06\r\nMuHashAdd, 50, 5000, 1.26626, 3.9807e-06, 5.9453e-06, 5.61147e-06\r\nMuHashDiv, 50, 100, 59.2743, 0.00950589, 0.0151357, 0.011696\r\nMuHashPrecompute, 50, 5000, 0.386586, 1.4394e-06, 1.66618e-06, 1.55641e-06\r\n```\r\n</p></details>\r\n\r\nNote to reviewers: you'll need to build #18000 to build the index and test performance, as it contains the -coinstatsindex that this PR does not yet implement.\r\n",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#pullrequestreview-419143541",
      "submitted_at": "2020-05-27T15:09:29Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
    },
    {
      "event": "commented",
      "id": 634764233,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzNDc2NDIzMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/634764233",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-27T16:01:33Z",
      "updated_at": "2020-05-27T18:09:44Z",
      "author_association": "MEMBER",
      "body": "Also verified that, like your added test in `rpc_blockchain.py`, only `utxo_set_hash` varies between `gettxoutsetinfo` in -regtest with each algo.\r\n\r\n```bash \r\n$ bitcoin-cli -regtest gettxoutsetinfo\r\n{\r\n  \"height\": 15599,\r\n  \"bestblock\": \"6e535bc570f9be1b86d21711b23391e4e8f001682b5c6243883744879cdc4f84\",\r\n  \"transactions\": 3216,\r\n  \"txouts\": 3219,\r\n  \"bogosize\": 234987,\r\n  \"utxo_set_hash\": \"c4926481130f6689950e07e0e1f2060277d349b106a94b83145d577d3db4d225\",\r\n  \"disk_size\": 226234,\r\n  \"total_amount\": 14949.99998350\r\n}\r\n$ bitcoin-cli -regtest gettxoutsetinfo true\r\n{\r\n  \"height\": 15599,\r\n  \"bestblock\": \"6e535bc570f9be1b86d21711b23391e4e8f001682b5c6243883744879cdc4f84\",\r\n  \"transactions\": 3216,\r\n  \"txouts\": 3219,\r\n  \"bogosize\": 234987,\r\n  \"utxo_set_hash\": \"1883e99e56927fd5e3b82ccb9e08acd1be7ed0256d4cafe142626ae2fb66ffb4\",\r\n  \"disk_size\": 226234,\r\n  \"total_amount\": 14949.99998350\r\n}\r\n```",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-634764233",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "commented",
      "id": 634809748,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzNDgwOTc0OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/634809748",
      "actor": {
        "login": "narula",
        "id": 177646,
        "node_id": "MDQ6VXNlcjE3NzY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/177646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/narula",
        "html_url": "https://github.com/narula",
        "followers_url": "https://api.github.com/users/narula/followers",
        "following_url": "https://api.github.com/users/narula/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/narula/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/narula/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/narula/subscriptions",
        "organizations_url": "https://api.github.com/users/narula/orgs",
        "repos_url": "https://api.github.com/users/narula/repos",
        "events_url": "https://api.github.com/users/narula/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/narula/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-27T17:10:46Z",
      "updated_at": "2020-05-27T17:23:37Z",
      "author_association": "CONTRIBUTOR",
      "body": "nit: \"separate\" is misspelled in the commit title of cda20f3f897ff88337756cb0c0345b41cec9014e\r\n\r\nIt might be nice to split this in two PRs: One which adds MuHash, and one which updates `gettxoutsetinfo` to support it. I would definitely at least rebase/squash to put all the MuHash additions first and then layer the functionality changes on top.\r\n\r\nEdited to add thought: The next PR could add rolling as well, so this way we don't have an interim state where `gettxoutsetinfo` is even slower than it is now.",
      "user": {
        "login": "narula",
        "id": 177646,
        "node_id": "MDQ6VXNlcjE3NzY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/177646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/narula",
        "html_url": "https://github.com/narula",
        "followers_url": "https://api.github.com/users/narula/followers",
        "following_url": "https://api.github.com/users/narula/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/narula/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/narula/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/narula/subscriptions",
        "organizations_url": "https://api.github.com/users/narula/orgs",
        "repos_url": "https://api.github.com/users/narula/repos",
        "events_url": "https://api.github.com/users/narula/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/narula/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-634809748",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "commented",
      "id": 634910640,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzNDkxMDY0MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/634910640",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-27T20:04:35Z",
      "updated_at": "2021-01-03T00:35:55Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20828 (fuzz: Introduce CallOneOf helper to replace switch-case by MarcoFalke)\n* #19145 (Add hash_type MUHASH for gettxoutsetinfo by fjahr)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-634910640",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "reviewed",
      "id": 420031955,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwMDMxOTU1",
      "url": null,
      "actor": null,
      "commit_id": "4438aed09e87de0afb37da64ffb5e7489084e8ab",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#pullrequestreview-420031955",
      "submitted_at": "2020-05-28T11:53:21Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
    },
    {
      "event": "added_to_project",
      "id": 3384235799,
      "node_id": "MDE5OkFkZGVkVG9Qcm9qZWN0RXZlbnQzMzg0MjM1Nzk5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3384235799",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-28T19:07:41Z",
      "project_card": {
        "id": 39100907,
        "url": "https://api.github.com/projects/columns/cards/39100907",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3386795788,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzM4Njc5NTc4OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3386795788",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-29T11:33:22Z"
    },
    {
      "event": "commented",
      "id": 635955599,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzNTk1NTU5OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/635955599",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-29T12:51:57Z",
      "updated_at": "2020-05-29T12:52:32Z",
      "author_association": "MEMBER",
      "body": "It looks like you removed a bunch of code, and the functional tests, in the last push? If yes, review effort is being thrown away, and perhaps the PR description needs to be updated.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-635955599",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "mentioned",
      "id": 3387045337,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzM4NzA0NTMzNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3387045337",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-29T12:51:57Z"
    },
    {
      "event": "subscribed",
      "id": 3387045342,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMzODcwNDUzNDI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3387045342",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-29T12:51:57Z"
    },
    {
      "event": "commented",
      "id": 635956325,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzNTk1NjMyNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/635956325",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-29T12:53:34Z",
      "updated_at": "2020-05-29T12:53:34Z",
      "author_association": "MEMBER",
      "body": "> It looks like you removed a bunch of code, and the functional tests, in the last push? If yes, review effort is being thrown away, and perhaps the PR description needs to be updated.\r\n\r\nYes, I am writing an update at the moment",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-635956325",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "commented",
      "id": 635956487,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzNTk1NjQ4Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/635956487",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-29T12:53:57Z",
      "updated_at": "2020-05-29T12:53:57Z",
      "author_association": "MEMBER",
      "body": "> nit: \"separate\" is misspelled in the commit title of [cda20f3](https://github.com/bitcoin/bitcoin/commit/cda20f3f897ff88337756cb0c0345b41cec9014e)\r\n\r\ndone\r\n\r\n",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-635956487",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "commented",
      "id": 635960689,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzNTk2MDY4OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/635960689",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-29T13:03:42Z",
      "updated_at": "2020-05-29T13:03:42Z",
      "author_association": "MEMBER",
      "body": "Thanks for all the reviews so far! I have addressed comments and, based on feedback from the PR review club and others, split it up further to make reviews more manageable and keep discussions more focussed. This now only adds the implementation of `Muhash3072` and `TruncatedSHA512` in C++. The next in the series is https://github.com/bitcoin/bitcoin/pull/19105 and will only add the Python implementation. A PR review club on it will give another chance to dive deeper into implementation details of Muhash3072. The third PR will add let the user use `gettxoutsetinfo` with Muhash, taking feedback into account (WIP). Progress of the different pull requests is now tracked in #18000 (top of the description).",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-635960689",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "commented",
      "id": 635967249,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzNTk2NzI0OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/635967249",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-29T13:17:39Z",
      "updated_at": "2020-05-29T13:17:39Z",
      "author_association": "MEMBER",
      "body": "> * This PR essentially makes `gettxoutsetinfo` too slow to be useable in testnet and mainnet (it times out and raises after 15 minutes); for that reason, until the -coinstatsindex in #18000 is merged, the MuHash algorithm should be opt-in for rpc `gettxoutsetinfo` and not the default\r\n\r\nWill do so in the follow-up that adds the option to the RPC.\r\n\r\n> * What are your plans regarding ECMH?\r\n\r\nI don't have plans for it unless there is a reason to reconsider it as the algorithm of choice over Muhash. The branch with the ECMH implementation in secp256k1 is still there if people want to play with it.\r\n\r\n> * it looks like `TruncatedSHA512Writer` could use unit tests (perhaps just sanity checks if not viable to use test vectors, `CHashWriter` is also not tested directly but used by other unit tests: addrman, hash, sighash)\r\n\r\nI have laid out some thoughts on it [here]( https://github.com/bitcoin/bitcoin/pull/18000#issuecomment-629296641) why it is hard to add meaningful unit tests. I am still thinking about a better solution and might add an implementation of SHA512/256. There is a single sanity check at the bottom of the Muhash test at least. \r\n\r\n> * a fuzz harness would be ideal\r\n\r\nYeah, as I mention in my answer to Sjors, I would like to add it as a follow-up.\r\n\r\n> * do you plan to add tests using the just-added Python MuHash3072 implementation?\r\n\r\n Yes\r\n\r\n> * [06ae4ab](https://github.com/bitcoin/bitcoin/commit/06ae4ab04f010b24bad03ea6a3c728848cd28545) commit message s/256/512/?\r\n\r\ndone\r\n\r\n> * [04d088d](https://github.com/bitcoin/bitcoin/commit/04d088da106d8c7df0d629d21416c824d6568d18) commit message could mention the renaming of `hash_serialized_2` to `utxo_set_hash` and why it was changed (I didn't see any explanation anywhere)\r\n\r\nI was going back and forth on this, which is probably why it is not mentioned. Initially it was named `muhash`, then I thought it should be more general name that makes more sense to the user. But now my tendency is back to naming it muhash, since we want to keep `hash_serialized_2` for longer and there is no guarantee that there will not be another algo used some time in the future which would mean we would probably need to rename it again in order to avoid confusion.\r\n\r\n> * [04d088d](https://github.com/bitcoin/bitcoin/commit/04d088da106d8c7df0d629d21416c824d6568d18) and [a6cf0df](https://github.com/bitcoin/bitcoin/commit/a6cf0df104728a587283578735e7f11c5f0f2ae4) ought to be squashed to one commit; keeping them separate unnecessarily complicates reviewing -- I squashed them locally in order to see the relevant diff, as ApplyStats() is weird enough to review already\r\n\r\nYes, done in follow-up pr\r\n\r\n> * at some point you'll want to add a release note\r\n\r\nyepp\r\n",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-635967249",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "renamed",
      "id": 3399674475,
      "node_id": "MDE3OlJlbmFtZWRUaXRsZUV2ZW50MzM5OTY3NDQ3NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3399674475",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-02T22:13:15Z",
      "rename": {
        "from": "Calculate UTXO set hash using Muhash",
        "to": "Add MuHash3072 implementation"
      }
    },
    {
      "event": "commented",
      "id": 639690930,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzOTY5MDkzMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/639690930",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T18:29:14Z",
      "updated_at": "2020-06-05T18:29:14Z",
      "author_association": "MEMBER",
      "body": "I think it'd be easier to review this code if the PR didn't include the ASM implementation.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-639690930",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "commented",
      "id": 639776914,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzOTc3NjkxNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/639776914",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T20:16:26Z",
      "updated_at": "2020-06-05T20:16:26Z",
      "author_association": "MEMBER",
      "body": "> I think it'd be easier to review this code if the PR didn't include the ASM implementation.\r\n\r\nYeah, I can split that out easily as well.",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-639776914",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3413120667,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzQxMzEyMDY2Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3413120667",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T20:23:49Z"
    },
    {
      "event": "commented",
      "id": 639783978,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzOTc4Mzk3OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/639783978",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-05T20:24:34Z",
      "updated_at": "2020-06-05T20:24:34Z",
      "author_association": "MEMBER",
      "body": "ASM optimizations moved to https://github.com/bitcoin/bitcoin/pull/19181",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-639783978",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "commented",
      "id": 640169988,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0MDE2OTk4OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/640169988",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-07T07:22:21Z",
      "updated_at": "2020-06-07T07:22:21Z",
      "author_association": "CONTRIBUTOR",
      "body": "Is there a particular reason for sha512?  Although for some sizes it can be faster w/ a totally naive implementation It is a lot slower on hardware with sha-ni (and presumably somewhat slower than a parallel implementation using 8-way avx sha256).",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-640169988",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "commented",
      "id": 640244825,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0MDI0NDgyNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/640244825",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-07T16:33:11Z",
      "updated_at": "2020-06-07T18:32:45Z",
      "author_association": "MEMBER",
      "body": "@gmaxwell I assume it's SHA512 because of my original code used that. I've pointed out to @fjahr that we should benchmark if SHA256 isn't faster these days (on x86_64, I expect it to be). I hadn't thought of the possibility of parallellizing; that should shift things even further in favor of SHA256.\r\n\r\nFWIW, the original reason was that for typical UTXOs, only one SHA512 compression is enough (it'd be over 55 bytes but below 119), and at the time this was first written, a SHA256 compression on x86_64 was less than twice as fast as a SHA512 one.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-640244825",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "mentioned",
      "id": 3416792827,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQxNjc5MjgyNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3416792827",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-07T16:33:11Z"
    },
    {
      "event": "subscribed",
      "id": 3416792828,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0MTY3OTI4Mjg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3416792828",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-07T16:33:11Z"
    },
    {
      "event": "mentioned",
      "id": 3416792832,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQxNjc5MjgzMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3416792832",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-07T16:33:11Z"
    },
    {
      "event": "subscribed",
      "id": 3416792834,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0MTY3OTI4MzQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3416792834",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-07T16:33:11Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3417280898,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzQxNzI4MDg5OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3417280898",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-07T22:07:06Z"
    },
    {
      "event": "commented",
      "id": 640699423,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0MDY5OTQyMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/640699423",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-08T15:24:22Z",
      "updated_at": "2020-06-08T15:24:22Z",
      "author_association": "MEMBER",
      "body": "I finally got around to run these benchmarks and it appears that Truncated512 is still significantly faster on my hardware (`Intel(R) Core(TM) i5-6287U CPU @ 3.10GHz`). But I have seen some strange benchmarks before on this machine, so it would be great if others could run them as well. I pushed the code in a new commit, I can remove it again if it is not valuable enough to keep.\r\n\r\n`SHA256` results (100 bytes):\r\n```\r\n$ src/bench/bench_bitcoin -filter=SHA256_100b -evals=50\r\n# Benchmark, evals, iterations, total, min, max, median\r\nSHA256_100b, 50, 1000000, 38.3667, 6.93112e-07, 9.39267e-07, 7.40312e-07\r\nSHA256_100b, 50, 1000000, 38.4717, 6.93757e-07, 1.08095e-06, 7.47834e-07\r\nSHA256_100b, 50, 1000000, 40.7169, 7.07437e-07, 1.11799e-06, 8.01852e-07\r\n```\r\n\r\n`TruncatedSHA512Writer` results (100 bytes):\r\n```\r\n$ src/bench/bench_bitcoin -filter=TruncatedSHA512_100b -evals=50\r\n# Benchmark, evals, iterations, total, min, max, median\r\nTruncatedSHA512_100b, 50, 1000000, 21.6684, 4.17094e-07, 4.98784e-07, 4.30721e-07\r\nTruncatedSHA512_100b, 50, 1000000, 22.3288, 4.17564e-07, 5.26341e-07, 4.46433e-07\r\nTruncatedSHA512_100b, 50, 1000000, 21.9103, 4.17407e-07, 5.02515e-07, 4.33787e-07\r\n```",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-640699423",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "commented",
      "id": 640785035,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0MDc4NTAzNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/640785035",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-08T18:04:04Z",
      "updated_at": "2020-06-08T18:57:11Z",
      "author_association": "MEMBER",
      "body": "@fjahr It seems the benchmarking framework isn't calling the SHA256AutoDetect() function, which would enable hardware-accelerated versions of SHA256. See #19214 for a fix.\r\n\r\nWith that fixed, I get (on my SHA-NI enabled machine):\r\n\r\n```\r\n$ ./src/bench/bench_bitcoin -filter='.*100b' -evals=50\r\n# Benchmark, evals, iterations, total, min, max, median\r\nSHA256_100b, 50, 1000000, 4.73236, 9.27549e-08, 1.35582e-07, 9.35812e-08\r\nTruncatedSHA512_100b, 50, 1000000, 18.3907, 3.63877e-07, 3.88716e-07, 3.67614e-07\r\n```\r\n\r\nAnd on a machine without SHA-NI (but with AVX2):\r\n```\r\n$ ./src/bench/bench_bitcoin -filter='.*100b.*' -evals=50\r\n# Benchmark, evals, iterations, total, min, max, median\r\nSHA256_100b, 50, 1000000, 30.8421, 6.10718e-07, 6.40862e-07, 6.14576e-07\r\nTruncatedSHA512_100b, 50, 1000000, 28.2434, 5.57851e-07, 5.87092e-07, 5.62717e-07\r\n```\r\n\r\nSo it seems @gmaxwell's intuition above was right, that non-parallel SHA256 is only preferable on SHA-NI enabled machines. If we'd consider parallellizing updates (e.g. cache up 8 added/deleted UTXOs in the MuHash object itself, and then processing them all at once), SHA256 is probably a win over SHA512 on most modern x86_64 systems.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-640785035",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "mentioned",
      "id": 3421359844,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQyMTM1OTg0NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3421359844",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-08T18:04:04Z"
    },
    {
      "event": "subscribed",
      "id": 3421359850,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0MjEzNTk4NTA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3421359850",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-08T18:04:04Z"
    },
    {
      "event": "mentioned",
      "id": 3421555269,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQyMTU1NTI2OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3421555269",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-08T18:57:11Z"
    },
    {
      "event": "subscribed",
      "id": 3421555271,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0MjE1NTUyNzE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3421555271",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-08T18:57:11Z"
    },
    {
      "event": "commented",
      "id": 640875012,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0MDg3NTAxMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/640875012",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-08T20:41:23Z",
      "updated_at": "2020-06-08T20:41:23Z",
      "author_association": "MEMBER",
      "body": "@sipa Thanks for your help! Then I will change the code to use SHA256 which should simplify work for reviewers as well.",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-640875012",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "mentioned",
      "id": 3421941678,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQyMTk0MTY3OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3421941678",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-08T20:41:23Z"
    },
    {
      "event": "subscribed",
      "id": 3421941680,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0MjE5NDE2ODA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3421941680",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-08T20:41:23Z"
    },
    {
      "event": "commented",
      "id": 641201795,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0MTIwMTc5NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/641201795",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-09T10:36:44Z",
      "updated_at": "2020-06-09T10:36:44Z",
      "author_association": "MEMBER",
      "body": "Concept ACK. I'm still worried about a lack of test vectors.\r\n\r\nIt would be useful to rebase #18000 whenever individual PRs are close to merge-ready. It allows reviewers to sanity check that the end result still produces a blazing fast `gettxoutsetinfo` and that the index builds in reasonable time.\r\n\r\nI'm copying the discussion about `TruncatedSHA256Writer` unit tests here (if only to get it in the merge commit):\r\n\r\n> I am currently a bit unsure of what the right way to go is for this. A first observation is that `CHashWriter` is also untested. I think both these classes are pretty thin wrappers of the actual hash functions they use, so a test might not provide much value. But `TruncatedSHA256Writer` does a bit more, so I think it could still be valuable to have a sanity check test. I was looking for any test vectors provided for [SHA-512/256](https://eprint.iacr.org/2010/548.pdf) and while there are is no official set, at least [these](https://csrc.nist.gov/csrc/media/projects/cryptographic-standards-and-guidelines/documents/examples/sha512_256.pdf) could be enough for a sanity check. However, the problem is that for SHA-512/256 different initializers are used. We reuse SHA-512 for simplicity reasons, I guess. It's easy enough to add the other initializers. I am just not sure it worth the additional review effort. Another fact that I stumbled over, is that the serializer used here is writing the null character of a string into the hash, where I am not sure if that is a bug but it certainly makes working with test vectors hard.\r\n> \r\n> So, I am not sure if adding SHA-512/256 is worth it. And I am also unsure if a test for `TruncatedSHA256Writer` would be valuable without test vectors and given the only limited logic inside the class.\r\n\r\nAnd your comment above:\r\n\r\n> I am still thinking about a better solution and might add an implementation of SHA512/256. There is a single sanity check at the bottom of the Muhash test at least.\r\n\r\nThe performance discussion above suggests dropping 0104b7f33230f8bde09c5a2fb1d8ef4243f2ab1d entirely, which would render the above discussion moot. I'll wait with reviewing until that's settled.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-641201795",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "reviewed",
      "id": 427030918,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MDMwOTE4",
      "url": null,
      "actor": null,
      "commit_id": "d11910b38fab4e3c51be6fcd3c807e4d11ee8669",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#pullrequestreview-427030918",
      "submitted_at": "2020-06-09T11:07:41Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
    },
    {
      "event": "commented",
      "id": 641348347,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0MTM0ODM0Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/641348347",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-09T14:51:08Z",
      "updated_at": "2020-06-09T14:51:08Z",
      "author_association": "MEMBER",
      "body": "We should consider switching to the latest `ChaCha20` per RFC 8439, which may or may not produce a different `MuHash3072`. See #19225",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-641348347",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "reviewed",
      "id": 427275640,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3Mjc1NjQw",
      "url": null,
      "actor": null,
      "commit_id": "d11910b38fab4e3c51be6fcd3c807e4d11ee8669",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#pullrequestreview-427275640",
      "submitted_at": "2020-06-09T15:22:14Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
    },
    {
      "event": "commented",
      "id": 641420023,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0MTQyMDAyMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/641420023",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-09T16:35:46Z",
      "updated_at": "2020-06-09T16:35:46Z",
      "author_association": "MEMBER",
      "body": "From the PR Review club minutes: https://bitcoincore.reviews/19055.html#l-195\r\n\r\n> sipa to fjahr: if you're going to cache the hash for every block... that's actually an argument in favor of ECMH, as the minimal \"state\" to keep for ECMH is 33 bytes only, while for MuHash it's 384 bytes\r\n\r\nAnd above:\r\n\r\n> The primary difference between MuHash and ECMH is caching:\r\n> \r\n> * ECMH is more CPU time overall, but the time is mostly in computing the \"effect\" of a set of additions/deletions; applying that effect to the overall hash is extremely cheap. Furthermore, a 64-byte precomputed \"patch\" per set of additions/deletions can be created, which means a patch could be cached per-transaction, and then very cheaply applied when the transaction confirms. So it allows doing most of the work ahead of time (before the block arrives).\r\n> * MuHash is cheaper overall, but the time is mostly in applying the changes to the overall hash. This means caching isn't very useful (and also the caches would be 768 bytes, which is pretty large). If the intent is computing things in the background, or at block connection time, then this is a better (and simpler) approach.\r\n\r\nWe should probably clarify what's meant with \"caching\".\r\n\r\nWith `-coinstatsindex` we store the UTXO set hash for every height. This makes the RPC blazing fast. With MuHash it uses ~500 MB for the current chain vs 39 MB with ECMH. The latter is so small I can see us turning that on by default one day (assuming ECMH calculation adds negligible overhead to IBD). But 500 MB isn't unacceptable for an advanced user who needs `gettxoutsetinfo` (disclaimer: yours truly [needs the index](https://github.com/BitMEXResearch/forkmonitor/issues/139), but has no use for any hash).\r\n\r\nWhen you don't have the index enabled, MuHash is faster than ECMH, but both are unacceptably slow for anyone using the feature more than once. So in practice I expect anyone who needs this feature to turn on the index.\r\n\r\nAssuming this feature is mostly used with an index, then ECMH seems the better option in terms of storage.\r\n\r\nConceptionally I find MuHash very simple and we have all the ingredients here. We might as well use it for the initial `-coinstatsindex`, and add ECMH later, as well as any briljant other ideas.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-641420023",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "commented",
      "id": 641958916,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0MTk1ODkxNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/641958916",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-10T12:05:22Z",
      "updated_at": "2020-06-10T12:05:22Z",
      "author_association": "MEMBER",
      "body": "Another data point is the implementation complexity (code lines etc). If we want arithmetic incl. ASM here, this needs to be maintained whereas for ECMH the basic primitives may just be there already there in secp256k1. Not sure if that makes a large difference but it's something to keep in mind.",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-641958916",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "commented",
      "id": 641990925,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0MTk5MDkyNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/641990925",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-10T13:01:31Z",
      "updated_at": "2020-06-10T13:01:31Z",
      "author_association": "MEMBER",
      "body": "> With `-coinstatsindex` we store the UTXO set hash for every height. This makes the RPC blazing fast. With MuHash it uses ~500 MB for the current chain vs 39 MB with ECMH. The latter is so small I can see us turning that on by default one day (assuming ECMH calculation adds negligible overhead to IBD). But 500 MB isn't unacceptable for an advanced user who needs `gettxoutsetinfo` (disclaimer: yours truly [needs the index](https://github.com/BitMEXResearch/forkmonitor/issues/139), but has no use for any hash).\r\n> \r\n> When you don't have the index enabled, MuHash is faster than ECMH, but both are unacceptably slow for anyone using the feature more than once. So in practice I expect anyone who needs this feature to turn on the index.\r\n> \r\n> Assuming this feature is mostly used with an index, then ECMH seems the better option in terms of storage.\r\n\r\nThere is no real difference in storage because I am not saving the `MuHash3072` object for every block but the finalized hash. I didn't even think about storage when I made that decision tbh. Intuitively this made more sense to me because if we access historical blocks to get their stats all we would do with the MuHash is finalize it anyway. So we save a little bit of CPU every time we do it. There is currently only one `MuHash3072` object maintained at the tip and if there is a reorg I am rolling back the reorged blocks. This takes longer than accessing a stored `MuHash3072` object of course but that trade-off seemed worth it to me even without storage because we don't see too many reorgs these days and it's really not that long to roll back a block and add another.\r\n\r\nOn my current mainnet node the whole `indexes/coinstats` folder is 83 MB large. That includes all the stats, not just the hash. Was the 500 MB number a theoretical calculation or did you see this in practice? If your folder is that large I would need to investigate.\r\n\r\n",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-641990925",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "commented",
      "id": 641996489,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0MTk5NjQ4OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/641996489",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-10T13:10:52Z",
      "updated_at": "2020-06-10T13:10:52Z",
      "author_association": "MEMBER",
      "body": "My calculation was based on 768 bytes of cache, but that's off by a factor 2. A finalised MuHash3072 uses 3072 bits. So for 640,000 blocks that's 234 MB.\r\n\r\nI suppose you could store just the sha256 hash for historical blocks, only keep 3072 bits for the most recent block, and use that to move forward or roll back. In that case storage is the same as with ECMH. I can't think of a use case for the full 3072 bits. Initially I was thinking of it as a set, so you potentially query it for the presence of a UTXO, but that's not actually how it works. So perhaps there really is no point in keeping the full 3072 bits for historical blocks.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-641996489",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3436038539,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzQzNjAzODUzOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3436038539",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-11T21:36:07Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3436083540,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzQzNjA4MzU0MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3436083540",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-11T21:53:34Z"
    },
    {
      "event": "commented",
      "id": 642946245,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0Mjk0NjI0NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/642946245",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-11T21:54:33Z",
      "updated_at": "2020-06-11T21:54:33Z",
      "author_association": "MEMBER",
      "body": "Implemented the use of SHA256 and also added some clarification on the \"set\" question in the docs.",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-642946245",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "reviewed",
      "id": 429893490,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5ODkzNDkw",
      "url": null,
      "actor": null,
      "commit_id": "fe9ea729fc67e012de773975018a0f749c03790f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK 5675d28 \r\n\r\nMost of the code in `muhash.cpp` is for basic 3072 bit modular arithmetic (`Num3072`). It's nice that Python handles that out of the box in #19105, which gives some confidence the c++ code is correct. I assume @sipa didn't find a generic BigInt library that can do the job? Well, we can always split it into a library ourselves one day...",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#pullrequestreview-429893490",
      "submitted_at": "2020-06-12T18:06:42Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
    },
    {
      "event": "commented",
      "id": 643415794,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0MzQxNTc5NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643415794",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-12T18:09:36Z",
      "updated_at": "2020-06-12T18:09:36Z",
      "author_association": "MEMBER",
      "body": "@Sjors If you mean a bigint library for the C++ side, sure - my original email points out that GMP is faster than this code, but I don't want to add a new dependency for this. The Python code uses Python's native bigint support.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-643415794",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "mentioned",
      "id": 3439453498,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQzOTQ1MzQ5OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3439453498",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-12T18:09:36Z"
    },
    {
      "event": "subscribed",
      "id": 3439453499,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0Mzk0NTM0OTk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3439453499",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-12T18:09:36Z"
    },
    {
      "event": "commented",
      "id": 643419477,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0MzQxOTQ3Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643419477",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-12T18:18:59Z",
      "updated_at": "2020-06-12T18:18:59Z",
      "author_association": "MEMBER",
      "body": "> a bigint library for the C++ side\r\n\r\nThat's what I meant. I agree adding all of GMP is overkill.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-643419477",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "commented",
      "id": 643442664,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0MzQ0MjY2NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643442664",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-12T19:17:23Z",
      "updated_at": "2020-06-12T19:17:23Z",
      "author_association": "MEMBER",
      "body": "There's some discussion about tradeoffs and here's another small point to consider. MuHash3072 introduces cryptographic assumptions that are not used in Bitcoin yet. This is unusual but not a big thing given these are very mild assumptions (i.e., either finite field DL is hard enough *or* Wagner's algorithm is the best method to find collisions here), and most importantly, this is currently just intended to be used for sanity checks. Still, everything else equal, EC-MuHash would not introduce new assumptions. If this functionality will ever be used in relation with chain validation, one should keep this in mind.",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-643442664",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "commented",
      "id": 643552222,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0MzU1MjIyMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643552222",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-13T01:57:33Z",
      "updated_at": "2020-06-13T01:57:33Z",
      "author_association": "MEMBER",
      "body": "@gmaxwell Solving the generalized birthday problem is provably as hard as the DL problem in the same group (but it may be much harder as well), I think. So under the assumption that DL is hard in secp256k1, then the generalized birthday problem is hard over it, and that implies collision resistance for the ECMH hash based on it.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-643552222",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "mentioned",
      "id": 3440352028,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ0MDM1MjAyOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3440352028",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-13T01:57:33Z"
    },
    {
      "event": "subscribed",
      "id": 3440352029,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NDAzNTIwMjk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3440352029",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-13T01:57:33Z"
    },
    {
      "event": "commented",
      "id": 643598704,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0MzU5ODcwNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643598704",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-13T09:39:06Z",
      "updated_at": "2020-06-13T09:39:06Z",
      "author_association": "MEMBER",
      "body": "Sorry, some theory crypto stuff ahead...\r\n\r\n> I find the claim that the EC alternative does not introduce a new cryptographic assumption implausible: You can't break a discrete log by finding a number of random points that you do not know the discrete log of that add to a selected point.\r\n\r\nOh, in the (programmable) random oracle model, you can! It's in fact straight forward and it's buried in the proof of Lemma 3.1 in the [MuHash paper](https://cseweb.ucsd.edu/~mihir/papers/inchash.pdf). I missed that this Lemma relies on programming the random oracle when I wrote https://github.com/bitcoin/bitcoin/pull/19055#discussion_r438026185. It's not immediately obvious because they split the proof in Lemma 3.1 (reducing collisions to balance problem) and Lemma B.2 (reducing balance problem to DL). Say you're given an algorithm C that finds collisions in MuHash, and it needs to access the prehashing function H as a random oracle. Then when C asks you for H(q_i) for some query q_i, you can draw a random r_i, set a_i = r_i*G, and reply with H(q_i) = a_i. Then you know the DL of all the a_i, and you can continue from that.\r\n\r\nHowever this requires modeling the prehashing function as a programmable random oracle. In our case, this function is `ChaCha20-3072-bits(key=SHA256(.))`. This means that we should really have a closer look at this function. I still believe that this is as good as a random oracle if we assume SHA256 is a random oracle and ChaCha20 is an ideal cipher, and this may very well be clear to someone who has worked on random oracle indifferentiability and the ideal cipher model but I haven't, so I'd need to do some reading or ask people who are more familiar with this stuff. \r\n",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-643598704",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3441563182,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzQ0MTU2MzE4Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3441563182",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-14T10:17:12Z"
    },
    {
      "event": "commented",
      "id": 643746561,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0Mzc0NjU2MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643746561",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-14T10:18:02Z",
      "updated_at": "2020-06-14T10:18:02Z",
      "author_association": "MEMBER",
      "body": "Addressed @Sjors comments.",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-643746561",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "mentioned",
      "id": 3441563677,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ0MTU2MzY3Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3441563677",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-14T10:18:02Z"
    },
    {
      "event": "subscribed",
      "id": 3441563678,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NDE1NjM2Nzg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3441563678",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-14T10:18:02Z"
    },
    {
      "event": "reviewed",
      "id": 430260841,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwMjYwODQx",
      "url": null,
      "actor": null,
      "commit_id": "fe9ea729fc67e012de773975018a0f749c03790f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#pullrequestreview-430260841",
      "submitted_at": "2020-06-14T23:59:35Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
    },
    {
      "event": "commented",
      "id": 644079086,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NDA3OTA4Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/644079086",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-15T11:45:28Z",
      "updated_at": "2020-06-15T11:45:28Z",
      "author_association": "MEMBER",
      "body": "> However this requires modeling the prehashing function as a programmable random oracle. In our case, this function is `ChaCha20-3072-bits(key=SHA256(.))`. This means that we should really have a closer look at this function. I still believe that this is as good as a random oracle if we assume SHA256 is a random oracle and ChaCha20 is an ideal cipher, and this may very well be clear to someone who has worked on random oracle indifferentiability and the ideal cipher model but I haven't, so I'd need to do some reading or ask people who are more familiar with this stuff.\r\n\r\nOkay, this is indeed pretty direct from the ideal cipher model, which is not less a stretch than the random oracle model in the end. In the ideal cipher model, the cipher is modeled as a function E(k,x), which is a perfectly random permutation for every key k, and by giving the attacker *oracle access* to this function (and it's inverse). So it's very similar to the random oracle model for some hash function H and you can play the same programming tricks. That is, if you get a query H(q_i), you can use a random H(q_i) and program E(H(q_i), 0)|| ... ||E(H(x), 5) = r_i * G. (Note here that 3072/512 = 6, where 512 is the bitsize of the ChaCha permutation.) And if you get a query E(k, x) / E^-1(k, x) for some key k* you've never seen before, just give a random answer, the attacker will find a preimage of H that maps to k* only with negligible probability.\r\n\r\n__tl;dr (or if I lost you)__:\r\nIf you believe in provable security of cryptographic constructions, and we compare to the common assumptions we already need for working consensus, then\r\n - ECMH (= MuHash on secp256k1) needs the additional assumption that ChaCha20 is a good PRG.\r\n - MuHash3072 needs the additional assumption that ChaCha20 is a good PRG *and* that either i) the finite field discrete logarithm is hard in 3072-bit fields or ii) Wagner's algorithm is the best method to find collisions here.\r\n\r\nAs I all these assumptions are fine. However, there's indeed a difference, so \r\n\r\n> If this functionality will ever be used in relation with chain validation, one should keep this in mind. \r\n",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-644079086",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3444717631,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzQ0NDcxNzYzMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3444717631",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-15T14:35:23Z"
    },
    {
      "event": "commented",
      "id": 644174444,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NDE3NDQ0NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/644174444",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-15T14:36:42Z",
      "updated_at": "2020-06-15T14:36:42Z",
      "author_association": "MEMBER",
      "body": "Addressed @promag 's review comments.",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-644174444",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "mentioned",
      "id": 3444723685,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzQ0NDcyMzY4NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3444723685",
      "actor": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-15T14:36:43Z"
    },
    {
      "event": "subscribed",
      "id": 3444723691,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM0NDQ3MjM2OTE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3444723691",
      "actor": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-15T14:36:43Z"
    },
    {
      "event": "commented",
      "id": 646004470,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NjAwNDQ3MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/646004470",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-18T13:06:20Z",
      "updated_at": "2020-06-18T13:12:10Z",
      "author_association": "MEMBER",
      "body": ">  That's what I meant. I agree adding all of GMP is overkill.\r\n\r\nAlso mind that GMP is not license-compatible with bitcoin (it's LGPL). So, that's another stumbling block besides our desire to limit third-party dependencies.\r\n\r\n> As I all these assumptions are fine. However, there's indeed a difference, so\r\n\r\nI have a hard time reading how serious your concerns are. So to be clear: in your opinion, this is not a blocker for merging this?",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-646004470",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "reviewed",
      "id": 433263304,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzMjYzMzA0",
      "url": null,
      "actor": null,
      "commit_id": "3585297e5e7578150683b809dd7b46bcaf63351f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#pullrequestreview-433263304",
      "submitted_at": "2020-06-18T13:07:41Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
    },
    {
      "event": "commented",
      "id": 646616902,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NjYxNjkwMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/646616902",
      "actor": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-19T12:47:39Z",
      "updated_at": "2020-06-19T12:47:39Z",
      "author_association": "MEMBER",
      "body": "> I have a hard time reading how serious your concerns are. So to be clear: in your opinion, this is not a blocker for merging this?\r\n\r\nSorry if my posts are confusing. I don't have serious concerns at all and no, I don't believe this is a blocker. \r\n\r\nLet me try to explain. After I looked at the details, I believe that both MuHash3072 and ECMH (= MuHash on secp256k1) are very solid choices and we do not need to worry about either. What I was pointing out is that ECMH is a slightly more conservative choice if you look at the cryptographic assumptions because ECMH is better aligned with the assumptions that we already make in Bitcoin. But this is just a very small point in all the tradeoffs discussed between MuHash3072 and ECMH, and it's perfectly reasonable that we prefer performance over being super conservative here, in  particular because MuHash is intended for `gettxoutsetinfo`, which serves merely as a sanity check. I believe if MuHash was planned to be used in the consensus implementation, then we might come to the conclusion that we prefer being a little more conservative over getting a little bit more performance out of it. But as far as I understand, there are currently no plans to use MuHash in consensus, so this is not relevant currently.",
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-646616902",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "commented",
      "id": 647519700,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY0NzUxOTcwMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/647519700",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-06-22T13:28:51Z",
      "updated_at": "2020-06-22T13:28:51Z",
      "author_association": "CONTRIBUTOR",
      "body": "Could rebase on top of #19286 and add fuzzing of the MuHash3072 class to the `src/test/fuzz/crypto.cpp` fuzzing harness in order to demonstrate (some level of) code robustness (more specifically: absence of warnings from ASan, MSan and UBSan when processing malformed/unexpected inputs)? :)",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-647519700",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3504233262,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzUwNDIzMzI2Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3504233262",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-01T21:01:41Z"
    },
    {
      "event": "commented",
      "id": 652646724,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY1MjY0NjcyNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/652646724",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-01T21:06:21Z",
      "updated_at": "2020-07-01T21:06:21Z",
      "author_association": "MEMBER",
      "body": "> Could rebase on top of #19286 and add fuzzing of the MuHash3072 class to the `src/test/fuzz/crypto.cpp` fuzzing harness in order to demonstrate (some level of) code robustness (more specifically: absence of warnings from ASan, MSan and UBSan when processing malformed/unexpected inputs)? :)\r\n\r\nDone. I am still learning more about fuzzing so looking forward to your feedback. :)",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-652646724",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "reviewed",
      "id": 441214410,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMjE0NDEw",
      "url": null,
      "actor": null,
      "commit_id": "62e842c15eeb7af5d195200d6a605113f16a7e39",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Thanks a lot for adding a fuzzer! Great!\r\n\r\nFuzzing harness specific review follows :)",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#pullrequestreview-441214410",
      "submitted_at": "2020-07-01T21:53:03Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
    },
    {
      "event": "commented",
      "id": 654179346,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY1NDE3OTM0Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/654179346",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-06T11:34:49Z",
      "updated_at": "2020-07-06T11:34:49Z",
      "author_association": "MEMBER",
      "body": "re-ACK 62e842c15eeb7af5d195200d6a605113f16a7e39 modulo \"not interfere with the other fuzzers by changing the data size\". Complete code coverage can wait for a followup (it already covers the basics).",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-654179346",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3534181916,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzUzNDE4MTkxNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3534181916",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-10T14:40:26Z"
    },
    {
      "event": "commented",
      "id": 656713016,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY1NjcxMzAxNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/656713016",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-10T14:43:49Z",
      "updated_at": "2020-07-10T14:43:49Z",
      "author_association": "MEMBER",
      "body": "Addressed @practicalswift 's feedback and turned the macros into inline functions.",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-656713016",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "mentioned",
      "id": 3534196021,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzUzNDE5NjAyMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3534196021",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-10T14:43:49Z"
    },
    {
      "event": "subscribed",
      "id": 3534196025,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM1MzQxOTYwMjU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3534196025",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-10T14:43:49Z"
    },
    {
      "event": "commented",
      "id": 656837402,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY1NjgzNzQwMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/656837402",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-10T19:03:47Z",
      "updated_at": "2020-07-10T19:03:47Z",
      "author_association": "CONTRIBUTOR",
      "body": "@fjahr Thanks for addressing the fuzzing feedback. The fuzzing changes look good (`src/test/fuzz/crypto.cpp`). (I haven't reviewed the rest yet.)",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-656837402",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "mentioned",
      "id": 3535075839,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzUzNTA3NTgzOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3535075839",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-10T19:03:48Z"
    },
    {
      "event": "subscribed",
      "id": 3535075843,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM1MzUwNzU4NDM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3535075843",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-10T19:03:48Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3536604622,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzUzNjYwNDYyMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3536604622",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-11T21:14:32Z"
    },
    {
      "event": "commented",
      "id": 657132203,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY1NzEzMjIwMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/657132203",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-11T21:23:17Z",
      "updated_at": "2020-07-11T21:23:17Z",
      "author_association": "MEMBER",
      "body": "Replaced the first commit which added `SHA256Writer` with commit 284ca85e3fc4d30f60e7fbb903303b4dc935d82c from #17977 (Taproot) which provides the same functionality in fewer LOC. It uses `CHashWriter` instead of creating a new class, which is nice, and if this gets merged before #17977 there is one less commit to review.",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-657132203",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "reviewed",
      "id": 449827562,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5ODI3NTYy",
      "url": null,
      "actor": null,
      "commit_id": "00a578e9bc5a2b691d529780824c90333013f1d6",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "bb3098bbaf1305aa9091ee5e3cd92f2973e04c68 looks good, but the new hash writer commit does raise a question. ",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#pullrequestreview-449827562",
      "submitted_at": "2020-07-16T13:10:36Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
    },
    {
      "event": "commented",
      "id": 663471922,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2MzQ3MTkyMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/663471922",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-24T10:23:44Z",
      "updated_at": "2020-07-24T10:23:44Z",
      "author_association": "MEMBER",
      "body": "Let's try to get #18071 in first (for the first commit)",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-663471922",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "commented",
      "id": 666348096,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2NjM0ODA5Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/666348096",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-30T12:57:33Z",
      "updated_at": "2020-07-30T13:03:34Z",
      "author_association": "MEMBER",
      "body": "Code review ACK bb3098bbaf1305aa9091ee5e3cd92f2973e04c68\r\nI have reviewed everything but the MuHash implementation in detail, and looked broadly at the MuHash code but could not follow all the specifics.\r\n\r\n> Let's try to get #18071 in first (for the first commit)\r\n\r\nMind that there doesn't seem to be agreement on that PR yet.",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-666348096",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "reviewed",
      "id": 458393720,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4MzkzNzIw",
      "url": null,
      "actor": null,
      "commit_id": "bb3098bbaf1305aa9091ee5e3cd92f2973e04c68",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#pullrequestreview-458393720",
      "submitted_at": "2020-07-30T13:21:42Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
    },
    {
      "event": "labeled",
      "id": 3604148058,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM2MDQxNDgwNTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3604148058",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-30T14:29:21Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3638786191,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzYzODc4NjE5MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3638786191",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-10T13:32:49Z"
    },
    {
      "event": "unlabeled",
      "id": 3639239845,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MzYzOTIzOTg0NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3639239845",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-10T15:13:44Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 677692503,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3NzY5MjUwMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/677692503",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-20T14:14:53Z",
      "updated_at": "2020-08-20T14:14:53Z",
      "author_association": "MEMBER",
      "body": "> Let's try to get #18071 in first (for the first commit)\r\n\r\nIt's closed now in favor of #19601.\r\n",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-677692503",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3682911463,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzY4MjkxMTQ2Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3682911463",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-23T15:29:07Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3698810932,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzY5ODgxMDkzMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3698810932",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-27T09:55:00Z"
    },
    {
      "event": "commented",
      "id": 681848903,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY4MTg0ODkwMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/681848903",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-27T09:55:35Z",
      "updated_at": "2020-08-27T09:55:35Z",
      "author_association": "MEMBER",
      "body": "Rebased since #19601 was merged.",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-681848903",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "commented",
      "id": 681989062,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY4MTk4OTA2Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/681989062",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-27T14:35:33Z",
      "updated_at": "2020-08-27T14:38:10Z",
      "author_association": "MEMBER",
      "body": "Code review re-ACK 24317aa5a1bd91b90e5971016e842b58f0b4ba62\r\nThanks for adding a comment to the Inverse function.",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-681989062",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "labeled",
      "id": 3752085051,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM3NTIwODUwNTE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3752085051",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-10T16:42:39Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3755680387,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzc1NTY4MDM4Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3755680387",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-11T11:15:11Z"
    },
    {
      "event": "commented",
      "id": 691034042,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY5MTAzNDA0Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/691034042",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-11T11:15:38Z",
      "updated_at": "2020-09-11T11:15:38Z",
      "author_association": "MEMBER",
      "body": "Rebased",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-691034042",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "unlabeled",
      "id": 3755762729,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50Mzc1NTc2MjcyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3755762729",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-11T11:37:54Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 489223281,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5MjIzMjgx",
      "url": null,
      "actor": null,
      "commit_id": "4cb77c70d3d43ebe004dc130d51ab0c75913c3f5",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Haven't checked the bignum math or that the muhash impl matches the paper.",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#pullrequestreview-489223281",
      "submitted_at": "2020-09-16T03:20:08Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
    },
    {
      "event": "reviewed",
      "id": 489274591,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5Mjc0NTkx",
      "url": null,
      "actor": null,
      "commit_id": "c540f8edc143e856474a27626cc0bd08018ed734",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Didn't fully dig into Multiply() and Square(), but they seem reasonable. The referenced paper for Inverse() seems to be behind a paywall, and there's more exponentiation than I can follow unguided, so no review of that, but the fact the test cases pass seems promising at least.\r\n\r\nI think there's a bug in both IsOverflow and serialization (see above); everything else is nits. Would be nice to have more test vectors checking that the c++ and python code end up with the same results. ACK otherwise.",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#pullrequestreview-489274591",
      "submitted_at": "2020-09-16T07:14:14Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
    },
    {
      "event": "labeled",
      "id": 3773650733,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM3NzM2NTA3MzM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3773650733",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-16T14:58:19Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3790791269,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzc5MDc5MTI2OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3790791269",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-21T22:17:07Z"
    },
    {
      "event": "unlabeled",
      "id": 3790799774,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50Mzc5MDc5OTc3NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3790799774",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-21T22:20:41Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 696413868,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY5NjQxMzg2OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/696413868",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-21T22:32:22Z",
      "updated_at": "2020-09-21T22:32:22Z",
      "author_association": "MEMBER",
      "body": "Thanks a lot for the review @ajtowns . I hope I have addressed all of your feedback.\r\n\r\n> Would be nice to have more test vectors checking that the c++ and python code end up with the same results. ACK otherwise.\r\n\r\nThere are more tests like this coming in the follow-up #19145 . Unless you disagree I would prefer to keep the scope of this PR were it is :)",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-696413868",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "mentioned",
      "id": 3790827189,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mzc5MDgyNzE4OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3790827189",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-21T22:32:22Z"
    },
    {
      "event": "subscribed",
      "id": 3790827193,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM3OTA4MjcxOTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3790827193",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-21T22:32:22Z"
    },
    {
      "event": "reviewed",
      "id": 493589996,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzNTg5OTk2",
      "url": null,
      "actor": null,
      "commit_id": "ef53ca76cc616cd359969533a75c3dab388ec38d",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Looks good, fuzzer tests need fixing though.",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#pullrequestreview-493589996",
      "submitted_at": "2020-09-22T16:20:06Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
    },
    {
      "event": "reviewed",
      "id": 493970192,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzOTcwMTky",
      "url": null,
      "actor": null,
      "commit_id": "ef53ca76cc616cd359969533a75c3dab388ec38d",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#pullrequestreview-493970192",
      "submitted_at": "2020-09-23T01:34:40Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3835982222,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzgzNTk4MjIyMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3835982222",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-03T00:02:08Z"
    },
    {
      "event": "commented",
      "id": 703006924,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwMzAwNjkyNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/703006924",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-03T00:02:39Z",
      "updated_at": "2020-10-03T00:02:39Z",
      "author_association": "MEMBER",
      "body": "Pushed fuzz test fixes, thanks @ajtowns !",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-703006924",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "mentioned",
      "id": 3835982953,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzgzNTk4Mjk1Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3835982953",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-03T00:02:39Z"
    },
    {
      "event": "subscribed",
      "id": 3835982957,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM4MzU5ODI5NTc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3835982957",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-03T00:02:39Z"
    },
    {
      "event": "unlabeled",
      "id": 3887157614,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50Mzg4NzE1NzYxNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3887157614",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-16T16:11:54Z",
      "label": {
        "name": "Validation",
        "color": "6060aa"
      }
    },
    {
      "event": "reviewed",
      "id": 511150383,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExMTUwMzgz",
      "url": null,
      "actor": null,
      "commit_id": "e19e50013478c6b7066aa2c9f7e0d0ee7219e837",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#pullrequestreview-511150383",
      "submitted_at": "2020-10-18T18:27:23Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3890770688,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzg5MDc3MDY4OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3890770688",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-18T22:41:01Z"
    },
    {
      "event": "commented",
      "id": 711435198,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcxMTQzNTE5OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/711435198",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-18T22:45:47Z",
      "updated_at": "2020-10-18T22:45:47Z",
      "author_association": "MEMBER",
      "body": "Thanks for the feedback @jnewbery . I implemented most comments while there are still some I need to spend some more time on (including https://github.com/bitcoin/bitcoin/pull/19055#discussion_r507186328 which I can not comment on for some reason).",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-711435198",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "mentioned",
      "id": 3890774073,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mzg5MDc3NDA3Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3890774073",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-18T22:45:47Z"
    },
    {
      "event": "subscribed",
      "id": 3890774075,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM4OTA3NzQwNzU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3890774075",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-18T22:45:47Z"
    },
    {
      "event": "reviewed",
      "id": 511561744,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExNTYxNzQ0",
      "url": null,
      "actor": null,
      "commit_id": "b03e923c534a954edfdd9ef4ec9a68e5dd08d827",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#pullrequestreview-511561744",
      "submitted_at": "2020-10-19T09:42:59Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
    },
    {
      "event": "reviewed",
      "id": 511870771,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExODcwNzcx",
      "url": null,
      "actor": null,
      "commit_id": "b03e923c534a954edfdd9ef4ec9a68e5dd08d827",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#pullrequestreview-511870771",
      "submitted_at": "2020-10-19T15:10:51Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3895678645,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzg5NTY3ODY0NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3895678645",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-19T21:55:05Z"
    },
    {
      "event": "reviewed",
      "id": 512398415,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMzk4NDE1",
      "url": null,
      "actor": null,
      "commit_id": "b29a0fde8784b7574a987dfb037a988b442bf92b",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Many of the helper functions (`mulnadd3`, `muln2`, `muladd3`, `muldbladd3` add `add2`) can overflow. I think in (very unlikely) scenarios, that'd cause the MuHash addition and subtraction to be incorrect.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#pullrequestreview-512398415",
      "submitted_at": "2020-10-20T07:57:42Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3900646208,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzkwMDY0NjIwOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3900646208",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-20T20:25:56Z"
    },
    {
      "event": "reviewed",
      "id": 513482761,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzNDgyNzYx",
      "url": null,
      "actor": null,
      "commit_id": "96a8d80f7ba43fd608984543d6bc6905f696529f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#pullrequestreview-513482761",
      "submitted_at": "2020-10-21T10:23:26Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
    },
    {
      "event": "commented",
      "id": 713682094,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcxMzY4MjA5NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/713682094",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-21T16:01:33Z",
      "updated_at": "2020-10-21T16:01:33Z",
      "author_association": "MEMBER",
      "body": "Did a fair amount of testing and review of this on May 27 and plan to re-review after the 0.21 branch-off. ",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-713682094",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "reviewed",
      "id": 514102355,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0MTAyMzU1",
      "url": null,
      "actor": null,
      "commit_id": "96a8d80f7ba43fd608984543d6bc6905f696529f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#pullrequestreview-514102355",
      "submitted_at": "2020-10-22T07:19:50Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
    },
    {
      "event": "reviewed",
      "id": 514823186,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0ODIzMTg2",
      "url": null,
      "actor": null,
      "commit_id": "96a8d80f7ba43fd608984543d6bc6905f696529f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#pullrequestreview-514823186",
      "submitted_at": "2020-10-22T14:58:12Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
    },
    {
      "event": "unsubscribed",
      "id": 3912734633,
      "node_id": "MDE3OlVuc3Vic2NyaWJlZEV2ZW50MzkxMjczNDYzMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3912734633",
      "actor": {
        "login": "ByeongjaeKang",
        "id": 50051883,
        "node_id": "MDQ6VXNlcjUwMDUxODgz",
        "avatar_url": "https://avatars.githubusercontent.com/u/50051883?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ByeongjaeKang",
        "html_url": "https://github.com/ByeongjaeKang",
        "followers_url": "https://api.github.com/users/ByeongjaeKang/followers",
        "following_url": "https://api.github.com/users/ByeongjaeKang/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ByeongjaeKang/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ByeongjaeKang/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ByeongjaeKang/subscriptions",
        "organizations_url": "https://api.github.com/users/ByeongjaeKang/orgs",
        "repos_url": "https://api.github.com/users/ByeongjaeKang/repos",
        "events_url": "https://api.github.com/users/ByeongjaeKang/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ByeongjaeKang/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-23T08:30:22Z"
    },
    {
      "event": "subscribed",
      "id": 3912734811,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM5MTI3MzQ4MTE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3912734811",
      "actor": {
        "login": "ByeongjaeKang",
        "id": 50051883,
        "node_id": "MDQ6VXNlcjUwMDUxODgz",
        "avatar_url": "https://avatars.githubusercontent.com/u/50051883?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ByeongjaeKang",
        "html_url": "https://github.com/ByeongjaeKang",
        "followers_url": "https://api.github.com/users/ByeongjaeKang/followers",
        "following_url": "https://api.github.com/users/ByeongjaeKang/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ByeongjaeKang/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ByeongjaeKang/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ByeongjaeKang/subscriptions",
        "organizations_url": "https://api.github.com/users/ByeongjaeKang/orgs",
        "repos_url": "https://api.github.com/users/ByeongjaeKang/repos",
        "events_url": "https://api.github.com/users/ByeongjaeKang/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ByeongjaeKang/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-23T08:30:25Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3971239405,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzk3MTIzOTQwNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3971239405",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-08T22:23:50Z"
    },
    {
      "event": "commented",
      "id": 723677038,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcyMzY3NzAzOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/723677038",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-08T22:44:55Z",
      "updated_at": "2020-11-08T22:44:55Z",
      "author_association": "MEMBER",
      "body": "Pushed a fair amount of fixes and refactoring but still working on some of the overflow questions and another fuzz test.",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-723677038",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "commented",
      "id": 730286098,
      "node_id": "MDEyOklzc3VlQ29tbWVudDczMDI4NjA5OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/730286098",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-19T10:41:44Z",
      "updated_at": "2020-11-19T10:41:44Z",
      "author_association": "MEMBER",
      "body": "I'm going to move this out of high priority while you're working on the branch. It can go back in once it's ready for review again.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-730286098",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "removed_from_project",
      "id": 4015151036,
      "node_id": "MDIzOlJlbW92ZWRGcm9tUHJvamVjdEV2ZW50NDAxNTE1MTAzNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4015151036",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-19T10:41:58Z",
      "project_card": {
        "id": 39100907,
        "url": "https://api.github.com/projects/columns/cards/39100907",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4039958529,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDAzOTk1ODUyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4039958529",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-25T21:48:00Z"
    },
    {
      "event": "commented",
      "id": 733962568,
      "node_id": "MDEyOklzc3VlQ29tbWVudDczMzk2MjU2OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/733962568",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-25T21:53:32Z",
      "updated_at": "2020-11-25T21:54:18Z",
      "author_association": "MEMBER",
      "body": "This is finally ready for review again. I have added a fuzz test for consistency testing which I am running currently.",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-733962568",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "added_to_project",
      "id": 4043656585,
      "node_id": "MDE5OkFkZGVkVG9Qcm9qZWN0RXZlbnQ0MDQzNjU2NTg1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4043656585",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-26T19:05:45Z",
      "project_card": {
        "id": 50142127,
        "url": "https://api.github.com/projects/columns/cards/50142127",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "labeled",
      "id": 4116091283,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQxMTYwOTEyODM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4116091283",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-15T18:41:58Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4122219635,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDEyMjIxOTYzNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4122219635",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-16T22:54:15Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4122223691,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDEyMjIyMzY5MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4122223691",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-16T22:55:22Z"
    },
    {
      "event": "commented",
      "id": 747099674,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc0NzA5OTY3NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/747099674",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-16T23:20:23Z",
      "updated_at": "2020-12-16T23:20:23Z",
      "author_association": "MEMBER",
      "body": "Rebased and pushed some new comment I seem to have forgotten last time. ",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-747099674",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "unlabeled",
      "id": 4122577582,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDEyMjU3NzU4Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4122577582",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-17T00:27:46Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 554601511,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0NjAxNTEx",
      "url": null,
      "actor": null,
      "commit_id": "515ee0d0ca91bfdf6a9cd844824e747291efabe9",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Partial review as of 0c8e885. Don't forgot to update the Python tests so it matches again.\r\n\r\nPerhaps `Num3072` can have `SERIALIZE_METHODS` (and a test), so that `MuHash3072` can serialise its numerator and denominator without poking into `Num3072` internals.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#pullrequestreview-554601511",
      "submitted_at": "2020-12-17T15:51:14Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
    },
    {
      "event": "commented",
      "id": 747766454,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc0Nzc2NjQ1NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/747766454",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-17T23:21:07Z",
      "updated_at": "2020-12-17T23:21:07Z",
      "author_association": "MEMBER",
      "body": "@Sjors Thanks, I updated the Python test, will address your other comments soon. ",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-747766454",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "mentioned",
      "id": 4127460220,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDEyNzQ2MDIyMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4127460220",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-17T23:21:07Z"
    },
    {
      "event": "subscribed",
      "id": 4127460225,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQxMjc0NjAyMjU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4127460225",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-17T23:21:07Z"
    },
    {
      "event": "reviewed",
      "id": 555834240,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1ODM0MjQw",
      "url": null,
      "actor": null,
      "commit_id": "515ee0d0ca91bfdf6a9cd844824e747291efabe9",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#pullrequestreview-555834240",
      "submitted_at": "2020-12-18T21:49:30Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ODlmOTU4NjYyYTJkY2FhY2RiOWE2NmYxMDg4Yzc0ODI4YTM5NTc3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/589f958662a2dcaacdb9a66f1088c74828a39577",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/589f958662a2dcaacdb9a66f1088c74828a39577",
      "tree": {
        "sha": "46743436a65e82399da44e2b6c51911bfb954011",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/46743436a65e82399da44e2b6c51911bfb954011"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 46743436a65e82399da44e2b6c51911bfb954011\nparent 1811e488d53b82825e3523f6f0cdb97f635f03a7\nauthor Fabian Jahr <fjahr@protonmail.com> 1608498495 +0100\ncommitter Fabian Jahr <fjahr@protonmail.com> 1608498495 +0100\n\nbuild: Check for 128 bit integer support\n\nUsed in MuHash3072 implementation.\n\nCo-authored-by: Pieter Wuille <pieter.wuille@gmail.com>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAl/fvawVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNsucQAJVLIn6KJK9mgt6blB1J3dzGFK+C\nz/xjYBzxksGZY62sxN8gPXQLeceZWicjDx8ZZute9NTXeObAZDonzhnsXXCWGYS1\ni2w2i/aFGvbSxtf1glFuuKkvrOIcxIGk/Xw1yVp2VucIcCGiBN67Z41J2MGaS/84\nQ5w8WZkI1F/D5EDjevPQb95POHNOYlAZnk+L54UYrTPGlSc36X6Gb99aZH7b9PeO\n+ZTDBKddwFohZnlSE1fTNm8VTVtnZfTlGmRIIlIMMwC+/rvt6YaVJpyf5Zlzucsc\nPt7iRMbKjgKRGPqrAinExd086dvKCYolBS/eRCYzI7vPv7CfMoFQ0vv/O5LSqTfd\nK2Rh/PHCJOgTYuqfnwVR3bHknMgJctuO+RpNz+efm5qPK3TbZ1dTt0QPBXuY/sHV\n0DKXNU0K87czvinLWxhGXhOkp1JaE35hHMFqGKmcjihLvs5J7Z/MTYPx8TYLGMgy\nCBII2EzdyxCOBxAylxMXLB5/FYjWkR0N2y7XJhz7aReF1gIlay/UKF+/XGEsWccJ\nMraFjWWNY411jj1cGz3vkUT4UqtPbSaUbFfx/Z8/pHNYy4zoCf0UuHYTpcUYLCdz\nfUUj+0HNkTX323Vol5LFrFrQhwJvxSZujisKQRevr2hNymGFZtt7qwLI5Ae0+k/4\n3ngKuX1mOpXw/Pi+\n=jy9j\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1811e488d53b82825e3523f6f0cdb97f635f03a7",
          "sha": "1811e488d53b82825e3523f6f0cdb97f635f03a7",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1811e488d53b82825e3523f6f0cdb97f635f03a7"
        }
      ],
      "message": "build: Check for 128 bit integer support\n\nUsed in MuHash3072 implementation.\n\nCo-authored-by: Pieter Wuille <pieter.wuille@gmail.com>",
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-12-20T21:08:15Z"
      },
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-12-20T21:08:15Z"
      },
      "sha": "589f958662a2dcaacdb9a66f1088c74828a39577"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYjRkMjkwYmY1YjBhNGQxNTZjNTIzNDMxYmY4OWFhYTlmZmU5MmU1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0b4d290bf5b0a4d156c523431bf89aaa9ffe92e5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/0b4d290bf5b0a4d156c523431bf89aaa9ffe92e5",
      "tree": {
        "sha": "676d832b0e7b0319c3bebe818b1a87eab87fd38a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/676d832b0e7b0319c3bebe818b1a87eab87fd38a"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 676d832b0e7b0319c3bebe818b1a87eab87fd38a\nparent 589f958662a2dcaacdb9a66f1088c74828a39577\nauthor Fabian Jahr <fjahr@protonmail.com> 1608499427 +0100\ncommitter Fabian Jahr <fjahr@protonmail.com> 1608503278 +0100\n\ncrypto: Add Num3072 implementation\n\nNum3072 is a specialized bignum implementation used in MuHash3072.\n\nCo-authored-by: Pieter Wuille <pieter.wuille@gmail.com>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAl/fz/AVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jN96wQAKFRQnhRUgCN0F32kSyaTBC8afSX\n78HsG8uJNpzlI3va4Mgx1TtiAzewgSF0DEVdudwLTVzk6N62R/dkGyH7jA4ERVqX\n8YI9KsuMVylg4qZRxFs5yPaSA6NSgOpMW1yUsjZkjd+mtD/jVlv4AKl2tAwUBHNw\nrnUWdk2NzRzhiRF8Enku74wdID5ta4mTUka2ytrQQHksTa+jMkWsgF30CIEEqHMO\nNJ9QNpUH8618DC0ntF9WP/5cKwt9gFmea2JZQ2SbPlD4i0cD6+cR4/I+dGfPyC+Z\nrvLAwnV4zP6EI2n3sYZBB3H1Wh+HROf91hwgaSI8bheSXRTJKZlPj02FaRRB4HMR\nmgqOHJfbccBXO6oWNV1gKtBkfxr9MVFUpdploGTpY7ObvyFvVp+nvaP2jESrX2J5\nOgaRuiDcUXL2oOR3vY51wZRuqF33x8EmIhohaeDYeyYwjIB3mRUHTjRSMtY7E6Vk\nCH4XSl862YdV6ak1GaRqFGTHKODWIr7of++J7/Fk7zPhq2kv7cbbkC4stI9nTM0V\nhbpJ/fupabqAr4lSQoxMtIE6Oho6g1Ke8prruUO2I+ZesiHafIS2q7U419byFqs3\nBByeSGWQY0/cJ0tvy0KFzcpHmiempR4zMbtAfWVWJKfIZnzzwLWRG6ntp7wm6e9p\nBE9PZRm+MQyOM7sI\n=ZST/\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/589f958662a2dcaacdb9a66f1088c74828a39577",
          "sha": "589f958662a2dcaacdb9a66f1088c74828a39577",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/589f958662a2dcaacdb9a66f1088c74828a39577"
        }
      ],
      "message": "crypto: Add Num3072 implementation\n\nNum3072 is a specialized bignum implementation used in MuHash3072.\n\nCo-authored-by: Pieter Wuille <pieter.wuille@gmail.com>",
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-12-20T22:27:58Z"
      },
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-12-20T21:23:47Z"
      },
      "sha": "0b4d290bf5b0a4d156c523431bf89aaa9ffe92e5"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZGM3MDhjOThkYmYwM2IxNzM1ZWRjOTFmODEzYTM2NTgwNzgxYTk1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/adc708c98dbf03b1735edc91f813a36580781a95",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/adc708c98dbf03b1735edc91f813a36580781a95",
      "tree": {
        "sha": "5c049fc8e47549747b30b7c0e001ea1fd1ab0a6a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5c049fc8e47549747b30b7c0e001ea1fd1ab0a6a"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 5c049fc8e47549747b30b7c0e001ea1fd1ab0a6a\nparent 0b4d290bf5b0a4d156c523431bf89aaa9ffe92e5\nauthor Fabian Jahr <fjahr@protonmail.com> 1608499634 +0100\ncommitter Fabian Jahr <fjahr@protonmail.com> 1608577024 +0100\n\ncrypto: Add MuHash3072 implementation\n\nCo-authored-by: Pieter Wuille <pieter.wuille@gmail.com>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAl/g8AcVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNKjcQAIOvBo3cbqLcAjnIPr2a0DnPX9bY\nI2pIg/lB4Ztasi2mxtdXoVZAaPrb/FwG+9UnyHnoVTraaRo8JvPtjVkd96WrfMXe\nofSHh10O2mtrgoDWJBxrQa3YTrtd8Lux0oVq0Jd5O2kNuPdoWFG65FpJbNCmzHom\nojFWc2E3sqjyLocMrug+0v/75qoEG5T87Hgj3vq0WrtmuLqI+Y4JJ4GLx3+rH+Gb\nKuMUmKEq8Lfhs/gwRmr7Wfc5AUSF+USqyO6a8/uhuMlP5Zw1LYK2FqrOHpXD+k9h\nk6mVWju4TYdb6zsNyoZBV8HIuZ04S1TTuZh3wswxOFXfbjMV7BpsCEO5/xdKQ9Ty\nlKj7zLYQ0pFETf6PgueT0/mpwyqyFZ/ELdJMpNoWNYR5FQnN+VoOlkCTn5J8zxMI\nZbAGJIay3BQxwFd9+S4XPRQIg7iKDGnYrCGktubZAlpoDGabuLlThlSxLb07Xuf8\nnllWcu9v1bnweoOK+kd7Bz4j8MK/pPYuLfYy6NIFBrASriGBDoL+FJJM6yr2mtVt\nwCqMPQ5I0LIjGVVhtxULmX1iu0E8as1dTJ9rgQigStAXHhDDOjX+O/3iil6oNVuW\nISQcwqlPhU8Gr35HcertYBm0RRweyadWHA6mpU/wabIL99q3hcuy9VZtrXHi2d6u\nixofP6gW3EUTEztn\n=iS7P\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0b4d290bf5b0a4d156c523431bf89aaa9ffe92e5",
          "sha": "0b4d290bf5b0a4d156c523431bf89aaa9ffe92e5",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/0b4d290bf5b0a4d156c523431bf89aaa9ffe92e5"
        }
      ],
      "message": "crypto: Add MuHash3072 implementation\n\nCo-authored-by: Pieter Wuille <pieter.wuille@gmail.com>",
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-12-21T18:57:04Z"
      },
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-12-20T21:27:14Z"
      },
      "sha": "adc708c98dbf03b1735edc91f813a36580781a95"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YjEyNDIyMjlkMWZjYzkyNzcyMzhhM2FlZmIzNDMxMDYxYzgyYmZh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7b1242229d1fcc9277238a3aefb3431061c82bfa",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/7b1242229d1fcc9277238a3aefb3431061c82bfa",
      "tree": {
        "sha": "0fd34856072208fe6bd44f19704b40bad5d40798",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0fd34856072208fe6bd44f19704b40bad5d40798"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 0fd34856072208fe6bd44f19704b40bad5d40798\nparent adc708c98dbf03b1735edc91f813a36580781a95\nauthor Fabian Jahr <fjahr@protonmail.com> 1608499529 +0100\ncommitter Fabian Jahr <fjahr@protonmail.com> 1608577048 +0100\n\ntest: Add MuHash3072 unit tests\n\nCo-authored-by: Pieter Wuille <pieter.wuille@gmail.com>\nCo-authored-by: Anthony Towns <aj@erisian.com.au>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAl/g8B0VHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNTyEP+wTtvvv+YrfQVwEiz44EgX1toRH0\nO+TR/k5tQK7uRfwR3cMlYHh0lz5tqXJlosSocEP4iq8owACeaWq9X1cfWfGNoyTC\nWlFytizXJ+7MDQOAg7ypiIiNoYlHov4LE332GkD6Wd/thU7n7etZTjmJ7vwazEQO\nRC2fz74roo9HK0asIMziJMGVUE9IZklLmwjHheEQiV8RGmkZsWxacdMSuOZA1NhF\niIT4Xyv/owpy12JMUGUfs3IpGhAynMwPSzu3eaADa0/ze3jZlfJI+l15FSr7ekx7\nftwHM3TZpA/FfiNJfH//GVob37VrtJMfzsJFZ95+LT0Ge5sWEMND9G81On0CH2do\n6/QE2BgZeBE4L0ZRFjYF3ddpx5F+yC5muJ7q4tVIbXePMxXgAgADPK3W9cLFYwBu\nqyxiu9lgnvlduPFTviWvq0cl1LNr8hgBFUBxa3oD94tcxgl5PK4vghO57dG/6JC3\nO3EP5mPnhpCTougkgoTKaaP0uH7mGuTNKHDJQxfIDwjUdNAY4zmizRqcTY+zroNT\n4jISR3/B9sIHuzcEPwvFjjHk3U4AYaXtxZjQCowR10V1pcQNdXzCRraVEf0l3Dji\njms8Kp527WAiyyLVhNOu+OZhepzJZfJHHWExpWkCSIbgw0KzaSmC6i7JZXvJYurD\nzDdn3M4ShsQllF3V\n=hNUE\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/adc708c98dbf03b1735edc91f813a36580781a95",
          "sha": "adc708c98dbf03b1735edc91f813a36580781a95",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/adc708c98dbf03b1735edc91f813a36580781a95"
        }
      ],
      "message": "test: Add MuHash3072 unit tests\n\nCo-authored-by: Pieter Wuille <pieter.wuille@gmail.com>\nCo-authored-by: Anthony Towns <aj@erisian.com.au>",
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-12-21T18:57:28Z"
      },
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-12-20T21:25:29Z"
      },
      "sha": "7b1242229d1fcc9277238a3aefb3431061c82bfa"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMTIyNTI3Mzg1N2Y5ZmEyZTIyNzYzOTZlM2Y4YjNlYTQ4MzA2ZGYz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c1225273857f9fa2e2276396e3f8b3ea48306df3",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c1225273857f9fa2e2276396e3f8b3ea48306df3",
      "tree": {
        "sha": "dd7e7d3cc0ae2b9d984023979783cdc5706eaf9f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dd7e7d3cc0ae2b9d984023979783cdc5706eaf9f"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree dd7e7d3cc0ae2b9d984023979783cdc5706eaf9f\nparent 7b1242229d1fcc9277238a3aefb3431061c82bfa\nauthor Fabian Jahr <fjahr@protonmail.com> 1573233311 +0000\ncommitter Fabian Jahr <fjahr@protonmail.com> 1608577053 +0100\n\nbench: Add Muhash benchmarks\n\nCo-authored-by: Pieter Wuille <pieter.wuille@gmail.com>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAl/g8B0VHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNjSkP/2J3l1L9BcaKIttwaTvdmqKoHZvP\neDkbG9wMeKKlnXefbIsaf5p1ZBR34YGGnc99yoTulfJBH+vBtcgFvF1FnzY/17fa\n0n8zSjSWvYn/3EWU1zZBkRsfyy/NBT+TJPV951ZwdzuePc+60Ti6hR6pL2XDK7dO\nXEi3P0FjObK7uAvXeQ8OzAkkRTK3p/5xBbWOEPC35iluF7yOfSGf8VRuEq89b9Yr\n1wiPK62TRNWJa1NJfatOR5P13EUP/9oLDZgO8bdth+CUa8IDpRfFCZB0wsUh2ctM\nVVqt6jDt1HIPJ00B/fJmqNtBRWWc90U/CudPrFEgCyiNMDYKyuUnh7r3carETpEH\nf/FqTDwJ/BlbDI3K4jWiN4Sok4OH6eVRae8qNUZO5B/q1lNuDJG+eGnfiWxEs9Rq\nTZfMD9XoY0zGvjJIZha2p61593PU5ucSrk89gSZQRPltO0GGippgeO9OEfo2In+d\n0b7FQIkwHV//31IXpjV3QCDS6l4r6OD997JRkXKCjElvVGND6YFhvae1ExPfdFMO\nXXWcags57kBNxkczTyQxYx9ScFgj7JdVxW1nXj+N0NM1HeebljtlZnR/vMQpsDgh\nbA6adbJATbitI1zEitlWwAXHrLObv6NOr3JDkBhOE4cBwnwY28Rgm+GnG7zcXkBA\n8tUEG80Q+wGX6S5I\n=xUey\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7b1242229d1fcc9277238a3aefb3431061c82bfa",
          "sha": "7b1242229d1fcc9277238a3aefb3431061c82bfa",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/7b1242229d1fcc9277238a3aefb3431061c82bfa"
        }
      ],
      "message": "bench: Add Muhash benchmarks\n\nCo-authored-by: Pieter Wuille <pieter.wuille@gmail.com>",
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-12-21T18:57:33Z"
      },
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2019-11-08T17:15:11Z"
      },
      "sha": "c1225273857f9fa2e2276396e3f8b3ea48306df3"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMTExNDEwOTE0MDQxYjcyOTYxNTM2YzNlNDAzN2ViYTEwM2E4MDg1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b111410914041b72961536c3e4037eba103a8085",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b111410914041b72961536c3e4037eba103a8085",
      "tree": {
        "sha": "a594eb7ffc6ca5f879ad5b2f09873ca9db4425b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a594eb7ffc6ca5f879ad5b2f09873ca9db4425b1"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree a594eb7ffc6ca5f879ad5b2f09873ca9db4425b1\nparent c1225273857f9fa2e2276396e3f8b3ea48306df3\nauthor Fabian Jahr <fjahr@protonmail.com> 1593612781 +0200\ncommitter Fabian Jahr <fjahr@protonmail.com> 1608577053 +0100\n\ntest: Add MuHash3072 fuzz test\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAl/g8B0VHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNOtgP/ipFf1j03Jevpe0Bhm6NvgrszsHm\ngkZ+O2MsVnLeBnrYwpdQNqMS/4v8HCqkGkoc/p/HKFJOPIwpf7pAsz67ARXo6vmM\nOiRJD5MSe1+0qPq/GzuR2kSGxf3s1Z1ssDmgGf3Nub2w8Ouci63LHDFOtot1U2Fe\naR+Di2DNuj7sAh5duY8VwSuBdgGQCJV8AybK1AUvgBBBDTDmhg9RzGibmbtPVS9J\nTd89x54UeOSQih4CrykKtPiII386s4wmnWuVzTTMdLpXfBhdmMLJ1hFOCNH4IbEQ\nJGWFNvuT7qkoQN64OcTYCeWRbL6FiLlLo53pyh4QB1K0Kn//VJWWVbOMT47y2jPn\nSOEQ3K7/MF1yNv2Ii1obkZbmtB9khkTfcwpqdFdDpqm5BXY98vSLClAiKtEgRnoJ\ngRAM2ctaCzBiYVaVMSS7sB/7d/7X0eXTj1piZnNQUEy93OgGKLlZac9gEMkwnzQX\nLME0o2IVhDKlH/TFfov8cMVoFBOw8KQJ8wnqeEPdT7Jx9wFgNcCr8N1E7/dSkb15\nb8Gak+oEZgrrHgh4qyGWoFTfyZEnmz4dn3cWBUm4GrpCuG3ETDSnNXhsIKCBLTzl\nnBwqns1ae+U13VRcaVmDcvi2VmnyZSZ70q/7KEzNBw1itETyzYbGMvCFjonPikD7\nkAI6YP7UnkhJBjFY\n=N94n\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c1225273857f9fa2e2276396e3f8b3ea48306df3",
          "sha": "c1225273857f9fa2e2276396e3f8b3ea48306df3",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c1225273857f9fa2e2276396e3f8b3ea48306df3"
        }
      ],
      "message": "test: Add MuHash3072 fuzz test",
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-12-21T18:57:33Z"
      },
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-07-01T14:13:01Z"
      },
      "sha": "b111410914041b72961536c3e4037eba103a8085"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMTI5N2ZiM2NhNTdlNGI4Y2JjNWE4OWZjN2M2MzY3ZGUzM2IwYmM2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/01297fb3ca57e4b8cbc5a89fc7c6367de33b0bc6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/01297fb3ca57e4b8cbc5a89fc7c6367de33b0bc6",
      "tree": {
        "sha": "4f7fb344a9d67587598db2f72e74f2225bd9a6f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4f7fb344a9d67587598db2f72e74f2225bd9a6f1"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 4f7fb344a9d67587598db2f72e74f2225bd9a6f1\nparent b111410914041b72961536c3e4037eba103a8085\nauthor Fabian Jahr <fjahr@protonmail.com> 1606178137 +0100\ncommitter Fabian Jahr <fjahr@protonmail.com> 1608598110 +0100\n\nfuzz: Add MuHash consistency fuzz test\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAl/hQmEVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNNgYP/jeGyfZP5EUTBP3i0PO56mALxkxi\nFHtY/miaSdOJVi2GihKR/Lw7Q+iogUH8blf2aDFL9/gi6VJY9yL+LHsR80QiWRk1\no4NAc3+LUDpFmpzd52W67Qbst8UaEqDUjiRcXsUgh6DkLrP/iTGdLGw5OhyI+QSE\nMywOwCKGyyAzPx7sAj4sGL6NDPSbouj1mVJYo6qA//X/qv+m0m88Psf961Nr/u3C\nbcxcOXW9AfLA3q8WTZwQ6Tq2CxbV517weFHOKOoraOU30KSpbY+tUpcQ1yg17M9R\ny/gx3+fRJGfegykVsBl+/ppNLi63CvE3z43OYy/Q0Gx87vjxjZ95J92jTJPRgUN1\nMQM9dA6jXjctQIT7Z+DBI2IAMaHfvsqEhFs8ADvqATR/+q3SS5izdBvMMpnR9w1s\nCbZnHaLXClmlmvwfcOjozsBxRHNfdxl9S/rQ7kHGr04bXVJ/yInC6sokyt0i4zDu\nWn+tZ2V4xZCs7C3+nSvsqcijcGGWIZXFcRLQbd4m+lQ65HgWaU/yA+fcNyrgECjr\nBHiktC+aoXXHBIdx86YbEKbusBzM48c13vjbMcUpqjcSmfM3vIXJdC0YXhLjk1D8\nPFh/4FH+bZkFTEQNNj0pX9wquuTRhpT70kiPD2aYQR91aE1M7emsMAMzfDJvGB/G\nreoOKwL0qIsFScc/\n=qFfA\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b111410914041b72961536c3e4037eba103a8085",
          "sha": "b111410914041b72961536c3e4037eba103a8085",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b111410914041b72961536c3e4037eba103a8085"
        }
      ],
      "message": "fuzz: Add MuHash consistency fuzz test",
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-12-22T00:48:30Z"
      },
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-11-24T00:35:37Z"
      },
      "sha": "01297fb3ca57e4b8cbc5a89fc7c6367de33b0bc6"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ODE1MzMyZDUxNThkNjlhOTRhYmVhZjQ2NWEyYzA3YmQ4ZTQzMzU5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9815332d5158d69a94abeaf465a2c07bd8e43359",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9815332d5158d69a94abeaf465a2c07bd8e43359",
      "tree": {
        "sha": "129d161a4e5081f7a1a2e90da6912c5d1135b184",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/129d161a4e5081f7a1a2e90da6912c5d1135b184"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 129d161a4e5081f7a1a2e90da6912c5d1135b184\nparent 01297fb3ca57e4b8cbc5a89fc7c6367de33b0bc6\nauthor Fabian Jahr <fjahr@protonmail.com> 1608243930 +0100\ncommitter Fabian Jahr <fjahr@protonmail.com> 1608598114 +0100\n\ntest: Change MuHash Python implementation to match cpp version again\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAl/hQmIVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNt5kQAJMb3BRaXGevm8K9RMK04TRq14A5\nw8JpuKTUO7/G0DSPQ56KDV0A0dJr8EV/Xsx1LN0B+tlwToKRnY3yHgyFEF8OykqT\njoEOA9TOAzX6s/4gM5MUBNpyBXEvuvD+obIgfG2QZSEdaM0wLC/ApfILgYSUBIjH\nkH2zvuvqv18EydczRFsrn5MEXgIqhVD41Rj1x9vio9+Q3O9hdO4QEZb1BxhvZDVS\nHbU5R7yueSXp3U3OzdUEZxTQdQH75tvgdKTncGw3ZWyXNkqEVnWmc1d0Rv590fWA\nrLIp6ovcgnNrsn2h/aU1isjl/WrVxnj4xPUkrGmZTrDv2ulyKgdKvDnCW1BMtu18\nJTP9lU1GPD9eZ7qa+sHJVxgJQu5a6vk4UugEVk/jqhKtRrz9Cjut0ThMA7XQhkox\n07sC3j/7VRbNCY+4PIJWffTvUM5ejPaWdcP9x4jnnPz8cm7z1G8vk5Mf0MFZZVRK\nhWqfocEyk7itx3l8M2uKrVVhlTiMyL0uQDD+6kVxZZDJzJp3uJj264Z1rApKfz6A\nGqy18zbHxv7gXQjjzR7sUHhlvzQfeGe1yCY1glsdW5h+9edVaTYoWezRAlgBGPaL\nz2WFfnF/QfpVAygVEClSbclQ0zQOoibMHHa2PLz1RCkL9MOQTTAmxbRTokhUIvat\nBYVgPdxLCvIlMrXC\n=S1Nr\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/01297fb3ca57e4b8cbc5a89fc7c6367de33b0bc6",
          "sha": "01297fb3ca57e4b8cbc5a89fc7c6367de33b0bc6",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/01297fb3ca57e4b8cbc5a89fc7c6367de33b0bc6"
        }
      ],
      "message": "test: Change MuHash Python implementation to match cpp version again",
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-12-22T00:48:34Z"
      },
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-12-17T22:25:30Z"
      },
      "sha": "9815332d5158d69a94abeaf465a2c07bd8e43359"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4138144074,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDEzODE0NDA3NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4138144074",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-22T00:53:38Z"
    },
    {
      "event": "commented",
      "id": 749278131,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc0OTI3ODEzMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/749278131",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-22T00:57:37Z",
      "updated_at": "2020-12-22T00:57:37Z",
      "author_association": "MEMBER",
      "body": "Addressed the latest comments.\r\n\r\n> Perhaps `Num3072` can have `SERIALIZE_METHODS` (and a test), so that `MuHash3072` can serialise its numerator and denominator without poking into `Num3072` internals.\r\n\r\nDone\r\n",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-749278131",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "commented",
      "id": 749481884,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc0OTQ4MTg4NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/749481884",
      "actor": {
        "login": "Limpisey168",
        "id": 75303867,
        "node_id": "MDQ6VXNlcjc1MzAzODY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/75303867?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Limpisey168",
        "html_url": "https://github.com/Limpisey168",
        "followers_url": "https://api.github.com/users/Limpisey168/followers",
        "following_url": "https://api.github.com/users/Limpisey168/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Limpisey168/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Limpisey168/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Limpisey168/subscriptions",
        "organizations_url": "https://api.github.com/users/Limpisey168/orgs",
        "repos_url": "https://api.github.com/users/Limpisey168/repos",
        "events_url": "https://api.github.com/users/Limpisey168/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Limpisey168/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-22T10:57:34Z",
      "updated_at": "2020-12-22T10:57:34Z",
      "author_association": "NONE",
      "body": "So good",
      "user": {
        "login": "Limpisey168",
        "id": 75303867,
        "node_id": "MDQ6VXNlcjc1MzAzODY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/75303867?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Limpisey168",
        "html_url": "https://github.com/Limpisey168",
        "followers_url": "https://api.github.com/users/Limpisey168/followers",
        "following_url": "https://api.github.com/users/Limpisey168/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Limpisey168/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Limpisey168/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Limpisey168/subscriptions",
        "organizations_url": "https://api.github.com/users/Limpisey168/orgs",
        "repos_url": "https://api.github.com/users/Limpisey168/repos",
        "events_url": "https://api.github.com/users/Limpisey168/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Limpisey168/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#issuecomment-749481884",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19055"
    },
    {
      "event": "reviewed",
      "id": 556997112,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2OTk3MTEy",
      "url": null,
      "actor": null,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#pullrequestreview-556997112",
      "submitted_at": "2020-12-22T11:03:20Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
    },
    {
      "event": "subscribed",
      "id": 4139679829,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQxMzk2Nzk4Mjk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4139679829",
      "actor": {
        "login": "bugsbunty",
        "id": 76176044,
        "node_id": "MDQ6VXNlcjc2MTc2MDQ0",
        "avatar_url": "https://avatars.githubusercontent.com/u/76176044?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bugsbunty",
        "html_url": "https://github.com/bugsbunty",
        "followers_url": "https://api.github.com/users/bugsbunty/followers",
        "following_url": "https://api.github.com/users/bugsbunty/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bugsbunty/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bugsbunty/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bugsbunty/subscriptions",
        "organizations_url": "https://api.github.com/users/bugsbunty/orgs",
        "repos_url": "https://api.github.com/users/bugsbunty/repos",
        "events_url": "https://api.github.com/users/bugsbunty/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bugsbunty/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-22T11:05:13Z"
    },
    {
      "event": "comment_deleted",
      "id": 4143972358,
      "node_id": "MDE5OkNvbW1lbnREZWxldGVkRXZlbnQ0MTQzOTcyMzU4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4143972358",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-23T12:47:53Z"
    },
    {
      "event": "subscribed",
      "id": 4145191192,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQxNDUxOTExOTI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4145191192",
      "actor": {
        "login": "Limpisey168",
        "id": 75303867,
        "node_id": "MDQ6VXNlcjc1MzAzODY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/75303867?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Limpisey168",
        "html_url": "https://github.com/Limpisey168",
        "followers_url": "https://api.github.com/users/Limpisey168/followers",
        "following_url": "https://api.github.com/users/Limpisey168/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Limpisey168/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Limpisey168/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Limpisey168/subscriptions",
        "organizations_url": "https://api.github.com/users/Limpisey168/orgs",
        "repos_url": "https://api.github.com/users/Limpisey168/repos",
        "events_url": "https://api.github.com/users/Limpisey168/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Limpisey168/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-23T18:48:58Z"
    },
    {
      "event": "reviewed",
      "id": 563648080,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYzNjQ4MDgw",
      "url": null,
      "actor": null,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Code review ACK 9815332d5158d69a94abeaf465a2c07bd8e43359",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#pullrequestreview-563648080",
      "submitted_at": "2021-01-07T16:48:48Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
    },
    {
      "event": "merged",
      "id": 4180791158,
      "node_id": "MDExOk1lcmdlZEV2ZW50NDE4MDc5MTE1OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4180791158",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "b6a71b80d28c79796b557cdb6bae05abb34d1225",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6a71b80d28c79796b557cdb6bae05abb34d1225",
      "created_at": "2021-01-07T16:57:50Z"
    },
    {
      "event": "closed",
      "id": 4180791177,
      "node_id": "MDExOkNsb3NlZEV2ZW50NDE4MDc5MTE3Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4180791177",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-07T16:57:50Z"
    },
    {
      "event": "removed_from_project",
      "id": 4180792638,
      "node_id": "MDIzOlJlbW92ZWRGcm9tUHJvamVjdEV2ZW50NDE4MDc5MjYzOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4180792638",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-07T16:58:08Z",
      "project_card": {
        "id": 50142127,
        "url": "https://api.github.com/projects/columns/cards/50142127",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "referenced",
      "id": 4181262938,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQxODEyNjI5Mzg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4181262938",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "d93f2b4943606a8edeb889e30aa6317c6caaaecf",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/d93f2b4943606a8edeb889e30aa6317c6caaaecf",
      "created_at": "2021-01-07T19:01:55Z"
    },
    {
      "event": "reviewed",
      "id": 573610664,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTczNjEwNjY0",
      "url": null,
      "actor": null,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#pullrequestreview-573610664",
      "submitted_at": "2021-01-21T18:18:49Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
    },
    {
      "event": "referenced",
      "id": 5322638358,
      "node_id": "REFE_lADOABII584lKPeozwAAAAE9QQQW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5322638358",
      "actor": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "bc50aebd8d2d96a4c37efddfd6e68943099be174",
      "commit_url": "https://api.github.com/repos/martinus/bitcoin/commits/bc50aebd8d2d96a4c37efddfd6e68943099be174",
      "created_at": "2021-09-18T07:39:12Z"
    },
    {
      "event": "referenced",
      "id": 5322700490,
      "node_id": "REFE_lADOABII584lKPeozwAAAAE9QfbK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5322700490",
      "actor": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "83cad97f3722df3babc75c48818ed7eebccb7648",
      "commit_url": "https://api.github.com/repos/martinus/bitcoin/commits/83cad97f3722df3babc75c48818ed7eebccb7648",
      "created_at": "2021-09-18T08:32:45Z"
    },
    {
      "event": "referenced",
      "id": 5322827003,
      "node_id": "REFE_lADOABII584lKPeozwAAAAE9Q-T7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5322827003",
      "actor": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "524382c27c9adf65c647e9374a79e8b6f618553e",
      "commit_url": "https://api.github.com/repos/martinus/bitcoin/commits/524382c27c9adf65c647e9374a79e8b6f618553e",
      "created_at": "2021-09-18T10:31:38Z"
    },
    {
      "event": "referenced",
      "id": 5326036265,
      "node_id": "REFE_lADOABII584lKPeozwAAAAE9dN0p",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5326036265",
      "actor": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "c4c2113e72f1dbf6678cbc65bb92e247964b3083",
      "commit_url": "https://api.github.com/repos/martinus/bitcoin/commits/c4c2113e72f1dbf6678cbc65bb92e247964b3083",
      "created_at": "2021-09-20T05:31:31Z"
    },
    {
      "event": "referenced",
      "id": 5334163303,
      "node_id": "REFE_lADOABII584lKPeozwAAAAE98N9n",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5334163303",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "8986cfad54b86b17ca7b4b0bc49581c260933e38",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/8986cfad54b86b17ca7b4b0bc49581c260933e38",
      "created_at": "2021-09-21T09:40:27Z"
    },
    {
      "event": "referenced",
      "id": 5335306269,
      "node_id": "REFE_lADOABII584lKPeozwAAAAE-AlAd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5335306269",
      "actor": {
        "login": "martinus",
        "id": 14386,
        "node_id": "MDQ6VXNlcjE0Mzg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/martinus",
        "html_url": "https://github.com/martinus",
        "followers_url": "https://api.github.com/users/martinus/followers",
        "following_url": "https://api.github.com/users/martinus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/martinus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/martinus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
        "organizations_url": "https://api.github.com/users/martinus/orgs",
        "repos_url": "https://api.github.com/users/martinus/repos",
        "events_url": "https://api.github.com/users/martinus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/martinus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "468b232f71562280aae16876bc257ec24f5fcccb",
      "commit_url": "https://api.github.com/repos/martinus/bitcoin/commits/468b232f71562280aae16876bc257ec24f5fcccb",
      "created_at": "2021-09-21T12:47:42Z"
    },
    {
      "event": "referenced",
      "id": 5459468727,
      "node_id": "REFE_lADOABII584lKPeozwAAAAFFaOG3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5459468727",
      "actor": {
        "login": "rebroad",
        "id": 1530283,
        "node_id": "MDQ6VXNlcjE1MzAyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rebroad",
        "html_url": "https://github.com/rebroad",
        "followers_url": "https://api.github.com/users/rebroad/followers",
        "following_url": "https://api.github.com/users/rebroad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rebroad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rebroad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
        "organizations_url": "https://api.github.com/users/rebroad/orgs",
        "repos_url": "https://api.github.com/users/rebroad/repos",
        "events_url": "https://api.github.com/users/rebroad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rebroad/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "97bbb73143d9c0ab4a5d409a168333118218e94d",
      "commit_url": "https://api.github.com/repos/rebroad/bitcoin/commits/97bbb73143d9c0ab4a5d409a168333118218e94d",
      "created_at": "2021-10-13T19:42:27Z"
    },
    {
      "event": "referenced",
      "id": 6144902709,
      "node_id": "REFE_lADOABII584lKPeozwAAAAFuQ8Y1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6144902709",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "24d63c27156ac569edb4f638036f3a915fcdc32f",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/24d63c27156ac569edb4f638036f3a915fcdc32f",
      "created_at": "2022-02-26T10:59:45Z"
    },
    {
      "event": "referenced",
      "id": 6144905193,
      "node_id": "REFE_lADOABII584lKPeozwAAAAFuQ8_p",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6144905193",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "c599c260693274d992689e2676908669dde80538",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/c599c260693274d992689e2676908669dde80538",
      "created_at": "2022-02-26T11:00:20Z"
    },
    {
      "event": "referenced",
      "id": 6146915432,
      "node_id": "REFE_lADOABII584lKPeozwAAAAFuYnxo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6146915432",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e5a81c5fd4ad042c812000ac445f13af983b61e0",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/e5a81c5fd4ad042c812000ac445f13af983b61e0",
      "created_at": "2022-02-26T20:28:49Z"
    },
    {
      "event": "referenced",
      "id": 6233217851,
      "node_id": "REFE_lADOABII584lKPeozwAAAAFzh1s7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6233217851",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "465584c0e51b6287e1958f2970348945f370c6cf",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/465584c0e51b6287e1958f2970348945f370c6cf",
      "created_at": "2022-03-14T07:48:28Z"
    },
    {
      "event": "referenced",
      "id": 6358353781,
      "node_id": "REFE_lADOABII584lKPeozwAAAAF6_Md1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6358353781",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "9656cb4510fb07d7efa0bc81ec7eab198e2a237d",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/9656cb4510fb07d7efa0bc81ec7eab198e2a237d",
      "created_at": "2022-04-03T14:39:07Z"
    },
    {
      "event": "referenced",
      "id": 6464512027,
      "node_id": "REFE_lADOABII584lKPeozwAAAAGBUKAb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6464512027",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e81e7c43945d75fb42e18bb37a9e932ac407779a",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/e81e7c43945d75fb42e18bb37a9e932ac407779a",
      "created_at": "2022-04-20T16:14:49Z"
    },
    {
      "event": "referenced",
      "id": 6485724864,
      "node_id": "REFE_lADOABII584lKPeozwAAAAGClE7A",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6485724864",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "3f63f084b746da9950d8011574212bca94c8b62b",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/3f63f084b746da9950d8011574212bca94c8b62b",
      "created_at": "2022-04-24T11:23:15Z"
    },
    {
      "event": "referenced",
      "id": 6507591825,
      "node_id": "REFE_lADOABII584lKPeozwAAAAGD4fiR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6507591825",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "c7eb44a9114f8c56812e69fef1c237300a442623",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/c7eb44a9114f8c56812e69fef1c237300a442623",
      "created_at": "2022-04-27T14:35:51Z"
    },
    {
      "event": "locked",
      "id": 7199031377,
      "node_id": "LOE_lADOABII584lKPeozwAAAAGtGIBR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7199031377",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-16T17:06:37Z",
      "lock_reason": "resolved"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/431080029",
      "pull_request_review_id": 419143541,
      "id": 431080029,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA4MDAyOQ==",
      "diff_hunk": "@@ -388,6 +388,8 @@ crypto_libbitcoin_crypto_base_a_SOURCES = \\\n   crypto/hmac_sha512.h \\\n   crypto/poly1305.h \\\n   crypto/poly1305.cpp \\\n+  crypto/muhash.cpp \\\n+  crypto/muhash.h \\",
      "path": "src/Makefile.am",
      "position": 4,
      "original_position": 5,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "4438aed09e87de0afb37da64ffb5e7489084e8ab",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ced54242 nit: sort",
      "created_at": "2020-05-27T12:31:37Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r431080029",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/431080029"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 409,
      "original_line": 409,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/431132007",
      "pull_request_review_id": 419143541,
      "id": 431132007,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTEzMjAwNw==",
      "diff_hunk": "@@ -101,3 +166,8 @@ BENCHMARK(SipHash_32b, 40 * 1000 * 1000);\n BENCHMARK(SHA256D64_1024, 7400);\n BENCHMARK(FastRandom_32bit, 110 * 1000 * 1000);\n BENCHMARK(FastRandom_1bit, 440 * 1000 * 1000);\n+\n+BENCHMARK(MuHash, 5000);\n+BENCHMARK(MuHashPrecompute, 5000);\n+BENCHMARK(MuHashAdd, 5000);\n+BENCHMARK(MuHashDiv, 100);",
      "path": "src/bench/crypto_hash.cpp",
      "position": null,
      "original_position": 87,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "4438aed09e87de0afb37da64ffb5e7489084e8ab",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "cda20f3 nit: perhaps sort the functions above and this list, e.g. like\r\n\r\n```\r\n$ src/bench/bench_bitcoin -list\r\n...\r\nMuHash, 5, 5000, 0, 0, 0, 0\r\nMuHashAdd, 5, 5000, 0, 0, 0, 0\r\nMuHashDiv, 5, 100, 0, 0, 0, 0\r\nMuHashPrecompute, 5, 5000, 0, 0, 0, 0\r\n\r\n$ src/bench/bench_bitcoin -filter=MuHash*.*\r\n# Benchmark, evals, iterations, total, min, max, median\r\nMuHash, 5, 5000, 0.287426, 7.45603e-06, 1.72302e-05, 1.08339e-05\r\nMuHashAdd, 5, 5000, 0.243778, 7.93741e-06, 1.17234e-05, 9.61388e-06\r\nMuHashDiv, 5, 100, 8.62069, 0.0146344, 0.0216452, 0.0169485\r\nMuHashPrecompute, 5, 5000, 0.0557224, 1.55965e-06, 4.40565e-06, 1.65373e-06\r\n```\r\n",
      "created_at": "2020-05-27T13:30:41Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r431132007",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/431132007"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 172,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/431151719",
      "pull_request_review_id": 419143541,
      "id": 431151719,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE1MTcxOQ==",
      "diff_hunk": "@@ -91,6 +92,70 @@ static void FastRandom_1bit(benchmark::State& state)\n     }\n }\n \n+static void MuHash(benchmark::State& state)\n+{\n+    FastRandomContext rng(true);\n+    MuHash3072 acc;\n+    unsigned char key[32] = {0};\n+    int i = 0;\n+    while (state.KeepRunning()) {\n+        key[0] = ++i;\n+        acc *= MuHash3072(key);\n+    }\n+}\n+\n+static void MuHashPrecompute(benchmark::State& state)\n+{\n+    FastRandomContext rng(true);\n+    MuHash3072 acc;\n+    unsigned char key[32];\n+    std::vector<unsigned char> randkey = rng.randbytes(32);\n+    for (size_t i = 0; i < randkey.size(); i++) {\n+        key[i] = randkey[i];\n+    }\n+\n+    while (state.KeepRunning()) {\n+        MuHash3072{key};\n+    }\n+}\n+\n+static void MuHashAdd(benchmark::State& state)\n+{\n+    FastRandomContext rng(true);\n+    MuHash3072 acc;\n+    unsigned char key[32];\n+    std::vector<unsigned char> randkey = rng.randbytes(32);\n+    for (size_t i = 0; i < randkey.size(); i++) {\n+        key[i] = randkey[i];\n+    }\n+\n+    MuHash3072 muhash = MuHash3072(key);\n+    while (state.KeepRunning()) {\n+        acc *= muhash;\n+    }\n+}\n+\n+static void MuHashDiv(benchmark::State& state)\n+{\n+    FastRandomContext rng(true);\n+    MuHash3072 acc;\n+    unsigned char key[32];\n+    std::vector<unsigned char> randkey = rng.randbytes(32);\n+    for (size_t i = 0; i < randkey.size(); i++) {\n+        key[i] = randkey[i];\n+    }\n+\n+    MuHash3072 muhash = MuHash3072(key);\n+\n+    for (size_t i = 0; i < state.m_num_iters; i++) {",
      "path": "src/bench/crypto_hash.cpp",
      "position": null,
      "original_position": 67,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "4438aed09e87de0afb37da64ffb5e7489084e8ab",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ced54242 and cda20f3f nit: in these four functions above `++i` is preferred over `i++` per doc/developer-notes.md\r\n\r\n5d67c47 same for `src/crypto/muhash.h::L71`",
      "created_at": "2020-05-27T13:56:46Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r431151719",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/431151719"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 150,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/431199564",
      "pull_request_review_id": 419143541,
      "id": 431199564,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE5OTU2NA==",
      "diff_hunk": "@@ -66,9 +97,38 @@ bool GetUTXOStats(CCoinsView* view, CCoinsStats& stats, const std::function<void\n         pcursor->Next();\n     }\n     if (!outputs.empty()) {\n-        ApplyStats(stats, ss, prevkey, outputs);\n+        ApplyStats(stats, hash, prevkey, outputs);\n     }\n-    stats.hashSerialized = ss.GetHash();\n+\n+    FinalizeHash(hash, stats);\n+\n     stats.nDiskSize = view->EstimateSize();\n     return true;\n }\n+\n+// The legacy hash serializes the hashBlock\n+void PrepareHash(CHashWriter& hash, CCoinsStats& stats) {\n+    hash << stats.hashBlock;\n+}\n+// Muhash does not need the prepare step\n+void PrepareHash(MuHash3072 hash, CCoinsStats& stats) {}\n+\n+void FinalizeHash(CHashWriter& hash, CCoinsStats& stats) {\n+    stats.hashSerialized = hash.GetHash();\n+}\n+void FinalizeHash(MuHash3072 hash, CCoinsStats& stats) {\n+    unsigned char out[384];\n+    hash.Finalize(out);\n+    stats.hashSerialized = (TruncatedSHA512Writer(SER_DISK, 0) << out).GetHash();\n+}\n+\n+bool GetUTXOStats(CCoinsView *view, CCoinsStats &stats, const std::function<void()>& interruption_point, bool use_muhash)",
      "path": "src/node/coinstats.cpp",
      "position": null,
      "original_position": 119,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "4438aed09e87de0afb37da64ffb5e7489084e8ab",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "a6cf0df1 could add the new `bool GetUTXOStats()` next to the existing one -- to ease review, I moved them together.",
      "created_at": "2020-05-27T14:53:12Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r431199564",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/431199564"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 125,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/431778760",
      "pull_request_review_id": 420031955,
      "id": 431778760,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTc3ODc2MA==",
      "diff_hunk": "@@ -971,7 +971,9 @@ static UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n             RPCHelpMan{\"gettxoutsetinfo\",\n                 \"\\nReturns statistics about the unspent transaction output set.\\n\"\n                 \"Note this call may take some time.\\n\",\n-                {},\n+                {\n+                    {\"legacy_hash\", RPCArg::Type::BOOL, /* default */ \"false\", \"Whether the UTXO set hash should be calculated using the legacy algorithm (not Muhash).\"},",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "4438aed09e87de0afb37da64ffb5e7489084e8ab",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n                    {\"hash_type\", RPCArg::Type::STR, /* default */ \"hash_serialized_2\", \"Which UTXO set hash should be calculated. Options: 'hash_serialized_2' (the legacy algorithm), 'muhash', 'none'.\"},\r\n```\r\n\r\nHow much time is spent on hashing with the legacy hash vs muhash vs none? Imagine someone just wants the `total_amount` as fast as possible.\r\n\r\nIf hashing is slow in general, maybe there should be an option to skip it?",
      "created_at": "2020-05-28T11:53:20Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r431778760",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/431778760"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 975,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/431944665",
      "pull_request_review_id": 420256522,
      "id": 431944665,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk0NDY2NQ==",
      "diff_hunk": "@@ -971,7 +971,9 @@ static UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n             RPCHelpMan{\"gettxoutsetinfo\",\n                 \"\\nReturns statistics about the unspent transaction output set.\\n\"\n                 \"Note this call may take some time.\\n\",\n-                {},\n+                {\n+                    {\"legacy_hash\", RPCArg::Type::BOOL, /* default */ \"false\", \"Whether the UTXO set hash should be calculated using the legacy algorithm (not Muhash).\"},",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "4438aed09e87de0afb37da64ffb5e7489084e8ab",
      "in_reply_to_id": 431778760,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's a good question but based on my tests (with commented out hashing code) the performance impact of `hash_serialized2` is only small. Results were volatile but on average `gettxoutsetinfo` without the hash was only a few seconds faster (5s - 20s faster, an improvement of ~10%). I think it's not really worth adding an option for that if we can have the index instead.",
      "created_at": "2020-05-28T15:54:19Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r431944665",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/431944665"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 975,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432425903",
      "pull_request_review_id": 420873318,
      "id": 432425903,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQyNTkwMw==",
      "diff_hunk": "@@ -971,7 +971,9 @@ static UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n             RPCHelpMan{\"gettxoutsetinfo\",\n                 \"\\nReturns statistics about the unspent transaction output set.\\n\"\n                 \"Note this call may take some time.\\n\",\n-                {},\n+                {\n+                    {\"legacy_hash\", RPCArg::Type::BOOL, /* default */ \"false\", \"Whether the UTXO set hash should be calculated using the legacy algorithm (not Muhash).\"},",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "4438aed09e87de0afb37da64ffb5e7489084e8ab",
      "in_reply_to_id": 431778760,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thinking about it a little bit more, I think it would be good to have the option for later on when we want to remove the code for `hash_serialized_2`. So I will add it as an option.",
      "created_at": "2020-05-29T11:36:13Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r432425903",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432425903"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 975,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432426282",
      "pull_request_review_id": 420873836,
      "id": 432426282,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQyNjI4Mg==",
      "diff_hunk": "@@ -66,9 +97,38 @@ bool GetUTXOStats(CCoinsView* view, CCoinsStats& stats, const std::function<void\n         pcursor->Next();\n     }\n     if (!outputs.empty()) {\n-        ApplyStats(stats, ss, prevkey, outputs);\n+        ApplyStats(stats, hash, prevkey, outputs);\n     }\n-    stats.hashSerialized = ss.GetHash();\n+\n+    FinalizeHash(hash, stats);\n+\n     stats.nDiskSize = view->EstimateSize();\n     return true;\n }\n+\n+// The legacy hash serializes the hashBlock\n+void PrepareHash(CHashWriter& hash, CCoinsStats& stats) {\n+    hash << stats.hashBlock;\n+}\n+// Muhash does not need the prepare step\n+void PrepareHash(MuHash3072 hash, CCoinsStats& stats) {}\n+\n+void FinalizeHash(CHashWriter& hash, CCoinsStats& stats) {\n+    stats.hashSerialized = hash.GetHash();\n+}\n+void FinalizeHash(MuHash3072 hash, CCoinsStats& stats) {\n+    unsigned char out[384];\n+    hash.Finalize(out);\n+    stats.hashSerialized = (TruncatedSHA512Writer(SER_DISK, 0) << out).GetHash();\n+}\n+\n+bool GetUTXOStats(CCoinsView *view, CCoinsStats &stats, const std::function<void()>& interruption_point, bool use_muhash)",
      "path": "src/node/coinstats.cpp",
      "position": null,
      "original_position": 119,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "4438aed09e87de0afb37da64ffb5e7489084e8ab",
      "in_reply_to_id": 431199564,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "now out of scope of this PR but will reorg it in the follow-up",
      "created_at": "2020-05-29T11:37:08Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r432426282",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432426282"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 125,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432426338",
      "pull_request_review_id": 420873910,
      "id": 432426338,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQyNjMzOA==",
      "diff_hunk": "@@ -91,6 +92,70 @@ static void FastRandom_1bit(benchmark::State& state)\n     }\n }\n \n+static void MuHash(benchmark::State& state)\n+{\n+    FastRandomContext rng(true);\n+    MuHash3072 acc;\n+    unsigned char key[32] = {0};\n+    int i = 0;\n+    while (state.KeepRunning()) {\n+        key[0] = ++i;\n+        acc *= MuHash3072(key);\n+    }\n+}\n+\n+static void MuHashPrecompute(benchmark::State& state)\n+{\n+    FastRandomContext rng(true);\n+    MuHash3072 acc;\n+    unsigned char key[32];\n+    std::vector<unsigned char> randkey = rng.randbytes(32);\n+    for (size_t i = 0; i < randkey.size(); i++) {\n+        key[i] = randkey[i];\n+    }\n+\n+    while (state.KeepRunning()) {\n+        MuHash3072{key};\n+    }\n+}\n+\n+static void MuHashAdd(benchmark::State& state)\n+{\n+    FastRandomContext rng(true);\n+    MuHash3072 acc;\n+    unsigned char key[32];\n+    std::vector<unsigned char> randkey = rng.randbytes(32);\n+    for (size_t i = 0; i < randkey.size(); i++) {\n+        key[i] = randkey[i];\n+    }\n+\n+    MuHash3072 muhash = MuHash3072(key);\n+    while (state.KeepRunning()) {\n+        acc *= muhash;\n+    }\n+}\n+\n+static void MuHashDiv(benchmark::State& state)\n+{\n+    FastRandomContext rng(true);\n+    MuHash3072 acc;\n+    unsigned char key[32];\n+    std::vector<unsigned char> randkey = rng.randbytes(32);\n+    for (size_t i = 0; i < randkey.size(); i++) {\n+        key[i] = randkey[i];\n+    }\n+\n+    MuHash3072 muhash = MuHash3072(key);\n+\n+    for (size_t i = 0; i < state.m_num_iters; i++) {",
      "path": "src/bench/crypto_hash.cpp",
      "position": null,
      "original_position": 67,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "4438aed09e87de0afb37da64ffb5e7489084e8ab",
      "in_reply_to_id": 431151719,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2020-05-29T11:37:15Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r432426338",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432426338"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 150,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432426405",
      "pull_request_review_id": 420873991,
      "id": 432426405,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQyNjQwNQ==",
      "diff_hunk": "@@ -101,3 +166,8 @@ BENCHMARK(SipHash_32b, 40 * 1000 * 1000);\n BENCHMARK(SHA256D64_1024, 7400);\n BENCHMARK(FastRandom_32bit, 110 * 1000 * 1000);\n BENCHMARK(FastRandom_1bit, 440 * 1000 * 1000);\n+\n+BENCHMARK(MuHash, 5000);\n+BENCHMARK(MuHashPrecompute, 5000);\n+BENCHMARK(MuHashAdd, 5000);\n+BENCHMARK(MuHashDiv, 100);",
      "path": "src/bench/crypto_hash.cpp",
      "position": null,
      "original_position": 87,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "4438aed09e87de0afb37da64ffb5e7489084e8ab",
      "in_reply_to_id": 431132007,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2020-05-29T11:37:23Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r432426405",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432426405"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 172,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432426468",
      "pull_request_review_id": 420874073,
      "id": 432426468,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQyNjQ2OA==",
      "diff_hunk": "@@ -388,6 +388,8 @@ crypto_libbitcoin_crypto_base_a_SOURCES = \\\n   crypto/hmac_sha512.h \\\n   crypto/poly1305.h \\\n   crypto/poly1305.cpp \\\n+  crypto/muhash.cpp \\\n+  crypto/muhash.h \\",
      "path": "src/Makefile.am",
      "position": 4,
      "original_position": 5,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "4438aed09e87de0afb37da64ffb5e7489084e8ab",
      "in_reply_to_id": 431080029,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2020-05-29T11:37:31Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r432426468",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432426468"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 409,
      "original_line": 409,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/436143516",
      "pull_request_review_id": 425598449,
      "id": 436143516,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE0MzUxNg==",
      "diff_hunk": "@@ -971,7 +971,9 @@ static UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n             RPCHelpMan{\"gettxoutsetinfo\",\n                 \"\\nReturns statistics about the unspent transaction output set.\\n\"\n                 \"Note this call may take some time.\\n\",\n-                {},\n+                {\n+                    {\"legacy_hash\", RPCArg::Type::BOOL, /* default */ \"false\", \"Whether the UTXO set hash should be calculated using the legacy algorithm (not Muhash).\"},",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "4438aed09e87de0afb37da64ffb5e7489084e8ab",
      "in_reply_to_id": 431778760,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is now implemented in #19145.",
      "created_at": "2020-06-05T20:14:59Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r436143516",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/436143516"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 975,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437326492",
      "pull_request_review_id": 427030918,
      "id": 437326492,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzMyNjQ5Mg==",
      "diff_hunk": "@@ -0,0 +1,77 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <serialize.h>\n+#include <stdint.h>\n+\n+struct Num3072 {\n+#ifdef HAVE___INT128\n+    typedef unsigned __int128 double_limb_type;\n+    typedef uint64_t limb_type;\n+    static constexpr int LIMBS = 48;\n+    static constexpr int LIMB_SIZE = 64;\n+#else\n+    typedef uint64_t double_limb_type;\n+    typedef uint32_t limb_type;\n+    static constexpr int LIMBS = 96;\n+    static constexpr int LIMB_SIZE = 32;\n+#endif\n+    limb_type limbs[LIMBS];\n+};\n+\n+/** A class representing MuHash sets",
      "path": "src/crypto/muhash.h",
      "position": 62,
      "original_position": 30,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "d11910b38fab4e3c51be6fcd3c807e4d11ee8669",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe link to the paper and mailinglist discussion here:\r\n* https://cseweb.ucsd.edu/~mihir/papers/inchash.pdf (explains MuHASH in general terms)\r\n* https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014337.html (picks SHA512 and ChaCha20)",
      "created_at": "2020-06-09T11:07:41Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r437326492",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437326492"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 62,
      "original_line": 62,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437515881",
      "pull_request_review_id": 427275640,
      "id": 437515881,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUxNTg4MQ==",
      "diff_hunk": "@@ -0,0 +1,77 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <serialize.h>\n+#include <stdint.h>\n+\n+struct Num3072 {\n+#ifdef HAVE___INT128\n+    typedef unsigned __int128 double_limb_type;\n+    typedef uint64_t limb_type;\n+    static constexpr int LIMBS = 48;\n+    static constexpr int LIMB_SIZE = 64;\n+#else\n+    typedef uint64_t double_limb_type;\n+    typedef uint32_t limb_type;\n+    static constexpr int LIMBS = 96;\n+    static constexpr int LIMB_SIZE = 32;\n+#endif\n+    limb_type limbs[LIMBS];\n+};\n+\n+/** A class representing MuHash sets\n+ *\n+ * MuHash is a hashing algorithm that supports adding set elements in any\n+ * order but also deleting in any order. As a result, it can maintain a\n+ * running sum for a set of data as a whole, and add/subtract when data\n+ * is added to or removed from it. A downside of MuHash is that computing\n+ * an inverse is relatively expensive. This can be solved by representing\n+ * the running value as a fraction, and multiplying added elements into\n+ * the numerator and removed elements into the denominator. Only when the\n+ * final hash is desired, a single modular inverse and multiplication is\n+ * needed to combine the two.\n+ *\n+ * As the update operations are also associative, H(a)+H(b)+H(c)+H(d) can\n+ * in fact be computed as (H(a)+H(b)) + (H(c)+H(d)). This implies that\n+ * all of this is perfectly parallellizable: each thread can process an\n+ * arbitrary subset of the update operations, allowing them to be\n+ * efficiently combined later.",
      "path": "src/crypto/muhash.h",
      "position": 79,
      "original_position": 46,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "d11910b38fab4e3c51be6fcd3c807e4d11ee8669",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Let's add some info about the choice of SHA256 + ChaCha20 here. It essentially compresses the item (e.g. a serialised UTXO) into 3072 bits. Because ChaCha20 doesn't compress - it's designed for encryption - we feed it a SHA256() hash; it then decompresses that 256 bits into 3072.\r\n\r\nWhy 3072 bits? Because it's safe enough, according to @sipa's mailinglist post:\r\n```\r\nThankfully, [6] also shows that the k-sum problem cannot be\r\nefficiently solved in groups in which the discrete logarithm problem\r\nis hard, as an efficient k-sum solver can be used to compute discrete\r\nlogarithms. As a result, MuHash modulo a sufficiently large safe prime\r\nis provably secure under the DL assumption. Common guidelines on\r\nsecurity parameters [7] say that 3072-bit DL has about 128 bits of\r\nsecurity. A final 256-bit hash can be applied to the 3072-bit result\r\nwithout loss of security to reduce the final size.\r\n```\r\n\r\nIIUC we could apply any other digest on a serialised UTXO as long as it produces at least ~3000 bits. Since sha256 and ChaCha20 are well studied an we use them for other things, they do the job.",
      "created_at": "2020-06-09T15:22:14Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r437515881",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437515881"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 79,
      "original_line": 79,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438026185",
      "pull_request_review_id": 427926624,
      "id": 438026185,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODAyNjE4NQ==",
      "diff_hunk": "@@ -0,0 +1,77 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <serialize.h>\n+#include <stdint.h>\n+\n+struct Num3072 {\n+#ifdef HAVE___INT128\n+    typedef unsigned __int128 double_limb_type;\n+    typedef uint64_t limb_type;\n+    static constexpr int LIMBS = 48;\n+    static constexpr int LIMB_SIZE = 64;\n+#else\n+    typedef uint64_t double_limb_type;\n+    typedef uint32_t limb_type;\n+    static constexpr int LIMBS = 96;\n+    static constexpr int LIMB_SIZE = 32;\n+#endif\n+    limb_type limbs[LIMBS];\n+};\n+\n+/** A class representing MuHash sets\n+ *\n+ * MuHash is a hashing algorithm that supports adding set elements in any\n+ * order but also deleting in any order. As a result, it can maintain a\n+ * running sum for a set of data as a whole, and add/subtract when data\n+ * is added to or removed from it. A downside of MuHash is that computing\n+ * an inverse is relatively expensive. This can be solved by representing\n+ * the running value as a fraction, and multiplying added elements into\n+ * the numerator and removed elements into the denominator. Only when the\n+ * final hash is desired, a single modular inverse and multiplication is\n+ * needed to combine the two.\n+ *\n+ * As the update operations are also associative, H(a)+H(b)+H(c)+H(d) can\n+ * in fact be computed as (H(a)+H(b)) + (H(c)+H(d)). This implies that\n+ * all of this is perfectly parallellizable: each thread can process an\n+ * arbitrary subset of the update operations, allowing them to be\n+ * efficiently combined later.",
      "path": "src/crypto/muhash.h",
      "position": 79,
      "original_position": 46,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "d11910b38fab4e3c51be6fcd3c807e4d11ee8669",
      "in_reply_to_id": 437515881,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": ">  Because ChaCha20 doesn't compress - it's designed for encryption - we feed it a SHA256() hash; it then decompresses that 256 bits into 3072.\r\n\r\nI think that argument is a little too ad-hoc for serious crypto. The MuHash paper assumes that elements are first hashed with a hash function that they model as a random oracle (RO). Now while SHA256 with fixed inputs itself is a good choice for something modeled as a RO, this is not immediately clear to me for `ChaCha20-3072-bits(key=SHA256(.))`, even though that looks okay.\r\n\r\nIf SHA256 is modeled as a RO and ChaCha20 as an ideal cipher, then this is probably good. And MuHash assumes a RO but AFACT then relies only on the fact that the outputs are uniformly and independently distributed over the target group (see [Lemma 3.1 in the paper](https://cseweb.ucsd.edu/~mihir/papers/inchash.pdf)) and there is no RO-programming or other advanced stuff involved. And indeed, `ChaCha20-3072-bits(key=SHA256(.))` should be negligibly close to this, even if we just assume that ChaCha20 is a PRF instead of an ideal cipher. But this requires some more attention and some more eyes.",
      "created_at": "2020-06-10T10:35:36Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r438026185",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438026185"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 79,
      "original_line": 79,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438102500",
      "pull_request_review_id": 428026795,
      "id": 438102500,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEwMjUwMA==",
      "diff_hunk": "@@ -0,0 +1,77 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <serialize.h>\n+#include <stdint.h>\n+\n+struct Num3072 {\n+#ifdef HAVE___INT128\n+    typedef unsigned __int128 double_limb_type;\n+    typedef uint64_t limb_type;\n+    static constexpr int LIMBS = 48;\n+    static constexpr int LIMB_SIZE = 64;\n+#else\n+    typedef uint64_t double_limb_type;\n+    typedef uint32_t limb_type;\n+    static constexpr int LIMBS = 96;\n+    static constexpr int LIMB_SIZE = 32;\n+#endif\n+    limb_type limbs[LIMBS];\n+};\n+\n+/** A class representing MuHash sets\n+ *\n+ * MuHash is a hashing algorithm that supports adding set elements in any\n+ * order but also deleting in any order. As a result, it can maintain a\n+ * running sum for a set of data as a whole, and add/subtract when data\n+ * is added to or removed from it. A downside of MuHash is that computing\n+ * an inverse is relatively expensive. This can be solved by representing\n+ * the running value as a fraction, and multiplying added elements into\n+ * the numerator and removed elements into the denominator. Only when the\n+ * final hash is desired, a single modular inverse and multiplication is\n+ * needed to combine the two.\n+ *\n+ * As the update operations are also associative, H(a)+H(b)+H(c)+H(d) can\n+ * in fact be computed as (H(a)+H(b)) + (H(c)+H(d)). This implies that\n+ * all of this is perfectly parallellizable: each thread can process an\n+ * arbitrary subset of the update operations, allowing them to be\n+ * efficiently combined later.",
      "path": "src/crypto/muhash.h",
      "position": 79,
      "original_position": 46,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "d11910b38fab4e3c51be6fcd3c807e4d11ee8669",
      "in_reply_to_id": 437515881,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> I think that argument is a little too ad-hoc for serious crypto.\r\n\r\nCompletely agree. I'm trying to tease out what we know. For the purpose of an index it doesn't matter too much. We can use MuHash to experiment with this concept, and abandon it for something better. By the time anyone proposes to use this for consensus, we'll need a much stronger proof.\r\n\r\nThat said, there should be strongly worded warnings in the header, because other project might prematurely run with this if it \"works in Bitcoin\". ",
      "created_at": "2020-06-10T13:00:47Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r438102500",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438102500"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 79,
      "original_line": 79,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/439532565",
      "pull_request_review_id": 429893490,
      "id": 439532565,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUzMjU2NQ==",
      "diff_hunk": "@@ -4,6 +4,7 @@\n \n \n #include <bench/bench.h>\n+#include <crypto/muhash.h>",
      "path": "src/bench/crypto_hash.cpp",
      "position": 4,
      "original_position": 4,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "fe9ea729fc67e012de773975018a0f749c03790f",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit fe9ea729fc67e012de773975018a0f749c03790f: might as well move all bench code to 5675d28f22b3e3745226f40aac023c0d689b5acd ",
      "created_at": "2020-06-12T16:49:17Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r439532565",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/439532565"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 7,
      "original_line": 7,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/439537666",
      "pull_request_review_id": 429893490,
      "id": 439537666,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUzNzY2Ng==",
      "diff_hunk": "@@ -212,7 +212,6 @@ class SHA256Writer\n \n     uint256 GetHash() {\n         uint256 result;\n-        unsigned char out[32];",
      "path": "src/hash.h",
      "position": null,
      "original_position": 4,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "fe9ea729fc67e012de773975018a0f749c03790f",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`unsigned char out[32];` is added in 106f9148848ffa64b433f1bc2dd6980930a4cb02 and dropped in fe9ea729fc67e012de773975018a0f749c03790f",
      "created_at": "2020-06-12T16:59:28Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r439537666",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/439537666"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 215,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/439813927",
      "pull_request_review_id": 430205685,
      "id": 439813927,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgxMzkyNw==",
      "diff_hunk": "@@ -4,6 +4,7 @@\n \n \n #include <bench/bench.h>\n+#include <crypto/muhash.h>",
      "path": "src/bench/crypto_hash.cpp",
      "position": 4,
      "original_position": 4,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "fe9ea729fc67e012de773975018a0f749c03790f",
      "in_reply_to_id": 439532565,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2020-06-14T10:17:29Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r439813927",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/439813927"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 7,
      "original_line": 7,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/439813934",
      "pull_request_review_id": 430205691,
      "id": 439813934,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgxMzkzNA==",
      "diff_hunk": "@@ -212,7 +212,6 @@ class SHA256Writer\n \n     uint256 GetHash() {\n         uint256 result;\n-        unsigned char out[32];",
      "path": "src/hash.h",
      "position": null,
      "original_position": 4,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "fe9ea729fc67e012de773975018a0f749c03790f",
      "in_reply_to_id": 439537666,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2020-06-14T10:17:33Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r439813934",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/439813934"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 215,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/439879174",
      "pull_request_review_id": 430260841,
      "id": 439879174,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg3OTE3NA==",
      "diff_hunk": "@@ -73,6 +74,13 @@ class MuHash3072\n \n     /* Finalize into a 384-byte hash. Does not change this object's value. */\n     void Finalize(unsigned char* hash384) noexcept;\n+\n+    SERIALIZE_METHODS(MuHash3072, obj)\n+    {\n+        for(int i = 0; i < obj.LIMBS; ++i) {",
      "path": "src/crypto/muhash.h",
      "position": null,
      "original_position": 15,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "d111135a3c928d1915f48cb4d46ca89a3d179686",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "d111135a3c928d1915f48cb4d46ca89a3d179686\r\n\r\nnit, space after `for`.",
      "created_at": "2020-06-14T23:37:26Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r439879174",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/439879174"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 80,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/439879324",
      "pull_request_review_id": 430260841,
      "id": 439879324,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg3OTMyNA==",
      "diff_hunk": "@@ -9,6 +9,7 @@\n #include <config/bitcoin-config.h>\n #endif\n \n+#include <serialize.h>",
      "path": "src/crypto/muhash.h",
      "position": 12,
      "original_position": 4,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "d111135a3c928d1915f48cb4d46ca89a3d179686",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "d111135a3c928d1915f48cb4d46ca89a3d179686\r\n\r\nnit, newline after, usually project headers are split from others.",
      "created_at": "2020-06-14T23:39:36Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r439879324",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/439879324"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 12,
      "original_line": 12,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/439879455",
      "pull_request_review_id": 430260841,
      "id": 439879455,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg3OTQ1NQ==",
      "diff_hunk": "@@ -0,0 +1,277 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+#define MAX_PRIME_DIFF 1103717\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+#define extract3(c0,c1,c2,n) { \\\n+    (n) = c0; \\\n+    c0 = c1; \\\n+    c1 = c2; \\\n+    c2 = 0; \\\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+#define extract2(c0,c1,n) { \\\n+    (n) = c0; \\\n+    c0 = c1; \\\n+    c1 = 0; \\\n+}\n+\n+/** [c0,c1] = a * b */\n+#define mul(c0,c1,a,b) { \\\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)a * b; \\\n+    c2 = 0; \\\n+    c1 = t >> Num3072::LIMB_SIZE; \\\n+    c0 = t; \\\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+#define mulnadd3(c0,c1,c2,d0,d1,d2,n) { \\\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)d0 * n + c0; \\\n+    c0 = t; \\\n+    t >>= Num3072::LIMB_SIZE; \\\n+    t += (Num3072::double_limb_type)d1 * n + c1; \\\n+    c1 = t; \\\n+    t >>= Num3072::LIMB_SIZE; \\\n+    c2 = t + d2 * n; \\\n+}\n+\n+/* [c0,c1] *= n */\n+#define muln2(c0,c1,n) { \\\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)c0 * n; \\\n+    c0 = t; \\\n+    t >>= Num3072::LIMB_SIZE; \\\n+    t += (Num3072::double_limb_type)c1 * n; \\\n+    c1 = t; \\\n+    t >>= Num3072::LIMB_SIZE; \\\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+#define muladd3(c0,c1,c2,a,b) { \\\n+    Num3072::limb_type tl, th; \\\n+    { \\\n+        Num3072::double_limb_type t = (Num3072::double_limb_type)a * b; \\\n+        th = t >> Num3072::LIMB_SIZE; \\\n+        tl = t; \\\n+    } \\\n+    c0 += tl; \\\n+    th += (c0 < tl) ? 1 : 0; \\\n+    c1 += th; \\\n+    c2 += (c1 < th) ? 1 : 0; \\\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+#define muldbladd3(c0,c1,c2,a,b) { \\\n+    Num3072::limb_type tl, th; \\\n+    { \\\n+        Num3072::double_limb_type t = (Num3072::double_limb_type)a * b; \\\n+        th = t >> Num3072::LIMB_SIZE; \\\n+        tl = t; \\\n+    } \\\n+    c0 += tl; \\\n+    Num3072::limb_type tt = th + ((c0 < tl) ? 1 : 0); \\\n+    c1 += tt; \\\n+    c2 += (c1 < tt) ? 1 : 0; \\\n+    c0 += tl; \\\n+    th += (c0 < tl) ? 1 : 0; \\\n+    c1 += th; \\\n+    c2 += (c1 < th) ? 1 : 0; \\\n+}\n+\n+/** [c0,c1] += a */\n+#define add2(c0,c1,a) { \\\n+    c0 += (a); \\\n+    c1 += (c0 < (a)) ? 1 : 0; \\\n+}\n+\n+bool IsOverflow(const Num3072* d)\n+{\n+    for (int i = 1; i < Num3072::LIMBS - 1; ++i) {\n+        if (d->limbs[i] != std::numeric_limits<Num3072::limb_type>::max()) return false;\n+    }\n+    if (d->limbs[0] <= std::numeric_limits<Num3072::limb_type>::max() - MAX_PRIME_DIFF) return false;\n+    return true;\n+}\n+\n+void FullReduce(Num3072* d)\n+{\n+    Num3072::limb_type c0 = MAX_PRIME_DIFF;\n+    for (int i = 0; i < Num3072::LIMBS; ++i) {\n+        Num3072::limb_type c1 = 0;\n+        add2(c0, c1, d->limbs[i]);\n+        extract2(c0, c1, d->limbs[i]);\n+    }\n+}\n+\n+void Multiply(Num3072* out, const Num3072* a, const Num3072* b)\n+{\n+    Num3072::limb_type c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of a*b into tmp, including one reduction. */\n+    for (int j = 0; j < Num3072::LIMBS - 1; ++j) {\n+        Num3072::limb_type d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        mul(d0, d1, a->limbs[1 + j], b->limbs[Num3072::LIMBS + j - (1 + j)]);\n+        for (int i = 2 + j; i < Num3072::LIMBS; ++i) muladd3(d0, d1, d2, a->limbs[i], b->limbs[Num3072::LIMBS + j - i]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < j + 1; ++i) muladd3(c0, c1, c2, a->limbs[i], b->limbs[j - i]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+    /* Compute limb N-1 of a*b into tmp. */\n+    {\n+        Num3072::limb_type c2 = 0;\n+        for (int i = 0; i < Num3072::LIMBS; ++i) muladd3(c0, c1, c2, a->limbs[i], b->limbs[Num3072::LIMBS - 1 - i]);\n+        extract3(c0, c1, c2, tmp.limbs[Num3072::LIMBS - 1]);\n+    }\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < Num3072::LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, out->limbs[j]);\n+    }\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(out);\n+}\n+\n+void Square(Num3072* out, const Num3072* a)\n+{\n+    Num3072::limb_type c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of a*a into tmp, including one reduction. */\n+    for (int j = 0; j < Num3072::LIMBS - 1; ++j) {\n+        Num3072::limb_type d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        for (int i = 0; i < (Num3072::LIMBS - 1 - j) / 2; ++i) muldbladd3(d0, d1, d2, a->limbs[i + j + 1], a->limbs[Num3072::LIMBS - 1 - i]);\n+        if ((j + 1) & 1) muladd3(d0, d1, d2, a->limbs[(Num3072::LIMBS - 1 - j) / 2 + j + 1], a->limbs[Num3072::LIMBS - 1 - (Num3072::LIMBS - 1 - j) / 2]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < (j + 1) / 2; ++i) muldbladd3(c0, c1, c2, a->limbs[i], a->limbs[j - i]);\n+        if ((j + 1) & 1) muladd3(c0, c1, c2, a->limbs[(j + 1) / 2], a->limbs[j - (j + 1) / 2]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+    {\n+        Num3072::limb_type c2 = 0;\n+        for (int i = 0; i < Num3072::LIMBS / 2; ++i) muldbladd3(c0, c1, c2, a->limbs[i], a->limbs[Num3072::LIMBS - 1 - i]);\n+        extract3(c0, c1, c2, tmp.limbs[Num3072::LIMBS - 1]);\n+    }\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < Num3072::LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, out->limbs[j]);\n+    }\n+    assert(c1 == 0);",
      "path": "src/crypto/muhash.cpp",
      "position": 245,
      "original_position": 179,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "4b493677ab2c1d90cb8b11659660d18c3f61171f",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "4b493677ab2c1d90cb8b11659660d18c3f61171f\r\n\r\nShould these assertions be conditional to `#ifdef DEBUG`? Same in `Multiply`.",
      "created_at": "2020-06-14T23:41:04Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r439879455",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/439879455"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 245,
      "original_line": 245,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/439879482",
      "pull_request_review_id": 430260841,
      "id": 439879482,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg3OTQ4Mg==",
      "diff_hunk": "@@ -0,0 +1,277 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+#define MAX_PRIME_DIFF 1103717\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+#define extract3(c0,c1,c2,n) { \\\n+    (n) = c0; \\\n+    c0 = c1; \\\n+    c1 = c2; \\\n+    c2 = 0; \\\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+#define extract2(c0,c1,n) { \\\n+    (n) = c0; \\\n+    c0 = c1; \\\n+    c1 = 0; \\\n+}\n+\n+/** [c0,c1] = a * b */\n+#define mul(c0,c1,a,b) { \\\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)a * b; \\\n+    c2 = 0; \\\n+    c1 = t >> Num3072::LIMB_SIZE; \\\n+    c0 = t; \\\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+#define mulnadd3(c0,c1,c2,d0,d1,d2,n) { \\\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)d0 * n + c0; \\\n+    c0 = t; \\\n+    t >>= Num3072::LIMB_SIZE; \\\n+    t += (Num3072::double_limb_type)d1 * n + c1; \\\n+    c1 = t; \\\n+    t >>= Num3072::LIMB_SIZE; \\\n+    c2 = t + d2 * n; \\\n+}\n+\n+/* [c0,c1] *= n */\n+#define muln2(c0,c1,n) { \\\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)c0 * n; \\\n+    c0 = t; \\\n+    t >>= Num3072::LIMB_SIZE; \\\n+    t += (Num3072::double_limb_type)c1 * n; \\\n+    c1 = t; \\\n+    t >>= Num3072::LIMB_SIZE; \\\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+#define muladd3(c0,c1,c2,a,b) { \\\n+    Num3072::limb_type tl, th; \\\n+    { \\\n+        Num3072::double_limb_type t = (Num3072::double_limb_type)a * b; \\\n+        th = t >> Num3072::LIMB_SIZE; \\\n+        tl = t; \\\n+    } \\\n+    c0 += tl; \\\n+    th += (c0 < tl) ? 1 : 0; \\\n+    c1 += th; \\\n+    c2 += (c1 < th) ? 1 : 0; \\\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+#define muldbladd3(c0,c1,c2,a,b) { \\\n+    Num3072::limb_type tl, th; \\\n+    { \\\n+        Num3072::double_limb_type t = (Num3072::double_limb_type)a * b; \\\n+        th = t >> Num3072::LIMB_SIZE; \\\n+        tl = t; \\\n+    } \\\n+    c0 += tl; \\\n+    Num3072::limb_type tt = th + ((c0 < tl) ? 1 : 0); \\\n+    c1 += tt; \\\n+    c2 += (c1 < tt) ? 1 : 0; \\\n+    c0 += tl; \\\n+    th += (c0 < tl) ? 1 : 0; \\\n+    c1 += th; \\\n+    c2 += (c1 < th) ? 1 : 0; \\\n+}\n+\n+/** [c0,c1] += a */\n+#define add2(c0,c1,a) { \\\n+    c0 += (a); \\\n+    c1 += (c0 < (a)) ? 1 : 0; \\\n+}\n+\n+bool IsOverflow(const Num3072* d)\n+{\n+    for (int i = 1; i < Num3072::LIMBS - 1; ++i) {\n+        if (d->limbs[i] != std::numeric_limits<Num3072::limb_type>::max()) return false;\n+    }\n+    if (d->limbs[0] <= std::numeric_limits<Num3072::limb_type>::max() - MAX_PRIME_DIFF) return false;\n+    return true;\n+}\n+\n+void FullReduce(Num3072* d)\n+{\n+    Num3072::limb_type c0 = MAX_PRIME_DIFF;\n+    for (int i = 0; i < Num3072::LIMBS; ++i) {\n+        Num3072::limb_type c1 = 0;\n+        add2(c0, c1, d->limbs[i]);\n+        extract2(c0, c1, d->limbs[i]);\n+    }\n+}\n+\n+void Multiply(Num3072* out, const Num3072* a, const Num3072* b)\n+{\n+    Num3072::limb_type c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of a*b into tmp, including one reduction. */\n+    for (int j = 0; j < Num3072::LIMBS - 1; ++j) {\n+        Num3072::limb_type d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        mul(d0, d1, a->limbs[1 + j], b->limbs[Num3072::LIMBS + j - (1 + j)]);\n+        for (int i = 2 + j; i < Num3072::LIMBS; ++i) muladd3(d0, d1, d2, a->limbs[i], b->limbs[Num3072::LIMBS + j - i]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < j + 1; ++i) muladd3(c0, c1, c2, a->limbs[i], b->limbs[j - i]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+    /* Compute limb N-1 of a*b into tmp. */\n+    {\n+        Num3072::limb_type c2 = 0;\n+        for (int i = 0; i < Num3072::LIMBS; ++i) muladd3(c0, c1, c2, a->limbs[i], b->limbs[Num3072::LIMBS - 1 - i]);\n+        extract3(c0, c1, c2, tmp.limbs[Num3072::LIMBS - 1]);\n+    }\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < Num3072::LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, out->limbs[j]);\n+    }\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(out);\n+}\n+\n+void Square(Num3072* out, const Num3072* a)\n+{\n+    Num3072::limb_type c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of a*a into tmp, including one reduction. */\n+    for (int j = 0; j < Num3072::LIMBS - 1; ++j) {\n+        Num3072::limb_type d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        for (int i = 0; i < (Num3072::LIMBS - 1 - j) / 2; ++i) muldbladd3(d0, d1, d2, a->limbs[i + j + 1], a->limbs[Num3072::LIMBS - 1 - i]);\n+        if ((j + 1) & 1) muladd3(d0, d1, d2, a->limbs[(Num3072::LIMBS - 1 - j) / 2 + j + 1], a->limbs[Num3072::LIMBS - 1 - (Num3072::LIMBS - 1 - j) / 2]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < (j + 1) / 2; ++i) muldbladd3(c0, c1, c2, a->limbs[i], a->limbs[j - i]);\n+        if ((j + 1) & 1) muladd3(c0, c1, c2, a->limbs[(j + 1) / 2], a->limbs[j - (j + 1) / 2]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+    {\n+        Num3072::limb_type c2 = 0;\n+        for (int i = 0; i < Num3072::LIMBS / 2; ++i) muldbladd3(c0, c1, c2, a->limbs[i], a->limbs[Num3072::LIMBS - 1 - i]);\n+        extract3(c0, c1, c2, tmp.limbs[Num3072::LIMBS - 1]);\n+    }\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < Num3072::LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, out->limbs[j]);\n+    }\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(out);\n+}\n+\n+void Inverse(Num3072* out, const Num3072* a)\n+{\n+    Num3072 p[12]; // p[i] = a^(2^(2^i)-1)\n+    Num3072 x;\n+\n+    p[0] = *a;\n+\n+    for (int i = 0; i < 11; ++i) {\n+        p[i + 1] = p[i];\n+        for (int j = 0; j < (1 << i); ++j) Square(&p[i + 1], &p[i + 1]);\n+        Multiply(&p[i + 1], &p[i + 1], &p[i]);\n+    }\n+\n+    x = p[11];\n+\n+    for (int j = 0; j < 512; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[9]);\n+    for (int j = 0; j < 256; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[8]);\n+    for (int j = 0; j < 128; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[7]);\n+    for (int j = 0; j < 64; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[6]);\n+    for (int j = 0; j < 32; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[5]);\n+    for (int j = 0; j < 8; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[3]);\n+    for (int j = 0; j < 2; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[1]);\n+    for (int j = 0; j < 1; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[0]);\n+    for (int j = 0; j < 5; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[2]);\n+    for (int j = 0; j < 3; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[0]);\n+    for (int j = 0; j < 2; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[0]);\n+    for (int j = 0; j < 4; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[0]);\n+    for (int j = 0; j < 4; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[1]);\n+    for (int j = 0; j < 3; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[0]);\n+\n+    *out = x;\n+}\n+\n+}",
      "path": "src/crypto/muhash.cpp",
      "position": 260,
      "original_position": 232,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "4b493677ab2c1d90cb8b11659660d18c3f61171f",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "4b493677ab2c1d90cb8b11659660d18c3f61171f\r\n\r\nnit, add `// namespace`.",
      "created_at": "2020-06-14T23:41:26Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r439879482",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/439879482"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 260,
      "original_line": 260,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/439880752",
      "pull_request_review_id": 430260841,
      "id": 439880752,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg4MDc1Mg==",
      "diff_hunk": "@@ -191,6 +191,39 @@ class CHashVerifier : public CHashWriter\n     }\n };\n \n+/** A writer stream that computes a SHA256 hash. */\n+class SHA256Writer\n+{\n+private:\n+    CSHA256 ctx;\n+\n+    const int nType;",
      "path": "src/hash.h",
      "position": null,
      "original_position": 10,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "18c4d69f8d771aa596a321cf1d6c8e6e106d42a9",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "18c4d69f8d771aa596a321cf1d6c8e6e106d42a9\r\n\r\nnit, should fix format.",
      "created_at": "2020-06-14T23:55:13Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r439880752",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/439880752"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 200,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440221681",
      "pull_request_review_id": 430704951,
      "id": 440221681,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDIyMTY4MQ==",
      "diff_hunk": "@@ -191,6 +191,39 @@ class CHashVerifier : public CHashWriter\n     }\n };\n \n+/** A writer stream that computes a SHA256 hash. */\n+class SHA256Writer\n+{\n+private:\n+    CSHA256 ctx;\n+\n+    const int nType;",
      "path": "src/hash.h",
      "position": null,
      "original_position": 10,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "18c4d69f8d771aa596a321cf1d6c8e6e106d42a9",
      "in_reply_to_id": 439880752,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2020-06-15T14:35:28Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r440221681",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440221681"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 200,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440221759",
      "pull_request_review_id": 430705047,
      "id": 440221759,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDIyMTc1OQ==",
      "diff_hunk": "@@ -0,0 +1,277 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+#define MAX_PRIME_DIFF 1103717\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+#define extract3(c0,c1,c2,n) { \\\n+    (n) = c0; \\\n+    c0 = c1; \\\n+    c1 = c2; \\\n+    c2 = 0; \\\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+#define extract2(c0,c1,n) { \\\n+    (n) = c0; \\\n+    c0 = c1; \\\n+    c1 = 0; \\\n+}\n+\n+/** [c0,c1] = a * b */\n+#define mul(c0,c1,a,b) { \\\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)a * b; \\\n+    c2 = 0; \\\n+    c1 = t >> Num3072::LIMB_SIZE; \\\n+    c0 = t; \\\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+#define mulnadd3(c0,c1,c2,d0,d1,d2,n) { \\\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)d0 * n + c0; \\\n+    c0 = t; \\\n+    t >>= Num3072::LIMB_SIZE; \\\n+    t += (Num3072::double_limb_type)d1 * n + c1; \\\n+    c1 = t; \\\n+    t >>= Num3072::LIMB_SIZE; \\\n+    c2 = t + d2 * n; \\\n+}\n+\n+/* [c0,c1] *= n */\n+#define muln2(c0,c1,n) { \\\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)c0 * n; \\\n+    c0 = t; \\\n+    t >>= Num3072::LIMB_SIZE; \\\n+    t += (Num3072::double_limb_type)c1 * n; \\\n+    c1 = t; \\\n+    t >>= Num3072::LIMB_SIZE; \\\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+#define muladd3(c0,c1,c2,a,b) { \\\n+    Num3072::limb_type tl, th; \\\n+    { \\\n+        Num3072::double_limb_type t = (Num3072::double_limb_type)a * b; \\\n+        th = t >> Num3072::LIMB_SIZE; \\\n+        tl = t; \\\n+    } \\\n+    c0 += tl; \\\n+    th += (c0 < tl) ? 1 : 0; \\\n+    c1 += th; \\\n+    c2 += (c1 < th) ? 1 : 0; \\\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+#define muldbladd3(c0,c1,c2,a,b) { \\\n+    Num3072::limb_type tl, th; \\\n+    { \\\n+        Num3072::double_limb_type t = (Num3072::double_limb_type)a * b; \\\n+        th = t >> Num3072::LIMB_SIZE; \\\n+        tl = t; \\\n+    } \\\n+    c0 += tl; \\\n+    Num3072::limb_type tt = th + ((c0 < tl) ? 1 : 0); \\\n+    c1 += tt; \\\n+    c2 += (c1 < tt) ? 1 : 0; \\\n+    c0 += tl; \\\n+    th += (c0 < tl) ? 1 : 0; \\\n+    c1 += th; \\\n+    c2 += (c1 < th) ? 1 : 0; \\\n+}\n+\n+/** [c0,c1] += a */\n+#define add2(c0,c1,a) { \\\n+    c0 += (a); \\\n+    c1 += (c0 < (a)) ? 1 : 0; \\\n+}\n+\n+bool IsOverflow(const Num3072* d)\n+{\n+    for (int i = 1; i < Num3072::LIMBS - 1; ++i) {\n+        if (d->limbs[i] != std::numeric_limits<Num3072::limb_type>::max()) return false;\n+    }\n+    if (d->limbs[0] <= std::numeric_limits<Num3072::limb_type>::max() - MAX_PRIME_DIFF) return false;\n+    return true;\n+}\n+\n+void FullReduce(Num3072* d)\n+{\n+    Num3072::limb_type c0 = MAX_PRIME_DIFF;\n+    for (int i = 0; i < Num3072::LIMBS; ++i) {\n+        Num3072::limb_type c1 = 0;\n+        add2(c0, c1, d->limbs[i]);\n+        extract2(c0, c1, d->limbs[i]);\n+    }\n+}\n+\n+void Multiply(Num3072* out, const Num3072* a, const Num3072* b)\n+{\n+    Num3072::limb_type c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of a*b into tmp, including one reduction. */\n+    for (int j = 0; j < Num3072::LIMBS - 1; ++j) {\n+        Num3072::limb_type d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        mul(d0, d1, a->limbs[1 + j], b->limbs[Num3072::LIMBS + j - (1 + j)]);\n+        for (int i = 2 + j; i < Num3072::LIMBS; ++i) muladd3(d0, d1, d2, a->limbs[i], b->limbs[Num3072::LIMBS + j - i]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < j + 1; ++i) muladd3(c0, c1, c2, a->limbs[i], b->limbs[j - i]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+    /* Compute limb N-1 of a*b into tmp. */\n+    {\n+        Num3072::limb_type c2 = 0;\n+        for (int i = 0; i < Num3072::LIMBS; ++i) muladd3(c0, c1, c2, a->limbs[i], b->limbs[Num3072::LIMBS - 1 - i]);\n+        extract3(c0, c1, c2, tmp.limbs[Num3072::LIMBS - 1]);\n+    }\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < Num3072::LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, out->limbs[j]);\n+    }\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(out);\n+}\n+\n+void Square(Num3072* out, const Num3072* a)\n+{\n+    Num3072::limb_type c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of a*a into tmp, including one reduction. */\n+    for (int j = 0; j < Num3072::LIMBS - 1; ++j) {\n+        Num3072::limb_type d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        for (int i = 0; i < (Num3072::LIMBS - 1 - j) / 2; ++i) muldbladd3(d0, d1, d2, a->limbs[i + j + 1], a->limbs[Num3072::LIMBS - 1 - i]);\n+        if ((j + 1) & 1) muladd3(d0, d1, d2, a->limbs[(Num3072::LIMBS - 1 - j) / 2 + j + 1], a->limbs[Num3072::LIMBS - 1 - (Num3072::LIMBS - 1 - j) / 2]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < (j + 1) / 2; ++i) muldbladd3(c0, c1, c2, a->limbs[i], a->limbs[j - i]);\n+        if ((j + 1) & 1) muladd3(c0, c1, c2, a->limbs[(j + 1) / 2], a->limbs[j - (j + 1) / 2]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+    {\n+        Num3072::limb_type c2 = 0;\n+        for (int i = 0; i < Num3072::LIMBS / 2; ++i) muldbladd3(c0, c1, c2, a->limbs[i], a->limbs[Num3072::LIMBS - 1 - i]);\n+        extract3(c0, c1, c2, tmp.limbs[Num3072::LIMBS - 1]);\n+    }\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < Num3072::LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, out->limbs[j]);\n+    }\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(out);\n+}\n+\n+void Inverse(Num3072* out, const Num3072* a)\n+{\n+    Num3072 p[12]; // p[i] = a^(2^(2^i)-1)\n+    Num3072 x;\n+\n+    p[0] = *a;\n+\n+    for (int i = 0; i < 11; ++i) {\n+        p[i + 1] = p[i];\n+        for (int j = 0; j < (1 << i); ++j) Square(&p[i + 1], &p[i + 1]);\n+        Multiply(&p[i + 1], &p[i + 1], &p[i]);\n+    }\n+\n+    x = p[11];\n+\n+    for (int j = 0; j < 512; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[9]);\n+    for (int j = 0; j < 256; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[8]);\n+    for (int j = 0; j < 128; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[7]);\n+    for (int j = 0; j < 64; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[6]);\n+    for (int j = 0; j < 32; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[5]);\n+    for (int j = 0; j < 8; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[3]);\n+    for (int j = 0; j < 2; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[1]);\n+    for (int j = 0; j < 1; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[0]);\n+    for (int j = 0; j < 5; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[2]);\n+    for (int j = 0; j < 3; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[0]);\n+    for (int j = 0; j < 2; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[0]);\n+    for (int j = 0; j < 4; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[0]);\n+    for (int j = 0; j < 4; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[1]);\n+    for (int j = 0; j < 3; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[0]);\n+\n+    *out = x;\n+}\n+\n+}",
      "path": "src/crypto/muhash.cpp",
      "position": 260,
      "original_position": 232,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "4b493677ab2c1d90cb8b11659660d18c3f61171f",
      "in_reply_to_id": 439879482,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2020-06-15T14:35:34Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r440221759",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440221759"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 260,
      "original_line": 260,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440221831",
      "pull_request_review_id": 430705145,
      "id": 440221831,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDIyMTgzMQ==",
      "diff_hunk": "@@ -0,0 +1,277 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+#define MAX_PRIME_DIFF 1103717\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+#define extract3(c0,c1,c2,n) { \\\n+    (n) = c0; \\\n+    c0 = c1; \\\n+    c1 = c2; \\\n+    c2 = 0; \\\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+#define extract2(c0,c1,n) { \\\n+    (n) = c0; \\\n+    c0 = c1; \\\n+    c1 = 0; \\\n+}\n+\n+/** [c0,c1] = a * b */\n+#define mul(c0,c1,a,b) { \\\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)a * b; \\\n+    c2 = 0; \\\n+    c1 = t >> Num3072::LIMB_SIZE; \\\n+    c0 = t; \\\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+#define mulnadd3(c0,c1,c2,d0,d1,d2,n) { \\\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)d0 * n + c0; \\\n+    c0 = t; \\\n+    t >>= Num3072::LIMB_SIZE; \\\n+    t += (Num3072::double_limb_type)d1 * n + c1; \\\n+    c1 = t; \\\n+    t >>= Num3072::LIMB_SIZE; \\\n+    c2 = t + d2 * n; \\\n+}\n+\n+/* [c0,c1] *= n */\n+#define muln2(c0,c1,n) { \\\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)c0 * n; \\\n+    c0 = t; \\\n+    t >>= Num3072::LIMB_SIZE; \\\n+    t += (Num3072::double_limb_type)c1 * n; \\\n+    c1 = t; \\\n+    t >>= Num3072::LIMB_SIZE; \\\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+#define muladd3(c0,c1,c2,a,b) { \\\n+    Num3072::limb_type tl, th; \\\n+    { \\\n+        Num3072::double_limb_type t = (Num3072::double_limb_type)a * b; \\\n+        th = t >> Num3072::LIMB_SIZE; \\\n+        tl = t; \\\n+    } \\\n+    c0 += tl; \\\n+    th += (c0 < tl) ? 1 : 0; \\\n+    c1 += th; \\\n+    c2 += (c1 < th) ? 1 : 0; \\\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+#define muldbladd3(c0,c1,c2,a,b) { \\\n+    Num3072::limb_type tl, th; \\\n+    { \\\n+        Num3072::double_limb_type t = (Num3072::double_limb_type)a * b; \\\n+        th = t >> Num3072::LIMB_SIZE; \\\n+        tl = t; \\\n+    } \\\n+    c0 += tl; \\\n+    Num3072::limb_type tt = th + ((c0 < tl) ? 1 : 0); \\\n+    c1 += tt; \\\n+    c2 += (c1 < tt) ? 1 : 0; \\\n+    c0 += tl; \\\n+    th += (c0 < tl) ? 1 : 0; \\\n+    c1 += th; \\\n+    c2 += (c1 < th) ? 1 : 0; \\\n+}\n+\n+/** [c0,c1] += a */\n+#define add2(c0,c1,a) { \\\n+    c0 += (a); \\\n+    c1 += (c0 < (a)) ? 1 : 0; \\\n+}\n+\n+bool IsOverflow(const Num3072* d)\n+{\n+    for (int i = 1; i < Num3072::LIMBS - 1; ++i) {\n+        if (d->limbs[i] != std::numeric_limits<Num3072::limb_type>::max()) return false;\n+    }\n+    if (d->limbs[0] <= std::numeric_limits<Num3072::limb_type>::max() - MAX_PRIME_DIFF) return false;\n+    return true;\n+}\n+\n+void FullReduce(Num3072* d)\n+{\n+    Num3072::limb_type c0 = MAX_PRIME_DIFF;\n+    for (int i = 0; i < Num3072::LIMBS; ++i) {\n+        Num3072::limb_type c1 = 0;\n+        add2(c0, c1, d->limbs[i]);\n+        extract2(c0, c1, d->limbs[i]);\n+    }\n+}\n+\n+void Multiply(Num3072* out, const Num3072* a, const Num3072* b)\n+{\n+    Num3072::limb_type c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of a*b into tmp, including one reduction. */\n+    for (int j = 0; j < Num3072::LIMBS - 1; ++j) {\n+        Num3072::limb_type d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        mul(d0, d1, a->limbs[1 + j], b->limbs[Num3072::LIMBS + j - (1 + j)]);\n+        for (int i = 2 + j; i < Num3072::LIMBS; ++i) muladd3(d0, d1, d2, a->limbs[i], b->limbs[Num3072::LIMBS + j - i]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < j + 1; ++i) muladd3(c0, c1, c2, a->limbs[i], b->limbs[j - i]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+    /* Compute limb N-1 of a*b into tmp. */\n+    {\n+        Num3072::limb_type c2 = 0;\n+        for (int i = 0; i < Num3072::LIMBS; ++i) muladd3(c0, c1, c2, a->limbs[i], b->limbs[Num3072::LIMBS - 1 - i]);\n+        extract3(c0, c1, c2, tmp.limbs[Num3072::LIMBS - 1]);\n+    }\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < Num3072::LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, out->limbs[j]);\n+    }\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(out);\n+}\n+\n+void Square(Num3072* out, const Num3072* a)\n+{\n+    Num3072::limb_type c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of a*a into tmp, including one reduction. */\n+    for (int j = 0; j < Num3072::LIMBS - 1; ++j) {\n+        Num3072::limb_type d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        for (int i = 0; i < (Num3072::LIMBS - 1 - j) / 2; ++i) muldbladd3(d0, d1, d2, a->limbs[i + j + 1], a->limbs[Num3072::LIMBS - 1 - i]);\n+        if ((j + 1) & 1) muladd3(d0, d1, d2, a->limbs[(Num3072::LIMBS - 1 - j) / 2 + j + 1], a->limbs[Num3072::LIMBS - 1 - (Num3072::LIMBS - 1 - j) / 2]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < (j + 1) / 2; ++i) muldbladd3(c0, c1, c2, a->limbs[i], a->limbs[j - i]);\n+        if ((j + 1) & 1) muladd3(c0, c1, c2, a->limbs[(j + 1) / 2], a->limbs[j - (j + 1) / 2]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+    {\n+        Num3072::limb_type c2 = 0;\n+        for (int i = 0; i < Num3072::LIMBS / 2; ++i) muldbladd3(c0, c1, c2, a->limbs[i], a->limbs[Num3072::LIMBS - 1 - i]);\n+        extract3(c0, c1, c2, tmp.limbs[Num3072::LIMBS - 1]);\n+    }\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < Num3072::LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, out->limbs[j]);\n+    }\n+    assert(c1 == 0);",
      "path": "src/crypto/muhash.cpp",
      "position": 245,
      "original_position": 179,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "4b493677ab2c1d90cb8b11659660d18c3f61171f",
      "in_reply_to_id": 439879455,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Makes sense to me. Added.",
      "created_at": "2020-06-15T14:35:39Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r440221831",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440221831"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 245,
      "original_line": 245,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440221890",
      "pull_request_review_id": 430705216,
      "id": 440221890,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDIyMTg5MA==",
      "diff_hunk": "@@ -9,6 +9,7 @@\n #include <config/bitcoin-config.h>\n #endif\n \n+#include <serialize.h>",
      "path": "src/crypto/muhash.h",
      "position": 12,
      "original_position": 4,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "d111135a3c928d1915f48cb4d46ca89a3d179686",
      "in_reply_to_id": 439879324,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2020-06-15T14:35:44Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r440221890",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440221890"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 12,
      "original_line": 12,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440221999",
      "pull_request_review_id": 430705362,
      "id": 440221999,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDIyMTk5OQ==",
      "diff_hunk": "@@ -73,6 +74,13 @@ class MuHash3072\n \n     /* Finalize into a 384-byte hash. Does not change this object's value. */\n     void Finalize(unsigned char* hash384) noexcept;\n+\n+    SERIALIZE_METHODS(MuHash3072, obj)\n+    {\n+        for(int i = 0; i < obj.LIMBS; ++i) {",
      "path": "src/crypto/muhash.h",
      "position": null,
      "original_position": 15,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "d111135a3c928d1915f48cb4d46ca89a3d179686",
      "in_reply_to_id": 439879174,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2020-06-15T14:35:53Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r440221999",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440221999"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 80,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/442211563",
      "pull_request_review_id": 433263304,
      "id": 442211563,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIxMTU2Mw==",
      "diff_hunk": "@@ -0,0 +1,281 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+#define MAX_PRIME_DIFF 1103717\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+#define extract3(c0,c1,c2,n) { \\",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 21,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "3585297e5e7578150683b809dd7b46bcaf63351f",
      "in_reply_to_id": null,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why are these implemented as macros instead of (inline) functions?",
      "created_at": "2020-06-18T13:07:41Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r442211563",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/442211563"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 21,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448624203",
      "pull_request_review_id": 441206737,
      "id": 448624203,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyNDIwMw==",
      "diff_hunk": "@@ -0,0 +1,281 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+#define MAX_PRIME_DIFF 1103717\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+#define extract3(c0,c1,c2,n) { \\",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 21,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "3585297e5e7578150683b809dd7b46bcaf63351f",
      "in_reply_to_id": 442211563,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I am not aware of a reason why inline functions couldn't be used here. From my side, the only reason is that this is @sipa 's original code and I did not feel so strongly about it that it justified a bigger change. Of course, I will do it if that's preferred by reviewers.",
      "created_at": "2020-07-01T21:25:06Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r448624203",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448624203"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 21,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448630059",
      "pull_request_review_id": 441213789,
      "id": 448630059,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYzMDA1OQ==",
      "diff_hunk": "@@ -0,0 +1,281 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+#define MAX_PRIME_DIFF 1103717\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+#define extract3(c0,c1,c2,n) { \\",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 21,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "3585297e5e7578150683b809dd7b46bcaf63351f",
      "in_reply_to_id": 442211563,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It may have been that I copied this from code that was originally written for C.\r\n\r\nFeel free to change it; inline functions would be far more C++ish.",
      "created_at": "2020-07-01T21:39:01Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r448630059",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448630059"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 21,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448630571",
      "pull_request_review_id": 441214410,
      "id": 448630571,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYzMDU3MQ==",
      "diff_hunk": "@@ -33,6 +34,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     CSHA256 sha256;\n     CSHA512 sha512;\n     CSipHasher sip_hasher{fuzzed_data_provider.ConsumeIntegral<uint64_t>(), fuzzed_data_provider.ConsumeIntegral<uint64_t>()};\n+    MuHash3072 muhash = MuHash3072();",
      "path": "src/test/fuzz/crypto.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "62e842c15eeb7af5d195200d6a605113f16a7e39",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: `MuHash3072 muhash;` is enough :)",
      "created_at": "2020-07-01T21:40:17Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r448630571",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448630571"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448633047",
      "pull_request_review_id": 441214410,
      "id": 448633047,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYzMzA0Nw==",
      "diff_hunk": "@@ -58,6 +60,14 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n             (void)Hash160(data);\n             (void)Hash160(data.begin(), data.end());\n             (void)sha512.Size();\n+\n+            // MuHash3072 only accepts a fixed key length of 32 bytes\n+            data.resize(32);",
      "path": "src/test/fuzz/crypto.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "62e842c15eeb7af5d195200d6a605113f16a7e39",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "To not interfere with the other fuzzers by changing the data size, what about either creating a new `case 3` specifically for this MuHash3072 code (the resize and the lines immediately below), or alternatively do something along the lines of `std::vector<uint8_t> muhash_data = data;` + `muhash_data.resize(32);`?",
      "created_at": "2020-07-01T21:46:14Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r448633047",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448633047"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 65,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448634840",
      "pull_request_review_id": 441214410,
      "id": 448634840,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYzNDg0MA==",
      "diff_hunk": "@@ -67,10 +77,11 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n             (void)sha1.Reset();\n             (void)sha256.Reset();\n             (void)sha512.Reset();\n+            muhash = MuHash3072();",
      "path": "src/test/fuzz/crypto.cpp",
      "position": 33,
      "original_position": 35,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "62e842c15eeb7af5d195200d6a605113f16a7e39",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Make sure you also exercise the other constructor `MuHash3072::MuHash3072(const unsigned char* key32)`. Perhaps `ConsumeBool()` to choose which constructor to use?\r\n\r\nGenerally a good thing to do when testing a fuzzer is to add `assert(false);` to all code paths you want to reach and then fuzz/tweak/repeat until you've reached them all.\r\n\r\nIn this case we want to make sure that relevant code paths in the following functions are covered:\r\n\r\n```\r\nMuHash3072::MuHash3072() noexcept\r\nMuHash3072::MuHash3072(const unsigned char* key32) noexcept\r\nvoid MuHash3072::Finalize(unsigned char* hash384) noexcept\r\nMuHash3072& MuHash3072::operator*=(const MuHash3072& x) noexcept\r\nMuHash3072& MuHash3072::operator/=(const MuHash3072& x) noexcept\r\n```",
      "created_at": "2020-07-01T21:50:38Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r448634840",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448634840"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 81,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448638490",
      "pull_request_review_id": 441223837,
      "id": 448638490,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYzODQ5MA==",
      "diff_hunk": "@@ -33,6 +34,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     CSHA256 sha256;\n     CSHA512 sha512;\n     CSipHasher sip_hasher{fuzzed_data_provider.ConsumeIntegral<uint64_t>(), fuzzed_data_provider.ConsumeIntegral<uint64_t>()};\n+    MuHash3072 muhash = MuHash3072();",
      "path": "src/test/fuzz/crypto.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "62e842c15eeb7af5d195200d6a605113f16a7e39",
      "in_reply_to_id": 448630571,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Brevity is the soul of wit",
      "created_at": "2020-07-01T22:00:07Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r448638490",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/448638490"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/452886409",
      "pull_request_review_id": 446457462,
      "id": 452886409,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg4NjQwOQ==",
      "diff_hunk": "@@ -33,6 +34,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     CSHA256 sha256;\n     CSHA512 sha512;\n     CSipHasher sip_hasher{fuzzed_data_provider.ConsumeIntegral<uint64_t>(), fuzzed_data_provider.ConsumeIntegral<uint64_t>()};\n+    MuHash3072 muhash = MuHash3072();",
      "path": "src/test/fuzz/crypto.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "62e842c15eeb7af5d195200d6a605113f16a7e39",
      "in_reply_to_id": 448630571,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2020-07-10T14:40:33Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r452886409",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/452886409"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/452886730",
      "pull_request_review_id": 446457867,
      "id": 452886730,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg4NjczMA==",
      "diff_hunk": "@@ -58,6 +60,14 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n             (void)Hash160(data);\n             (void)Hash160(data.begin(), data.end());\n             (void)sha512.Size();\n+\n+            // MuHash3072 only accepts a fixed key length of 32 bytes\n+            data.resize(32);",
      "path": "src/test/fuzz/crypto.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "62e842c15eeb7af5d195200d6a605113f16a7e39",
      "in_reply_to_id": 448633047,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done, opted for your second suggestion.",
      "created_at": "2020-07-10T14:41:01Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r452886730",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/452886730"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 65,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/452887936",
      "pull_request_review_id": 446459430,
      "id": 452887936,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg4NzkzNg==",
      "diff_hunk": "@@ -67,10 +77,11 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n             (void)sha1.Reset();\n             (void)sha256.Reset();\n             (void)sha512.Reset();\n+            muhash = MuHash3072();",
      "path": "src/test/fuzz/crypto.cpp",
      "position": 33,
      "original_position": 35,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "62e842c15eeb7af5d195200d6a605113f16a7e39",
      "in_reply_to_id": 448634840,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That constructor is used for the MuHash objects that get added or removed. I checked all the public functions as you suggested and they seem to all be covered.",
      "created_at": "2020-07-10T14:43:00Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r452887936",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/452887936"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 81,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455770853",
      "pull_request_review_id": 449827562,
      "id": 455770853,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc3MDg1Mw==",
      "diff_hunk": "@@ -132,20 +132,33 @@ class CHashWriter\n         ctx.Write((const unsigned char*)pch, size);\n     }\n \n-    // invalidates the object\n+    /** Compute the double-SHA256 hash of all data written to this object.\n+     *\n+     * Invalidates this object.\n+     */\n     uint256 GetHash() {\n         uint256 result;\n-        ctx.Finalize((unsigned char*)&result);\n+        ctx.Finalize(result.begin());\n+        ctx.Reset().Write(result.begin(), CSHA256::OUTPUT_SIZE).Finalize(result.begin());\n+        return result;\n+    }\n+\n+    /** Compute the SHA256 hash of all data written to this object.\n+     *\n+     * Invalidates this object.\n+     */\n+    uint256 GetSHA256() {\n+        uint256 result;\n+        ctx.Finalize(result.begin());\n         return result;\n     }\n \n     /**\n      * Returns the first 64 bits from the resulting hash.\n      */\n     inline uint64_t GetCheapHash() {\n-        unsigned char result[CHash256::OUTPUT_SIZE];\n-        ctx.Finalize(result);\n-        return ReadLE64(result);\n+        uint256 result = GetHash();",
      "path": "src/hash.h",
      "position": null,
      "original_position": 43,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "00a578e9bc5a2b691d529780824c90333013f1d6",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Shouldn't `GetCheapHash` be calling `GetSHA256`? I.e. \"Cheap\" refers to a single rather than a double hash. cc @JeremyRubin @sipa ",
      "created_at": "2020-07-16T13:06:48Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r455770853",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/455770853"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 143,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460171013",
      "pull_request_review_id": 455038093,
      "id": 460171013,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE3MTAxMw==",
      "diff_hunk": "@@ -132,20 +132,33 @@ class CHashWriter\n         ctx.Write((const unsigned char*)pch, size);\n     }\n \n-    // invalidates the object\n+    /** Compute the double-SHA256 hash of all data written to this object.\n+     *\n+     * Invalidates this object.\n+     */\n     uint256 GetHash() {\n         uint256 result;\n-        ctx.Finalize((unsigned char*)&result);\n+        ctx.Finalize(result.begin());\n+        ctx.Reset().Write(result.begin(), CSHA256::OUTPUT_SIZE).Finalize(result.begin());\n+        return result;\n+    }\n+\n+    /** Compute the SHA256 hash of all data written to this object.\n+     *\n+     * Invalidates this object.\n+     */\n+    uint256 GetSHA256() {\n+        uint256 result;\n+        ctx.Finalize(result.begin());\n         return result;\n     }\n \n     /**\n      * Returns the first 64 bits from the resulting hash.\n      */\n     inline uint64_t GetCheapHash() {\n-        unsigned char result[CHash256::OUTPUT_SIZE];\n-        ctx.Finalize(result);\n-        return ReadLE64(result);\n+        uint256 result = GetHash();",
      "path": "src/hash.h",
      "position": null,
      "original_position": 43,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "00a578e9bc5a2b691d529780824c90333013f1d6",
      "in_reply_to_id": 455770853,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No because it's a behavior change :/\r\n\r\nIf someone wants to make sure that we don't rely on cheaphashes being consistent across boots then yes.",
      "created_at": "2020-07-24T16:49:32Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r460171013",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460171013"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 143,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460172516",
      "pull_request_review_id": 455039920,
      "id": 460172516,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE3MjUxNg==",
      "diff_hunk": "@@ -132,20 +132,33 @@ class CHashWriter\n         ctx.Write((const unsigned char*)pch, size);\n     }\n \n-    // invalidates the object\n+    /** Compute the double-SHA256 hash of all data written to this object.\n+     *\n+     * Invalidates this object.\n+     */\n     uint256 GetHash() {\n         uint256 result;\n-        ctx.Finalize((unsigned char*)&result);\n+        ctx.Finalize(result.begin());\n+        ctx.Reset().Write(result.begin(), CSHA256::OUTPUT_SIZE).Finalize(result.begin());\n+        return result;\n+    }\n+\n+    /** Compute the SHA256 hash of all data written to this object.\n+     *\n+     * Invalidates this object.\n+     */\n+    uint256 GetSHA256() {\n+        uint256 result;\n+        ctx.Finalize(result.begin());\n         return result;\n     }\n \n     /**\n      * Returns the first 64 bits from the resulting hash.\n      */\n     inline uint64_t GetCheapHash() {\n-        unsigned char result[CHash256::OUTPUT_SIZE];\n-        ctx.Finalize(result);\n-        return ReadLE64(result);\n+        uint256 result = GetHash();",
      "path": "src/hash.h",
      "position": null,
      "original_position": 43,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "00a578e9bc5a2b691d529780824c90333013f1d6",
      "in_reply_to_id": 455770853,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Addrman's bucketing relies on it.\n\nWith a new addrman version we could change it to siphash instead, which would let us get rid of GetCheapHash entirely.",
      "created_at": "2020-07-24T16:52:08Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r460172516",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/460172516"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 143,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/462991147",
      "pull_request_review_id": 458393720,
      "id": 462991147,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk5MTE0Nw==",
      "diff_hunk": "@@ -0,0 +1,288 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_type MAX_PRIME_DIFF = 1103717;\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& c2, Num3072::limb_type& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+inline void extract2(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(Num3072::limb_type& c0, Num3072::limb_type& c1, const Num3072::limb_type& a, const Num3072::limb_type& b)\n+{\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)a * b;\n+    c1 = t >> Num3072::LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& c2, Num3072::limb_type& d0, Num3072::limb_type& d1, Num3072::limb_type& d2, const Num3072::limb_type& n)\n+{\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)d0 * n + c0;\n+    c0 = t;\n+    t >>= Num3072::LIMB_SIZE;\n+    t += (Num3072::double_limb_type)d1 * n + c1;\n+    c1 = t;\n+    t >>= Num3072::LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(Num3072::limb_type& c0, Num3072::limb_type& c1, const Num3072::limb_type& n)\n+{\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)c0 * n;\n+    c0 = t;\n+    t >>= Num3072::LIMB_SIZE;\n+    t += (Num3072::double_limb_type)c1 * n;\n+    c1 = t;\n+    t >>= Num3072::LIMB_SIZE;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& c2, const Num3072::limb_type& a, const Num3072::limb_type& b)\n+{\n+    Num3072::limb_type tl, th;\n+    {\n+        Num3072::double_limb_type t = (Num3072::double_limb_type)a * b;\n+        th = t >> Num3072::LIMB_SIZE;\n+        tl = t;\n+    }\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+inline void muldbladd3(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& c2, const Num3072::limb_type& a, const Num3072::limb_type& b)\n+{\n+    Num3072::limb_type tl, th;\n+    {\n+        Num3072::double_limb_type t = (Num3072::double_limb_type)a * b;\n+        th = t >> Num3072::LIMB_SIZE;\n+        tl = t;\n+    }\n+    c0 += tl;\n+    Num3072::limb_type tt = th + ((c0 < tl) ? 1 : 0);\n+    c1 += tt;\n+    c2 += (c1 < tt) ? 1 : 0;\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1] += a */\n+inline void add2(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& a)\n+{\n+    c0 += a;\n+    c1 += (c0 < a) ? 1 : 0;\n+}\n+\n+bool IsOverflow(const Num3072* d)\n+{\n+    for (int i = 1; i < Num3072::LIMBS - 1; ++i) {\n+        if (d->limbs[i] != std::numeric_limits<Num3072::limb_type>::max()) return false;\n+    }\n+    if (d->limbs[0] <= std::numeric_limits<Num3072::limb_type>::max() - MAX_PRIME_DIFF) return false;\n+    return true;\n+}\n+\n+void FullReduce(Num3072* d)\n+{\n+    Num3072::limb_type c0 = MAX_PRIME_DIFF;\n+    for (int i = 0; i < Num3072::LIMBS; ++i) {\n+        Num3072::limb_type c1 = 0;\n+        add2(c0, c1, d->limbs[i]);\n+        extract2(c0, c1, d->limbs[i]);\n+    }\n+}\n+\n+void Multiply(Num3072* out, const Num3072* a, const Num3072* b)\n+{\n+    Num3072::limb_type c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of a*b into tmp, including one reduction. */\n+    for (int j = 0; j < Num3072::LIMBS - 1; ++j) {\n+        Num3072::limb_type d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        mul(d0, d1, a->limbs[1 + j], b->limbs[Num3072::LIMBS + j - (1 + j)]);\n+        for (int i = 2 + j; i < Num3072::LIMBS; ++i) muladd3(d0, d1, d2, a->limbs[i], b->limbs[Num3072::LIMBS + j - i]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < j + 1; ++i) muladd3(c0, c1, c2, a->limbs[i], b->limbs[j - i]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+    /* Compute limb N-1 of a*b into tmp. */\n+    {\n+        Num3072::limb_type c2 = 0;\n+        for (int i = 0; i < Num3072::LIMBS; ++i) muladd3(c0, c1, c2, a->limbs[i], b->limbs[Num3072::LIMBS - 1 - i]);\n+        extract3(c0, c1, c2, tmp.limbs[Num3072::LIMBS - 1]);\n+    }\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < Num3072::LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, out->limbs[j]);\n+    }\n+#ifdef DEBUG\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+#endif\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(out);\n+}\n+\n+void Square(Num3072* out, const Num3072* a)\n+{\n+    Num3072::limb_type c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of a*a into tmp, including one reduction. */\n+    for (int j = 0; j < Num3072::LIMBS - 1; ++j) {\n+        Num3072::limb_type d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        for (int i = 0; i < (Num3072::LIMBS - 1 - j) / 2; ++i) muldbladd3(d0, d1, d2, a->limbs[i + j + 1], a->limbs[Num3072::LIMBS - 1 - i]);\n+        if ((j + 1) & 1) muladd3(d0, d1, d2, a->limbs[(Num3072::LIMBS - 1 - j) / 2 + j + 1], a->limbs[Num3072::LIMBS - 1 - (Num3072::LIMBS - 1 - j) / 2]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < (j + 1) / 2; ++i) muldbladd3(c0, c1, c2, a->limbs[i], a->limbs[j - i]);\n+        if ((j + 1) & 1) muladd3(c0, c1, c2, a->limbs[(j + 1) / 2], a->limbs[j - (j + 1) / 2]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+    {\n+        Num3072::limb_type c2 = 0;\n+        for (int i = 0; i < Num3072::LIMBS / 2; ++i) muldbladd3(c0, c1, c2, a->limbs[i], a->limbs[Num3072::LIMBS - 1 - i]);\n+        extract3(c0, c1, c2, tmp.limbs[Num3072::LIMBS - 1]);\n+    }\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < Num3072::LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, out->limbs[j]);\n+    }\n+#ifdef DEBUG\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+#endif\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(out);\n+}\n+\n+void Inverse(Num3072* out, const Num3072* a)\n+{\n+    Num3072 p[12]; // p[i] = a^(2^(2^i)-1)\n+    Num3072 x;\n+\n+    p[0] = *a;\n+\n+    for (int i = 0; i < 11; ++i) {\n+        p[i + 1] = p[i];\n+        for (int j = 0; j < (1 << i); ++j) Square(&p[i + 1], &p[i + 1]);\n+        Multiply(&p[i + 1], &p[i + 1], &p[i]);\n+    }\n+\n+    x = p[11];\n+\n+    for (int j = 0; j < 512; ++j) Square(&x, &x);",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 211,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "bb3098bbaf1305aa9091ee5e3cd92f2973e04c68",
      "in_reply_to_id": null,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It would be nice to document here in a comment why this particular cascade is used, and how it works. It is not obvious to me.",
      "created_at": "2020-07-30T13:21:41Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r462991147",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/462991147"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 215,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475233273",
      "pull_request_review_id": 473021093,
      "id": 475233273,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIzMzI3Mw==",
      "diff_hunk": "@@ -0,0 +1,288 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_type MAX_PRIME_DIFF = 1103717;\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& c2, Num3072::limb_type& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+inline void extract2(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(Num3072::limb_type& c0, Num3072::limb_type& c1, const Num3072::limb_type& a, const Num3072::limb_type& b)\n+{\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)a * b;\n+    c1 = t >> Num3072::LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& c2, Num3072::limb_type& d0, Num3072::limb_type& d1, Num3072::limb_type& d2, const Num3072::limb_type& n)\n+{\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)d0 * n + c0;\n+    c0 = t;\n+    t >>= Num3072::LIMB_SIZE;\n+    t += (Num3072::double_limb_type)d1 * n + c1;\n+    c1 = t;\n+    t >>= Num3072::LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(Num3072::limb_type& c0, Num3072::limb_type& c1, const Num3072::limb_type& n)\n+{\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)c0 * n;\n+    c0 = t;\n+    t >>= Num3072::LIMB_SIZE;\n+    t += (Num3072::double_limb_type)c1 * n;\n+    c1 = t;\n+    t >>= Num3072::LIMB_SIZE;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& c2, const Num3072::limb_type& a, const Num3072::limb_type& b)\n+{\n+    Num3072::limb_type tl, th;\n+    {\n+        Num3072::double_limb_type t = (Num3072::double_limb_type)a * b;\n+        th = t >> Num3072::LIMB_SIZE;\n+        tl = t;\n+    }\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+inline void muldbladd3(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& c2, const Num3072::limb_type& a, const Num3072::limb_type& b)\n+{\n+    Num3072::limb_type tl, th;\n+    {\n+        Num3072::double_limb_type t = (Num3072::double_limb_type)a * b;\n+        th = t >> Num3072::LIMB_SIZE;\n+        tl = t;\n+    }\n+    c0 += tl;\n+    Num3072::limb_type tt = th + ((c0 < tl) ? 1 : 0);\n+    c1 += tt;\n+    c2 += (c1 < tt) ? 1 : 0;\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1] += a */\n+inline void add2(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& a)\n+{\n+    c0 += a;\n+    c1 += (c0 < a) ? 1 : 0;\n+}\n+\n+bool IsOverflow(const Num3072* d)\n+{\n+    for (int i = 1; i < Num3072::LIMBS - 1; ++i) {\n+        if (d->limbs[i] != std::numeric_limits<Num3072::limb_type>::max()) return false;\n+    }\n+    if (d->limbs[0] <= std::numeric_limits<Num3072::limb_type>::max() - MAX_PRIME_DIFF) return false;\n+    return true;\n+}\n+\n+void FullReduce(Num3072* d)\n+{\n+    Num3072::limb_type c0 = MAX_PRIME_DIFF;\n+    for (int i = 0; i < Num3072::LIMBS; ++i) {\n+        Num3072::limb_type c1 = 0;\n+        add2(c0, c1, d->limbs[i]);\n+        extract2(c0, c1, d->limbs[i]);\n+    }\n+}\n+\n+void Multiply(Num3072* out, const Num3072* a, const Num3072* b)\n+{\n+    Num3072::limb_type c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of a*b into tmp, including one reduction. */\n+    for (int j = 0; j < Num3072::LIMBS - 1; ++j) {\n+        Num3072::limb_type d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        mul(d0, d1, a->limbs[1 + j], b->limbs[Num3072::LIMBS + j - (1 + j)]);\n+        for (int i = 2 + j; i < Num3072::LIMBS; ++i) muladd3(d0, d1, d2, a->limbs[i], b->limbs[Num3072::LIMBS + j - i]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < j + 1; ++i) muladd3(c0, c1, c2, a->limbs[i], b->limbs[j - i]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+    /* Compute limb N-1 of a*b into tmp. */\n+    {\n+        Num3072::limb_type c2 = 0;\n+        for (int i = 0; i < Num3072::LIMBS; ++i) muladd3(c0, c1, c2, a->limbs[i], b->limbs[Num3072::LIMBS - 1 - i]);\n+        extract3(c0, c1, c2, tmp.limbs[Num3072::LIMBS - 1]);\n+    }\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < Num3072::LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, out->limbs[j]);\n+    }\n+#ifdef DEBUG\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+#endif\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(out);\n+}\n+\n+void Square(Num3072* out, const Num3072* a)\n+{\n+    Num3072::limb_type c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of a*a into tmp, including one reduction. */\n+    for (int j = 0; j < Num3072::LIMBS - 1; ++j) {\n+        Num3072::limb_type d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        for (int i = 0; i < (Num3072::LIMBS - 1 - j) / 2; ++i) muldbladd3(d0, d1, d2, a->limbs[i + j + 1], a->limbs[Num3072::LIMBS - 1 - i]);\n+        if ((j + 1) & 1) muladd3(d0, d1, d2, a->limbs[(Num3072::LIMBS - 1 - j) / 2 + j + 1], a->limbs[Num3072::LIMBS - 1 - (Num3072::LIMBS - 1 - j) / 2]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < (j + 1) / 2; ++i) muldbladd3(c0, c1, c2, a->limbs[i], a->limbs[j - i]);\n+        if ((j + 1) & 1) muladd3(c0, c1, c2, a->limbs[(j + 1) / 2], a->limbs[j - (j + 1) / 2]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+    {\n+        Num3072::limb_type c2 = 0;\n+        for (int i = 0; i < Num3072::LIMBS / 2; ++i) muldbladd3(c0, c1, c2, a->limbs[i], a->limbs[Num3072::LIMBS - 1 - i]);\n+        extract3(c0, c1, c2, tmp.limbs[Num3072::LIMBS - 1]);\n+    }\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < Num3072::LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, out->limbs[j]);\n+    }\n+#ifdef DEBUG\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+#endif\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(out);\n+}\n+\n+void Inverse(Num3072* out, const Num3072* a)\n+{\n+    Num3072 p[12]; // p[i] = a^(2^(2^i)-1)\n+    Num3072 x;\n+\n+    p[0] = *a;\n+\n+    for (int i = 0; i < 11; ++i) {\n+        p[i + 1] = p[i];\n+        for (int j = 0; j < (1 << i); ++j) Square(&p[i + 1], &p[i + 1]);\n+        Multiply(&p[i + 1], &p[i + 1], &p[i]);\n+    }\n+\n+    x = p[11];\n+\n+    for (int j = 0; j < 512; ++j) Square(&x, &x);",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 211,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "bb3098bbaf1305aa9091ee5e3cd92f2973e04c68",
      "in_reply_to_id": 462991147,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I have added a reference to a paper that explains this algorithm. Unfortunately, I think there is no publicly accessible version of that paper that we can link to here. The paid version is here: https://link.springer.com/chapter/10.1007/978-3-540-69485-4_10.",
      "created_at": "2020-08-23T15:36:02Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r475233273",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475233273"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 215,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/489117810",
      "pull_request_review_id": 489223281,
      "id": 489117810,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTExNzgxMA==",
      "diff_hunk": "@@ -73,6 +75,13 @@ class MuHash3072\n \n     /* Finalize into a 384-byte hash. Does not change this object's value. */\n     void Finalize(unsigned char* hash384) noexcept;\n+\n+    SERIALIZE_METHODS(MuHash3072, obj)\n+    {\n+        for (int i = 0; i < obj.LIMBS; ++i) {\n+            READWRITE(obj.limbs[i]);",
      "path": "src/crypto/muhash.h",
      "position": null,
      "original_position": 17,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "4cb77c70d3d43ebe004dc130d51ab0c75913c3f5",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this should be `obj.data.LIMBS` and `obj.data.limbs[i]` ? Can add:\r\n\r\n```c++\r\n#include <streams.h>\r\n...\r\n    CDataStream ss(SER_DISK, PROTOCOL_VERSION);\r\n    ss << acc;\r\n```\r\n\r\nto exercise the code.\r\n\r\nIf this is being serialized by directly dumping the limbs, is there a problem if the code that serializes it uses `uint64_t` limbs and the code that deserializes uses `uint32_t` limbs? I think we read/write everything in little endian and `limbs[0]` is the least-significant limb so this works out okay.\r\n\r\nMight be good to add a test that serializing some constant ends up as a predictable constant, and deserializes back to the same thing, something like:\r\n\r\n```c++\r\n    MuHash3072 serchk = FromInt(1); serchk *= FromInt(2);\r\n    std::string ser_exp = \"ad5d5a19c789b21f95f9c2a09f264f8aab4ef29ca30824f7330a8c3f4c61c25a6035bc27476ade3a38f2f2bc576bfbeabdf69641a91b99631ef904d37103eff744129842b1fd83158db6466ab4b752278f04add175a7a41ab8ea1305f66855068730dd3baf1ad29d6e13c7ba3350864a8f96e2e9e5c1ca65e11ab3e361184213a3fb395ac5c86efe3997c671cc5d46df3e1b2f00bf09120ae252a0e985b2452be64d5f626c0bc03747355d91ff2aa31ea4087797b91c80af5003d4b3a2ba5c34cd4a8785712897cd2331bac1b749e4fe9d17a5bb68395e2571d1759dceb5609dfae38ec6186e8c2eb22ffeb9bb8330083ee15d4b816e117e6bc1399c707b3e9d01ae74d2f589d6eb8e9e58c572088476e0444e3dbc05c95867acdb7c18be551e0eb2189d3c39dd86dbc844dc70ac33f9328be9e3b0d792bb359498f5fb385e2d8a8e3a5cde7e3e4e8ba123d3e1eda0b859d3a56e548dd6d23a03ce82e01493f96a67abd3109f9f4315c966f8cba311d71899c04a7fd9618ed028580ffcd21263\";\r\n    CDataStream ss_chk(SER_DISK, PROTOCOL_VERSION);\r\n    ss_chk << serchk;\r\n    BOOST_CHECK_EQUAL(ser_exp, HexStr(ss_chk.str()));\r\n\r\n    MuHash3072 deserchk;\r\n    ss_chk >> deserchk;\r\n    unsigned char out2[384];\r\n    serchk.Finalize(out); deserchk.Finalize(out2);\r\n    BOOST_CHECK_EQUAL(HexStr(out), HexStr(out2));\r\n```\r\n",
      "created_at": "2020-09-16T02:05:46Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r489117810",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/489117810"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 82,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/489131218",
      "pull_request_review_id": 489223281,
      "id": 489131218,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEzMTIxOA==",
      "diff_hunk": "@@ -0,0 +1,78 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <stdint.h>\n+\n+struct Num3072 {\n+#ifdef HAVE___INT128\n+    typedef unsigned __int128 double_limb_type;\n+    typedef uint64_t limb_type;\n+    static constexpr int LIMBS = 48;\n+    static constexpr int LIMB_SIZE = 64;\n+#else\n+    typedef uint64_t double_limb_type;\n+    typedef uint32_t limb_type;\n+    static constexpr int LIMBS = 96;\n+    static constexpr int LIMB_SIZE = 32;\n+#endif\n+    limb_type limbs[LIMBS];\n+};\n+\n+/** A class representing MuHash sets\n+ *\n+ * MuHash is a hashing algorithm that supports adding set elements in any\n+ * order but also deleting in any order. As a result, it can maintain a\n+ * running sum for a set of data as a whole, and add/subtract when data\n+ * is added to or removed from it. A downside of MuHash is that computing\n+ * an inverse is relatively expensive. This can be solved by representing\n+ * the running value as a fraction, and multiplying added elements into\n+ * the numerator and removed elements into the denominator. Only when the\n+ * final hash is desired, a single modular inverse and multiplication is\n+ * needed to combine the two.\n+ *\n+ * As the update operations are also associative, H(a)+H(b)+H(c)+H(d) can\n+ * in fact be computed as (H(a)+H(b)) + (H(c)+H(d)). This implies that\n+ * all of this is perfectly parallellizable: each thread can process an\n+ * arbitrary subset of the update operations, allowing them to be\n+ * efficiently combined later.\n+ *\n+ * This class does not enforce the use of a set as the data it represents.\n+ * It is possible to add elements more than once and also to remove\n+ * elements that have not been added before. However, it is not clear if\n+ * security assumptions still hold in this case, so it should for now\n+ * only be used to represent a set of elements.\n+ *\n+ * See also https://cseweb.ucsd.edu/~mihir/papers/inchash.pdf and\n+ * https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014337.html.\n+ */\n+class MuHash3072\n+{\n+private:\n+    Num3072 data;\n+\n+public:\n+    /* The empty set. */\n+    MuHash3072() noexcept;\n+\n+    /* A singleton with a single 32-byte key in it. */\n+    explicit MuHash3072(const unsigned char* key32) noexcept;",
      "path": "src/crypto/muhash.h",
      "position": null,
      "original_position": 66,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "c540f8edc143e856474a27626cc0bd08018ed734",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Might be better to accept a `Span` rather than having an implicit length? Also for `Finalize` perhaps -- sha3.cpp does it that way.",
      "created_at": "2020-09-16T02:55:58Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r489131218",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/489131218"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/489133613",
      "pull_request_review_id": 489223281,
      "id": 489133613,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEzMzYxMw==",
      "diff_hunk": "@@ -0,0 +1,78 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <stdint.h>\n+\n+struct Num3072 {\n+#ifdef HAVE___INT128\n+    typedef unsigned __int128 double_limb_type;\n+    typedef uint64_t limb_type;\n+    static constexpr int LIMBS = 48;\n+    static constexpr int LIMB_SIZE = 64;\n+#else\n+    typedef uint64_t double_limb_type;\n+    typedef uint32_t limb_type;\n+    static constexpr int LIMBS = 96;\n+    static constexpr int LIMB_SIZE = 32;\n+#endif\n+    limb_type limbs[LIMBS];\n+};\n+\n+/** A class representing MuHash sets\n+ *\n+ * MuHash is a hashing algorithm that supports adding set elements in any\n+ * order but also deleting in any order. As a result, it can maintain a\n+ * running sum for a set of data as a whole, and add/subtract when data\n+ * is added to or removed from it. A downside of MuHash is that computing\n+ * an inverse is relatively expensive. This can be solved by representing\n+ * the running value as a fraction, and multiplying added elements into\n+ * the numerator and removed elements into the denominator. Only when the\n+ * final hash is desired, a single modular inverse and multiplication is\n+ * needed to combine the two.\n+ *\n+ * As the update operations are also associative, H(a)+H(b)+H(c)+H(d) can\n+ * in fact be computed as (H(a)+H(b)) + (H(c)+H(d)). This implies that\n+ * all of this is perfectly parallellizable: each thread can process an\n+ * arbitrary subset of the update operations, allowing them to be\n+ * efficiently combined later.\n+ *\n+ * This class does not enforce the use of a set as the data it represents.",
      "path": "src/crypto/muhash.h",
      "position": null,
      "original_position": 47,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "c540f8edc143e856474a27626cc0bd08018ed734",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Might be worth clarifying that muhash does not support checking if an element is a member of the set, and therefore it's not possible to (efficiently) enforce that you don't add members that are already in the set, or remove members that aren't in the set?\r\n\r\nMight also be worth being more explicit that the \"represent the running value as a fraction\" optimisation is a TODO.",
      "created_at": "2020-09-16T03:05:10Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r489133613",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/489133613"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 47,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/489135525",
      "pull_request_review_id": 489223281,
      "id": 489135525,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEzNTUyNQ==",
      "diff_hunk": "@@ -857,4 +858,58 @@ BOOST_AUTO_TEST_CASE(sha3_256_tests)\n     TestSHA3_256(\"72c57c359e10684d0517e46653a02d18d29eff803eb009e4d5eb9e95add9ad1a4ac1f38a70296f3a369a16985ca3c957de2084cdc9bdd8994eb59b8815e0debad4ec1f001feac089820db8becdaf896aaf95721e8674e5d476b43bd2b873a7d135cd685f545b438210f9319e4dcd55986c85303c1ddf18dc746fe63a409df0a998ed376eb683e16c09e6e9018504152b3e7628ef350659fb716e058a5263a18823d2f2f6ee6a8091945a48ae1c5cb1694cf2c1fe76ef9177953afe8899cfa2b7fe0603bfa3180937dadfb66fbbdd119bbf8063338aa4a699075a3bfdbae8db7e5211d0917e9665a702fc9b0a0a901d08bea97654162d82a9f05622b060b634244779c33427eb7a29353a5f48b07cbefa72f3622ac5900bef77b71d6b314296f304c8426f451f32049b1f6af156a9dab702e8907d3cd72bb2c50493f4d593e731b285b70c803b74825b3524cda3205a8897106615260ac93c01c5ec14f5b11127783989d1824527e99e04f6a340e827b559f24db9292fcdd354838f9339a5fa1d7f6b2087f04835828b13463dd40927866f16ae33ed501ec0e6c4e63948768c5aeea3e4f6754985954bea7d61088c44430204ef491b74a64bde1358cecb2cad28ee6a3de5b752ff6a051104d88478653339457ac45ba44cbb65f54d1969d047cda746931d5e6a8b48e211416aefd5729f3d60b56b54e7f85aa2f42de3cb69419240c24e67139a11790a709edef2ac52cf35dd0a08af45926ebe9761f498ff83bfe263d6897ee97943a4b982fe3404ef0b4a45e06113c60340e0664f14799bf59cb4b3934b465fabefd87155905ee5309ba41e9e402973311831ea600b16437f71df39ee77130490c4d0227e5d1757fdc66af3ae6b9953053ed9aafca0160209858a7d4dd38fe10e0cb153672d08633ed6c54977aa0a6e67f9ff2f8c9d22dd7b21de08192960fd0e0da68d77c8d810db11dcaa61c725cd4092cbff76c8e1debd8d0361bb3f2e607911d45716f53067bdc0d89dd4889177765166a424e9fc0cb711201099dda213355e6639ac7eb86eca2ae0ab38b7f674f37ef8a6fcca1a6f52f55d9e1dcd631d2c3c82bba129172feb991d5af51afecd9d61a88b6832e4107480e392aed61a8644f551665ebff6b20953b635737a4f895e429fddcfe801f606fbda74b3bf6f5767d0fac14907fcfd0aa1d4c11b9e91b01d68052399b51a29f1ae6acd965109977c14a555cbcbd21ad8cb9f8853506d4bc21c01e62d61d7b21be1b923be54914e6b0a7ca84dd11f1159193e1184568a6134a6bbadf5b4df986edcf2019390ae841cfaa44435e28ce877d3dae4177992fa5d4e5c005876dbe3d1e63bec7dcc0942762b48b1ecc6c1a918409a8a72812a1e245c0c67be6e729c2b49bc6ee4d24a8f63e78e75db45655c26a9a78aff36fcd67117f26b8f654dca664b9f0e30681874cb749e1a692720078856286c2560b0292cc837933423147569350955c9571bf8941ba128fd339cb4268f46b94bc6ee203eb7026813706ea51c4f24c91866fc23a724bf2501327e6ae89c29f8db315dc28d2c7c719514036367e018f4835f63fdecd71f9bdced7132b6c4f8b13c69a517026fcd3622d67cb632320d5e7308f78f4b7cea11f6291b137851dc6cd6366f2785c71c3f237f81a7658b2a8d512b61e0ad5a4710b7b124151689fcb2116063fbff7e9115fed7b93de834970b838e49f8f8ba5f1f874c354078b5810a55ae289a56da563f1da6cd80a3757d6073fa55e016e45ac6cec1f69d871c92fd0ae9670c74249045e6b464787f9504128736309fed205f8df4d90e332908581298d9c75a3fa36ab0c3c9272e62de53ab290c803d67b696fd615c260a47bffad16746f18ba1a10a061bacbea9369693b3c042eec36bed289d7d12e52bca8aa1c2dff88ca7816498d25626d0f1e106ebb0b4a12138e00f3df5b1c2f49d98b1756e69b641b7c6353d99dbff050f4d76842c6cf1c2a4b062fc8e6336fa689b7c9d5c6b4ab8c15a5c20e514ff070a602d85ae52fa7810c22f8eeffd34a095b93342144f7a98d024216b3d68ed7bea047517bfcd83ec83febd1ba0e5858e2bdc1d8b1f7b0f89e90ccc432a3f930cb8209462e64556c5054c56ca2a85f16b32eb83a10459d13516faa4d23302b7607b9bd38dab2239ac9e9440c314433fdfb3ceadab4b4f87415ed6f240e017221f3b5f7ac196cdf54957bec42fe6893994b46de3d27dc7fb58ca88feb5b9e79cf20053d12530ac524337b22a3629bea52f40b06d3e2128f32060f9105847daed81d35f20e2002817434659baff64494c5b5c7f9216bfda38412a0f70511159dc73bb6bae1f8eaa0ef08d99bcb31f94f6be12c29c83df45926430b366c99fca3270c15fc4056398fdf3135b7779e3066a006961d1ac0ad1c83179ce39e87a96b722ec23aabc065badf3e188347a360772ca6a447abac7e6a44f0d4632d52926332e44a0a86bff5ce699fd063bdda3ffd4c41b53ded49fecec67f40599b934e16e3fd1bc063ad7026f8d71bfd4cbaf56599586774723194b692036f1b6bb242e2ffb9c600b5215b412764599476ce475c9e5b396fbcebd6be323dcf4d0048077400aac7500db41dc95fc7f7edbe7c9c2ec5ea89943fe13b42217eef530bbd023671509e12dfce4e1c1c82955d965e6a68aa66f6967dba48feda572db1f099d9a6dc4bc8edade852b5e824a06890dc48a6a6510ecaf8cf7620d757290e3166d431abecc624fa9ac2234d2eb783308ead45544910c633a94964b2ef5fbc409cb8835ac4147d384e12e0a5e13951f7de0ee13eafcb0ca0c04946d7804040c0a3cd088352424b097adb7aad1ca4495952f3e6c0158c02d2bcec33bfda69301434a84d9027ce02c0b9725dad118\", \"d894b86261436362e64241e61f6b3e6589daf64dc641f60570c4c0bf3b1f2ca3\");\n }\n \n+static MuHash3072 FromInt(unsigned char i) {\n+    unsigned char tmp[32] = {i, 0};\n+    return MuHash3072(tmp);\n+}\n+\n+BOOST_AUTO_TEST_CASE(muhash_tests)\n+{\n+    unsigned char out[384];\n+\n+    for (int iter = 0; iter < 10; ++iter) {\n+        unsigned char res[384];\n+        int table[4];\n+        for (int i = 0; i < 4; ++i) {\n+            table[i] = g_insecure_rand_ctx.randbits(3);\n+        }\n+        for (int order = 0; order < 4; ++order) {\n+            MuHash3072 acc;\n+            for (int i = 0; i < 4; ++i) {\n+                int t = table[i ^ order];\n+                if (t & 4) {\n+                    acc /= FromInt(t & 3);\n+                } else {\n+                    acc *= FromInt(t & 3);\n+                }\n+            }\n+            acc.Finalize(out);\n+            if (order == 0) {\n+                memcpy(res, out, 384);\n+            } else {\n+                BOOST_CHECK(memcmp(res, out, 384) == 0);\n+            }\n+        }\n+\n+        MuHash3072 x = FromInt(g_insecure_rand_ctx.randbits(4)); // x=X\n+        MuHash3072 y = FromInt(g_insecure_rand_ctx.randbits(4)); // x=X, y=Y\n+        MuHash3072 z; // x=X, y=Y, z=1\n+        z *= x; // x=X, y=Y, z=X\n+        z /= y; // x=X, y=Y, z=X/Y",
      "path": "src/test/crypto_tests.cpp",
      "position": null,
      "original_position": 49,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "c540f8edc143e856474a27626cc0bd08018ed734",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The headers suggest that removing things that aren't in the set is a bad idea (\"not clear if the security assumptions still hold\", \"should for now only be used to represent a set of elements\") so seems a bit odd to be doing it in the tests. Could convert it to `z *= x; z *= y; y *= x; z /= y;` to only add things that aren't present/remove things that are present.\r\n\r\nI think the comment in the header doesn't make sense though -- as I understand it, it should be equally fine (in security terms even) to remove a set by saying:\r\n\r\n```\r\n    MuHash3072 to_remove;\r\n    for (x : spent) { to_remove *= MuHash3072(x); }\r\n    set /= to_remove;\r\n```\r\n\r\nand\r\n\r\n```\r\n    MuHash3072 changes;\r\n    for (x : arrived) { changes *= MuHash3072(x); }\r\n    for (x : spent) { changes /= MuHash3072(x); }\r\n    set *= changes;\r\n```\r\n\r\neven though that's removing things from `changes` before they've been added.",
      "created_at": "2020-09-16T03:12:53Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r489135525",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/489135525"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 898,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/489161487",
      "pull_request_review_id": 489274591,
      "id": 489161487,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE2MTQ4Nw==",
      "diff_hunk": "@@ -0,0 +1,292 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_type MAX_PRIME_DIFF = 1103717;\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& c2, Num3072::limb_type& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+inline void extract2(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(Num3072::limb_type& c0, Num3072::limb_type& c1, const Num3072::limb_type& a, const Num3072::limb_type& b)\n+{\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)a * b;\n+    c1 = t >> Num3072::LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& c2, Num3072::limb_type& d0, Num3072::limb_type& d1, Num3072::limb_type& d2, const Num3072::limb_type& n)\n+{\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)d0 * n + c0;\n+    c0 = t;\n+    t >>= Num3072::LIMB_SIZE;\n+    t += (Num3072::double_limb_type)d1 * n + c1;\n+    c1 = t;\n+    t >>= Num3072::LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(Num3072::limb_type& c0, Num3072::limb_type& c1, const Num3072::limb_type& n)\n+{\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)c0 * n;\n+    c0 = t;\n+    t >>= Num3072::LIMB_SIZE;\n+    t += (Num3072::double_limb_type)c1 * n;\n+    c1 = t;\n+    t >>= Num3072::LIMB_SIZE;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& c2, const Num3072::limb_type& a, const Num3072::limb_type& b)\n+{\n+    Num3072::limb_type tl, th;\n+    {\n+        Num3072::double_limb_type t = (Num3072::double_limb_type)a * b;\n+        th = t >> Num3072::LIMB_SIZE;\n+        tl = t;\n+    }\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+inline void muldbladd3(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& c2, const Num3072::limb_type& a, const Num3072::limb_type& b)\n+{\n+    Num3072::limb_type tl, th;\n+    {\n+        Num3072::double_limb_type t = (Num3072::double_limb_type)a * b;\n+        th = t >> Num3072::LIMB_SIZE;\n+        tl = t;\n+    }\n+    c0 += tl;\n+    Num3072::limb_type tt = th + ((c0 < tl) ? 1 : 0);\n+    c1 += tt;\n+    c2 += (c1 < tt) ? 1 : 0;\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1] += a */\n+inline void add2(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& a)\n+{\n+    c0 += a;\n+    c1 += (c0 < a) ? 1 : 0;\n+}\n+\n+bool IsOverflow(const Num3072* d)\n+{\n+    for (int i = 1; i < Num3072::LIMBS - 1; ++i) {\n+        if (d->limbs[i] != std::numeric_limits<Num3072::limb_type>::max()) return false;\n+    }\n+    if (d->limbs[0] <= std::numeric_limits<Num3072::limb_type>::max() - MAX_PRIME_DIFF) return false;",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 114,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "c540f8edc143e856474a27626cc0bd08018ed734",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Might as well move the `d->limbs[0]` case prior to the for loop.",
      "created_at": "2020-09-16T04:56:58Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r489161487",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/489161487"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 114,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/489167116",
      "pull_request_review_id": 489274591,
      "id": 489167116,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE2NzExNg==",
      "diff_hunk": "@@ -0,0 +1,292 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_type MAX_PRIME_DIFF = 1103717;\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& c2, Num3072::limb_type& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+inline void extract2(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(Num3072::limb_type& c0, Num3072::limb_type& c1, const Num3072::limb_type& a, const Num3072::limb_type& b)\n+{\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)a * b;\n+    c1 = t >> Num3072::LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& c2, Num3072::limb_type& d0, Num3072::limb_type& d1, Num3072::limb_type& d2, const Num3072::limb_type& n)\n+{\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)d0 * n + c0;\n+    c0 = t;\n+    t >>= Num3072::LIMB_SIZE;\n+    t += (Num3072::double_limb_type)d1 * n + c1;\n+    c1 = t;\n+    t >>= Num3072::LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(Num3072::limb_type& c0, Num3072::limb_type& c1, const Num3072::limb_type& n)\n+{\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)c0 * n;\n+    c0 = t;\n+    t >>= Num3072::LIMB_SIZE;\n+    t += (Num3072::double_limb_type)c1 * n;\n+    c1 = t;\n+    t >>= Num3072::LIMB_SIZE;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& c2, const Num3072::limb_type& a, const Num3072::limb_type& b)\n+{\n+    Num3072::limb_type tl, th;\n+    {\n+        Num3072::double_limb_type t = (Num3072::double_limb_type)a * b;\n+        th = t >> Num3072::LIMB_SIZE;\n+        tl = t;\n+    }\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+inline void muldbladd3(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& c2, const Num3072::limb_type& a, const Num3072::limb_type& b)\n+{\n+    Num3072::limb_type tl, th;\n+    {\n+        Num3072::double_limb_type t = (Num3072::double_limb_type)a * b;\n+        th = t >> Num3072::LIMB_SIZE;\n+        tl = t;\n+    }\n+    c0 += tl;\n+    Num3072::limb_type tt = th + ((c0 < tl) ? 1 : 0);\n+    c1 += tt;\n+    c2 += (c1 < tt) ? 1 : 0;\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1] += a */\n+inline void add2(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& a)\n+{\n+    c0 += a;\n+    c1 += (c0 < a) ? 1 : 0;\n+}\n+\n+bool IsOverflow(const Num3072* d)\n+{\n+    for (int i = 1; i < Num3072::LIMBS - 1; ++i) {",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 111,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "c540f8edc143e856474a27626cc0bd08018ed734",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think the for loop should be `i = 1; i < LIMBS; ++i` not `LIMBS-1`?\r\n\r\nMight be clever to have `data` be `protected` rather than `private` so it can be initialised directly to edge cases via a subclass in the unit tests, without having to find a chacha-primage for them.",
      "created_at": "2020-09-16T05:12:58Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r489167116",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/489167116"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 111,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/489171646",
      "pull_request_review_id": 489274591,
      "id": 489171646,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE3MTY0Ng==",
      "diff_hunk": "@@ -0,0 +1,292 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_type MAX_PRIME_DIFF = 1103717;\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& c2, Num3072::limb_type& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+inline void extract2(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(Num3072::limb_type& c0, Num3072::limb_type& c1, const Num3072::limb_type& a, const Num3072::limb_type& b)\n+{\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)a * b;\n+    c1 = t >> Num3072::LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& c2, Num3072::limb_type& d0, Num3072::limb_type& d1, Num3072::limb_type& d2, const Num3072::limb_type& n)\n+{\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)d0 * n + c0;\n+    c0 = t;\n+    t >>= Num3072::LIMB_SIZE;\n+    t += (Num3072::double_limb_type)d1 * n + c1;\n+    c1 = t;\n+    t >>= Num3072::LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(Num3072::limb_type& c0, Num3072::limb_type& c1, const Num3072::limb_type& n)\n+{\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)c0 * n;\n+    c0 = t;\n+    t >>= Num3072::LIMB_SIZE;\n+    t += (Num3072::double_limb_type)c1 * n;\n+    c1 = t;\n+    t >>= Num3072::LIMB_SIZE;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& c2, const Num3072::limb_type& a, const Num3072::limb_type& b)\n+{\n+    Num3072::limb_type tl, th;\n+    {\n+        Num3072::double_limb_type t = (Num3072::double_limb_type)a * b;\n+        th = t >> Num3072::LIMB_SIZE;\n+        tl = t;\n+    }\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+inline void muldbladd3(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& c2, const Num3072::limb_type& a, const Num3072::limb_type& b)\n+{\n+    Num3072::limb_type tl, th;\n+    {\n+        Num3072::double_limb_type t = (Num3072::double_limb_type)a * b;\n+        th = t >> Num3072::LIMB_SIZE;\n+        tl = t;\n+    }\n+    c0 += tl;\n+    Num3072::limb_type tt = th + ((c0 < tl) ? 1 : 0);\n+    c1 += tt;\n+    c2 += (c1 < tt) ? 1 : 0;\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1] += a */\n+inline void add2(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& a)\n+{\n+    c0 += a;\n+    c1 += (c0 < a) ? 1 : 0;\n+}\n+\n+bool IsOverflow(const Num3072* d)\n+{\n+    for (int i = 1; i < Num3072::LIMBS - 1; ++i) {\n+        if (d->limbs[i] != std::numeric_limits<Num3072::limb_type>::max()) return false;\n+    }\n+    if (d->limbs[0] <= std::numeric_limits<Num3072::limb_type>::max() - MAX_PRIME_DIFF) return false;\n+    return true;\n+}\n+\n+void FullReduce(Num3072* d)\n+{\n+    Num3072::limb_type c0 = MAX_PRIME_DIFF;\n+    for (int i = 0; i < Num3072::LIMBS; ++i) {\n+        Num3072::limb_type c1 = 0;\n+        add2(c0, c1, d->limbs[i]);\n+        extract2(c0, c1, d->limbs[i]);\n+    }\n+}\n+\n+void Multiply(Num3072* out, const Num3072* a, const Num3072* b)\n+{\n+    Num3072::limb_type c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of a*b into tmp, including one reduction. */\n+    for (int j = 0; j < Num3072::LIMBS - 1; ++j) {\n+        Num3072::limb_type d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        mul(d0, d1, a->limbs[1 + j], b->limbs[Num3072::LIMBS + j - (1 + j)]);\n+        for (int i = 2 + j; i < Num3072::LIMBS; ++i) muladd3(d0, d1, d2, a->limbs[i], b->limbs[Num3072::LIMBS + j - i]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < j + 1; ++i) muladd3(c0, c1, c2, a->limbs[i], b->limbs[j - i]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+    /* Compute limb N-1 of a*b into tmp. */\n+    {\n+        Num3072::limb_type c2 = 0;\n+        for (int i = 0; i < Num3072::LIMBS; ++i) muladd3(c0, c1, c2, a->limbs[i], b->limbs[Num3072::LIMBS - 1 - i]);\n+        extract3(c0, c1, c2, tmp.limbs[Num3072::LIMBS - 1]);\n+    }\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < Num3072::LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, out->limbs[j]);\n+    }\n+#ifdef DEBUG\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+#endif\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(out);\n+}\n+\n+void Square(Num3072* out, const Num3072* a)",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 162,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "c540f8edc143e856474a27626cc0bd08018ed734",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is only ever called with `out == a`, so could take a single argument. Similarly for Multiply which is also always in-place.",
      "created_at": "2020-09-16T05:28:26Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r489171646",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/489171646"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 162,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/489200958",
      "pull_request_review_id": 489274591,
      "id": 489200958,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIwMDk1OA==",
      "diff_hunk": "@@ -0,0 +1,292 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {",
      "path": "src/crypto/muhash.cpp",
      "position": 15,
      "original_position": 15,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "c540f8edc143e856474a27626cc0bd08018ed734",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Dropping all the `Num3072::` prefixes might make the code a little less noisy:\r\n\r\n```c++\r\nusing limb_type = Num3072::limb_type;\r\nusing double_limb_type = Num3072::double_limb_type;\r\nconstexpr int LIMB_SIZE = Num3072::LIMB_SIZE;\r\nconstexpr int LIMBS = Num3072::LIMBS;\r\n```\r\n\r\n(also, wouldn't `limb_t` be more normal than `limb_type`?)\r\n\r\nProbably overkill, but maybe consider checking the `Num3072` constants make sense:\r\n\r\n```c++\r\nstatic_assert(LIMB_SIZE * LIMBS == 3072, \"Num3072 isn't 3072 bits\");\r\nstatic_assert(sizeof(double_limb_type) == sizeof(limb_type) * 2, \"bad size for double_limb_type\");\r\nstatic_assert(sizeof(limb_type) * 8 == LIMB_SIZE, \"LIMB_SIZE is incorrect\");\r\n\r\n// hard coded values in MuHash3072 constructor and Finalize\r\nstatic_assert(sizeof(limb_type) == 4 || sizeof(limb_type) == 8, \"bad size for limb_type\");\r\n```",
      "created_at": "2020-09-16T06:47:08Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r489200958",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/489200958"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 15,
      "original_line": 15,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492377373",
      "pull_request_review_id": 493019097,
      "id": 492377373,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM3NzM3Mw==",
      "diff_hunk": "@@ -0,0 +1,292 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_type MAX_PRIME_DIFF = 1103717;\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& c2, Num3072::limb_type& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+inline void extract2(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(Num3072::limb_type& c0, Num3072::limb_type& c1, const Num3072::limb_type& a, const Num3072::limb_type& b)\n+{\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)a * b;\n+    c1 = t >> Num3072::LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& c2, Num3072::limb_type& d0, Num3072::limb_type& d1, Num3072::limb_type& d2, const Num3072::limb_type& n)\n+{\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)d0 * n + c0;\n+    c0 = t;\n+    t >>= Num3072::LIMB_SIZE;\n+    t += (Num3072::double_limb_type)d1 * n + c1;\n+    c1 = t;\n+    t >>= Num3072::LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(Num3072::limb_type& c0, Num3072::limb_type& c1, const Num3072::limb_type& n)\n+{\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)c0 * n;\n+    c0 = t;\n+    t >>= Num3072::LIMB_SIZE;\n+    t += (Num3072::double_limb_type)c1 * n;\n+    c1 = t;\n+    t >>= Num3072::LIMB_SIZE;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& c2, const Num3072::limb_type& a, const Num3072::limb_type& b)\n+{\n+    Num3072::limb_type tl, th;\n+    {\n+        Num3072::double_limb_type t = (Num3072::double_limb_type)a * b;\n+        th = t >> Num3072::LIMB_SIZE;\n+        tl = t;\n+    }\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+inline void muldbladd3(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& c2, const Num3072::limb_type& a, const Num3072::limb_type& b)\n+{\n+    Num3072::limb_type tl, th;\n+    {\n+        Num3072::double_limb_type t = (Num3072::double_limb_type)a * b;\n+        th = t >> Num3072::LIMB_SIZE;\n+        tl = t;\n+    }\n+    c0 += tl;\n+    Num3072::limb_type tt = th + ((c0 < tl) ? 1 : 0);\n+    c1 += tt;\n+    c2 += (c1 < tt) ? 1 : 0;\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1] += a */\n+inline void add2(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& a)\n+{\n+    c0 += a;\n+    c1 += (c0 < a) ? 1 : 0;\n+}\n+\n+bool IsOverflow(const Num3072* d)\n+{\n+    for (int i = 1; i < Num3072::LIMBS - 1; ++i) {\n+        if (d->limbs[i] != std::numeric_limits<Num3072::limb_type>::max()) return false;\n+    }\n+    if (d->limbs[0] <= std::numeric_limits<Num3072::limb_type>::max() - MAX_PRIME_DIFF) return false;\n+    return true;\n+}\n+\n+void FullReduce(Num3072* d)\n+{\n+    Num3072::limb_type c0 = MAX_PRIME_DIFF;\n+    for (int i = 0; i < Num3072::LIMBS; ++i) {\n+        Num3072::limb_type c1 = 0;\n+        add2(c0, c1, d->limbs[i]);\n+        extract2(c0, c1, d->limbs[i]);\n+    }\n+}\n+\n+void Multiply(Num3072* out, const Num3072* a, const Num3072* b)\n+{\n+    Num3072::limb_type c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of a*b into tmp, including one reduction. */\n+    for (int j = 0; j < Num3072::LIMBS - 1; ++j) {\n+        Num3072::limb_type d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        mul(d0, d1, a->limbs[1 + j], b->limbs[Num3072::LIMBS + j - (1 + j)]);\n+        for (int i = 2 + j; i < Num3072::LIMBS; ++i) muladd3(d0, d1, d2, a->limbs[i], b->limbs[Num3072::LIMBS + j - i]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < j + 1; ++i) muladd3(c0, c1, c2, a->limbs[i], b->limbs[j - i]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+    /* Compute limb N-1 of a*b into tmp. */\n+    {\n+        Num3072::limb_type c2 = 0;\n+        for (int i = 0; i < Num3072::LIMBS; ++i) muladd3(c0, c1, c2, a->limbs[i], b->limbs[Num3072::LIMBS - 1 - i]);\n+        extract3(c0, c1, c2, tmp.limbs[Num3072::LIMBS - 1]);\n+    }\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < Num3072::LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, out->limbs[j]);\n+    }\n+#ifdef DEBUG\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+#endif\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(out);\n+}\n+\n+void Square(Num3072* out, const Num3072* a)",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 162,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "c540f8edc143e856474a27626cc0bd08018ed734",
      "in_reply_to_id": 489171646,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-09-21T22:17:18Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r492377373",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492377373"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 162,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492377415",
      "pull_request_review_id": 493019154,
      "id": 492377415,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM3NzQxNQ==",
      "diff_hunk": "@@ -0,0 +1,292 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {",
      "path": "src/crypto/muhash.cpp",
      "position": 15,
      "original_position": 15,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "c540f8edc143e856474a27626cc0bd08018ed734",
      "in_reply_to_id": 489200958,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think all these suggestions are sensible. Added.",
      "created_at": "2020-09-21T22:17:25Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r492377415",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492377415"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 15,
      "original_line": 15,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492377548",
      "pull_request_review_id": 493019313,
      "id": 492377548,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM3NzU0OA==",
      "diff_hunk": "@@ -0,0 +1,292 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_type MAX_PRIME_DIFF = 1103717;\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& c2, Num3072::limb_type& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+inline void extract2(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(Num3072::limb_type& c0, Num3072::limb_type& c1, const Num3072::limb_type& a, const Num3072::limb_type& b)\n+{\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)a * b;\n+    c1 = t >> Num3072::LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& c2, Num3072::limb_type& d0, Num3072::limb_type& d1, Num3072::limb_type& d2, const Num3072::limb_type& n)\n+{\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)d0 * n + c0;\n+    c0 = t;\n+    t >>= Num3072::LIMB_SIZE;\n+    t += (Num3072::double_limb_type)d1 * n + c1;\n+    c1 = t;\n+    t >>= Num3072::LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(Num3072::limb_type& c0, Num3072::limb_type& c1, const Num3072::limb_type& n)\n+{\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)c0 * n;\n+    c0 = t;\n+    t >>= Num3072::LIMB_SIZE;\n+    t += (Num3072::double_limb_type)c1 * n;\n+    c1 = t;\n+    t >>= Num3072::LIMB_SIZE;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& c2, const Num3072::limb_type& a, const Num3072::limb_type& b)\n+{\n+    Num3072::limb_type tl, th;\n+    {\n+        Num3072::double_limb_type t = (Num3072::double_limb_type)a * b;\n+        th = t >> Num3072::LIMB_SIZE;\n+        tl = t;\n+    }\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+inline void muldbladd3(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& c2, const Num3072::limb_type& a, const Num3072::limb_type& b)\n+{\n+    Num3072::limb_type tl, th;\n+    {\n+        Num3072::double_limb_type t = (Num3072::double_limb_type)a * b;\n+        th = t >> Num3072::LIMB_SIZE;\n+        tl = t;\n+    }\n+    c0 += tl;\n+    Num3072::limb_type tt = th + ((c0 < tl) ? 1 : 0);\n+    c1 += tt;\n+    c2 += (c1 < tt) ? 1 : 0;\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1] += a */\n+inline void add2(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& a)\n+{\n+    c0 += a;\n+    c1 += (c0 < a) ? 1 : 0;\n+}\n+\n+bool IsOverflow(const Num3072* d)\n+{\n+    for (int i = 1; i < Num3072::LIMBS - 1; ++i) {\n+        if (d->limbs[i] != std::numeric_limits<Num3072::limb_type>::max()) return false;\n+    }\n+    if (d->limbs[0] <= std::numeric_limits<Num3072::limb_type>::max() - MAX_PRIME_DIFF) return false;",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 114,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "c540f8edc143e856474a27626cc0bd08018ed734",
      "in_reply_to_id": 489161487,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-09-21T22:17:47Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r492377548",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492377548"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 114,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492377632",
      "pull_request_review_id": 493019415,
      "id": 492377632,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM3NzYzMg==",
      "diff_hunk": "@@ -857,4 +858,58 @@ BOOST_AUTO_TEST_CASE(sha3_256_tests)\n     TestSHA3_256(\"72c57c359e10684d0517e46653a02d18d29eff803eb009e4d5eb9e95add9ad1a4ac1f38a70296f3a369a16985ca3c957de2084cdc9bdd8994eb59b8815e0debad4ec1f001feac089820db8becdaf896aaf95721e8674e5d476b43bd2b873a7d135cd685f545b438210f9319e4dcd55986c85303c1ddf18dc746fe63a409df0a998ed376eb683e16c09e6e9018504152b3e7628ef350659fb716e058a5263a18823d2f2f6ee6a8091945a48ae1c5cb1694cf2c1fe76ef9177953afe8899cfa2b7fe0603bfa3180937dadfb66fbbdd119bbf8063338aa4a699075a3bfdbae8db7e5211d0917e9665a702fc9b0a0a901d08bea97654162d82a9f05622b060b634244779c33427eb7a29353a5f48b07cbefa72f3622ac5900bef77b71d6b314296f304c8426f451f32049b1f6af156a9dab702e8907d3cd72bb2c50493f4d593e731b285b70c803b74825b3524cda3205a8897106615260ac93c01c5ec14f5b11127783989d1824527e99e04f6a340e827b559f24db9292fcdd354838f9339a5fa1d7f6b2087f04835828b13463dd40927866f16ae33ed501ec0e6c4e63948768c5aeea3e4f6754985954bea7d61088c44430204ef491b74a64bde1358cecb2cad28ee6a3de5b752ff6a051104d88478653339457ac45ba44cbb65f54d1969d047cda746931d5e6a8b48e211416aefd5729f3d60b56b54e7f85aa2f42de3cb69419240c24e67139a11790a709edef2ac52cf35dd0a08af45926ebe9761f498ff83bfe263d6897ee97943a4b982fe3404ef0b4a45e06113c60340e0664f14799bf59cb4b3934b465fabefd87155905ee5309ba41e9e402973311831ea600b16437f71df39ee77130490c4d0227e5d1757fdc66af3ae6b9953053ed9aafca0160209858a7d4dd38fe10e0cb153672d08633ed6c54977aa0a6e67f9ff2f8c9d22dd7b21de08192960fd0e0da68d77c8d810db11dcaa61c725cd4092cbff76c8e1debd8d0361bb3f2e607911d45716f53067bdc0d89dd4889177765166a424e9fc0cb711201099dda213355e6639ac7eb86eca2ae0ab38b7f674f37ef8a6fcca1a6f52f55d9e1dcd631d2c3c82bba129172feb991d5af51afecd9d61a88b6832e4107480e392aed61a8644f551665ebff6b20953b635737a4f895e429fddcfe801f606fbda74b3bf6f5767d0fac14907fcfd0aa1d4c11b9e91b01d68052399b51a29f1ae6acd965109977c14a555cbcbd21ad8cb9f8853506d4bc21c01e62d61d7b21be1b923be54914e6b0a7ca84dd11f1159193e1184568a6134a6bbadf5b4df986edcf2019390ae841cfaa44435e28ce877d3dae4177992fa5d4e5c005876dbe3d1e63bec7dcc0942762b48b1ecc6c1a918409a8a72812a1e245c0c67be6e729c2b49bc6ee4d24a8f63e78e75db45655c26a9a78aff36fcd67117f26b8f654dca664b9f0e30681874cb749e1a692720078856286c2560b0292cc837933423147569350955c9571bf8941ba128fd339cb4268f46b94bc6ee203eb7026813706ea51c4f24c91866fc23a724bf2501327e6ae89c29f8db315dc28d2c7c719514036367e018f4835f63fdecd71f9bdced7132b6c4f8b13c69a517026fcd3622d67cb632320d5e7308f78f4b7cea11f6291b137851dc6cd6366f2785c71c3f237f81a7658b2a8d512b61e0ad5a4710b7b124151689fcb2116063fbff7e9115fed7b93de834970b838e49f8f8ba5f1f874c354078b5810a55ae289a56da563f1da6cd80a3757d6073fa55e016e45ac6cec1f69d871c92fd0ae9670c74249045e6b464787f9504128736309fed205f8df4d90e332908581298d9c75a3fa36ab0c3c9272e62de53ab290c803d67b696fd615c260a47bffad16746f18ba1a10a061bacbea9369693b3c042eec36bed289d7d12e52bca8aa1c2dff88ca7816498d25626d0f1e106ebb0b4a12138e00f3df5b1c2f49d98b1756e69b641b7c6353d99dbff050f4d76842c6cf1c2a4b062fc8e6336fa689b7c9d5c6b4ab8c15a5c20e514ff070a602d85ae52fa7810c22f8eeffd34a095b93342144f7a98d024216b3d68ed7bea047517bfcd83ec83febd1ba0e5858e2bdc1d8b1f7b0f89e90ccc432a3f930cb8209462e64556c5054c56ca2a85f16b32eb83a10459d13516faa4d23302b7607b9bd38dab2239ac9e9440c314433fdfb3ceadab4b4f87415ed6f240e017221f3b5f7ac196cdf54957bec42fe6893994b46de3d27dc7fb58ca88feb5b9e79cf20053d12530ac524337b22a3629bea52f40b06d3e2128f32060f9105847daed81d35f20e2002817434659baff64494c5b5c7f9216bfda38412a0f70511159dc73bb6bae1f8eaa0ef08d99bcb31f94f6be12c29c83df45926430b366c99fca3270c15fc4056398fdf3135b7779e3066a006961d1ac0ad1c83179ce39e87a96b722ec23aabc065badf3e188347a360772ca6a447abac7e6a44f0d4632d52926332e44a0a86bff5ce699fd063bdda3ffd4c41b53ded49fecec67f40599b934e16e3fd1bc063ad7026f8d71bfd4cbaf56599586774723194b692036f1b6bb242e2ffb9c600b5215b412764599476ce475c9e5b396fbcebd6be323dcf4d0048077400aac7500db41dc95fc7f7edbe7c9c2ec5ea89943fe13b42217eef530bbd023671509e12dfce4e1c1c82955d965e6a68aa66f6967dba48feda572db1f099d9a6dc4bc8edade852b5e824a06890dc48a6a6510ecaf8cf7620d757290e3166d431abecc624fa9ac2234d2eb783308ead45544910c633a94964b2ef5fbc409cb8835ac4147d384e12e0a5e13951f7de0ee13eafcb0ca0c04946d7804040c0a3cd088352424b097adb7aad1ca4495952f3e6c0158c02d2bcec33bfda69301434a84d9027ce02c0b9725dad118\", \"d894b86261436362e64241e61f6b3e6589daf64dc641f60570c4c0bf3b1f2ca3\");\n }\n \n+static MuHash3072 FromInt(unsigned char i) {\n+    unsigned char tmp[32] = {i, 0};\n+    return MuHash3072(tmp);\n+}\n+\n+BOOST_AUTO_TEST_CASE(muhash_tests)\n+{\n+    unsigned char out[384];\n+\n+    for (int iter = 0; iter < 10; ++iter) {\n+        unsigned char res[384];\n+        int table[4];\n+        for (int i = 0; i < 4; ++i) {\n+            table[i] = g_insecure_rand_ctx.randbits(3);\n+        }\n+        for (int order = 0; order < 4; ++order) {\n+            MuHash3072 acc;\n+            for (int i = 0; i < 4; ++i) {\n+                int t = table[i ^ order];\n+                if (t & 4) {\n+                    acc /= FromInt(t & 3);\n+                } else {\n+                    acc *= FromInt(t & 3);\n+                }\n+            }\n+            acc.Finalize(out);\n+            if (order == 0) {\n+                memcpy(res, out, 384);\n+            } else {\n+                BOOST_CHECK(memcmp(res, out, 384) == 0);\n+            }\n+        }\n+\n+        MuHash3072 x = FromInt(g_insecure_rand_ctx.randbits(4)); // x=X\n+        MuHash3072 y = FromInt(g_insecure_rand_ctx.randbits(4)); // x=X, y=Y\n+        MuHash3072 z; // x=X, y=Y, z=1\n+        z *= x; // x=X, y=Y, z=X\n+        z /= y; // x=X, y=Y, z=X/Y",
      "path": "src/test/crypto_tests.cpp",
      "position": null,
      "original_position": 49,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "c540f8edc143e856474a27626cc0bd08018ed734",
      "in_reply_to_id": 489135525,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, I think this makes sense. From what I have read I think there was just no research done on the security of this. I think it makes sense to be defensive but I amended the comment that this would just not the intended use. I also updated the test to follow this.",
      "created_at": "2020-09-21T22:18:00Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r492377632",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492377632"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 898,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492377900",
      "pull_request_review_id": 493019728,
      "id": 492377900,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM3NzkwMA==",
      "diff_hunk": "@@ -0,0 +1,78 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <stdint.h>\n+\n+struct Num3072 {\n+#ifdef HAVE___INT128\n+    typedef unsigned __int128 double_limb_type;\n+    typedef uint64_t limb_type;\n+    static constexpr int LIMBS = 48;\n+    static constexpr int LIMB_SIZE = 64;\n+#else\n+    typedef uint64_t double_limb_type;\n+    typedef uint32_t limb_type;\n+    static constexpr int LIMBS = 96;\n+    static constexpr int LIMB_SIZE = 32;\n+#endif\n+    limb_type limbs[LIMBS];\n+};\n+\n+/** A class representing MuHash sets\n+ *\n+ * MuHash is a hashing algorithm that supports adding set elements in any\n+ * order but also deleting in any order. As a result, it can maintain a\n+ * running sum for a set of data as a whole, and add/subtract when data\n+ * is added to or removed from it. A downside of MuHash is that computing\n+ * an inverse is relatively expensive. This can be solved by representing\n+ * the running value as a fraction, and multiplying added elements into\n+ * the numerator and removed elements into the denominator. Only when the\n+ * final hash is desired, a single modular inverse and multiplication is\n+ * needed to combine the two.\n+ *\n+ * As the update operations are also associative, H(a)+H(b)+H(c)+H(d) can\n+ * in fact be computed as (H(a)+H(b)) + (H(c)+H(d)). This implies that\n+ * all of this is perfectly parallellizable: each thread can process an\n+ * arbitrary subset of the update operations, allowing them to be\n+ * efficiently combined later.\n+ *\n+ * This class does not enforce the use of a set as the data it represents.",
      "path": "src/crypto/muhash.h",
      "position": null,
      "original_position": 47,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "c540f8edc143e856474a27626cc0bd08018ed734",
      "in_reply_to_id": 489133613,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Updated that part a bit, I hope this is more clear.",
      "created_at": "2020-09-21T22:18:43Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r492377900",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492377900"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 47,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492377925",
      "pull_request_review_id": 493019768,
      "id": 492377925,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM3NzkyNQ==",
      "diff_hunk": "@@ -0,0 +1,78 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <stdint.h>\n+\n+struct Num3072 {\n+#ifdef HAVE___INT128\n+    typedef unsigned __int128 double_limb_type;\n+    typedef uint64_t limb_type;\n+    static constexpr int LIMBS = 48;\n+    static constexpr int LIMB_SIZE = 64;\n+#else\n+    typedef uint64_t double_limb_type;\n+    typedef uint32_t limb_type;\n+    static constexpr int LIMBS = 96;\n+    static constexpr int LIMB_SIZE = 32;\n+#endif\n+    limb_type limbs[LIMBS];\n+};\n+\n+/** A class representing MuHash sets\n+ *\n+ * MuHash is a hashing algorithm that supports adding set elements in any\n+ * order but also deleting in any order. As a result, it can maintain a\n+ * running sum for a set of data as a whole, and add/subtract when data\n+ * is added to or removed from it. A downside of MuHash is that computing\n+ * an inverse is relatively expensive. This can be solved by representing\n+ * the running value as a fraction, and multiplying added elements into\n+ * the numerator and removed elements into the denominator. Only when the\n+ * final hash is desired, a single modular inverse and multiplication is\n+ * needed to combine the two.\n+ *\n+ * As the update operations are also associative, H(a)+H(b)+H(c)+H(d) can\n+ * in fact be computed as (H(a)+H(b)) + (H(c)+H(d)). This implies that\n+ * all of this is perfectly parallellizable: each thread can process an\n+ * arbitrary subset of the update operations, allowing them to be\n+ * efficiently combined later.\n+ *\n+ * This class does not enforce the use of a set as the data it represents.\n+ * It is possible to add elements more than once and also to remove\n+ * elements that have not been added before. However, it is not clear if\n+ * security assumptions still hold in this case, so it should for now\n+ * only be used to represent a set of elements.\n+ *\n+ * See also https://cseweb.ucsd.edu/~mihir/papers/inchash.pdf and\n+ * https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014337.html.\n+ */\n+class MuHash3072\n+{\n+private:\n+    Num3072 data;\n+\n+public:\n+    /* The empty set. */\n+    MuHash3072() noexcept;\n+\n+    /* A singleton with a single 32-byte key in it. */\n+    explicit MuHash3072(const unsigned char* key32) noexcept;",
      "path": "src/crypto/muhash.h",
      "position": null,
      "original_position": 66,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "c540f8edc143e856474a27626cc0bd08018ed734",
      "in_reply_to_id": 489131218,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Makes sense. Done.",
      "created_at": "2020-09-21T22:18:49Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r492377925",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492377925"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492378952",
      "pull_request_review_id": 493020934,
      "id": 492378952,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM3ODk1Mg==",
      "diff_hunk": "@@ -73,6 +75,13 @@ class MuHash3072\n \n     /* Finalize into a 384-byte hash. Does not change this object's value. */\n     void Finalize(unsigned char* hash384) noexcept;\n+\n+    SERIALIZE_METHODS(MuHash3072, obj)\n+    {\n+        for (int i = 0; i < obj.LIMBS; ++i) {\n+            READWRITE(obj.limbs[i]);",
      "path": "src/crypto/muhash.h",
      "position": null,
      "original_position": 17,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "4cb77c70d3d43ebe004dc130d51ab0c75913c3f5",
      "in_reply_to_id": 489117810,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, this was a bug. I also added that test in an additional commit.",
      "created_at": "2020-09-21T22:21:20Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r492378952",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492378952"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 82,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492379981",
      "pull_request_review_id": 493022221,
      "id": 492379981,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM3OTk4MQ==",
      "diff_hunk": "@@ -0,0 +1,292 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_type MAX_PRIME_DIFF = 1103717;\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& c2, Num3072::limb_type& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+inline void extract2(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(Num3072::limb_type& c0, Num3072::limb_type& c1, const Num3072::limb_type& a, const Num3072::limb_type& b)\n+{\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)a * b;\n+    c1 = t >> Num3072::LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& c2, Num3072::limb_type& d0, Num3072::limb_type& d1, Num3072::limb_type& d2, const Num3072::limb_type& n)\n+{\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)d0 * n + c0;\n+    c0 = t;\n+    t >>= Num3072::LIMB_SIZE;\n+    t += (Num3072::double_limb_type)d1 * n + c1;\n+    c1 = t;\n+    t >>= Num3072::LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(Num3072::limb_type& c0, Num3072::limb_type& c1, const Num3072::limb_type& n)\n+{\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)c0 * n;\n+    c0 = t;\n+    t >>= Num3072::LIMB_SIZE;\n+    t += (Num3072::double_limb_type)c1 * n;\n+    c1 = t;\n+    t >>= Num3072::LIMB_SIZE;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& c2, const Num3072::limb_type& a, const Num3072::limb_type& b)\n+{\n+    Num3072::limb_type tl, th;\n+    {\n+        Num3072::double_limb_type t = (Num3072::double_limb_type)a * b;\n+        th = t >> Num3072::LIMB_SIZE;\n+        tl = t;\n+    }\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+inline void muldbladd3(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& c2, const Num3072::limb_type& a, const Num3072::limb_type& b)\n+{\n+    Num3072::limb_type tl, th;\n+    {\n+        Num3072::double_limb_type t = (Num3072::double_limb_type)a * b;\n+        th = t >> Num3072::LIMB_SIZE;\n+        tl = t;\n+    }\n+    c0 += tl;\n+    Num3072::limb_type tt = th + ((c0 < tl) ? 1 : 0);\n+    c1 += tt;\n+    c2 += (c1 < tt) ? 1 : 0;\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1] += a */\n+inline void add2(Num3072::limb_type& c0, Num3072::limb_type& c1, Num3072::limb_type& a)\n+{\n+    c0 += a;\n+    c1 += (c0 < a) ? 1 : 0;\n+}\n+\n+bool IsOverflow(const Num3072* d)\n+{\n+    for (int i = 1; i < Num3072::LIMBS - 1; ++i) {",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 111,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "c540f8edc143e856474a27626cc0bd08018ed734",
      "in_reply_to_id": 489167116,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, that makes sense. I also took your suggestion and added a basic test that executes the `IsOverflow` function which wasn't covered so far.",
      "created_at": "2020-09-21T22:24:09Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r492379981",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492379981"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 111,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492832419",
      "pull_request_review_id": 493589996,
      "id": 492832419,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjgzMjQxOQ==",
      "diff_hunk": "@@ -0,0 +1,304 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+using limb_t = Num3072::limb_t;\n+using double_limb_t = Num3072::double_limb_t;\n+constexpr int LIMB_SIZE = Num3072::LIMB_SIZE;\n+constexpr int LIMBS = Num3072::LIMBS;\n+\n+// Sanity check for Num3072 constants\n+static_assert(LIMB_SIZE * LIMBS == 3072, \"Num3072 isn't 3072 bits\");\n+static_assert(sizeof(double_limb_t) == sizeof(limb_t) * 2, \"bad size for double_limb_t\");\n+static_assert(sizeof(limb_t) * 8 == LIMB_SIZE, \"LIMB_SIZE is incorrect\");\n+\n+// Hard coded values in MuHash3072 constructor and Finalize\n+static_assert(sizeof(limb_t) == 4 || sizeof(limb_t) == 8, \"bad size for limb_t\");\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+inline void extract2(limb_t& c0, limb_t& c1, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(limb_t& c0, limb_t& c1, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    c1 = t >> LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& d0, limb_t& d1, limb_t& d2, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)d0 * n + c0;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)d1 * n + c1;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(limb_t& c0, limb_t& c1, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)c0 * n;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)c1 * n;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    limb_t tl, th;\n+    {\n+        double_limb_t t = (double_limb_t)a * b;\n+        th = t >> LIMB_SIZE;\n+        tl = t;\n+    }\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+inline void muldbladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    limb_t tl, th;\n+    {\n+        double_limb_t t = (double_limb_t)a * b;\n+        th = t >> LIMB_SIZE;\n+        tl = t;\n+    }\n+    c0 += tl;\n+    limb_t tt = th + ((c0 < tl) ? 1 : 0);\n+    c1 += tt;\n+    c2 += (c1 < tt) ? 1 : 0;\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1] += a */\n+inline void add2(limb_t& c0, limb_t& c1, limb_t& a)\n+{\n+    c0 += a;\n+    c1 += (c0 < a) ? 1 : 0;\n+}\n+\n+bool IsOverflow(const Num3072* d)\n+{\n+    if (d->limbs[0] <= std::numeric_limits<limb_t>::max() - MAX_PRIME_DIFF) return false;\n+    for (int i = 1; i < LIMBS; ++i) {\n+        if (d->limbs[i] != std::numeric_limits<limb_t>::max()) return false;\n+    }\n+    return true;\n+}\n+\n+void FullReduce(Num3072* d)\n+{\n+    limb_t c0 = MAX_PRIME_DIFF;\n+    for (int i = 0; i < LIMBS; ++i) {\n+        limb_t c1 = 0;\n+        add2(c0, c1, d->limbs[i]);\n+        extract2(c0, c1, d->limbs[i]);\n+    }\n+}\n+\n+void Multiply(Num3072* in_out, const Num3072* a)\n+{\n+    limb_t c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of in_out*a into tmp, including one reduction. */\n+    for (int j = 0; j < LIMBS - 1; ++j) {\n+        limb_t d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        mul(d0, d1, in_out->limbs[1 + j], a->limbs[LIMBS + j - (1 + j)]);\n+        for (int i = 2 + j; i < LIMBS; ++i) muladd3(d0, d1, d2, in_out->limbs[i], a->limbs[LIMBS + j - i]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < j + 1; ++i) muladd3(c0, c1, c2, in_out->limbs[i], a->limbs[j - i]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+    /* Compute limb N-1 of a*b into tmp. */\n+    {\n+        limb_t c2 = 0;\n+        for (int i = 0; i < LIMBS; ++i) muladd3(c0, c1, c2, in_out->limbs[i], a->limbs[LIMBS - 1 - i]);\n+        extract3(c0, c1, c2, tmp.limbs[LIMBS - 1]);\n+    }\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, in_out->limbs[j]);\n+    }\n+#ifdef DEBUG\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+#endif\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(in_out);\n+}\n+\n+void Square(Num3072* in_out)\n+{\n+    limb_t c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of in_out*in_out into tmp, including one reduction. */\n+    for (int j = 0; j < LIMBS - 1; ++j) {\n+        limb_t d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        for (int i = 0; i < (LIMBS - 1 - j) / 2; ++i) muldbladd3(d0, d1, d2, in_out->limbs[i + j + 1], in_out->limbs[LIMBS - 1 - i]);\n+        if ((j + 1) & 1) muladd3(d0, d1, d2, in_out->limbs[(LIMBS - 1 - j) / 2 + j + 1], in_out->limbs[LIMBS - 1 - (LIMBS - 1 - j) / 2]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < (j + 1) / 2; ++i) muldbladd3(c0, c1, c2, in_out->limbs[i], in_out->limbs[j - i]);\n+        if ((j + 1) & 1) muladd3(c0, c1, c2, in_out->limbs[(j + 1) / 2], in_out->limbs[j - (j + 1) / 2]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+    {\n+        limb_t c2 = 0;\n+        for (int i = 0; i < LIMBS / 2; ++i) muldbladd3(c0, c1, c2, in_out->limbs[i], in_out->limbs[LIMBS - 1 - i]);\n+        extract3(c0, c1, c2, tmp.limbs[LIMBS - 1]);\n+    }\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, in_out->limbs[j]);\n+    }\n+#ifdef DEBUG\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+#endif\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(in_out);\n+}\n+\n+void Inverse(Num3072* out, const Num3072* a)\n+{\n+    // For fast exponentiation a sliding window exponentiation with repunit\n+    // precomputation is utilized. See \"Fast Point Decompression for Standard\n+    // Elliptic Curves\" (Brumley, Järvinen, 2008).",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 210,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "ef53ca76cc616cd359969533a75c3dab388ec38d",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Confirmed that this is calculating `out = a ** (2**3072 - MAX_PRIME_DIFF - 2)` by noting that all the operations are multiplicative and thus you can take the log of everything in base `a`, giving:\r\n\r\n```python\r\n>>> p = [2**(2**i)-1 for i in range(12)]\r\n>>> def double_n_add(x, n, pn):\r\n...     for j in range(n): x *= 2\r\n...     return x + p[pn]\r\n... \r\n>>> x = p[11]\r\n>>> x = double_n_add(x, 512, 9)\r\n>>> x = double_n_add(x, 256, 8)\r\n>>> x = double_n_add(x, 128, 7)\r\n>>> x = double_n_add(x,  64, 6)\r\n>>> x = double_n_add(x,  32, 5)\r\n>>> x = double_n_add(x,   8, 3)\r\n>>> x = double_n_add(x,   2, 1)\r\n>>> x = double_n_add(x,   1, 0)\r\n>>> x = double_n_add(x,   5, 2)\r\n>>> x = double_n_add(x,   3, 0)\r\n>>> x = double_n_add(x,   2, 0)\r\n>>> x = double_n_add(x,   4, 0)\r\n>>> x = double_n_add(x,   4, 1)\r\n>>> x = double_n_add(x,   3, 0)\r\n>>> x == 2**3072 - 1103717 - 2\r\nTrue\r\n```",
      "created_at": "2020-09-22T15:30:36Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r492832419",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492832419"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 210,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492867088",
      "pull_request_review_id": 493589996,
      "id": 492867088,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg2NzA4OA==",
      "diff_hunk": "@@ -122,6 +135,9 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n             case 9: {\n                 data.resize(SHA3_256::OUTPUT_SIZE);\n                 sha3.Finalize(data);\n+            case 10: {",
      "path": "src/test/fuzz/crypto.cpp",
      "position": 46,
      "original_position": 50,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "f9b3c4bf0686e418e32c4a60f5598e7c23599d93",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Missing `}` for case 9.",
      "created_at": "2020-09-22T16:18:28Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r492867088",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492867088"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 136,
      "original_line": 136,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492867231",
      "pull_request_review_id": 493589996,
      "id": 492867231,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg2NzIzMQ==",
      "diff_hunk": "@@ -122,6 +135,9 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n             case 9: {\n                 data.resize(SHA3_256::OUTPUT_SIZE);\n                 sha3.Finalize(data);\n+            case 10: {\n+                data.resize(384);\n+                muhash.Finalize(data.data());",
      "path": "src/test/fuzz/crypto.cpp",
      "position": null,
      "original_position": 52,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "f9b3c4bf0686e418e32c4a60f5598e7c23599d93",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`Finalize(data)`",
      "created_at": "2020-09-22T16:18:40Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r492867231",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492867231"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 140,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492867426",
      "pull_request_review_id": 493589996,
      "id": 492867426,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg2NzQyNg==",
      "diff_hunk": "@@ -60,6 +62,16 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n             (void)Hash(data);\n             (void)Hash160(data);\n             (void)sha512.Size();\n+\n+            // MuHash3072 only accepts a fixed key length of 32 bytes\n+            std::vector<uint8_t> muhash_data = data;\n+            muhash_data.resize(32);\n+\n+            if (fuzzed_data_provider.ConsumeBool()) {\n+                muhash *= MuHash3072(muhash_data.data());\n+            } else {\n+                muhash /= MuHash3072(muhash_data.data());",
      "path": "src/test/fuzz/crypto.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "f9b3c4bf0686e418e32c4a60f5598e7c23599d93",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`MuHash3072(muhash_data)`",
      "created_at": "2020-09-22T16:18:57Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r492867426",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492867426"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 73,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499093557",
      "pull_request_review_id": 501500195,
      "id": 499093557,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5MzU1Nw==",
      "diff_hunk": "@@ -60,6 +62,16 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n             (void)Hash(data);\n             (void)Hash160(data);\n             (void)sha512.Size();\n+\n+            // MuHash3072 only accepts a fixed key length of 32 bytes\n+            std::vector<uint8_t> muhash_data = data;\n+            muhash_data.resize(32);\n+\n+            if (fuzzed_data_provider.ConsumeBool()) {\n+                muhash *= MuHash3072(muhash_data.data());\n+            } else {\n+                muhash /= MuHash3072(muhash_data.data());",
      "path": "src/test/fuzz/crypto.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "f9b3c4bf0686e418e32c4a60f5598e7c23599d93",
      "in_reply_to_id": 492867426,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2020-10-03T00:02:48Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r499093557",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499093557"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 73,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499093569",
      "pull_request_review_id": 501500216,
      "id": 499093569,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5MzU2OQ==",
      "diff_hunk": "@@ -122,6 +135,9 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n             case 9: {\n                 data.resize(SHA3_256::OUTPUT_SIZE);\n                 sha3.Finalize(data);\n+            case 10: {\n+                data.resize(384);\n+                muhash.Finalize(data.data());",
      "path": "src/test/fuzz/crypto.cpp",
      "position": null,
      "original_position": 52,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "f9b3c4bf0686e418e32c4a60f5598e7c23599d93",
      "in_reply_to_id": 492867231,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2020-10-03T00:02:57Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r499093569",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499093569"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 140,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499093583",
      "pull_request_review_id": 501500235,
      "id": 499093583,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5MzU4Mw==",
      "diff_hunk": "@@ -122,6 +135,9 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n             case 9: {\n                 data.resize(SHA3_256::OUTPUT_SIZE);\n                 sha3.Finalize(data);\n+            case 10: {",
      "path": "src/test/fuzz/crypto.cpp",
      "position": 46,
      "original_position": 50,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "f9b3c4bf0686e418e32c4a60f5598e7c23599d93",
      "in_reply_to_id": 492867088,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2020-10-03T00:03:04Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r499093583",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499093583"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 136,
      "original_line": 136,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507170069",
      "pull_request_review_id": 511150383,
      "id": 507170069,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzE3MDA2OQ==",
      "diff_hunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <serialize.h>\n+\n+#include <stdint.h>\n+\n+struct Num3072 {",
      "path": "src/crypto/muhash.h",
      "position": null,
      "original_position": 16,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "e19e50013478c6b7066aa2c9f7e0d0ee7219e837",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It seems a shame to make `Num3072` part of the public interface just so it can be used in a single test in crypt_tests.cpp. Is there a way the overflow test can be written without using the `Num3072` class?",
      "created_at": "2020-10-18T14:31:50Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r507170069",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507170069"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507170142",
      "pull_request_review_id": 511150383,
      "id": 507170142,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzE3MDE0Mg==",
      "diff_hunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <serialize.h>\n+\n+#include <stdint.h>\n+\n+struct Num3072 {\n+#ifdef HAVE___INT128\n+    typedef unsigned __int128 double_limb_t;\n+    typedef uint64_t limb_t;\n+    static constexpr int LIMBS = 48;\n+    static constexpr int LIMB_SIZE = 64;\n+#else\n+    typedef uint64_t double_limb_t;\n+    typedef uint32_t limb_t;\n+    static constexpr int LIMBS = 96;\n+    static constexpr int LIMB_SIZE = 32;\n+#endif\n+    limb_t limbs[LIMBS];\n+};\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_t MAX_PRIME_DIFF = 1103717;",
      "path": "src/crypto/muhash.h",
      "position": null,
      "original_position": 32,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "e19e50013478c6b7066aa2c9f7e0d0ee7219e837",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This doesn't need to be in the public interface and can be in the .cpp file's unnamed namespace.",
      "created_at": "2020-10-18T14:32:27Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r507170142",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507170142"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507170212",
      "pull_request_review_id": 511150383,
      "id": 507170212,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzE3MDIxMg==",
      "diff_hunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <serialize.h>\n+\n+#include <stdint.h>\n+\n+struct Num3072 {\n+#ifdef HAVE___INT128\n+    typedef unsigned __int128 double_limb_t;\n+    typedef uint64_t limb_t;\n+    static constexpr int LIMBS = 48;\n+    static constexpr int LIMB_SIZE = 64;\n+#else\n+    typedef uint64_t double_limb_t;\n+    typedef uint32_t limb_t;\n+    static constexpr int LIMBS = 96;\n+    static constexpr int LIMB_SIZE = 32;\n+#endif\n+    limb_t limbs[LIMBS];\n+};\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_t MAX_PRIME_DIFF = 1103717;\n+\n+/** A class representing MuHash sets\n+ *\n+ * MuHash is a hashing algorithm that supports adding set elements in any\n+ * order but also deleting in any order. As a result, it can maintain a\n+ * running sum for a set of data as a whole, and add/subtract when data\n+ * is added to or removed from it. A downside of MuHash is that computing\n+ * an inverse is relatively expensive. This can be solved by representing\n+ * the running value as a fraction, and multiplying added elements into\n+ * the numerator and removed elements into the denominator. Only when the\n+ * final hash is desired, a single modular inverse and multiplication is\n+ * needed to combine the two.\n+ *\n+ * TODO: Represent running value as a fraction to allow for more intuitive\n+ * use (see above).\n+ *\n+ * As the update operations are also associative, H(a)+H(b)+H(c)+H(d) can\n+ * in fact be computed as (H(a)+H(b)) + (H(c)+H(d)). This implies that\n+ * all of this is perfectly parallellizable: each thread can process an\n+ * arbitrary subset of the update operations, allowing them to be\n+ * efficiently combined later.\n+ *\n+ * Muhash does not support checking if an element is already part of the\n+ * set. That is why this class does not enforce the use of a set as the\n+ * data it represents because there is no efficient way to do so..\n+ * It is possible to add elements more than once and also to remove\n+ * elements that have not been added before. However, this implementation\n+ * is intended to represent a set of elements.\n+ *\n+ * See also https://cseweb.ucsd.edu/~mihir/papers/inchash.pdf and\n+ * https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014337.html.\n+ */\n+class MuHash3072\n+{\n+protected:\n+    Num3072 data;",
      "path": "src/crypto/muhash.h",
      "position": null,
      "original_position": 68,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "e19e50013478c6b7066aa2c9f7e0d0ee7219e837",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Any reason not to use the project's style guide and name member variables with an `m_` prefix?",
      "created_at": "2020-10-18T14:32:59Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r507170212",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507170212"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507170280",
      "pull_request_review_id": 511150383,
      "id": 507170280,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzE3MDI4MA==",
      "diff_hunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <serialize.h>\n+\n+#include <stdint.h>\n+\n+struct Num3072 {\n+#ifdef HAVE___INT128\n+    typedef unsigned __int128 double_limb_t;\n+    typedef uint64_t limb_t;\n+    static constexpr int LIMBS = 48;\n+    static constexpr int LIMB_SIZE = 64;\n+#else\n+    typedef uint64_t double_limb_t;\n+    typedef uint32_t limb_t;\n+    static constexpr int LIMBS = 96;\n+    static constexpr int LIMB_SIZE = 32;\n+#endif\n+    limb_t limbs[LIMBS];\n+};\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_t MAX_PRIME_DIFF = 1103717;\n+\n+/** A class representing MuHash sets\n+ *\n+ * MuHash is a hashing algorithm that supports adding set elements in any\n+ * order but also deleting in any order. As a result, it can maintain a\n+ * running sum for a set of data as a whole, and add/subtract when data\n+ * is added to or removed from it. A downside of MuHash is that computing\n+ * an inverse is relatively expensive. This can be solved by representing\n+ * the running value as a fraction, and multiplying added elements into\n+ * the numerator and removed elements into the denominator. Only when the\n+ * final hash is desired, a single modular inverse and multiplication is\n+ * needed to combine the two.\n+ *\n+ * TODO: Represent running value as a fraction to allow for more intuitive\n+ * use (see above).\n+ *\n+ * As the update operations are also associative, H(a)+H(b)+H(c)+H(d) can\n+ * in fact be computed as (H(a)+H(b)) + (H(c)+H(d)). This implies that\n+ * all of this is perfectly parallellizable: each thread can process an\n+ * arbitrary subset of the update operations, allowing them to be\n+ * efficiently combined later.\n+ *\n+ * Muhash does not support checking if an element is already part of the\n+ * set. That is why this class does not enforce the use of a set as the\n+ * data it represents because there is no efficient way to do so..\n+ * It is possible to add elements more than once and also to remove\n+ * elements that have not been added before. However, this implementation\n+ * is intended to represent a set of elements.\n+ *\n+ * See also https://cseweb.ucsd.edu/~mihir/papers/inchash.pdf and\n+ * https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014337.html.\n+ */\n+class MuHash3072\n+{\n+protected:\n+    Num3072 data;\n+\n+    static constexpr size_t INPUT_SIZE = 32;\n+    static constexpr size_t OUTPUT_SIZE = 384;",
      "path": "src/crypto/muhash.h",
      "position": null,
      "original_position": 71,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "e19e50013478c6b7066aa2c9f7e0d0ee7219e837",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Again, it'd be nice if these weren't exposed in the header file and were moved to the cpp file's unnamed namespace.",
      "created_at": "2020-10-18T14:33:32Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r507170280",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507170280"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": 70,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 71,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507173075",
      "pull_request_review_id": 511150383,
      "id": 507173075,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzE3MzA3NQ==",
      "diff_hunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <serialize.h>\n+\n+#include <stdint.h>\n+\n+struct Num3072 {\n+#ifdef HAVE___INT128\n+    typedef unsigned __int128 double_limb_t;\n+    typedef uint64_t limb_t;\n+    static constexpr int LIMBS = 48;\n+    static constexpr int LIMB_SIZE = 64;\n+#else\n+    typedef uint64_t double_limb_t;\n+    typedef uint32_t limb_t;\n+    static constexpr int LIMBS = 96;\n+    static constexpr int LIMB_SIZE = 32;\n+#endif\n+    limb_t limbs[LIMBS];\n+};\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_t MAX_PRIME_DIFF = 1103717;\n+\n+/** A class representing MuHash sets\n+ *\n+ * MuHash is a hashing algorithm that supports adding set elements in any\n+ * order but also deleting in any order. As a result, it can maintain a\n+ * running sum for a set of data as a whole, and add/subtract when data\n+ * is added to or removed from it. A downside of MuHash is that computing\n+ * an inverse is relatively expensive. This can be solved by representing\n+ * the running value as a fraction, and multiplying added elements into\n+ * the numerator and removed elements into the denominator. Only when the\n+ * final hash is desired, a single modular inverse and multiplication is\n+ * needed to combine the two.\n+ *\n+ * TODO: Represent running value as a fraction to allow for more intuitive\n+ * use (see above).\n+ *\n+ * As the update operations are also associative, H(a)+H(b)+H(c)+H(d) can\n+ * in fact be computed as (H(a)+H(b)) + (H(c)+H(d)). This implies that\n+ * all of this is perfectly parallellizable: each thread can process an\n+ * arbitrary subset of the update operations, allowing them to be\n+ * efficiently combined later.\n+ *\n+ * Muhash does not support checking if an element is already part of the\n+ * set. That is why this class does not enforce the use of a set as the\n+ * data it represents because there is no efficient way to do so..\n+ * It is possible to add elements more than once and also to remove\n+ * elements that have not been added before. However, this implementation\n+ * is intended to represent a set of elements.\n+ *\n+ * See also https://cseweb.ucsd.edu/~mihir/papers/inchash.pdf and\n+ * https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014337.html.\n+ */\n+class MuHash3072\n+{\n+protected:\n+    Num3072 data;\n+\n+    static constexpr size_t INPUT_SIZE = 32;\n+    static constexpr size_t OUTPUT_SIZE = 384;\n+\n+public:\n+    /* The empty set. */\n+    MuHash3072() noexcept;\n+\n+    /* A singleton with a single 32-byte key in it. */\n+    explicit MuHash3072(Span<const unsigned char> key32) noexcept;\n+\n+    /* Multiply (resulting in a hash for the union of the sets) */\n+    MuHash3072& operator*=(const MuHash3072& add) noexcept;\n+\n+    /* Divide (resulting in a hash for the difference of the sets) */\n+    MuHash3072& operator/=(const MuHash3072& sub) noexcept;\n+\n+    /* Finalize into a 384-byte hash. Does not change this object's value. */\n+    void Finalize(Span<unsigned char> hash384) noexcept;\n+\n+    SERIALIZE_METHODS(MuHash3072, obj)",
      "path": "src/crypto/muhash.h",
      "position": 123,
      "original_position": 89,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "e19e50013478c6b7066aa2c9f7e0d0ee7219e837",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is this platform independent (ie between HAVE___INT128 and !HAVE___INT128 platforms)? I guess so because the unit tests are asserting exact serializations.",
      "created_at": "2020-10-18T14:56:08Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r507173075",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507173075"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 123,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507173583",
      "pull_request_review_id": 511150383,
      "id": 507173583,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzE3MzU4Mw==",
      "diff_hunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <serialize.h>\n+\n+#include <stdint.h>\n+\n+struct Num3072 {\n+#ifdef HAVE___INT128",
      "path": "src/crypto/muhash.h",
      "position": 26,
      "original_position": 17,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "e19e50013478c6b7066aa2c9f7e0d0ee7219e837",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Has the performance benefit of using `__int128` been measured? My instinct would be to remove the platform-dependent code, including all the typedefs and static_asserts.\tThere are benefits to having just a single implementation (simpler, smaller code), and the performance of the mushash implementation isn't critical, since it'll only be used in indexing and the rpc interface.",
      "created_at": "2020-10-18T15:00:01Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r507173583",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507173583"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 26,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507178737",
      "pull_request_review_id": 511150383,
      "id": 507178737,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzE3ODczNw==",
      "diff_hunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <serialize.h>\n+\n+#include <stdint.h>\n+\n+struct Num3072 {\n+#ifdef HAVE___INT128\n+    typedef unsigned __int128 double_limb_t;\n+    typedef uint64_t limb_t;\n+    static constexpr int LIMBS = 48;\n+    static constexpr int LIMB_SIZE = 64;\n+#else\n+    typedef uint64_t double_limb_t;\n+    typedef uint32_t limb_t;\n+    static constexpr int LIMBS = 96;\n+    static constexpr int LIMB_SIZE = 32;\n+#endif\n+    limb_t limbs[LIMBS];\n+};\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_t MAX_PRIME_DIFF = 1103717;\n+\n+/** A class representing MuHash sets\n+ *\n+ * MuHash is a hashing algorithm that supports adding set elements in any\n+ * order but also deleting in any order. As a result, it can maintain a\n+ * running sum for a set of data as a whole, and add/subtract when data\n+ * is added to or removed from it. A downside of MuHash is that computing\n+ * an inverse is relatively expensive. This can be solved by representing\n+ * the running value as a fraction, and multiplying added elements into\n+ * the numerator and removed elements into the denominator. Only when the\n+ * final hash is desired, a single modular inverse and multiplication is\n+ * needed to combine the two.\n+ *\n+ * TODO: Represent running value as a fraction to allow for more intuitive\n+ * use (see above).\n+ *\n+ * As the update operations are also associative, H(a)+H(b)+H(c)+H(d) can\n+ * in fact be computed as (H(a)+H(b)) + (H(c)+H(d)). This implies that\n+ * all of this is perfectly parallellizable: each thread can process an\n+ * arbitrary subset of the update operations, allowing them to be\n+ * efficiently combined later.\n+ *\n+ * Muhash does not support checking if an element is already part of the\n+ * set. That is why this class does not enforce the use of a set as the\n+ * data it represents because there is no efficient way to do so..\n+ * It is possible to add elements more than once and also to remove\n+ * elements that have not been added before. However, this implementation\n+ * is intended to represent a set of elements.\n+ *\n+ * See also https://cseweb.ucsd.edu/~mihir/papers/inchash.pdf and\n+ * https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014337.html.\n+ */\n+class MuHash3072\n+{\n+protected:\n+    Num3072 data;\n+\n+    static constexpr size_t INPUT_SIZE = 32;\n+    static constexpr size_t OUTPUT_SIZE = 384;\n+\n+public:\n+    /* The empty set. */\n+    MuHash3072() noexcept;\n+\n+    /* A singleton with a single 32-byte key in it. */\n+    explicit MuHash3072(Span<const unsigned char> key32) noexcept;\n+\n+    /* Multiply (resulting in a hash for the union of the sets) */\n+    MuHash3072& operator*=(const MuHash3072& add) noexcept;\n+\n+    /* Divide (resulting in a hash for the difference of the sets) */\n+    MuHash3072& operator/=(const MuHash3072& sub) noexcept;\n+\n+    /* Finalize into a 384-byte hash. Does not change this object's value. */\n+    void Finalize(Span<unsigned char> hash384) noexcept;\n+\n+    SERIALIZE_METHODS(MuHash3072, obj)\n+    {\n+        for (int i = 0; i < obj.data.LIMBS; ++i) {\n+            READWRITE(obj.data.limbs[i]);\n+        }",
      "path": "src/crypto/muhash.h",
      "position": null,
      "original_position": 93,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "e19e50013478c6b7066aa2c9f7e0d0ee7219e837",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Consider using a range based loop:\r\n\r\n```suggestion\r\n        for (auto& limb : obj.data.limbs) {\r\n            READWRITE(limb);\r\n        }\r\n```",
      "created_at": "2020-10-18T15:47:19Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r507178737",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507178737"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": 91,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507179354",
      "pull_request_review_id": 511150383,
      "id": 507179354,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzE3OTM1NA==",
      "diff_hunk": "@@ -0,0 +1,304 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+using limb_t = Num3072::limb_t;\n+using double_limb_t = Num3072::double_limb_t;\n+constexpr int LIMB_SIZE = Num3072::LIMB_SIZE;\n+constexpr int LIMBS = Num3072::LIMBS;\n+\n+// Sanity check for Num3072 constants\n+static_assert(LIMB_SIZE * LIMBS == 3072, \"Num3072 isn't 3072 bits\");\n+static_assert(sizeof(double_limb_t) == sizeof(limb_t) * 2, \"bad size for double_limb_t\");\n+static_assert(sizeof(limb_t) * 8 == LIMB_SIZE, \"LIMB_SIZE is incorrect\");\n+\n+// Hard coded values in MuHash3072 constructor and Finalize\n+static_assert(sizeof(limb_t) == 4 || sizeof(limb_t) == 8, \"bad size for limb_t\");\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+inline void extract2(limb_t& c0, limb_t& c1, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(limb_t& c0, limb_t& c1, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    c1 = t >> LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& d0, limb_t& d1, limb_t& d2, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)d0 * n + c0;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)d1 * n + c1;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(limb_t& c0, limb_t& c1, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)c0 * n;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)c1 * n;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    limb_t tl, th;\n+    {\n+        double_limb_t t = (double_limb_t)a * b;\n+        th = t >> LIMB_SIZE;\n+        tl = t;\n+    }\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+inline void muldbladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    limb_t tl, th;\n+    {\n+        double_limb_t t = (double_limb_t)a * b;\n+        th = t >> LIMB_SIZE;\n+        tl = t;\n+    }\n+    c0 += tl;\n+    limb_t tt = th + ((c0 < tl) ? 1 : 0);\n+    c1 += tt;\n+    c2 += (c1 < tt) ? 1 : 0;\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1] += a */\n+inline void add2(limb_t& c0, limb_t& c1, limb_t& a)\n+{\n+    c0 += a;\n+    c1 += (c0 < a) ? 1 : 0;\n+}\n+\n+bool IsOverflow(const Num3072* d)",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 119,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "e19e50013478c6b7066aa2c9f7e0d0ee7219e837",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "All of these functions (`IsOverflow()`, `FullReduce()`, `Multiply()`, `Square()`, `Inverse()`) take pointers, but they're always called with non-null ptrs and there's no null checking in the function body. Consider changing the signatures to take references to better express that they must be called with an actual object.",
      "created_at": "2020-10-18T15:52:48Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r507179354",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507179354"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507179765",
      "pull_request_review_id": 511150383,
      "id": 507179765,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzE3OTc2NQ==",
      "diff_hunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <serialize.h>\n+\n+#include <stdint.h>\n+\n+struct Num3072 {\n+#ifdef HAVE___INT128\n+    typedef unsigned __int128 double_limb_t;\n+    typedef uint64_t limb_t;\n+    static constexpr int LIMBS = 48;\n+    static constexpr int LIMB_SIZE = 64;\n+#else\n+    typedef uint64_t double_limb_t;\n+    typedef uint32_t limb_t;\n+    static constexpr int LIMBS = 96;\n+    static constexpr int LIMB_SIZE = 32;\n+#endif\n+    limb_t limbs[LIMBS];\n+};\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_t MAX_PRIME_DIFF = 1103717;\n+\n+/** A class representing MuHash sets\n+ *\n+ * MuHash is a hashing algorithm that supports adding set elements in any\n+ * order but also deleting in any order. As a result, it can maintain a\n+ * running sum for a set of data as a whole, and add/subtract when data\n+ * is added to or removed from it. A downside of MuHash is that computing\n+ * an inverse is relatively expensive. This can be solved by representing\n+ * the running value as a fraction, and multiplying added elements into\n+ * the numerator and removed elements into the denominator. Only when the\n+ * final hash is desired, a single modular inverse and multiplication is\n+ * needed to combine the two.\n+ *\n+ * TODO: Represent running value as a fraction to allow for more intuitive\n+ * use (see above).\n+ *\n+ * As the update operations are also associative, H(a)+H(b)+H(c)+H(d) can\n+ * in fact be computed as (H(a)+H(b)) + (H(c)+H(d)). This implies that\n+ * all of this is perfectly parallellizable: each thread can process an\n+ * arbitrary subset of the update operations, allowing them to be\n+ * efficiently combined later.\n+ *\n+ * Muhash does not support checking if an element is already part of the\n+ * set. That is why this class does not enforce the use of a set as the\n+ * data it represents because there is no efficient way to do so..",
      "path": "src/crypto/muhash.h",
      "position": null,
      "original_position": 57,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "e19e50013478c6b7066aa2c9f7e0d0ee7219e837",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "s/to do so../to do so./ (remove double .)",
      "created_at": "2020-10-18T15:56:13Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r507179765",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507179765"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 57,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507183199",
      "pull_request_review_id": 511150383,
      "id": 507183199,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzE4MzE5OQ==",
      "diff_hunk": "@@ -0,0 +1,304 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+using limb_t = Num3072::limb_t;\n+using double_limb_t = Num3072::double_limb_t;\n+constexpr int LIMB_SIZE = Num3072::LIMB_SIZE;\n+constexpr int LIMBS = Num3072::LIMBS;\n+\n+// Sanity check for Num3072 constants\n+static_assert(LIMB_SIZE * LIMBS == 3072, \"Num3072 isn't 3072 bits\");\n+static_assert(sizeof(double_limb_t) == sizeof(limb_t) * 2, \"bad size for double_limb_t\");\n+static_assert(sizeof(limb_t) * 8 == LIMB_SIZE, \"LIMB_SIZE is incorrect\");\n+\n+// Hard coded values in MuHash3072 constructor and Finalize\n+static_assert(sizeof(limb_t) == 4 || sizeof(limb_t) == 8, \"bad size for limb_t\");\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+inline void extract2(limb_t& c0, limb_t& c1, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(limb_t& c0, limb_t& c1, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    c1 = t >> LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& d0, limb_t& d1, limb_t& d2, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)d0 * n + c0;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)d1 * n + c1;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(limb_t& c0, limb_t& c1, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)c0 * n;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)c1 * n;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    limb_t tl, th;\n+    {\n+        double_limb_t t = (double_limb_t)a * b;\n+        th = t >> LIMB_SIZE;\n+        tl = t;\n+    }\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+inline void muldbladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    limb_t tl, th;\n+    {\n+        double_limb_t t = (double_limb_t)a * b;\n+        th = t >> LIMB_SIZE;\n+        tl = t;\n+    }\n+    c0 += tl;\n+    limb_t tt = th + ((c0 < tl) ? 1 : 0);\n+    c1 += tt;\n+    c2 += (c1 < tt) ? 1 : 0;\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1] += a */\n+inline void add2(limb_t& c0, limb_t& c1, limb_t& a)\n+{\n+    c0 += a;\n+    c1 += (c0 < a) ? 1 : 0;\n+}\n+\n+bool IsOverflow(const Num3072* d)\n+{\n+    if (d->limbs[0] <= std::numeric_limits<limb_t>::max() - MAX_PRIME_DIFF) return false;\n+    for (int i = 1; i < LIMBS; ++i) {\n+        if (d->limbs[i] != std::numeric_limits<limb_t>::max()) return false;\n+    }\n+    return true;\n+}\n+\n+void FullReduce(Num3072* d)\n+{\n+    limb_t c0 = MAX_PRIME_DIFF;\n+    for (int i = 0; i < LIMBS; ++i) {\n+        limb_t c1 = 0;\n+        add2(c0, c1, d->limbs[i]);\n+        extract2(c0, c1, d->limbs[i]);\n+    }\n+}\n+\n+void Multiply(Num3072* in_out, const Num3072* a)\n+{\n+    limb_t c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of in_out*a into tmp, including one reduction. */\n+    for (int j = 0; j < LIMBS - 1; ++j) {\n+        limb_t d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        mul(d0, d1, in_out->limbs[1 + j], a->limbs[LIMBS + j - (1 + j)]);\n+        for (int i = 2 + j; i < LIMBS; ++i) muladd3(d0, d1, d2, in_out->limbs[i], a->limbs[LIMBS + j - i]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < j + 1; ++i) muladd3(c0, c1, c2, in_out->limbs[i], a->limbs[j - i]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+    /* Compute limb N-1 of a*b into tmp. */\n+    {\n+        limb_t c2 = 0;\n+        for (int i = 0; i < LIMBS; ++i) muladd3(c0, c1, c2, in_out->limbs[i], a->limbs[LIMBS - 1 - i]);\n+        extract3(c0, c1, c2, tmp.limbs[LIMBS - 1]);\n+    }\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, in_out->limbs[j]);\n+    }\n+#ifdef DEBUG\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+#endif\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(in_out);\n+}\n+\n+void Square(Num3072* in_out)\n+{\n+    limb_t c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of in_out*in_out into tmp, including one reduction. */\n+    for (int j = 0; j < LIMBS - 1; ++j) {\n+        limb_t d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        for (int i = 0; i < (LIMBS - 1 - j) / 2; ++i) muldbladd3(d0, d1, d2, in_out->limbs[i + j + 1], in_out->limbs[LIMBS - 1 - i]);\n+        if ((j + 1) & 1) muladd3(d0, d1, d2, in_out->limbs[(LIMBS - 1 - j) / 2 + j + 1], in_out->limbs[LIMBS - 1 - (LIMBS - 1 - j) / 2]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < (j + 1) / 2; ++i) muldbladd3(c0, c1, c2, in_out->limbs[i], in_out->limbs[j - i]);\n+        if ((j + 1) & 1) muladd3(c0, c1, c2, in_out->limbs[(j + 1) / 2], in_out->limbs[j - (j + 1) / 2]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+    {\n+        limb_t c2 = 0;\n+        for (int i = 0; i < LIMBS / 2; ++i) muldbladd3(c0, c1, c2, in_out->limbs[i], in_out->limbs[LIMBS - 1 - i]);\n+        extract3(c0, c1, c2, tmp.limbs[LIMBS - 1]);\n+    }\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, in_out->limbs[j]);\n+    }\n+#ifdef DEBUG\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+#endif\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(in_out);\n+}\n+\n+void Inverse(Num3072* out, const Num3072* a)\n+{\n+    // For fast exponentiation a sliding window exponentiation with repunit\n+    // precomputation is utilized. See \"Fast Point Decompression for Standard\n+    // Elliptic Curves\" (Brumley, Järvinen, 2008).\n+\n+    Num3072 p[12]; // p[i] = a^(2^(2^i)-1)\n+    Num3072 x;\n+\n+    p[0] = *a;\n+\n+    for (int i = 0; i < 11; ++i) {\n+        p[i + 1] = p[i];\n+        for (int j = 0; j < (1 << i); ++j) Square(&p[i + 1]);\n+        Multiply(&p[i + 1], &p[i]);\n+    }\n+\n+    x = p[11];\n+\n+    for (int j = 0; j < 512; ++j) Square(&x);\n+    Multiply(&x, &p[9]);\n+    for (int j = 0; j < 256; ++j) Square(&x);\n+    Multiply(&x, &p[8]);\n+    for (int j = 0; j < 128; ++j) Square(&x);\n+    Multiply(&x, &p[7]);\n+    for (int j = 0; j < 64; ++j) Square(&x);\n+    Multiply(&x, &p[6]);\n+    for (int j = 0; j < 32; ++j) Square(&x);\n+    Multiply(&x, &p[5]);\n+    for (int j = 0; j < 8; ++j) Square(&x);\n+    Multiply(&x, &p[3]);\n+    for (int j = 0; j < 2; ++j) Square(&x);\n+    Multiply(&x, &p[1]);\n+    for (int j = 0; j < 1; ++j) Square(&x);\n+    Multiply(&x, &p[0]);\n+    for (int j = 0; j < 5; ++j) Square(&x);\n+    Multiply(&x, &p[2]);\n+    for (int j = 0; j < 3; ++j) Square(&x);\n+    Multiply(&x, &p[0]);\n+    for (int j = 0; j < 2; ++j) Square(&x);\n+    Multiply(&x, &p[0]);\n+    for (int j = 0; j < 4; ++j) Square(&x);\n+    Multiply(&x, &p[0]);\n+    for (int j = 0; j < 4; ++j) Square(&x);\n+    Multiply(&x, &p[1]);\n+    for (int j = 0; j < 3; ++j) Square(&x);\n+    Multiply(&x, &p[0]);\n+\n+    *out = x;\n+}\n+\n+} // namespace\n+\n+MuHash3072::MuHash3072() noexcept\n+{\n+    data.limbs[0] = 1;\n+    for (int i = 1; i < LIMBS; ++i) data.limbs[i] = 0;\n+}\n+\n+MuHash3072::MuHash3072(Span<const unsigned char> key32) noexcept\n+{\n+    assert(key32.size() == INPUT_SIZE);\n+    unsigned char tmp[OUTPUT_SIZE];\n+    ChaCha20(key32.data(), key32.size()).Keystream(tmp, OUTPUT_SIZE);\n+    for (int i = 0; i < LIMBS; ++i) {\n+        if (sizeof(limb_t) == 4) {\n+            data.limbs[i] = ReadLE32(tmp + 4 * i);\n+        } else if (sizeof(limb_t) == 8) {\n+            data.limbs[i] = ReadLE64(tmp + 8 * i);\n+        }\n+    }\n+}\n+\n+void MuHash3072::Finalize(Span<unsigned char> hash384) noexcept\n+{\n+    assert(hash384.size() == OUTPUT_SIZE);\n+    if (IsOverflow(&data)) FullReduce(&data);\n+    for (int i = 0; i < LIMBS; ++i) {\n+        if (sizeof(limb_t) == 4) {\n+            WriteLE32(hash384.data() + i * 4, data.limbs[i]);\n+        } else if (sizeof(limb_t) == 8) {\n+            WriteLE64(hash384.data() + i * 8, data.limbs[i]);\n+        }\n+    }\n+}\n+\n+MuHash3072& MuHash3072::operator*=(const MuHash3072& x) noexcept\n+{\n+    Multiply(&this->data, &x.data);",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 294,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "e19e50013478c6b7066aa2c9f7e0d0ee7219e837",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why not implicit `this`?\r\n\r\n```suggestion\r\n    Multiply(&data, &x.data);\r\n```\r\n\r\nThis would be even clearer if Multiply took references and `data` was renamed `m_data`:\r\n\r\n`Multiply(m_data, x.m_data);`\r\n\r\nSame below in the `/=()` operator",
      "created_at": "2020-10-18T16:27:55Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r507183199",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507183199"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 294,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507184333",
      "pull_request_review_id": 511150383,
      "id": 507184333,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzE4NDMzMw==",
      "diff_hunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <serialize.h>\n+\n+#include <stdint.h>\n+\n+struct Num3072 {\n+#ifdef HAVE___INT128\n+    typedef unsigned __int128 double_limb_t;\n+    typedef uint64_t limb_t;\n+    static constexpr int LIMBS = 48;\n+    static constexpr int LIMB_SIZE = 64;\n+#else\n+    typedef uint64_t double_limb_t;\n+    typedef uint32_t limb_t;\n+    static constexpr int LIMBS = 96;\n+    static constexpr int LIMB_SIZE = 32;\n+#endif\n+    limb_t limbs[LIMBS];\n+};\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_t MAX_PRIME_DIFF = 1103717;\n+\n+/** A class representing MuHash sets\n+ *\n+ * MuHash is a hashing algorithm that supports adding set elements in any\n+ * order but also deleting in any order. As a result, it can maintain a\n+ * running sum for a set of data as a whole, and add/subtract when data\n+ * is added to or removed from it. A downside of MuHash is that computing\n+ * an inverse is relatively expensive. This can be solved by representing\n+ * the running value as a fraction, and multiplying added elements into\n+ * the numerator and removed elements into the denominator. Only when the\n+ * final hash is desired, a single modular inverse and multiplication is\n+ * needed to combine the two.\n+ *\n+ * TODO: Represent running value as a fraction to allow for more intuitive\n+ * use (see above).\n+ *\n+ * As the update operations are also associative, H(a)+H(b)+H(c)+H(d) can\n+ * in fact be computed as (H(a)+H(b)) + (H(c)+H(d)). This implies that\n+ * all of this is perfectly parallellizable: each thread can process an\n+ * arbitrary subset of the update operations, allowing them to be\n+ * efficiently combined later.\n+ *\n+ * Muhash does not support checking if an element is already part of the\n+ * set. That is why this class does not enforce the use of a set as the\n+ * data it represents because there is no efficient way to do so..\n+ * It is possible to add elements more than once and also to remove\n+ * elements that have not been added before. However, this implementation\n+ * is intended to represent a set of elements.\n+ *\n+ * See also https://cseweb.ucsd.edu/~mihir/papers/inchash.pdf and\n+ * https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014337.html.\n+ */\n+class MuHash3072\n+{\n+protected:\n+    Num3072 data;\n+\n+    static constexpr size_t INPUT_SIZE = 32;\n+    static constexpr size_t OUTPUT_SIZE = 384;\n+\n+public:\n+    /* The empty set. */\n+    MuHash3072() noexcept;\n+\n+    /* A singleton with a single 32-byte key in it. */\n+    explicit MuHash3072(Span<const unsigned char> key32) noexcept;\n+\n+    /* Multiply (resulting in a hash for the union of the sets) */\n+    MuHash3072& operator*=(const MuHash3072& add) noexcept;",
      "path": "src/crypto/muhash.h",
      "position": null,
      "original_position": 81,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "e19e50013478c6b7066aa2c9f7e0d0ee7219e837",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It seems odd that the argument to the multiplication operator is called `add` and the argument to the division operator is called `sub`. Stick to either multiplicative or additive terminology!",
      "created_at": "2020-10-18T16:38:58Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r507184333",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507184333"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507186328",
      "pull_request_review_id": 511150383,
      "id": 507186328,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzE4NjMyOA==",
      "diff_hunk": "@@ -0,0 +1,304 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+using limb_t = Num3072::limb_t;\n+using double_limb_t = Num3072::double_limb_t;\n+constexpr int LIMB_SIZE = Num3072::LIMB_SIZE;\n+constexpr int LIMBS = Num3072::LIMBS;\n+\n+// Sanity check for Num3072 constants\n+static_assert(LIMB_SIZE * LIMBS == 3072, \"Num3072 isn't 3072 bits\");\n+static_assert(sizeof(double_limb_t) == sizeof(limb_t) * 2, \"bad size for double_limb_t\");\n+static_assert(sizeof(limb_t) * 8 == LIMB_SIZE, \"LIMB_SIZE is incorrect\");\n+\n+// Hard coded values in MuHash3072 constructor and Finalize\n+static_assert(sizeof(limb_t) == 4 || sizeof(limb_t) == 8, \"bad size for limb_t\");\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+inline void extract2(limb_t& c0, limb_t& c1, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(limb_t& c0, limb_t& c1, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    c1 = t >> LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& d0, limb_t& d1, limb_t& d2, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)d0 * n + c0;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)d1 * n + c1;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(limb_t& c0, limb_t& c1, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)c0 * n;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)c1 * n;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    limb_t tl, th;\n+    {\n+        double_limb_t t = (double_limb_t)a * b;\n+        th = t >> LIMB_SIZE;\n+        tl = t;\n+    }\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+inline void muldbladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    limb_t tl, th;\n+    {\n+        double_limb_t t = (double_limb_t)a * b;\n+        th = t >> LIMB_SIZE;\n+        tl = t;\n+    }\n+    c0 += tl;\n+    limb_t tt = th + ((c0 < tl) ? 1 : 0);\n+    c1 += tt;\n+    c2 += (c1 < tt) ? 1 : 0;\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1] += a */\n+inline void add2(limb_t& c0, limb_t& c1, limb_t& a)\n+{\n+    c0 += a;\n+    c1 += (c0 < a) ? 1 : 0;\n+}\n+\n+bool IsOverflow(const Num3072* d)\n+{\n+    if (d->limbs[0] <= std::numeric_limits<limb_t>::max() - MAX_PRIME_DIFF) return false;\n+    for (int i = 1; i < LIMBS; ++i) {\n+        if (d->limbs[i] != std::numeric_limits<limb_t>::max()) return false;\n+    }\n+    return true;\n+}\n+\n+void FullReduce(Num3072* d)\n+{\n+    limb_t c0 = MAX_PRIME_DIFF;\n+    for (int i = 0; i < LIMBS; ++i) {\n+        limb_t c1 = 0;\n+        add2(c0, c1, d->limbs[i]);\n+        extract2(c0, c1, d->limbs[i]);\n+    }\n+}\n+\n+void Multiply(Num3072* in_out, const Num3072* a)\n+{\n+    limb_t c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of in_out*a into tmp, including one reduction. */\n+    for (int j = 0; j < LIMBS - 1; ++j) {\n+        limb_t d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        mul(d0, d1, in_out->limbs[1 + j], a->limbs[LIMBS + j - (1 + j)]);\n+        for (int i = 2 + j; i < LIMBS; ++i) muladd3(d0, d1, d2, in_out->limbs[i], a->limbs[LIMBS + j - i]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < j + 1; ++i) muladd3(c0, c1, c2, in_out->limbs[i], a->limbs[j - i]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+    /* Compute limb N-1 of a*b into tmp. */\n+    {\n+        limb_t c2 = 0;\n+        for (int i = 0; i < LIMBS; ++i) muladd3(c0, c1, c2, in_out->limbs[i], a->limbs[LIMBS - 1 - i]);\n+        extract3(c0, c1, c2, tmp.limbs[LIMBS - 1]);\n+    }\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, in_out->limbs[j]);\n+    }\n+#ifdef DEBUG\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+#endif\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(in_out);\n+}\n+\n+void Square(Num3072* in_out)\n+{\n+    limb_t c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of in_out*in_out into tmp, including one reduction. */\n+    for (int j = 0; j < LIMBS - 1; ++j) {\n+        limb_t d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        for (int i = 0; i < (LIMBS - 1 - j) / 2; ++i) muldbladd3(d0, d1, d2, in_out->limbs[i + j + 1], in_out->limbs[LIMBS - 1 - i]);\n+        if ((j + 1) & 1) muladd3(d0, d1, d2, in_out->limbs[(LIMBS - 1 - j) / 2 + j + 1], in_out->limbs[LIMBS - 1 - (LIMBS - 1 - j) / 2]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < (j + 1) / 2; ++i) muldbladd3(c0, c1, c2, in_out->limbs[i], in_out->limbs[j - i]);\n+        if ((j + 1) & 1) muladd3(c0, c1, c2, in_out->limbs[(j + 1) / 2], in_out->limbs[j - (j + 1) / 2]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+    {\n+        limb_t c2 = 0;\n+        for (int i = 0; i < LIMBS / 2; ++i) muldbladd3(c0, c1, c2, in_out->limbs[i], in_out->limbs[LIMBS - 1 - i]);\n+        extract3(c0, c1, c2, tmp.limbs[LIMBS - 1]);\n+    }\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, in_out->limbs[j]);\n+    }\n+#ifdef DEBUG\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+#endif\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(in_out);\n+}\n+\n+void Inverse(Num3072* out, const Num3072* a)\n+{\n+    // For fast exponentiation a sliding window exponentiation with repunit\n+    // precomputation is utilized. See \"Fast Point Decompression for Standard\n+    // Elliptic Curves\" (Brumley, Järvinen, 2008).",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 210,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "ef53ca76cc616cd359969533a75c3dab388ec38d",
      "in_reply_to_id": 492832419,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is really helpful, and makes it easier to understand what the algorithm is doing.\r\n\r\nI wonder if converting the c++ code to use a `DOUBLE_N_ADD()` macro and adding a comment on how to audit the numbers would make it easier to follow the code.",
      "created_at": "2020-10-18T16:56:53Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r507186328",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507186328"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 210,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507186374",
      "pull_request_review_id": 511150383,
      "id": 507186374,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzE4NjM3NA==",
      "diff_hunk": "@@ -0,0 +1,304 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+using limb_t = Num3072::limb_t;\n+using double_limb_t = Num3072::double_limb_t;\n+constexpr int LIMB_SIZE = Num3072::LIMB_SIZE;\n+constexpr int LIMBS = Num3072::LIMBS;\n+\n+// Sanity check for Num3072 constants\n+static_assert(LIMB_SIZE * LIMBS == 3072, \"Num3072 isn't 3072 bits\");\n+static_assert(sizeof(double_limb_t) == sizeof(limb_t) * 2, \"bad size for double_limb_t\");\n+static_assert(sizeof(limb_t) * 8 == LIMB_SIZE, \"LIMB_SIZE is incorrect\");\n+\n+// Hard coded values in MuHash3072 constructor and Finalize\n+static_assert(sizeof(limb_t) == 4 || sizeof(limb_t) == 8, \"bad size for limb_t\");\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+inline void extract2(limb_t& c0, limb_t& c1, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(limb_t& c0, limb_t& c1, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    c1 = t >> LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& d0, limb_t& d1, limb_t& d2, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)d0 * n + c0;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)d1 * n + c1;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(limb_t& c0, limb_t& c1, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)c0 * n;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)c1 * n;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    limb_t tl, th;\n+    {\n+        double_limb_t t = (double_limb_t)a * b;\n+        th = t >> LIMB_SIZE;\n+        tl = t;\n+    }\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+inline void muldbladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    limb_t tl, th;\n+    {\n+        double_limb_t t = (double_limb_t)a * b;\n+        th = t >> LIMB_SIZE;\n+        tl = t;\n+    }\n+    c0 += tl;\n+    limb_t tt = th + ((c0 < tl) ? 1 : 0);\n+    c1 += tt;\n+    c2 += (c1 < tt) ? 1 : 0;\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1] += a */\n+inline void add2(limb_t& c0, limb_t& c1, limb_t& a)\n+{\n+    c0 += a;\n+    c1 += (c0 < a) ? 1 : 0;\n+}\n+\n+bool IsOverflow(const Num3072* d)\n+{\n+    if (d->limbs[0] <= std::numeric_limits<limb_t>::max() - MAX_PRIME_DIFF) return false;\n+    for (int i = 1; i < LIMBS; ++i) {\n+        if (d->limbs[i] != std::numeric_limits<limb_t>::max()) return false;\n+    }\n+    return true;\n+}\n+\n+void FullReduce(Num3072* d)\n+{\n+    limb_t c0 = MAX_PRIME_DIFF;\n+    for (int i = 0; i < LIMBS; ++i) {\n+        limb_t c1 = 0;\n+        add2(c0, c1, d->limbs[i]);\n+        extract2(c0, c1, d->limbs[i]);\n+    }\n+}\n+\n+void Multiply(Num3072* in_out, const Num3072* a)\n+{\n+    limb_t c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of in_out*a into tmp, including one reduction. */\n+    for (int j = 0; j < LIMBS - 1; ++j) {\n+        limb_t d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        mul(d0, d1, in_out->limbs[1 + j], a->limbs[LIMBS + j - (1 + j)]);\n+        for (int i = 2 + j; i < LIMBS; ++i) muladd3(d0, d1, d2, in_out->limbs[i], a->limbs[LIMBS + j - i]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < j + 1; ++i) muladd3(c0, c1, c2, in_out->limbs[i], a->limbs[j - i]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+    /* Compute limb N-1 of a*b into tmp. */\n+    {\n+        limb_t c2 = 0;\n+        for (int i = 0; i < LIMBS; ++i) muladd3(c0, c1, c2, in_out->limbs[i], a->limbs[LIMBS - 1 - i]);\n+        extract3(c0, c1, c2, tmp.limbs[LIMBS - 1]);\n+    }\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, in_out->limbs[j]);\n+    }\n+#ifdef DEBUG\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+#endif\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(in_out);\n+}\n+\n+void Square(Num3072* in_out)\n+{\n+    limb_t c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of in_out*in_out into tmp, including one reduction. */\n+    for (int j = 0; j < LIMBS - 1; ++j) {\n+        limb_t d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        for (int i = 0; i < (LIMBS - 1 - j) / 2; ++i) muldbladd3(d0, d1, d2, in_out->limbs[i + j + 1], in_out->limbs[LIMBS - 1 - i]);\n+        if ((j + 1) & 1) muladd3(d0, d1, d2, in_out->limbs[(LIMBS - 1 - j) / 2 + j + 1], in_out->limbs[LIMBS - 1 - (LIMBS - 1 - j) / 2]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < (j + 1) / 2; ++i) muldbladd3(c0, c1, c2, in_out->limbs[i], in_out->limbs[j - i]);\n+        if ((j + 1) & 1) muladd3(c0, c1, c2, in_out->limbs[(j + 1) / 2], in_out->limbs[j - (j + 1) / 2]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+    {\n+        limb_t c2 = 0;\n+        for (int i = 0; i < LIMBS / 2; ++i) muldbladd3(c0, c1, c2, in_out->limbs[i], in_out->limbs[LIMBS - 1 - i]);\n+        extract3(c0, c1, c2, tmp.limbs[LIMBS - 1]);\n+    }\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, in_out->limbs[j]);\n+    }\n+#ifdef DEBUG\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+#endif\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(in_out);\n+}\n+\n+void Inverse(Num3072* out, const Num3072* a)\n+{\n+    // For fast exponentiation a sliding window exponentiation with repunit\n+    // precomputation is utilized. See \"Fast Point Decompression for Standard\n+    // Elliptic Curves\" (Brumley, Järvinen, 2008).",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 210,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "e19e50013478c6b7066aa2c9f7e0d0ee7219e837",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is there anywhere to get hold of this paper, or a write-up of this technique?",
      "created_at": "2020-10-18T16:57:30Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r507186374",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507186374"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 210,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507194862",
      "pull_request_review_id": 511150383,
      "id": 507194862,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzE5NDg2Mg==",
      "diff_hunk": "@@ -0,0 +1,304 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+using limb_t = Num3072::limb_t;\n+using double_limb_t = Num3072::double_limb_t;\n+constexpr int LIMB_SIZE = Num3072::LIMB_SIZE;\n+constexpr int LIMBS = Num3072::LIMBS;\n+\n+// Sanity check for Num3072 constants\n+static_assert(LIMB_SIZE * LIMBS == 3072, \"Num3072 isn't 3072 bits\");\n+static_assert(sizeof(double_limb_t) == sizeof(limb_t) * 2, \"bad size for double_limb_t\");\n+static_assert(sizeof(limb_t) * 8 == LIMB_SIZE, \"LIMB_SIZE is incorrect\");\n+\n+// Hard coded values in MuHash3072 constructor and Finalize\n+static_assert(sizeof(limb_t) == 4 || sizeof(limb_t) == 8, \"bad size for limb_t\");\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+inline void extract2(limb_t& c0, limb_t& c1, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(limb_t& c0, limb_t& c1, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    c1 = t >> LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& d0, limb_t& d1, limb_t& d2, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)d0 * n + c0;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)d1 * n + c1;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(limb_t& c0, limb_t& c1, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)c0 * n;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)c1 * n;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    limb_t tl, th;\n+    {\n+        double_limb_t t = (double_limb_t)a * b;\n+        th = t >> LIMB_SIZE;\n+        tl = t;\n+    }",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 86,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "e19e50013478c6b7066aa2c9f7e0d0ee7219e837",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What are these indentations for? I think it'll compile to the same thing without them, and this just makes the code harder to read. There are similar blocks in `muldbladd3()` and `Multiply()`.",
      "created_at": "2020-10-18T18:14:23Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r507194862",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507194862"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": 82,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507231955",
      "pull_request_review_id": 511265789,
      "id": 507231955,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzIzMTk1NQ==",
      "diff_hunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <serialize.h>\n+\n+#include <stdint.h>\n+\n+struct Num3072 {",
      "path": "src/crypto/muhash.h",
      "position": null,
      "original_position": 16,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "e19e50013478c6b7066aa2c9f7e0d0ee7219e837",
      "in_reply_to_id": 507170069,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I have to think a little more about to how solve that best...",
      "created_at": "2020-10-18T22:41:09Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r507231955",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507231955"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507231982",
      "pull_request_review_id": 511265797,
      "id": 507231982,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzIzMTk4Mg==",
      "diff_hunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <serialize.h>\n+\n+#include <stdint.h>\n+\n+struct Num3072 {\n+#ifdef HAVE___INT128\n+    typedef unsigned __int128 double_limb_t;\n+    typedef uint64_t limb_t;\n+    static constexpr int LIMBS = 48;\n+    static constexpr int LIMB_SIZE = 64;\n+#else\n+    typedef uint64_t double_limb_t;\n+    typedef uint32_t limb_t;\n+    static constexpr int LIMBS = 96;\n+    static constexpr int LIMB_SIZE = 32;\n+#endif\n+    limb_t limbs[LIMBS];\n+};\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_t MAX_PRIME_DIFF = 1103717;",
      "path": "src/crypto/muhash.h",
      "position": null,
      "original_position": 32,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "e19e50013478c6b7066aa2c9f7e0d0ee7219e837",
      "in_reply_to_id": 507170142,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-18T22:41:15Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r507231982",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507231982"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507232033",
      "pull_request_review_id": 511265811,
      "id": 507232033,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzIzMjAzMw==",
      "diff_hunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <serialize.h>\n+\n+#include <stdint.h>\n+\n+struct Num3072 {\n+#ifdef HAVE___INT128\n+    typedef unsigned __int128 double_limb_t;\n+    typedef uint64_t limb_t;\n+    static constexpr int LIMBS = 48;\n+    static constexpr int LIMB_SIZE = 64;\n+#else\n+    typedef uint64_t double_limb_t;\n+    typedef uint32_t limb_t;\n+    static constexpr int LIMBS = 96;\n+    static constexpr int LIMB_SIZE = 32;\n+#endif\n+    limb_t limbs[LIMBS];\n+};\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_t MAX_PRIME_DIFF = 1103717;\n+\n+/** A class representing MuHash sets\n+ *\n+ * MuHash is a hashing algorithm that supports adding set elements in any\n+ * order but also deleting in any order. As a result, it can maintain a\n+ * running sum for a set of data as a whole, and add/subtract when data\n+ * is added to or removed from it. A downside of MuHash is that computing\n+ * an inverse is relatively expensive. This can be solved by representing\n+ * the running value as a fraction, and multiplying added elements into\n+ * the numerator and removed elements into the denominator. Only when the\n+ * final hash is desired, a single modular inverse and multiplication is\n+ * needed to combine the two.\n+ *\n+ * TODO: Represent running value as a fraction to allow for more intuitive\n+ * use (see above).\n+ *\n+ * As the update operations are also associative, H(a)+H(b)+H(c)+H(d) can\n+ * in fact be computed as (H(a)+H(b)) + (H(c)+H(d)). This implies that\n+ * all of this is perfectly parallellizable: each thread can process an\n+ * arbitrary subset of the update operations, allowing them to be\n+ * efficiently combined later.\n+ *\n+ * Muhash does not support checking if an element is already part of the\n+ * set. That is why this class does not enforce the use of a set as the\n+ * data it represents because there is no efficient way to do so..\n+ * It is possible to add elements more than once and also to remove\n+ * elements that have not been added before. However, this implementation\n+ * is intended to represent a set of elements.\n+ *\n+ * See also https://cseweb.ucsd.edu/~mihir/papers/inchash.pdf and\n+ * https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014337.html.\n+ */\n+class MuHash3072\n+{\n+protected:\n+    Num3072 data;",
      "path": "src/crypto/muhash.h",
      "position": null,
      "original_position": 68,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "e19e50013478c6b7066aa2c9f7e0d0ee7219e837",
      "in_reply_to_id": 507170212,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nope, done",
      "created_at": "2020-10-18T22:41:21Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r507232033",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507232033"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507232065",
      "pull_request_review_id": 511265821,
      "id": 507232065,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzIzMjA2NQ==",
      "diff_hunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <serialize.h>\n+\n+#include <stdint.h>\n+\n+struct Num3072 {\n+#ifdef HAVE___INT128\n+    typedef unsigned __int128 double_limb_t;\n+    typedef uint64_t limb_t;\n+    static constexpr int LIMBS = 48;\n+    static constexpr int LIMB_SIZE = 64;\n+#else\n+    typedef uint64_t double_limb_t;\n+    typedef uint32_t limb_t;\n+    static constexpr int LIMBS = 96;\n+    static constexpr int LIMB_SIZE = 32;\n+#endif\n+    limb_t limbs[LIMBS];\n+};\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_t MAX_PRIME_DIFF = 1103717;\n+\n+/** A class representing MuHash sets\n+ *\n+ * MuHash is a hashing algorithm that supports adding set elements in any\n+ * order but also deleting in any order. As a result, it can maintain a\n+ * running sum for a set of data as a whole, and add/subtract when data\n+ * is added to or removed from it. A downside of MuHash is that computing\n+ * an inverse is relatively expensive. This can be solved by representing\n+ * the running value as a fraction, and multiplying added elements into\n+ * the numerator and removed elements into the denominator. Only when the\n+ * final hash is desired, a single modular inverse and multiplication is\n+ * needed to combine the two.\n+ *\n+ * TODO: Represent running value as a fraction to allow for more intuitive\n+ * use (see above).\n+ *\n+ * As the update operations are also associative, H(a)+H(b)+H(c)+H(d) can\n+ * in fact be computed as (H(a)+H(b)) + (H(c)+H(d)). This implies that\n+ * all of this is perfectly parallellizable: each thread can process an\n+ * arbitrary subset of the update operations, allowing them to be\n+ * efficiently combined later.\n+ *\n+ * Muhash does not support checking if an element is already part of the\n+ * set. That is why this class does not enforce the use of a set as the\n+ * data it represents because there is no efficient way to do so..\n+ * It is possible to add elements more than once and also to remove\n+ * elements that have not been added before. However, this implementation\n+ * is intended to represent a set of elements.\n+ *\n+ * See also https://cseweb.ucsd.edu/~mihir/papers/inchash.pdf and\n+ * https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014337.html.\n+ */\n+class MuHash3072\n+{\n+protected:\n+    Num3072 data;\n+\n+    static constexpr size_t INPUT_SIZE = 32;\n+    static constexpr size_t OUTPUT_SIZE = 384;",
      "path": "src/crypto/muhash.h",
      "position": null,
      "original_position": 71,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "e19e50013478c6b7066aa2c9f7e0d0ee7219e837",
      "in_reply_to_id": 507170280,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-18T22:41:25Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r507232065",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507232065"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": 70,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 71,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507232365",
      "pull_request_review_id": 511265878,
      "id": 507232365,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzIzMjM2NQ==",
      "diff_hunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <serialize.h>\n+\n+#include <stdint.h>\n+\n+struct Num3072 {\n+#ifdef HAVE___INT128\n+    typedef unsigned __int128 double_limb_t;\n+    typedef uint64_t limb_t;\n+    static constexpr int LIMBS = 48;\n+    static constexpr int LIMB_SIZE = 64;\n+#else\n+    typedef uint64_t double_limb_t;\n+    typedef uint32_t limb_t;\n+    static constexpr int LIMBS = 96;\n+    static constexpr int LIMB_SIZE = 32;\n+#endif\n+    limb_t limbs[LIMBS];\n+};\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_t MAX_PRIME_DIFF = 1103717;\n+\n+/** A class representing MuHash sets\n+ *\n+ * MuHash is a hashing algorithm that supports adding set elements in any\n+ * order but also deleting in any order. As a result, it can maintain a\n+ * running sum for a set of data as a whole, and add/subtract when data\n+ * is added to or removed from it. A downside of MuHash is that computing\n+ * an inverse is relatively expensive. This can be solved by representing\n+ * the running value as a fraction, and multiplying added elements into\n+ * the numerator and removed elements into the denominator. Only when the\n+ * final hash is desired, a single modular inverse and multiplication is\n+ * needed to combine the two.\n+ *\n+ * TODO: Represent running value as a fraction to allow for more intuitive\n+ * use (see above).\n+ *\n+ * As the update operations are also associative, H(a)+H(b)+H(c)+H(d) can\n+ * in fact be computed as (H(a)+H(b)) + (H(c)+H(d)). This implies that\n+ * all of this is perfectly parallellizable: each thread can process an\n+ * arbitrary subset of the update operations, allowing them to be\n+ * efficiently combined later.\n+ *\n+ * Muhash does not support checking if an element is already part of the\n+ * set. That is why this class does not enforce the use of a set as the\n+ * data it represents because there is no efficient way to do so..\n+ * It is possible to add elements more than once and also to remove\n+ * elements that have not been added before. However, this implementation\n+ * is intended to represent a set of elements.\n+ *\n+ * See also https://cseweb.ucsd.edu/~mihir/papers/inchash.pdf and\n+ * https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014337.html.\n+ */\n+class MuHash3072\n+{\n+protected:\n+    Num3072 data;\n+\n+    static constexpr size_t INPUT_SIZE = 32;\n+    static constexpr size_t OUTPUT_SIZE = 384;\n+\n+public:\n+    /* The empty set. */\n+    MuHash3072() noexcept;\n+\n+    /* A singleton with a single 32-byte key in it. */\n+    explicit MuHash3072(Span<const unsigned char> key32) noexcept;\n+\n+    /* Multiply (resulting in a hash for the union of the sets) */\n+    MuHash3072& operator*=(const MuHash3072& add) noexcept;\n+\n+    /* Divide (resulting in a hash for the difference of the sets) */\n+    MuHash3072& operator/=(const MuHash3072& sub) noexcept;\n+\n+    /* Finalize into a 384-byte hash. Does not change this object's value. */\n+    void Finalize(Span<unsigned char> hash384) noexcept;\n+\n+    SERIALIZE_METHODS(MuHash3072, obj)",
      "path": "src/crypto/muhash.h",
      "position": 123,
      "original_position": 89,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "e19e50013478c6b7066aa2c9f7e0d0ee7219e837",
      "in_reply_to_id": 507173075,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I believe so, I definitely forced either option on my system at some point.",
      "created_at": "2020-10-18T22:42:05Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r507232365",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507232365"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 123,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507232390",
      "pull_request_review_id": 511265885,
      "id": 507232390,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzIzMjM5MA==",
      "diff_hunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <serialize.h>\n+\n+#include <stdint.h>\n+\n+struct Num3072 {\n+#ifdef HAVE___INT128",
      "path": "src/crypto/muhash.h",
      "position": 26,
      "original_position": 17,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "e19e50013478c6b7066aa2c9f7e0d0ee7219e837",
      "in_reply_to_id": 507173583,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't remember benchmarking this, will do so",
      "created_at": "2020-10-18T22:42:10Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r507232390",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507232390"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 26,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507232419",
      "pull_request_review_id": 511265893,
      "id": 507232419,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzIzMjQxOQ==",
      "diff_hunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <serialize.h>\n+\n+#include <stdint.h>\n+\n+struct Num3072 {\n+#ifdef HAVE___INT128\n+    typedef unsigned __int128 double_limb_t;\n+    typedef uint64_t limb_t;\n+    static constexpr int LIMBS = 48;\n+    static constexpr int LIMB_SIZE = 64;\n+#else\n+    typedef uint64_t double_limb_t;\n+    typedef uint32_t limb_t;\n+    static constexpr int LIMBS = 96;\n+    static constexpr int LIMB_SIZE = 32;\n+#endif\n+    limb_t limbs[LIMBS];\n+};\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_t MAX_PRIME_DIFF = 1103717;\n+\n+/** A class representing MuHash sets\n+ *\n+ * MuHash is a hashing algorithm that supports adding set elements in any\n+ * order but also deleting in any order. As a result, it can maintain a\n+ * running sum for a set of data as a whole, and add/subtract when data\n+ * is added to or removed from it. A downside of MuHash is that computing\n+ * an inverse is relatively expensive. This can be solved by representing\n+ * the running value as a fraction, and multiplying added elements into\n+ * the numerator and removed elements into the denominator. Only when the\n+ * final hash is desired, a single modular inverse and multiplication is\n+ * needed to combine the two.\n+ *\n+ * TODO: Represent running value as a fraction to allow for more intuitive\n+ * use (see above).\n+ *\n+ * As the update operations are also associative, H(a)+H(b)+H(c)+H(d) can\n+ * in fact be computed as (H(a)+H(b)) + (H(c)+H(d)). This implies that\n+ * all of this is perfectly parallellizable: each thread can process an\n+ * arbitrary subset of the update operations, allowing them to be\n+ * efficiently combined later.\n+ *\n+ * Muhash does not support checking if an element is already part of the\n+ * set. That is why this class does not enforce the use of a set as the\n+ * data it represents because there is no efficient way to do so..\n+ * It is possible to add elements more than once and also to remove\n+ * elements that have not been added before. However, this implementation\n+ * is intended to represent a set of elements.\n+ *\n+ * See also https://cseweb.ucsd.edu/~mihir/papers/inchash.pdf and\n+ * https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014337.html.\n+ */\n+class MuHash3072\n+{\n+protected:\n+    Num3072 data;\n+\n+    static constexpr size_t INPUT_SIZE = 32;\n+    static constexpr size_t OUTPUT_SIZE = 384;\n+\n+public:\n+    /* The empty set. */\n+    MuHash3072() noexcept;\n+\n+    /* A singleton with a single 32-byte key in it. */\n+    explicit MuHash3072(Span<const unsigned char> key32) noexcept;\n+\n+    /* Multiply (resulting in a hash for the union of the sets) */\n+    MuHash3072& operator*=(const MuHash3072& add) noexcept;\n+\n+    /* Divide (resulting in a hash for the difference of the sets) */\n+    MuHash3072& operator/=(const MuHash3072& sub) noexcept;\n+\n+    /* Finalize into a 384-byte hash. Does not change this object's value. */\n+    void Finalize(Span<unsigned char> hash384) noexcept;\n+\n+    SERIALIZE_METHODS(MuHash3072, obj)\n+    {\n+        for (int i = 0; i < obj.data.LIMBS; ++i) {\n+            READWRITE(obj.data.limbs[i]);\n+        }",
      "path": "src/crypto/muhash.h",
      "position": null,
      "original_position": 93,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "e19e50013478c6b7066aa2c9f7e0d0ee7219e837",
      "in_reply_to_id": 507178737,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-18T22:42:14Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r507232419",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507232419"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": 91,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507232453",
      "pull_request_review_id": 511265898,
      "id": 507232453,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzIzMjQ1Mw==",
      "diff_hunk": "@@ -0,0 +1,304 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+using limb_t = Num3072::limb_t;\n+using double_limb_t = Num3072::double_limb_t;\n+constexpr int LIMB_SIZE = Num3072::LIMB_SIZE;\n+constexpr int LIMBS = Num3072::LIMBS;\n+\n+// Sanity check for Num3072 constants\n+static_assert(LIMB_SIZE * LIMBS == 3072, \"Num3072 isn't 3072 bits\");\n+static_assert(sizeof(double_limb_t) == sizeof(limb_t) * 2, \"bad size for double_limb_t\");\n+static_assert(sizeof(limb_t) * 8 == LIMB_SIZE, \"LIMB_SIZE is incorrect\");\n+\n+// Hard coded values in MuHash3072 constructor and Finalize\n+static_assert(sizeof(limb_t) == 4 || sizeof(limb_t) == 8, \"bad size for limb_t\");\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+inline void extract2(limb_t& c0, limb_t& c1, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(limb_t& c0, limb_t& c1, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    c1 = t >> LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& d0, limb_t& d1, limb_t& d2, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)d0 * n + c0;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)d1 * n + c1;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(limb_t& c0, limb_t& c1, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)c0 * n;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)c1 * n;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    limb_t tl, th;\n+    {\n+        double_limb_t t = (double_limb_t)a * b;\n+        th = t >> LIMB_SIZE;\n+        tl = t;\n+    }\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+inline void muldbladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    limb_t tl, th;\n+    {\n+        double_limb_t t = (double_limb_t)a * b;\n+        th = t >> LIMB_SIZE;\n+        tl = t;\n+    }\n+    c0 += tl;\n+    limb_t tt = th + ((c0 < tl) ? 1 : 0);\n+    c1 += tt;\n+    c2 += (c1 < tt) ? 1 : 0;\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1] += a */\n+inline void add2(limb_t& c0, limb_t& c1, limb_t& a)\n+{\n+    c0 += a;\n+    c1 += (c0 < a) ? 1 : 0;\n+}\n+\n+bool IsOverflow(const Num3072* d)",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 119,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "e19e50013478c6b7066aa2c9f7e0d0ee7219e837",
      "in_reply_to_id": 507179354,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-18T22:42:20Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r507232453",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507232453"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507232479",
      "pull_request_review_id": 511265906,
      "id": 507232479,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzIzMjQ3OQ==",
      "diff_hunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <serialize.h>\n+\n+#include <stdint.h>\n+\n+struct Num3072 {\n+#ifdef HAVE___INT128\n+    typedef unsigned __int128 double_limb_t;\n+    typedef uint64_t limb_t;\n+    static constexpr int LIMBS = 48;\n+    static constexpr int LIMB_SIZE = 64;\n+#else\n+    typedef uint64_t double_limb_t;\n+    typedef uint32_t limb_t;\n+    static constexpr int LIMBS = 96;\n+    static constexpr int LIMB_SIZE = 32;\n+#endif\n+    limb_t limbs[LIMBS];\n+};\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_t MAX_PRIME_DIFF = 1103717;\n+\n+/** A class representing MuHash sets\n+ *\n+ * MuHash is a hashing algorithm that supports adding set elements in any\n+ * order but also deleting in any order. As a result, it can maintain a\n+ * running sum for a set of data as a whole, and add/subtract when data\n+ * is added to or removed from it. A downside of MuHash is that computing\n+ * an inverse is relatively expensive. This can be solved by representing\n+ * the running value as a fraction, and multiplying added elements into\n+ * the numerator and removed elements into the denominator. Only when the\n+ * final hash is desired, a single modular inverse and multiplication is\n+ * needed to combine the two.\n+ *\n+ * TODO: Represent running value as a fraction to allow for more intuitive\n+ * use (see above).\n+ *\n+ * As the update operations are also associative, H(a)+H(b)+H(c)+H(d) can\n+ * in fact be computed as (H(a)+H(b)) + (H(c)+H(d)). This implies that\n+ * all of this is perfectly parallellizable: each thread can process an\n+ * arbitrary subset of the update operations, allowing them to be\n+ * efficiently combined later.\n+ *\n+ * Muhash does not support checking if an element is already part of the\n+ * set. That is why this class does not enforce the use of a set as the\n+ * data it represents because there is no efficient way to do so..",
      "path": "src/crypto/muhash.h",
      "position": null,
      "original_position": 57,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "e19e50013478c6b7066aa2c9f7e0d0ee7219e837",
      "in_reply_to_id": 507179765,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-18T22:42:24Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r507232479",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507232479"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 57,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507232528",
      "pull_request_review_id": 511265915,
      "id": 507232528,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzIzMjUyOA==",
      "diff_hunk": "@@ -0,0 +1,304 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+using limb_t = Num3072::limb_t;\n+using double_limb_t = Num3072::double_limb_t;\n+constexpr int LIMB_SIZE = Num3072::LIMB_SIZE;\n+constexpr int LIMBS = Num3072::LIMBS;\n+\n+// Sanity check for Num3072 constants\n+static_assert(LIMB_SIZE * LIMBS == 3072, \"Num3072 isn't 3072 bits\");\n+static_assert(sizeof(double_limb_t) == sizeof(limb_t) * 2, \"bad size for double_limb_t\");\n+static_assert(sizeof(limb_t) * 8 == LIMB_SIZE, \"LIMB_SIZE is incorrect\");\n+\n+// Hard coded values in MuHash3072 constructor and Finalize\n+static_assert(sizeof(limb_t) == 4 || sizeof(limb_t) == 8, \"bad size for limb_t\");\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+inline void extract2(limb_t& c0, limb_t& c1, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(limb_t& c0, limb_t& c1, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    c1 = t >> LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& d0, limb_t& d1, limb_t& d2, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)d0 * n + c0;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)d1 * n + c1;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(limb_t& c0, limb_t& c1, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)c0 * n;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)c1 * n;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    limb_t tl, th;\n+    {\n+        double_limb_t t = (double_limb_t)a * b;\n+        th = t >> LIMB_SIZE;\n+        tl = t;\n+    }\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+inline void muldbladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    limb_t tl, th;\n+    {\n+        double_limb_t t = (double_limb_t)a * b;\n+        th = t >> LIMB_SIZE;\n+        tl = t;\n+    }\n+    c0 += tl;\n+    limb_t tt = th + ((c0 < tl) ? 1 : 0);\n+    c1 += tt;\n+    c2 += (c1 < tt) ? 1 : 0;\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1] += a */\n+inline void add2(limb_t& c0, limb_t& c1, limb_t& a)\n+{\n+    c0 += a;\n+    c1 += (c0 < a) ? 1 : 0;\n+}\n+\n+bool IsOverflow(const Num3072* d)\n+{\n+    if (d->limbs[0] <= std::numeric_limits<limb_t>::max() - MAX_PRIME_DIFF) return false;\n+    for (int i = 1; i < LIMBS; ++i) {\n+        if (d->limbs[i] != std::numeric_limits<limb_t>::max()) return false;\n+    }\n+    return true;\n+}\n+\n+void FullReduce(Num3072* d)\n+{\n+    limb_t c0 = MAX_PRIME_DIFF;\n+    for (int i = 0; i < LIMBS; ++i) {\n+        limb_t c1 = 0;\n+        add2(c0, c1, d->limbs[i]);\n+        extract2(c0, c1, d->limbs[i]);\n+    }\n+}\n+\n+void Multiply(Num3072* in_out, const Num3072* a)\n+{\n+    limb_t c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of in_out*a into tmp, including one reduction. */\n+    for (int j = 0; j < LIMBS - 1; ++j) {\n+        limb_t d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        mul(d0, d1, in_out->limbs[1 + j], a->limbs[LIMBS + j - (1 + j)]);\n+        for (int i = 2 + j; i < LIMBS; ++i) muladd3(d0, d1, d2, in_out->limbs[i], a->limbs[LIMBS + j - i]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < j + 1; ++i) muladd3(c0, c1, c2, in_out->limbs[i], a->limbs[j - i]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+    /* Compute limb N-1 of a*b into tmp. */\n+    {\n+        limb_t c2 = 0;\n+        for (int i = 0; i < LIMBS; ++i) muladd3(c0, c1, c2, in_out->limbs[i], a->limbs[LIMBS - 1 - i]);\n+        extract3(c0, c1, c2, tmp.limbs[LIMBS - 1]);\n+    }\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, in_out->limbs[j]);\n+    }\n+#ifdef DEBUG\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+#endif\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(in_out);\n+}\n+\n+void Square(Num3072* in_out)\n+{\n+    limb_t c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of in_out*in_out into tmp, including one reduction. */\n+    for (int j = 0; j < LIMBS - 1; ++j) {\n+        limb_t d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        for (int i = 0; i < (LIMBS - 1 - j) / 2; ++i) muldbladd3(d0, d1, d2, in_out->limbs[i + j + 1], in_out->limbs[LIMBS - 1 - i]);\n+        if ((j + 1) & 1) muladd3(d0, d1, d2, in_out->limbs[(LIMBS - 1 - j) / 2 + j + 1], in_out->limbs[LIMBS - 1 - (LIMBS - 1 - j) / 2]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < (j + 1) / 2; ++i) muldbladd3(c0, c1, c2, in_out->limbs[i], in_out->limbs[j - i]);\n+        if ((j + 1) & 1) muladd3(c0, c1, c2, in_out->limbs[(j + 1) / 2], in_out->limbs[j - (j + 1) / 2]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+    {\n+        limb_t c2 = 0;\n+        for (int i = 0; i < LIMBS / 2; ++i) muldbladd3(c0, c1, c2, in_out->limbs[i], in_out->limbs[LIMBS - 1 - i]);\n+        extract3(c0, c1, c2, tmp.limbs[LIMBS - 1]);\n+    }\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, in_out->limbs[j]);\n+    }\n+#ifdef DEBUG\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+#endif\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(in_out);\n+}\n+\n+void Inverse(Num3072* out, const Num3072* a)\n+{\n+    // For fast exponentiation a sliding window exponentiation with repunit\n+    // precomputation is utilized. See \"Fast Point Decompression for Standard\n+    // Elliptic Curves\" (Brumley, Järvinen, 2008).\n+\n+    Num3072 p[12]; // p[i] = a^(2^(2^i)-1)\n+    Num3072 x;\n+\n+    p[0] = *a;\n+\n+    for (int i = 0; i < 11; ++i) {\n+        p[i + 1] = p[i];\n+        for (int j = 0; j < (1 << i); ++j) Square(&p[i + 1]);\n+        Multiply(&p[i + 1], &p[i]);\n+    }\n+\n+    x = p[11];\n+\n+    for (int j = 0; j < 512; ++j) Square(&x);\n+    Multiply(&x, &p[9]);\n+    for (int j = 0; j < 256; ++j) Square(&x);\n+    Multiply(&x, &p[8]);\n+    for (int j = 0; j < 128; ++j) Square(&x);\n+    Multiply(&x, &p[7]);\n+    for (int j = 0; j < 64; ++j) Square(&x);\n+    Multiply(&x, &p[6]);\n+    for (int j = 0; j < 32; ++j) Square(&x);\n+    Multiply(&x, &p[5]);\n+    for (int j = 0; j < 8; ++j) Square(&x);\n+    Multiply(&x, &p[3]);\n+    for (int j = 0; j < 2; ++j) Square(&x);\n+    Multiply(&x, &p[1]);\n+    for (int j = 0; j < 1; ++j) Square(&x);\n+    Multiply(&x, &p[0]);\n+    for (int j = 0; j < 5; ++j) Square(&x);\n+    Multiply(&x, &p[2]);\n+    for (int j = 0; j < 3; ++j) Square(&x);\n+    Multiply(&x, &p[0]);\n+    for (int j = 0; j < 2; ++j) Square(&x);\n+    Multiply(&x, &p[0]);\n+    for (int j = 0; j < 4; ++j) Square(&x);\n+    Multiply(&x, &p[0]);\n+    for (int j = 0; j < 4; ++j) Square(&x);\n+    Multiply(&x, &p[1]);\n+    for (int j = 0; j < 3; ++j) Square(&x);\n+    Multiply(&x, &p[0]);\n+\n+    *out = x;\n+}\n+\n+} // namespace\n+\n+MuHash3072::MuHash3072() noexcept\n+{\n+    data.limbs[0] = 1;\n+    for (int i = 1; i < LIMBS; ++i) data.limbs[i] = 0;\n+}\n+\n+MuHash3072::MuHash3072(Span<const unsigned char> key32) noexcept\n+{\n+    assert(key32.size() == INPUT_SIZE);\n+    unsigned char tmp[OUTPUT_SIZE];\n+    ChaCha20(key32.data(), key32.size()).Keystream(tmp, OUTPUT_SIZE);\n+    for (int i = 0; i < LIMBS; ++i) {\n+        if (sizeof(limb_t) == 4) {\n+            data.limbs[i] = ReadLE32(tmp + 4 * i);\n+        } else if (sizeof(limb_t) == 8) {\n+            data.limbs[i] = ReadLE64(tmp + 8 * i);\n+        }\n+    }\n+}\n+\n+void MuHash3072::Finalize(Span<unsigned char> hash384) noexcept\n+{\n+    assert(hash384.size() == OUTPUT_SIZE);\n+    if (IsOverflow(&data)) FullReduce(&data);\n+    for (int i = 0; i < LIMBS; ++i) {\n+        if (sizeof(limb_t) == 4) {\n+            WriteLE32(hash384.data() + i * 4, data.limbs[i]);\n+        } else if (sizeof(limb_t) == 8) {\n+            WriteLE64(hash384.data() + i * 8, data.limbs[i]);\n+        }\n+    }\n+}\n+\n+MuHash3072& MuHash3072::operator*=(const MuHash3072& x) noexcept\n+{\n+    Multiply(&this->data, &x.data);",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 294,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "e19e50013478c6b7066aa2c9f7e0d0ee7219e837",
      "in_reply_to_id": 507183199,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-18T22:42:32Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r507232528",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507232528"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 294,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507232586",
      "pull_request_review_id": 511265929,
      "id": 507232586,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzIzMjU4Ng==",
      "diff_hunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <serialize.h>\n+\n+#include <stdint.h>\n+\n+struct Num3072 {\n+#ifdef HAVE___INT128\n+    typedef unsigned __int128 double_limb_t;\n+    typedef uint64_t limb_t;\n+    static constexpr int LIMBS = 48;\n+    static constexpr int LIMB_SIZE = 64;\n+#else\n+    typedef uint64_t double_limb_t;\n+    typedef uint32_t limb_t;\n+    static constexpr int LIMBS = 96;\n+    static constexpr int LIMB_SIZE = 32;\n+#endif\n+    limb_t limbs[LIMBS];\n+};\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_t MAX_PRIME_DIFF = 1103717;\n+\n+/** A class representing MuHash sets\n+ *\n+ * MuHash is a hashing algorithm that supports adding set elements in any\n+ * order but also deleting in any order. As a result, it can maintain a\n+ * running sum for a set of data as a whole, and add/subtract when data\n+ * is added to or removed from it. A downside of MuHash is that computing\n+ * an inverse is relatively expensive. This can be solved by representing\n+ * the running value as a fraction, and multiplying added elements into\n+ * the numerator and removed elements into the denominator. Only when the\n+ * final hash is desired, a single modular inverse and multiplication is\n+ * needed to combine the two.\n+ *\n+ * TODO: Represent running value as a fraction to allow for more intuitive\n+ * use (see above).\n+ *\n+ * As the update operations are also associative, H(a)+H(b)+H(c)+H(d) can\n+ * in fact be computed as (H(a)+H(b)) + (H(c)+H(d)). This implies that\n+ * all of this is perfectly parallellizable: each thread can process an\n+ * arbitrary subset of the update operations, allowing them to be\n+ * efficiently combined later.\n+ *\n+ * Muhash does not support checking if an element is already part of the\n+ * set. That is why this class does not enforce the use of a set as the\n+ * data it represents because there is no efficient way to do so..\n+ * It is possible to add elements more than once and also to remove\n+ * elements that have not been added before. However, this implementation\n+ * is intended to represent a set of elements.\n+ *\n+ * See also https://cseweb.ucsd.edu/~mihir/papers/inchash.pdf and\n+ * https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014337.html.\n+ */\n+class MuHash3072\n+{\n+protected:\n+    Num3072 data;\n+\n+    static constexpr size_t INPUT_SIZE = 32;\n+    static constexpr size_t OUTPUT_SIZE = 384;\n+\n+public:\n+    /* The empty set. */\n+    MuHash3072() noexcept;\n+\n+    /* A singleton with a single 32-byte key in it. */\n+    explicit MuHash3072(Span<const unsigned char> key32) noexcept;\n+\n+    /* Multiply (resulting in a hash for the union of the sets) */\n+    MuHash3072& operator*=(const MuHash3072& add) noexcept;",
      "path": "src/crypto/muhash.h",
      "position": null,
      "original_position": 81,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "e19e50013478c6b7066aa2c9f7e0d0ee7219e837",
      "in_reply_to_id": 507184333,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I prefer the additive terminology personally and I thought they were both using it: `add` and `sub`tract? What would you prefer? `rem` for remove?",
      "created_at": "2020-10-18T22:42:38Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r507232586",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507232586"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507232707",
      "pull_request_review_id": 511265959,
      "id": 507232707,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzIzMjcwNw==",
      "diff_hunk": "@@ -0,0 +1,304 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+using limb_t = Num3072::limb_t;\n+using double_limb_t = Num3072::double_limb_t;\n+constexpr int LIMB_SIZE = Num3072::LIMB_SIZE;\n+constexpr int LIMBS = Num3072::LIMBS;\n+\n+// Sanity check for Num3072 constants\n+static_assert(LIMB_SIZE * LIMBS == 3072, \"Num3072 isn't 3072 bits\");\n+static_assert(sizeof(double_limb_t) == sizeof(limb_t) * 2, \"bad size for double_limb_t\");\n+static_assert(sizeof(limb_t) * 8 == LIMB_SIZE, \"LIMB_SIZE is incorrect\");\n+\n+// Hard coded values in MuHash3072 constructor and Finalize\n+static_assert(sizeof(limb_t) == 4 || sizeof(limb_t) == 8, \"bad size for limb_t\");\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+inline void extract2(limb_t& c0, limb_t& c1, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(limb_t& c0, limb_t& c1, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    c1 = t >> LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& d0, limb_t& d1, limb_t& d2, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)d0 * n + c0;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)d1 * n + c1;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(limb_t& c0, limb_t& c1, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)c0 * n;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)c1 * n;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    limb_t tl, th;\n+    {\n+        double_limb_t t = (double_limb_t)a * b;\n+        th = t >> LIMB_SIZE;\n+        tl = t;\n+    }\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+inline void muldbladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    limb_t tl, th;\n+    {\n+        double_limb_t t = (double_limb_t)a * b;\n+        th = t >> LIMB_SIZE;\n+        tl = t;\n+    }\n+    c0 += tl;\n+    limb_t tt = th + ((c0 < tl) ? 1 : 0);\n+    c1 += tt;\n+    c2 += (c1 < tt) ? 1 : 0;\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1] += a */\n+inline void add2(limb_t& c0, limb_t& c1, limb_t& a)\n+{\n+    c0 += a;\n+    c1 += (c0 < a) ? 1 : 0;\n+}\n+\n+bool IsOverflow(const Num3072* d)\n+{\n+    if (d->limbs[0] <= std::numeric_limits<limb_t>::max() - MAX_PRIME_DIFF) return false;\n+    for (int i = 1; i < LIMBS; ++i) {\n+        if (d->limbs[i] != std::numeric_limits<limb_t>::max()) return false;\n+    }\n+    return true;\n+}\n+\n+void FullReduce(Num3072* d)\n+{\n+    limb_t c0 = MAX_PRIME_DIFF;\n+    for (int i = 0; i < LIMBS; ++i) {\n+        limb_t c1 = 0;\n+        add2(c0, c1, d->limbs[i]);\n+        extract2(c0, c1, d->limbs[i]);\n+    }\n+}\n+\n+void Multiply(Num3072* in_out, const Num3072* a)\n+{\n+    limb_t c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of in_out*a into tmp, including one reduction. */\n+    for (int j = 0; j < LIMBS - 1; ++j) {\n+        limb_t d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        mul(d0, d1, in_out->limbs[1 + j], a->limbs[LIMBS + j - (1 + j)]);\n+        for (int i = 2 + j; i < LIMBS; ++i) muladd3(d0, d1, d2, in_out->limbs[i], a->limbs[LIMBS + j - i]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < j + 1; ++i) muladd3(c0, c1, c2, in_out->limbs[i], a->limbs[j - i]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+    /* Compute limb N-1 of a*b into tmp. */\n+    {\n+        limb_t c2 = 0;\n+        for (int i = 0; i < LIMBS; ++i) muladd3(c0, c1, c2, in_out->limbs[i], a->limbs[LIMBS - 1 - i]);\n+        extract3(c0, c1, c2, tmp.limbs[LIMBS - 1]);\n+    }\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, in_out->limbs[j]);\n+    }\n+#ifdef DEBUG\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+#endif\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(in_out);\n+}\n+\n+void Square(Num3072* in_out)\n+{\n+    limb_t c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of in_out*in_out into tmp, including one reduction. */\n+    for (int j = 0; j < LIMBS - 1; ++j) {\n+        limb_t d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        for (int i = 0; i < (LIMBS - 1 - j) / 2; ++i) muldbladd3(d0, d1, d2, in_out->limbs[i + j + 1], in_out->limbs[LIMBS - 1 - i]);\n+        if ((j + 1) & 1) muladd3(d0, d1, d2, in_out->limbs[(LIMBS - 1 - j) / 2 + j + 1], in_out->limbs[LIMBS - 1 - (LIMBS - 1 - j) / 2]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < (j + 1) / 2; ++i) muldbladd3(c0, c1, c2, in_out->limbs[i], in_out->limbs[j - i]);\n+        if ((j + 1) & 1) muladd3(c0, c1, c2, in_out->limbs[(j + 1) / 2], in_out->limbs[j - (j + 1) / 2]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+    {\n+        limb_t c2 = 0;\n+        for (int i = 0; i < LIMBS / 2; ++i) muldbladd3(c0, c1, c2, in_out->limbs[i], in_out->limbs[LIMBS - 1 - i]);\n+        extract3(c0, c1, c2, tmp.limbs[LIMBS - 1]);\n+    }\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, in_out->limbs[j]);\n+    }\n+#ifdef DEBUG\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+#endif\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(in_out);\n+}\n+\n+void Inverse(Num3072* out, const Num3072* a)\n+{\n+    // For fast exponentiation a sliding window exponentiation with repunit\n+    // precomputation is utilized. See \"Fast Point Decompression for Standard\n+    // Elliptic Curves\" (Brumley, Järvinen, 2008).",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 210,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "e19e50013478c6b7066aa2c9f7e0d0ee7219e837",
      "in_reply_to_id": 507186374,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I did spend quite some time looking for something but the paper is only available behind a paywall and a friend told me there are other sources but that we might not want to link to those. I didn't find any summaries or so on the topic so if we want more details I would need to write something up myself I think.",
      "created_at": "2020-10-18T22:42:56Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r507232707",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507232707"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 210,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507233000",
      "pull_request_review_id": 511266027,
      "id": 507233000,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzIzMzAwMA==",
      "diff_hunk": "@@ -0,0 +1,304 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+using limb_t = Num3072::limb_t;\n+using double_limb_t = Num3072::double_limb_t;\n+constexpr int LIMB_SIZE = Num3072::LIMB_SIZE;\n+constexpr int LIMBS = Num3072::LIMBS;\n+\n+// Sanity check for Num3072 constants\n+static_assert(LIMB_SIZE * LIMBS == 3072, \"Num3072 isn't 3072 bits\");\n+static_assert(sizeof(double_limb_t) == sizeof(limb_t) * 2, \"bad size for double_limb_t\");\n+static_assert(sizeof(limb_t) * 8 == LIMB_SIZE, \"LIMB_SIZE is incorrect\");\n+\n+// Hard coded values in MuHash3072 constructor and Finalize\n+static_assert(sizeof(limb_t) == 4 || sizeof(limb_t) == 8, \"bad size for limb_t\");\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+inline void extract2(limb_t& c0, limb_t& c1, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(limb_t& c0, limb_t& c1, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    c1 = t >> LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& d0, limb_t& d1, limb_t& d2, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)d0 * n + c0;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)d1 * n + c1;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(limb_t& c0, limb_t& c1, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)c0 * n;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)c1 * n;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    limb_t tl, th;\n+    {\n+        double_limb_t t = (double_limb_t)a * b;\n+        th = t >> LIMB_SIZE;\n+        tl = t;\n+    }",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 86,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "e19e50013478c6b7066aa2c9f7e0d0ee7219e837",
      "in_reply_to_id": 507194862,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removed them",
      "created_at": "2020-10-18T22:43:30Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r507233000",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507233000"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": 82,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507238291",
      "pull_request_review_id": 511267271,
      "id": 507238291,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzIzODI5MQ==",
      "diff_hunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <serialize.h>\n+\n+#include <stdint.h>\n+\n+struct Num3072 {\n+#ifdef HAVE___INT128",
      "path": "src/crypto/muhash.h",
      "position": 26,
      "original_position": 17,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "e19e50013478c6b7066aa2c9f7e0d0ee7219e837",
      "in_reply_to_id": 507173583,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I expect a 4x speed difference approximately. Being able to use 64-bit multiplication hardware makes a huge difference.",
      "created_at": "2020-10-18T22:56:14Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r507238291",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507238291"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 26,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507347412",
      "pull_request_review_id": 511368818,
      "id": 507347412,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzM0NzQxMg==",
      "diff_hunk": "@@ -0,0 +1,304 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+using limb_t = Num3072::limb_t;\n+using double_limb_t = Num3072::double_limb_t;\n+constexpr int LIMB_SIZE = Num3072::LIMB_SIZE;\n+constexpr int LIMBS = Num3072::LIMBS;\n+\n+// Sanity check for Num3072 constants\n+static_assert(LIMB_SIZE * LIMBS == 3072, \"Num3072 isn't 3072 bits\");\n+static_assert(sizeof(double_limb_t) == sizeof(limb_t) * 2, \"bad size for double_limb_t\");\n+static_assert(sizeof(limb_t) * 8 == LIMB_SIZE, \"LIMB_SIZE is incorrect\");\n+\n+// Hard coded values in MuHash3072 constructor and Finalize\n+static_assert(sizeof(limb_t) == 4 || sizeof(limb_t) == 8, \"bad size for limb_t\");\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+inline void extract2(limb_t& c0, limb_t& c1, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(limb_t& c0, limb_t& c1, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    c1 = t >> LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& d0, limb_t& d1, limb_t& d2, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)d0 * n + c0;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)d1 * n + c1;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(limb_t& c0, limb_t& c1, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)c0 * n;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)c1 * n;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    limb_t tl, th;\n+    {\n+        double_limb_t t = (double_limb_t)a * b;\n+        th = t >> LIMB_SIZE;\n+        tl = t;\n+    }\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+inline void muldbladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    limb_t tl, th;\n+    {\n+        double_limb_t t = (double_limb_t)a * b;\n+        th = t >> LIMB_SIZE;\n+        tl = t;\n+    }\n+    c0 += tl;\n+    limb_t tt = th + ((c0 < tl) ? 1 : 0);\n+    c1 += tt;\n+    c2 += (c1 < tt) ? 1 : 0;\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1] += a */\n+inline void add2(limb_t& c0, limb_t& c1, limb_t& a)\n+{\n+    c0 += a;\n+    c1 += (c0 < a) ? 1 : 0;\n+}\n+\n+bool IsOverflow(const Num3072* d)\n+{\n+    if (d->limbs[0] <= std::numeric_limits<limb_t>::max() - MAX_PRIME_DIFF) return false;\n+    for (int i = 1; i < LIMBS; ++i) {\n+        if (d->limbs[i] != std::numeric_limits<limb_t>::max()) return false;\n+    }\n+    return true;\n+}\n+\n+void FullReduce(Num3072* d)\n+{\n+    limb_t c0 = MAX_PRIME_DIFF;\n+    for (int i = 0; i < LIMBS; ++i) {\n+        limb_t c1 = 0;\n+        add2(c0, c1, d->limbs[i]);\n+        extract2(c0, c1, d->limbs[i]);\n+    }\n+}\n+\n+void Multiply(Num3072* in_out, const Num3072* a)\n+{\n+    limb_t c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of in_out*a into tmp, including one reduction. */\n+    for (int j = 0; j < LIMBS - 1; ++j) {\n+        limb_t d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        mul(d0, d1, in_out->limbs[1 + j], a->limbs[LIMBS + j - (1 + j)]);\n+        for (int i = 2 + j; i < LIMBS; ++i) muladd3(d0, d1, d2, in_out->limbs[i], a->limbs[LIMBS + j - i]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < j + 1; ++i) muladd3(c0, c1, c2, in_out->limbs[i], a->limbs[j - i]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+    /* Compute limb N-1 of a*b into tmp. */\n+    {\n+        limb_t c2 = 0;\n+        for (int i = 0; i < LIMBS; ++i) muladd3(c0, c1, c2, in_out->limbs[i], a->limbs[LIMBS - 1 - i]);\n+        extract3(c0, c1, c2, tmp.limbs[LIMBS - 1]);\n+    }\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, in_out->limbs[j]);\n+    }\n+#ifdef DEBUG\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+#endif\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(in_out);\n+}\n+\n+void Square(Num3072* in_out)\n+{\n+    limb_t c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of in_out*in_out into tmp, including one reduction. */\n+    for (int j = 0; j < LIMBS - 1; ++j) {\n+        limb_t d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        for (int i = 0; i < (LIMBS - 1 - j) / 2; ++i) muldbladd3(d0, d1, d2, in_out->limbs[i + j + 1], in_out->limbs[LIMBS - 1 - i]);\n+        if ((j + 1) & 1) muladd3(d0, d1, d2, in_out->limbs[(LIMBS - 1 - j) / 2 + j + 1], in_out->limbs[LIMBS - 1 - (LIMBS - 1 - j) / 2]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < (j + 1) / 2; ++i) muldbladd3(c0, c1, c2, in_out->limbs[i], in_out->limbs[j - i]);\n+        if ((j + 1) & 1) muladd3(c0, c1, c2, in_out->limbs[(j + 1) / 2], in_out->limbs[j - (j + 1) / 2]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+    {\n+        limb_t c2 = 0;\n+        for (int i = 0; i < LIMBS / 2; ++i) muldbladd3(c0, c1, c2, in_out->limbs[i], in_out->limbs[LIMBS - 1 - i]);\n+        extract3(c0, c1, c2, tmp.limbs[LIMBS - 1]);\n+    }\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, in_out->limbs[j]);\n+    }\n+#ifdef DEBUG\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+#endif\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(in_out);\n+}\n+\n+void Inverse(Num3072* out, const Num3072* a)\n+{\n+    // For fast exponentiation a sliding window exponentiation with repunit\n+    // precomputation is utilized. See \"Fast Point Decompression for Standard\n+    // Elliptic Curves\" (Brumley, Järvinen, 2008).",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 210,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "ef53ca76cc616cd359969533a75c3dab388ec38d",
      "in_reply_to_id": 492832419,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The C++ code would be `square_n_mul`. Just having an inline function to calculate `x**(2**n)` -- ie the \"square n times\" part would probably already make it easier to follow.",
      "created_at": "2020-10-19T02:01:10Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r507347412",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507347412"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 210,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507352789",
      "pull_request_review_id": 511370025,
      "id": 507352789,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzM1Mjc4OQ==",
      "diff_hunk": "@@ -0,0 +1,304 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+using limb_t = Num3072::limb_t;\n+using double_limb_t = Num3072::double_limb_t;\n+constexpr int LIMB_SIZE = Num3072::LIMB_SIZE;\n+constexpr int LIMBS = Num3072::LIMBS;\n+\n+// Sanity check for Num3072 constants\n+static_assert(LIMB_SIZE * LIMBS == 3072, \"Num3072 isn't 3072 bits\");\n+static_assert(sizeof(double_limb_t) == sizeof(limb_t) * 2, \"bad size for double_limb_t\");\n+static_assert(sizeof(limb_t) * 8 == LIMB_SIZE, \"LIMB_SIZE is incorrect\");\n+\n+// Hard coded values in MuHash3072 constructor and Finalize\n+static_assert(sizeof(limb_t) == 4 || sizeof(limb_t) == 8, \"bad size for limb_t\");\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+inline void extract2(limb_t& c0, limb_t& c1, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(limb_t& c0, limb_t& c1, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    c1 = t >> LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& d0, limb_t& d1, limb_t& d2, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)d0 * n + c0;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)d1 * n + c1;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(limb_t& c0, limb_t& c1, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)c0 * n;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)c1 * n;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    limb_t tl, th;\n+    {\n+        double_limb_t t = (double_limb_t)a * b;\n+        th = t >> LIMB_SIZE;\n+        tl = t;\n+    }\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+inline void muldbladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    limb_t tl, th;\n+    {\n+        double_limb_t t = (double_limb_t)a * b;\n+        th = t >> LIMB_SIZE;\n+        tl = t;\n+    }\n+    c0 += tl;\n+    limb_t tt = th + ((c0 < tl) ? 1 : 0);\n+    c1 += tt;\n+    c2 += (c1 < tt) ? 1 : 0;\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1] += a */\n+inline void add2(limb_t& c0, limb_t& c1, limb_t& a)\n+{\n+    c0 += a;\n+    c1 += (c0 < a) ? 1 : 0;\n+}\n+\n+bool IsOverflow(const Num3072* d)\n+{\n+    if (d->limbs[0] <= std::numeric_limits<limb_t>::max() - MAX_PRIME_DIFF) return false;\n+    for (int i = 1; i < LIMBS; ++i) {\n+        if (d->limbs[i] != std::numeric_limits<limb_t>::max()) return false;\n+    }\n+    return true;\n+}\n+\n+void FullReduce(Num3072* d)\n+{\n+    limb_t c0 = MAX_PRIME_DIFF;\n+    for (int i = 0; i < LIMBS; ++i) {\n+        limb_t c1 = 0;\n+        add2(c0, c1, d->limbs[i]);\n+        extract2(c0, c1, d->limbs[i]);\n+    }\n+}\n+\n+void Multiply(Num3072* in_out, const Num3072* a)\n+{\n+    limb_t c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of in_out*a into tmp, including one reduction. */\n+    for (int j = 0; j < LIMBS - 1; ++j) {\n+        limb_t d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        mul(d0, d1, in_out->limbs[1 + j], a->limbs[LIMBS + j - (1 + j)]);\n+        for (int i = 2 + j; i < LIMBS; ++i) muladd3(d0, d1, d2, in_out->limbs[i], a->limbs[LIMBS + j - i]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < j + 1; ++i) muladd3(c0, c1, c2, in_out->limbs[i], a->limbs[j - i]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+    /* Compute limb N-1 of a*b into tmp. */\n+    {\n+        limb_t c2 = 0;\n+        for (int i = 0; i < LIMBS; ++i) muladd3(c0, c1, c2, in_out->limbs[i], a->limbs[LIMBS - 1 - i]);\n+        extract3(c0, c1, c2, tmp.limbs[LIMBS - 1]);\n+    }\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, in_out->limbs[j]);\n+    }\n+#ifdef DEBUG\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+#endif\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(in_out);\n+}\n+\n+void Square(Num3072* in_out)\n+{\n+    limb_t c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of in_out*in_out into tmp, including one reduction. */\n+    for (int j = 0; j < LIMBS - 1; ++j) {\n+        limb_t d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        for (int i = 0; i < (LIMBS - 1 - j) / 2; ++i) muldbladd3(d0, d1, d2, in_out->limbs[i + j + 1], in_out->limbs[LIMBS - 1 - i]);\n+        if ((j + 1) & 1) muladd3(d0, d1, d2, in_out->limbs[(LIMBS - 1 - j) / 2 + j + 1], in_out->limbs[LIMBS - 1 - (LIMBS - 1 - j) / 2]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < (j + 1) / 2; ++i) muldbladd3(c0, c1, c2, in_out->limbs[i], in_out->limbs[j - i]);\n+        if ((j + 1) & 1) muladd3(c0, c1, c2, in_out->limbs[(j + 1) / 2], in_out->limbs[j - (j + 1) / 2]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+    {\n+        limb_t c2 = 0;\n+        for (int i = 0; i < LIMBS / 2; ++i) muldbladd3(c0, c1, c2, in_out->limbs[i], in_out->limbs[LIMBS - 1 - i]);\n+        extract3(c0, c1, c2, tmp.limbs[LIMBS - 1]);\n+    }\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, in_out->limbs[j]);\n+    }\n+#ifdef DEBUG\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+#endif\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(in_out);\n+}\n+\n+void Inverse(Num3072* out, const Num3072* a)\n+{\n+    // For fast exponentiation a sliding window exponentiation with repunit\n+    // precomputation is utilized. See \"Fast Point Decompression for Standard\n+    // Elliptic Curves\" (Brumley, Järvinen, 2008).",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 210,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "e19e50013478c6b7066aa2c9f7e0d0ee7219e837",
      "in_reply_to_id": 507186374,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is just an explanation of how the constants were chosen in the first place. I think it's only interesting in the same way references in an academic paper help trace the lineage of an idea rather than actually useful for reviewing the code as it stands -- ie, handy if you want to reinvent it, eg if 3072 bits aren't enough and you need to pick a new prime and hence new constants for efficient inversion, or if you want to see if you can find different constants that would involve even fewer square/multiply operations to get the same result. But not needed if you just want to check correctness.",
      "created_at": "2020-10-19T02:07:03Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r507352789",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507352789"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 210,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507517654",
      "pull_request_review_id": 511463883,
      "id": 507517654,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUxNzY1NA==",
      "diff_hunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <serialize.h>\n+\n+#include <stdint.h>\n+\n+struct Num3072 {\n+#ifdef HAVE___INT128\n+    typedef unsigned __int128 double_limb_t;\n+    typedef uint64_t limb_t;\n+    static constexpr int LIMBS = 48;\n+    static constexpr int LIMB_SIZE = 64;\n+#else\n+    typedef uint64_t double_limb_t;\n+    typedef uint32_t limb_t;\n+    static constexpr int LIMBS = 96;\n+    static constexpr int LIMB_SIZE = 32;\n+#endif\n+    limb_t limbs[LIMBS];\n+};\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_t MAX_PRIME_DIFF = 1103717;\n+\n+/** A class representing MuHash sets\n+ *\n+ * MuHash is a hashing algorithm that supports adding set elements in any\n+ * order but also deleting in any order. As a result, it can maintain a\n+ * running sum for a set of data as a whole, and add/subtract when data\n+ * is added to or removed from it. A downside of MuHash is that computing\n+ * an inverse is relatively expensive. This can be solved by representing\n+ * the running value as a fraction, and multiplying added elements into\n+ * the numerator and removed elements into the denominator. Only when the\n+ * final hash is desired, a single modular inverse and multiplication is\n+ * needed to combine the two.\n+ *\n+ * TODO: Represent running value as a fraction to allow for more intuitive\n+ * use (see above).\n+ *\n+ * As the update operations are also associative, H(a)+H(b)+H(c)+H(d) can\n+ * in fact be computed as (H(a)+H(b)) + (H(c)+H(d)). This implies that\n+ * all of this is perfectly parallellizable: each thread can process an\n+ * arbitrary subset of the update operations, allowing them to be\n+ * efficiently combined later.\n+ *\n+ * Muhash does not support checking if an element is already part of the\n+ * set. That is why this class does not enforce the use of a set as the\n+ * data it represents because there is no efficient way to do so..\n+ * It is possible to add elements more than once and also to remove\n+ * elements that have not been added before. However, this implementation\n+ * is intended to represent a set of elements.\n+ *\n+ * See also https://cseweb.ucsd.edu/~mihir/papers/inchash.pdf and\n+ * https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014337.html.\n+ */\n+class MuHash3072\n+{\n+protected:\n+    Num3072 data;\n+\n+    static constexpr size_t INPUT_SIZE = 32;\n+    static constexpr size_t OUTPUT_SIZE = 384;\n+\n+public:\n+    /* The empty set. */\n+    MuHash3072() noexcept;\n+\n+    /* A singleton with a single 32-byte key in it. */\n+    explicit MuHash3072(Span<const unsigned char> key32) noexcept;\n+\n+    /* Multiply (resulting in a hash for the union of the sets) */\n+    MuHash3072& operator*=(const MuHash3072& add) noexcept;",
      "path": "src/crypto/muhash.h",
      "position": null,
      "original_position": 81,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "e19e50013478c6b7066aa2c9f7e0d0ee7219e837",
      "in_reply_to_id": 507184333,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'd prefer `mul` and `div` for the multiplier and divisor operators. Alternatively change the operators to `+=` and `-=`.",
      "created_at": "2020-10-19T07:06:53Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r507517654",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507517654"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507593284",
      "pull_request_review_id": 511561744,
      "id": 507593284,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzU5MzI4NA==",
      "diff_hunk": "@@ -0,0 +1,310 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_t MAX_PRIME_DIFF = 1103717;\n+\n+static constexpr size_t INPUT_SIZE = 32;\n+static constexpr size_t OUTPUT_SIZE = 384;",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 21,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "b03e923c534a954edfdd9ef4ec9a68e5dd08d827",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No need to mark these as static. Being in the unnamed namespace already means that they don't have external linkage.",
      "created_at": "2020-10-19T09:13:08Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r507593284",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507593284"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": 20,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 21,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507593683",
      "pull_request_review_id": 511561744,
      "id": 507593683,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzU5MzY4Mw==",
      "diff_hunk": "@@ -0,0 +1,310 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_t MAX_PRIME_DIFF = 1103717;\n+\n+static constexpr size_t INPUT_SIZE = 32;\n+static constexpr size_t OUTPUT_SIZE = 384;\n+\n+using limb_t = Num3072::limb_t;\n+using double_limb_t = Num3072::double_limb_t;\n+constexpr int LIMB_SIZE = Num3072::LIMB_SIZE;\n+constexpr int LIMBS = Num3072::LIMBS;\n+\n+// Sanity check for Num3072 constants\n+static_assert(LIMB_SIZE * LIMBS == 3072, \"Num3072 isn't 3072 bits\");\n+static_assert(sizeof(double_limb_t) == sizeof(limb_t) * 2, \"bad size for double_limb_t\");\n+static_assert(sizeof(limb_t) * 8 == LIMB_SIZE, \"LIMB_SIZE is incorrect\");\n+\n+// Hard coded values in MuHash3072 constructor and Finalize\n+static_assert(sizeof(limb_t) == 4 || sizeof(limb_t) == 8, \"bad size for limb_t\");\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+inline void extract2(limb_t& c0, limb_t& c1, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(limb_t& c0, limb_t& c1, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    c1 = t >> LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& d0, limb_t& d1, limb_t& d2, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)d0 * n + c0;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)d1 * n + c1;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(limb_t& c0, limb_t& c1, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)c0 * n;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)c1 * n;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    limb_t tl, th;",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 87,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "b03e923c534a954edfdd9ef4ec9a68e5dd08d827",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No need to declare these variables up here. Just declare them where you need them. Same in other functions below.",
      "created_at": "2020-10-19T09:13:49Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r507593683",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507593683"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 87,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507596124",
      "pull_request_review_id": 511561744,
      "id": 507596124,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzU5NjEyNA==",
      "diff_hunk": "@@ -0,0 +1,304 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+using limb_t = Num3072::limb_t;\n+using double_limb_t = Num3072::double_limb_t;\n+constexpr int LIMB_SIZE = Num3072::LIMB_SIZE;\n+constexpr int LIMBS = Num3072::LIMBS;\n+\n+// Sanity check for Num3072 constants\n+static_assert(LIMB_SIZE * LIMBS == 3072, \"Num3072 isn't 3072 bits\");\n+static_assert(sizeof(double_limb_t) == sizeof(limb_t) * 2, \"bad size for double_limb_t\");\n+static_assert(sizeof(limb_t) * 8 == LIMB_SIZE, \"LIMB_SIZE is incorrect\");\n+\n+// Hard coded values in MuHash3072 constructor and Finalize\n+static_assert(sizeof(limb_t) == 4 || sizeof(limb_t) == 8, \"bad size for limb_t\");\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+inline void extract2(limb_t& c0, limb_t& c1, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(limb_t& c0, limb_t& c1, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    c1 = t >> LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& d0, limb_t& d1, limb_t& d2, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)d0 * n + c0;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)d1 * n + c1;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(limb_t& c0, limb_t& c1, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)c0 * n;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)c1 * n;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    limb_t tl, th;\n+    {\n+        double_limb_t t = (double_limb_t)a * b;\n+        th = t >> LIMB_SIZE;\n+        tl = t;\n+    }\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+inline void muldbladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    limb_t tl, th;\n+    {\n+        double_limb_t t = (double_limb_t)a * b;\n+        th = t >> LIMB_SIZE;\n+        tl = t;\n+    }\n+    c0 += tl;\n+    limb_t tt = th + ((c0 < tl) ? 1 : 0);\n+    c1 += tt;\n+    c2 += (c1 < tt) ? 1 : 0;\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1] += a */\n+inline void add2(limb_t& c0, limb_t& c1, limb_t& a)\n+{\n+    c0 += a;\n+    c1 += (c0 < a) ? 1 : 0;\n+}\n+\n+bool IsOverflow(const Num3072* d)\n+{\n+    if (d->limbs[0] <= std::numeric_limits<limb_t>::max() - MAX_PRIME_DIFF) return false;\n+    for (int i = 1; i < LIMBS; ++i) {\n+        if (d->limbs[i] != std::numeric_limits<limb_t>::max()) return false;\n+    }\n+    return true;\n+}\n+\n+void FullReduce(Num3072* d)\n+{\n+    limb_t c0 = MAX_PRIME_DIFF;\n+    for (int i = 0; i < LIMBS; ++i) {\n+        limb_t c1 = 0;\n+        add2(c0, c1, d->limbs[i]);\n+        extract2(c0, c1, d->limbs[i]);\n+    }\n+}\n+\n+void Multiply(Num3072* in_out, const Num3072* a)\n+{\n+    limb_t c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of in_out*a into tmp, including one reduction. */\n+    for (int j = 0; j < LIMBS - 1; ++j) {\n+        limb_t d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        mul(d0, d1, in_out->limbs[1 + j], a->limbs[LIMBS + j - (1 + j)]);\n+        for (int i = 2 + j; i < LIMBS; ++i) muladd3(d0, d1, d2, in_out->limbs[i], a->limbs[LIMBS + j - i]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < j + 1; ++i) muladd3(c0, c1, c2, in_out->limbs[i], a->limbs[j - i]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+    /* Compute limb N-1 of a*b into tmp. */\n+    {\n+        limb_t c2 = 0;\n+        for (int i = 0; i < LIMBS; ++i) muladd3(c0, c1, c2, in_out->limbs[i], a->limbs[LIMBS - 1 - i]);\n+        extract3(c0, c1, c2, tmp.limbs[LIMBS - 1]);\n+    }\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, in_out->limbs[j]);\n+    }\n+#ifdef DEBUG\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+#endif\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(in_out);\n+}\n+\n+void Square(Num3072* in_out)\n+{\n+    limb_t c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of in_out*in_out into tmp, including one reduction. */\n+    for (int j = 0; j < LIMBS - 1; ++j) {\n+        limb_t d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        for (int i = 0; i < (LIMBS - 1 - j) / 2; ++i) muldbladd3(d0, d1, d2, in_out->limbs[i + j + 1], in_out->limbs[LIMBS - 1 - i]);\n+        if ((j + 1) & 1) muladd3(d0, d1, d2, in_out->limbs[(LIMBS - 1 - j) / 2 + j + 1], in_out->limbs[LIMBS - 1 - (LIMBS - 1 - j) / 2]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < (j + 1) / 2; ++i) muldbladd3(c0, c1, c2, in_out->limbs[i], in_out->limbs[j - i]);\n+        if ((j + 1) & 1) muladd3(c0, c1, c2, in_out->limbs[(j + 1) / 2], in_out->limbs[j - (j + 1) / 2]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+    {\n+        limb_t c2 = 0;\n+        for (int i = 0; i < LIMBS / 2; ++i) muldbladd3(c0, c1, c2, in_out->limbs[i], in_out->limbs[LIMBS - 1 - i]);\n+        extract3(c0, c1, c2, tmp.limbs[LIMBS - 1]);\n+    }\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, in_out->limbs[j]);\n+    }\n+#ifdef DEBUG\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+#endif\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(in_out);\n+}\n+\n+void Inverse(Num3072* out, const Num3072* a)\n+{\n+    // For fast exponentiation a sliding window exponentiation with repunit\n+    // precomputation is utilized. See \"Fast Point Decompression for Standard\n+    // Elliptic Curves\" (Brumley, Järvinen, 2008).",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 210,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "e19e50013478c6b7066aa2c9f7e0d0ee7219e837",
      "in_reply_to_id": 507186374,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Agree. I don't think there's anything more needed here.",
      "created_at": "2020-10-19T09:17:46Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r507596124",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507596124"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 210,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507596535",
      "pull_request_review_id": 511561744,
      "id": 507596535,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzU5NjUzNQ==",
      "diff_hunk": "@@ -0,0 +1,310 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_t MAX_PRIME_DIFF = 1103717;\n+\n+static constexpr size_t INPUT_SIZE = 32;\n+static constexpr size_t OUTPUT_SIZE = 384;\n+\n+using limb_t = Num3072::limb_t;\n+using double_limb_t = Num3072::double_limb_t;\n+constexpr int LIMB_SIZE = Num3072::LIMB_SIZE;\n+constexpr int LIMBS = Num3072::LIMBS;\n+\n+// Sanity check for Num3072 constants\n+static_assert(LIMB_SIZE * LIMBS == 3072, \"Num3072 isn't 3072 bits\");\n+static_assert(sizeof(double_limb_t) == sizeof(limb_t) * 2, \"bad size for double_limb_t\");\n+static_assert(sizeof(limb_t) * 8 == LIMB_SIZE, \"LIMB_SIZE is incorrect\");\n+\n+// Hard coded values in MuHash3072 constructor and Finalize\n+static_assert(sizeof(limb_t) == 4 || sizeof(limb_t) == 8, \"bad size for limb_t\");\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+inline void extract2(limb_t& c0, limb_t& c1, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(limb_t& c0, limb_t& c1, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    c1 = t >> LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& d0, limb_t& d1, limb_t& d2, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)d0 * n + c0;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)d1 * n + c1;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(limb_t& c0, limb_t& c1, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)c0 * n;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)c1 * n;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    limb_t tl, th;\n+\n+    double_limb_t t = (double_limb_t)a * b;\n+    th = t >> LIMB_SIZE;\n+    tl = t;\n+\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+inline void muldbladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    limb_t tl, th;\n+\n+    double_limb_t t = (double_limb_t)a * b;\n+    th = t >> LIMB_SIZE;\n+    tl = t;\n+\n+    c0 += tl;\n+    limb_t tt = th + ((c0 < tl) ? 1 : 0);\n+    c1 += tt;\n+    c2 += (c1 < tt) ? 1 : 0;\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1] += a */\n+inline void add2(limb_t& c0, limb_t& c1, limb_t& a)\n+{\n+    c0 += a;\n+    c1 += (c0 < a) ? 1 : 0;\n+}\n+\n+bool IsOverflow(const Num3072& d)\n+{\n+    if (d.limbs[0] <= std::numeric_limits<limb_t>::max() - MAX_PRIME_DIFF) return false;\n+    for (int i = 1; i < LIMBS; ++i) {\n+        if (d.limbs[i] != std::numeric_limits<limb_t>::max()) return false;\n+    }\n+    return true;\n+}\n+\n+void FullReduce(Num3072& d)\n+{\n+    limb_t c0 = MAX_PRIME_DIFF;\n+    for (int i = 0; i < LIMBS; ++i) {\n+        limb_t c1 = 0;\n+        add2(c0, c1, d.limbs[i]);\n+        extract2(c0, c1, d.limbs[i]);\n+    }\n+}\n+\n+void Multiply(Num3072& in_out, const Num3072& a)\n+{\n+    limb_t c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of in_out*a into tmp, including one reduction. */\n+    for (int j = 0; j < LIMBS - 1; ++j) {\n+        limb_t d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        mul(d0, d1, in_out.limbs[1 + j], a.limbs[LIMBS + j - (1 + j)]);\n+        for (int i = 2 + j; i < LIMBS; ++i) muladd3(d0, d1, d2, in_out.limbs[i], a.limbs[LIMBS + j - i]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < j + 1; ++i) muladd3(c0, c1, c2, in_out.limbs[i], a.limbs[j - i]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+\n+    /* Compute limb N-1 of a*b into tmp. */\n+    limb_t c2 = 0;\n+    for (int i = 0; i < LIMBS; ++i) muladd3(c0, c1, c2, in_out.limbs[i], a.limbs[LIMBS - 1 - i]);\n+    extract3(c0, c1, c2, tmp.limbs[LIMBS - 1]);\n+\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, in_out.limbs[j]);\n+    }\n+#ifdef DEBUG\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+#endif\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(in_out);\n+}\n+\n+void Square(Num3072& in_out)\n+{\n+    limb_t c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of in_out*in_out into tmp, including one reduction. */\n+    for (int j = 0; j < LIMBS - 1; ++j) {\n+        limb_t d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        for (int i = 0; i < (LIMBS - 1 - j) / 2; ++i) muldbladd3(d0, d1, d2, in_out.limbs[i + j + 1], in_out.limbs[LIMBS - 1 - i]);\n+        if ((j + 1) & 1) muladd3(d0, d1, d2, in_out.limbs[(LIMBS - 1 - j) / 2 + j + 1], in_out.limbs[LIMBS - 1 - (LIMBS - 1 - j) / 2]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < (j + 1) / 2; ++i) muldbladd3(c0, c1, c2, in_out.limbs[i], in_out.limbs[j - i]);\n+        if ((j + 1) & 1) muladd3(c0, c1, c2, in_out.limbs[(j + 1) / 2], in_out.limbs[j - (j + 1) / 2]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+\n+    limb_t c2 = 0;\n+    for (int i = 0; i < LIMBS / 2; ++i) muldbladd3(c0, c1, c2, in_out.limbs[i], in_out.limbs[LIMBS - 1 - i]);\n+    extract3(c0, c1, c2, tmp.limbs[LIMBS - 1]);\n+\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, in_out.limbs[j]);\n+    }\n+#ifdef DEBUG\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+#endif\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(in_out);\n+}\n+\n+void Inverse(Num3072& out, const Num3072& a)\n+{\n+    // For fast exponentiation a sliding window exponentiation with repunit\n+    // precomputation is utilized. See \"Fast Point Decompression for Standard\n+    // Elliptic Curves\" (Brumley, Järvinen, 2008).\n+\n+    Num3072 p[12]; // p[i] = a^(2^(2^i)-1)\n+    Num3072 x;\n+\n+    p[0] = a;\n+\n+    for (int i = 0; i < 11; ++i) {\n+        p[i + 1] = p[i];\n+        for (int j = 0; j < (1 << i); ++j) Square(p[i + 1]);\n+        Multiply(p[i + 1], p[i]);\n+    }\n+\n+    x = p[11];\n+\n+    for (int j = 0; j < 512; ++j) Square(x);\n+    Multiply(x, p[9]);\n+    for (int j = 0; j < 256; ++j) Square(x);\n+    Multiply(x, p[8]);\n+    for (int j = 0; j < 128; ++j) Square(x);\n+    Multiply(x, p[7]);\n+    for (int j = 0; j < 64; ++j) Square(x);\n+    Multiply(x, p[6]);\n+    for (int j = 0; j < 32; ++j) Square(x);\n+    Multiply(x, p[5]);\n+    for (int j = 0; j < 8; ++j) Square(x);\n+    Multiply(x, p[3]);\n+    for (int j = 0; j < 2; ++j) Square(x);\n+    Multiply(x, p[1]);\n+    for (int j = 0; j < 1; ++j) Square(x);\n+    Multiply(x, p[0]);\n+    for (int j = 0; j < 5; ++j) Square(x);\n+    Multiply(x, p[2]);\n+    for (int j = 0; j < 3; ++j) Square(x);\n+    Multiply(x, p[0]);\n+    for (int j = 0; j < 2; ++j) Square(x);\n+    Multiply(x, p[0]);\n+    for (int j = 0; j < 4; ++j) Square(x);\n+    Multiply(x, p[0]);\n+    for (int j = 0; j < 4; ++j) Square(x);\n+    Multiply(x, p[1]);\n+    for (int j = 0; j < 3; ++j) Square(x);\n+    Multiply(x, p[0]);\n+\n+    out = x;\n+}\n+\n+} // namespace\n+\n+MuHash3072::MuHash3072() noexcept\n+{\n+    m_data.limbs[0] = 1;\n+    for (int i = 1; i < LIMBS; ++i) m_data.limbs[i] = 0;\n+}\n+\n+MuHash3072::MuHash3072(Span<const unsigned char> key32) noexcept\n+{\n+    assert(key32.size() == INPUT_SIZE);\n+    unsigned char tmp[OUTPUT_SIZE];\n+    ChaCha20(key32.data(), key32.size()).Keystream(tmp, OUTPUT_SIZE);\n+    for (int i = 0; i < LIMBS; ++i) {\n+        if (sizeof(limb_t) == 4) {\n+            m_data.limbs[i] = ReadLE32(tmp + 4 * i);\n+        } else if (sizeof(limb_t) == 8) {\n+            m_data.limbs[i] = ReadLE64(tmp + 8 * i);\n+        }\n+    }\n+}\n+\n+void MuHash3072::Finalize(Span<unsigned char> hash384) noexcept\n+{\n+    assert(hash384.size() == OUTPUT_SIZE);\n+    if (IsOverflow(m_data)) FullReduce(m_data);\n+    for (int i = 0; i < LIMBS; ++i) {\n+        if (sizeof(limb_t) == 4) {\n+            WriteLE32(hash384.data() + i * 4, m_data.limbs[i]);\n+        } else if (sizeof(limb_t) == 8) {\n+            WriteLE64(hash384.data() + i * 8, m_data.limbs[i]);\n+        }\n+    }\n+}\n+\n+MuHash3072& MuHash3072::operator*=(const MuHash3072& x) noexcept\n+{\n+    Multiply(m_data, x.m_data);\n+    return *this;\n+}\n+\n+MuHash3072& MuHash3072::operator/=(const MuHash3072& x) noexcept\n+{\n+    Num3072 tmp;\n+    Inverse(tmp, x.m_data);\n+    Multiply(this->m_data, tmp);",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 308,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "b03e923c534a954edfdd9ef4ec9a68e5dd08d827",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Implicit `this`:\r\n\r\n```suggestion\r\n    Multiply(m_data, tmp);\r\n```",
      "created_at": "2020-10-19T09:18:27Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r507596535",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507596535"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 308,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507598399",
      "pull_request_review_id": 511561744,
      "id": 507598399,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzU5ODM5OQ==",
      "diff_hunk": "@@ -0,0 +1,310 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_t MAX_PRIME_DIFF = 1103717;\n+\n+static constexpr size_t INPUT_SIZE = 32;\n+static constexpr size_t OUTPUT_SIZE = 384;\n+\n+using limb_t = Num3072::limb_t;\n+using double_limb_t = Num3072::double_limb_t;\n+constexpr int LIMB_SIZE = Num3072::LIMB_SIZE;\n+constexpr int LIMBS = Num3072::LIMBS;\n+\n+// Sanity check for Num3072 constants\n+static_assert(LIMB_SIZE * LIMBS == 3072, \"Num3072 isn't 3072 bits\");\n+static_assert(sizeof(double_limb_t) == sizeof(limb_t) * 2, \"bad size for double_limb_t\");\n+static_assert(sizeof(limb_t) * 8 == LIMB_SIZE, \"LIMB_SIZE is incorrect\");\n+\n+// Hard coded values in MuHash3072 constructor and Finalize\n+static_assert(sizeof(limb_t) == 4 || sizeof(limb_t) == 8, \"bad size for limb_t\");\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+inline void extract2(limb_t& c0, limb_t& c1, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(limb_t& c0, limb_t& c1, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    c1 = t >> LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& d0, limb_t& d1, limb_t& d2, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)d0 * n + c0;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)d1 * n + c1;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(limb_t& c0, limb_t& c1, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)c0 * n;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)c1 * n;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    limb_t tl, th;\n+\n+    double_limb_t t = (double_limb_t)a * b;\n+    th = t >> LIMB_SIZE;\n+    tl = t;\n+\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+inline void muldbladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    limb_t tl, th;\n+\n+    double_limb_t t = (double_limb_t)a * b;\n+    th = t >> LIMB_SIZE;\n+    tl = t;\n+\n+    c0 += tl;\n+    limb_t tt = th + ((c0 < tl) ? 1 : 0);\n+    c1 += tt;\n+    c2 += (c1 < tt) ? 1 : 0;\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1] += a */\n+inline void add2(limb_t& c0, limb_t& c1, limb_t& a)\n+{\n+    c0 += a;\n+    c1 += (c0 < a) ? 1 : 0;\n+}\n+\n+bool IsOverflow(const Num3072& d)\n+{\n+    if (d.limbs[0] <= std::numeric_limits<limb_t>::max() - MAX_PRIME_DIFF) return false;\n+    for (int i = 1; i < LIMBS; ++i) {\n+        if (d.limbs[i] != std::numeric_limits<limb_t>::max()) return false;\n+    }\n+    return true;\n+}\n+\n+void FullReduce(Num3072& d)\n+{\n+    limb_t c0 = MAX_PRIME_DIFF;\n+    for (int i = 0; i < LIMBS; ++i) {\n+        limb_t c1 = 0;\n+        add2(c0, c1, d.limbs[i]);\n+        extract2(c0, c1, d.limbs[i]);\n+    }\n+}\n+\n+void Multiply(Num3072& in_out, const Num3072& a)\n+{\n+    limb_t c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of in_out*a into tmp, including one reduction. */\n+    for (int j = 0; j < LIMBS - 1; ++j) {\n+        limb_t d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        mul(d0, d1, in_out.limbs[1 + j], a.limbs[LIMBS + j - (1 + j)]);\n+        for (int i = 2 + j; i < LIMBS; ++i) muladd3(d0, d1, d2, in_out.limbs[i], a.limbs[LIMBS + j - i]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < j + 1; ++i) muladd3(c0, c1, c2, in_out.limbs[i], a.limbs[j - i]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+\n+    /* Compute limb N-1 of a*b into tmp. */\n+    limb_t c2 = 0;\n+    for (int i = 0; i < LIMBS; ++i) muladd3(c0, c1, c2, in_out.limbs[i], a.limbs[LIMBS - 1 - i]);\n+    extract3(c0, c1, c2, tmp.limbs[LIMBS - 1]);\n+\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, in_out.limbs[j]);\n+    }\n+#ifdef DEBUG\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+#endif\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(in_out);\n+}\n+\n+void Square(Num3072& in_out)\n+{\n+    limb_t c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of in_out*in_out into tmp, including one reduction. */\n+    for (int j = 0; j < LIMBS - 1; ++j) {\n+        limb_t d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        for (int i = 0; i < (LIMBS - 1 - j) / 2; ++i) muldbladd3(d0, d1, d2, in_out.limbs[i + j + 1], in_out.limbs[LIMBS - 1 - i]);\n+        if ((j + 1) & 1) muladd3(d0, d1, d2, in_out.limbs[(LIMBS - 1 - j) / 2 + j + 1], in_out.limbs[LIMBS - 1 - (LIMBS - 1 - j) / 2]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < (j + 1) / 2; ++i) muldbladd3(c0, c1, c2, in_out.limbs[i], in_out.limbs[j - i]);\n+        if ((j + 1) & 1) muladd3(c0, c1, c2, in_out.limbs[(j + 1) / 2], in_out.limbs[j - (j + 1) / 2]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+\n+    limb_t c2 = 0;\n+    for (int i = 0; i < LIMBS / 2; ++i) muldbladd3(c0, c1, c2, in_out.limbs[i], in_out.limbs[LIMBS - 1 - i]);\n+    extract3(c0, c1, c2, tmp.limbs[LIMBS - 1]);\n+\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, in_out.limbs[j]);\n+    }\n+#ifdef DEBUG\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+#endif\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(in_out);\n+}\n+\n+void Inverse(Num3072& out, const Num3072& a)\n+{\n+    // For fast exponentiation a sliding window exponentiation with repunit\n+    // precomputation is utilized. See \"Fast Point Decompression for Standard\n+    // Elliptic Curves\" (Brumley, Järvinen, 2008).\n+\n+    Num3072 p[12]; // p[i] = a^(2^(2^i)-1)\n+    Num3072 x;",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 219,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "b03e923c534a954edfdd9ef4ec9a68e5dd08d827",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why is this temporary needed? Can we just construct `out` here?\r\n\r\nChanging the function signature to `Num3072 Inverse(const Num3072& in)` would use RVO and avoid copying `x` to `out`.",
      "created_at": "2020-10-19T09:21:26Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r507598399",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507598399"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 219,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507602363",
      "pull_request_review_id": 511561744,
      "id": 507602363,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYwMjM2Mw==",
      "diff_hunk": "@@ -0,0 +1,310 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_t MAX_PRIME_DIFF = 1103717;\n+\n+static constexpr size_t INPUT_SIZE = 32;\n+static constexpr size_t OUTPUT_SIZE = 384;\n+\n+using limb_t = Num3072::limb_t;\n+using double_limb_t = Num3072::double_limb_t;\n+constexpr int LIMB_SIZE = Num3072::LIMB_SIZE;\n+constexpr int LIMBS = Num3072::LIMBS;\n+\n+// Sanity check for Num3072 constants\n+static_assert(LIMB_SIZE * LIMBS == 3072, \"Num3072 isn't 3072 bits\");\n+static_assert(sizeof(double_limb_t) == sizeof(limb_t) * 2, \"bad size for double_limb_t\");\n+static_assert(sizeof(limb_t) * 8 == LIMB_SIZE, \"LIMB_SIZE is incorrect\");\n+\n+// Hard coded values in MuHash3072 constructor and Finalize\n+static_assert(sizeof(limb_t) == 4 || sizeof(limb_t) == 8, \"bad size for limb_t\");\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+inline void extract2(limb_t& c0, limb_t& c1, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(limb_t& c0, limb_t& c1, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    c1 = t >> LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& d0, limb_t& d1, limb_t& d2, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)d0 * n + c0;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)d1 * n + c1;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(limb_t& c0, limb_t& c1, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)c0 * n;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)c1 * n;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    limb_t tl, th;\n+\n+    double_limb_t t = (double_limb_t)a * b;\n+    th = t >> LIMB_SIZE;\n+    tl = t;\n+\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+inline void muldbladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    limb_t tl, th;\n+\n+    double_limb_t t = (double_limb_t)a * b;\n+    th = t >> LIMB_SIZE;\n+    tl = t;\n+\n+    c0 += tl;\n+    limb_t tt = th + ((c0 < tl) ? 1 : 0);\n+    c1 += tt;\n+    c2 += (c1 < tt) ? 1 : 0;\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1] += a */\n+inline void add2(limb_t& c0, limb_t& c1, limb_t& a)\n+{\n+    c0 += a;\n+    c1 += (c0 < a) ? 1 : 0;\n+}\n+\n+bool IsOverflow(const Num3072& d)\n+{\n+    if (d.limbs[0] <= std::numeric_limits<limb_t>::max() - MAX_PRIME_DIFF) return false;\n+    for (int i = 1; i < LIMBS; ++i) {\n+        if (d.limbs[i] != std::numeric_limits<limb_t>::max()) return false;\n+    }\n+    return true;\n+}\n+\n+void FullReduce(Num3072& d)\n+{\n+    limb_t c0 = MAX_PRIME_DIFF;\n+    for (int i = 0; i < LIMBS; ++i) {\n+        limb_t c1 = 0;\n+        add2(c0, c1, d.limbs[i]);\n+        extract2(c0, c1, d.limbs[i]);\n+    }\n+}\n+\n+void Multiply(Num3072& in_out, const Num3072& a)\n+{\n+    limb_t c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of in_out*a into tmp, including one reduction. */\n+    for (int j = 0; j < LIMBS - 1; ++j) {\n+        limb_t d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        mul(d0, d1, in_out.limbs[1 + j], a.limbs[LIMBS + j - (1 + j)]);\n+        for (int i = 2 + j; i < LIMBS; ++i) muladd3(d0, d1, d2, in_out.limbs[i], a.limbs[LIMBS + j - i]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < j + 1; ++i) muladd3(c0, c1, c2, in_out.limbs[i], a.limbs[j - i]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+\n+    /* Compute limb N-1 of a*b into tmp. */\n+    limb_t c2 = 0;\n+    for (int i = 0; i < LIMBS; ++i) muladd3(c0, c1, c2, in_out.limbs[i], a.limbs[LIMBS - 1 - i]);\n+    extract3(c0, c1, c2, tmp.limbs[LIMBS - 1]);\n+\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, in_out.limbs[j]);\n+    }\n+#ifdef DEBUG\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+#endif\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(in_out);\n+}\n+\n+void Square(Num3072& in_out)\n+{\n+    limb_t c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of in_out*in_out into tmp, including one reduction. */\n+    for (int j = 0; j < LIMBS - 1; ++j) {\n+        limb_t d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        for (int i = 0; i < (LIMBS - 1 - j) / 2; ++i) muldbladd3(d0, d1, d2, in_out.limbs[i + j + 1], in_out.limbs[LIMBS - 1 - i]);\n+        if ((j + 1) & 1) muladd3(d0, d1, d2, in_out.limbs[(LIMBS - 1 - j) / 2 + j + 1], in_out.limbs[LIMBS - 1 - (LIMBS - 1 - j) / 2]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < (j + 1) / 2; ++i) muldbladd3(c0, c1, c2, in_out.limbs[i], in_out.limbs[j - i]);\n+        if ((j + 1) & 1) muladd3(c0, c1, c2, in_out.limbs[(j + 1) / 2], in_out.limbs[j - (j + 1) / 2]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+\n+    limb_t c2 = 0;\n+    for (int i = 0; i < LIMBS / 2; ++i) muldbladd3(c0, c1, c2, in_out.limbs[i], in_out.limbs[LIMBS - 1 - i]);\n+    extract3(c0, c1, c2, tmp.limbs[LIMBS - 1]);\n+\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, in_out.limbs[j]);\n+    }\n+#ifdef DEBUG",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 204,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "b03e923c534a954edfdd9ef4ec9a68e5dd08d827",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "We don't usually compile out asserts in our code (in fact, I can't see any other examples in the codebase). I suggest removing this `Ifdef`.",
      "created_at": "2020-10-19T09:27:34Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r507602363",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507602363"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 204,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507610270",
      "pull_request_review_id": 511561744,
      "id": 507610270,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYxMDI3MA==",
      "diff_hunk": "@@ -0,0 +1,310 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_t MAX_PRIME_DIFF = 1103717;\n+\n+static constexpr size_t INPUT_SIZE = 32;\n+static constexpr size_t OUTPUT_SIZE = 384;\n+\n+using limb_t = Num3072::limb_t;\n+using double_limb_t = Num3072::double_limb_t;\n+constexpr int LIMB_SIZE = Num3072::LIMB_SIZE;\n+constexpr int LIMBS = Num3072::LIMBS;\n+\n+// Sanity check for Num3072 constants\n+static_assert(LIMB_SIZE * LIMBS == 3072, \"Num3072 isn't 3072 bits\");\n+static_assert(sizeof(double_limb_t) == sizeof(limb_t) * 2, \"bad size for double_limb_t\");\n+static_assert(sizeof(limb_t) * 8 == LIMB_SIZE, \"LIMB_SIZE is incorrect\");\n+\n+// Hard coded values in MuHash3072 constructor and Finalize\n+static_assert(sizeof(limb_t) == 4 || sizeof(limb_t) == 8, \"bad size for limb_t\");\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+inline void extract2(limb_t& c0, limb_t& c1, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(limb_t& c0, limb_t& c1, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    c1 = t >> LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& d0, limb_t& d1, limb_t& d2, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)d0 * n + c0;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)d1 * n + c1;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(limb_t& c0, limb_t& c1, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)c0 * n;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)c1 * n;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    limb_t tl, th;\n+\n+    double_limb_t t = (double_limb_t)a * b;\n+    th = t >> LIMB_SIZE;\n+    tl = t;\n+\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+inline void muldbladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    limb_t tl, th;\n+\n+    double_limb_t t = (double_limb_t)a * b;\n+    th = t >> LIMB_SIZE;\n+    tl = t;\n+\n+    c0 += tl;\n+    limb_t tt = th + ((c0 < tl) ? 1 : 0);\n+    c1 += tt;\n+    c2 += (c1 < tt) ? 1 : 0;\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1] += a */\n+inline void add2(limb_t& c0, limb_t& c1, limb_t& a)",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 119,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "b03e923c534a954edfdd9ef4ec9a68e5dd08d827",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`add2()` is always followed by `extract2()`. Does it make sense to refactor these two functions into a single function?",
      "created_at": "2020-10-19T09:40:00Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r507610270",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507610270"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 117,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507832149",
      "pull_request_review_id": 511870771,
      "id": 507832149,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgzMjE0OQ==",
      "diff_hunk": "@@ -0,0 +1,91 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <serialize.h>\n+\n+#include <stdint.h>\n+\n+struct Num3072 {\n+#ifdef HAVE___INT128\n+    typedef unsigned __int128 double_limb_t;\n+    typedef uint64_t limb_t;\n+    static constexpr int LIMBS = 48;\n+    static constexpr int LIMB_SIZE = 64;\n+#else\n+    typedef uint64_t double_limb_t;\n+    typedef uint32_t limb_t;\n+    static constexpr int LIMBS = 96;\n+    static constexpr int LIMB_SIZE = 32;\n+#endif\n+    limb_t limbs[LIMBS];\n+};\n+\n+/** A class representing MuHash sets\n+ *\n+ * MuHash is a hashing algorithm that supports adding set elements in any\n+ * order but also deleting in any order. As a result, it can maintain a\n+ * running sum for a set of data as a whole, and add/subtract when data\n+ * is added to or removed from it. A downside of MuHash is that computing\n+ * an inverse is relatively expensive. This can be solved by representing\n+ * the running value as a fraction, and multiplying added elements into\n+ * the numerator and removed elements into the denominator. Only when the\n+ * final hash is desired, a single modular inverse and multiplication is\n+ * needed to combine the two.\n+ *\n+ * TODO: Represent running value as a fraction to allow for more intuitive\n+ * use (see above).\n+ *\n+ * As the update operations are also associative, H(a)+H(b)+H(c)+H(d) can\n+ * in fact be computed as (H(a)+H(b)) + (H(c)+H(d)). This implies that\n+ * all of this is perfectly parallellizable: each thread can process an\n+ * arbitrary subset of the update operations, allowing them to be\n+ * efficiently combined later.\n+ *\n+ * Muhash does not support checking if an element is already part of the\n+ * set. That is why this class does not enforce the use of a set as the\n+ * data it represents because there is no efficient way to do so.\n+ * It is possible to add elements more than once and also to remove\n+ * elements that have not been added before. However, this implementation\n+ * is intended to represent a set of elements.\n+ *\n+ * See also https://cseweb.ucsd.edu/~mihir/papers/inchash.pdf and\n+ * https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014337.html.\n+ */\n+class MuHash3072\n+{\n+protected:\n+    Num3072 m_data;\n+\n+public:\n+    /* The empty set. */\n+    MuHash3072() noexcept;\n+\n+    /* A singleton with a single 32-byte key in it. */\n+    explicit MuHash3072(Span<const unsigned char> key32) noexcept;",
      "path": "src/crypto/muhash.h",
      "position": null,
      "original_position": 72,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "b03e923c534a954edfdd9ef4ec9a68e5dd08d827",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Did you consider making the argument to the constructor and `Finalize()` functions references to array rather than spans? Doing so reduces flexibility (eg you wouldn't be able to Finalize into a vector, although I can't imagine you'd ever want to do that) but increases safety (you can enforce the inputs at compile time rather than asserting at runtime).",
      "created_at": "2020-10-19T15:10:50Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r507832149",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/507832149"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 72,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508085588",
      "pull_request_review_id": 512187939,
      "id": 508085588,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA4NTU4OA==",
      "diff_hunk": "@@ -0,0 +1,310 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_t MAX_PRIME_DIFF = 1103717;\n+\n+static constexpr size_t INPUT_SIZE = 32;\n+static constexpr size_t OUTPUT_SIZE = 384;\n+\n+using limb_t = Num3072::limb_t;\n+using double_limb_t = Num3072::double_limb_t;\n+constexpr int LIMB_SIZE = Num3072::LIMB_SIZE;\n+constexpr int LIMBS = Num3072::LIMBS;\n+\n+// Sanity check for Num3072 constants\n+static_assert(LIMB_SIZE * LIMBS == 3072, \"Num3072 isn't 3072 bits\");\n+static_assert(sizeof(double_limb_t) == sizeof(limb_t) * 2, \"bad size for double_limb_t\");\n+static_assert(sizeof(limb_t) * 8 == LIMB_SIZE, \"LIMB_SIZE is incorrect\");\n+\n+// Hard coded values in MuHash3072 constructor and Finalize\n+static_assert(sizeof(limb_t) == 4 || sizeof(limb_t) == 8, \"bad size for limb_t\");\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+inline void extract2(limb_t& c0, limb_t& c1, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(limb_t& c0, limb_t& c1, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    c1 = t >> LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& d0, limb_t& d1, limb_t& d2, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)d0 * n + c0;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)d1 * n + c1;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(limb_t& c0, limb_t& c1, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)c0 * n;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)c1 * n;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    limb_t tl, th;\n+\n+    double_limb_t t = (double_limb_t)a * b;\n+    th = t >> LIMB_SIZE;\n+    tl = t;\n+\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+inline void muldbladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    limb_t tl, th;\n+\n+    double_limb_t t = (double_limb_t)a * b;\n+    th = t >> LIMB_SIZE;\n+    tl = t;\n+\n+    c0 += tl;\n+    limb_t tt = th + ((c0 < tl) ? 1 : 0);\n+    c1 += tt;\n+    c2 += (c1 < tt) ? 1 : 0;\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1] += a */\n+inline void add2(limb_t& c0, limb_t& c1, limb_t& a)",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 119,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "b03e923c534a954edfdd9ef4ec9a68e5dd08d827",
      "in_reply_to_id": 507610270,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hm, making an `add_and_extract2()` to use it in 3 places doesn't feel like an improvement to me TBH.",
      "created_at": "2020-10-19T21:55:16Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r508085588",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508085588"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 117,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508085622",
      "pull_request_review_id": 512187975,
      "id": 508085622,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA4NTYyMg==",
      "diff_hunk": "@@ -0,0 +1,310 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_t MAX_PRIME_DIFF = 1103717;\n+\n+static constexpr size_t INPUT_SIZE = 32;\n+static constexpr size_t OUTPUT_SIZE = 384;\n+\n+using limb_t = Num3072::limb_t;\n+using double_limb_t = Num3072::double_limb_t;\n+constexpr int LIMB_SIZE = Num3072::LIMB_SIZE;\n+constexpr int LIMBS = Num3072::LIMBS;\n+\n+// Sanity check for Num3072 constants\n+static_assert(LIMB_SIZE * LIMBS == 3072, \"Num3072 isn't 3072 bits\");\n+static_assert(sizeof(double_limb_t) == sizeof(limb_t) * 2, \"bad size for double_limb_t\");\n+static_assert(sizeof(limb_t) * 8 == LIMB_SIZE, \"LIMB_SIZE is incorrect\");\n+\n+// Hard coded values in MuHash3072 constructor and Finalize\n+static_assert(sizeof(limb_t) == 4 || sizeof(limb_t) == 8, \"bad size for limb_t\");\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+inline void extract2(limb_t& c0, limb_t& c1, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(limb_t& c0, limb_t& c1, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    c1 = t >> LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& d0, limb_t& d1, limb_t& d2, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)d0 * n + c0;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)d1 * n + c1;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(limb_t& c0, limb_t& c1, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)c0 * n;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)c1 * n;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    limb_t tl, th;\n+\n+    double_limb_t t = (double_limb_t)a * b;\n+    th = t >> LIMB_SIZE;\n+    tl = t;\n+\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+inline void muldbladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    limb_t tl, th;\n+\n+    double_limb_t t = (double_limb_t)a * b;\n+    th = t >> LIMB_SIZE;\n+    tl = t;\n+\n+    c0 += tl;\n+    limb_t tt = th + ((c0 < tl) ? 1 : 0);\n+    c1 += tt;\n+    c2 += (c1 < tt) ? 1 : 0;\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1] += a */\n+inline void add2(limb_t& c0, limb_t& c1, limb_t& a)\n+{\n+    c0 += a;\n+    c1 += (c0 < a) ? 1 : 0;\n+}\n+\n+bool IsOverflow(const Num3072& d)\n+{\n+    if (d.limbs[0] <= std::numeric_limits<limb_t>::max() - MAX_PRIME_DIFF) return false;\n+    for (int i = 1; i < LIMBS; ++i) {\n+        if (d.limbs[i] != std::numeric_limits<limb_t>::max()) return false;\n+    }\n+    return true;\n+}\n+\n+void FullReduce(Num3072& d)\n+{\n+    limb_t c0 = MAX_PRIME_DIFF;\n+    for (int i = 0; i < LIMBS; ++i) {\n+        limb_t c1 = 0;\n+        add2(c0, c1, d.limbs[i]);\n+        extract2(c0, c1, d.limbs[i]);\n+    }\n+}\n+\n+void Multiply(Num3072& in_out, const Num3072& a)\n+{\n+    limb_t c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of in_out*a into tmp, including one reduction. */\n+    for (int j = 0; j < LIMBS - 1; ++j) {\n+        limb_t d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        mul(d0, d1, in_out.limbs[1 + j], a.limbs[LIMBS + j - (1 + j)]);\n+        for (int i = 2 + j; i < LIMBS; ++i) muladd3(d0, d1, d2, in_out.limbs[i], a.limbs[LIMBS + j - i]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < j + 1; ++i) muladd3(c0, c1, c2, in_out.limbs[i], a.limbs[j - i]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+\n+    /* Compute limb N-1 of a*b into tmp. */\n+    limb_t c2 = 0;\n+    for (int i = 0; i < LIMBS; ++i) muladd3(c0, c1, c2, in_out.limbs[i], a.limbs[LIMBS - 1 - i]);\n+    extract3(c0, c1, c2, tmp.limbs[LIMBS - 1]);\n+\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, in_out.limbs[j]);\n+    }\n+#ifdef DEBUG\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+#endif\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(in_out);\n+}\n+\n+void Square(Num3072& in_out)\n+{\n+    limb_t c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of in_out*in_out into tmp, including one reduction. */\n+    for (int j = 0; j < LIMBS - 1; ++j) {\n+        limb_t d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        for (int i = 0; i < (LIMBS - 1 - j) / 2; ++i) muldbladd3(d0, d1, d2, in_out.limbs[i + j + 1], in_out.limbs[LIMBS - 1 - i]);\n+        if ((j + 1) & 1) muladd3(d0, d1, d2, in_out.limbs[(LIMBS - 1 - j) / 2 + j + 1], in_out.limbs[LIMBS - 1 - (LIMBS - 1 - j) / 2]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < (j + 1) / 2; ++i) muldbladd3(c0, c1, c2, in_out.limbs[i], in_out.limbs[j - i]);\n+        if ((j + 1) & 1) muladd3(c0, c1, c2, in_out.limbs[(j + 1) / 2], in_out.limbs[j - (j + 1) / 2]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+\n+    limb_t c2 = 0;\n+    for (int i = 0; i < LIMBS / 2; ++i) muldbladd3(c0, c1, c2, in_out.limbs[i], in_out.limbs[LIMBS - 1 - i]);\n+    extract3(c0, c1, c2, tmp.limbs[LIMBS - 1]);\n+\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, in_out.limbs[j]);\n+    }\n+#ifdef DEBUG",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 204,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "b03e923c534a954edfdd9ef4ec9a68e5dd08d827",
      "in_reply_to_id": 507602363,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-19T21:55:19Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r508085622",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508085622"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 204,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508085686",
      "pull_request_review_id": 512188050,
      "id": 508085686,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA4NTY4Ng==",
      "diff_hunk": "@@ -0,0 +1,310 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_t MAX_PRIME_DIFF = 1103717;\n+\n+static constexpr size_t INPUT_SIZE = 32;\n+static constexpr size_t OUTPUT_SIZE = 384;\n+\n+using limb_t = Num3072::limb_t;\n+using double_limb_t = Num3072::double_limb_t;\n+constexpr int LIMB_SIZE = Num3072::LIMB_SIZE;\n+constexpr int LIMBS = Num3072::LIMBS;\n+\n+// Sanity check for Num3072 constants\n+static_assert(LIMB_SIZE * LIMBS == 3072, \"Num3072 isn't 3072 bits\");\n+static_assert(sizeof(double_limb_t) == sizeof(limb_t) * 2, \"bad size for double_limb_t\");\n+static_assert(sizeof(limb_t) * 8 == LIMB_SIZE, \"LIMB_SIZE is incorrect\");\n+\n+// Hard coded values in MuHash3072 constructor and Finalize\n+static_assert(sizeof(limb_t) == 4 || sizeof(limb_t) == 8, \"bad size for limb_t\");\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+inline void extract2(limb_t& c0, limb_t& c1, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(limb_t& c0, limb_t& c1, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    c1 = t >> LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& d0, limb_t& d1, limb_t& d2, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)d0 * n + c0;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)d1 * n + c1;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(limb_t& c0, limb_t& c1, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)c0 * n;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)c1 * n;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    limb_t tl, th;\n+\n+    double_limb_t t = (double_limb_t)a * b;\n+    th = t >> LIMB_SIZE;\n+    tl = t;\n+\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+inline void muldbladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    limb_t tl, th;\n+\n+    double_limb_t t = (double_limb_t)a * b;\n+    th = t >> LIMB_SIZE;\n+    tl = t;\n+\n+    c0 += tl;\n+    limb_t tt = th + ((c0 < tl) ? 1 : 0);\n+    c1 += tt;\n+    c2 += (c1 < tt) ? 1 : 0;\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1] += a */\n+inline void add2(limb_t& c0, limb_t& c1, limb_t& a)\n+{\n+    c0 += a;\n+    c1 += (c0 < a) ? 1 : 0;\n+}\n+\n+bool IsOverflow(const Num3072& d)\n+{\n+    if (d.limbs[0] <= std::numeric_limits<limb_t>::max() - MAX_PRIME_DIFF) return false;\n+    for (int i = 1; i < LIMBS; ++i) {\n+        if (d.limbs[i] != std::numeric_limits<limb_t>::max()) return false;\n+    }\n+    return true;\n+}\n+\n+void FullReduce(Num3072& d)\n+{\n+    limb_t c0 = MAX_PRIME_DIFF;\n+    for (int i = 0; i < LIMBS; ++i) {\n+        limb_t c1 = 0;\n+        add2(c0, c1, d.limbs[i]);\n+        extract2(c0, c1, d.limbs[i]);\n+    }\n+}\n+\n+void Multiply(Num3072& in_out, const Num3072& a)\n+{\n+    limb_t c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of in_out*a into tmp, including one reduction. */\n+    for (int j = 0; j < LIMBS - 1; ++j) {\n+        limb_t d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        mul(d0, d1, in_out.limbs[1 + j], a.limbs[LIMBS + j - (1 + j)]);\n+        for (int i = 2 + j; i < LIMBS; ++i) muladd3(d0, d1, d2, in_out.limbs[i], a.limbs[LIMBS + j - i]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < j + 1; ++i) muladd3(c0, c1, c2, in_out.limbs[i], a.limbs[j - i]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+\n+    /* Compute limb N-1 of a*b into tmp. */\n+    limb_t c2 = 0;\n+    for (int i = 0; i < LIMBS; ++i) muladd3(c0, c1, c2, in_out.limbs[i], a.limbs[LIMBS - 1 - i]);\n+    extract3(c0, c1, c2, tmp.limbs[LIMBS - 1]);\n+\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, in_out.limbs[j]);\n+    }\n+#ifdef DEBUG\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+#endif\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(in_out);\n+}\n+\n+void Square(Num3072& in_out)\n+{\n+    limb_t c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of in_out*in_out into tmp, including one reduction. */\n+    for (int j = 0; j < LIMBS - 1; ++j) {\n+        limb_t d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        for (int i = 0; i < (LIMBS - 1 - j) / 2; ++i) muldbladd3(d0, d1, d2, in_out.limbs[i + j + 1], in_out.limbs[LIMBS - 1 - i]);\n+        if ((j + 1) & 1) muladd3(d0, d1, d2, in_out.limbs[(LIMBS - 1 - j) / 2 + j + 1], in_out.limbs[LIMBS - 1 - (LIMBS - 1 - j) / 2]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < (j + 1) / 2; ++i) muldbladd3(c0, c1, c2, in_out.limbs[i], in_out.limbs[j - i]);\n+        if ((j + 1) & 1) muladd3(c0, c1, c2, in_out.limbs[(j + 1) / 2], in_out.limbs[j - (j + 1) / 2]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+\n+    limb_t c2 = 0;\n+    for (int i = 0; i < LIMBS / 2; ++i) muldbladd3(c0, c1, c2, in_out.limbs[i], in_out.limbs[LIMBS - 1 - i]);\n+    extract3(c0, c1, c2, tmp.limbs[LIMBS - 1]);\n+\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, in_out.limbs[j]);\n+    }\n+#ifdef DEBUG\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+#endif\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(in_out);\n+}\n+\n+void Inverse(Num3072& out, const Num3072& a)\n+{\n+    // For fast exponentiation a sliding window exponentiation with repunit\n+    // precomputation is utilized. See \"Fast Point Decompression for Standard\n+    // Elliptic Curves\" (Brumley, Järvinen, 2008).\n+\n+    Num3072 p[12]; // p[i] = a^(2^(2^i)-1)\n+    Num3072 x;",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 219,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "b03e923c534a954edfdd9ef4ec9a68e5dd08d827",
      "in_reply_to_id": 507598399,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-19T21:55:27Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r508085686",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508085686"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 219,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508085738",
      "pull_request_review_id": 512188112,
      "id": 508085738,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA4NTczOA==",
      "diff_hunk": "@@ -0,0 +1,310 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_t MAX_PRIME_DIFF = 1103717;\n+\n+static constexpr size_t INPUT_SIZE = 32;\n+static constexpr size_t OUTPUT_SIZE = 384;\n+\n+using limb_t = Num3072::limb_t;\n+using double_limb_t = Num3072::double_limb_t;\n+constexpr int LIMB_SIZE = Num3072::LIMB_SIZE;\n+constexpr int LIMBS = Num3072::LIMBS;\n+\n+// Sanity check for Num3072 constants\n+static_assert(LIMB_SIZE * LIMBS == 3072, \"Num3072 isn't 3072 bits\");\n+static_assert(sizeof(double_limb_t) == sizeof(limb_t) * 2, \"bad size for double_limb_t\");\n+static_assert(sizeof(limb_t) * 8 == LIMB_SIZE, \"LIMB_SIZE is incorrect\");\n+\n+// Hard coded values in MuHash3072 constructor and Finalize\n+static_assert(sizeof(limb_t) == 4 || sizeof(limb_t) == 8, \"bad size for limb_t\");\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+inline void extract2(limb_t& c0, limb_t& c1, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(limb_t& c0, limb_t& c1, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    c1 = t >> LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& d0, limb_t& d1, limb_t& d2, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)d0 * n + c0;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)d1 * n + c1;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(limb_t& c0, limb_t& c1, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)c0 * n;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)c1 * n;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    limb_t tl, th;\n+\n+    double_limb_t t = (double_limb_t)a * b;\n+    th = t >> LIMB_SIZE;\n+    tl = t;\n+\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+inline void muldbladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    limb_t tl, th;\n+\n+    double_limb_t t = (double_limb_t)a * b;\n+    th = t >> LIMB_SIZE;\n+    tl = t;\n+\n+    c0 += tl;\n+    limb_t tt = th + ((c0 < tl) ? 1 : 0);\n+    c1 += tt;\n+    c2 += (c1 < tt) ? 1 : 0;\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1] += a */\n+inline void add2(limb_t& c0, limb_t& c1, limb_t& a)\n+{\n+    c0 += a;\n+    c1 += (c0 < a) ? 1 : 0;\n+}\n+\n+bool IsOverflow(const Num3072& d)\n+{\n+    if (d.limbs[0] <= std::numeric_limits<limb_t>::max() - MAX_PRIME_DIFF) return false;\n+    for (int i = 1; i < LIMBS; ++i) {\n+        if (d.limbs[i] != std::numeric_limits<limb_t>::max()) return false;\n+    }\n+    return true;\n+}\n+\n+void FullReduce(Num3072& d)\n+{\n+    limb_t c0 = MAX_PRIME_DIFF;\n+    for (int i = 0; i < LIMBS; ++i) {\n+        limb_t c1 = 0;\n+        add2(c0, c1, d.limbs[i]);\n+        extract2(c0, c1, d.limbs[i]);\n+    }\n+}\n+\n+void Multiply(Num3072& in_out, const Num3072& a)\n+{\n+    limb_t c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of in_out*a into tmp, including one reduction. */\n+    for (int j = 0; j < LIMBS - 1; ++j) {\n+        limb_t d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        mul(d0, d1, in_out.limbs[1 + j], a.limbs[LIMBS + j - (1 + j)]);\n+        for (int i = 2 + j; i < LIMBS; ++i) muladd3(d0, d1, d2, in_out.limbs[i], a.limbs[LIMBS + j - i]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < j + 1; ++i) muladd3(c0, c1, c2, in_out.limbs[i], a.limbs[j - i]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+\n+    /* Compute limb N-1 of a*b into tmp. */\n+    limb_t c2 = 0;\n+    for (int i = 0; i < LIMBS; ++i) muladd3(c0, c1, c2, in_out.limbs[i], a.limbs[LIMBS - 1 - i]);\n+    extract3(c0, c1, c2, tmp.limbs[LIMBS - 1]);\n+\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, in_out.limbs[j]);\n+    }\n+#ifdef DEBUG\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+#endif\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(in_out);\n+}\n+\n+void Square(Num3072& in_out)\n+{\n+    limb_t c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of in_out*in_out into tmp, including one reduction. */\n+    for (int j = 0; j < LIMBS - 1; ++j) {\n+        limb_t d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        for (int i = 0; i < (LIMBS - 1 - j) / 2; ++i) muldbladd3(d0, d1, d2, in_out.limbs[i + j + 1], in_out.limbs[LIMBS - 1 - i]);\n+        if ((j + 1) & 1) muladd3(d0, d1, d2, in_out.limbs[(LIMBS - 1 - j) / 2 + j + 1], in_out.limbs[LIMBS - 1 - (LIMBS - 1 - j) / 2]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < (j + 1) / 2; ++i) muldbladd3(c0, c1, c2, in_out.limbs[i], in_out.limbs[j - i]);\n+        if ((j + 1) & 1) muladd3(c0, c1, c2, in_out.limbs[(j + 1) / 2], in_out.limbs[j - (j + 1) / 2]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+\n+    limb_t c2 = 0;\n+    for (int i = 0; i < LIMBS / 2; ++i) muldbladd3(c0, c1, c2, in_out.limbs[i], in_out.limbs[LIMBS - 1 - i]);\n+    extract3(c0, c1, c2, tmp.limbs[LIMBS - 1]);\n+\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, in_out.limbs[j]);\n+    }\n+#ifdef DEBUG\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+#endif\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(in_out);\n+}\n+\n+void Inverse(Num3072& out, const Num3072& a)\n+{\n+    // For fast exponentiation a sliding window exponentiation with repunit\n+    // precomputation is utilized. See \"Fast Point Decompression for Standard\n+    // Elliptic Curves\" (Brumley, Järvinen, 2008).\n+\n+    Num3072 p[12]; // p[i] = a^(2^(2^i)-1)\n+    Num3072 x;\n+\n+    p[0] = a;\n+\n+    for (int i = 0; i < 11; ++i) {\n+        p[i + 1] = p[i];\n+        for (int j = 0; j < (1 << i); ++j) Square(p[i + 1]);\n+        Multiply(p[i + 1], p[i]);\n+    }\n+\n+    x = p[11];\n+\n+    for (int j = 0; j < 512; ++j) Square(x);\n+    Multiply(x, p[9]);\n+    for (int j = 0; j < 256; ++j) Square(x);\n+    Multiply(x, p[8]);\n+    for (int j = 0; j < 128; ++j) Square(x);\n+    Multiply(x, p[7]);\n+    for (int j = 0; j < 64; ++j) Square(x);\n+    Multiply(x, p[6]);\n+    for (int j = 0; j < 32; ++j) Square(x);\n+    Multiply(x, p[5]);\n+    for (int j = 0; j < 8; ++j) Square(x);\n+    Multiply(x, p[3]);\n+    for (int j = 0; j < 2; ++j) Square(x);\n+    Multiply(x, p[1]);\n+    for (int j = 0; j < 1; ++j) Square(x);\n+    Multiply(x, p[0]);\n+    for (int j = 0; j < 5; ++j) Square(x);\n+    Multiply(x, p[2]);\n+    for (int j = 0; j < 3; ++j) Square(x);\n+    Multiply(x, p[0]);\n+    for (int j = 0; j < 2; ++j) Square(x);\n+    Multiply(x, p[0]);\n+    for (int j = 0; j < 4; ++j) Square(x);\n+    Multiply(x, p[0]);\n+    for (int j = 0; j < 4; ++j) Square(x);\n+    Multiply(x, p[1]);\n+    for (int j = 0; j < 3; ++j) Square(x);\n+    Multiply(x, p[0]);\n+\n+    out = x;\n+}\n+\n+} // namespace\n+\n+MuHash3072::MuHash3072() noexcept\n+{\n+    m_data.limbs[0] = 1;\n+    for (int i = 1; i < LIMBS; ++i) m_data.limbs[i] = 0;\n+}\n+\n+MuHash3072::MuHash3072(Span<const unsigned char> key32) noexcept\n+{\n+    assert(key32.size() == INPUT_SIZE);\n+    unsigned char tmp[OUTPUT_SIZE];\n+    ChaCha20(key32.data(), key32.size()).Keystream(tmp, OUTPUT_SIZE);\n+    for (int i = 0; i < LIMBS; ++i) {\n+        if (sizeof(limb_t) == 4) {\n+            m_data.limbs[i] = ReadLE32(tmp + 4 * i);\n+        } else if (sizeof(limb_t) == 8) {\n+            m_data.limbs[i] = ReadLE64(tmp + 8 * i);\n+        }\n+    }\n+}\n+\n+void MuHash3072::Finalize(Span<unsigned char> hash384) noexcept\n+{\n+    assert(hash384.size() == OUTPUT_SIZE);\n+    if (IsOverflow(m_data)) FullReduce(m_data);\n+    for (int i = 0; i < LIMBS; ++i) {\n+        if (sizeof(limb_t) == 4) {\n+            WriteLE32(hash384.data() + i * 4, m_data.limbs[i]);\n+        } else if (sizeof(limb_t) == 8) {\n+            WriteLE64(hash384.data() + i * 8, m_data.limbs[i]);\n+        }\n+    }\n+}\n+\n+MuHash3072& MuHash3072::operator*=(const MuHash3072& x) noexcept\n+{\n+    Multiply(m_data, x.m_data);\n+    return *this;\n+}\n+\n+MuHash3072& MuHash3072::operator/=(const MuHash3072& x) noexcept\n+{\n+    Num3072 tmp;\n+    Inverse(tmp, x.m_data);\n+    Multiply(this->m_data, tmp);",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 308,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "b03e923c534a954edfdd9ef4ec9a68e5dd08d827",
      "in_reply_to_id": 507596535,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-19T21:55:35Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r508085738",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508085738"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 308,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508085805",
      "pull_request_review_id": 512188193,
      "id": 508085805,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA4NTgwNQ==",
      "diff_hunk": "@@ -0,0 +1,310 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_t MAX_PRIME_DIFF = 1103717;\n+\n+static constexpr size_t INPUT_SIZE = 32;\n+static constexpr size_t OUTPUT_SIZE = 384;\n+\n+using limb_t = Num3072::limb_t;\n+using double_limb_t = Num3072::double_limb_t;\n+constexpr int LIMB_SIZE = Num3072::LIMB_SIZE;\n+constexpr int LIMBS = Num3072::LIMBS;\n+\n+// Sanity check for Num3072 constants\n+static_assert(LIMB_SIZE * LIMBS == 3072, \"Num3072 isn't 3072 bits\");\n+static_assert(sizeof(double_limb_t) == sizeof(limb_t) * 2, \"bad size for double_limb_t\");\n+static_assert(sizeof(limb_t) * 8 == LIMB_SIZE, \"LIMB_SIZE is incorrect\");\n+\n+// Hard coded values in MuHash3072 constructor and Finalize\n+static_assert(sizeof(limb_t) == 4 || sizeof(limb_t) == 8, \"bad size for limb_t\");\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+inline void extract2(limb_t& c0, limb_t& c1, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(limb_t& c0, limb_t& c1, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    c1 = t >> LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& d0, limb_t& d1, limb_t& d2, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)d0 * n + c0;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)d1 * n + c1;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(limb_t& c0, limb_t& c1, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)c0 * n;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)c1 * n;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    limb_t tl, th;",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 87,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "b03e923c534a954edfdd9ef4ec9a68e5dd08d827",
      "in_reply_to_id": 507593683,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-19T21:55:40Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r508085805",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508085805"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 87,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508085835",
      "pull_request_review_id": 512188227,
      "id": 508085835,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA4NTgzNQ==",
      "diff_hunk": "@@ -0,0 +1,310 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_t MAX_PRIME_DIFF = 1103717;\n+\n+static constexpr size_t INPUT_SIZE = 32;\n+static constexpr size_t OUTPUT_SIZE = 384;",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 21,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "b03e923c534a954edfdd9ef4ec9a68e5dd08d827",
      "in_reply_to_id": 507593284,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-19T21:55:46Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r508085835",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508085835"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": 20,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 21,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508085917",
      "pull_request_review_id": 512188328,
      "id": 508085917,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA4NTkxNw==",
      "diff_hunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <serialize.h>\n+\n+#include <stdint.h>\n+\n+struct Num3072 {\n+#ifdef HAVE___INT128\n+    typedef unsigned __int128 double_limb_t;\n+    typedef uint64_t limb_t;\n+    static constexpr int LIMBS = 48;\n+    static constexpr int LIMB_SIZE = 64;\n+#else\n+    typedef uint64_t double_limb_t;\n+    typedef uint32_t limb_t;\n+    static constexpr int LIMBS = 96;\n+    static constexpr int LIMB_SIZE = 32;\n+#endif\n+    limb_t limbs[LIMBS];\n+};\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_t MAX_PRIME_DIFF = 1103717;\n+\n+/** A class representing MuHash sets\n+ *\n+ * MuHash is a hashing algorithm that supports adding set elements in any\n+ * order but also deleting in any order. As a result, it can maintain a\n+ * running sum for a set of data as a whole, and add/subtract when data\n+ * is added to or removed from it. A downside of MuHash is that computing\n+ * an inverse is relatively expensive. This can be solved by representing\n+ * the running value as a fraction, and multiplying added elements into\n+ * the numerator and removed elements into the denominator. Only when the\n+ * final hash is desired, a single modular inverse and multiplication is\n+ * needed to combine the two.\n+ *\n+ * TODO: Represent running value as a fraction to allow for more intuitive\n+ * use (see above).\n+ *\n+ * As the update operations are also associative, H(a)+H(b)+H(c)+H(d) can\n+ * in fact be computed as (H(a)+H(b)) + (H(c)+H(d)). This implies that\n+ * all of this is perfectly parallellizable: each thread can process an\n+ * arbitrary subset of the update operations, allowing them to be\n+ * efficiently combined later.\n+ *\n+ * Muhash does not support checking if an element is already part of the\n+ * set. That is why this class does not enforce the use of a set as the\n+ * data it represents because there is no efficient way to do so..\n+ * It is possible to add elements more than once and also to remove\n+ * elements that have not been added before. However, this implementation\n+ * is intended to represent a set of elements.\n+ *\n+ * See also https://cseweb.ucsd.edu/~mihir/papers/inchash.pdf and\n+ * https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014337.html.\n+ */\n+class MuHash3072\n+{\n+protected:\n+    Num3072 data;\n+\n+    static constexpr size_t INPUT_SIZE = 32;\n+    static constexpr size_t OUTPUT_SIZE = 384;\n+\n+public:\n+    /* The empty set. */\n+    MuHash3072() noexcept;\n+\n+    /* A singleton with a single 32-byte key in it. */\n+    explicit MuHash3072(Span<const unsigned char> key32) noexcept;\n+\n+    /* Multiply (resulting in a hash for the union of the sets) */\n+    MuHash3072& operator*=(const MuHash3072& add) noexcept;",
      "path": "src/crypto/muhash.h",
      "position": null,
      "original_position": 81,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "e19e50013478c6b7066aa2c9f7e0d0ee7219e837",
      "in_reply_to_id": 507184333,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hm, yeah, with the operators in mind that naming makes more sense. Changed to `mul` and `div`.",
      "created_at": "2020-10-19T21:55:57Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r508085917",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508085917"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508093977",
      "pull_request_review_id": 512198120,
      "id": 508093977,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA5Mzk3Nw==",
      "diff_hunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <serialize.h>\n+\n+#include <stdint.h>\n+\n+struct Num3072 {\n+#ifdef HAVE___INT128",
      "path": "src/crypto/muhash.h",
      "position": 26,
      "original_position": 17,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "e19e50013478c6b7066aa2c9f7e0d0ee7219e837",
      "in_reply_to_id": 507173583,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Benchmarks on my machine with and without `__int128` (values hardcoded instead) show a significant speedup:\r\n\r\nWith `__int128`:\r\n```\r\n|               ns/op |                op/s |    err% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------:|:----------\r\n|            3,313.23 |          301,820.21 |    0.1% |      0.00 | `MuHash`\r\n|            2,544.00 |          393,081.76 |    0.1% |      0.00 | `MuHashAdd`\r\n|        5,385,923.00 |              185.67 |    1.7% |      0.06 | `MuHashDiv`\r\n|              752.12 |        1,329,566.23 |    0.1% |      0.00 | `MuHashPrecompute`\r\n```\r\n\r\nWithout `__int128`:\r\n```\r\n|               ns/op |                op/s |    err% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------:|:----------\r\n|           10,692.00 |           93,527.87 |    0.1% |      0.00 | `MuHash`\r\n|           10,279.00 |           97,285.73 |    0.2% |      0.00 | `MuHashAdd`\r\n|       27,921,963.00 |               35.81 |    2.2% |      0.32 | `MuHashDiv`\r\n|              931.21 |        1,073,873.55 |    2.6% |      0.00 | `MuHashPrecompute`\r\n```",
      "created_at": "2020-10-19T22:15:12Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r508093977",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508093977"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 26,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508256703",
      "pull_request_review_id": 512388914,
      "id": 508256703,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI1NjcwMw==",
      "diff_hunk": "@@ -0,0 +1,310 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_t MAX_PRIME_DIFF = 1103717;\n+\n+static constexpr size_t INPUT_SIZE = 32;\n+static constexpr size_t OUTPUT_SIZE = 384;\n+\n+using limb_t = Num3072::limb_t;\n+using double_limb_t = Num3072::double_limb_t;\n+constexpr int LIMB_SIZE = Num3072::LIMB_SIZE;\n+constexpr int LIMBS = Num3072::LIMBS;\n+\n+// Sanity check for Num3072 constants\n+static_assert(LIMB_SIZE * LIMBS == 3072, \"Num3072 isn't 3072 bits\");\n+static_assert(sizeof(double_limb_t) == sizeof(limb_t) * 2, \"bad size for double_limb_t\");\n+static_assert(sizeof(limb_t) * 8 == LIMB_SIZE, \"LIMB_SIZE is incorrect\");\n+\n+// Hard coded values in MuHash3072 constructor and Finalize\n+static_assert(sizeof(limb_t) == 4 || sizeof(limb_t) == 8, \"bad size for limb_t\");\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+inline void extract2(limb_t& c0, limb_t& c1, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(limb_t& c0, limb_t& c1, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    c1 = t >> LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& d0, limb_t& d1, limb_t& d2, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)d0 * n + c0;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)d1 * n + c1;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(limb_t& c0, limb_t& c1, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)c0 * n;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)c1 * n;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    limb_t tl, th;",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 87,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "b03e923c534a954edfdd9ef4ec9a68e5dd08d827",
      "in_reply_to_id": 507593683,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Same in other functions below.\r\n\r\nLooks like you missed these.",
      "created_at": "2020-10-20T07:05:48Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r508256703",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508256703"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 87,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508264086",
      "pull_request_review_id": 512398415,
      "id": 508264086,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI2NDA4Ng==",
      "diff_hunk": "@@ -0,0 +1,307 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "b29a0fde8784b7574a987dfb037a988b442bf92b",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No need for a blank line here. These are all standard library includes and can be grouped together (as well as using the C++ header names):\r\n\r\n```suggestion\r\n#include <cassert>\r\n#include <cstdio>\r\n#include <limits>\r\n```",
      "created_at": "2020-10-20T07:19:17Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r508264086",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508264086"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": 10,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 13,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508264443",
      "pull_request_review_id": 512398415,
      "id": 508264443,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI2NDQ0Mw==",
      "diff_hunk": "@@ -0,0 +1,307 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "b29a0fde8784b7574a987dfb037a988b442bf92b",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "'next' from what? Is this just the largest 3072 bit safe prime number?",
      "created_at": "2020-10-20T07:19:53Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r508264443",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508264443"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508275969",
      "pull_request_review_id": 512398415,
      "id": 508275969,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI3NTk2OQ==",
      "diff_hunk": "@@ -0,0 +1,307 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_t MAX_PRIME_DIFF = 1103717;\n+\n+constexpr size_t INPUT_SIZE = 32;\n+constexpr size_t OUTPUT_SIZE = 384;\n+\n+using limb_t = Num3072::limb_t;\n+using double_limb_t = Num3072::double_limb_t;\n+constexpr int LIMB_SIZE = Num3072::LIMB_SIZE;\n+constexpr int LIMBS = Num3072::LIMBS;\n+\n+// Sanity check for Num3072 constants\n+static_assert(LIMB_SIZE * LIMBS == 3072, \"Num3072 isn't 3072 bits\");\n+static_assert(sizeof(double_limb_t) == sizeof(limb_t) * 2, \"bad size for double_limb_t\");\n+static_assert(sizeof(limb_t) * 8 == LIMB_SIZE, \"LIMB_SIZE is incorrect\");\n+\n+// Hard coded values in MuHash3072 constructor and Finalize\n+static_assert(sizeof(limb_t) == 4 || sizeof(limb_t) == 8, \"bad size for limb_t\");\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+inline void extract2(limb_t& c0, limb_t& c1, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(limb_t& c0, limb_t& c1, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    c1 = t >> LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& d0, limb_t& d1, limb_t& d2, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)d0 * n + c0;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)d1 * n + c1;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(limb_t& c0, limb_t& c1, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)c0 * n;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)c1 * n;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    limb_t th = t >> LIMB_SIZE;\n+    limb_t tl = t;\n+\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+inline void muldbladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    limb_t tl, th;\n+\n+    double_limb_t t = (double_limb_t)a * b;\n+    th = t >> LIMB_SIZE;\n+    tl = t;\n+\n+    c0 += tl;\n+    limb_t tt = th + ((c0 < tl) ? 1 : 0);\n+    c1 += tt;\n+    c2 += (c1 < tt) ? 1 : 0;\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1] += a */\n+inline void add2(limb_t& c0, limb_t& c1, limb_t& a)",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 117,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "b29a0fde8784b7574a987dfb037a988b442bf92b",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`limb_t& a` can be const, to indicate that it's an in-param (as is done for the in-params in the other helper functions)",
      "created_at": "2020-10-20T07:39:32Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r508275969",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508275969"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 117,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508277075",
      "pull_request_review_id": 512398415,
      "id": 508277075,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI3NzA3NQ==",
      "diff_hunk": "@@ -0,0 +1,307 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_t MAX_PRIME_DIFF = 1103717;\n+\n+constexpr size_t INPUT_SIZE = 32;\n+constexpr size_t OUTPUT_SIZE = 384;\n+\n+using limb_t = Num3072::limb_t;\n+using double_limb_t = Num3072::double_limb_t;\n+constexpr int LIMB_SIZE = Num3072::LIMB_SIZE;\n+constexpr int LIMBS = Num3072::LIMBS;\n+\n+// Sanity check for Num3072 constants\n+static_assert(LIMB_SIZE * LIMBS == 3072, \"Num3072 isn't 3072 bits\");\n+static_assert(sizeof(double_limb_t) == sizeof(limb_t) * 2, \"bad size for double_limb_t\");\n+static_assert(sizeof(limb_t) * 8 == LIMB_SIZE, \"LIMB_SIZE is incorrect\");\n+\n+// Hard coded values in MuHash3072 constructor and Finalize\n+static_assert(sizeof(limb_t) == 4 || sizeof(limb_t) == 8, \"bad size for limb_t\");\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+inline void extract2(limb_t& c0, limb_t& c1, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(limb_t& c0, limb_t& c1, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    c1 = t >> LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& d0, limb_t& d1, limb_t& d2, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)d0 * n + c0;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)d1 * n + c1;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(limb_t& c0, limb_t& c1, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)c0 * n;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)c1 * n;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    limb_t th = t >> LIMB_SIZE;\n+    limb_t tl = t;\n+\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+inline void muldbladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    limb_t tl, th;\n+\n+    double_limb_t t = (double_limb_t)a * b;\n+    th = t >> LIMB_SIZE;\n+    tl = t;\n+\n+    c0 += tl;\n+    limb_t tt = th + ((c0 < tl) ? 1 : 0);\n+    c1 += tt;\n+    c2 += (c1 < tt) ? 1 : 0;\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1] += a */\n+inline void add2(limb_t& c0, limb_t& c1, limb_t& a)\n+{\n+    c0 += a;\n+    c1 += (c0 < a) ? 1 : 0;",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 120,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "b29a0fde8784b7574a987dfb037a988b442bf92b",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this function can overflow. If c1 is limb_t::max, and c0 + a overflows, then c1 + 1 overflows and the top bit is lost.",
      "created_at": "2020-10-20T07:41:16Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r508277075",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508277075"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": 119,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 101,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508277430",
      "pull_request_review_id": 512398415,
      "id": 508277430,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI3NzQzMA==",
      "diff_hunk": "@@ -0,0 +1,310 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_t MAX_PRIME_DIFF = 1103717;\n+\n+static constexpr size_t INPUT_SIZE = 32;\n+static constexpr size_t OUTPUT_SIZE = 384;\n+\n+using limb_t = Num3072::limb_t;\n+using double_limb_t = Num3072::double_limb_t;\n+constexpr int LIMB_SIZE = Num3072::LIMB_SIZE;\n+constexpr int LIMBS = Num3072::LIMBS;\n+\n+// Sanity check for Num3072 constants\n+static_assert(LIMB_SIZE * LIMBS == 3072, \"Num3072 isn't 3072 bits\");\n+static_assert(sizeof(double_limb_t) == sizeof(limb_t) * 2, \"bad size for double_limb_t\");\n+static_assert(sizeof(limb_t) * 8 == LIMB_SIZE, \"LIMB_SIZE is incorrect\");\n+\n+// Hard coded values in MuHash3072 constructor and Finalize\n+static_assert(sizeof(limb_t) == 4 || sizeof(limb_t) == 8, \"bad size for limb_t\");\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+inline void extract2(limb_t& c0, limb_t& c1, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(limb_t& c0, limb_t& c1, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    c1 = t >> LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& d0, limb_t& d1, limb_t& d2, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)d0 * n + c0;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)d1 * n + c1;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(limb_t& c0, limb_t& c1, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)c0 * n;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)c1 * n;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    limb_t tl, th;\n+\n+    double_limb_t t = (double_limb_t)a * b;\n+    th = t >> LIMB_SIZE;\n+    tl = t;\n+\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+inline void muldbladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    limb_t tl, th;\n+\n+    double_limb_t t = (double_limb_t)a * b;\n+    th = t >> LIMB_SIZE;\n+    tl = t;\n+\n+    c0 += tl;\n+    limb_t tt = th + ((c0 < tl) ? 1 : 0);\n+    c1 += tt;\n+    c2 += (c1 < tt) ? 1 : 0;\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1] += a */\n+inline void add2(limb_t& c0, limb_t& c1, limb_t& a)",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 119,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "b03e923c534a954edfdd9ef4ec9a68e5dd08d827",
      "in_reply_to_id": 507610270,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "My suggestion was to merge `add2()` and `extract2()` since they're always called as a pair.",
      "created_at": "2020-10-20T07:41:52Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r508277430",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508277430"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 117,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508284709",
      "pull_request_review_id": 512398415,
      "id": 508284709,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI4NDcwOQ==",
      "diff_hunk": "@@ -0,0 +1,307 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_t MAX_PRIME_DIFF = 1103717;\n+\n+constexpr size_t INPUT_SIZE = 32;\n+constexpr size_t OUTPUT_SIZE = 384;\n+\n+using limb_t = Num3072::limb_t;\n+using double_limb_t = Num3072::double_limb_t;\n+constexpr int LIMB_SIZE = Num3072::LIMB_SIZE;\n+constexpr int LIMBS = Num3072::LIMBS;\n+\n+// Sanity check for Num3072 constants\n+static_assert(LIMB_SIZE * LIMBS == 3072, \"Num3072 isn't 3072 bits\");\n+static_assert(sizeof(double_limb_t) == sizeof(limb_t) * 2, \"bad size for double_limb_t\");\n+static_assert(sizeof(limb_t) * 8 == LIMB_SIZE, \"LIMB_SIZE is incorrect\");\n+\n+// Hard coded values in MuHash3072 constructor and Finalize\n+static_assert(sizeof(limb_t) == 4 || sizeof(limb_t) == 8, \"bad size for limb_t\");\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+inline void extract2(limb_t& c0, limb_t& c1, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(limb_t& c0, limb_t& c1, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    c1 = t >> LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& d0, limb_t& d1, limb_t& d2, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)d0 * n + c0;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)d1 * n + c1;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(limb_t& c0, limb_t& c1, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)c0 * n;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)c1 * n;\n+    c1 = t;\n+    t >>= LIMB_SIZE;",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 81,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "b29a0fde8784b7574a987dfb037a988b442bf92b",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`t` is a local variable so is dropped immediately after this bitshift.",
      "created_at": "2020-10-20T07:53:23Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r508284709",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508284709"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508817012",
      "pull_request_review_id": 513105518,
      "id": 508817012,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgxNzAxMg==",
      "diff_hunk": "@@ -0,0 +1,307 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_t MAX_PRIME_DIFF = 1103717;\n+\n+constexpr size_t INPUT_SIZE = 32;\n+constexpr size_t OUTPUT_SIZE = 384;\n+\n+using limb_t = Num3072::limb_t;\n+using double_limb_t = Num3072::double_limb_t;\n+constexpr int LIMB_SIZE = Num3072::LIMB_SIZE;\n+constexpr int LIMBS = Num3072::LIMBS;\n+\n+// Sanity check for Num3072 constants\n+static_assert(LIMB_SIZE * LIMBS == 3072, \"Num3072 isn't 3072 bits\");\n+static_assert(sizeof(double_limb_t) == sizeof(limb_t) * 2, \"bad size for double_limb_t\");\n+static_assert(sizeof(limb_t) * 8 == LIMB_SIZE, \"LIMB_SIZE is incorrect\");\n+\n+// Hard coded values in MuHash3072 constructor and Finalize\n+static_assert(sizeof(limb_t) == 4 || sizeof(limb_t) == 8, \"bad size for limb_t\");\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+inline void extract2(limb_t& c0, limb_t& c1, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(limb_t& c0, limb_t& c1, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    c1 = t >> LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& d0, limb_t& d1, limb_t& d2, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)d0 * n + c0;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)d1 * n + c1;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(limb_t& c0, limb_t& c1, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)c0 * n;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)c1 * n;\n+    c1 = t;\n+    t >>= LIMB_SIZE;",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 81,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "b29a0fde8784b7574a987dfb037a988b442bf92b",
      "in_reply_to_id": 508284709,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removed",
      "created_at": "2020-10-20T20:26:41Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r508817012",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508817012"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508817120",
      "pull_request_review_id": 513105652,
      "id": 508817120,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgxNzEyMA==",
      "diff_hunk": "@@ -0,0 +1,307 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_t MAX_PRIME_DIFF = 1103717;\n+\n+constexpr size_t INPUT_SIZE = 32;\n+constexpr size_t OUTPUT_SIZE = 384;\n+\n+using limb_t = Num3072::limb_t;\n+using double_limb_t = Num3072::double_limb_t;\n+constexpr int LIMB_SIZE = Num3072::LIMB_SIZE;\n+constexpr int LIMBS = Num3072::LIMBS;\n+\n+// Sanity check for Num3072 constants\n+static_assert(LIMB_SIZE * LIMBS == 3072, \"Num3072 isn't 3072 bits\");\n+static_assert(sizeof(double_limb_t) == sizeof(limb_t) * 2, \"bad size for double_limb_t\");\n+static_assert(sizeof(limb_t) * 8 == LIMB_SIZE, \"LIMB_SIZE is incorrect\");\n+\n+// Hard coded values in MuHash3072 constructor and Finalize\n+static_assert(sizeof(limb_t) == 4 || sizeof(limb_t) == 8, \"bad size for limb_t\");\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+inline void extract2(limb_t& c0, limb_t& c1, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(limb_t& c0, limb_t& c1, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    c1 = t >> LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& d0, limb_t& d1, limb_t& d2, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)d0 * n + c0;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)d1 * n + c1;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(limb_t& c0, limb_t& c1, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)c0 * n;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)c1 * n;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    limb_t th = t >> LIMB_SIZE;\n+    limb_t tl = t;\n+\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+inline void muldbladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    limb_t tl, th;\n+\n+    double_limb_t t = (double_limb_t)a * b;\n+    th = t >> LIMB_SIZE;\n+    tl = t;\n+\n+    c0 += tl;\n+    limb_t tt = th + ((c0 < tl) ? 1 : 0);\n+    c1 += tt;\n+    c2 += (c1 < tt) ? 1 : 0;\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1] += a */\n+inline void add2(limb_t& c0, limb_t& c1, limb_t& a)",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 117,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "b29a0fde8784b7574a987dfb037a988b442bf92b",
      "in_reply_to_id": 508275969,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-20T20:26:55Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r508817120",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508817120"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 117,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508817390",
      "pull_request_review_id": 513105889,
      "id": 508817390,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgxNzM5MA==",
      "diff_hunk": "@@ -0,0 +1,307 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "b29a0fde8784b7574a987dfb037a988b442bf92b",
      "in_reply_to_id": 508264443,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Weird, I don't know how that made it in there, removed `next`",
      "created_at": "2020-10-20T20:27:15Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r508817390",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508817390"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508817491",
      "pull_request_review_id": 513105982,
      "id": 508817491,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgxNzQ5MQ==",
      "diff_hunk": "@@ -0,0 +1,307 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "b29a0fde8784b7574a987dfb037a988b442bf92b",
      "in_reply_to_id": 508264086,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-20T20:27:23Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r508817491",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/508817491"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": 10,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 13,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509130310",
      "pull_request_review_id": 513482761,
      "id": 509130310,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEzMDMxMA==",
      "diff_hunk": "@@ -0,0 +1,303 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <cassert>\n+#include <cstdio>\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_t MAX_PRIME_DIFF = 1103717;\n+\n+constexpr size_t INPUT_SIZE = 32;\n+constexpr size_t OUTPUT_SIZE = 384;\n+\n+using limb_t = Num3072::limb_t;\n+using double_limb_t = Num3072::double_limb_t;\n+constexpr int LIMB_SIZE = Num3072::LIMB_SIZE;\n+constexpr int LIMBS = Num3072::LIMBS;\n+\n+// Sanity check for Num3072 constants\n+static_assert(LIMB_SIZE * LIMBS == 3072, \"Num3072 isn't 3072 bits\");\n+static_assert(sizeof(double_limb_t) == sizeof(limb_t) * 2, \"bad size for double_limb_t\");\n+static_assert(sizeof(limb_t) * 8 == LIMB_SIZE, \"LIMB_SIZE is incorrect\");\n+\n+// Hard coded values in MuHash3072 constructor and Finalize\n+static_assert(sizeof(limb_t) == 4 || sizeof(limb_t) == 8, \"bad size for limb_t\");\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+inline void extract2(limb_t& c0, limb_t& c1, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(limb_t& c0, limb_t& c1, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    c1 = t >> LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& d0, limb_t& d1, limb_t& d2, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)d0 * n + c0;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)d1 * n + c1;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(limb_t& c0, limb_t& c1, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)c0 * n;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)c1 * n;\n+    c1 = t;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    limb_t th = t >> LIMB_SIZE;\n+    limb_t tl = t;\n+\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+inline void muldbladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    limb_t th = t >> LIMB_SIZE;\n+    limb_t tl = t;\n+\n+    c0 += tl;\n+    limb_t tt = th + ((c0 < tl) ? 1 : 0);\n+    c1 += tt;\n+    c2 += (c1 < tt) ? 1 : 0;\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1] += a */\n+inline void add2(limb_t& c0, limb_t& c1, const limb_t& a)\n+{\n+    c0 += a;\n+    c1 += (c0 < a) ? 1 : 0;\n+}\n+\n+bool IsOverflow(const Num3072& d)",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 119,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "96a8d80f7ba43fd608984543d6bc6905f696529f",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This function name is slightly confusing. This isn't returning whether the number has overflown the range that can be expressed in a Num3072. It's returning whether the number d is greater than the group order g and can therefore be reduced to a congruent value < g. I'd suggest renaming the function to `IsReduceable()` or `CanReduce()`, and commenting what the function is doing.",
      "created_at": "2020-10-21T09:29:38Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r509130310",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509130310"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509142040",
      "pull_request_review_id": 513482761,
      "id": 509142040,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE0MjA0MA==",
      "diff_hunk": "@@ -0,0 +1,303 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <cassert>\n+#include <cstdio>\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_t MAX_PRIME_DIFF = 1103717;\n+\n+constexpr size_t INPUT_SIZE = 32;\n+constexpr size_t OUTPUT_SIZE = 384;\n+\n+using limb_t = Num3072::limb_t;\n+using double_limb_t = Num3072::double_limb_t;\n+constexpr int LIMB_SIZE = Num3072::LIMB_SIZE;\n+constexpr int LIMBS = Num3072::LIMBS;\n+\n+// Sanity check for Num3072 constants\n+static_assert(LIMB_SIZE * LIMBS == 3072, \"Num3072 isn't 3072 bits\");\n+static_assert(sizeof(double_limb_t) == sizeof(limb_t) * 2, \"bad size for double_limb_t\");\n+static_assert(sizeof(limb_t) * 8 == LIMB_SIZE, \"LIMB_SIZE is incorrect\");\n+\n+// Hard coded values in MuHash3072 constructor and Finalize\n+static_assert(sizeof(limb_t) == 4 || sizeof(limb_t) == 8, \"bad size for limb_t\");\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+inline void extract2(limb_t& c0, limb_t& c1, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(limb_t& c0, limb_t& c1, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    c1 = t >> LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& d0, limb_t& d1, limb_t& d2, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)d0 * n + c0;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)d1 * n + c1;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(limb_t& c0, limb_t& c1, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)c0 * n;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)c1 * n;\n+    c1 = t;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    limb_t th = t >> LIMB_SIZE;\n+    limb_t tl = t;\n+\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+inline void muldbladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    limb_t th = t >> LIMB_SIZE;\n+    limb_t tl = t;\n+\n+    c0 += tl;\n+    limb_t tt = th + ((c0 < tl) ? 1 : 0);\n+    c1 += tt;\n+    c2 += (c1 < tt) ? 1 : 0;\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1] += a */\n+inline void add2(limb_t& c0, limb_t& c1, const limb_t& a)\n+{\n+    c0 += a;\n+    c1 += (c0 < a) ? 1 : 0;\n+}\n+\n+bool IsOverflow(const Num3072& d)\n+{\n+    if (d.limbs[0] <= std::numeric_limits<limb_t>::max() - MAX_PRIME_DIFF) return false;\n+    for (int i = 1; i < LIMBS; ++i) {\n+        if (d.limbs[i] != std::numeric_limits<limb_t>::max()) return false;\n+    }\n+    return true;\n+}\n+\n+void FullReduce(Num3072& d)",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 128,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "96a8d80f7ba43fd608984543d6bc6905f696529f",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This could also use a comment. We call this function in two places:\r\n\r\n1. After `IsOverflow` where `x ∈ [g, MAX_NUM3072)`. In this case`FullReduce(x)` adds `MAX_PRIME_DIFF` to `x` and overflows Num3072, so `FullReduce(x) = x + MAX_PRIME_DIFF - MAX_NUM3072 = x - g`, which is congruent to x and is in `[0, g)`\r\n\r\n2. After `if (c0)` i.e. where x has overflown and `x = MAX_NUM3072 + d`. In this case `FullReduce(d)` adds `MAX_PRIME_DIFF` to `d`, so `x = MAX_NUM3072 + FullReduce(d) - MAX_PRIME_DIFF`, which means that `FullReduce(d)` and `x` are congruent. I think there _may_ be a bug here if `d ∈ [g, MAX_NUM3072)`, i.e. if the `FullReduce()` function overflows. That would make `x = MAX_NUM3072 + FullReduce(d) - MAX_PRIME_DIFF + MAX_NUM3072` so `x` and `FullReduce(d)` are not congruent.",
      "created_at": "2020-10-21T09:47:33Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r509142040",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509142040"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 128,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509144274",
      "pull_request_review_id": 513482761,
      "id": 509144274,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE0NDI3NA==",
      "diff_hunk": "@@ -0,0 +1,303 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <cassert>\n+#include <cstdio>\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_t MAX_PRIME_DIFF = 1103717;\n+\n+constexpr size_t INPUT_SIZE = 32;\n+constexpr size_t OUTPUT_SIZE = 384;\n+\n+using limb_t = Num3072::limb_t;\n+using double_limb_t = Num3072::double_limb_t;\n+constexpr int LIMB_SIZE = Num3072::LIMB_SIZE;\n+constexpr int LIMBS = Num3072::LIMBS;\n+\n+// Sanity check for Num3072 constants\n+static_assert(LIMB_SIZE * LIMBS == 3072, \"Num3072 isn't 3072 bits\");\n+static_assert(sizeof(double_limb_t) == sizeof(limb_t) * 2, \"bad size for double_limb_t\");\n+static_assert(sizeof(limb_t) * 8 == LIMB_SIZE, \"LIMB_SIZE is incorrect\");\n+\n+// Hard coded values in MuHash3072 constructor and Finalize\n+static_assert(sizeof(limb_t) == 4 || sizeof(limb_t) == 8, \"bad size for limb_t\");\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+inline void extract2(limb_t& c0, limb_t& c1, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(limb_t& c0, limb_t& c1, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    c1 = t >> LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& d0, limb_t& d1, limb_t& d2, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)d0 * n + c0;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)d1 * n + c1;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(limb_t& c0, limb_t& c1, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)c0 * n;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)c1 * n;\n+    c1 = t;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    limb_t th = t >> LIMB_SIZE;\n+    limb_t tl = t;\n+\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+inline void muldbladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    limb_t th = t >> LIMB_SIZE;\n+    limb_t tl = t;\n+\n+    c0 += tl;\n+    limb_t tt = th + ((c0 < tl) ? 1 : 0);\n+    c1 += tt;\n+    c2 += (c1 < tt) ? 1 : 0;\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1] += a */\n+inline void add2(limb_t& c0, limb_t& c1, const limb_t& a)\n+{\n+    c0 += a;\n+    c1 += (c0 < a) ? 1 : 0;\n+}\n+\n+bool IsOverflow(const Num3072& d)\n+{\n+    if (d.limbs[0] <= std::numeric_limits<limb_t>::max() - MAX_PRIME_DIFF) return false;\n+    for (int i = 1; i < LIMBS; ++i) {\n+        if (d.limbs[i] != std::numeric_limits<limb_t>::max()) return false;\n+    }\n+    return true;\n+}\n+\n+void FullReduce(Num3072& d)\n+{\n+    limb_t c0 = MAX_PRIME_DIFF;\n+    for (int i = 0; i < LIMBS; ++i) {\n+        limb_t c1 = 0;\n+        add2(c0, c1, d.limbs[i]);\n+        extract2(c0, c1, d.limbs[i]);\n+    }\n+}\n+\n+void Multiply(Num3072& in_out, const Num3072& a)\n+{\n+    limb_t c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of in_out*a into tmp, including one reduction. */\n+    for (int j = 0; j < LIMBS - 1; ++j) {\n+        limb_t d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        mul(d0, d1, in_out.limbs[1 + j], a.limbs[LIMBS + j - (1 + j)]);\n+        for (int i = 2 + j; i < LIMBS; ++i) muladd3(d0, d1, d2, in_out.limbs[i], a.limbs[LIMBS + j - i]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < j + 1; ++i) muladd3(c0, c1, c2, in_out.limbs[i], a.limbs[j - i]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+\n+    /* Compute limb N-1 of a*b into tmp. */\n+    limb_t c2 = 0;",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 154,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "96a8d80f7ba43fd608984543d6bc6905f696529f",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "slightly confusing to have `c0` and `c1` declared at the top of the function, and `c2` declared both in the for block above here and again here. Perhaps move this declaration to the top too and reuse the variable. `c2` is always zero after `extract3()`, but you could assert that here to be clear.",
      "created_at": "2020-10-21T09:51:11Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r509144274",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509144274"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509145379",
      "pull_request_review_id": 513482761,
      "id": 509145379,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE0NTM3OQ==",
      "diff_hunk": "@@ -0,0 +1,303 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <cassert>\n+#include <cstdio>\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_t MAX_PRIME_DIFF = 1103717;\n+\n+constexpr size_t INPUT_SIZE = 32;\n+constexpr size_t OUTPUT_SIZE = 384;\n+\n+using limb_t = Num3072::limb_t;\n+using double_limb_t = Num3072::double_limb_t;\n+constexpr int LIMB_SIZE = Num3072::LIMB_SIZE;\n+constexpr int LIMBS = Num3072::LIMBS;\n+\n+// Sanity check for Num3072 constants\n+static_assert(LIMB_SIZE * LIMBS == 3072, \"Num3072 isn't 3072 bits\");\n+static_assert(sizeof(double_limb_t) == sizeof(limb_t) * 2, \"bad size for double_limb_t\");\n+static_assert(sizeof(limb_t) * 8 == LIMB_SIZE, \"LIMB_SIZE is incorrect\");\n+\n+// Hard coded values in MuHash3072 constructor and Finalize\n+static_assert(sizeof(limb_t) == 4 || sizeof(limb_t) == 8, \"bad size for limb_t\");\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+inline void extract2(limb_t& c0, limb_t& c1, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(limb_t& c0, limb_t& c1, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    c1 = t >> LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& d0, limb_t& d1, limb_t& d2, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)d0 * n + c0;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)d1 * n + c1;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(limb_t& c0, limb_t& c1, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)c0 * n;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)c1 * n;\n+    c1 = t;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    limb_t th = t >> LIMB_SIZE;\n+    limb_t tl = t;\n+\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+inline void muldbladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    limb_t th = t >> LIMB_SIZE;\n+    limb_t tl = t;\n+\n+    c0 += tl;\n+    limb_t tt = th + ((c0 < tl) ? 1 : 0);\n+    c1 += tt;\n+    c2 += (c1 < tt) ? 1 : 0;\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1] += a */\n+inline void add2(limb_t& c0, limb_t& c1, const limb_t& a)\n+{\n+    c0 += a;\n+    c1 += (c0 < a) ? 1 : 0;\n+}\n+\n+bool IsOverflow(const Num3072& d)\n+{\n+    if (d.limbs[0] <= std::numeric_limits<limb_t>::max() - MAX_PRIME_DIFF) return false;\n+    for (int i = 1; i < LIMBS; ++i) {\n+        if (d.limbs[i] != std::numeric_limits<limb_t>::max()) return false;\n+    }\n+    return true;\n+}\n+\n+void FullReduce(Num3072& d)\n+{\n+    limb_t c0 = MAX_PRIME_DIFF;\n+    for (int i = 0; i < LIMBS; ++i) {\n+        limb_t c1 = 0;\n+        add2(c0, c1, d.limbs[i]);\n+        extract2(c0, c1, d.limbs[i]);\n+    }\n+}\n+\n+void Multiply(Num3072& in_out, const Num3072& a)\n+{\n+    limb_t c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of in_out*a into tmp, including one reduction. */\n+    for (int j = 0; j < LIMBS - 1; ++j) {\n+        limb_t d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        mul(d0, d1, in_out.limbs[1 + j], a.limbs[LIMBS + j - (1 + j)]);\n+        for (int i = 2 + j; i < LIMBS; ++i) muladd3(d0, d1, d2, in_out.limbs[i], a.limbs[LIMBS + j - i]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < j + 1; ++i) muladd3(c0, c1, c2, in_out.limbs[i], a.limbs[j - i]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+\n+    /* Compute limb N-1 of a*b into tmp. */\n+    limb_t c2 = 0;\n+    for (int i = 0; i < LIMBS; ++i) muladd3(c0, c1, c2, in_out.limbs[i], a.limbs[LIMBS - 1 - i]);\n+    extract3(c0, c1, c2, tmp.limbs[LIMBS - 1]);\n+\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, in_out.limbs[j]);\n+    }\n+\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(in_out);\n+}\n+\n+void Square(Num3072& in_out)\n+{\n+    limb_t c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of in_out*in_out into tmp, including one reduction. */\n+    for (int j = 0; j < LIMBS - 1; ++j) {\n+        limb_t d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        for (int i = 0; i < (LIMBS - 1 - j) / 2; ++i) muldbladd3(d0, d1, d2, in_out.limbs[i + j + 1], in_out.limbs[LIMBS - 1 - i]);\n+        if ((j + 1) & 1) muladd3(d0, d1, d2, in_out.limbs[(LIMBS - 1 - j) / 2 + j + 1], in_out.limbs[LIMBS - 1 - (LIMBS - 1 - j) / 2]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < (j + 1) / 2; ++i) muldbladd3(c0, c1, c2, in_out.limbs[i], in_out.limbs[j - i]);\n+        if ((j + 1) & 1) muladd3(c0, c1, c2, in_out.limbs[(j + 1) / 2], in_out.limbs[j - (j + 1) / 2]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+\n+    limb_t c2 = 0;",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 188,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "96a8d80f7ba43fd608984543d6bc6905f696529f",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Same as above. Any reason not to declare this `c2` at the top and reuse the variable?",
      "created_at": "2020-10-21T09:52:49Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r509145379",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509145379"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509149688",
      "pull_request_review_id": 513482761,
      "id": 509149688,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE0OTY4OA==",
      "diff_hunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <serialize.h>\n+\n+#include <stdint.h>\n+\n+struct Num3072 {\n+#ifdef HAVE___INT128",
      "path": "src/crypto/muhash.h",
      "position": 26,
      "original_position": 17,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "e19e50013478c6b7066aa2c9f7e0d0ee7219e837",
      "in_reply_to_id": 507173583,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That's almost exactly a 4x speedup for add and >5x speedup for div. Seems worthwhile!",
      "created_at": "2020-10-21T09:59:37Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r509149688",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509149688"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 26,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509153295",
      "pull_request_review_id": 513482761,
      "id": 509153295,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE1MzI5NQ==",
      "diff_hunk": "@@ -105,6 +106,70 @@ static void FastRandom_1bit(benchmark::Bench& bench)\n     });\n }\n \n+static void MuHash(benchmark::Bench& bench)\n+{\n+    FastRandomContext rng(true);\n+    MuHash3072 acc;\n+    unsigned char key[32] = {0};\n+    int i = 0;\n+    bench.run([&] {\n+        key[0] = ++i;\n+        acc *= MuHash3072(key);\n+    });\n+}\n+\n+static void MuHashAdd(benchmark::Bench& bench)",
      "path": "src/bench/crypto_hash.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "96a8d80f7ba43fd608984543d6bc6905f696529f",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Change this to `MuHashMul()`?",
      "created_at": "2020-10-21T10:05:12Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r509153295",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509153295"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 121,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509153543",
      "pull_request_review_id": 513482761,
      "id": 509153543,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE1MzU0Mw==",
      "diff_hunk": "@@ -105,6 +106,70 @@ static void FastRandom_1bit(benchmark::Bench& bench)\n     });\n }\n \n+static void MuHash(benchmark::Bench& bench)\n+{\n+    FastRandomContext rng(true);",
      "path": "src/bench/crypto_hash.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "96a8d80f7ba43fd608984543d6bc6905f696529f",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`rng` is unused. Remove it.",
      "created_at": "2020-10-21T10:05:37Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r509153543",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509153543"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 111,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509155449",
      "pull_request_review_id": 513482761,
      "id": 509155449,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE1NTQ0OQ==",
      "diff_hunk": "@@ -105,6 +106,70 @@ static void FastRandom_1bit(benchmark::Bench& bench)\n     });\n }\n \n+static void MuHash(benchmark::Bench& bench)\n+{\n+    FastRandomContext rng(true);\n+    MuHash3072 acc;\n+    unsigned char key[32] = {0};\n+    int i = 0;\n+    bench.run([&] {\n+        key[0] = ++i;\n+        acc *= MuHash3072(key);\n+    });\n+}\n+\n+static void MuHashAdd(benchmark::Bench& bench)\n+{\n+    FastRandomContext rng(true);\n+    MuHash3072 acc;\n+    unsigned char key[32];\n+    std::vector<unsigned char> randkey = rng.randbytes(32);\n+    for (size_t i = 0; i < randkey.size(); ++i) {\n+        key[i] = randkey[i];\n+    }\n+\n+    MuHash3072 muhash = MuHash3072(key);\n+    bench.run([&] {\n+        acc *= muhash;\n+    });\n+}\n+\n+static void MuHashDiv(benchmark::Bench& bench)\n+{\n+    FastRandomContext rng(true);\n+    MuHash3072 acc;\n+    unsigned char key[32];\n+    std::vector<unsigned char> randkey = rng.randbytes(32);\n+    for (size_t i = 0; i < randkey.size(); ++i) {\n+        key[i] = randkey[i];\n+    }\n+\n+    MuHash3072 muhash = MuHash3072(key);\n+\n+    for (size_t i = 0; i < bench.epochIterations(); ++i) {\n+        acc *= muhash;\n+    }\n+",
      "path": "src/bench/crypto_hash.cpp",
      "position": 43,
      "original_position": 55,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "96a8d80f7ba43fd608984543d6bc6905f696529f",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think this is needed. There's nothing wrong with dividing by elements that aren't in the muhash.",
      "created_at": "2020-10-21T10:08:51Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r509155449",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509155449"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": 137,
      "original_start_line": 149,
      "start_side": "RIGHT",
      "line": 140,
      "original_line": 140,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509161865",
      "pull_request_review_id": 513482761,
      "id": 509161865,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE2MTg2NQ==",
      "diff_hunk": "@@ -105,6 +106,70 @@ static void FastRandom_1bit(benchmark::Bench& bench)\n     });\n }\n \n+static void MuHash(benchmark::Bench& bench)\n+{\n+    FastRandomContext rng(true);\n+    MuHash3072 acc;\n+    unsigned char key[32] = {0};\n+    int i = 0;\n+    bench.run([&] {\n+        key[0] = ++i;\n+        acc *= MuHash3072(key);\n+    });\n+}\n+\n+static void MuHashAdd(benchmark::Bench& bench)\n+{\n+    FastRandomContext rng(true);\n+    MuHash3072 acc;\n+    unsigned char key[32];\n+    std::vector<unsigned char> randkey = rng.randbytes(32);\n+    for (size_t i = 0; i < randkey.size(); ++i) {\n+        key[i] = randkey[i];\n+    }\n+\n+    MuHash3072 muhash = MuHash3072(key);",
      "path": "src/bench/crypto_hash.cpp",
      "position": null,
      "original_position": 34,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "96a8d80f7ba43fd608984543d6bc6905f696529f",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The temporary array and vector variables are unnecessary here. The MuHash constructor takes a span, so we can just call it directly with the rvalue vector from randbytes().\r\n\r\n```suggestion\r\n    MuHash3072 acc;\r\n    FastRandomContext rng(true);\r\n    MuHash3072 muhash{rng.randbytes(32)};\r\n\r\n```\r\n\r\nSame in the other functions below.\r\n",
      "created_at": "2020-10-21T10:19:32Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r509161865",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509161865"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": 123,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 131,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509163922",
      "pull_request_review_id": 513482761,
      "id": 509163922,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE2MzkyMg==",
      "diff_hunk": "@@ -857,4 +859,88 @@ BOOST_AUTO_TEST_CASE(sha3_256_tests)\n     TestSHA3_256(\"72c57c359e10684d0517e46653a02d18d29eff803eb009e4d5eb9e95add9ad1a4ac1f38a70296f3a369a16985ca3c957de2084cdc9bdd8994eb59b8815e0debad4ec1f001feac089820db8becdaf896aaf95721e8674e5d476b43bd2b873a7d135cd685f545b438210f9319e4dcd55986c85303c1ddf18dc746fe63a409df0a998ed376eb683e16c09e6e9018504152b3e7628ef350659fb716e058a5263a18823d2f2f6ee6a8091945a48ae1c5cb1694cf2c1fe76ef9177953afe8899cfa2b7fe0603bfa3180937dadfb66fbbdd119bbf8063338aa4a699075a3bfdbae8db7e5211d0917e9665a702fc9b0a0a901d08bea97654162d82a9f05622b060b634244779c33427eb7a29353a5f48b07cbefa72f3622ac5900bef77b71d6b314296f304c8426f451f32049b1f6af156a9dab702e8907d3cd72bb2c50493f4d593e731b285b70c803b74825b3524cda3205a8897106615260ac93c01c5ec14f5b11127783989d1824527e99e04f6a340e827b559f24db9292fcdd354838f9339a5fa1d7f6b2087f04835828b13463dd40927866f16ae33ed501ec0e6c4e63948768c5aeea3e4f6754985954bea7d61088c44430204ef491b74a64bde1358cecb2cad28ee6a3de5b752ff6a051104d88478653339457ac45ba44cbb65f54d1969d047cda746931d5e6a8b48e211416aefd5729f3d60b56b54e7f85aa2f42de3cb69419240c24e67139a11790a709edef2ac52cf35dd0a08af45926ebe9761f498ff83bfe263d6897ee97943a4b982fe3404ef0b4a45e06113c60340e0664f14799bf59cb4b3934b465fabefd87155905ee5309ba41e9e402973311831ea600b16437f71df39ee77130490c4d0227e5d1757fdc66af3ae6b9953053ed9aafca0160209858a7d4dd38fe10e0cb153672d08633ed6c54977aa0a6e67f9ff2f8c9d22dd7b21de08192960fd0e0da68d77c8d810db11dcaa61c725cd4092cbff76c8e1debd8d0361bb3f2e607911d45716f53067bdc0d89dd4889177765166a424e9fc0cb711201099dda213355e6639ac7eb86eca2ae0ab38b7f674f37ef8a6fcca1a6f52f55d9e1dcd631d2c3c82bba129172feb991d5af51afecd9d61a88b6832e4107480e392aed61a8644f551665ebff6b20953b635737a4f895e429fddcfe801f606fbda74b3bf6f5767d0fac14907fcfd0aa1d4c11b9e91b01d68052399b51a29f1ae6acd965109977c14a555cbcbd21ad8cb9f8853506d4bc21c01e62d61d7b21be1b923be54914e6b0a7ca84dd11f1159193e1184568a6134a6bbadf5b4df986edcf2019390ae841cfaa44435e28ce877d3dae4177992fa5d4e5c005876dbe3d1e63bec7dcc0942762b48b1ecc6c1a918409a8a72812a1e245c0c67be6e729c2b49bc6ee4d24a8f63e78e75db45655c26a9a78aff36fcd67117f26b8f654dca664b9f0e30681874cb749e1a692720078856286c2560b0292cc837933423147569350955c9571bf8941ba128fd339cb4268f46b94bc6ee203eb7026813706ea51c4f24c91866fc23a724bf2501327e6ae89c29f8db315dc28d2c7c719514036367e018f4835f63fdecd71f9bdced7132b6c4f8b13c69a517026fcd3622d67cb632320d5e7308f78f4b7cea11f6291b137851dc6cd6366f2785c71c3f237f81a7658b2a8d512b61e0ad5a4710b7b124151689fcb2116063fbff7e9115fed7b93de834970b838e49f8f8ba5f1f874c354078b5810a55ae289a56da563f1da6cd80a3757d6073fa55e016e45ac6cec1f69d871c92fd0ae9670c74249045e6b464787f9504128736309fed205f8df4d90e332908581298d9c75a3fa36ab0c3c9272e62de53ab290c803d67b696fd615c260a47bffad16746f18ba1a10a061bacbea9369693b3c042eec36bed289d7d12e52bca8aa1c2dff88ca7816498d25626d0f1e106ebb0b4a12138e00f3df5b1c2f49d98b1756e69b641b7c6353d99dbff050f4d76842c6cf1c2a4b062fc8e6336fa689b7c9d5c6b4ab8c15a5c20e514ff070a602d85ae52fa7810c22f8eeffd34a095b93342144f7a98d024216b3d68ed7bea047517bfcd83ec83febd1ba0e5858e2bdc1d8b1f7b0f89e90ccc432a3f930cb8209462e64556c5054c56ca2a85f16b32eb83a10459d13516faa4d23302b7607b9bd38dab2239ac9e9440c314433fdfb3ceadab4b4f87415ed6f240e017221f3b5f7ac196cdf54957bec42fe6893994b46de3d27dc7fb58ca88feb5b9e79cf20053d12530ac524337b22a3629bea52f40b06d3e2128f32060f9105847daed81d35f20e2002817434659baff64494c5b5c7f9216bfda38412a0f70511159dc73bb6bae1f8eaa0ef08d99bcb31f94f6be12c29c83df45926430b366c99fca3270c15fc4056398fdf3135b7779e3066a006961d1ac0ad1c83179ce39e87a96b722ec23aabc065badf3e188347a360772ca6a447abac7e6a44f0d4632d52926332e44a0a86bff5ce699fd063bdda3ffd4c41b53ded49fecec67f40599b934e16e3fd1bc063ad7026f8d71bfd4cbaf56599586774723194b692036f1b6bb242e2ffb9c600b5215b412764599476ce475c9e5b396fbcebd6be323dcf4d0048077400aac7500db41dc95fc7f7edbe7c9c2ec5ea89943fe13b42217eef530bbd023671509e12dfce4e1c1c82955d965e6a68aa66f6967dba48feda572db1f099d9a6dc4bc8edade852b5e824a06890dc48a6a6510ecaf8cf7620d757290e3166d431abecc624fa9ac2234d2eb783308ead45544910c633a94964b2ef5fbc409cb8835ac4147d384e12e0a5e13951f7de0ee13eafcb0ca0c04946d7804040c0a3cd088352424b097adb7aad1ca4495952f3e6c0158c02d2bcec33bfda69301434a84d9027ce02c0b9725dad118\", \"d894b86261436362e64241e61f6b3e6589daf64dc641f60570c4c0bf3b1f2ca3\");\n }\n \n+static MuHash3072 FromInt(unsigned char i) {\n+    unsigned char tmp[32] = {i, 0};\n+    return MuHash3072(tmp);\n+}\n+\n+BOOST_AUTO_TEST_CASE(muhash_tests)\n+{\n+    unsigned char out[384];\n+\n+    for (int iter = 0; iter < 10; ++iter) {\n+        unsigned char res[384];\n+        int table[4];\n+        for (int i = 0; i < 4; ++i) {\n+            table[i] = g_insecure_rand_ctx.randbits(3);\n+        }\n+        for (int order = 0; order < 4; ++order) {\n+            MuHash3072 acc;\n+            for (int i = 0; i < 4; ++i) {\n+                int t = table[i ^ order];\n+                if (t & 4) {\n+                    acc /= FromInt(t & 3);\n+                } else {\n+                    acc *= FromInt(t & 3);\n+                }\n+            }\n+            acc.Finalize(out);\n+            if (order == 0) {\n+                memcpy(res, out, 384);\n+            } else {\n+                BOOST_CHECK(memcmp(res, out, 384) == 0);\n+            }\n+        }\n+\n+        MuHash3072 x = FromInt(g_insecure_rand_ctx.randbits(4)); // x=X\n+        MuHash3072 y = FromInt(g_insecure_rand_ctx.randbits(4)); // x=X, y=Y\n+        MuHash3072 z; // x=X, y=Y, z=1\n+        z *= x; // x=X, y=Y, z=X\n+        z *= y; // x=X, y=Y, z=X*Y\n+        y *= x; // x=X, y=Y*X, z=X*Y\n+        z /= y; // x=X, y=Y*X, z=1\n+        z.Finalize(out);\n+        for (int i = 0; i < 384; ++i) {\n+            BOOST_CHECK_EQUAL(out[i], i == 0);\n+        }\n+    }\n+\n+    MuHash3072 acc = FromInt(0);\n+    acc *= FromInt(1);\n+    acc /= FromInt(2);\n+    acc.Finalize(out);\n+    uint256 x = (CHashWriter(SER_DISK, 0) << out).GetSHA256();\n+    BOOST_CHECK(x == uint256S(\"a44e16d5e34d259b349af21c06e65d653915d2e208e4e03f389af750dc0bfdc3\"));\n+\n+    // Test MuHash3072 serialization\n+    MuHash3072 serchk = FromInt(1); serchk *= FromInt(2);\n+    std::string ser_exp = \"ad5d5a19c789b21f95f9c2a09f264f8aab4ef29ca30824f7330a8c3f4c61c25a6035bc27476ade3a38f2f2bc576bfbeabdf69641a91b99631ef904d37103eff744129842b1fd83158db6466ab4b752278f04add175a7a41ab8ea1305f66855068730dd3baf1ad29d6e13c7ba3350864a8f96e2e9e5c1ca65e11ab3e361184213a3fb395ac5c86efe3997c671cc5d46df3e1b2f00bf09120ae252a0e985b2452be64d5f626c0bc03747355d91ff2aa31ea4087797b91c80af5003d4b3a2ba5c34cd4a8785712897cd2331bac1b749e4fe9d17a5bb68395e2571d1759dceb5609dfae38ec6186e8c2eb22ffeb9bb8330083ee15d4b816e117e6bc1399c707b3e9d01ae74d2f589d6eb8e9e58c572088476e0444e3dbc05c95867acdb7c18be551e0eb2189d3c39dd86dbc844dc70ac33f9328be9e3b0d792bb359498f5fb385e2d8a8e3a5cde7e3e4e8ba123d3e1eda0b859d3a56e548dd6d23a03ce82e01493f96a67abd3109f9f4315c966f8cba311d71899c04a7fd9618ed028580ffcd21263\";\n+    CDataStream ss_chk(SER_DISK, PROTOCOL_VERSION);\n+    ss_chk << serchk;\n+    BOOST_CHECK_EQUAL(ser_exp, HexStr(ss_chk.str()));\n+\n+    // Test MuHash3072 deserialization\n+    MuHash3072 deserchk;\n+    ss_chk >> deserchk;\n+    unsigned char out2[384];\n+    serchk.Finalize(out);\n+    deserchk.Finalize(out2);\n+    BOOST_CHECK_EQUAL(HexStr(out), HexStr(out2));\n+\n+    // Test MuHash3072 overflow\n+    class MuHashOverflow : public MuHash3072 {",
      "path": "src/test/crypto_tests.cpp",
      "position": null,
      "original_position": 83,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "96a8d80f7ba43fd608984543d6bc6905f696529f",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Again, this isn't actually overflowing the data type in MuHash. It's simply reducing a number greater than the group order into its least residue. Consider renaming this function/class.",
      "created_at": "2020-10-21T10:23:00Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r509163922",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509163922"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": 930,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 933,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509396869",
      "pull_request_review_id": 513830820,
      "id": 509396869,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM5Njg2OQ==",
      "diff_hunk": "@@ -0,0 +1,310 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_t MAX_PRIME_DIFF = 1103717;\n+\n+static constexpr size_t INPUT_SIZE = 32;\n+static constexpr size_t OUTPUT_SIZE = 384;\n+\n+using limb_t = Num3072::limb_t;\n+using double_limb_t = Num3072::double_limb_t;\n+constexpr int LIMB_SIZE = Num3072::LIMB_SIZE;\n+constexpr int LIMBS = Num3072::LIMBS;\n+\n+// Sanity check for Num3072 constants\n+static_assert(LIMB_SIZE * LIMBS == 3072, \"Num3072 isn't 3072 bits\");\n+static_assert(sizeof(double_limb_t) == sizeof(limb_t) * 2, \"bad size for double_limb_t\");\n+static_assert(sizeof(limb_t) * 8 == LIMB_SIZE, \"LIMB_SIZE is incorrect\");\n+\n+// Hard coded values in MuHash3072 constructor and Finalize\n+static_assert(sizeof(limb_t) == 4 || sizeof(limb_t) == 8, \"bad size for limb_t\");\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+inline void extract2(limb_t& c0, limb_t& c1, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(limb_t& c0, limb_t& c1, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    c1 = t >> LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& d0, limb_t& d1, limb_t& d2, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)d0 * n + c0;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)d1 * n + c1;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(limb_t& c0, limb_t& c1, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)c0 * n;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)c1 * n;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    limb_t tl, th;",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 87,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "b03e923c534a954edfdd9ef4ec9a68e5dd08d827",
      "in_reply_to_id": 507593683,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Initally yes, should be done now.",
      "created_at": "2020-10-21T15:42:24Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r509396869",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509396869"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 87,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509469267",
      "pull_request_review_id": 513994729,
      "id": 509469267,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ2OTI2Nw==",
      "diff_hunk": "@@ -0,0 +1,303 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <cassert>\n+#include <cstdio>\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_t MAX_PRIME_DIFF = 1103717;\n+\n+constexpr size_t INPUT_SIZE = 32;\n+constexpr size_t OUTPUT_SIZE = 384;\n+\n+using limb_t = Num3072::limb_t;\n+using double_limb_t = Num3072::double_limb_t;\n+constexpr int LIMB_SIZE = Num3072::LIMB_SIZE;\n+constexpr int LIMBS = Num3072::LIMBS;\n+\n+// Sanity check for Num3072 constants\n+static_assert(LIMB_SIZE * LIMBS == 3072, \"Num3072 isn't 3072 bits\");\n+static_assert(sizeof(double_limb_t) == sizeof(limb_t) * 2, \"bad size for double_limb_t\");\n+static_assert(sizeof(limb_t) * 8 == LIMB_SIZE, \"LIMB_SIZE is incorrect\");\n+\n+// Hard coded values in MuHash3072 constructor and Finalize\n+static_assert(sizeof(limb_t) == 4 || sizeof(limb_t) == 8, \"bad size for limb_t\");\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+inline void extract2(limb_t& c0, limb_t& c1, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(limb_t& c0, limb_t& c1, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    c1 = t >> LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& d0, limb_t& d1, limb_t& d2, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)d0 * n + c0;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)d1 * n + c1;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(limb_t& c0, limb_t& c1, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)c0 * n;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)c1 * n;\n+    c1 = t;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    limb_t th = t >> LIMB_SIZE;\n+    limb_t tl = t;\n+\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+inline void muldbladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    limb_t th = t >> LIMB_SIZE;\n+    limb_t tl = t;\n+\n+    c0 += tl;\n+    limb_t tt = th + ((c0 < tl) ? 1 : 0);\n+    c1 += tt;\n+    c2 += (c1 < tt) ? 1 : 0;\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1] += a */\n+inline void add2(limb_t& c0, limb_t& c1, const limb_t& a)\n+{\n+    c0 += a;\n+    c1 += (c0 < a) ? 1 : 0;\n+}\n+\n+bool IsOverflow(const Num3072& d)",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 119,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "96a8d80f7ba43fd608984543d6bc6905f696529f",
      "in_reply_to_id": 509130310,
      "user": {
        "login": "real-or-random",
        "id": 1071625,
        "node_id": "MDQ6VXNlcjEwNzE2MjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/real-or-random",
        "html_url": "https://github.com/real-or-random",
        "followers_url": "https://api.github.com/users/real-or-random/followers",
        "following_url": "https://api.github.com/users/real-or-random/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/real-or-random/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/real-or-random/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
        "organizations_url": "https://api.github.com/users/real-or-random/orgs",
        "repos_url": "https://api.github.com/users/real-or-random/repos",
        "events_url": "https://api.github.com/users/real-or-random/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/real-or-random/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hm, we use the same \"overflow\" terminology in secp256k1. The idea is that Num3072 represents a number in the range 0 to group order, so when it's larger it has overflown this range. (Idk, this may be a matter of taste...)\r\n\r\n\"IsReduceable()\" sounds also confusing to me. You can reduce a reduced number, it just won't change.",
      "created_at": "2020-10-21T17:21:47Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r509469267",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509469267"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509602615",
      "pull_request_review_id": 514102355,
      "id": 509602615,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTYwMjYxNQ==",
      "diff_hunk": "@@ -0,0 +1,303 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <cassert>\n+#include <cstdio>\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the largest 3072-bit safe prime number, is used as the order of the group. */",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "96a8d80f7ba43fd608984543d6bc6905f696529f",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "s/order of the group/modulus/\r\n\r\n(the order of the group is 2^3072 - 1103717 - 1, since 0 isn't in the multiplicative group)",
      "created_at": "2020-10-21T19:17:16Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r509602615",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509602615"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509942735",
      "pull_request_review_id": 514438343,
      "id": 509942735,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk0MjczNQ==",
      "diff_hunk": "@@ -0,0 +1,303 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <cassert>\n+#include <cstdio>\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_t MAX_PRIME_DIFF = 1103717;\n+\n+constexpr size_t INPUT_SIZE = 32;\n+constexpr size_t OUTPUT_SIZE = 384;\n+\n+using limb_t = Num3072::limb_t;\n+using double_limb_t = Num3072::double_limb_t;\n+constexpr int LIMB_SIZE = Num3072::LIMB_SIZE;\n+constexpr int LIMBS = Num3072::LIMBS;\n+\n+// Sanity check for Num3072 constants\n+static_assert(LIMB_SIZE * LIMBS == 3072, \"Num3072 isn't 3072 bits\");\n+static_assert(sizeof(double_limb_t) == sizeof(limb_t) * 2, \"bad size for double_limb_t\");\n+static_assert(sizeof(limb_t) * 8 == LIMB_SIZE, \"LIMB_SIZE is incorrect\");\n+\n+// Hard coded values in MuHash3072 constructor and Finalize\n+static_assert(sizeof(limb_t) == 4 || sizeof(limb_t) == 8, \"bad size for limb_t\");\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+inline void extract2(limb_t& c0, limb_t& c1, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(limb_t& c0, limb_t& c1, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    c1 = t >> LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& d0, limb_t& d1, limb_t& d2, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)d0 * n + c0;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)d1 * n + c1;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(limb_t& c0, limb_t& c1, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)c0 * n;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)c1 * n;\n+    c1 = t;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    limb_t th = t >> LIMB_SIZE;\n+    limb_t tl = t;\n+\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+inline void muldbladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    limb_t th = t >> LIMB_SIZE;\n+    limb_t tl = t;\n+\n+    c0 += tl;\n+    limb_t tt = th + ((c0 < tl) ? 1 : 0);\n+    c1 += tt;\n+    c2 += (c1 < tt) ? 1 : 0;\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1] += a */\n+inline void add2(limb_t& c0, limb_t& c1, const limb_t& a)\n+{\n+    c0 += a;\n+    c1 += (c0 < a) ? 1 : 0;\n+}\n+\n+bool IsOverflow(const Num3072& d)",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 119,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "96a8d80f7ba43fd608984543d6bc6905f696529f",
      "in_reply_to_id": 509130310,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah, I didn't realise that 'overflow' was the terminology used for \"d is larger than the modulus\". I suppose `IsNotLeastResidue()` would be most accurate, but as long as the terminology overflow is used consistently, I think just a comment is enough here.",
      "created_at": "2020-10-22T07:37:01Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r509942735",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509942735"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/510232044",
      "pull_request_review_id": 514823186,
      "id": 510232044,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDIzMjA0NA==",
      "diff_hunk": "@@ -0,0 +1,91 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <serialize.h>\n+\n+#include <stdint.h>\n+\n+struct Num3072 {\n+#ifdef HAVE___INT128\n+    typedef unsigned __int128 double_limb_t;\n+    typedef uint64_t limb_t;\n+    static constexpr int LIMBS = 48;\n+    static constexpr int LIMB_SIZE = 64;\n+#else\n+    typedef uint64_t double_limb_t;\n+    typedef uint32_t limb_t;\n+    static constexpr int LIMBS = 96;\n+    static constexpr int LIMB_SIZE = 32;\n+#endif\n+    limb_t limbs[LIMBS];\n+};\n+\n+/** A class representing MuHash sets\n+ *\n+ * MuHash is a hashing algorithm that supports adding set elements in any\n+ * order but also deleting in any order. As a result, it can maintain a\n+ * running sum for a set of data as a whole, and add/subtract when data\n+ * is added to or removed from it. A downside of MuHash is that computing\n+ * an inverse is relatively expensive. This can be solved by representing\n+ * the running value as a fraction, and multiplying added elements into\n+ * the numerator and removed elements into the denominator. Only when the\n+ * final hash is desired, a single modular inverse and multiplication is\n+ * needed to combine the two.\n+ *\n+ * TODO: Represent running value as a fraction to allow for more intuitive\n+ * use (see above).\n+ *\n+ * As the update operations are also associative, H(a)+H(b)+H(c)+H(d) can\n+ * in fact be computed as (H(a)+H(b)) + (H(c)+H(d)). This implies that\n+ * all of this is perfectly parallellizable: each thread can process an\n+ * arbitrary subset of the update operations, allowing them to be\n+ * efficiently combined later.\n+ *\n+ * Muhash does not support checking if an element is already part of the\n+ * set. That is why this class does not enforce the use of a set as the\n+ * data it represents because there is no efficient way to do so.\n+ * It is possible to add elements more than once and also to remove\n+ * elements that have not been added before. However, this implementation\n+ * is intended to represent a set of elements.\n+ *\n+ * See also https://cseweb.ucsd.edu/~mihir/papers/inchash.pdf and\n+ * https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014337.html.\n+ */\n+class MuHash3072",
      "path": "src/crypto/muhash.h",
      "position": 91,
      "original_position": 62,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "96a8d80f7ba43fd608984543d6bc6905f696529f",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This does seem like a strange interface: both high-level (the user doesn't need to know/worry about the chacha20 operation) and low-level (the user needs to apply a truncated SHA-512 to all inputs, track numerator and denominator when doing a bulk update, and SHA256 the finalized 3072-bit output). I think it makes sense to refactor this so that there are two classes:\r\n\r\n- a Num3072 class that is simply a 3072 bit wide integer that supports setting and reading limbs and multiplication/division modulo p.\r\n- a MuHash3072 class that internally has a numerator and denominator, accepts arbitrary length inputs, supports set addition/subraction, and finalizes to a 256 bit digest.\r\n\r\nSee https://bitcoincore.reviews/19055-2#l-159.",
      "created_at": "2020-10-22T14:58:12Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r510232044",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/510232044"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 91,
      "original_line": 91,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/510265495",
      "pull_request_review_id": 514867918,
      "id": 510265495,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI2NTQ5NQ==",
      "diff_hunk": "@@ -0,0 +1,91 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <serialize.h>\n+\n+#include <stdint.h>\n+\n+struct Num3072 {\n+#ifdef HAVE___INT128\n+    typedef unsigned __int128 double_limb_t;\n+    typedef uint64_t limb_t;\n+    static constexpr int LIMBS = 48;\n+    static constexpr int LIMB_SIZE = 64;\n+#else\n+    typedef uint64_t double_limb_t;\n+    typedef uint32_t limb_t;\n+    static constexpr int LIMBS = 96;\n+    static constexpr int LIMB_SIZE = 32;\n+#endif\n+    limb_t limbs[LIMBS];\n+};\n+\n+/** A class representing MuHash sets\n+ *\n+ * MuHash is a hashing algorithm that supports adding set elements in any\n+ * order but also deleting in any order. As a result, it can maintain a\n+ * running sum for a set of data as a whole, and add/subtract when data\n+ * is added to or removed from it. A downside of MuHash is that computing\n+ * an inverse is relatively expensive. This can be solved by representing\n+ * the running value as a fraction, and multiplying added elements into\n+ * the numerator and removed elements into the denominator. Only when the\n+ * final hash is desired, a single modular inverse and multiplication is\n+ * needed to combine the two.\n+ *\n+ * TODO: Represent running value as a fraction to allow for more intuitive\n+ * use (see above).\n+ *\n+ * As the update operations are also associative, H(a)+H(b)+H(c)+H(d) can\n+ * in fact be computed as (H(a)+H(b)) + (H(c)+H(d)). This implies that\n+ * all of this is perfectly parallellizable: each thread can process an\n+ * arbitrary subset of the update operations, allowing them to be\n+ * efficiently combined later.\n+ *\n+ * Muhash does not support checking if an element is already part of the\n+ * set. That is why this class does not enforce the use of a set as the\n+ * data it represents because there is no efficient way to do so.\n+ * It is possible to add elements more than once and also to remove\n+ * elements that have not been added before. However, this implementation\n+ * is intended to represent a set of elements.\n+ *\n+ * See also https://cseweb.ucsd.edu/~mihir/papers/inchash.pdf and\n+ * https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014337.html.\n+ */\n+class MuHash3072\n+{\n+protected:\n+    Num3072 m_data;\n+\n+public:\n+    /* The empty set. */\n+    MuHash3072() noexcept;\n+\n+    /* A singleton with a single 32-byte key in it. */\n+    explicit MuHash3072(Span<const unsigned char> key32) noexcept;",
      "path": "src/crypto/muhash.h",
      "position": null,
      "original_position": 72,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "b03e923c534a954edfdd9ef4ec9a68e5dd08d827",
      "in_reply_to_id": 507832149,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "FWIW the \"real span\" can do `std::span<const uint8_t, 32>` to force the size possibly at compile time.\r\n(maybe we should look into extending our span impl to support that)",
      "created_at": "2020-10-22T15:42:24Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r510265495",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/510265495"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 72,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/510267390",
      "pull_request_review_id": 514870425,
      "id": 510267390,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI2NzM5MA==",
      "diff_hunk": "@@ -0,0 +1,304 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+using limb_t = Num3072::limb_t;\n+using double_limb_t = Num3072::double_limb_t;\n+constexpr int LIMB_SIZE = Num3072::LIMB_SIZE;\n+constexpr int LIMBS = Num3072::LIMBS;\n+\n+// Sanity check for Num3072 constants\n+static_assert(LIMB_SIZE * LIMBS == 3072, \"Num3072 isn't 3072 bits\");\n+static_assert(sizeof(double_limb_t) == sizeof(limb_t) * 2, \"bad size for double_limb_t\");\n+static_assert(sizeof(limb_t) * 8 == LIMB_SIZE, \"LIMB_SIZE is incorrect\");\n+\n+// Hard coded values in MuHash3072 constructor and Finalize\n+static_assert(sizeof(limb_t) == 4 || sizeof(limb_t) == 8, \"bad size for limb_t\");\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+inline void extract2(limb_t& c0, limb_t& c1, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(limb_t& c0, limb_t& c1, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    c1 = t >> LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& d0, limb_t& d1, limb_t& d2, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)d0 * n + c0;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)d1 * n + c1;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(limb_t& c0, limb_t& c1, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)c0 * n;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)c1 * n;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    limb_t tl, th;\n+    {\n+        double_limb_t t = (double_limb_t)a * b;\n+        th = t >> LIMB_SIZE;\n+        tl = t;\n+    }\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+inline void muldbladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    limb_t tl, th;\n+    {\n+        double_limb_t t = (double_limb_t)a * b;\n+        th = t >> LIMB_SIZE;\n+        tl = t;\n+    }\n+    c0 += tl;\n+    limb_t tt = th + ((c0 < tl) ? 1 : 0);\n+    c1 += tt;\n+    c2 += (c1 < tt) ? 1 : 0;\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1] += a */\n+inline void add2(limb_t& c0, limb_t& c1, limb_t& a)\n+{\n+    c0 += a;\n+    c1 += (c0 < a) ? 1 : 0;\n+}\n+\n+bool IsOverflow(const Num3072* d)\n+{\n+    if (d->limbs[0] <= std::numeric_limits<limb_t>::max() - MAX_PRIME_DIFF) return false;\n+    for (int i = 1; i < LIMBS; ++i) {\n+        if (d->limbs[i] != std::numeric_limits<limb_t>::max()) return false;\n+    }\n+    return true;\n+}\n+\n+void FullReduce(Num3072* d)\n+{\n+    limb_t c0 = MAX_PRIME_DIFF;\n+    for (int i = 0; i < LIMBS; ++i) {\n+        limb_t c1 = 0;\n+        add2(c0, c1, d->limbs[i]);\n+        extract2(c0, c1, d->limbs[i]);\n+    }\n+}\n+\n+void Multiply(Num3072* in_out, const Num3072* a)\n+{\n+    limb_t c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of in_out*a into tmp, including one reduction. */\n+    for (int j = 0; j < LIMBS - 1; ++j) {\n+        limb_t d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        mul(d0, d1, in_out->limbs[1 + j], a->limbs[LIMBS + j - (1 + j)]);\n+        for (int i = 2 + j; i < LIMBS; ++i) muladd3(d0, d1, d2, in_out->limbs[i], a->limbs[LIMBS + j - i]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < j + 1; ++i) muladd3(c0, c1, c2, in_out->limbs[i], a->limbs[j - i]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+    /* Compute limb N-1 of a*b into tmp. */\n+    {\n+        limb_t c2 = 0;\n+        for (int i = 0; i < LIMBS; ++i) muladd3(c0, c1, c2, in_out->limbs[i], a->limbs[LIMBS - 1 - i]);\n+        extract3(c0, c1, c2, tmp.limbs[LIMBS - 1]);\n+    }\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, in_out->limbs[j]);\n+    }\n+#ifdef DEBUG\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+#endif\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(in_out);\n+}\n+\n+void Square(Num3072* in_out)\n+{\n+    limb_t c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of in_out*in_out into tmp, including one reduction. */\n+    for (int j = 0; j < LIMBS - 1; ++j) {\n+        limb_t d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        for (int i = 0; i < (LIMBS - 1 - j) / 2; ++i) muldbladd3(d0, d1, d2, in_out->limbs[i + j + 1], in_out->limbs[LIMBS - 1 - i]);\n+        if ((j + 1) & 1) muladd3(d0, d1, d2, in_out->limbs[(LIMBS - 1 - j) / 2 + j + 1], in_out->limbs[LIMBS - 1 - (LIMBS - 1 - j) / 2]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < (j + 1) / 2; ++i) muldbladd3(c0, c1, c2, in_out->limbs[i], in_out->limbs[j - i]);\n+        if ((j + 1) & 1) muladd3(c0, c1, c2, in_out->limbs[(j + 1) / 2], in_out->limbs[j - (j + 1) / 2]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+    {\n+        limb_t c2 = 0;\n+        for (int i = 0; i < LIMBS / 2; ++i) muldbladd3(c0, c1, c2, in_out->limbs[i], in_out->limbs[LIMBS - 1 - i]);\n+        extract3(c0, c1, c2, tmp.limbs[LIMBS - 1]);\n+    }\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, in_out->limbs[j]);\n+    }\n+#ifdef DEBUG\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+#endif\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(in_out);\n+}\n+\n+void Inverse(Num3072* out, const Num3072* a)\n+{\n+    // For fast exponentiation a sliding window exponentiation with repunit\n+    // precomputation is utilized. See \"Fast Point Decompression for Standard\n+    // Elliptic Curves\" (Brumley, Järvinen, 2008).",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 210,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "ef53ca76cc616cd359969533a75c3dab388ec38d",
      "in_reply_to_id": 492832419,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@sipa When safegcd? ;)",
      "created_at": "2020-10-22T15:44:58Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r510267390",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/510267390"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 210,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/510278063",
      "pull_request_review_id": 514885241,
      "id": 510278063,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI3ODA2Mw==",
      "diff_hunk": "@@ -0,0 +1,304 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+using limb_t = Num3072::limb_t;\n+using double_limb_t = Num3072::double_limb_t;\n+constexpr int LIMB_SIZE = Num3072::LIMB_SIZE;\n+constexpr int LIMBS = Num3072::LIMBS;\n+\n+// Sanity check for Num3072 constants\n+static_assert(LIMB_SIZE * LIMBS == 3072, \"Num3072 isn't 3072 bits\");\n+static_assert(sizeof(double_limb_t) == sizeof(limb_t) * 2, \"bad size for double_limb_t\");\n+static_assert(sizeof(limb_t) * 8 == LIMB_SIZE, \"LIMB_SIZE is incorrect\");\n+\n+// Hard coded values in MuHash3072 constructor and Finalize\n+static_assert(sizeof(limb_t) == 4 || sizeof(limb_t) == 8, \"bad size for limb_t\");\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+inline void extract2(limb_t& c0, limb_t& c1, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(limb_t& c0, limb_t& c1, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    c1 = t >> LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& d0, limb_t& d1, limb_t& d2, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)d0 * n + c0;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)d1 * n + c1;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(limb_t& c0, limb_t& c1, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)c0 * n;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)c1 * n;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    limb_t tl, th;\n+    {\n+        double_limb_t t = (double_limb_t)a * b;\n+        th = t >> LIMB_SIZE;\n+        tl = t;\n+    }\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+inline void muldbladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    limb_t tl, th;\n+    {\n+        double_limb_t t = (double_limb_t)a * b;\n+        th = t >> LIMB_SIZE;\n+        tl = t;\n+    }\n+    c0 += tl;\n+    limb_t tt = th + ((c0 < tl) ? 1 : 0);\n+    c1 += tt;\n+    c2 += (c1 < tt) ? 1 : 0;\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1] += a */\n+inline void add2(limb_t& c0, limb_t& c1, limb_t& a)\n+{\n+    c0 += a;\n+    c1 += (c0 < a) ? 1 : 0;\n+}\n+\n+bool IsOverflow(const Num3072* d)\n+{\n+    if (d->limbs[0] <= std::numeric_limits<limb_t>::max() - MAX_PRIME_DIFF) return false;\n+    for (int i = 1; i < LIMBS; ++i) {\n+        if (d->limbs[i] != std::numeric_limits<limb_t>::max()) return false;\n+    }\n+    return true;\n+}\n+\n+void FullReduce(Num3072* d)\n+{\n+    limb_t c0 = MAX_PRIME_DIFF;\n+    for (int i = 0; i < LIMBS; ++i) {\n+        limb_t c1 = 0;\n+        add2(c0, c1, d->limbs[i]);\n+        extract2(c0, c1, d->limbs[i]);\n+    }\n+}\n+\n+void Multiply(Num3072* in_out, const Num3072* a)\n+{\n+    limb_t c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of in_out*a into tmp, including one reduction. */\n+    for (int j = 0; j < LIMBS - 1; ++j) {\n+        limb_t d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        mul(d0, d1, in_out->limbs[1 + j], a->limbs[LIMBS + j - (1 + j)]);\n+        for (int i = 2 + j; i < LIMBS; ++i) muladd3(d0, d1, d2, in_out->limbs[i], a->limbs[LIMBS + j - i]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < j + 1; ++i) muladd3(c0, c1, c2, in_out->limbs[i], a->limbs[j - i]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+    /* Compute limb N-1 of a*b into tmp. */\n+    {\n+        limb_t c2 = 0;\n+        for (int i = 0; i < LIMBS; ++i) muladd3(c0, c1, c2, in_out->limbs[i], a->limbs[LIMBS - 1 - i]);\n+        extract3(c0, c1, c2, tmp.limbs[LIMBS - 1]);\n+    }\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, in_out->limbs[j]);\n+    }\n+#ifdef DEBUG\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+#endif\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(in_out);\n+}\n+\n+void Square(Num3072* in_out)\n+{\n+    limb_t c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of in_out*in_out into tmp, including one reduction. */\n+    for (int j = 0; j < LIMBS - 1; ++j) {\n+        limb_t d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        for (int i = 0; i < (LIMBS - 1 - j) / 2; ++i) muldbladd3(d0, d1, d2, in_out->limbs[i + j + 1], in_out->limbs[LIMBS - 1 - i]);\n+        if ((j + 1) & 1) muladd3(d0, d1, d2, in_out->limbs[(LIMBS - 1 - j) / 2 + j + 1], in_out->limbs[LIMBS - 1 - (LIMBS - 1 - j) / 2]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < (j + 1) / 2; ++i) muldbladd3(c0, c1, c2, in_out->limbs[i], in_out->limbs[j - i]);\n+        if ((j + 1) & 1) muladd3(c0, c1, c2, in_out->limbs[(j + 1) / 2], in_out->limbs[j - (j + 1) / 2]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+    {\n+        limb_t c2 = 0;\n+        for (int i = 0; i < LIMBS / 2; ++i) muldbladd3(c0, c1, c2, in_out->limbs[i], in_out->limbs[LIMBS - 1 - i]);\n+        extract3(c0, c1, c2, tmp.limbs[LIMBS - 1]);\n+    }\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, in_out->limbs[j]);\n+    }\n+#ifdef DEBUG\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+#endif\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(in_out);\n+}\n+\n+void Inverse(Num3072* out, const Num3072* a)\n+{\n+    // For fast exponentiation a sliding window exponentiation with repunit\n+    // precomputation is utilized. See \"Fast Point Decompression for Standard\n+    // Elliptic Curves\" (Brumley, Järvinen, 2008).",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 210,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "e19e50013478c6b7066aa2c9f7e0d0ee7219e837",
      "in_reply_to_id": 507186374,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The paper if anyone wants: https://sci-hub.do/10.1007/978-3-540-69485-4_10\r\nas for the technique AFAIU(didn't review the actual code here) it's simply fermat little theorem (a^p-2=1/a) together with a simple square-and-multiply algorithm (in elliptic curves it's called double-and-add) \r\nGood references:\r\nhttps://en.wikipedia.org/wiki/Exponentiation_by_squaring\r\nhttps://briansmith.org/ecc-inversion-addition-chains-01",
      "created_at": "2020-10-22T15:59:12Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r510278063",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/510278063"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 210,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/510282032",
      "pull_request_review_id": 514890405,
      "id": 510282032,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI4MjAzMg==",
      "diff_hunk": "@@ -0,0 +1,304 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+using limb_t = Num3072::limb_t;\n+using double_limb_t = Num3072::double_limb_t;\n+constexpr int LIMB_SIZE = Num3072::LIMB_SIZE;\n+constexpr int LIMBS = Num3072::LIMBS;\n+\n+// Sanity check for Num3072 constants\n+static_assert(LIMB_SIZE * LIMBS == 3072, \"Num3072 isn't 3072 bits\");\n+static_assert(sizeof(double_limb_t) == sizeof(limb_t) * 2, \"bad size for double_limb_t\");\n+static_assert(sizeof(limb_t) * 8 == LIMB_SIZE, \"LIMB_SIZE is incorrect\");\n+\n+// Hard coded values in MuHash3072 constructor and Finalize\n+static_assert(sizeof(limb_t) == 4 || sizeof(limb_t) == 8, \"bad size for limb_t\");\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+inline void extract2(limb_t& c0, limb_t& c1, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(limb_t& c0, limb_t& c1, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    c1 = t >> LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& d0, limb_t& d1, limb_t& d2, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)d0 * n + c0;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)d1 * n + c1;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(limb_t& c0, limb_t& c1, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)c0 * n;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)c1 * n;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    limb_t tl, th;\n+    {\n+        double_limb_t t = (double_limb_t)a * b;\n+        th = t >> LIMB_SIZE;\n+        tl = t;\n+    }\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+inline void muldbladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    limb_t tl, th;\n+    {\n+        double_limb_t t = (double_limb_t)a * b;\n+        th = t >> LIMB_SIZE;\n+        tl = t;\n+    }\n+    c0 += tl;\n+    limb_t tt = th + ((c0 < tl) ? 1 : 0);\n+    c1 += tt;\n+    c2 += (c1 < tt) ? 1 : 0;\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1] += a */\n+inline void add2(limb_t& c0, limb_t& c1, limb_t& a)\n+{\n+    c0 += a;\n+    c1 += (c0 < a) ? 1 : 0;\n+}\n+\n+bool IsOverflow(const Num3072* d)\n+{\n+    if (d->limbs[0] <= std::numeric_limits<limb_t>::max() - MAX_PRIME_DIFF) return false;\n+    for (int i = 1; i < LIMBS; ++i) {\n+        if (d->limbs[i] != std::numeric_limits<limb_t>::max()) return false;\n+    }\n+    return true;\n+}\n+\n+void FullReduce(Num3072* d)\n+{\n+    limb_t c0 = MAX_PRIME_DIFF;\n+    for (int i = 0; i < LIMBS; ++i) {\n+        limb_t c1 = 0;\n+        add2(c0, c1, d->limbs[i]);\n+        extract2(c0, c1, d->limbs[i]);\n+    }\n+}\n+\n+void Multiply(Num3072* in_out, const Num3072* a)\n+{\n+    limb_t c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of in_out*a into tmp, including one reduction. */\n+    for (int j = 0; j < LIMBS - 1; ++j) {\n+        limb_t d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        mul(d0, d1, in_out->limbs[1 + j], a->limbs[LIMBS + j - (1 + j)]);\n+        for (int i = 2 + j; i < LIMBS; ++i) muladd3(d0, d1, d2, in_out->limbs[i], a->limbs[LIMBS + j - i]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < j + 1; ++i) muladd3(c0, c1, c2, in_out->limbs[i], a->limbs[j - i]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+    /* Compute limb N-1 of a*b into tmp. */\n+    {\n+        limb_t c2 = 0;\n+        for (int i = 0; i < LIMBS; ++i) muladd3(c0, c1, c2, in_out->limbs[i], a->limbs[LIMBS - 1 - i]);\n+        extract3(c0, c1, c2, tmp.limbs[LIMBS - 1]);\n+    }\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, in_out->limbs[j]);\n+    }\n+#ifdef DEBUG\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+#endif\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(in_out);\n+}\n+\n+void Square(Num3072* in_out)\n+{\n+    limb_t c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of in_out*in_out into tmp, including one reduction. */\n+    for (int j = 0; j < LIMBS - 1; ++j) {\n+        limb_t d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        for (int i = 0; i < (LIMBS - 1 - j) / 2; ++i) muldbladd3(d0, d1, d2, in_out->limbs[i + j + 1], in_out->limbs[LIMBS - 1 - i]);\n+        if ((j + 1) & 1) muladd3(d0, d1, d2, in_out->limbs[(LIMBS - 1 - j) / 2 + j + 1], in_out->limbs[LIMBS - 1 - (LIMBS - 1 - j) / 2]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < (j + 1) / 2; ++i) muldbladd3(c0, c1, c2, in_out->limbs[i], in_out->limbs[j - i]);\n+        if ((j + 1) & 1) muladd3(c0, c1, c2, in_out->limbs[(j + 1) / 2], in_out->limbs[j - (j + 1) / 2]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+    {\n+        limb_t c2 = 0;\n+        for (int i = 0; i < LIMBS / 2; ++i) muldbladd3(c0, c1, c2, in_out->limbs[i], in_out->limbs[LIMBS - 1 - i]);\n+        extract3(c0, c1, c2, tmp.limbs[LIMBS - 1]);\n+    }\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, in_out->limbs[j]);\n+    }\n+#ifdef DEBUG\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+#endif\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(in_out);\n+}\n+\n+void Inverse(Num3072* out, const Num3072* a)\n+{\n+    // For fast exponentiation a sliding window exponentiation with repunit\n+    // precomputation is utilized. See \"Fast Point Decompression for Standard\n+    // Elliptic Curves\" (Brumley, Järvinen, 2008).",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 210,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "e19e50013478c6b7066aa2c9f7e0d0ee7219e837",
      "in_reply_to_id": 507186374,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@elichai That's the easy part. It's specifically using a technique here to construct an efficient exponentiation ladder for an exponent with many consecutive 1s.",
      "created_at": "2020-10-22T16:04:38Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r510282032",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/510282032"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 210,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/510283904",
      "pull_request_review_id": 514892914,
      "id": 510283904,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI4MzkwNA==",
      "diff_hunk": "@@ -0,0 +1,304 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+using limb_t = Num3072::limb_t;\n+using double_limb_t = Num3072::double_limb_t;\n+constexpr int LIMB_SIZE = Num3072::LIMB_SIZE;\n+constexpr int LIMBS = Num3072::LIMBS;\n+\n+// Sanity check for Num3072 constants\n+static_assert(LIMB_SIZE * LIMBS == 3072, \"Num3072 isn't 3072 bits\");\n+static_assert(sizeof(double_limb_t) == sizeof(limb_t) * 2, \"bad size for double_limb_t\");\n+static_assert(sizeof(limb_t) * 8 == LIMB_SIZE, \"LIMB_SIZE is incorrect\");\n+\n+// Hard coded values in MuHash3072 constructor and Finalize\n+static_assert(sizeof(limb_t) == 4 || sizeof(limb_t) == 8, \"bad size for limb_t\");\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+inline void extract2(limb_t& c0, limb_t& c1, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(limb_t& c0, limb_t& c1, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    c1 = t >> LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& d0, limb_t& d1, limb_t& d2, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)d0 * n + c0;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)d1 * n + c1;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(limb_t& c0, limb_t& c1, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)c0 * n;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)c1 * n;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    limb_t tl, th;\n+    {\n+        double_limb_t t = (double_limb_t)a * b;\n+        th = t >> LIMB_SIZE;\n+        tl = t;\n+    }\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+inline void muldbladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    limb_t tl, th;\n+    {\n+        double_limb_t t = (double_limb_t)a * b;\n+        th = t >> LIMB_SIZE;\n+        tl = t;\n+    }\n+    c0 += tl;\n+    limb_t tt = th + ((c0 < tl) ? 1 : 0);\n+    c1 += tt;\n+    c2 += (c1 < tt) ? 1 : 0;\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1] += a */\n+inline void add2(limb_t& c0, limb_t& c1, limb_t& a)\n+{\n+    c0 += a;\n+    c1 += (c0 < a) ? 1 : 0;\n+}\n+\n+bool IsOverflow(const Num3072* d)\n+{\n+    if (d->limbs[0] <= std::numeric_limits<limb_t>::max() - MAX_PRIME_DIFF) return false;\n+    for (int i = 1; i < LIMBS; ++i) {\n+        if (d->limbs[i] != std::numeric_limits<limb_t>::max()) return false;\n+    }\n+    return true;\n+}\n+\n+void FullReduce(Num3072* d)\n+{\n+    limb_t c0 = MAX_PRIME_DIFF;\n+    for (int i = 0; i < LIMBS; ++i) {\n+        limb_t c1 = 0;\n+        add2(c0, c1, d->limbs[i]);\n+        extract2(c0, c1, d->limbs[i]);\n+    }\n+}\n+\n+void Multiply(Num3072* in_out, const Num3072* a)\n+{\n+    limb_t c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of in_out*a into tmp, including one reduction. */\n+    for (int j = 0; j < LIMBS - 1; ++j) {\n+        limb_t d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        mul(d0, d1, in_out->limbs[1 + j], a->limbs[LIMBS + j - (1 + j)]);\n+        for (int i = 2 + j; i < LIMBS; ++i) muladd3(d0, d1, d2, in_out->limbs[i], a->limbs[LIMBS + j - i]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < j + 1; ++i) muladd3(c0, c1, c2, in_out->limbs[i], a->limbs[j - i]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+    /* Compute limb N-1 of a*b into tmp. */\n+    {\n+        limb_t c2 = 0;\n+        for (int i = 0; i < LIMBS; ++i) muladd3(c0, c1, c2, in_out->limbs[i], a->limbs[LIMBS - 1 - i]);\n+        extract3(c0, c1, c2, tmp.limbs[LIMBS - 1]);\n+    }\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, in_out->limbs[j]);\n+    }\n+#ifdef DEBUG\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+#endif\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(in_out);\n+}\n+\n+void Square(Num3072* in_out)\n+{\n+    limb_t c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of in_out*in_out into tmp, including one reduction. */\n+    for (int j = 0; j < LIMBS - 1; ++j) {\n+        limb_t d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        for (int i = 0; i < (LIMBS - 1 - j) / 2; ++i) muldbladd3(d0, d1, d2, in_out->limbs[i + j + 1], in_out->limbs[LIMBS - 1 - i]);\n+        if ((j + 1) & 1) muladd3(d0, d1, d2, in_out->limbs[(LIMBS - 1 - j) / 2 + j + 1], in_out->limbs[LIMBS - 1 - (LIMBS - 1 - j) / 2]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < (j + 1) / 2; ++i) muldbladd3(c0, c1, c2, in_out->limbs[i], in_out->limbs[j - i]);\n+        if ((j + 1) & 1) muladd3(c0, c1, c2, in_out->limbs[(j + 1) / 2], in_out->limbs[j - (j + 1) / 2]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+    {\n+        limb_t c2 = 0;\n+        for (int i = 0; i < LIMBS / 2; ++i) muldbladd3(c0, c1, c2, in_out->limbs[i], in_out->limbs[LIMBS - 1 - i]);\n+        extract3(c0, c1, c2, tmp.limbs[LIMBS - 1]);\n+    }\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, in_out->limbs[j]);\n+    }\n+#ifdef DEBUG\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+#endif\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(in_out);\n+}\n+\n+void Inverse(Num3072* out, const Num3072* a)\n+{\n+    // For fast exponentiation a sliding window exponentiation with repunit\n+    // precomputation is utilized. See \"Fast Point Decompression for Standard\n+    // Elliptic Curves\" (Brumley, Järvinen, 2008).",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 210,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "e19e50013478c6b7066aa2c9f7e0d0ee7219e837",
      "in_reply_to_id": 507186374,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@sipa you're right. I ignored how you came up with that specific ladder because I didn't actually review the ladder itself (ops)",
      "created_at": "2020-10-22T16:07:23Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r510283904",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/510283904"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 210,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/510348467",
      "pull_request_review_id": 514977105,
      "id": 510348467,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM0ODQ2Nw==",
      "diff_hunk": "@@ -0,0 +1,91 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <serialize.h>\n+\n+#include <stdint.h>\n+\n+struct Num3072 {\n+#ifdef HAVE___INT128\n+    typedef unsigned __int128 double_limb_t;\n+    typedef uint64_t limb_t;\n+    static constexpr int LIMBS = 48;\n+    static constexpr int LIMB_SIZE = 64;\n+#else\n+    typedef uint64_t double_limb_t;\n+    typedef uint32_t limb_t;\n+    static constexpr int LIMBS = 96;\n+    static constexpr int LIMB_SIZE = 32;\n+#endif\n+    limb_t limbs[LIMBS];\n+};\n+\n+/** A class representing MuHash sets\n+ *\n+ * MuHash is a hashing algorithm that supports adding set elements in any\n+ * order but also deleting in any order. As a result, it can maintain a\n+ * running sum for a set of data as a whole, and add/subtract when data\n+ * is added to or removed from it. A downside of MuHash is that computing\n+ * an inverse is relatively expensive. This can be solved by representing\n+ * the running value as a fraction, and multiplying added elements into\n+ * the numerator and removed elements into the denominator. Only when the\n+ * final hash is desired, a single modular inverse and multiplication is\n+ * needed to combine the two.\n+ *\n+ * TODO: Represent running value as a fraction to allow for more intuitive\n+ * use (see above).\n+ *\n+ * As the update operations are also associative, H(a)+H(b)+H(c)+H(d) can\n+ * in fact be computed as (H(a)+H(b)) + (H(c)+H(d)). This implies that\n+ * all of this is perfectly parallellizable: each thread can process an\n+ * arbitrary subset of the update operations, allowing them to be\n+ * efficiently combined later.\n+ *\n+ * Muhash does not support checking if an element is already part of the\n+ * set. That is why this class does not enforce the use of a set as the\n+ * data it represents because there is no efficient way to do so.\n+ * It is possible to add elements more than once and also to remove\n+ * elements that have not been added before. However, this implementation\n+ * is intended to represent a set of elements.\n+ *\n+ * See also https://cseweb.ucsd.edu/~mihir/papers/inchash.pdf and\n+ * https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014337.html.\n+ */\n+class MuHash3072\n+{\n+protected:\n+    Num3072 m_data;\n+\n+public:\n+    /* The empty set. */\n+    MuHash3072() noexcept;\n+\n+    /* A singleton with a single 32-byte key in it. */\n+    explicit MuHash3072(Span<const unsigned char> key32) noexcept;",
      "path": "src/crypto/muhash.h",
      "position": null,
      "original_position": 72,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "b03e923c534a954edfdd9ef4ec9a68e5dd08d827",
      "in_reply_to_id": 507832149,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Interesting. I wasn't aware of that. Does that mean it can't be initialized with a vector (since it's not possible to know the size at compile time)?",
      "created_at": "2020-10-22T17:49:04Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r510348467",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/510348467"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 72,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/510506704",
      "pull_request_review_id": 515178981,
      "id": 510506704,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUwNjcwNA==",
      "diff_hunk": "@@ -0,0 +1,91 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <serialize.h>\n+\n+#include <stdint.h>\n+\n+struct Num3072 {\n+#ifdef HAVE___INT128\n+    typedef unsigned __int128 double_limb_t;\n+    typedef uint64_t limb_t;\n+    static constexpr int LIMBS = 48;\n+    static constexpr int LIMB_SIZE = 64;\n+#else\n+    typedef uint64_t double_limb_t;\n+    typedef uint32_t limb_t;\n+    static constexpr int LIMBS = 96;\n+    static constexpr int LIMB_SIZE = 32;\n+#endif\n+    limb_t limbs[LIMBS];\n+};\n+\n+/** A class representing MuHash sets\n+ *\n+ * MuHash is a hashing algorithm that supports adding set elements in any\n+ * order but also deleting in any order. As a result, it can maintain a\n+ * running sum for a set of data as a whole, and add/subtract when data\n+ * is added to or removed from it. A downside of MuHash is that computing\n+ * an inverse is relatively expensive. This can be solved by representing\n+ * the running value as a fraction, and multiplying added elements into\n+ * the numerator and removed elements into the denominator. Only when the\n+ * final hash is desired, a single modular inverse and multiplication is\n+ * needed to combine the two.\n+ *\n+ * TODO: Represent running value as a fraction to allow for more intuitive\n+ * use (see above).\n+ *\n+ * As the update operations are also associative, H(a)+H(b)+H(c)+H(d) can\n+ * in fact be computed as (H(a)+H(b)) + (H(c)+H(d)). This implies that\n+ * all of this is perfectly parallellizable: each thread can process an\n+ * arbitrary subset of the update operations, allowing them to be\n+ * efficiently combined later.\n+ *\n+ * Muhash does not support checking if an element is already part of the\n+ * set. That is why this class does not enforce the use of a set as the\n+ * data it represents because there is no efficient way to do so.\n+ * It is possible to add elements more than once and also to remove\n+ * elements that have not been added before. However, this implementation\n+ * is intended to represent a set of elements.\n+ *\n+ * See also https://cseweb.ucsd.edu/~mihir/papers/inchash.pdf and\n+ * https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014337.html.\n+ */\n+class MuHash3072\n+{\n+protected:\n+    Num3072 m_data;\n+\n+public:\n+    /* The empty set. */\n+    MuHash3072() noexcept;\n+\n+    /* A singleton with a single 32-byte key in it. */\n+    explicit MuHash3072(Span<const unsigned char> key32) noexcept;",
      "path": "src/crypto/muhash.h",
      "position": null,
      "original_position": 72,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "b03e923c534a954edfdd9ef4ec9a68e5dd08d827",
      "in_reply_to_id": 507832149,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It can, but only explicitly. So you'd be able to write `MuHash3072(std::span<const unsigned char, 32>(vec))` but not `MuHash3072(vec)`.",
      "created_at": "2020-10-22T23:07:53Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r510506704",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/510506704"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 72,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/510692813",
      "pull_request_review_id": 515415562,
      "id": 510692813,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY5MjgxMw==",
      "diff_hunk": "@@ -0,0 +1,91 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <serialize.h>\n+\n+#include <stdint.h>\n+\n+struct Num3072 {\n+#ifdef HAVE___INT128\n+    typedef unsigned __int128 double_limb_t;\n+    typedef uint64_t limb_t;\n+    static constexpr int LIMBS = 48;\n+    static constexpr int LIMB_SIZE = 64;\n+#else\n+    typedef uint64_t double_limb_t;\n+    typedef uint32_t limb_t;\n+    static constexpr int LIMBS = 96;\n+    static constexpr int LIMB_SIZE = 32;\n+#endif\n+    limb_t limbs[LIMBS];\n+};\n+\n+/** A class representing MuHash sets\n+ *\n+ * MuHash is a hashing algorithm that supports adding set elements in any\n+ * order but also deleting in any order. As a result, it can maintain a\n+ * running sum for a set of data as a whole, and add/subtract when data\n+ * is added to or removed from it. A downside of MuHash is that computing\n+ * an inverse is relatively expensive. This can be solved by representing\n+ * the running value as a fraction, and multiplying added elements into\n+ * the numerator and removed elements into the denominator. Only when the\n+ * final hash is desired, a single modular inverse and multiplication is\n+ * needed to combine the two.\n+ *\n+ * TODO: Represent running value as a fraction to allow for more intuitive\n+ * use (see above).\n+ *\n+ * As the update operations are also associative, H(a)+H(b)+H(c)+H(d) can\n+ * in fact be computed as (H(a)+H(b)) + (H(c)+H(d)). This implies that\n+ * all of this is perfectly parallellizable: each thread can process an\n+ * arbitrary subset of the update operations, allowing them to be\n+ * efficiently combined later.\n+ *\n+ * Muhash does not support checking if an element is already part of the\n+ * set. That is why this class does not enforce the use of a set as the\n+ * data it represents because there is no efficient way to do so.\n+ * It is possible to add elements more than once and also to remove\n+ * elements that have not been added before. However, this implementation\n+ * is intended to represent a set of elements.\n+ *\n+ * See also https://cseweb.ucsd.edu/~mihir/papers/inchash.pdf and\n+ * https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014337.html.\n+ */\n+class MuHash3072\n+{\n+protected:\n+    Num3072 m_data;\n+\n+public:\n+    /* The empty set. */\n+    MuHash3072() noexcept;\n+\n+    /* A singleton with a single 32-byte key in it. */\n+    explicit MuHash3072(Span<const unsigned char> key32) noexcept;",
      "path": "src/crypto/muhash.h",
      "position": null,
      "original_position": 72,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "b03e923c534a954edfdd9ef4ec9a68e5dd08d827",
      "in_reply_to_id": 507832149,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think I prefer that interface. It forces the client code to explicitly set the span size. Of course they can still create a span from a too-small vector, but that's a client bug rather than an unexpected assert in the library.\r\n\r\nIn any case, my recommendation would be to make the MuHash class take any stream input and do the truncated SHA512 inside the class (https://github.com/bitcoin/bitcoin/pull/19055#discussion_r510232044) which would remove the assertion on input length.",
      "created_at": "2020-10-23T07:38:19Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r510692813",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/510692813"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 72,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513237387",
      "pull_request_review_id": 518393531,
      "id": 513237387,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIzNzM4Nw==",
      "diff_hunk": "@@ -105,6 +106,70 @@ static void FastRandom_1bit(benchmark::Bench& bench)\n     });\n }\n \n+static void MuHash(benchmark::Bench& bench)\n+{\n+    FastRandomContext rng(true);\n+    MuHash3072 acc;\n+    unsigned char key[32] = {0};\n+    int i = 0;\n+    bench.run([&] {\n+        key[0] = ++i;\n+        acc *= MuHash3072(key);\n+    });\n+}\n+\n+static void MuHashAdd(benchmark::Bench& bench)",
      "path": "src/bench/crypto_hash.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "96a8d80f7ba43fd608984543d6bc6905f696529f",
      "in_reply_to_id": 509153295,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "\"multiply\" and \"divide\" (or mul/div) for the maths, and \"insert\" and \"remove\" for higher level (multi)set-like operations might make sense. \"Add\" definitely seems confusing.",
      "created_at": "2020-10-28T07:49:32Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r513237387",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513237387"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 121,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513266246",
      "pull_request_review_id": 518430286,
      "id": 513266246,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI2NjI0Ng==",
      "diff_hunk": "@@ -105,6 +106,70 @@ static void FastRandom_1bit(benchmark::Bench& bench)\n     });\n }\n \n+static void MuHash(benchmark::Bench& bench)\n+{\n+    FastRandomContext rng(true);\n+    MuHash3072 acc;\n+    unsigned char key[32] = {0};\n+    int i = 0;\n+    bench.run([&] {\n+        key[0] = ++i;\n+        acc *= MuHash3072(key);\n+    });\n+}\n+\n+static void MuHashAdd(benchmark::Bench& bench)",
      "path": "src/bench/crypto_hash.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "96a8d80f7ba43fd608984543d6bc6905f696529f",
      "in_reply_to_id": 509153295,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "My preferred naming for the operations is here: https://github.com/bitcoin/bitcoin/pull/19055#discussion_r510232044 (mul/div for Num3072, add/sub for MuHash), but I mostly just want it to be consistent.",
      "created_at": "2020-10-28T08:42:51Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r513266246",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/513266246"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 121,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/519485719",
      "pull_request_review_id": 525851501,
      "id": 519485719,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ4NTcxOQ==",
      "diff_hunk": "@@ -0,0 +1,303 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <cassert>\n+#include <cstdio>\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the largest 3072-bit safe prime number, is used as the order of the group. */",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "96a8d80f7ba43fd608984543d6bc6905f696529f",
      "in_reply_to_id": 509602615,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-11-08T22:25:02Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r519485719",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/519485719"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/519485947",
      "pull_request_review_id": 525851707,
      "id": 519485947,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ4NTk0Nw==",
      "diff_hunk": "@@ -857,4 +859,88 @@ BOOST_AUTO_TEST_CASE(sha3_256_tests)\n     TestSHA3_256(\"72c57c359e10684d0517e46653a02d18d29eff803eb009e4d5eb9e95add9ad1a4ac1f38a70296f3a369a16985ca3c957de2084cdc9bdd8994eb59b8815e0debad4ec1f001feac089820db8becdaf896aaf95721e8674e5d476b43bd2b873a7d135cd685f545b438210f9319e4dcd55986c85303c1ddf18dc746fe63a409df0a998ed376eb683e16c09e6e9018504152b3e7628ef350659fb716e058a5263a18823d2f2f6ee6a8091945a48ae1c5cb1694cf2c1fe76ef9177953afe8899cfa2b7fe0603bfa3180937dadfb66fbbdd119bbf8063338aa4a699075a3bfdbae8db7e5211d0917e9665a702fc9b0a0a901d08bea97654162d82a9f05622b060b634244779c33427eb7a29353a5f48b07cbefa72f3622ac5900bef77b71d6b314296f304c8426f451f32049b1f6af156a9dab702e8907d3cd72bb2c50493f4d593e731b285b70c803b74825b3524cda3205a8897106615260ac93c01c5ec14f5b11127783989d1824527e99e04f6a340e827b559f24db9292fcdd354838f9339a5fa1d7f6b2087f04835828b13463dd40927866f16ae33ed501ec0e6c4e63948768c5aeea3e4f6754985954bea7d61088c44430204ef491b74a64bde1358cecb2cad28ee6a3de5b752ff6a051104d88478653339457ac45ba44cbb65f54d1969d047cda746931d5e6a8b48e211416aefd5729f3d60b56b54e7f85aa2f42de3cb69419240c24e67139a11790a709edef2ac52cf35dd0a08af45926ebe9761f498ff83bfe263d6897ee97943a4b982fe3404ef0b4a45e06113c60340e0664f14799bf59cb4b3934b465fabefd87155905ee5309ba41e9e402973311831ea600b16437f71df39ee77130490c4d0227e5d1757fdc66af3ae6b9953053ed9aafca0160209858a7d4dd38fe10e0cb153672d08633ed6c54977aa0a6e67f9ff2f8c9d22dd7b21de08192960fd0e0da68d77c8d810db11dcaa61c725cd4092cbff76c8e1debd8d0361bb3f2e607911d45716f53067bdc0d89dd4889177765166a424e9fc0cb711201099dda213355e6639ac7eb86eca2ae0ab38b7f674f37ef8a6fcca1a6f52f55d9e1dcd631d2c3c82bba129172feb991d5af51afecd9d61a88b6832e4107480e392aed61a8644f551665ebff6b20953b635737a4f895e429fddcfe801f606fbda74b3bf6f5767d0fac14907fcfd0aa1d4c11b9e91b01d68052399b51a29f1ae6acd965109977c14a555cbcbd21ad8cb9f8853506d4bc21c01e62d61d7b21be1b923be54914e6b0a7ca84dd11f1159193e1184568a6134a6bbadf5b4df986edcf2019390ae841cfaa44435e28ce877d3dae4177992fa5d4e5c005876dbe3d1e63bec7dcc0942762b48b1ecc6c1a918409a8a72812a1e245c0c67be6e729c2b49bc6ee4d24a8f63e78e75db45655c26a9a78aff36fcd67117f26b8f654dca664b9f0e30681874cb749e1a692720078856286c2560b0292cc837933423147569350955c9571bf8941ba128fd339cb4268f46b94bc6ee203eb7026813706ea51c4f24c91866fc23a724bf2501327e6ae89c29f8db315dc28d2c7c719514036367e018f4835f63fdecd71f9bdced7132b6c4f8b13c69a517026fcd3622d67cb632320d5e7308f78f4b7cea11f6291b137851dc6cd6366f2785c71c3f237f81a7658b2a8d512b61e0ad5a4710b7b124151689fcb2116063fbff7e9115fed7b93de834970b838e49f8f8ba5f1f874c354078b5810a55ae289a56da563f1da6cd80a3757d6073fa55e016e45ac6cec1f69d871c92fd0ae9670c74249045e6b464787f9504128736309fed205f8df4d90e332908581298d9c75a3fa36ab0c3c9272e62de53ab290c803d67b696fd615c260a47bffad16746f18ba1a10a061bacbea9369693b3c042eec36bed289d7d12e52bca8aa1c2dff88ca7816498d25626d0f1e106ebb0b4a12138e00f3df5b1c2f49d98b1756e69b641b7c6353d99dbff050f4d76842c6cf1c2a4b062fc8e6336fa689b7c9d5c6b4ab8c15a5c20e514ff070a602d85ae52fa7810c22f8eeffd34a095b93342144f7a98d024216b3d68ed7bea047517bfcd83ec83febd1ba0e5858e2bdc1d8b1f7b0f89e90ccc432a3f930cb8209462e64556c5054c56ca2a85f16b32eb83a10459d13516faa4d23302b7607b9bd38dab2239ac9e9440c314433fdfb3ceadab4b4f87415ed6f240e017221f3b5f7ac196cdf54957bec42fe6893994b46de3d27dc7fb58ca88feb5b9e79cf20053d12530ac524337b22a3629bea52f40b06d3e2128f32060f9105847daed81d35f20e2002817434659baff64494c5b5c7f9216bfda38412a0f70511159dc73bb6bae1f8eaa0ef08d99bcb31f94f6be12c29c83df45926430b366c99fca3270c15fc4056398fdf3135b7779e3066a006961d1ac0ad1c83179ce39e87a96b722ec23aabc065badf3e188347a360772ca6a447abac7e6a44f0d4632d52926332e44a0a86bff5ce699fd063bdda3ffd4c41b53ded49fecec67f40599b934e16e3fd1bc063ad7026f8d71bfd4cbaf56599586774723194b692036f1b6bb242e2ffb9c600b5215b412764599476ce475c9e5b396fbcebd6be323dcf4d0048077400aac7500db41dc95fc7f7edbe7c9c2ec5ea89943fe13b42217eef530bbd023671509e12dfce4e1c1c82955d965e6a68aa66f6967dba48feda572db1f099d9a6dc4bc8edade852b5e824a06890dc48a6a6510ecaf8cf7620d757290e3166d431abecc624fa9ac2234d2eb783308ead45544910c633a94964b2ef5fbc409cb8835ac4147d384e12e0a5e13951f7de0ee13eafcb0ca0c04946d7804040c0a3cd088352424b097adb7aad1ca4495952f3e6c0158c02d2bcec33bfda69301434a84d9027ce02c0b9725dad118\", \"d894b86261436362e64241e61f6b3e6589daf64dc641f60570c4c0bf3b1f2ca3\");\n }\n \n+static MuHash3072 FromInt(unsigned char i) {\n+    unsigned char tmp[32] = {i, 0};\n+    return MuHash3072(tmp);\n+}\n+\n+BOOST_AUTO_TEST_CASE(muhash_tests)\n+{\n+    unsigned char out[384];\n+\n+    for (int iter = 0; iter < 10; ++iter) {\n+        unsigned char res[384];\n+        int table[4];\n+        for (int i = 0; i < 4; ++i) {\n+            table[i] = g_insecure_rand_ctx.randbits(3);\n+        }\n+        for (int order = 0; order < 4; ++order) {\n+            MuHash3072 acc;\n+            for (int i = 0; i < 4; ++i) {\n+                int t = table[i ^ order];\n+                if (t & 4) {\n+                    acc /= FromInt(t & 3);\n+                } else {\n+                    acc *= FromInt(t & 3);\n+                }\n+            }\n+            acc.Finalize(out);\n+            if (order == 0) {\n+                memcpy(res, out, 384);\n+            } else {\n+                BOOST_CHECK(memcmp(res, out, 384) == 0);\n+            }\n+        }\n+\n+        MuHash3072 x = FromInt(g_insecure_rand_ctx.randbits(4)); // x=X\n+        MuHash3072 y = FromInt(g_insecure_rand_ctx.randbits(4)); // x=X, y=Y\n+        MuHash3072 z; // x=X, y=Y, z=1\n+        z *= x; // x=X, y=Y, z=X\n+        z *= y; // x=X, y=Y, z=X*Y\n+        y *= x; // x=X, y=Y*X, z=X*Y\n+        z /= y; // x=X, y=Y*X, z=1\n+        z.Finalize(out);\n+        for (int i = 0; i < 384; ++i) {\n+            BOOST_CHECK_EQUAL(out[i], i == 0);\n+        }\n+    }\n+\n+    MuHash3072 acc = FromInt(0);\n+    acc *= FromInt(1);\n+    acc /= FromInt(2);\n+    acc.Finalize(out);\n+    uint256 x = (CHashWriter(SER_DISK, 0) << out).GetSHA256();\n+    BOOST_CHECK(x == uint256S(\"a44e16d5e34d259b349af21c06e65d653915d2e208e4e03f389af750dc0bfdc3\"));\n+\n+    // Test MuHash3072 serialization\n+    MuHash3072 serchk = FromInt(1); serchk *= FromInt(2);\n+    std::string ser_exp = \"ad5d5a19c789b21f95f9c2a09f264f8aab4ef29ca30824f7330a8c3f4c61c25a6035bc27476ade3a38f2f2bc576bfbeabdf69641a91b99631ef904d37103eff744129842b1fd83158db6466ab4b752278f04add175a7a41ab8ea1305f66855068730dd3baf1ad29d6e13c7ba3350864a8f96e2e9e5c1ca65e11ab3e361184213a3fb395ac5c86efe3997c671cc5d46df3e1b2f00bf09120ae252a0e985b2452be64d5f626c0bc03747355d91ff2aa31ea4087797b91c80af5003d4b3a2ba5c34cd4a8785712897cd2331bac1b749e4fe9d17a5bb68395e2571d1759dceb5609dfae38ec6186e8c2eb22ffeb9bb8330083ee15d4b816e117e6bc1399c707b3e9d01ae74d2f589d6eb8e9e58c572088476e0444e3dbc05c95867acdb7c18be551e0eb2189d3c39dd86dbc844dc70ac33f9328be9e3b0d792bb359498f5fb385e2d8a8e3a5cde7e3e4e8ba123d3e1eda0b859d3a56e548dd6d23a03ce82e01493f96a67abd3109f9f4315c966f8cba311d71899c04a7fd9618ed028580ffcd21263\";\n+    CDataStream ss_chk(SER_DISK, PROTOCOL_VERSION);\n+    ss_chk << serchk;\n+    BOOST_CHECK_EQUAL(ser_exp, HexStr(ss_chk.str()));\n+\n+    // Test MuHash3072 deserialization\n+    MuHash3072 deserchk;\n+    ss_chk >> deserchk;\n+    unsigned char out2[384];\n+    serchk.Finalize(out);\n+    deserchk.Finalize(out2);\n+    BOOST_CHECK_EQUAL(HexStr(out), HexStr(out2));\n+\n+    // Test MuHash3072 overflow\n+    class MuHashOverflow : public MuHash3072 {",
      "path": "src/test/crypto_tests.cpp",
      "position": null,
      "original_position": 83,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "96a8d80f7ba43fd608984543d6bc6905f696529f",
      "in_reply_to_id": 509163922,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Since the overflow naming is consistent with secp256k1 I kept it but extended the comment for clarification.",
      "created_at": "2020-11-08T22:27:06Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r519485947",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/519485947"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": 930,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 933,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/519486012",
      "pull_request_review_id": 525851766,
      "id": 519486012,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ4NjAxMg==",
      "diff_hunk": "@@ -105,6 +106,70 @@ static void FastRandom_1bit(benchmark::Bench& bench)\n     });\n }\n \n+static void MuHash(benchmark::Bench& bench)\n+{\n+    FastRandomContext rng(true);\n+    MuHash3072 acc;\n+    unsigned char key[32] = {0};\n+    int i = 0;\n+    bench.run([&] {\n+        key[0] = ++i;\n+        acc *= MuHash3072(key);\n+    });\n+}\n+\n+static void MuHashAdd(benchmark::Bench& bench)\n+{\n+    FastRandomContext rng(true);\n+    MuHash3072 acc;\n+    unsigned char key[32];\n+    std::vector<unsigned char> randkey = rng.randbytes(32);\n+    for (size_t i = 0; i < randkey.size(); ++i) {\n+        key[i] = randkey[i];\n+    }\n+\n+    MuHash3072 muhash = MuHash3072(key);",
      "path": "src/bench/crypto_hash.cpp",
      "position": null,
      "original_position": 34,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "96a8d80f7ba43fd608984543d6bc6905f696529f",
      "in_reply_to_id": 509161865,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-11-08T22:27:41Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r519486012",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/519486012"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": 123,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 131,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/519486351",
      "pull_request_review_id": 525852047,
      "id": 519486351,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ4NjM1MQ==",
      "diff_hunk": "@@ -105,6 +106,70 @@ static void FastRandom_1bit(benchmark::Bench& bench)\n     });\n }\n \n+static void MuHash(benchmark::Bench& bench)\n+{\n+    FastRandomContext rng(true);\n+    MuHash3072 acc;\n+    unsigned char key[32] = {0};\n+    int i = 0;\n+    bench.run([&] {\n+        key[0] = ++i;\n+        acc *= MuHash3072(key);\n+    });\n+}\n+\n+static void MuHashAdd(benchmark::Bench& bench)\n+{\n+    FastRandomContext rng(true);\n+    MuHash3072 acc;\n+    unsigned char key[32];\n+    std::vector<unsigned char> randkey = rng.randbytes(32);\n+    for (size_t i = 0; i < randkey.size(); ++i) {\n+        key[i] = randkey[i];\n+    }\n+\n+    MuHash3072 muhash = MuHash3072(key);\n+    bench.run([&] {\n+        acc *= muhash;\n+    });\n+}\n+\n+static void MuHashDiv(benchmark::Bench& bench)\n+{\n+    FastRandomContext rng(true);\n+    MuHash3072 acc;\n+    unsigned char key[32];\n+    std::vector<unsigned char> randkey = rng.randbytes(32);\n+    for (size_t i = 0; i < randkey.size(); ++i) {\n+        key[i] = randkey[i];\n+    }\n+\n+    MuHash3072 muhash = MuHash3072(key);\n+\n+    for (size_t i = 0; i < bench.epochIterations(); ++i) {\n+        acc *= muhash;\n+    }\n+",
      "path": "src/bench/crypto_hash.cpp",
      "position": 43,
      "original_position": 55,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "96a8d80f7ba43fd608984543d6bc6905f696529f",
      "in_reply_to_id": 509155449,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is true but it's not how we intend to use it. I have left this as is. Otherwise, it might be inconsistent with the docs and might give the wrong impression on the usage. ",
      "created_at": "2020-11-08T22:30:49Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r519486351",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/519486351"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": 137,
      "original_start_line": 149,
      "start_side": "RIGHT",
      "line": 140,
      "original_line": 140,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/519486360",
      "pull_request_review_id": 525852054,
      "id": 519486360,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ4NjM2MA==",
      "diff_hunk": "@@ -105,6 +106,70 @@ static void FastRandom_1bit(benchmark::Bench& bench)\n     });\n }\n \n+static void MuHash(benchmark::Bench& bench)\n+{\n+    FastRandomContext rng(true);",
      "path": "src/bench/crypto_hash.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "96a8d80f7ba43fd608984543d6bc6905f696529f",
      "in_reply_to_id": 509153543,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-11-08T22:30:53Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r519486360",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/519486360"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 111,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/519486413",
      "pull_request_review_id": 525852105,
      "id": 519486413,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ4NjQxMw==",
      "diff_hunk": "@@ -105,6 +106,70 @@ static void FastRandom_1bit(benchmark::Bench& bench)\n     });\n }\n \n+static void MuHash(benchmark::Bench& bench)\n+{\n+    FastRandomContext rng(true);\n+    MuHash3072 acc;\n+    unsigned char key[32] = {0};\n+    int i = 0;\n+    bench.run([&] {\n+        key[0] = ++i;\n+        acc *= MuHash3072(key);\n+    });\n+}\n+\n+static void MuHashAdd(benchmark::Bench& bench)",
      "path": "src/bench/crypto_hash.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "96a8d80f7ba43fd608984543d6bc6905f696529f",
      "in_reply_to_id": 509153295,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-11-08T22:31:20Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r519486413",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/519486413"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 121,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/519486432",
      "pull_request_review_id": 525852121,
      "id": 519486432,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ4NjQzMg==",
      "diff_hunk": "@@ -0,0 +1,303 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <cassert>\n+#include <cstdio>\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_t MAX_PRIME_DIFF = 1103717;\n+\n+constexpr size_t INPUT_SIZE = 32;\n+constexpr size_t OUTPUT_SIZE = 384;\n+\n+using limb_t = Num3072::limb_t;\n+using double_limb_t = Num3072::double_limb_t;\n+constexpr int LIMB_SIZE = Num3072::LIMB_SIZE;\n+constexpr int LIMBS = Num3072::LIMBS;\n+\n+// Sanity check for Num3072 constants\n+static_assert(LIMB_SIZE * LIMBS == 3072, \"Num3072 isn't 3072 bits\");\n+static_assert(sizeof(double_limb_t) == sizeof(limb_t) * 2, \"bad size for double_limb_t\");\n+static_assert(sizeof(limb_t) * 8 == LIMB_SIZE, \"LIMB_SIZE is incorrect\");\n+\n+// Hard coded values in MuHash3072 constructor and Finalize\n+static_assert(sizeof(limb_t) == 4 || sizeof(limb_t) == 8, \"bad size for limb_t\");\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+inline void extract2(limb_t& c0, limb_t& c1, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(limb_t& c0, limb_t& c1, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    c1 = t >> LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& d0, limb_t& d1, limb_t& d2, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)d0 * n + c0;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)d1 * n + c1;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(limb_t& c0, limb_t& c1, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)c0 * n;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)c1 * n;\n+    c1 = t;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    limb_t th = t >> LIMB_SIZE;\n+    limb_t tl = t;\n+\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+inline void muldbladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    limb_t th = t >> LIMB_SIZE;\n+    limb_t tl = t;\n+\n+    c0 += tl;\n+    limb_t tt = th + ((c0 < tl) ? 1 : 0);\n+    c1 += tt;\n+    c2 += (c1 < tt) ? 1 : 0;\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1] += a */\n+inline void add2(limb_t& c0, limb_t& c1, const limb_t& a)\n+{\n+    c0 += a;\n+    c1 += (c0 < a) ? 1 : 0;\n+}\n+\n+bool IsOverflow(const Num3072& d)\n+{\n+    if (d.limbs[0] <= std::numeric_limits<limb_t>::max() - MAX_PRIME_DIFF) return false;\n+    for (int i = 1; i < LIMBS; ++i) {\n+        if (d.limbs[i] != std::numeric_limits<limb_t>::max()) return false;\n+    }\n+    return true;\n+}\n+\n+void FullReduce(Num3072& d)\n+{\n+    limb_t c0 = MAX_PRIME_DIFF;\n+    for (int i = 0; i < LIMBS; ++i) {\n+        limb_t c1 = 0;\n+        add2(c0, c1, d.limbs[i]);\n+        extract2(c0, c1, d.limbs[i]);\n+    }\n+}\n+\n+void Multiply(Num3072& in_out, const Num3072& a)\n+{\n+    limb_t c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of in_out*a into tmp, including one reduction. */\n+    for (int j = 0; j < LIMBS - 1; ++j) {\n+        limb_t d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        mul(d0, d1, in_out.limbs[1 + j], a.limbs[LIMBS + j - (1 + j)]);\n+        for (int i = 2 + j; i < LIMBS; ++i) muladd3(d0, d1, d2, in_out.limbs[i], a.limbs[LIMBS + j - i]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < j + 1; ++i) muladd3(c0, c1, c2, in_out.limbs[i], a.limbs[j - i]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+\n+    /* Compute limb N-1 of a*b into tmp. */\n+    limb_t c2 = 0;\n+    for (int i = 0; i < LIMBS; ++i) muladd3(c0, c1, c2, in_out.limbs[i], a.limbs[LIMBS - 1 - i]);\n+    extract3(c0, c1, c2, tmp.limbs[LIMBS - 1]);\n+\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, in_out.limbs[j]);\n+    }\n+\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(in_out);\n+}\n+\n+void Square(Num3072& in_out)\n+{\n+    limb_t c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of in_out*in_out into tmp, including one reduction. */\n+    for (int j = 0; j < LIMBS - 1; ++j) {\n+        limb_t d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        for (int i = 0; i < (LIMBS - 1 - j) / 2; ++i) muldbladd3(d0, d1, d2, in_out.limbs[i + j + 1], in_out.limbs[LIMBS - 1 - i]);\n+        if ((j + 1) & 1) muladd3(d0, d1, d2, in_out.limbs[(LIMBS - 1 - j) / 2 + j + 1], in_out.limbs[LIMBS - 1 - (LIMBS - 1 - j) / 2]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < (j + 1) / 2; ++i) muldbladd3(c0, c1, c2, in_out.limbs[i], in_out.limbs[j - i]);\n+        if ((j + 1) & 1) muladd3(c0, c1, c2, in_out.limbs[(j + 1) / 2], in_out.limbs[j - (j + 1) / 2]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+\n+    limb_t c2 = 0;",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 188,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "96a8d80f7ba43fd608984543d6bc6905f696529f",
      "in_reply_to_id": 509145379,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-11-08T22:31:32Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r519486432",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/519486432"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/519486465",
      "pull_request_review_id": 525852138,
      "id": 519486465,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ4NjQ2NQ==",
      "diff_hunk": "@@ -0,0 +1,303 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <cassert>\n+#include <cstdio>\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_t MAX_PRIME_DIFF = 1103717;\n+\n+constexpr size_t INPUT_SIZE = 32;\n+constexpr size_t OUTPUT_SIZE = 384;\n+\n+using limb_t = Num3072::limb_t;\n+using double_limb_t = Num3072::double_limb_t;\n+constexpr int LIMB_SIZE = Num3072::LIMB_SIZE;\n+constexpr int LIMBS = Num3072::LIMBS;\n+\n+// Sanity check for Num3072 constants\n+static_assert(LIMB_SIZE * LIMBS == 3072, \"Num3072 isn't 3072 bits\");\n+static_assert(sizeof(double_limb_t) == sizeof(limb_t) * 2, \"bad size for double_limb_t\");\n+static_assert(sizeof(limb_t) * 8 == LIMB_SIZE, \"LIMB_SIZE is incorrect\");\n+\n+// Hard coded values in MuHash3072 constructor and Finalize\n+static_assert(sizeof(limb_t) == 4 || sizeof(limb_t) == 8, \"bad size for limb_t\");\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+inline void extract2(limb_t& c0, limb_t& c1, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(limb_t& c0, limb_t& c1, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    c1 = t >> LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& d0, limb_t& d1, limb_t& d2, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)d0 * n + c0;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)d1 * n + c1;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(limb_t& c0, limb_t& c1, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)c0 * n;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)c1 * n;\n+    c1 = t;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    limb_t th = t >> LIMB_SIZE;\n+    limb_t tl = t;\n+\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+inline void muldbladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    limb_t th = t >> LIMB_SIZE;\n+    limb_t tl = t;\n+\n+    c0 += tl;\n+    limb_t tt = th + ((c0 < tl) ? 1 : 0);\n+    c1 += tt;\n+    c2 += (c1 < tt) ? 1 : 0;\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1] += a */\n+inline void add2(limb_t& c0, limb_t& c1, const limb_t& a)\n+{\n+    c0 += a;\n+    c1 += (c0 < a) ? 1 : 0;\n+}\n+\n+bool IsOverflow(const Num3072& d)\n+{\n+    if (d.limbs[0] <= std::numeric_limits<limb_t>::max() - MAX_PRIME_DIFF) return false;\n+    for (int i = 1; i < LIMBS; ++i) {\n+        if (d.limbs[i] != std::numeric_limits<limb_t>::max()) return false;\n+    }\n+    return true;\n+}\n+\n+void FullReduce(Num3072& d)\n+{\n+    limb_t c0 = MAX_PRIME_DIFF;\n+    for (int i = 0; i < LIMBS; ++i) {\n+        limb_t c1 = 0;\n+        add2(c0, c1, d.limbs[i]);\n+        extract2(c0, c1, d.limbs[i]);\n+    }\n+}\n+\n+void Multiply(Num3072& in_out, const Num3072& a)\n+{\n+    limb_t c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of in_out*a into tmp, including one reduction. */\n+    for (int j = 0; j < LIMBS - 1; ++j) {\n+        limb_t d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        mul(d0, d1, in_out.limbs[1 + j], a.limbs[LIMBS + j - (1 + j)]);\n+        for (int i = 2 + j; i < LIMBS; ++i) muladd3(d0, d1, d2, in_out.limbs[i], a.limbs[LIMBS + j - i]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < j + 1; ++i) muladd3(c0, c1, c2, in_out.limbs[i], a.limbs[j - i]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+\n+    /* Compute limb N-1 of a*b into tmp. */\n+    limb_t c2 = 0;",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 154,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "96a8d80f7ba43fd608984543d6bc6905f696529f",
      "in_reply_to_id": 509144274,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-11-08T22:31:39Z",
      "updated_at": "2020-12-22T00:53:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r519486465",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/519486465"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/519486529",
      "pull_request_review_id": 525852189,
      "id": 519486529,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ4NjUyOQ==",
      "diff_hunk": "@@ -0,0 +1,303 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <cassert>\n+#include <cstdio>\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_t MAX_PRIME_DIFF = 1103717;\n+\n+constexpr size_t INPUT_SIZE = 32;\n+constexpr size_t OUTPUT_SIZE = 384;\n+\n+using limb_t = Num3072::limb_t;\n+using double_limb_t = Num3072::double_limb_t;\n+constexpr int LIMB_SIZE = Num3072::LIMB_SIZE;\n+constexpr int LIMBS = Num3072::LIMBS;\n+\n+// Sanity check for Num3072 constants\n+static_assert(LIMB_SIZE * LIMBS == 3072, \"Num3072 isn't 3072 bits\");\n+static_assert(sizeof(double_limb_t) == sizeof(limb_t) * 2, \"bad size for double_limb_t\");\n+static_assert(sizeof(limb_t) * 8 == LIMB_SIZE, \"LIMB_SIZE is incorrect\");\n+\n+// Hard coded values in MuHash3072 constructor and Finalize\n+static_assert(sizeof(limb_t) == 4 || sizeof(limb_t) == 8, \"bad size for limb_t\");\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+inline void extract2(limb_t& c0, limb_t& c1, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(limb_t& c0, limb_t& c1, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    c1 = t >> LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& d0, limb_t& d1, limb_t& d2, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)d0 * n + c0;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)d1 * n + c1;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(limb_t& c0, limb_t& c1, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)c0 * n;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)c1 * n;\n+    c1 = t;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    limb_t th = t >> LIMB_SIZE;\n+    limb_t tl = t;\n+\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+inline void muldbladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    limb_t th = t >> LIMB_SIZE;\n+    limb_t tl = t;\n+\n+    c0 += tl;\n+    limb_t tt = th + ((c0 < tl) ? 1 : 0);\n+    c1 += tt;\n+    c2 += (c1 < tt) ? 1 : 0;\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1] += a */\n+inline void add2(limb_t& c0, limb_t& c1, const limb_t& a)\n+{\n+    c0 += a;\n+    c1 += (c0 < a) ? 1 : 0;\n+}\n+\n+bool IsOverflow(const Num3072& d)",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 119,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "96a8d80f7ba43fd608984543d6bc6905f696529f",
      "in_reply_to_id": 509130310,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added a comment for clarification.",
      "created_at": "2020-11-08T22:32:12Z",
      "updated_at": "2020-12-22T00:53:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r519486529",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/519486529"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/519486578",
      "pull_request_review_id": 525852237,
      "id": 519486578,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ4NjU3OA==",
      "diff_hunk": "@@ -0,0 +1,310 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_t MAX_PRIME_DIFF = 1103717;\n+\n+static constexpr size_t INPUT_SIZE = 32;\n+static constexpr size_t OUTPUT_SIZE = 384;\n+\n+using limb_t = Num3072::limb_t;\n+using double_limb_t = Num3072::double_limb_t;\n+constexpr int LIMB_SIZE = Num3072::LIMB_SIZE;\n+constexpr int LIMBS = Num3072::LIMBS;\n+\n+// Sanity check for Num3072 constants\n+static_assert(LIMB_SIZE * LIMBS == 3072, \"Num3072 isn't 3072 bits\");\n+static_assert(sizeof(double_limb_t) == sizeof(limb_t) * 2, \"bad size for double_limb_t\");\n+static_assert(sizeof(limb_t) * 8 == LIMB_SIZE, \"LIMB_SIZE is incorrect\");\n+\n+// Hard coded values in MuHash3072 constructor and Finalize\n+static_assert(sizeof(limb_t) == 4 || sizeof(limb_t) == 8, \"bad size for limb_t\");\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+inline void extract2(limb_t& c0, limb_t& c1, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(limb_t& c0, limb_t& c1, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    c1 = t >> LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& d0, limb_t& d1, limb_t& d2, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)d0 * n + c0;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)d1 * n + c1;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(limb_t& c0, limb_t& c1, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)c0 * n;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)c1 * n;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    limb_t tl, th;\n+\n+    double_limb_t t = (double_limb_t)a * b;\n+    th = t >> LIMB_SIZE;\n+    tl = t;\n+\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+inline void muldbladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    limb_t tl, th;\n+\n+    double_limb_t t = (double_limb_t)a * b;\n+    th = t >> LIMB_SIZE;\n+    tl = t;\n+\n+    c0 += tl;\n+    limb_t tt = th + ((c0 < tl) ? 1 : 0);\n+    c1 += tt;\n+    c2 += (c1 < tt) ? 1 : 0;\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1] += a */\n+inline void add2(limb_t& c0, limb_t& c1, limb_t& a)",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 119,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "b03e923c534a954edfdd9ef4ec9a68e5dd08d827",
      "in_reply_to_id": 507610270,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-11-08T22:32:54Z",
      "updated_at": "2020-12-22T00:53:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r519486578",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/519486578"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 117,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/519487839",
      "pull_request_review_id": 525853285,
      "id": 519487839,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ4NzgzOQ==",
      "diff_hunk": "@@ -0,0 +1,91 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <serialize.h>\n+\n+#include <stdint.h>\n+\n+struct Num3072 {\n+#ifdef HAVE___INT128\n+    typedef unsigned __int128 double_limb_t;\n+    typedef uint64_t limb_t;\n+    static constexpr int LIMBS = 48;\n+    static constexpr int LIMB_SIZE = 64;\n+#else\n+    typedef uint64_t double_limb_t;\n+    typedef uint32_t limb_t;\n+    static constexpr int LIMBS = 96;\n+    static constexpr int LIMB_SIZE = 32;\n+#endif\n+    limb_t limbs[LIMBS];\n+};\n+\n+/** A class representing MuHash sets\n+ *\n+ * MuHash is a hashing algorithm that supports adding set elements in any\n+ * order but also deleting in any order. As a result, it can maintain a\n+ * running sum for a set of data as a whole, and add/subtract when data\n+ * is added to or removed from it. A downside of MuHash is that computing\n+ * an inverse is relatively expensive. This can be solved by representing\n+ * the running value as a fraction, and multiplying added elements into\n+ * the numerator and removed elements into the denominator. Only when the\n+ * final hash is desired, a single modular inverse and multiplication is\n+ * needed to combine the two.\n+ *\n+ * TODO: Represent running value as a fraction to allow for more intuitive\n+ * use (see above).\n+ *\n+ * As the update operations are also associative, H(a)+H(b)+H(c)+H(d) can\n+ * in fact be computed as (H(a)+H(b)) + (H(c)+H(d)). This implies that\n+ * all of this is perfectly parallellizable: each thread can process an\n+ * arbitrary subset of the update operations, allowing them to be\n+ * efficiently combined later.\n+ *\n+ * Muhash does not support checking if an element is already part of the\n+ * set. That is why this class does not enforce the use of a set as the\n+ * data it represents because there is no efficient way to do so.\n+ * It is possible to add elements more than once and also to remove\n+ * elements that have not been added before. However, this implementation\n+ * is intended to represent a set of elements.\n+ *\n+ * See also https://cseweb.ucsd.edu/~mihir/papers/inchash.pdf and\n+ * https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014337.html.\n+ */\n+class MuHash3072",
      "path": "src/crypto/muhash.h",
      "position": 91,
      "original_position": 62,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "96a8d80f7ba43fd608984543d6bc6905f696529f",
      "in_reply_to_id": 510232044,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I have refactored the code to have clearer boundaries between the two classes. Let me know if this matches your expectation.",
      "created_at": "2020-11-08T22:43:41Z",
      "updated_at": "2020-12-22T00:53:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r519487839",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/519487839"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 91,
      "original_line": 91,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/530660278",
      "pull_request_review_id": 538866956,
      "id": 530660278,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY2MDI3OA==",
      "diff_hunk": "@@ -0,0 +1,303 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <cassert>\n+#include <cstdio>\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_t MAX_PRIME_DIFF = 1103717;\n+\n+constexpr size_t INPUT_SIZE = 32;\n+constexpr size_t OUTPUT_SIZE = 384;\n+\n+using limb_t = Num3072::limb_t;\n+using double_limb_t = Num3072::double_limb_t;\n+constexpr int LIMB_SIZE = Num3072::LIMB_SIZE;\n+constexpr int LIMBS = Num3072::LIMBS;\n+\n+// Sanity check for Num3072 constants\n+static_assert(LIMB_SIZE * LIMBS == 3072, \"Num3072 isn't 3072 bits\");\n+static_assert(sizeof(double_limb_t) == sizeof(limb_t) * 2, \"bad size for double_limb_t\");\n+static_assert(sizeof(limb_t) * 8 == LIMB_SIZE, \"LIMB_SIZE is incorrect\");\n+\n+// Hard coded values in MuHash3072 constructor and Finalize\n+static_assert(sizeof(limb_t) == 4 || sizeof(limb_t) == 8, \"bad size for limb_t\");\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+inline void extract2(limb_t& c0, limb_t& c1, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(limb_t& c0, limb_t& c1, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    c1 = t >> LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& d0, limb_t& d1, limb_t& d2, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)d0 * n + c0;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)d1 * n + c1;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(limb_t& c0, limb_t& c1, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)c0 * n;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)c1 * n;\n+    c1 = t;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    limb_t th = t >> LIMB_SIZE;\n+    limb_t tl = t;\n+\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+inline void muldbladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    limb_t th = t >> LIMB_SIZE;\n+    limb_t tl = t;\n+\n+    c0 += tl;\n+    limb_t tt = th + ((c0 < tl) ? 1 : 0);\n+    c1 += tt;\n+    c2 += (c1 < tt) ? 1 : 0;\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1] += a */\n+inline void add2(limb_t& c0, limb_t& c1, const limb_t& a)\n+{\n+    c0 += a;\n+    c1 += (c0 < a) ? 1 : 0;\n+}\n+\n+bool IsOverflow(const Num3072& d)\n+{\n+    if (d.limbs[0] <= std::numeric_limits<limb_t>::max() - MAX_PRIME_DIFF) return false;\n+    for (int i = 1; i < LIMBS; ++i) {\n+        if (d.limbs[i] != std::numeric_limits<limb_t>::max()) return false;\n+    }\n+    return true;\n+}\n+\n+void FullReduce(Num3072& d)",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 128,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "96a8d80f7ba43fd608984543d6bc6905f696529f",
      "in_reply_to_id": 509142040,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If I got this right, 2. basically means we can have `if (c0)` or `if (IsOverflow())` or both, and in the case of both there is a problem. If I understood that correctly I have addressed this in `Square()` and `Multiply()` with an additional comment.",
      "created_at": "2020-11-25T21:52:10Z",
      "updated_at": "2020-12-22T00:53:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r530660278",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/530660278"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 128,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/530660331",
      "pull_request_review_id": 538867016,
      "id": 530660331,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY2MDMzMQ==",
      "diff_hunk": "@@ -0,0 +1,307 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_t MAX_PRIME_DIFF = 1103717;\n+\n+constexpr size_t INPUT_SIZE = 32;\n+constexpr size_t OUTPUT_SIZE = 384;\n+\n+using limb_t = Num3072::limb_t;\n+using double_limb_t = Num3072::double_limb_t;\n+constexpr int LIMB_SIZE = Num3072::LIMB_SIZE;\n+constexpr int LIMBS = Num3072::LIMBS;\n+\n+// Sanity check for Num3072 constants\n+static_assert(LIMB_SIZE * LIMBS == 3072, \"Num3072 isn't 3072 bits\");\n+static_assert(sizeof(double_limb_t) == sizeof(limb_t) * 2, \"bad size for double_limb_t\");\n+static_assert(sizeof(limb_t) * 8 == LIMB_SIZE, \"LIMB_SIZE is incorrect\");\n+\n+// Hard coded values in MuHash3072 constructor and Finalize\n+static_assert(sizeof(limb_t) == 4 || sizeof(limb_t) == 8, \"bad size for limb_t\");\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+inline void extract2(limb_t& c0, limb_t& c1, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(limb_t& c0, limb_t& c1, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    c1 = t >> LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& d0, limb_t& d1, limb_t& d2, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)d0 * n + c0;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)d1 * n + c1;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(limb_t& c0, limb_t& c1, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)c0 * n;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)c1 * n;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    limb_t th = t >> LIMB_SIZE;\n+    limb_t tl = t;\n+\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+inline void muldbladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    limb_t tl, th;\n+\n+    double_limb_t t = (double_limb_t)a * b;\n+    th = t >> LIMB_SIZE;\n+    tl = t;\n+\n+    c0 += tl;\n+    limb_t tt = th + ((c0 < tl) ? 1 : 0);\n+    c1 += tt;\n+    c2 += (c1 < tt) ? 1 : 0;\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1] += a */\n+inline void add2(limb_t& c0, limb_t& c1, limb_t& a)\n+{\n+    c0 += a;\n+    c1 += (c0 < a) ? 1 : 0;",
      "path": "src/crypto/muhash.cpp",
      "position": null,
      "original_position": 120,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "b29a0fde8784b7574a987dfb037a988b442bf92b",
      "in_reply_to_id": 508277075,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think that is correct. At least I could not find evidence for the opposite. The way it is used it can only happen in `Multiply()` and `Square()` and only on the first limb. I think I have fixed this with a temporary internal c2 variable that catches this overflow if it happens.",
      "created_at": "2020-11-25T21:52:18Z",
      "updated_at": "2020-12-22T00:53:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r530660331",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/530660331"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": 119,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 101,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/530660479",
      "pull_request_review_id": 538867188,
      "id": 530660479,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY2MDQ3OQ==",
      "diff_hunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <serialize.h>\n+\n+#include <stdint.h>\n+\n+struct Num3072 {",
      "path": "src/crypto/muhash.h",
      "position": null,
      "original_position": 16,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "e19e50013478c6b7066aa2c9f7e0d0ee7219e837",
      "in_reply_to_id": 507170069,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Finally had the (seemingly obvious) idea to solve this with a serialized MuHash3072 object.",
      "created_at": "2020-11-25T21:52:44Z",
      "updated_at": "2020-12-22T00:53:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r530660479",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/530660479"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/545088857",
      "pull_request_review_id": 554601511,
      "id": 545088857,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTA4ODg1Nw==",
      "diff_hunk": "@@ -753,6 +753,9 @@ if test x$use_lcov_branch != xno; then\n   AC_SUBST(LCOV_OPTS, \"$LCOV_OPTS --rc lcov_branch_coverage=1\")\n fi\n \n+dnl Check for __int128\n+AC_CHECK_TYPES([__int128])",
      "path": "configure.ac",
      "position": 5,
      "original_position": 5,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "515ee0d0ca91bfdf6a9cd844824e747291efabe9",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "515ee0d0ca91bfdf6a9cd844824e747291efabe9: build system stuff could warrant a separate commit. It gets picked up on my macOS machine, so that's good.\r\n\r\nI you end up splitting the commit, you might as well also introduce `MuHash3072` in its own commit.",
      "created_at": "2020-12-17T13:27:43Z",
      "updated_at": "2020-12-22T00:53:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r545088857",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/545088857"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 757,
      "original_line": 757,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/545126648",
      "pull_request_review_id": 554601511,
      "id": 545126648,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTEyNjY0OA==",
      "diff_hunk": "@@ -0,0 +1,119 @@\n+// Copyright (c) 2017-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <serialize.h>\n+#include <uint256.h>\n+\n+#include <stdint.h>\n+\n+class Num3072\n+{\n+private:\n+    void FullReduce();\n+    bool IsOverflow() const;\n+    Num3072 GetInverse() const;\n+\n+public:\n+\n+#ifdef HAVE___INT128\n+    typedef unsigned __int128 double_limb_t;\n+    typedef uint64_t limb_t;\n+    static constexpr int LIMBS = 48;\n+    static constexpr int LIMB_SIZE = 64;\n+#else\n+    typedef uint64_t double_limb_t;\n+    typedef uint32_t limb_t;\n+    static constexpr int LIMBS = 96;\n+    static constexpr int LIMB_SIZE = 32;\n+#endif\n+    limb_t limbs[LIMBS];\n+\n+    // Sanity check for Num3072 constants\n+    static_assert(LIMB_SIZE * LIMBS == 3072, \"Num3072 isn't 3072 bits\");\n+    static_assert(sizeof(double_limb_t) == sizeof(limb_t) * 2, \"bad size for double_limb_t\");\n+    static_assert(sizeof(limb_t) * 8 == LIMB_SIZE, \"LIMB_SIZE is incorrect\");\n+\n+    // Hard coded values in MuHash3072 constructor and Finalize\n+    static_assert(sizeof(limb_t) == 4 || sizeof(limb_t) == 8, \"bad size for limb_t\");\n+\n+    void Multiply(const Num3072& a);\n+    void Divide(Num3072& a);",
      "path": "src/crypto/muhash.h",
      "position": null,
      "original_position": 48,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "515ee0d0ca91bfdf6a9cd844824e747291efabe9",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I suggest either making `a` `const` (like `Multiply`) or, if it hurts performance, `Divide` private with `MuHash3072` as its friend.",
      "created_at": "2020-12-17T14:21:51Z",
      "updated_at": "2020-12-22T00:53:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r545126648",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/545126648"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 48,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/545144564",
      "pull_request_review_id": 554601511,
      "id": 545144564,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTE0NDU2NA==",
      "diff_hunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <serialize.h>\n+\n+#include <stdint.h>\n+\n+struct Num3072 {\n+#ifdef HAVE___INT128\n+    typedef unsigned __int128 double_limb_t;\n+    typedef uint64_t limb_t;\n+    static constexpr int LIMBS = 48;\n+    static constexpr int LIMB_SIZE = 64;\n+#else\n+    typedef uint64_t double_limb_t;\n+    typedef uint32_t limb_t;\n+    static constexpr int LIMBS = 96;\n+    static constexpr int LIMB_SIZE = 32;\n+#endif\n+    limb_t limbs[LIMBS];\n+};\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+constexpr Num3072::limb_t MAX_PRIME_DIFF = 1103717;\n+\n+/** A class representing MuHash sets\n+ *\n+ * MuHash is a hashing algorithm that supports adding set elements in any\n+ * order but also deleting in any order. As a result, it can maintain a\n+ * running sum for a set of data as a whole, and add/subtract when data\n+ * is added to or removed from it. A downside of MuHash is that computing\n+ * an inverse is relatively expensive. This can be solved by representing\n+ * the running value as a fraction, and multiplying added elements into\n+ * the numerator and removed elements into the denominator. Only when the\n+ * final hash is desired, a single modular inverse and multiplication is\n+ * needed to combine the two.\n+ *\n+ * TODO: Represent running value as a fraction to allow for more intuitive\n+ * use (see above).\n+ *\n+ * As the update operations are also associative, H(a)+H(b)+H(c)+H(d) can\n+ * in fact be computed as (H(a)+H(b)) + (H(c)+H(d)). This implies that\n+ * all of this is perfectly parallellizable: each thread can process an\n+ * arbitrary subset of the update operations, allowing them to be\n+ * efficiently combined later.\n+ *\n+ * Muhash does not support checking if an element is already part of the\n+ * set. That is why this class does not enforce the use of a set as the\n+ * data it represents because there is no efficient way to do so..\n+ * It is possible to add elements more than once and also to remove\n+ * elements that have not been added before. However, this implementation\n+ * is intended to represent a set of elements.\n+ *\n+ * See also https://cseweb.ucsd.edu/~mihir/papers/inchash.pdf and\n+ * https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014337.html.\n+ */\n+class MuHash3072\n+{\n+protected:\n+    Num3072 data;\n+\n+    static constexpr size_t INPUT_SIZE = 32;\n+    static constexpr size_t OUTPUT_SIZE = 384;\n+\n+public:\n+    /* The empty set. */\n+    MuHash3072() noexcept;\n+\n+    /* A singleton with a single 32-byte key in it. */\n+    explicit MuHash3072(Span<const unsigned char> key32) noexcept;\n+\n+    /* Multiply (resulting in a hash for the union of the sets) */\n+    MuHash3072& operator*=(const MuHash3072& add) noexcept;\n+\n+    /* Divide (resulting in a hash for the difference of the sets) */\n+    MuHash3072& operator/=(const MuHash3072& sub) noexcept;\n+\n+    /* Finalize into a 384-byte hash. Does not change this object's value. */\n+    void Finalize(Span<unsigned char> hash384) noexcept;\n+\n+    SERIALIZE_METHODS(MuHash3072, obj)",
      "path": "src/crypto/muhash.h",
      "position": 123,
      "original_position": 89,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "e19e50013478c6b7066aa2c9f7e0d0ee7219e837",
      "in_reply_to_id": 507173075,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "#20315 dropped our big endian Travis instance, but that shouldn't be a problem. Took me a while to wrap my head around... Each limb is serialised as little endian, because `serialize.h` converts `uint32_t` and `uint64_t` to little endian, using  `htole32` / `htole64`. We also treat the collection of limbs as little endian, with the first limb having the least significant digit. This means we can serialise 32 bit limbs on one machine and deserialise the result as 64 bit limbs on another machine.\r\n\r\n(in reply to https://github.com/bitcoin/bitcoin/pull/19055#discussion_r507173075)",
      "created_at": "2020-12-17T14:45:51Z",
      "updated_at": "2020-12-22T00:53:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r545144564",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/545144564"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 123,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546107086",
      "pull_request_review_id": 555834240,
      "id": 546107086,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjEwNzA4Ng==",
      "diff_hunk": "@@ -0,0 +1,315 @@\n+// Copyright (c) 2017-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+#include <hash.h>\n+\n+#include <cassert>\n+#include <cstdio>\n+#include <limits>\n+\n+namespace {\n+\n+using limb_t = Num3072::limb_t;\n+using double_limb_t = Num3072::double_limb_t;\n+constexpr int LIMB_SIZE = Num3072::LIMB_SIZE;\n+constexpr int LIMBS = Num3072::LIMBS;\n+/** 2^3072 - 1103717, the largest 3072-bit safe prime number, is used as the modulus. */\n+constexpr limb_t MAX_PRIME_DIFF = 1103717;\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(limb_t& c0, limb_t& c1, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    c1 = t >> LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& d0, limb_t& d1, limb_t& d2, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)d0 * n + c0;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)d1 * n + c1;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(limb_t& c0, limb_t& c1, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)c0 * n;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)c1 * n;\n+    c1 = t;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    limb_t th = t >> LIMB_SIZE;\n+    limb_t tl = t;\n+\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+inline void muldbladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    limb_t th = t >> LIMB_SIZE;\n+    limb_t tl = t;\n+\n+    c0 += tl;\n+    limb_t tt = th + ((c0 < tl) ? 1 : 0);\n+    c1 += tt;\n+    c2 += (c1 < tt) ? 1 : 0;\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/**\n+ * Add limb a to [c0,c1]: [c0,c1] += a. Then extract the lowest\n+ * limb of [c0,c1] into n, and left shift the number by 1 limb.\n+ * */\n+inline void addnextract2(limb_t& c0, limb_t& c1, const limb_t& a, limb_t& n)\n+{\n+    limb_t c2 = 0;\n+\n+    // add\n+    c0 += a;\n+    if (c0 < a) {\n+        c1 += 1;\n+\n+        // Handle case when c1 has overflown\n+        if (c1 == 0)\n+            c2 = 1;\n+    }\n+\n+    // extract\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+}\n+\n+/** in_out = in_out^(2^sq) * mul */\n+inline void square_n_mul(Num3072& in_out, const int sq, const Num3072& mul)\n+{\n+    for (int j = 0; j < sq; ++j) in_out.Square();\n+    in_out.Multiply(mul);\n+}\n+\n+} // namespace\n+\n+/** Indicates wether d is larger than the modulus. */\n+bool Num3072::IsOverflow() const\n+{\n+    if (this->limbs[0] <= std::numeric_limits<limb_t>::max() - MAX_PRIME_DIFF) return false;\n+    for (int i = 1; i < LIMBS; ++i) {\n+        if (this->limbs[i] != std::numeric_limits<limb_t>::max()) return false;\n+    }\n+    return true;\n+}\n+\n+void Num3072::FullReduce()\n+{\n+    limb_t c0 = MAX_PRIME_DIFF;\n+    limb_t c1 = 0;\n+    for (int i = 0; i < LIMBS; ++i) {\n+        addnextract2(c0, c1, this->limbs[i], this->limbs[i]);\n+    }\n+}\n+\n+Num3072 Num3072::GetInverse() const\n+{\n+    // For fast exponentiation a sliding window exponentiation with repunit\n+    // precomputation is utilized. See \"Fast Point Decompression for Standard\n+    // Elliptic Curves\" (Brumley, Järvinen, 2008).\n+\n+    Num3072 p[12]; // p[i] = a^(2^(2^i)-1)\n+    Num3072 out;\n+\n+    p[0] = *this;\n+\n+    for (int i = 0; i < 11; ++i) {\n+        p[i + 1] = p[i];\n+        for (int j = 0; j < (1 << i); ++j) p[i + 1].Square();\n+        p[i + 1].Multiply(p[i]);\n+    }\n+\n+    out = p[11];\n+\n+    square_n_mul(out, 512, p[9]);\n+    square_n_mul(out, 256, p[8]);\n+    square_n_mul(out, 128, p[7]);\n+    square_n_mul(out, 64, p[6]);\n+    square_n_mul(out, 32, p[5]);\n+    square_n_mul(out, 8, p[3]);\n+    square_n_mul(out, 2, p[1]);\n+    square_n_mul(out, 1, p[0]);\n+    square_n_mul(out, 5, p[2]);\n+    square_n_mul(out, 3, p[0]);\n+    square_n_mul(out, 2, p[0]);\n+    square_n_mul(out, 4, p[0]);\n+    square_n_mul(out, 4, p[1]);\n+    square_n_mul(out, 3, p[0]);\n+\n+    return out;\n+}\n+\n+void Num3072::Multiply(const Num3072& a)\n+{\n+    limb_t c0 = 0, c1 = 0, c2 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of this*a into tmp, including one reduction. */\n+    for (int j = 0; j < LIMBS - 1; ++j) {\n+        limb_t d0 = 0, d1 = 0, d2 = 0;\n+        mul(d0, d1, this->limbs[1 + j], a.limbs[LIMBS + j - (1 + j)]);\n+        for (int i = 2 + j; i < LIMBS; ++i) muladd3(d0, d1, d2, this->limbs[i], a.limbs[LIMBS + j - i]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < j + 1; ++i) muladd3(c0, c1, c2, this->limbs[i], a.limbs[j - i]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+\n+    /* Compute limb N-1 of a*b into tmp. */\n+    assert(c2 == 0);\n+    for (int i = 0; i < LIMBS; ++i) muladd3(c0, c1, c2, this->limbs[i], a.limbs[LIMBS - 1 - i]);\n+    extract3(c0, c1, c2, tmp.limbs[LIMBS - 1]);\n+\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < LIMBS; ++j) {\n+        addnextract2(c0, c1, tmp.limbs[j], this->limbs[j]);\n+    }\n+\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+\n+    /* Perform up to two more reductions if the internal state has already\n+     * overflown the MAX of Num3072 or if it is larger than the modulus or\n+     * if both are the case.\n+     * */\n+    if (this->IsOverflow()) this->FullReduce();\n+    if (c0) this->FullReduce();\n+}\n+\n+void Num3072::Square()\n+{\n+    limb_t c0 = 0, c1 = 0, c2 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of this*this into tmp, including one reduction. */\n+    for (int j = 0; j < LIMBS - 1; ++j) {\n+        limb_t d0 = 0, d1 = 0, d2 = 0;\n+        for (int i = 0; i < (LIMBS - 1 - j) / 2; ++i) muldbladd3(d0, d1, d2, this->limbs[i + j + 1], this->limbs[LIMBS - 1 - i]);\n+        if ((j + 1) & 1) muladd3(d0, d1, d2, this->limbs[(LIMBS - 1 - j) / 2 + j + 1], this->limbs[LIMBS - 1 - (LIMBS - 1 - j) / 2]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < (j + 1) / 2; ++i) muldbladd3(c0, c1, c2, this->limbs[i], this->limbs[j - i]);\n+        if ((j + 1) & 1) muladd3(c0, c1, c2, this->limbs[(j + 1) / 2], this->limbs[j - (j + 1) / 2]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+\n+    assert(c2 == 0);\n+    for (int i = 0; i < LIMBS / 2; ++i) muldbladd3(c0, c1, c2, this->limbs[i], this->limbs[LIMBS - 1 - i]);\n+    extract3(c0, c1, c2, tmp.limbs[LIMBS - 1]);\n+\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < LIMBS; ++j) {\n+        addnextract2(c0, c1, tmp.limbs[j], this->limbs[j]);\n+    }\n+\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+\n+    /* Perform up to two more reductions if the internal state has already\n+     * overflown the MAX of Num3072 or if it is larger than the modulus or\n+     * if both are the case.\n+     * */\n+    if (this->IsOverflow()) this->FullReduce();\n+    if (c0) this->FullReduce();\n+}\n+\n+void Num3072::SetToOne()\n+{\n+    this->limbs[0] = 1;\n+    for (int i = 1; i < LIMBS; ++i) this->limbs[i] = 0;\n+}\n+\n+void Num3072::Divide(Num3072& a)\n+{\n+    if (this->IsOverflow()) this->FullReduce();\n+    if (a.IsOverflow()) a.FullReduce();\n+\n+    Num3072 inv = a.GetInverse();\n+    this->Multiply(inv);\n+    if (this->IsOverflow()) this->FullReduce();\n+}\n+\n+MuHash3072::MuHash3072(Span<const unsigned char> in) noexcept\n+{\n+    uint256 hashed_in = (CHashWriter(SER_DISK, 0) << in).GetSHA256();\n+    unsigned char tmp[BYTE_SIZE];\n+    ChaCha20(hashed_in.data(), hashed_in.size()).Keystream(tmp, BYTE_SIZE);\n+    for (int i = 0; i < LIMBS; ++i) {\n+        if (sizeof(limb_t) == 4) {\n+            m_numerator.limbs[i] = ReadLE32(tmp + 4 * i);\n+        } else if (sizeof(limb_t) == 8) {\n+            m_numerator.limbs[i] = ReadLE64(tmp + 8 * i);\n+        }\n+    }\n+}\n+\n+void MuHash3072::Finalize(uint256& out) noexcept\n+{\n+    m_numerator.Divide(m_denominator);\n+    m_denominator.SetToOne();  // Needed to keep the MuHash object valid\n+\n+    unsigned char data[384];\n+    for (int i = 0; i < LIMBS; ++i) {\n+        if (sizeof(limb_t) == 4) {\n+            WriteLE32(data + i * 4, m_numerator.limbs[i]);\n+        } else if (sizeof(limb_t) == 8) {\n+            WriteLE64(data + i * 8, m_numerator.limbs[i]);\n+        }\n+    }\n+\n+    out = (CHashWriter(SER_DISK, 0) << data).GetSHA256();\n+}\n+\n+MuHash3072& MuHash3072::operator*=(const MuHash3072& mul) noexcept",
      "path": "src/crypto/muhash.cpp",
      "position": 316,
      "original_position": 303,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "515ee0d0ca91bfdf6a9cd844824e747291efabe9",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If the \"MuHash3072\" type is an encapsulation of a set-hash state, then perhaps it's better to give this name \"Add\" or \"Union\" (with a comment explaining the implications of it having multiset semantics)?\r\n\r\nAlso, using this with a pattern of \"accumulator *= MuHash3072{data}\" will involve two multiplications, but the one with the denominator is always 1. Perhaps it's better to have \"Insert\" and \"Remove\" functions (separate from Add/Union and Subtract) that take a Span of a single element to add/remove?",
      "created_at": "2020-12-18T21:49:30Z",
      "updated_at": "2020-12-22T00:53:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r546107086",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546107086"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 316,
      "original_line": 316,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546209372",
      "pull_request_review_id": 555926095,
      "id": 546209372,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIwOTM3Mg==",
      "diff_hunk": "@@ -0,0 +1,315 @@\n+// Copyright (c) 2017-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+#include <hash.h>\n+\n+#include <cassert>\n+#include <cstdio>\n+#include <limits>\n+\n+namespace {\n+\n+using limb_t = Num3072::limb_t;\n+using double_limb_t = Num3072::double_limb_t;\n+constexpr int LIMB_SIZE = Num3072::LIMB_SIZE;\n+constexpr int LIMBS = Num3072::LIMBS;\n+/** 2^3072 - 1103717, the largest 3072-bit safe prime number, is used as the modulus. */\n+constexpr limb_t MAX_PRIME_DIFF = 1103717;\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(limb_t& c0, limb_t& c1, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    c1 = t >> LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& d0, limb_t& d1, limb_t& d2, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)d0 * n + c0;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)d1 * n + c1;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(limb_t& c0, limb_t& c1, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)c0 * n;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)c1 * n;\n+    c1 = t;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    limb_t th = t >> LIMB_SIZE;\n+    limb_t tl = t;\n+\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+inline void muldbladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    limb_t th = t >> LIMB_SIZE;\n+    limb_t tl = t;\n+\n+    c0 += tl;\n+    limb_t tt = th + ((c0 < tl) ? 1 : 0);\n+    c1 += tt;\n+    c2 += (c1 < tt) ? 1 : 0;\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/**\n+ * Add limb a to [c0,c1]: [c0,c1] += a. Then extract the lowest\n+ * limb of [c0,c1] into n, and left shift the number by 1 limb.\n+ * */\n+inline void addnextract2(limb_t& c0, limb_t& c1, const limb_t& a, limb_t& n)\n+{\n+    limb_t c2 = 0;\n+\n+    // add\n+    c0 += a;\n+    if (c0 < a) {\n+        c1 += 1;\n+\n+        // Handle case when c1 has overflown\n+        if (c1 == 0)\n+            c2 = 1;\n+    }\n+\n+    // extract\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+}\n+\n+/** in_out = in_out^(2^sq) * mul */\n+inline void square_n_mul(Num3072& in_out, const int sq, const Num3072& mul)\n+{\n+    for (int j = 0; j < sq; ++j) in_out.Square();\n+    in_out.Multiply(mul);\n+}\n+\n+} // namespace\n+\n+/** Indicates wether d is larger than the modulus. */\n+bool Num3072::IsOverflow() const\n+{\n+    if (this->limbs[0] <= std::numeric_limits<limb_t>::max() - MAX_PRIME_DIFF) return false;\n+    for (int i = 1; i < LIMBS; ++i) {\n+        if (this->limbs[i] != std::numeric_limits<limb_t>::max()) return false;\n+    }\n+    return true;\n+}\n+\n+void Num3072::FullReduce()\n+{\n+    limb_t c0 = MAX_PRIME_DIFF;\n+    limb_t c1 = 0;\n+    for (int i = 0; i < LIMBS; ++i) {\n+        addnextract2(c0, c1, this->limbs[i], this->limbs[i]);\n+    }\n+}\n+\n+Num3072 Num3072::GetInverse() const\n+{\n+    // For fast exponentiation a sliding window exponentiation with repunit\n+    // precomputation is utilized. See \"Fast Point Decompression for Standard\n+    // Elliptic Curves\" (Brumley, Järvinen, 2008).\n+\n+    Num3072 p[12]; // p[i] = a^(2^(2^i)-1)\n+    Num3072 out;\n+\n+    p[0] = *this;\n+\n+    for (int i = 0; i < 11; ++i) {\n+        p[i + 1] = p[i];\n+        for (int j = 0; j < (1 << i); ++j) p[i + 1].Square();\n+        p[i + 1].Multiply(p[i]);\n+    }\n+\n+    out = p[11];\n+\n+    square_n_mul(out, 512, p[9]);\n+    square_n_mul(out, 256, p[8]);\n+    square_n_mul(out, 128, p[7]);\n+    square_n_mul(out, 64, p[6]);\n+    square_n_mul(out, 32, p[5]);\n+    square_n_mul(out, 8, p[3]);\n+    square_n_mul(out, 2, p[1]);\n+    square_n_mul(out, 1, p[0]);\n+    square_n_mul(out, 5, p[2]);\n+    square_n_mul(out, 3, p[0]);\n+    square_n_mul(out, 2, p[0]);\n+    square_n_mul(out, 4, p[0]);\n+    square_n_mul(out, 4, p[1]);\n+    square_n_mul(out, 3, p[0]);\n+\n+    return out;\n+}\n+\n+void Num3072::Multiply(const Num3072& a)\n+{\n+    limb_t c0 = 0, c1 = 0, c2 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of this*a into tmp, including one reduction. */\n+    for (int j = 0; j < LIMBS - 1; ++j) {\n+        limb_t d0 = 0, d1 = 0, d2 = 0;\n+        mul(d0, d1, this->limbs[1 + j], a.limbs[LIMBS + j - (1 + j)]);\n+        for (int i = 2 + j; i < LIMBS; ++i) muladd3(d0, d1, d2, this->limbs[i], a.limbs[LIMBS + j - i]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < j + 1; ++i) muladd3(c0, c1, c2, this->limbs[i], a.limbs[j - i]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+\n+    /* Compute limb N-1 of a*b into tmp. */\n+    assert(c2 == 0);\n+    for (int i = 0; i < LIMBS; ++i) muladd3(c0, c1, c2, this->limbs[i], a.limbs[LIMBS - 1 - i]);\n+    extract3(c0, c1, c2, tmp.limbs[LIMBS - 1]);\n+\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < LIMBS; ++j) {\n+        addnextract2(c0, c1, tmp.limbs[j], this->limbs[j]);\n+    }\n+\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+\n+    /* Perform up to two more reductions if the internal state has already\n+     * overflown the MAX of Num3072 or if it is larger than the modulus or\n+     * if both are the case.\n+     * */\n+    if (this->IsOverflow()) this->FullReduce();\n+    if (c0) this->FullReduce();\n+}\n+\n+void Num3072::Square()\n+{\n+    limb_t c0 = 0, c1 = 0, c2 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of this*this into tmp, including one reduction. */\n+    for (int j = 0; j < LIMBS - 1; ++j) {\n+        limb_t d0 = 0, d1 = 0, d2 = 0;\n+        for (int i = 0; i < (LIMBS - 1 - j) / 2; ++i) muldbladd3(d0, d1, d2, this->limbs[i + j + 1], this->limbs[LIMBS - 1 - i]);\n+        if ((j + 1) & 1) muladd3(d0, d1, d2, this->limbs[(LIMBS - 1 - j) / 2 + j + 1], this->limbs[LIMBS - 1 - (LIMBS - 1 - j) / 2]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < (j + 1) / 2; ++i) muldbladd3(c0, c1, c2, this->limbs[i], this->limbs[j - i]);\n+        if ((j + 1) & 1) muladd3(c0, c1, c2, this->limbs[(j + 1) / 2], this->limbs[j - (j + 1) / 2]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+\n+    assert(c2 == 0);\n+    for (int i = 0; i < LIMBS / 2; ++i) muldbladd3(c0, c1, c2, this->limbs[i], this->limbs[LIMBS - 1 - i]);\n+    extract3(c0, c1, c2, tmp.limbs[LIMBS - 1]);\n+\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < LIMBS; ++j) {\n+        addnextract2(c0, c1, tmp.limbs[j], this->limbs[j]);\n+    }\n+\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+\n+    /* Perform up to two more reductions if the internal state has already\n+     * overflown the MAX of Num3072 or if it is larger than the modulus or\n+     * if both are the case.\n+     * */\n+    if (this->IsOverflow()) this->FullReduce();\n+    if (c0) this->FullReduce();\n+}\n+\n+void Num3072::SetToOne()\n+{\n+    this->limbs[0] = 1;\n+    for (int i = 1; i < LIMBS; ++i) this->limbs[i] = 0;\n+}\n+\n+void Num3072::Divide(Num3072& a)\n+{\n+    if (this->IsOverflow()) this->FullReduce();\n+    if (a.IsOverflow()) a.FullReduce();\n+\n+    Num3072 inv = a.GetInverse();\n+    this->Multiply(inv);\n+    if (this->IsOverflow()) this->FullReduce();\n+}\n+\n+MuHash3072::MuHash3072(Span<const unsigned char> in) noexcept\n+{\n+    uint256 hashed_in = (CHashWriter(SER_DISK, 0) << in).GetSHA256();\n+    unsigned char tmp[BYTE_SIZE];\n+    ChaCha20(hashed_in.data(), hashed_in.size()).Keystream(tmp, BYTE_SIZE);\n+    for (int i = 0; i < LIMBS; ++i) {\n+        if (sizeof(limb_t) == 4) {\n+            m_numerator.limbs[i] = ReadLE32(tmp + 4 * i);\n+        } else if (sizeof(limb_t) == 8) {\n+            m_numerator.limbs[i] = ReadLE64(tmp + 8 * i);\n+        }\n+    }\n+}\n+\n+void MuHash3072::Finalize(uint256& out) noexcept\n+{\n+    m_numerator.Divide(m_denominator);\n+    m_denominator.SetToOne();  // Needed to keep the MuHash object valid\n+\n+    unsigned char data[384];\n+    for (int i = 0; i < LIMBS; ++i) {\n+        if (sizeof(limb_t) == 4) {\n+            WriteLE32(data + i * 4, m_numerator.limbs[i]);\n+        } else if (sizeof(limb_t) == 8) {\n+            WriteLE64(data + i * 8, m_numerator.limbs[i]);\n+        }\n+    }\n+\n+    out = (CHashWriter(SER_DISK, 0) << data).GetSHA256();\n+}\n+\n+MuHash3072& MuHash3072::operator*=(const MuHash3072& mul) noexcept",
      "path": "src/crypto/muhash.cpp",
      "position": 316,
      "original_position": 303,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "515ee0d0ca91bfdf6a9cd844824e747291efabe9",
      "in_reply_to_id": 546107086,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yep, I'm actually implementing a similar accumulator in Go and I'm using Add/Remove that both do a single multiplication and Combine that combines 2 \"accumulators\" and does 2 multiplications.\r\nalso serializing/deserializing can be quite helpful (probably will work similar to finalize, by dividing, normalizing and outputting the numerator)\r\n\r\nFWIW I also tested replacing hash+Chacha20 with a XOF hash (blake2b) and it was slower so I'm sticking with hash+Chacha20",
      "created_at": "2020-12-19T08:12:35Z",
      "updated_at": "2020-12-22T00:53:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r546209372",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546209372"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 316,
      "original_line": 316,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547006838",
      "pull_request_review_id": 556752575,
      "id": 547006838,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzAwNjgzOA==",
      "diff_hunk": "@@ -0,0 +1,315 @@\n+// Copyright (c) 2017-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+#include <hash.h>\n+\n+#include <cassert>\n+#include <cstdio>\n+#include <limits>\n+\n+namespace {\n+\n+using limb_t = Num3072::limb_t;\n+using double_limb_t = Num3072::double_limb_t;\n+constexpr int LIMB_SIZE = Num3072::LIMB_SIZE;\n+constexpr int LIMBS = Num3072::LIMBS;\n+/** 2^3072 - 1103717, the largest 3072-bit safe prime number, is used as the modulus. */\n+constexpr limb_t MAX_PRIME_DIFF = 1103717;\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(limb_t& c0, limb_t& c1, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    c1 = t >> LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& d0, limb_t& d1, limb_t& d2, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)d0 * n + c0;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)d1 * n + c1;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(limb_t& c0, limb_t& c1, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)c0 * n;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)c1 * n;\n+    c1 = t;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    limb_t th = t >> LIMB_SIZE;\n+    limb_t tl = t;\n+\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+inline void muldbladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    limb_t th = t >> LIMB_SIZE;\n+    limb_t tl = t;\n+\n+    c0 += tl;\n+    limb_t tt = th + ((c0 < tl) ? 1 : 0);\n+    c1 += tt;\n+    c2 += (c1 < tt) ? 1 : 0;\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/**\n+ * Add limb a to [c0,c1]: [c0,c1] += a. Then extract the lowest\n+ * limb of [c0,c1] into n, and left shift the number by 1 limb.\n+ * */\n+inline void addnextract2(limb_t& c0, limb_t& c1, const limb_t& a, limb_t& n)\n+{\n+    limb_t c2 = 0;\n+\n+    // add\n+    c0 += a;\n+    if (c0 < a) {\n+        c1 += 1;\n+\n+        // Handle case when c1 has overflown\n+        if (c1 == 0)\n+            c2 = 1;\n+    }\n+\n+    // extract\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+}\n+\n+/** in_out = in_out^(2^sq) * mul */\n+inline void square_n_mul(Num3072& in_out, const int sq, const Num3072& mul)\n+{\n+    for (int j = 0; j < sq; ++j) in_out.Square();\n+    in_out.Multiply(mul);\n+}\n+\n+} // namespace\n+\n+/** Indicates wether d is larger than the modulus. */\n+bool Num3072::IsOverflow() const\n+{\n+    if (this->limbs[0] <= std::numeric_limits<limb_t>::max() - MAX_PRIME_DIFF) return false;\n+    for (int i = 1; i < LIMBS; ++i) {\n+        if (this->limbs[i] != std::numeric_limits<limb_t>::max()) return false;\n+    }\n+    return true;\n+}\n+\n+void Num3072::FullReduce()\n+{\n+    limb_t c0 = MAX_PRIME_DIFF;\n+    limb_t c1 = 0;\n+    for (int i = 0; i < LIMBS; ++i) {\n+        addnextract2(c0, c1, this->limbs[i], this->limbs[i]);\n+    }\n+}\n+\n+Num3072 Num3072::GetInverse() const\n+{\n+    // For fast exponentiation a sliding window exponentiation with repunit\n+    // precomputation is utilized. See \"Fast Point Decompression for Standard\n+    // Elliptic Curves\" (Brumley, Järvinen, 2008).\n+\n+    Num3072 p[12]; // p[i] = a^(2^(2^i)-1)\n+    Num3072 out;\n+\n+    p[0] = *this;\n+\n+    for (int i = 0; i < 11; ++i) {\n+        p[i + 1] = p[i];\n+        for (int j = 0; j < (1 << i); ++j) p[i + 1].Square();\n+        p[i + 1].Multiply(p[i]);\n+    }\n+\n+    out = p[11];\n+\n+    square_n_mul(out, 512, p[9]);\n+    square_n_mul(out, 256, p[8]);\n+    square_n_mul(out, 128, p[7]);\n+    square_n_mul(out, 64, p[6]);\n+    square_n_mul(out, 32, p[5]);\n+    square_n_mul(out, 8, p[3]);\n+    square_n_mul(out, 2, p[1]);\n+    square_n_mul(out, 1, p[0]);\n+    square_n_mul(out, 5, p[2]);\n+    square_n_mul(out, 3, p[0]);\n+    square_n_mul(out, 2, p[0]);\n+    square_n_mul(out, 4, p[0]);\n+    square_n_mul(out, 4, p[1]);\n+    square_n_mul(out, 3, p[0]);\n+\n+    return out;\n+}\n+\n+void Num3072::Multiply(const Num3072& a)\n+{\n+    limb_t c0 = 0, c1 = 0, c2 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of this*a into tmp, including one reduction. */\n+    for (int j = 0; j < LIMBS - 1; ++j) {\n+        limb_t d0 = 0, d1 = 0, d2 = 0;\n+        mul(d0, d1, this->limbs[1 + j], a.limbs[LIMBS + j - (1 + j)]);\n+        for (int i = 2 + j; i < LIMBS; ++i) muladd3(d0, d1, d2, this->limbs[i], a.limbs[LIMBS + j - i]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < j + 1; ++i) muladd3(c0, c1, c2, this->limbs[i], a.limbs[j - i]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+\n+    /* Compute limb N-1 of a*b into tmp. */\n+    assert(c2 == 0);\n+    for (int i = 0; i < LIMBS; ++i) muladd3(c0, c1, c2, this->limbs[i], a.limbs[LIMBS - 1 - i]);\n+    extract3(c0, c1, c2, tmp.limbs[LIMBS - 1]);\n+\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < LIMBS; ++j) {\n+        addnextract2(c0, c1, tmp.limbs[j], this->limbs[j]);\n+    }\n+\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+\n+    /* Perform up to two more reductions if the internal state has already\n+     * overflown the MAX of Num3072 or if it is larger than the modulus or\n+     * if both are the case.\n+     * */\n+    if (this->IsOverflow()) this->FullReduce();\n+    if (c0) this->FullReduce();\n+}\n+\n+void Num3072::Square()\n+{\n+    limb_t c0 = 0, c1 = 0, c2 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of this*this into tmp, including one reduction. */\n+    for (int j = 0; j < LIMBS - 1; ++j) {\n+        limb_t d0 = 0, d1 = 0, d2 = 0;\n+        for (int i = 0; i < (LIMBS - 1 - j) / 2; ++i) muldbladd3(d0, d1, d2, this->limbs[i + j + 1], this->limbs[LIMBS - 1 - i]);\n+        if ((j + 1) & 1) muladd3(d0, d1, d2, this->limbs[(LIMBS - 1 - j) / 2 + j + 1], this->limbs[LIMBS - 1 - (LIMBS - 1 - j) / 2]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < (j + 1) / 2; ++i) muldbladd3(c0, c1, c2, this->limbs[i], this->limbs[j - i]);\n+        if ((j + 1) & 1) muladd3(c0, c1, c2, this->limbs[(j + 1) / 2], this->limbs[j - (j + 1) / 2]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+\n+    assert(c2 == 0);\n+    for (int i = 0; i < LIMBS / 2; ++i) muldbladd3(c0, c1, c2, this->limbs[i], this->limbs[LIMBS - 1 - i]);\n+    extract3(c0, c1, c2, tmp.limbs[LIMBS - 1]);\n+\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < LIMBS; ++j) {\n+        addnextract2(c0, c1, tmp.limbs[j], this->limbs[j]);\n+    }\n+\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+\n+    /* Perform up to two more reductions if the internal state has already\n+     * overflown the MAX of Num3072 or if it is larger than the modulus or\n+     * if both are the case.\n+     * */\n+    if (this->IsOverflow()) this->FullReduce();\n+    if (c0) this->FullReduce();\n+}\n+\n+void Num3072::SetToOne()\n+{\n+    this->limbs[0] = 1;\n+    for (int i = 1; i < LIMBS; ++i) this->limbs[i] = 0;\n+}\n+\n+void Num3072::Divide(Num3072& a)\n+{\n+    if (this->IsOverflow()) this->FullReduce();\n+    if (a.IsOverflow()) a.FullReduce();\n+\n+    Num3072 inv = a.GetInverse();\n+    this->Multiply(inv);\n+    if (this->IsOverflow()) this->FullReduce();\n+}\n+\n+MuHash3072::MuHash3072(Span<const unsigned char> in) noexcept\n+{\n+    uint256 hashed_in = (CHashWriter(SER_DISK, 0) << in).GetSHA256();\n+    unsigned char tmp[BYTE_SIZE];\n+    ChaCha20(hashed_in.data(), hashed_in.size()).Keystream(tmp, BYTE_SIZE);\n+    for (int i = 0; i < LIMBS; ++i) {\n+        if (sizeof(limb_t) == 4) {\n+            m_numerator.limbs[i] = ReadLE32(tmp + 4 * i);\n+        } else if (sizeof(limb_t) == 8) {\n+            m_numerator.limbs[i] = ReadLE64(tmp + 8 * i);\n+        }\n+    }\n+}\n+\n+void MuHash3072::Finalize(uint256& out) noexcept\n+{\n+    m_numerator.Divide(m_denominator);\n+    m_denominator.SetToOne();  // Needed to keep the MuHash object valid\n+\n+    unsigned char data[384];\n+    for (int i = 0; i < LIMBS; ++i) {\n+        if (sizeof(limb_t) == 4) {\n+            WriteLE32(data + i * 4, m_numerator.limbs[i]);\n+        } else if (sizeof(limb_t) == 8) {\n+            WriteLE64(data + i * 8, m_numerator.limbs[i]);\n+        }\n+    }\n+\n+    out = (CHashWriter(SER_DISK, 0) << data).GetSHA256();\n+}\n+\n+MuHash3072& MuHash3072::operator*=(const MuHash3072& mul) noexcept",
      "path": "src/crypto/muhash.cpp",
      "position": 316,
      "original_position": 303,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "515ee0d0ca91bfdf6a9cd844824e747291efabe9",
      "in_reply_to_id": 546107086,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@jnewbery and @ajtowns didn't like \"Add\" (https://github.com/bitcoin/bitcoin/pull/19055#discussion_r509153295) and personally I am not sure about \"Union\" yet so I have kept the namings of *= and /= for now but I have added `Insert` and `Remove` to insert and remove single elements with a single multiplication as suggested.",
      "created_at": "2020-12-22T00:55:04Z",
      "updated_at": "2020-12-22T00:55:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r547006838",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547006838"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 316,
      "original_line": 316,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547007117",
      "pull_request_review_id": 556752834,
      "id": 547007117,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzAwNzExNw==",
      "diff_hunk": "@@ -0,0 +1,119 @@\n+// Copyright (c) 2017-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <serialize.h>\n+#include <uint256.h>\n+\n+#include <stdint.h>\n+\n+class Num3072\n+{\n+private:\n+    void FullReduce();\n+    bool IsOverflow() const;\n+    Num3072 GetInverse() const;\n+\n+public:\n+\n+#ifdef HAVE___INT128\n+    typedef unsigned __int128 double_limb_t;\n+    typedef uint64_t limb_t;\n+    static constexpr int LIMBS = 48;\n+    static constexpr int LIMB_SIZE = 64;\n+#else\n+    typedef uint64_t double_limb_t;\n+    typedef uint32_t limb_t;\n+    static constexpr int LIMBS = 96;\n+    static constexpr int LIMB_SIZE = 32;\n+#endif\n+    limb_t limbs[LIMBS];\n+\n+    // Sanity check for Num3072 constants\n+    static_assert(LIMB_SIZE * LIMBS == 3072, \"Num3072 isn't 3072 bits\");\n+    static_assert(sizeof(double_limb_t) == sizeof(limb_t) * 2, \"bad size for double_limb_t\");\n+    static_assert(sizeof(limb_t) * 8 == LIMB_SIZE, \"LIMB_SIZE is incorrect\");\n+\n+    // Hard coded values in MuHash3072 constructor and Finalize\n+    static_assert(sizeof(limb_t) == 4 || sizeof(limb_t) == 8, \"bad size for limb_t\");\n+\n+    void Multiply(const Num3072& a);\n+    void Divide(Num3072& a);",
      "path": "src/crypto/muhash.h",
      "position": null,
      "original_position": 48,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "515ee0d0ca91bfdf6a9cd844824e747291efabe9",
      "in_reply_to_id": 545126648,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I do a reduction on `a` if it's needed so when it's `const` I would need an intermediary variable. But at least this should not happen too often so I implemented this although it complicates the code a little bit so I am still undecided if it's an improvement.",
      "created_at": "2020-12-22T00:55:58Z",
      "updated_at": "2020-12-22T00:55:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r547007117",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547007117"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 48,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547007156",
      "pull_request_review_id": 556752878,
      "id": 547007156,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzAwNzE1Ng==",
      "diff_hunk": "@@ -753,6 +753,9 @@ if test x$use_lcov_branch != xno; then\n   AC_SUBST(LCOV_OPTS, \"$LCOV_OPTS --rc lcov_branch_coverage=1\")\n fi\n \n+dnl Check for __int128\n+AC_CHECK_TYPES([__int128])",
      "path": "configure.ac",
      "position": 5,
      "original_position": 5,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "515ee0d0ca91bfdf6a9cd844824e747291efabe9",
      "in_reply_to_id": 545088857,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, I have split up the large commit into four separate ones and melted the other unit test commit with one of them. I think this will help with reviews.",
      "created_at": "2020-12-22T00:56:08Z",
      "updated_at": "2020-12-22T00:56:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r547007156",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547007156"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 757,
      "original_line": 757,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547213514",
      "pull_request_review_id": 556997112,
      "id": 547213514,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIxMzUxNA==",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+// Copyright (c) 2017-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <serialize.h>\n+#include <uint256.h>\n+\n+#include <stdint.h>\n+\n+class Num3072\n+{\n+private:\n+    void FullReduce();\n+    bool IsOverflow() const;\n+    Num3072 GetInverse() const;\n+\n+public:\n+\n+#ifdef HAVE___INT128\n+    typedef unsigned __int128 double_limb_t;\n+    typedef uint64_t limb_t;\n+    static constexpr int LIMBS = 48;\n+    static constexpr int LIMB_SIZE = 64;\n+#else\n+    typedef uint64_t double_limb_t;\n+    typedef uint32_t limb_t;\n+    static constexpr int LIMBS = 96;\n+    static constexpr int LIMB_SIZE = 32;\n+#endif\n+    limb_t limbs[LIMBS];\n+\n+    // Sanity check for Num3072 constants\n+    static_assert(LIMB_SIZE * LIMBS == 3072, \"Num3072 isn't 3072 bits\");\n+    static_assert(sizeof(double_limb_t) == sizeof(limb_t) * 2, \"bad size for double_limb_t\");\n+    static_assert(sizeof(limb_t) * 8 == LIMB_SIZE, \"LIMB_SIZE is incorrect\");\n+\n+    // Hard coded values in MuHash3072 constructor and Finalize\n+    static_assert(sizeof(limb_t) == 4 || sizeof(limb_t) == 8, \"bad size for limb_t\");\n+\n+    void Multiply(const Num3072& a);\n+    void Divide(const Num3072& a);\n+    void SetToOne();\n+    void Square();\n+\n+    Num3072() { this->SetToOne(); };\n+\n+    SERIALIZE_METHODS(Num3072, obj)\n+    {\n+        for (auto& limb : obj.limbs) {\n+            READWRITE(limb);\n+        }\n+    }\n+};\n+\n+/** A class representing MuHash sets\n+ *\n+ * MuHash is a hashing algorithm that supports adding set elements in any\n+ * order but also deleting in any order. As a result, it can maintain a\n+ * running sum for a set of data as a whole, and add/remove when data\n+ * is added to or removed from it. A downside of MuHash is that computing\n+ * an inverse is relatively expensive. This is solved by representing\n+ * the running value as a fraction, and multiplying added elements into\n+ * the numerator and removed elements into the denominator. Only when the\n+ * final hash is desired, a single modular inverse and multiplication is\n+ * needed to combine the two. The combination is also run on serialization\n+ * to allow for space-efficient storage on disk.\n+ *\n+ * As the update operations are also associative, H(a)+H(b)+H(c)+H(d) can\n+ * in fact be computed as (H(a)+H(b)) + (H(c)+H(d)). This implies that\n+ * all of this is perfectly parallellizable: each thread can process an\n+ * arbitrary subset of the update operations, allowing them to be\n+ * efficiently combined later.\n+ *\n+ * Muhash does not support checking if an element is already part of the\n+ * set. That is why this class does not enforce the use of a set as the\n+ * data it represents because there is no efficient way to do so.\n+ * It is possible to add elements more than once and also to remove\n+ * elements that have not been added before. However, this implementation\n+ * is intended to represent a set of elements.\n+ *\n+ * See also https://cseweb.ucsd.edu/~mihir/papers/inchash.pdf and\n+ * https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014337.html.\n+ */\n+class MuHash3072\n+{\n+private:\n+    static constexpr size_t BYTE_SIZE = 384;\n+\n+    Num3072 m_numerator;\n+    Num3072 m_denominator;\n+\n+    Num3072 ToNum3072(Span<const unsigned char> in);\n+\n+public:\n+    /* The empty set. */\n+    MuHash3072() noexcept {};\n+\n+    /* A singleton with variable sized data in it. */\n+    explicit MuHash3072(Span<const unsigned char> in) noexcept;\n+\n+    /* Insert a single piece of data into the set. */\n+    MuHash3072& Insert(Span<const unsigned char> in) noexcept;\n+\n+    /* Remove a single piece of data from the set. */\n+    MuHash3072& Remove(Span<const unsigned char> in) noexcept;\n+\n+    /* Multiply (resulting in a hash for the union of the sets) */\n+    MuHash3072& operator*=(const MuHash3072& mul) noexcept;\n+\n+    /* Divide (resulting in a hash for the difference of the sets) */\n+    MuHash3072& operator/=(const MuHash3072& div) noexcept;\n+\n+    /* Finalize into a 32-byte hash. Does not change this object's value. */\n+    void Finalize(uint256& out) noexcept;\n+\n+    SERIALIZE_METHODS(MuHash3072, obj)\n+    {\n+        READWRITE(obj.m_numerator);\n+        READWRITE(obj.m_denominator);",
      "path": "src/crypto/muhash.h",
      "position": 126,
      "original_position": 126,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "in_reply_to_id": null,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is this really what we want?\r\nor do we want it to normalize it (like Finalize does) and then just serialize the numerator?",
      "created_at": "2020-12-22T11:03:20Z",
      "updated_at": "2020-12-22T11:03:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r547213514",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547213514"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": 123,
      "original_start_line": 123,
      "start_side": "RIGHT",
      "line": 126,
      "original_line": 126,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547223670",
      "pull_request_review_id": 557010079,
      "id": 547223670,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIyMzY3MA==",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+// Copyright (c) 2017-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <serialize.h>\n+#include <uint256.h>\n+\n+#include <stdint.h>\n+\n+class Num3072\n+{\n+private:\n+    void FullReduce();\n+    bool IsOverflow() const;\n+    Num3072 GetInverse() const;\n+\n+public:\n+\n+#ifdef HAVE___INT128\n+    typedef unsigned __int128 double_limb_t;\n+    typedef uint64_t limb_t;\n+    static constexpr int LIMBS = 48;\n+    static constexpr int LIMB_SIZE = 64;\n+#else\n+    typedef uint64_t double_limb_t;\n+    typedef uint32_t limb_t;\n+    static constexpr int LIMBS = 96;\n+    static constexpr int LIMB_SIZE = 32;\n+#endif\n+    limb_t limbs[LIMBS];\n+\n+    // Sanity check for Num3072 constants\n+    static_assert(LIMB_SIZE * LIMBS == 3072, \"Num3072 isn't 3072 bits\");\n+    static_assert(sizeof(double_limb_t) == sizeof(limb_t) * 2, \"bad size for double_limb_t\");\n+    static_assert(sizeof(limb_t) * 8 == LIMB_SIZE, \"LIMB_SIZE is incorrect\");\n+\n+    // Hard coded values in MuHash3072 constructor and Finalize\n+    static_assert(sizeof(limb_t) == 4 || sizeof(limb_t) == 8, \"bad size for limb_t\");\n+\n+    void Multiply(const Num3072& a);\n+    void Divide(const Num3072& a);\n+    void SetToOne();\n+    void Square();\n+\n+    Num3072() { this->SetToOne(); };\n+\n+    SERIALIZE_METHODS(Num3072, obj)\n+    {\n+        for (auto& limb : obj.limbs) {\n+            READWRITE(limb);\n+        }\n+    }\n+};\n+\n+/** A class representing MuHash sets\n+ *\n+ * MuHash is a hashing algorithm that supports adding set elements in any\n+ * order but also deleting in any order. As a result, it can maintain a\n+ * running sum for a set of data as a whole, and add/remove when data\n+ * is added to or removed from it. A downside of MuHash is that computing\n+ * an inverse is relatively expensive. This is solved by representing\n+ * the running value as a fraction, and multiplying added elements into\n+ * the numerator and removed elements into the denominator. Only when the\n+ * final hash is desired, a single modular inverse and multiplication is\n+ * needed to combine the two. The combination is also run on serialization\n+ * to allow for space-efficient storage on disk.\n+ *\n+ * As the update operations are also associative, H(a)+H(b)+H(c)+H(d) can\n+ * in fact be computed as (H(a)+H(b)) + (H(c)+H(d)). This implies that\n+ * all of this is perfectly parallellizable: each thread can process an\n+ * arbitrary subset of the update operations, allowing them to be\n+ * efficiently combined later.\n+ *\n+ * Muhash does not support checking if an element is already part of the\n+ * set. That is why this class does not enforce the use of a set as the\n+ * data it represents because there is no efficient way to do so.\n+ * It is possible to add elements more than once and also to remove\n+ * elements that have not been added before. However, this implementation\n+ * is intended to represent a set of elements.\n+ *\n+ * See also https://cseweb.ucsd.edu/~mihir/papers/inchash.pdf and\n+ * https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014337.html.\n+ */\n+class MuHash3072\n+{\n+private:\n+    static constexpr size_t BYTE_SIZE = 384;\n+\n+    Num3072 m_numerator;\n+    Num3072 m_denominator;\n+\n+    Num3072 ToNum3072(Span<const unsigned char> in);\n+\n+public:\n+    /* The empty set. */\n+    MuHash3072() noexcept {};\n+\n+    /* A singleton with variable sized data in it. */\n+    explicit MuHash3072(Span<const unsigned char> in) noexcept;\n+\n+    /* Insert a single piece of data into the set. */\n+    MuHash3072& Insert(Span<const unsigned char> in) noexcept;\n+\n+    /* Remove a single piece of data from the set. */\n+    MuHash3072& Remove(Span<const unsigned char> in) noexcept;\n+\n+    /* Multiply (resulting in a hash for the union of the sets) */\n+    MuHash3072& operator*=(const MuHash3072& mul) noexcept;\n+\n+    /* Divide (resulting in a hash for the difference of the sets) */\n+    MuHash3072& operator/=(const MuHash3072& div) noexcept;\n+\n+    /* Finalize into a 32-byte hash. Does not change this object's value. */\n+    void Finalize(uint256& out) noexcept;\n+\n+    SERIALIZE_METHODS(MuHash3072, obj)\n+    {\n+        READWRITE(obj.m_numerator);\n+        READWRITE(obj.m_denominator);",
      "path": "src/crypto/muhash.h",
      "position": 126,
      "original_position": 126,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "in_reply_to_id": 547213514,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That might be a good idea. If we want to use MuHash in combination with assumeutxo then the shorter the (marginally) better.",
      "created_at": "2020-12-22T11:26:13Z",
      "updated_at": "2020-12-22T11:26:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r547223670",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547223670"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": 123,
      "original_start_line": 123,
      "start_side": "RIGHT",
      "line": 126,
      "original_line": 126,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547224730",
      "pull_request_review_id": 557011454,
      "id": 547224730,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIyNDczMA==",
      "diff_hunk": "@@ -0,0 +1,119 @@\n+// Copyright (c) 2017-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <serialize.h>\n+#include <uint256.h>\n+\n+#include <stdint.h>\n+\n+class Num3072\n+{\n+private:\n+    void FullReduce();\n+    bool IsOverflow() const;\n+    Num3072 GetInverse() const;\n+\n+public:\n+\n+#ifdef HAVE___INT128\n+    typedef unsigned __int128 double_limb_t;\n+    typedef uint64_t limb_t;\n+    static constexpr int LIMBS = 48;\n+    static constexpr int LIMB_SIZE = 64;\n+#else\n+    typedef uint64_t double_limb_t;\n+    typedef uint32_t limb_t;\n+    static constexpr int LIMBS = 96;\n+    static constexpr int LIMB_SIZE = 32;\n+#endif\n+    limb_t limbs[LIMBS];\n+\n+    // Sanity check for Num3072 constants\n+    static_assert(LIMB_SIZE * LIMBS == 3072, \"Num3072 isn't 3072 bits\");\n+    static_assert(sizeof(double_limb_t) == sizeof(limb_t) * 2, \"bad size for double_limb_t\");\n+    static_assert(sizeof(limb_t) * 8 == LIMB_SIZE, \"LIMB_SIZE is incorrect\");\n+\n+    // Hard coded values in MuHash3072 constructor and Finalize\n+    static_assert(sizeof(limb_t) == 4 || sizeof(limb_t) == 8, \"bad size for limb_t\");\n+\n+    void Multiply(const Num3072& a);\n+    void Divide(Num3072& a);",
      "path": "src/crypto/muhash.h",
      "position": null,
      "original_position": 48,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "515ee0d0ca91bfdf6a9cd844824e747291efabe9",
      "in_reply_to_id": 545126648,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It should make it less likely for a future user of `Num3072` to shoot themselves in the foot, by calling `Divide(a)` and using `a` afterwards. ",
      "created_at": "2020-12-22T11:28:27Z",
      "updated_at": "2020-12-22T11:29:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r547224730",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547224730"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 48,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547518507",
      "pull_request_review_id": 557380555,
      "id": 547518507,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUxODUwNw==",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+// Copyright (c) 2017-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <serialize.h>\n+#include <uint256.h>\n+\n+#include <stdint.h>\n+\n+class Num3072\n+{\n+private:\n+    void FullReduce();\n+    bool IsOverflow() const;\n+    Num3072 GetInverse() const;\n+\n+public:\n+\n+#ifdef HAVE___INT128\n+    typedef unsigned __int128 double_limb_t;\n+    typedef uint64_t limb_t;\n+    static constexpr int LIMBS = 48;\n+    static constexpr int LIMB_SIZE = 64;\n+#else\n+    typedef uint64_t double_limb_t;\n+    typedef uint32_t limb_t;\n+    static constexpr int LIMBS = 96;\n+    static constexpr int LIMB_SIZE = 32;\n+#endif\n+    limb_t limbs[LIMBS];\n+\n+    // Sanity check for Num3072 constants\n+    static_assert(LIMB_SIZE * LIMBS == 3072, \"Num3072 isn't 3072 bits\");\n+    static_assert(sizeof(double_limb_t) == sizeof(limb_t) * 2, \"bad size for double_limb_t\");\n+    static_assert(sizeof(limb_t) * 8 == LIMB_SIZE, \"LIMB_SIZE is incorrect\");\n+\n+    // Hard coded values in MuHash3072 constructor and Finalize\n+    static_assert(sizeof(limb_t) == 4 || sizeof(limb_t) == 8, \"bad size for limb_t\");\n+\n+    void Multiply(const Num3072& a);\n+    void Divide(const Num3072& a);\n+    void SetToOne();\n+    void Square();\n+\n+    Num3072() { this->SetToOne(); };\n+\n+    SERIALIZE_METHODS(Num3072, obj)\n+    {\n+        for (auto& limb : obj.limbs) {\n+            READWRITE(limb);\n+        }\n+    }\n+};\n+\n+/** A class representing MuHash sets\n+ *\n+ * MuHash is a hashing algorithm that supports adding set elements in any\n+ * order but also deleting in any order. As a result, it can maintain a\n+ * running sum for a set of data as a whole, and add/remove when data\n+ * is added to or removed from it. A downside of MuHash is that computing\n+ * an inverse is relatively expensive. This is solved by representing\n+ * the running value as a fraction, and multiplying added elements into\n+ * the numerator and removed elements into the denominator. Only when the\n+ * final hash is desired, a single modular inverse and multiplication is\n+ * needed to combine the two. The combination is also run on serialization\n+ * to allow for space-efficient storage on disk.\n+ *\n+ * As the update operations are also associative, H(a)+H(b)+H(c)+H(d) can\n+ * in fact be computed as (H(a)+H(b)) + (H(c)+H(d)). This implies that\n+ * all of this is perfectly parallellizable: each thread can process an\n+ * arbitrary subset of the update operations, allowing them to be\n+ * efficiently combined later.\n+ *\n+ * Muhash does not support checking if an element is already part of the\n+ * set. That is why this class does not enforce the use of a set as the\n+ * data it represents because there is no efficient way to do so.\n+ * It is possible to add elements more than once and also to remove\n+ * elements that have not been added before. However, this implementation\n+ * is intended to represent a set of elements.\n+ *\n+ * See also https://cseweb.ucsd.edu/~mihir/papers/inchash.pdf and\n+ * https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014337.html.\n+ */\n+class MuHash3072\n+{\n+private:\n+    static constexpr size_t BYTE_SIZE = 384;\n+\n+    Num3072 m_numerator;\n+    Num3072 m_denominator;\n+\n+    Num3072 ToNum3072(Span<const unsigned char> in);\n+\n+public:\n+    /* The empty set. */\n+    MuHash3072() noexcept {};\n+\n+    /* A singleton with variable sized data in it. */\n+    explicit MuHash3072(Span<const unsigned char> in) noexcept;\n+\n+    /* Insert a single piece of data into the set. */\n+    MuHash3072& Insert(Span<const unsigned char> in) noexcept;\n+\n+    /* Remove a single piece of data from the set. */\n+    MuHash3072& Remove(Span<const unsigned char> in) noexcept;\n+\n+    /* Multiply (resulting in a hash for the union of the sets) */\n+    MuHash3072& operator*=(const MuHash3072& mul) noexcept;\n+\n+    /* Divide (resulting in a hash for the difference of the sets) */\n+    MuHash3072& operator/=(const MuHash3072& div) noexcept;\n+\n+    /* Finalize into a 32-byte hash. Does not change this object's value. */\n+    void Finalize(uint256& out) noexcept;\n+\n+    SERIALIZE_METHODS(MuHash3072, obj)\n+    {\n+        READWRITE(obj.m_numerator);\n+        READWRITE(obj.m_denominator);",
      "path": "src/crypto/muhash.h",
      "position": 126,
      "original_position": 126,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "in_reply_to_id": 547213514,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Right, that would be nicer and I had implemented it like that a few weeks ago but decided to kick it out again because code-wise it felt awkward to force normalization before every serialization. Maybe there is a better way to do it than what I tried code-wise. I don't think I found another example of where something comparable is done IIRC. Overall, normalizing is an expensive operation that would need to run quite for every serialization to result in a 50% space-saving on disk. However, for CoinstatsIndex I only save a single MuHash3072 to disk at any time, so at least for that, it would only save 384 bytes total. That's why I took the easy way and kept it as it is now.\r\n\r\nI can try to revive my old branch and push it for the sake of discussion. But I am not sure why it makes a difference for assumeutxo, wouldn't we use the finalized 32 byte hash for that as well?",
      "created_at": "2020-12-22T21:36:34Z",
      "updated_at": "2020-12-22T21:36:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r547518507",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547518507"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": 123,
      "original_start_line": 123,
      "start_side": "RIGHT",
      "line": 126,
      "original_line": 126,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547899299",
      "pull_request_review_id": 557794684,
      "id": 547899299,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg5OTI5OQ==",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+// Copyright (c) 2017-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <serialize.h>\n+#include <uint256.h>\n+\n+#include <stdint.h>\n+\n+class Num3072\n+{\n+private:\n+    void FullReduce();\n+    bool IsOverflow() const;\n+    Num3072 GetInverse() const;\n+\n+public:\n+\n+#ifdef HAVE___INT128\n+    typedef unsigned __int128 double_limb_t;\n+    typedef uint64_t limb_t;\n+    static constexpr int LIMBS = 48;\n+    static constexpr int LIMB_SIZE = 64;\n+#else\n+    typedef uint64_t double_limb_t;\n+    typedef uint32_t limb_t;\n+    static constexpr int LIMBS = 96;\n+    static constexpr int LIMB_SIZE = 32;\n+#endif\n+    limb_t limbs[LIMBS];\n+\n+    // Sanity check for Num3072 constants\n+    static_assert(LIMB_SIZE * LIMBS == 3072, \"Num3072 isn't 3072 bits\");\n+    static_assert(sizeof(double_limb_t) == sizeof(limb_t) * 2, \"bad size for double_limb_t\");\n+    static_assert(sizeof(limb_t) * 8 == LIMB_SIZE, \"LIMB_SIZE is incorrect\");\n+\n+    // Hard coded values in MuHash3072 constructor and Finalize\n+    static_assert(sizeof(limb_t) == 4 || sizeof(limb_t) == 8, \"bad size for limb_t\");\n+\n+    void Multiply(const Num3072& a);\n+    void Divide(const Num3072& a);\n+    void SetToOne();\n+    void Square();\n+\n+    Num3072() { this->SetToOne(); };\n+\n+    SERIALIZE_METHODS(Num3072, obj)\n+    {\n+        for (auto& limb : obj.limbs) {\n+            READWRITE(limb);\n+        }\n+    }\n+};\n+\n+/** A class representing MuHash sets\n+ *\n+ * MuHash is a hashing algorithm that supports adding set elements in any\n+ * order but also deleting in any order. As a result, it can maintain a\n+ * running sum for a set of data as a whole, and add/remove when data\n+ * is added to or removed from it. A downside of MuHash is that computing\n+ * an inverse is relatively expensive. This is solved by representing\n+ * the running value as a fraction, and multiplying added elements into\n+ * the numerator and removed elements into the denominator. Only when the\n+ * final hash is desired, a single modular inverse and multiplication is\n+ * needed to combine the two. The combination is also run on serialization\n+ * to allow for space-efficient storage on disk.\n+ *\n+ * As the update operations are also associative, H(a)+H(b)+H(c)+H(d) can\n+ * in fact be computed as (H(a)+H(b)) + (H(c)+H(d)). This implies that\n+ * all of this is perfectly parallellizable: each thread can process an\n+ * arbitrary subset of the update operations, allowing them to be\n+ * efficiently combined later.\n+ *\n+ * Muhash does not support checking if an element is already part of the\n+ * set. That is why this class does not enforce the use of a set as the\n+ * data it represents because there is no efficient way to do so.\n+ * It is possible to add elements more than once and also to remove\n+ * elements that have not been added before. However, this implementation\n+ * is intended to represent a set of elements.\n+ *\n+ * See also https://cseweb.ucsd.edu/~mihir/papers/inchash.pdf and\n+ * https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014337.html.\n+ */\n+class MuHash3072\n+{\n+private:\n+    static constexpr size_t BYTE_SIZE = 384;\n+\n+    Num3072 m_numerator;\n+    Num3072 m_denominator;\n+\n+    Num3072 ToNum3072(Span<const unsigned char> in);\n+\n+public:\n+    /* The empty set. */\n+    MuHash3072() noexcept {};\n+\n+    /* A singleton with variable sized data in it. */\n+    explicit MuHash3072(Span<const unsigned char> in) noexcept;\n+\n+    /* Insert a single piece of data into the set. */\n+    MuHash3072& Insert(Span<const unsigned char> in) noexcept;\n+\n+    /* Remove a single piece of data from the set. */\n+    MuHash3072& Remove(Span<const unsigned char> in) noexcept;\n+\n+    /* Multiply (resulting in a hash for the union of the sets) */\n+    MuHash3072& operator*=(const MuHash3072& mul) noexcept;\n+\n+    /* Divide (resulting in a hash for the difference of the sets) */\n+    MuHash3072& operator/=(const MuHash3072& div) noexcept;\n+\n+    /* Finalize into a 32-byte hash. Does not change this object's value. */\n+    void Finalize(uint256& out) noexcept;\n+\n+    SERIALIZE_METHODS(MuHash3072, obj)\n+    {\n+        READWRITE(obj.m_numerator);\n+        READWRITE(obj.m_denominator);",
      "path": "src/crypto/muhash.h",
      "position": 126,
      "original_position": 126,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "in_reply_to_id": 547213514,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "it depends, if we ever add a commitment to this in the coinbase or something like that then we might want to also save the MuHash in the undoBlocks.\r\nBut I think there's no point in discussing this now, so IMO you can leave it as-is",
      "created_at": "2020-12-23T10:55:07Z",
      "updated_at": "2020-12-23T10:55:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r547899299",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547899299"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": 123,
      "original_start_line": 123,
      "start_side": "RIGHT",
      "line": 126,
      "original_line": 126,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562098872",
      "pull_request_review_id": 573610664,
      "id": 562098872,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjA5ODg3Mg==",
      "diff_hunk": "@@ -0,0 +1,338 @@\n+// Copyright (c) 2017-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+#include <hash.h>\n+\n+#include <cassert>\n+#include <cstdio>\n+#include <limits>\n+\n+namespace {\n+\n+using limb_t = Num3072::limb_t;\n+using double_limb_t = Num3072::double_limb_t;\n+constexpr int LIMB_SIZE = Num3072::LIMB_SIZE;\n+constexpr int LIMBS = Num3072::LIMBS;\n+/** 2^3072 - 1103717, the largest 3072-bit safe prime number, is used as the modulus. */\n+constexpr limb_t MAX_PRIME_DIFF = 1103717;\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(limb_t& c0, limb_t& c1, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    c1 = t >> LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& d0, limb_t& d1, limb_t& d2, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)d0 * n + c0;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)d1 * n + c1;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(limb_t& c0, limb_t& c1, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)c0 * n;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)c1 * n;\n+    c1 = t;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    limb_t th = t >> LIMB_SIZE;\n+    limb_t tl = t;\n+\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+inline void muldbladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    limb_t th = t >> LIMB_SIZE;\n+    limb_t tl = t;\n+\n+    c0 += tl;\n+    limb_t tt = th + ((c0 < tl) ? 1 : 0);\n+    c1 += tt;\n+    c2 += (c1 < tt) ? 1 : 0;\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/**\n+ * Add limb a to [c0,c1]: [c0,c1] += a. Then extract the lowest\n+ * limb of [c0,c1] into n, and left shift the number by 1 limb.\n+ * */\n+inline void addnextract2(limb_t& c0, limb_t& c1, const limb_t& a, limb_t& n)\n+{\n+    limb_t c2 = 0;\n+\n+    // add\n+    c0 += a;\n+    if (c0 < a) {\n+        c1 += 1;\n+\n+        // Handle case when c1 has overflown\n+        if (c1 == 0)\n+            c2 = 1;\n+    }\n+\n+    // extract\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+}\n+\n+/** in_out = in_out^(2^sq) * mul */\n+inline void square_n_mul(Num3072& in_out, const int sq, const Num3072& mul)\n+{\n+    for (int j = 0; j < sq; ++j) in_out.Square();\n+    in_out.Multiply(mul);\n+}\n+\n+} // namespace\n+\n+/** Indicates wether d is larger than the modulus. */",
      "path": "src/crypto/muhash.cpp",
      "position": 126,
      "original_position": 126,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "typo: wether -> whether ",
      "created_at": "2021-01-21T18:18:48Z",
      "updated_at": "2021-01-21T18:18:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r562098872",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562098872"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 126,
      "original_line": 126,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562216486",
      "pull_request_review_id": 573760504,
      "id": 562216486,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjIxNjQ4Ng==",
      "diff_hunk": "@@ -0,0 +1,338 @@\n+// Copyright (c) 2017-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+#include <hash.h>\n+\n+#include <cassert>\n+#include <cstdio>\n+#include <limits>\n+\n+namespace {\n+\n+using limb_t = Num3072::limb_t;\n+using double_limb_t = Num3072::double_limb_t;\n+constexpr int LIMB_SIZE = Num3072::LIMB_SIZE;\n+constexpr int LIMBS = Num3072::LIMBS;\n+/** 2^3072 - 1103717, the largest 3072-bit safe prime number, is used as the modulus. */\n+constexpr limb_t MAX_PRIME_DIFF = 1103717;\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+inline void extract3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& n)\n+{\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+    c2 = 0;\n+}\n+\n+/** [c0,c1] = a * b */\n+inline void mul(limb_t& c0, limb_t& c1, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    c1 = t >> LIMB_SIZE;\n+    c0 = t;\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+inline void mulnadd3(limb_t& c0, limb_t& c1, limb_t& c2, limb_t& d0, limb_t& d1, limb_t& d2, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)d0 * n + c0;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)d1 * n + c1;\n+    c1 = t;\n+    t >>= LIMB_SIZE;\n+    c2 = t + d2 * n;\n+}\n+\n+/* [c0,c1] *= n */\n+inline void muln2(limb_t& c0, limb_t& c1, const limb_t& n)\n+{\n+    double_limb_t t = (double_limb_t)c0 * n;\n+    c0 = t;\n+    t >>= LIMB_SIZE;\n+    t += (double_limb_t)c1 * n;\n+    c1 = t;\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+inline void muladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    limb_t th = t >> LIMB_SIZE;\n+    limb_t tl = t;\n+\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+inline void muldbladd3(limb_t& c0, limb_t& c1, limb_t& c2, const limb_t& a, const limb_t& b)\n+{\n+    double_limb_t t = (double_limb_t)a * b;\n+    limb_t th = t >> LIMB_SIZE;\n+    limb_t tl = t;\n+\n+    c0 += tl;\n+    limb_t tt = th + ((c0 < tl) ? 1 : 0);\n+    c1 += tt;\n+    c2 += (c1 < tt) ? 1 : 0;\n+    c0 += tl;\n+    th += (c0 < tl) ? 1 : 0;\n+    c1 += th;\n+    c2 += (c1 < th) ? 1 : 0;\n+}\n+\n+/**\n+ * Add limb a to [c0,c1]: [c0,c1] += a. Then extract the lowest\n+ * limb of [c0,c1] into n, and left shift the number by 1 limb.\n+ * */\n+inline void addnextract2(limb_t& c0, limb_t& c1, const limb_t& a, limb_t& n)\n+{\n+    limb_t c2 = 0;\n+\n+    // add\n+    c0 += a;\n+    if (c0 < a) {\n+        c1 += 1;\n+\n+        // Handle case when c1 has overflown\n+        if (c1 == 0)\n+            c2 = 1;\n+    }\n+\n+    // extract\n+    n = c0;\n+    c0 = c1;\n+    c1 = c2;\n+}\n+\n+/** in_out = in_out^(2^sq) * mul */\n+inline void square_n_mul(Num3072& in_out, const int sq, const Num3072& mul)\n+{\n+    for (int j = 0; j < sq; ++j) in_out.Square();\n+    in_out.Multiply(mul);\n+}\n+\n+} // namespace\n+\n+/** Indicates wether d is larger than the modulus. */",
      "path": "src/crypto/muhash.cpp",
      "position": 126,
      "original_position": 126,
      "commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "original_commit_id": "9815332d5158d69a94abeaf465a2c07bd8e43359",
      "in_reply_to_id": 562098872,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks! Included a fix in #19145 ",
      "created_at": "2021-01-21T21:43:23Z",
      "updated_at": "2021-01-21T21:43:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19055#discussion_r562216486",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562216486"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19055"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 126,
      "original_line": 126,
      "side": "RIGHT"
    }
  ]
}