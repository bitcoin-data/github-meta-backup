{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
    "id": 413323554,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDEzMzIzNTU0",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18881",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/18881.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/18881.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18881",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18881/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/90eb027204f5a9d7c00fa97d4112243bd37a9012",
    "number": 18881,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "Prevent UB in DeleteLock() function",
    "user": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Tracking our instrumented mutexes (`Mutex` and `RecursiveMutex` types) requires that all involved objects should not be destroyed until after their last use. On master (ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4) we have two problems related to the object destroying order:\r\n- the function-local `static` `lockdata` object that is destroyed at [program exit](https://en.cppreference.com/w/cpp/utility/program/exit)\r\n- the `thread_local` `g_lockstack` that is destroyed at [thread exit](https://en.cppreference.com/w/cpp/language/destructor)\r\n\r\nBoth cases could cause UB at program exit in so far as mutexes are used in other static object destructors.\r\n\r\nFix #18824",
    "labels": [
      {
        "id": 135961,
        "node_id": "MDU6TGFiZWwxMzU5NjE=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
        "name": "Refactoring",
        "color": "E6F6D6",
        "default": false
      }
    ],
    "active_lock_reason": "resolved",
    "created_at": "2020-05-05T06:05:34Z",
    "updated_at": "2022-02-15T10:58:59Z",
    "closed_at": "2020-05-26T12:17:25Z",
    "mergeable_state": "unknown",
    "merged_at": "2020-05-26T12:17:25Z",
    "merge_commit_sha": "fe1357a03af108c41baa6bd31903f2cfb0d75ef5",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "hebasto:200505-cofu",
      "ref": "200505-cofu",
      "sha": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 143212778,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNDMyMTI3Nzg=",
        "name": "bitcoin",
        "full_name": "hebasto/bitcoin",
        "owner": {
          "login": "hebasto",
          "id": 32963518,
          "node_id": "MDQ6VXNlcjMyOTYzNTE4",
          "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/hebasto",
          "html_url": "https://github.com/hebasto",
          "followers_url": "https://api.github.com/users/hebasto/followers",
          "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
          "organizations_url": "https://api.github.com/users/hebasto/orgs",
          "repos_url": "https://api.github.com/users/hebasto/repos",
          "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/hebasto/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/hebasto/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/hebasto/bitcoin",
        "archive_url": "https://api.github.com/repos/hebasto/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/hebasto/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/hebasto/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/hebasto/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/hebasto/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/hebasto/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/hebasto/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/hebasto/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/hebasto/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/hebasto/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/hebasto/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/hebasto/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/hebasto/bitcoin/events",
        "forks_url": "https://api.github.com/repos/hebasto/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/hebasto/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/hebasto/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/hebasto/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/hebasto/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/hebasto/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/hebasto/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/hebasto/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/hebasto/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/hebasto/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/hebasto/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/hebasto/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/hebasto/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/hebasto/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/hebasto/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/hebasto/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:hebasto/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/hebasto/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/hebasto/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/hebasto/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/hebasto/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/hebasto/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/hebasto/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/hebasto/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/hebasto/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/hebasto/bitcoin/hooks",
        "svn_url": "https://github.com/hebasto/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 3,
        "stargazers_count": 13,
        "watchers_count": 13,
        "size": 248693,
        "default_branch": "master",
        "open_issues_count": 2,
        "is_template": false,
        "topics": [
          "bitcoin-core"
        ],
        "has_issues": true,
        "has_projects": false,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T10:20:02Z",
        "created_at": "2018-08-01T21:59:57Z",
        "updated_at": "2023-03-29T06:21:01Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "dc5333d31f280e09bb1e8cdacfbe842f4ab9e69b",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69818,
        "watchers_count": 69818,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T22:42:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T03:51:27Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 75,
    "deletions": 50,
    "changed_files": 2,
    "commits": 6,
    "review_comments": 67,
    "comments": 40
  },
  "events": [
    {
      "event": "commented",
      "id": 623871970,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYyMzg3MTk3MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/623871970",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-05T06:06:02Z",
      "updated_at": "2020-05-05T06:06:02Z",
      "author_association": "MEMBER",
      "body": "cc @sipa",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-623871970",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18881"
    },
    {
      "event": "mentioned",
      "id": 3302774619,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzMwMjc3NDYxOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3302774619",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-05T06:06:03Z"
    },
    {
      "event": "subscribed",
      "id": 3302774625,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMzMDI3NzQ2MjU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3302774625",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-05T06:06:03Z"
    },
    {
      "event": "labeled",
      "id": 3302823443,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDMzMDI4MjM0NDM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3302823443",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-05T06:25:24Z",
      "label": {
        "name": "Docs",
        "color": "02d7e1"
      }
    },
    {
      "event": "reviewed",
      "id": 405669322,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1NjY5MzIy",
      "url": null,
      "actor": null,
      "commit_id": "5a406f76030263c1c4e5335cea3be022263426f2",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#pullrequestreview-405669322",
      "submitted_at": "2020-05-05T10:35:50Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
    },
    {
      "event": "unlabeled",
      "id": 3303619104,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MzMwMzYxOTEwNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3303619104",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-05T10:36:03Z",
      "label": {
        "name": "Docs",
        "color": "02d7e1"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3303662165,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzMwMzY2MjE2NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3303662165",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-05T10:49:32Z"
    },
    {
      "event": "commented",
      "id": 623985636,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYyMzk4NTYzNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/623985636",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-05T10:52:54Z",
      "updated_at": "2020-05-05T10:52:54Z",
      "author_association": "MEMBER",
      "body": "Updated 5a406f76030263c1c4e5335cea3be022263426f2 -> 7e3f40dd594d81b37458f9f5d36d4d7df99f8917 ([pr18881.01](https://github.com/hebasto/bitcoin/commits/pr18881.01) -> [pr18881.02](https://github.com/hebasto/bitcoin/commits/pr18881.02), [diff](https://github.com/hebasto/bitcoin/compare/pr18881.01..pr18881.02)):\r\n\r\n- addressed @MarcoFalke's [comment](https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420013187):\r\n> not sure why auto needs to hide both the type and the pointer-ness. The additional 5 chars don't seem overly verbose.",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-623985636",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18881"
    },
    {
      "event": "mentioned",
      "id": 3303672724,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzMwMzY3MjcyNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3303672724",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-05T10:52:54Z"
    },
    {
      "event": "subscribed",
      "id": 3303672727,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMzMDM2NzI3Mjc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3303672727",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-05T10:52:54Z"
    },
    {
      "event": "reviewed",
      "id": 405709216,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1NzA5MjE2",
      "url": null,
      "actor": null,
      "commit_id": "7e3f40dd594d81b37458f9f5d36d4d7df99f8917",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#pullrequestreview-405709216",
      "submitted_at": "2020-05-05T11:43:32Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3303843405,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzMwMzg0MzQwNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3303843405",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-05T11:47:12Z"
    },
    {
      "event": "commented",
      "id": 624007651,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYyNDAwNzY1MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624007651",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-05T11:49:10Z",
      "updated_at": "2020-05-05T11:49:10Z",
      "author_association": "MEMBER",
      "body": "Updated 7e3f40dd594d81b37458f9f5d36d4d7df99f8917 -> a2234071ddc633cf92ba501126b74bf78731f676 ([pr18881.02](https://github.com/hebasto/bitcoin/commits/pr18881.02) -> [pr18881.03](https://github.com/hebasto/bitcoin/commits/pr18881.03), [diff](https://github.com/hebasto/bitcoin/compare/pr18881.02..pr18881.03)):\r\n\r\n- addressed @jonatack's [comment](https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420046291):\r\n> approach guarantees",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-624007651",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18881"
    },
    {
      "event": "mentioned",
      "id": 3303849598,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzMwMzg0OTU5OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3303849598",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-05T11:49:11Z"
    },
    {
      "event": "subscribed",
      "id": 3303849602,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMzMDM4NDk2MDI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3303849602",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-05T11:49:11Z"
    },
    {
      "event": "reviewed",
      "id": 405709912,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1NzA5OTEy",
      "url": null,
      "actor": null,
      "commit_id": "7e3f40dd594d81b37458f9f5d36d4d7df99f8917",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK/ACK",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#pullrequestreview-405709912",
      "submitted_at": "2020-05-05T11:52:58Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3303926540,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzMwMzkyNjU0MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3303926540",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-05T12:12:00Z"
    },
    {
      "event": "commented",
      "id": 624019271,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYyNDAxOTI3MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624019271",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-05T12:14:27Z",
      "updated_at": "2020-05-05T12:14:27Z",
      "author_association": "MEMBER",
      "body": "Updated a2234071ddc633cf92ba501126b74bf78731f676 -> d3c26862e263fea7d49df7f9bc9acef30a84c1ca ([pr18881.03](https://github.com/hebasto/bitcoin/commits/pr18881.03) -> [pr18881.04](https://github.com/hebasto/bitcoin/commits/pr18881.04), [diff](https://github.com/hebasto/bitcoin/compare/pr18881.03..pr18881.04)):\r\n\r\n- addressed @jonatack's comments",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-624019271",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18881"
    },
    {
      "event": "mentioned",
      "id": 3303934955,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzMwMzkzNDk1NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3303934955",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-05T12:14:27Z"
    },
    {
      "event": "subscribed",
      "id": 3303934959,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMzMDM5MzQ5NTk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3303934959",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-05T12:14:27Z"
    },
    {
      "event": "labeled",
      "id": 3304025126,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDMzMDQwMjUxMjY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3304025126",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-05T12:39:48Z",
      "label": {
        "name": "Docs",
        "color": "02d7e1"
      }
    },
    {
      "event": "reviewed",
      "id": 405754524,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1NzU0NTI0",
      "url": null,
      "actor": null,
      "commit_id": "d3c26862e263fea7d49df7f9bc9acef30a84c1ca",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Iterative re-review (apologies)",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#pullrequestreview-405754524",
      "submitted_at": "2020-05-05T12:58:42Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3304205489,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzMwNDIwNTQ4OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3304205489",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-05T13:24:47Z"
    },
    {
      "event": "commented",
      "id": 624053939,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYyNDA1MzkzOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624053939",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-05T13:26:22Z",
      "updated_at": "2020-05-05T13:26:22Z",
      "author_association": "MEMBER",
      "body": "Updated d3c26862e263fea7d49df7f9bc9acef30a84c1ca -> 86ce03c53e22f0ce2c4bfbabd4aae5cf62dcb0fc ([pr18881.04](https://github.com/hebasto/bitcoin/commits/pr18881.04) -> [pr18881.05](https://github.com/hebasto/bitcoin/commits/pr18881.05), [diff](https://github.com/hebasto/bitcoin/compare/pr18881.04..pr18881.05)):\r\n\r\n- addressed @jonatack's comments",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-624053939",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18881"
    },
    {
      "event": "mentioned",
      "id": 3304212637,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzMwNDIxMjYzNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3304212637",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-05T13:26:22Z"
    },
    {
      "event": "subscribed",
      "id": 3304212643,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMzMDQyMTI2NDM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3304212643",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-05T13:26:22Z"
    },
    {
      "event": "reviewed",
      "id": 405789790,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1Nzg5Nzkw",
      "url": null,
      "actor": null,
      "commit_id": "86ce03c53e22f0ce2c4bfbabd4aae5cf62dcb0fc",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#pullrequestreview-405789790",
      "submitted_at": "2020-05-05T13:31:31Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
    },
    {
      "event": "reviewed",
      "id": 405956635,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1OTU2NjM1",
      "url": null,
      "actor": null,
      "commit_id": "86ce03c53e22f0ce2c4bfbabd4aae5cf62dcb0fc",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#pullrequestreview-405956635",
      "submitted_at": "2020-05-05T16:29:33Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
    },
    {
      "event": "reviewed",
      "id": 406250534,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2MjUwNTM0",
      "url": null,
      "actor": null,
      "commit_id": "86ce03c53e22f0ce2c4bfbabd4aae5cf62dcb0fc",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#pullrequestreview-406250534",
      "submitted_at": "2020-05-06T01:00:00Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
    },
    {
      "event": "reviewed",
      "id": 407439396,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3NDM5Mzk2",
      "url": null,
      "actor": null,
      "commit_id": "86ce03c53e22f0ce2c4bfbabd4aae5cf62dcb0fc",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#pullrequestreview-407439396",
      "submitted_at": "2020-05-07T12:52:21Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
    },
    {
      "event": "commented",
      "id": 625236733,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYyNTIzNjczMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625236733",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-07T12:53:07Z",
      "updated_at": "2020-05-07T12:53:07Z",
      "author_association": "MEMBER",
      "body": "ACK on using this solution in this specific place but NACK on suggesting its use in general.",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-625236733",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18881"
    },
    {
      "event": "commented",
      "id": 625286358,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYyNTI4NjM1OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625286358",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-07T14:23:03Z",
      "updated_at": "2020-05-07T14:23:03Z",
      "author_association": "MEMBER",
      "body": "<details><summary>looked more deeply into this to try to understand it better</summary>\r\n<p>\r\n\r\nI didn't find a direct reference to a \"COFU\" or \"Construct on First Use\" idiom in any of [these books](https://jonatack.github.io/articles/books-for-bitcoin-core). The best references online seemed to be:\r\n\r\n- in the isocpp wiki faq starting from https://isocpp.org/wiki/faq/ctors#static-init-order\r\n\r\n- as an exception to https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#i3-avoid-singletons\r\n\r\n- and as idiom 16 in https://upload.wikimedia.org/wikipedia/commons/5/55/MoreCppIdioms.pdf\r\n</p></details>\r\n\r\nand I agree with not suggesting it in general.\r\n",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-625286358",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18881"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3313205654,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzMxMzIwNTY1NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3313205654",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-07T14:37:00Z"
    },
    {
      "event": "commented",
      "id": 625296903,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYyNTI5NjkwMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625296903",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-07T14:40:51Z",
      "updated_at": "2020-05-07T14:40:51Z",
      "author_association": "MEMBER",
      "body": "Updated 86ce03c53e22f0ce2c4bfbabd4aae5cf62dcb0fc -> 6bc686839a7cc09e3586e2a47ae4f16b5d918d3a ([pr18881.05](https://github.com/hebasto/bitcoin/commits/pr18881.05) -> [pr18881.06](https://github.com/hebasto/bitcoin/commits/pr18881.06), [diff](https://github.com/hebasto/bitcoin/compare/pr18881.05..pr18881.06)):\r\n\r\n- only the fix of UB in the `DeleteLock()` function remains",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-625296903",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18881"
    },
    {
      "event": "commented",
      "id": 625297515,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYyNTI5NzUxNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625297515",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-07T14:41:51Z",
      "updated_at": "2020-05-07T14:41:51Z",
      "author_association": "MEMBER",
      "body": "ACK 6bc686839a7cc09e3586e2a47ae4f16b5d918d3a",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-625297515",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18881"
    },
    {
      "event": "reviewed",
      "id": 407575845,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3NTc1ODQ1",
      "url": null,
      "actor": null,
      "commit_id": "6bc686839a7cc09e3586e2a47ae4f16b5d918d3a",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Light code review ACK 6bc6868, this commit appears to be an implementation of the solution in https://isocpp.org/wiki/faq/ctors#static-init-order-on-first-use-members",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#pullrequestreview-407575845",
      "submitted_at": "2020-05-07T15:16:11Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
    },
    {
      "event": "commented",
      "id": 625320217,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYyNTMyMDIxNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625320217",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-07T15:19:43Z",
      "updated_at": "2020-05-07T15:19:43Z",
      "author_association": "MEMBER",
      "body": "> Light code review ACK [6bc6868](https://github.com/bitcoin/bitcoin/commit/6bc686839a7cc09e3586e2a47ae4f16b5d918d3a), this commit appears to be an implementation of the solution in https://isocpp.org/wiki/faq/ctors#static-init-order-on-first-use-members\r\n\r\nTo be exact: https://isocpp.org/wiki/faq/ctors#static-init-order-on-first-use",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-625320217",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18881"
    },
    {
      "event": "commented",
      "id": 625322312,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYyNTMyMjMxMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625322312",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-07T15:23:26Z",
      "updated_at": "2020-05-07T15:23:26Z",
      "author_association": "MEMBER",
      "body": "> To be exact: https://isocpp.org/wiki/faq/ctors#static-init-order-on-first-use\r\n\r\nYes.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-625322312",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18881"
    },
    {
      "event": "unlabeled",
      "id": 3327799262,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MzMyNzc5OTI2Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3327799262",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-12T14:33:35Z",
      "label": {
        "name": "Docs",
        "color": "02d7e1"
      }
    },
    {
      "event": "labeled",
      "id": 3327799266,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDMzMjc3OTkyNjY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3327799266",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-12T14:33:35Z",
      "label": {
        "name": "Refactoring",
        "color": "E6F6D6"
      }
    },
    {
      "event": "reviewed",
      "id": 410137892,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMTM3ODky",
      "url": null,
      "actor": null,
      "commit_id": "6bc686839a7cc09e3586e2a47ae4f16b5d918d3a",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "I still get the error `free(): corrupted unsorted chunks` when fuzzing on focal with enable-debug:\r\n\r\n```\r\nroot@042ac26113c2:/bitcoin-core# /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn -runs=1 /bitcoin-core/ci/scratch/qa-assets/fuzz_seed_corpus/process_message_blocktxn\r\nINFO: Seed: 2368542291\r\nINFO: Loaded 1 modules   (115207 inline 8-bit counters): 115207 [0x55d1f460d748, 0x55d1f462994f), \r\nINFO: Loaded 1 PC tables (115207 PCs): 115207 [0x55d1f4629950,0x55d1f47eb9c0), \r\nINFO:      304 files found in /bitcoin-core/ci/scratch/qa-assets/fuzz_seed_corpus/process_message_blocktxn\r\nINFO: -max_len is not provided; libFuzzer will not generate inputs larger than 1007323 bytes\r\nINFO: seed corpus: files: 304 min: 1b max: 1007323b total: 7665972b rss: 76Mb\r\n#305\tINITED cov: 3511 ft: 8239 corp: 229/480Kb exec/s: 0 rss: 84Mb\r\n#305\tDONE   cov: 3511 ft: 8239 corp: 229/480Kb lim: 301441 exec/s: 0 rss: 84Mb\r\nDone 305 runs in 0 second(s)\r\nfree(): corrupted unsorted chunks\r\n==51558== ERROR: libFuzzer: deadly signal\r\n    #0 0x55d1f3755930 in __sanitizer_print_stack_trace (/bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn+0x397930)\r\n    #1 0x55d1f3701c38 in fuzzer::PrintStackTrace() (/bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn+0x343c38)\r\n    #2 0x55d1f36e6d83 in fuzzer::Fuzzer::CrashCallback() (/bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn+0x328d83)\r\n    #3 0x7f7660b583bf  (/lib/x86_64-linux-gnu/libpthread.so.0+0x153bf)\r\n    #4 0x7f76607bf18a in __libc_signal_restore_set /build/glibc-YYA7BZ/glibc-2.31/signal/../sysdeps/unix/sysv/linux/internal-signals.h:86:3\r\n    #5 0x7f76607bf18a in raise /build/glibc-YYA7BZ/glibc-2.31/signal/../sysdeps/unix/sysv/linux/raise.c:48:3\r\n    #6 0x7f766079e858 in abort /build/glibc-YYA7BZ/glibc-2.31/stdlib/abort.c:79:7\r\n    #7 0x7f76608093ed in __libc_message /build/glibc-YYA7BZ/glibc-2.31/libio/../sysdeps/posix/libc_fatal.c:155:5\r\n    #8 0x7f766081147b in malloc_printerr /build/glibc-YYA7BZ/glibc-2.31/malloc/malloc.c:5347:3\r\n    #9 0x7f76608131c1 in _int_free /build/glibc-YYA7BZ/glibc-2.31/malloc/malloc.c:4356:2\r\n    #10 0x7f7660816a0c in __GI___libc_free /build/glibc-YYA7BZ/glibc-2.31/malloc/malloc.c:3125:3\r\n    #11 0x7f7660816a0c in tcache_thread_shutdown /build/glibc-YYA7BZ/glibc-2.31/malloc/malloc.c:2964:4\r\n    #12 0x7f7660816a0c in __malloc_arena_thread_freeres /build/glibc-YYA7BZ/glibc-2.31/malloc/arena.c:951:3\r\n    #13 0x7f7660b4c62e in start_thread /build/glibc-YYA7BZ/glibc-2.31/nptl/pthread_create.c:491:3\r\n    #14 0x7f766089b102 in clone /build/glibc-YYA7BZ/glibc-2.31/misc/../sysdeps/unix/sysv/linux/x86_64/clone.S:95\r\n\r\nNOTE: libFuzzer has rudimentary signal handlers.\r\n      Combine libFuzzer with AddressSanitizer or similar for better crash reports.\r\nSUMMARY: libFuzzer: deadly signal\r\nMS: 0 ; base unit: 0000000000000000000000000000000000000000\r\n\r\n\r\nartifact_prefix='./'; Test unit written to ./crash-da39a3ee5e6b4b0d3255bfef95601890afd80709\r\nBase64: \r\n",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#pullrequestreview-410137892",
      "submitted_at": "2020-05-12T15:06:14Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
    },
    {
      "event": "commented",
      "id": 629787071,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTc4NzA3MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/629787071",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-17T12:11:00Z",
      "updated_at": "2020-05-17T12:11:00Z",
      "author_association": "MEMBER",
      "body": "Updated 6bc686839a7cc09e3586e2a47ae4f16b5d918d3a -> d34871883ce116b8ba4e3add5d5330215a0b16f3 ([pr18881.06](https://github.com/hebasto/bitcoin/commits/pr18881.06) -> [pr18881.07](https://github.com/hebasto/bitcoin/commits/pr18881.07), [diff](https://github.com/hebasto/bitcoin/compare/pr18881.06..pr18881.07)):\r\n\r\n- add a new commit to address @MarcoFalke's [comment](https://github.com/bitcoin/bitcoin/pull/18881#discussion_r423808117)",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-629787071",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18881"
    },
    {
      "event": "mentioned",
      "id": 3344482055,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzM0NDQ4MjA1NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3344482055",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-17T12:11:00Z"
    },
    {
      "event": "subscribed",
      "id": 3344482057,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMzNDQ0ODIwNTc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3344482057",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-17T12:11:00Z"
    },
    {
      "event": "reviewed",
      "id": 413156561,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMTU2NTYx",
      "url": null,
      "actor": null,
      "commit_id": "d34871883ce116b8ba4e3add5d5330215a0b16f3",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "might test later ACK",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#pullrequestreview-413156561",
      "submitted_at": "2020-05-17T12:16:49Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3344514431,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzM0NDUxNDQzMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3344514431",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-17T12:51:00Z"
    },
    {
      "event": "commented",
      "id": 629794045,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTc5NDA0NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/629794045",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-17T13:01:20Z",
      "updated_at": "2020-05-17T13:01:20Z",
      "author_association": "MEMBER",
      "body": "Updated d34871883ce116b8ba4e3add5d5330215a0b16f3 -> f5c00ba32a041108d0c7c7c8f4c5709b82e1e91a ([pr18881.07](https://github.com/hebasto/bitcoin/commits/pr18881.07) -> [pr18881.08](https://github.com/hebasto/bitcoin/commits/pr18881.08), [diff](https://github.com/hebasto/bitcoin/compare/pr18881.07..pr18881.08)):\r\n\r\n- addressed recent @MarcoFalke's comments",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-629794045",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18881"
    },
    {
      "event": "mentioned",
      "id": 3344523687,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzM0NDUyMzY4Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3344523687",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-17T13:01:20Z"
    },
    {
      "event": "subscribed",
      "id": 3344523689,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMzNDQ1MjM2ODk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3344523689",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-17T13:01:20Z"
    },
    {
      "event": "commented",
      "id": 629795992,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTc5NTk5Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/629795992",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-17T13:13:12Z",
      "updated_at": "2020-05-17T13:13:12Z",
      "author_association": "MEMBER",
      "body": "ACK f5c00ba32a041108d0c7c7c8f4c5709b82e1e91a",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-629795992",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18881"
    },
    {
      "event": "commented",
      "id": 629799100,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTc5OTEwMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/629799100",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-17T13:30:04Z",
      "updated_at": "2020-05-17T13:30:04Z",
      "author_association": "MEMBER",
      "body": "```\r\n=================================================================\r\n\r\n==28222==ERROR: LeakSanitizer: detected memory leaks\r\n\r\nDirect leak of 240 byte(s) in 10 object(s) allocated from:\r\n\r\n    #0 0x5559dd5b8762 in operator new(unsigned long) (/home/travis/build/bitcoin/bitcoin/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/test_bitcoin+0x2e23762)\r\n\r\n    #1 0x5559ded68cff in GetLockStack() /home/travis/build/bitcoin/bitcoin/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/sync.cpp:97:46\r\n\r\n    #2 0x5559ded68eb9 in EnterCritical(char const*, char const*, int, void*, bool) /home/travis/build/bitcoin/bitcoin/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/sync.cpp:162:5\r\n\r\n    #3 0x5559ddcf94f9 in UniqueLock<AnnotatedMixin<std::mutex>, std::unique_lock<std::mutex> >::Enter(char const*, char const*, int) /home/travis/build/bitcoin/bitcoin/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/./sync.h:126:9\r\n\r\nDirect leak of 96 byte(s) in 4 object(s) allocated from:\r\n\r\n    #0 0x5559dd5b8762 in operator new(unsigned long) (/home/travis/build/bitcoin/bitcoin/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/test_bitcoin+0x2e23762)\r\n\r\n    #1 0x5559ded68cff in GetLockStack() /home/travis/build/bitcoin/bitcoin/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/sync.cpp:97:46\r\n\r\n    #2 0x5559ded68eb9 in EnterCritical(char const*, char const*, int, void*, bool) /home/travis/build/bitcoin/bitcoin/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/sync.cpp:162:5\r\n\r\n    #3 0x5559dd8f1455 in CCheckQueueControl<checkqueue_tests::FakeCheck>::CCheckQueueControl(CCheckQueue<checkqueue_tests::FakeCheck>*) /home/travis/build/bitcoin/bitcoin/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/./checkqueue.h:184:13\r\n\r\n    #4 0x7fa81886cbcc  (/usr/lib/x86_64-linux-gnu/libboost_thread.so.1.65.1+0x11bcc)\r\n\r\nDirect leak of 24 byte(s) in 1 object(s) allocated from:\r\n\r\n    #0 0x5559dd5b8762 in operator new(unsigned long) (/home/travis/build/bitcoin/bitcoin/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/test_bitcoin+0x2e23762)\r\n\r\n    #1 0x5559ded68cff in GetLockStack() /home/travis/build/bitcoin/bitcoin/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/sync.cpp:97:46\r\n\r\n    #2 0x5559ded68eb9 in EnterCritical(char const*, char const*, int, void*, bool) /home/travis/build/bitcoin/bitcoin/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/sync.cpp:162:5\r\n\r\n    #3 0x5559dd8ede65 in CCheckQueueControl<checkqueue_tests::FrozenCleanupCheck>::CCheckQueueControl(CCheckQueue<checkqueue_tests::FrozenCleanupCheck>*) /home/travis/build/bitcoin/bitcoin/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/./checkqueue.h:184:13\r\n\r\n    #4 0x5559dd8aa640 in std::__invoke_result<checkqueue_tests::test_CheckQueue_FrozenCleanup::test_method()::$_5>::type std::__invoke<checkqueue_tests::test_CheckQueue_FrozenCleanup::test_method()::$_5>(checkqueue_tests::test_CheckQueue_FrozenCleanup::test_method()::$_5&&) /usr/bin/../lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/bits/invoke.h:95:14\r\n\r\n    #5 0x5559dd8aa640 in decltype(std::__invoke(_S_declval<0ul>())) std::thread::_Invoker<std::tuple<checkqueue_tests::test_CheckQueue_FrozenCleanup::test_method()::$_5> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) /usr/bin/../lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/thread:234\r\n\r\n    #6 0x5559dd8aa640 in std::thread::_Invoker<std::tuple<checkqueue_tests::test_CheckQueue_FrozenCleanup::test_method()::$_5> >::operator()() /usr/bin/../lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/thread:243\r\n\r\n    #7 0x5559dd8aa640 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<checkqueue_tests::test_CheckQueue_FrozenCleanup::test_method()::$_5> > >::_M_run() /usr/bin/../lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/thread:186\r\n\r\nIndirect leak of 1440 byte(s) in 15 object(s) allocated from:\r\n\r\n    #0 0x5559dd5b8762 in operator new(unsigned long) (/home/travis/build/bitcoin/bitcoin/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/test_bitcoin+0x2e23762)\r\n\r\n    #1 0x5559ded721ff in __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::allocate(unsigned long, void const*) /usr/bin/../lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/ext/new_allocator.h:111:27\r\n\r\n    #2 0x5559ded721ff in std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::allocate(std::allocator<std::pair<void*, CLockLocation> >&, unsigned long) /usr/bin/../lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/bits/alloc_traits.h:436\r\n\r\n    #3 0x5559ded721ff in std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_allocate(unsigned long) /usr/bin/../lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/bits/stl_vector.h:172\r\n\r\n    #4 0x5559ded70a61 in void std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) /usr/bin/../lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/bits/vector.tcc:105:4\r\n\r\nSUMMARY: AddressSanitizer: 1800 byte(s) leaked in 30 allocation(s).\r\n\r\nMakefile:17661: recipe for target 'test/checkqueue_tests.cpp.test' failed\r\n\r\nmake[3]: *** [test/checkqueue_tests.cpp.test] Error 1",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-629799100",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18881"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3346444686,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzM0NjQ0NDY4Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3346444686",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-18T09:35:38Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3346456657,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzM0NjQ1NjY1Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3346456657",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-18T09:38:37Z"
    },
    {
      "event": "commented",
      "id": 630092888,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDA5Mjg4OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/630092888",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-18T10:27:07Z",
      "updated_at": "2020-05-18T10:27:07Z",
      "author_association": "MEMBER",
      "body": "Was this a false positive or a true one? If false, we shouldn't change our code for their bug, but add it to the suppressions.",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-630092888",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18881"
    },
    {
      "event": "commented",
      "id": 630094469,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDA5NDQ2OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/630094469",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-18T10:30:29Z",
      "updated_at": "2020-05-18T10:30:29Z",
      "author_association": "MEMBER",
      "body": "@MarcoFalke \r\n> Was this a false positive or a true one? If false, we shouldn't change our code for their bug, but add it to the suppressions.\r\n\r\nThe main reason why `thread_local` is not usable to track mutexes that are used in destructors is the following statement from https://en.cppreference.com/w/cpp/utility/program/exit:\r\n> The last destructor for thread-local objects is sequenced-before the first destructor for a static object",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-630094469",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18881"
    },
    {
      "event": "mentioned",
      "id": 3346661299,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzM0NjY2MTI5OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3346661299",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-18T10:30:30Z"
    },
    {
      "event": "subscribed",
      "id": 3346661303,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMzNDY2NjEzMDM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3346661303",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-18T10:30:30Z"
    },
    {
      "event": "commented",
      "id": 630100240,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDEwMDI0MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/630100240",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-18T10:43:44Z",
      "updated_at": "2020-05-18T10:43:44Z",
      "author_association": "MEMBER",
      "body": "Ok, fair enough. I think I am giving up on C++. Is your work based on #18851? If yes, maybe add the comment that the map is append only (theoretically unbounded growth) and optionally a co-author.\r\n\r\nOtherwise Concept ACK. Will test if this fixes my problem when this is ready for review.",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-630100240",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18881"
    },
    {
      "event": "commented",
      "id": 630102209,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDEwMjIwOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/630102209",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-18T10:48:26Z",
      "updated_at": "2020-05-18T10:48:26Z",
      "author_association": "MEMBER",
      "body": "> Is your work based on #18851?\r\n\r\nYes. The commit message is borrowed from #18851 as I keep improving my English :D\r\n\r\n> If yes, maybe add the comment that the map is append only (theoretically unbounded growth) and optionally a co-author.\r\n\r\nThat is not the case due to the map shrinking: https://github.com/bitcoin/bitcoin/blob/daa2bcc8e55b4ccc41bec55cbd6a7d6f633e9e6f/src/sync.cpp#L163-L165",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-630102209",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18881"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3346729442,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzM0NjcyOTQ0Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3346729442",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-18T10:50:40Z"
    },
    {
      "event": "commented",
      "id": 630104477,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDEwNDQ3Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/630104477",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-18T10:53:47Z",
      "updated_at": "2020-05-18T15:28:02Z",
      "author_association": "MEMBER",
      "body": "Updated daa2bcc8e55b4ccc41bec55cbd6a7d6f633e9e6f -> 77b41b79d2e09ff774624a73cda7213abf26c420 ([pr18881.09](https://github.com/hebasto/bitcoin/commits/pr18881.09) -> [pr18881.11](https://github.com/hebasto/bitcoin/commits/pr18881.11), [diff](https://github.com/hebasto/bitcoin/compare/pr18881.09..pr18881.11)):\r\n\r\n- addressed @MarcoFalke's [comment](https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-630100240):\r\n> If yes, maybe add ... a co-author.",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-630104477",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18881"
    },
    {
      "event": "mentioned",
      "id": 3346739726,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzM0NjczOTcyNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3346739726",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-18T10:53:47Z"
    },
    {
      "event": "subscribed",
      "id": 3346739729,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMzNDY3Mzk3Mjk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3346739729",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-18T10:53:47Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3346766262,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzM0Njc2NjI2Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3346766262",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-18T11:01:39Z"
    },
    {
      "event": "reviewed",
      "id": 413619527,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzNjE5NTI3",
      "url": null,
      "actor": null,
      "commit_id": "77b41b79d2e09ff774624a73cda7213abf26c420",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Tested ACK 77b41b79d2e09ff774624a73cda7213abf26c420, beside newly introduced UB 🏞\r\n\r\n<details><summary>Show signature and timestamp</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nTested ACK 77b41b79d2e09ff774624a73cda7213abf26c420, beside newly introduced UB 🏞\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUgdEQv9FPHYulbA/8DmnWuyrbLw3yJKdfzAe2KP8HlCPqO72ALPWkueZye0ePXs\r\nslutkyOVRR/xUeQFzDDtxvlhhyNzX3hE2lnGXtlphK9UT117J/XtvDFYcNEcyVag\r\nSfMJGI83O6AXl6pWh6tLs8iex7LgsRMgW4D7k4BbYrn6j5+p3DSw4JsZOMa8Dow+\r\nCSa69TecquL+VXxcLTvw7TPkJAEp8LwqLyPpbxXrWW/CVfasvhAkaN6DgznH/F2U\r\ntgoo5gQeHrdQaaPvDRRg5w9681MPXD9dknbhnO7spdMNyU9A226pYHd9yXlXX7ci\r\nGd2N+STZPN1wEw9yq8zfKy1yKWBmeIsDXBoihbOyCNw2cGC22K5QV9S5U80htz2O\r\ncSbE7tJlg4KGtHydh30PCBb+vJ0OiLvjCnienfn9aFpsLq+h1DUH6xA4o4DevrzJ\r\nsnvrDo3Szwmn63YCfFQpsJejJf+rq3Q5Bz+mRs8OpM1mwepu1raj/2XIWwR5Ps+W\r\nNWCBbF3y\r\n=u6qk\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n[Timestamp of file with hash `5480a24c35f54d72074b6b4f29e9e36383f47a92ab417d18a34b223ba64f996f  -`](https://opentimestamps.org/info/?004f70656e54696d657374616d7073000050726f6f6600bf89e2e884e8929401085480a24c35f54d72074b6b4f29e9e36383f47a92ab417d18a34b223ba64f996ff010c4d69fcd6677fc2bfc10091b4c46be9808fff01024319d2887534056ea5562962e6b153f08f020812cbbbe1e5ef6f5c2f94bfe82ad667fea1cad653043aab0bd21a7b8a02429e908f1045ec29401f0088fed25f0f11bcd0d0083dfe30d2ef90c8e2e2d68747470733a2f2f616c6963652e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267fff01032aee2832099a0c1ecfe46191f6ce76e08f120d707c87eb14868e73da463b7ea61d3cf04a2afe05588d7c85fab8614ee195db808f1045ec29401f00826f562d1a11f76690083dfe30d2ef90c8e292868747470733a2f2f66696e6e65792e63616c656e6461722e657465726e69747977616c6c2e636f6dfff01042bd0164083a26d3177be2cd090292e508f02068cdcf82ee002497c624160fed51da23534a2b2a042f544fd23fba7fdb0fd41b08f02075bfdcfe8bf1e18e01aeb1e89406d8d533e2f3a408f238afc8782e54cdf2add108f1045ec29401f008047e8effb5e57f8a0083dfe30d2ef90c8e2c2b68747470733a2f2f626f622e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267f01062e165a12c011684e7bf5ac0aaa0623108f1045ec29401f008660769bda75d619f0083dfe30d2ef90c8e232268747470733a2f2f6274632e63616c656e6461722e636174616c6c6178792e636f6d)\r\n\r\n</details>\r\n",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#pullrequestreview-413619527",
      "submitted_at": "2020-05-18T13:57:28Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3347871713,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzM0Nzg3MTcxMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3347871713",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-18T15:23:59Z"
    },
    {
      "event": "mentioned",
      "id": 3347884024,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzM0Nzg4NDAyNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3347884024",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-18T15:26:47Z"
    },
    {
      "event": "subscribed",
      "id": 3347884030,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMzNDc4ODQwMzA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3347884030",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-18T15:26:47Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3347903706,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzM0NzkwMzcwNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3347903706",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-18T15:31:22Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3347913303,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzM0NzkxMzMwMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3347913303",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-18T15:33:42Z"
    },
    {
      "event": "commented",
      "id": 630262961,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDI2Mjk2MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/630262961",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-18T15:35:11Z",
      "updated_at": "2020-05-18T15:35:11Z",
      "author_association": "MEMBER",
      "body": "Updated 77b41b79d2e09ff774624a73cda7213abf26c420 -> 068264fcbb8af47f0df676cd088154d7956819d2 ([pr18881.11](https://github.com/hebasto/bitcoin/commits/pr18881.11) -> [pr18881.13](https://github.com/hebasto/bitcoin/commits/pr18881.13), [diff](https://github.com/hebasto/bitcoin/compare/pr18881.11..pr18881.13)):\r\n\r\n- addressed @MarcoFalke's [comment](https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426645402):\r\n> Locking a non-recursive mutex that is already locked is undefined behavior",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-630262961",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18881"
    },
    {
      "event": "mentioned",
      "id": 3347920093,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzM0NzkyMDA5Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3347920093",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-18T15:35:11Z"
    },
    {
      "event": "subscribed",
      "id": 3347920096,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMzNDc5MjAwOTY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3347920096",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-18T15:35:11Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NTg5OTJiMDZkODBlYjU2ODE0MWY2MGEzM2QzOGUxMmU4OTRlMjdh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/458992b06d80eb568141f60a33d38e12e894e27a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/458992b06d80eb568141f60a33d38e12e894e27a",
      "tree": {
        "sha": "e4ceacb8391cccd46765ee41f4f75dc968afc7cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e4ceacb8391cccd46765ee41f4f75dc968afc7cc"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree e4ceacb8391cccd46765ee41f4f75dc968afc7cc\nparent ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1588655267 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1589840029 +0300\n\nPrevent UB in DeleteLock() function\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl7DCJ8ACgkQQQEIES5+\nqB9uGw//fbNWh/IpbfdJE4LnjxQCFh318aL2QIxvS+EbuuWLa8wDegGjVZwnS1PW\nN3pV61jJxEFkuPL3lrOp5UZEle8sWKZkCsnh8siV8YXRG6w4FwJXTUas7b96OyeM\nD0He1ZEK6v1i5X3U688Sxjo0D9DDGqFBApP9sIw4a18c5uyJtPcYbtgMrIa431s6\nmM5geFzKq44uGur/ydlpIspcFIEgAPubMEKJNSQEuCF5IH9VYhlX6PEw5mxcPmtU\nHWsmCdOfkWA/EdnPKvJQa3vLIpBVwAOgunazIBIwbXjfWxjFIZiyFLFOIgbIP2kX\n7Xg9CeY6XO8uUMRlZ17Fls7pIqjKQ89y88WWVU0JqBWB6wcIVJF2SJEhUaDswjH3\nH4euZwndvVZZFaZjF4zSF5jUfdXkLY2+fVpIikEUtMa5TfPIzxZCCS+5iPkyiO1M\nStNGl5PtZPAmgfgvzgNPK733sRkGPEOHixhuLd45ZEVi9AiBYvnPx/kckMfzTPPO\nDnjkib17I2P8mptPxoHr1zXzbOvl1bVs7YqYA6D1NTBGShUN58uvcXjKj7gFDwY3\nVCd2rzE7O3LNe2owhRYKoY8NMh9LQj7jPcctj1o/3mPzyPXBstkKuNoEPUkEYfSs\neMuaG51LTIxmm+6geL5p59LlfqscjOB24syqNxAVsOLKH0sMJFI=\n=cXOW\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4",
          "sha": "ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ec79b5f86b22ad8f77c736f9bb76c2e4d7faeaa4"
        }
      ],
      "message": "Prevent UB in DeleteLock() function",
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-05-18T22:13:49Z"
      },
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-05-05T05:07:47Z"
      },
      "sha": "458992b06d80eb568141f60a33d38e12e894e27a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZDg5MjFhYmQzNWMzYWMxYjhlYmFjYjExZGU4ZTFiYmM3YjI4ZDY2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8d8921abd35c3ac1b8ebacb11de8e1bbc7b28d66",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/8d8921abd35c3ac1b8ebacb11de8e1bbc7b28d66",
      "tree": {
        "sha": "8727fcdbbe78ff8c911299b1997fe5e77e0ce1a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8727fcdbbe78ff8c911299b1997fe5e77e0ce1a5"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 8727fcdbbe78ff8c911299b1997fe5e77e0ce1a5\nparent 458992b06d80eb568141f60a33d38e12e894e27a\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1589784050 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1589840047 +0300\n\nrefactor: Add LockStackItem type alias\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl7DCK8ACgkQQQEIES5+\nqB/+1Q/7BZ0PEdpOOk703gNAr+FSsP++GFp8xeP4RiXsAKo5hdhmsMIW/q//casn\nTemxti0XNNePRkHmKPt4SYz/Rb3nBi9k9DmkWaoEce9U9x5EkJw1a5VYNIzCtVIS\nErYo3uie2d6T9OoF5d1e50KIxqlP6yybjArOuxZX4gKdcIYRBDLBmsXpiBAtY17R\nyinWXU3NDbFzjqvc05zLOWTEwR9soUYBgvnAvr1jLtF/ZznOCiC4amTDfrrEQfQJ\nuu5aCIitr2jI4oS6b8bQrWGABd7oeEcT7Qc5fNfZhqWw6NPGSzs4QFgshPCdahIP\n8EIr2eeOjMcDkWC0H7tTSuffO/O1ncbtrjM8vqh/TuElGzW9RYl3YsQDODz4NGwf\nOYo21NW2v5ZSLny9vQuEUpeC8n2WKCvCCmo45+TqFwkMUDhav9WEy2k3ylTtBpor\nVhhNLcjGIAeyBVp81w7T8jCjfr6qk6GL5Wfxiqfc2WvBQYtRVesuK2e7hHqemU4X\nXoo7zuN0Yd+qG5qH2DFFr3Va8i4sYLjd3/a7z6kCjVvD2nIg9UONULeW9wMhgJAs\nJChg8htPKBfXOEUFmGsk+1pC4gnlBraDc350kwecagnyhStRCLjK0rfKfFB5gW1P\n6AKZs1A23HUL9rvbu/KQJMRqPLnF56tRhUsgGlMWQEG7FOtfNOo=\n=bzAM\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/458992b06d80eb568141f60a33d38e12e894e27a",
          "sha": "458992b06d80eb568141f60a33d38e12e894e27a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/458992b06d80eb568141f60a33d38e12e894e27a"
        }
      ],
      "message": "refactor: Add LockStackItem type alias",
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-05-18T22:14:07Z"
      },
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-05-18T06:40:50Z"
      },
      "sha": "8d8921abd35c3ac1b8ebacb11de8e1bbc7b28d66"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNTExZjYxZGRhNGU4NjAwNzkxNTNkNWU1MWQ2NDY1OGNjMjY1Mjgz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f511f61dda4e860079153d5e51d64658cc265283",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f511f61dda4e860079153d5e51d64658cc265283",
      "tree": {
        "sha": "61c2d7b9840ee92be945e81340e110ff542ecf7f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/61c2d7b9840ee92be945e81340e110ff542ecf7f"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 61c2d7b9840ee92be945e81340e110ff542ecf7f\nparent 8d8921abd35c3ac1b8ebacb11de8e1bbc7b28d66\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1589785208 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1589840047 +0300\n\nrefactor: Add LockPair type alias\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl7DCK8ACgkQQQEIES5+\nqB8qtg//Q0pp755joMqq2CL3nXN32QoBIsGdzk9ddT/1aXn2Y40K1paJwvhG/tje\nRZu1FjQUn8q8GdIRYtPm5Zsacg81YWx1tdSCO0kz8NLfVZ2q4BKvSn3Fla3YPk3Q\nKiGPRUBu+XjSuyPU9/b0HTKMXuOiErxSRowfbwAqkh0eRl8C08mn5mHUqBz28Q7D\nCtKX2p7q+iN0MM6TpImEapVTVian7my7B6mih2nOuG9vcm8atXt8I8NSxIxFUtxI\nL8Dfn8onVi3ZFKtgKsDpoxslKstDq0zV8I/gMlORYpbmQKgvNy+WJm8ypq8F0J9d\nZYXAJZKlWhJuzf/DgqW0fpYWvd9yrAnY7xjYEBCzhNqBXc40lWkj0+g/wA2R4vNC\nVNNldiMXXxuKxh2K9/vjJ4OSxrCzY76WP8TcSsvbFnvDIKCHxCG1C+B/HUOnNvyS\n5vajBNhW47HC8eyAMu4kdB2f08CzptDq8TpDiFbHhzXZrJUlZZdEKBWY54aEa12Y\nr29HvtvszW9HNhXqJlUOfnlVYGSbnQil21dxkvaIAcCXThMNzptQ6j4To2bhg1pN\nQO5gSwmF6iwhHzFio57lImBTz8BJRLFLinjLj1GcM6jqBQmo7hhEHvx0qgA//OyN\nyeOSD8DMGHp42Xk69+nRb5sxVUed2Pgf2RPpav/I1tPtVCR3UuM=\n=R6zK\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8d8921abd35c3ac1b8ebacb11de8e1bbc7b28d66",
          "sha": "8d8921abd35c3ac1b8ebacb11de8e1bbc7b28d66",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/8d8921abd35c3ac1b8ebacb11de8e1bbc7b28d66"
        }
      ],
      "message": "refactor: Add LockPair type alias",
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-05-18T22:14:07Z"
      },
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-05-18T07:00:08Z"
      },
      "sha": "f511f61dda4e860079153d5e51d64658cc265283"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OGU2ODgxYmM1YmUwMDJlOGRkYmM5Yjc1NDIyYzBkZWFlNjZhMmRm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/58e6881bc5be002e8ddbc9b75422c0deae66a2df",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/58e6881bc5be002e8ddbc9b75422c0deae66a2df",
      "tree": {
        "sha": "3fbf313131c6feb325dd0110ee50de50bff0b933",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3fbf313131c6feb325dd0110ee50de50bff0b933"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 3fbf313131c6feb325dd0110ee50de50bff0b933\nparent f511f61dda4e860079153d5e51d64658cc265283\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1589813146 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1589840047 +0300\n\nrefactor: Refactor duplicated code into LockHeld()\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl7DCK8ACgkQQQEIES5+\nqB+tGg//Qtv/yGuouzkLuHfOMZMnY2F4Sm5ZIY/I8yxgiM1cagzIgYNVET4HIzHS\nBdsGuq3UahHcqcRE8aC2tH49AiEN+VoE/BSBdj6yVbhw+8OKFbvnj42h/faHVDM6\nJ/+85KT0FW0E0wdZw8HJBr7tT9ZLbXM6UDtlfnfcXCTSyIMVPum3myCXh3Z6NgpF\nVNvOpuMQ/csith+6EJ+BJVgGOAoya9PCq8vyHbnk3lrKh700glSmFz4kelKUzoCi\nngcxIAL/TB+RfI8w1hyDzWpcvSNJj0cMx4zh2VaxDBxSTmHoL5xBagcaREHdYcGH\nP98Z+alVMneIQyX2j3ghHrosOfdKlPYiyzI7CoKnCns3800XMJSFkRqtF9WeLR/G\nUwhq64LUOn+bcBZsb1Swv3FzaxJu/YIpSGdj/zUOxz5bUmWUhpD6vkzrAhPiWm4h\nuj1a60QpkIpNY9Z314z0s+e8l5VpzpY6cAWo3M+eHgYf4j9Ys745nLewyAKacJov\nyXBfc5T01L7i60dbcLxFuJpfZ+nUntWjvW4t9vd0OBUY15Tp0skj9C+9FWZlcW24\niplEuVgrOwRdKjbcplhzKxmnQRxFvbPVo4HBd4WE294ENZsjN121PcJxK5ov+FH7\nRFv9CqKqxZrth5zEKz9y1iuseXJyFTybyeNZBsHiLEowb/HR1kg=\n=k6tb\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f511f61dda4e860079153d5e51d64658cc265283",
          "sha": "f511f61dda4e860079153d5e51d64658cc265283",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f511f61dda4e860079153d5e51d64658cc265283"
        }
      ],
      "message": "refactor: Refactor duplicated code into LockHeld()",
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-05-18T22:14:07Z"
      },
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-05-18T14:45:46Z"
      },
      "sha": "58e6881bc5be002e8ddbc9b75422c0deae66a2df"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNmMwOTNhOTk1Nzc1NmYzNzQzYzIzNDdmZTBhYmQ5MGY4MTE1OWM0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/26c093a9957756f3743c2347fe0abd90f81159c4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/26c093a9957756f3743c2347fe0abd90f81159c4",
      "tree": {
        "sha": "4efc88a350ffe47d3935d255a14c05b28b07be7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4efc88a350ffe47d3935d255a14c05b28b07be7a"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 4efc88a350ffe47d3935d255a14c05b28b07be7a\nparent 58e6881bc5be002e8ddbc9b75422c0deae66a2df\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1589815346 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1589840048 +0300\n\nReplace thread_local g_lockstack with a mutex-protected map\n\nThis change prevents UB in case of early g_lockstack destroying.\n\nCo-authored-by: Wladimir J. van der Laan <laanwj@protonmail.com>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl7DCLAACgkQQQEIES5+\nqB+F2Q/9FoKcYpPei92mC1gWwsxi6UhgL7auIi3gfV//ixKwfshiwfL4gWIhmO5A\nwdhmAy7ARpYx4Uj8ekmoSuI9ol+52uuQdfjxvuCEf+jUMOiPfdrNbGDXRCCeP53S\nveFn70Mq5x79JtO1OtzfTZc19u7u/+6geUVIjbxZtbQyQz0EFzJW+iOZ3uG8TO73\nQbqAq4XhnsuQJAcCO5OUUzq7WUZaFYEEDHOynKlfHmFWHRin3YBoCLLm3HTL3xHe\nSQ6nqGvgueZouNGYyfaAgHP+WVOUvHE27B7NzmE59cL+1awuWnkmNXAna6wR7GN1\nHgvc/5fEb3GPivGOpliyfN7IZxNuRhAqdfc3trMtv1mflq4lv4HSB2N0iwoqsM1h\nqqDWY7lViD/66BPzvy6+JrjzkjE+bdF2Dkgcq86ujkaMRCRr/esM/VLTrzz5TBzj\nQJ+hm/wZflTR5nuZqDv4CMA1MWdE+lGw0tAwy2MtihNpFHD/0Keg+64rjpgmHGlL\nFFFWdcHZU9CHEIBjaPBgLRwP+WoMRiKRgTMCBM+h/qz5qks9UI9K/BU21XfCWDxZ\n9cn5mVqsPizd+eAibbQS1Fiq+wEJX7iK7jSAC2wNdUESmc7GR0+wxdP1Otgu1G3s\neV2Z1SA4St3/NzaWymkHJLzRLajOE6hmFFahxTUtVO6TomUCuTQ=\n=5mJE\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/58e6881bc5be002e8ddbc9b75422c0deae66a2df",
          "sha": "58e6881bc5be002e8ddbc9b75422c0deae66a2df",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/58e6881bc5be002e8ddbc9b75422c0deae66a2df"
        }
      ],
      "message": "Replace thread_local g_lockstack with a mutex-protected map\n\nThis change prevents UB in case of early g_lockstack destroying.\n\nCo-authored-by: Wladimir J. van der Laan <laanwj@protonmail.com>",
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-05-18T22:14:08Z"
      },
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-05-18T15:22:26Z"
      },
      "sha": "26c093a9957756f3743c2347fe0abd90f81159c4"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3349355212,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzM0OTM1NTIxMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3349355212",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-18T22:33:19Z"
    },
    {
      "event": "commented",
      "id": 630472810,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDQ3MjgxMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/630472810",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-18T22:41:53Z",
      "updated_at": "2020-05-18T22:41:53Z",
      "author_association": "MEMBER",
      "body": "Updated 068264fcbb8af47f0df676cd088154d7956819d2 -> 26c093a9957756f3743c2347fe0abd90f81159c4 ([pr18881.13](https://github.com/hebasto/bitcoin/commits/pr18881.13) -> [pr18881.14](https://github.com/hebasto/bitcoin/commits/pr18881.14), [diff](https://github.com/hebasto/bitcoin/compare/pr18881.13..pr18881.14)):\r\n\r\n- dropped technically incorrect mention of \"trivial destructors\"\r\n- replaced the raw pointer to the instance of `LockData` with a reference as we are not going to apply `delete` operator to that pointer",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-630472810",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18881"
    },
    {
      "event": "commented",
      "id": 630474924,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDQ3NDkyNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/630474924",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-18T22:48:27Z",
      "updated_at": "2020-05-18T22:48:27Z",
      "author_association": "MEMBER",
      "body": "What do you mean with \"technically incorrect\"? https://en.cppreference.com/w/cpp/language/destructor#Trivial_destructor",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-630474924",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18881"
    },
    {
      "event": "commented",
      "id": 630481876,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDQ4MTg3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/630481876",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-18T23:11:39Z",
      "updated_at": "2020-05-18T23:11:39Z",
      "author_association": "MEMBER",
      "body": "> What do you mean with \"technically incorrect\"? https://en.cppreference.com/w/cpp/language/destructor#Trivial_destructor\r\n\r\n1) ibid:\r\n> A trivial destructor is a destructor that performs no action. Objects with trivial destructors **don't require a delete-expression** and may be disposed of by simply deallocating their storage.\r\n\r\n2) having a trivial destructor is important for the destroying order. As we are not going to destroy `LockData` instance, this requirement is not relevant\r\n\r\n2) with the latest push the `static` function-local `lock_data` variable is a reference and is not an object\r\n\r\nMore details: https://google.github.io/styleguide/cppguide.html#Static_and_Global_Variables",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-630481876",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18881"
    },
    {
      "event": "commented",
      "id": 630513212,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDUxMzIxMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/630513212",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-19T01:00:05Z",
      "updated_at": "2020-05-19T01:02:27Z",
      "author_association": "MEMBER",
      "body": "> As we are not going to destroy LockData instance, this requirement is not relevant\r\n\r\nWhy not? Assuming ~LockData had side effects, then not calling the destructor is going to miss those side effects.",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-630513212",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18881"
    },
    {
      "event": "commented",
      "id": 630520924,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDUyMDkyNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/630520924",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-19T01:27:00Z",
      "updated_at": "2020-05-19T01:27:00Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18635 (Replace -Wthread-safety-analysis with broader -Wthread-safety by hebasto)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-630520924",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18881"
    },
    {
      "event": "commented",
      "id": 630784173,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDc4NDE3Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/630784173",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-19T12:25:57Z",
      "updated_at": "2020-05-19T12:25:57Z",
      "author_association": "MEMBER",
      "body": "And if this was somehow \"incorrect\" then `LogInstance` should also be adjusted to be consistent",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-630784173",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18881"
    },
    {
      "event": "commented",
      "id": 631247627,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzMTI0NzYyNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/631247627",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-20T05:35:46Z",
      "updated_at": "2020-05-20T05:35:46Z",
      "author_association": "MEMBER",
      "body": "I'll try to elaborate my opinion :)\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/068264fcbb8af47f0df676cd088154d7956819d2/src/sync.cpp#L98\r\n\r\n@MarcoFalke \r\n\r\n> What do you mean with \"technically incorrect\"? https://en.cppreference.com/w/cpp/language/destructor#Trivial_destructor\r\n\r\n1. I mean that among `LockData` type and its subtypes only `using LockPair = std::pair<void*, void*>;` and `std::mutex` have trivial desctructors. This could be easily verified with the [`std::is_trivially_destructible`](https://en.cppreference.com/w/cpp/types/is_destructible) type trait.\r\n\r\nAn implicitly-defined destructor, i.e., generated by the compiler, is not the same as a trivial one.\r\n\r\n2. Agree that if we are going do not destruct a heap-allocated object until the program termination, it is pointless to provide a user-defined destructor with any side effects. If this statement is required to be added to the code as a comment, that comment should refer to \"not having an explicit desctructor\" or \"having a implicit desctructor\", but not to \"a trivial desctructor\".\r\n\r\n> And if this was somehow \"incorrect\" then `LogInstance` should also be adjusted to be consistent\r\n\r\nThe only difference is that the function-local static `g_logger` is a raw pointer that, in theory, should be `delete`d.\r\n\r\nIn this PR the function-local static `lock_data` is a reference, and this approach explicitly shows our intention do not `delete` the heap-allocated object at all.\r\n\r\nIf the above arguments are convincing for our community, I agree that making `g_logger` a reference is good for consistency.",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-631247627",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18881"
    },
    {
      "event": "mentioned",
      "id": 3354776663,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzM1NDc3NjY2Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3354776663",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-20T05:35:47Z"
    },
    {
      "event": "subscribed",
      "id": 3354776665,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMzNTQ3NzY2NjU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3354776665",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-20T05:35:47Z"
    },
    {
      "event": "commented",
      "id": 632647820,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzMjY0NzgyMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632647820",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-22T11:38:25Z",
      "updated_at": "2020-05-22T11:38:25Z",
      "author_association": "MEMBER",
      "body": "> If this statement is required to be added to the code as a comment, that comment should refer to \"not having an explicit desctructor\" or \"having a implicit desctructor\", but not to \"a trivial desctructor\".\r\n\r\nThe statement has been added to the logger, so I don't see why it shouldn't be added here.\r\n\r\n> reference, and this approach explicitly shows our intention do not delete the heap-allocated object at all.\r\n\r\nI wasn't aware that this style is used to indicate that `delete` will not be applied, but fine with me. Functionally `*` and `&` are identical.\r\n\r\n```cpp\r\n#include <iostream>\r\n\r\nstruct A {\r\n  A() { std::cout << __func__ << std::endl; }\r\n  ~A() { std::cout << __func__ << std::endl; }\r\n};\r\n\r\nint main() {\r\n  std::cout << \"start \" << __func__ << std::endl;\r\n  static A a;\r\n  static A *b = new A();\r\n  static A &c = *new A();\r\n  std::cout << \"end   \" << __func__ << std::endl;\r\n}\r\n```\r\n\r\n```\r\nstart main\r\nA\r\nA\r\nA\r\nend   main\r\n~A\r\n```",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-632647820",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18881"
    },
    {
      "event": "commented",
      "id": 632652222,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzMjY1MjIyMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632652222",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-22T11:50:37Z",
      "updated_at": "2020-05-22T11:50:37Z",
      "author_association": "MEMBER",
      "body": "re-ACK 26c093a9957756f3743c2347fe0abd90f81159c4 only change since last review is removing undefined behaviour 🚗\r\n\r\n<details><summary>Show signature and timestamp</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nre-ACK 26c093a9957756f3743c2347fe0abd90f81159c4 only change since last review is removing undefined behaviour 🚗\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUifmwwAs+llsO+ADQ05xZMwCoY0YQ5Zi4w65QVdoRIq9rrajfvDOSyJT09/p2d/\r\nSiJN1SbB1PWFpxW0xPpT9CfAs1AhSnMGtEtm7xsllv5m/X+lsDPHqgsbN0DcfUeE\r\nQ3CnDFklxI7JUOJkcHusmRB9ETxWRJPQ0Hx79OGImUbubdB32rLdsSqfw4oraFzn\r\nbUY1TV76e+IB37zbYiCwiTr1EUOBu1DUV7FBr6AycYRrKMWXO2lPAGqlrOD+Orwo\r\nfyWA2RAcVUbItktWDfy2D9zB8m2DT/HUYr/3DY7P7J6SotirPYQAbaHQO51K4NAo\r\nPAAss/uwkX1zpXhP3hxgLBtKvixOTvZANHf6ch1dSvRrz3XyY0xCT0Z4XuL7dCJk\r\naGE6AcLzer5h46dfM2Bu3exFSRSaSvqLYks0Jv+b50m9U25+2W7XvJ4IhPovPlpY\r\n/DiOQwMX1DteOd4h9PHSFl6BTLr8eDzPnNDpTue4EzQxXV7BtG++d3nyI1Uhp8OX\r\nVVDT2gg9\r\n=UHOn\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n[Timestamp of file with hash `27744a6864db90d25a36be70b128da2a91330c24db6afd49a7dd4c0d2c53111c  -`](https://opentimestamps.org/info/?004f70656e54696d657374616d7073000050726f6f6600bf89e2e884e89294010827744a6864db90d25a36be70b128da2a91330c24db6afd49a7dd4c0d2c53111cf0106bf06a4f48529d2b91a6f6b46e79b3fa08fff01092305126d62c65a89fea5b2ec96bb01408f1045ec7bc84f008f71cef5588a8c0570083dfe30d2ef90c8e2c2b68747470733a2f2f626f622e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267fff010a6dd8c49f03105a00109ce0f7bf9edff08f1045ec7bc84f0083eaa6bc205667a000083dfe30d2ef90c8e292868747470733a2f2f66696e6e65792e63616c656e6461722e657465726e69747977616c6c2e636f6dfff010c8a3137edc174f41ad5e21d1e95fdb1a08f1045ec7bc84f008fa87d17d8b0163a70083dfe30d2ef90c8e232268747470733a2f2f6274632e63616c656e6461722e636174616c6c6178792e636f6df010e2c4ecd0af52631bbc046d028834ca1008f1045ec7bc84f0086b7803ae35bc50310083dfe30d2ef90c8e2e2d68747470733a2f2f616c6963652e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267)\r\n\r\n</details>\r\n",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-632652222",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18881"
    },
    {
      "event": "commented",
      "id": 632657505,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzMjY1NzUwNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632657505",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-22T12:03:55Z",
      "updated_at": "2020-05-22T12:03:55Z",
      "author_association": "MEMBER",
      "body": "@MarcoFalke \r\n> > If this statement is required to be added to the code as a comment, that comment should refer to \"not having an explicit desctructor\" or \"having a implicit desctructor\", but not to \"a trivial desctructor\".\r\n> \r\n> The statement has been added to the logger, so I don't see why it shouldn't be added here.\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/b5c423c48e094bd098e11c3d1f57acae7502a4da/src/logging.cpp#L25-L26\r\n\r\nThat is not the case in so far as the `Logger` class has no trivial destructor. One could check this with a patch:\r\n```diff\r\n--- a/src/logging.cpp\r\n+++ b/src/logging.cpp\r\n@@ -8,6 +8,8 @@\r\n #include <util/time.h>\r\n \r\n #include <mutex>\r\n+#include <type_traits>\r\n+static_assert(std::is_trivially_destructible<BCLog::Logger>::value, \"Logger has no trivial ctor.\");\r\n \r\n const char * const DEFAULT_DEBUGLOGFILE = \"debug.log\";\r\n\r\n```\r\n\r\nand compile with an error:\r\n```\r\nlogging.cpp:12:1: error: static assertion failed: Logger has no trivial ctor.\r\n```",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-632657505",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18881"
    },
    {
      "event": "mentioned",
      "id": 3364435981,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzM2NDQzNTk4MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3364435981",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-22T12:03:56Z"
    },
    {
      "event": "subscribed",
      "id": 3364435984,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMzNjQ0MzU5ODQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3364435984",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-22T12:03:56Z"
    },
    {
      "event": "reviewed",
      "id": 416861130,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2ODYxMTMw",
      "url": null,
      "actor": null,
      "commit_id": "458992b06d80eb568141f60a33d38e12e894e27a",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#pullrequestreview-416861130",
      "submitted_at": "2020-05-22T12:09:28Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MGViMDI3MjA0ZjVhOWQ3YzAwZmE5N2Q0MTEyMjQzYmQzN2E5MDEy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "tree": {
        "sha": "48f59f69118a294203762b72481d6c61e3d6c25f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/48f59f69118a294203762b72481d6c61e3d6c25f"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 48f59f69118a294203762b72481d6c61e3d6c25f\nparent 26c093a9957756f3743c2347fe0abd90f81159c4\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1590151521 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1590151521 +0300\n\ndoc: Add and fix comments about never destroyed objects\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl7HyWEACgkQQQEIES5+\nqB/+lRAAmTmeVmQxS8ER0rH/9BqsjEXCRrSBq4p9kJ+ZTDjArwxk3dn9luUx5exM\nR2P6tgFXUh0ukJxvFyAOLxXBNDAwJ0Q9f6ui1ta1Y7jo1d6rY8khJUlwfVgqj1Sy\n8jP+ggewmFim2L/OT5l30aqs+E8LNc8V5m7x5uJmMIm+YlIaapOvOKm/M1+lTZeq\nn4F8XSJwhhkkF8BQEgk1SbZ81zhueXFnZ/hutWs5UFvkUnnCB/FrjUg8kmsYqr94\nLI3ANZij3Cb43tw8HQgP33cSxyVHQ/nFGBIZp3JsP3/9uOHsOR/78GjQWikOJUVM\nGH0gNJZAYPcSca4cS/WswN029jTE7+6S7yBUEwwiEaTRgJq5ZJxSve8yHhxBIB24\nholmcet1x2PJ3g9u40iPbkLQhRqo/Fi+e0sxwUaGgHhMeOwqOWNRfYD8UFOpZbBD\n8rSfWPRGK7DIaTg+VfFt1dRLZNXsVSChdt+Otp/Qv/bYNIW3nx2Q/WAVqi23Rj32\nOgCLDW5227rY15rH48ZgXWXbqwkVEA2fZlmzCRm6rAQPkgtUHC5waVgP6lo1nvoH\ngQc1e2Cw9Ex04laH6DhbKI9esHOuRNqwpoL++wlNU3OpizUHkbi6mPhRTV9G8Hms\nGJ8mJe1dveVz6paco+0c8V8be7cCSa4WD0wNDJ5yrxHFca5ynj4=\n=AerY\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/26c093a9957756f3743c2347fe0abd90f81159c4",
          "sha": "26c093a9957756f3743c2347fe0abd90f81159c4",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/26c093a9957756f3743c2347fe0abd90f81159c4"
        }
      ],
      "message": "doc: Add and fix comments about never destroyed objects",
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-05-22T12:45:21Z"
      },
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-05-22T12:45:21Z"
      },
      "sha": "90eb027204f5a9d7c00fa97d4112243bd37a9012"
    },
    {
      "event": "commented",
      "id": 632674167,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzMjY3NDE2Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632674167",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-22T12:49:27Z",
      "updated_at": "2020-05-22T12:49:27Z",
      "author_association": "MEMBER",
      "body": "Updated 26c093a9957756f3743c2347fe0abd90f81159c4 -> 90eb027204f5a9d7c00fa97d4112243bd37a9012 ([pr18881.14](https://github.com/hebasto/bitcoin/commits/pr18881.14) -> [pr18881.15](https://github.com/hebasto/bitcoin/commits/pr18881.15), [diff](https://github.com/hebasto/bitcoin/compare/pr18881.14..pr18881.15)):\r\n\r\n- added commit that implements @MarcoFalke's [suggestion](https://github.com/bitcoin/bitcoin/pull/18881#discussion_r429209164)",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-632674167",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18881"
    },
    {
      "event": "mentioned",
      "id": 3364566890,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzM2NDU2Njg5MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3364566890",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-22T12:49:28Z"
    },
    {
      "event": "subscribed",
      "id": 3364566892,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMzNjQ1NjY4OTI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3364566892",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-22T12:49:28Z"
    },
    {
      "event": "commented",
      "id": 632696415,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzMjY5NjQxNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632696415",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-22T13:41:41Z",
      "updated_at": "2020-05-22T13:41:41Z",
      "author_association": "MEMBER",
      "body": "re-ACK 90eb027204, only change is new doc commit 👠\r\n\r\n<details><summary>Show signature and timestamp</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nre-ACK 90eb027204, only change is new doc commit 👠\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUjBJQv8D4l/8DutA799ti+iOrxhVDJh48fWd71nn2WKqcyVFJ9Y6G18v2ASlNOz\r\nSrVnXhIUv/8jWgT5kOlqNw+UBMSLxNvv5NvYkchjQNYvHe5UfMrS8kWSqC6BYubc\r\nUuPt+g6wV/Y+I9umkuH46Pk26iwqmVTJh86WbA1syjclNTCm1PEfs6tEbxB5bn7+\r\nfBJQBQaV4J886hy1tRGK1FDNGQ93pNg88fgHdyoVMFsA4kP6utK/E93WshfV238i\r\nQ9d3jiZSVzX5rZSId3Z3cYJMhGcXqC76ZT8tl+v3IX7ErS4Rf+AFyp813L/eWpDD\r\nmHkImUprvIUtNkkZkjBPfAFeKWWG0gsLcfGU4/e+TAZ7R4vIm4v6fVmcunY5WEbE\r\n64Qm5nq7LYOeOXi8XvvHug2l3zS67ZoTeEtGJhEiF0+rcqTgsv/bACr8FksBheu9\r\nSZxUADkbahNnUv+22sEd+Nj2k50dGJOev/H50od1/gvt0E8vydUSz/P+g9NfXJyo\r\nuiKec1Pw\r\n=oyNZ\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n[Timestamp of file with hash `5124182a0b09070ce2424a477f0c8ebc1bc2c756ae24de2a66e6948ffd673c33  -`](https://opentimestamps.org/info/?004f70656e54696d657374616d7073000050726f6f6600bf89e2e884e8929401085124182a0b09070ce2424a477f0c8ebc1bc2c756ae24de2a66e6948ffd673c33f010128b9b2bdc3a8a40c84576c57d67388e08fff010282180fe8f6e06553525e58bd88ad8a008f1045ec7d687f0082af03a27ce7b39a20083dfe30d2ef90c8e2e2d68747470733a2f2f616c6963652e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267fff01033af3ab7e31cbf5fb483b9c835d3ba3308f1045ec7d688f008000bb81609f938930083dfe30d2ef90c8e292868747470733a2f2f66696e6e65792e63616c656e6461722e657465726e69747977616c6c2e636f6dfff01080d4aac37d76b44e26ac01a01ed30e9908f1045ec7d688f008723fd72c93b081940083dfe30d2ef90c8e2c2b68747470733a2f2f626f622e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267f0109a7531030d12ae4ec8f1cafba994d37908f1045ec7d688f008b43a2a803bc88f460083dfe30d2ef90c8e232268747470733a2f2f6274632e63616c656e6461722e636174616c6c6178792e636f6d)\r\n\r\n</details>\r\n",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-632696415",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18881"
    },
    {
      "event": "commented",
      "id": 632696808,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzMjY5NjgwOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632696808",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-22T13:42:36Z",
      "updated_at": "2020-05-22T13:42:36Z",
      "author_association": "MEMBER",
      "body": "Would be nice to get this merged soon, so that I don't have to pull in this branch every time for fuzzing.",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-632696808",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18881"
    },
    {
      "event": "reviewed",
      "id": 417040150,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MDQwMTUw",
      "url": null,
      "actor": null,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK +0.5. The DeleteLock fix makes sense and I really like the code cleanups, but I don't understand the thread_local change.\r\n\r\nCode review ACK 90eb027204f5a9d7c00fa97d4112243bd37a9012 because all the changes look correct and safe. But I don't know the purpose of commit  26c093a9957756f3743c2347fe0abd90f81159c4 \"Replace thread_local g_lockstack with a mutex-protected map (5/6).\" It seems like it could have a bad impact on debug performance, and the commit message and PR description don't give a reason for the change.\r\n\r\nre: PR Description https://github.com/bitcoin/bitcoin/pull/18881#issue-413323554\r\n\r\n> This PR:\r\n> \r\n> * fixes #18824\r\n> * ~adds Construct On First Use idiom documentation~\r\n> \r\n> Related to #15233.\r\n\r\nWould suggest updating the PR description to:\r\n\r\n- Summarize what the UB behavior is so it isn't necessary to read a different github issue\r\n- Give a rationale for replacing the thread_local in the last commit\r\n- Drop the construct idiom text if it's no longer relevant\r\n- Link to #18824 and #15233 at the bottom, and clarify if only the first commit is needed to fix bug #18824, or if the thread_local commit is needed too",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#pullrequestreview-417040150",
      "submitted_at": "2020-05-22T16:33:32Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
    },
    {
      "event": "commented",
      "id": 632799978,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzMjc5OTk3OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632799978",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-22T16:51:39Z",
      "updated_at": "2020-05-22T16:51:59Z",
      "author_association": "MEMBER",
      "body": "Several cases of UB are fixed here.\r\n\r\n* The first commit fixes the one described in #18824 \r\n* The  26c093a commit fixes one described in https://github.com/bitcoin/bitcoin/pull/18881#pullrequestreview-410137892",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-632799978",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18881"
    },
    {
      "event": "commented",
      "id": 632808735,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzMjgwODczNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632808735",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-22T17:05:14Z",
      "updated_at": "2020-05-22T17:05:14Z",
      "author_association": "MEMBER",
      "body": "> Several cases of UB are fixed here.\r\n> \r\n> * The first commit fixes the one described in #18824\r\n> * The  [26c093a](https://github.com/bitcoin/bitcoin/commit/26c093a9957756f3743c2347fe0abd90f81159c4) commit fixes one described in [#18881 (review)](https://github.com/bitcoin/bitcoin/pull/18881#pullrequestreview-410137892)\r\n\r\nThanks, I definitely think the PR description needs to be improved here and summarize what it is changing and give a clue about how the thread_local change fixes the second problem. If we don't know why the thread local change fixes it, the PR description should say that and not try to be mysterious",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-632808735",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18881"
    },
    {
      "event": "commented",
      "id": 632808830,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzMjgwODgzMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632808830",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-22T17:05:23Z",
      "updated_at": "2020-05-22T17:05:23Z",
      "author_association": "MEMBER",
      "body": "@ryanofsky \r\n> Would suggest updating the PR description to:\r\n> \r\n>  - Summarize what the UB behavior is so it isn't necessary to read a different github issue\r\n> \r\n>  - Give a rationale for replacing the thread_local in the last commit\r\n> \r\n>  - Drop the construct idiom text if it's no longer relevant\r\n> \r\n>  - Link to #18824 and #15233 at the bottom, and clarify if only the first commit is needed to fix bug #18824, or if the thread_local commit is needed too\r\n\r\nThank you for review. The PR description has been updated.\r\nSometimes it seems the C++ is much easier to express ideas than English :)\r\n",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-632808830",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18881"
    },
    {
      "event": "mentioned",
      "id": 3365556290,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzM2NTU1NjI5MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3365556290",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-22T17:05:23Z"
    },
    {
      "event": "subscribed",
      "id": 3365556293,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMzNjU1NTYyOTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3365556293",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-22T17:05:23Z"
    },
    {
      "event": "commented",
      "id": 632813648,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzMjgxMzY0OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632813648",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-22T17:16:00Z",
      "updated_at": "2020-05-22T17:16:00Z",
      "author_association": "MEMBER",
      "body": "re-ACK. Thanks for updating the PR description, this looks good to me. I'm pretty sure there should be a more efficient way to stop referencing the thread_local after it is destroyed (perhaps just resetting the reference in the thread_local destructor) without replacing the thread_local with a map with frequently added & removed entries. But this only affects debugging and probably isn't a big deal.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-632813648",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18881"
    },
    {
      "event": "commented",
      "id": 632833398,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzMjgzMzM5OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632833398",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-22T18:04:52Z",
      "updated_at": "2020-05-22T18:04:52Z",
      "author_association": "MEMBER",
      "body": "I am planning to merge this next week unless there are objections or outstanding action items",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-632833398",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18881"
    },
    {
      "event": "commented",
      "id": 632847462,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzMjg0NzQ2Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632847462",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-22T18:40:53Z",
      "updated_at": "2020-05-22T18:40:53Z",
      "author_association": "MEMBER",
      "body": "> I am planning to merge this next week unless there are objections or outstanding action items\r\n\r\n:+1: and seems fine to merge earlier, too. None of this code is even compiled unless debugging is turned on.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-632847462",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18881"
    },
    {
      "event": "merged",
      "id": 3373266189,
      "node_id": "MDExOk1lcmdlZEV2ZW50MzM3MzI2NjE4OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3373266189",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "fe1357a03af108c41baa6bd31903f2cfb0d75ef5",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe1357a03af108c41baa6bd31903f2cfb0d75ef5",
      "created_at": "2020-05-26T12:17:25Z"
    },
    {
      "event": "closed",
      "id": 3373266203,
      "node_id": "MDExOkNsb3NlZEV2ZW50MzM3MzI2NjIwMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3373266203",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-26T12:17:25Z"
    },
    {
      "event": "head_ref_deleted",
      "id": 3373397635,
      "node_id": "MDE5OkhlYWRSZWZEZWxldGVkRXZlbnQzMzczMzk3NjM1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3373397635",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-26T12:52:40Z"
    },
    {
      "event": "referenced",
      "id": 3376309390,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMzNzYzMDkzOTA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3376309390",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "c8b5293c9b8072551302cf991721c8d6b5aa8e7a",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/c8b5293c9b8072551302cf991721c8d6b5aa8e7a",
      "created_at": "2020-05-27T04:13:26Z"
    },
    {
      "event": "referenced",
      "id": 3794812091,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM3OTQ4MTIwOTE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3794812091",
      "actor": {
        "login": "jasonbcox",
        "id": 602513,
        "node_id": "MDQ6VXNlcjYwMjUxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/602513?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jasonbcox",
        "html_url": "https://github.com/jasonbcox",
        "followers_url": "https://api.github.com/users/jasonbcox/followers",
        "following_url": "https://api.github.com/users/jasonbcox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jasonbcox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jasonbcox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jasonbcox/subscriptions",
        "organizations_url": "https://api.github.com/users/jasonbcox/orgs",
        "repos_url": "https://api.github.com/users/jasonbcox/repos",
        "events_url": "https://api.github.com/users/jasonbcox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jasonbcox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "8b4530e454348f48fa2d9554213a2cc001fe7e2d",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/8b4530e454348f48fa2d9554213a2cc001fe7e2d",
      "created_at": "2020-09-22T19:19:10Z"
    },
    {
      "event": "referenced",
      "id": 5434552650,
      "node_id": "REFE_lADOABII584kf-F_zwAAAAFD7LFK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5434552650",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "6bf96e26603c3ed83988a3d694602ae76c7a064e",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/6bf96e26603c3ed83988a3d694602ae76c7a064e",
      "created_at": "2021-10-08T12:54:56Z"
    },
    {
      "event": "referenced",
      "id": 5450826479,
      "node_id": "REFE_lADOABII584kf-F_zwAAAAFE5QLv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5450826479",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "ec2753a8ba3b70422365c4637fb9ec86fe0c9129",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/ec2753a8ba3b70422365c4637fb9ec86fe0c9129",
      "created_at": "2021-10-12T16:30:14Z"
    },
    {
      "event": "referenced",
      "id": 5453521933,
      "node_id": "REFE_lADOABII584kf-F_zwAAAAFFDiQN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5453521933",
      "actor": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "08418c582a4714e0279123438fe231d5aac72e18",
      "commit_url": "https://api.github.com/repos/PastaPastaPasta/dash/commits/08418c582a4714e0279123438fe231d5aac72e18",
      "created_at": "2021-10-12T23:57:34Z"
    },
    {
      "event": "referenced",
      "id": 5640694336,
      "node_id": "REFE_lADOABII584kf-F_zwAAAAFQNipA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5640694336",
      "actor": {
        "login": "pravblockc",
        "id": 51935684,
        "node_id": "MDQ6VXNlcjUxOTM1Njg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/51935684?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pravblockc",
        "html_url": "https://github.com/pravblockc",
        "followers_url": "https://api.github.com/users/pravblockc/followers",
        "following_url": "https://api.github.com/users/pravblockc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pravblockc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pravblockc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pravblockc/subscriptions",
        "organizations_url": "https://api.github.com/users/pravblockc/orgs",
        "repos_url": "https://api.github.com/users/pravblockc/repos",
        "events_url": "https://api.github.com/users/pravblockc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pravblockc/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "6b43103f1a6afb6a6917ebd926981234c1e8d8e3",
      "commit_url": "https://api.github.com/repos/pravblockc/dash/commits/6b43103f1a6afb6a6917ebd926981234c1e8d8e3",
      "created_at": "2021-11-18T18:27:48Z"
    },
    {
      "event": "locked",
      "id": 6073978820,
      "node_id": "LOE_lADOABII584kf-F_zwAAAAFqCY_E",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6073978820",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-15T10:58:59Z",
      "lock_reason": "resolved"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420013187",
      "pull_request_review_id": 405669322,
      "id": 420013187,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAxMzE4Nw==",
      "diff_hunk": "@@ -78,21 +78,14 @@ typedef std::map<std::pair<void*, void*>, LockStack> LockOrders;\n typedef std::set<std::pair<void*, void*> > InvLockOrders;\n \n struct LockData {\n-    // Very ugly hack: as the global constructs and destructors run single\n-    // threaded, we use this boolean to know whether LockData still exists,\n-    // as DeleteLock can get called by global RecursiveMutex destructors\n-    // after LockData disappears.\n-    bool available;\n-    LockData() : available(true) {}\n-    ~LockData() { available = false; }\n-\n     LockOrders lockorders;\n     InvLockOrders invlockorders;\n     std::mutex dd_mutex;\n };\n LockData& GetLockData() {\n-    static LockData lockdata;\n-    return lockdata;\n+    // See doc/developers-notes.md#construct-on-first-use-idiom\n+    static auto lockdata = new LockData();",
      "path": "src/sync.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "5a406f76030263c1c4e5335cea3be022263426f2",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    static LockData* lockdata = new LockData();\r\n```\r\n\r\nnot sure why auto needs to hide both the type and the pointer-ness. The additional 5 chars don't seem overly verbose.",
      "created_at": "2020-05-05T10:35:42Z",
      "updated_at": "2020-05-22T12:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420013187",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420013187"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 87,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420022157",
      "pull_request_review_id": 405679685,
      "id": 420022157,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAyMjE1Nw==",
      "diff_hunk": "@@ -78,21 +78,14 @@ typedef std::map<std::pair<void*, void*>, LockStack> LockOrders;\n typedef std::set<std::pair<void*, void*> > InvLockOrders;\n \n struct LockData {\n-    // Very ugly hack: as the global constructs and destructors run single\n-    // threaded, we use this boolean to know whether LockData still exists,\n-    // as DeleteLock can get called by global RecursiveMutex destructors\n-    // after LockData disappears.\n-    bool available;\n-    LockData() : available(true) {}\n-    ~LockData() { available = false; }\n-\n     LockOrders lockorders;\n     InvLockOrders invlockorders;\n     std::mutex dd_mutex;\n };\n LockData& GetLockData() {\n-    static LockData lockdata;\n-    return lockdata;\n+    // See doc/developers-notes.md#construct-on-first-use-idiom\n+    static auto lockdata = new LockData();",
      "path": "src/sync.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "5a406f76030263c1c4e5335cea3be022263426f2",
      "in_reply_to_id": 420013187,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "[Updated](https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-623985636).",
      "created_at": "2020-05-05T10:53:15Z",
      "updated_at": "2020-05-22T12:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420022157",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420022157"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 87,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420046291",
      "pull_request_review_id": 405709216,
      "id": 420046291,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA0NjI5MQ==",
      "diff_hunk": "@@ -839,6 +840,37 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use idiom\n+------------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"`static` initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the `static` initialization order problem, use the Construct On First Use idiom:\n+\n+```C++\n+BCLog::Logger& LogInstance()\n+{\n+    // See doc/developers-notes.md#construct-on-first-use-idiom\n+    static BCLog::Logger* g_logger{new BCLog::Logger()};\n+    return *g_logger;\n+}\n+```\n+\n+*Rationale*: This approache guaranties that:",
      "path": "doc/developer-notes.md",
      "position": null,
      "original_position": 33,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "7e3f40dd594d81b37458f9f5d36d4d7df99f8917",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "approach guarantees",
      "created_at": "2020-05-05T11:43:31Z",
      "updated_at": "2020-05-22T12:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420046291",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420046291"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 864,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420046912",
      "pull_request_review_id": 405709912,
      "id": 420046912,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA0NjkxMg==",
      "diff_hunk": "@@ -839,6 +840,37 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use idiom\n+------------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"`static` initialization order problem\". It could cause the use of an object:",
      "path": "doc/developer-notes.md",
      "position": null,
      "original_position": 16,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "7e3f40dd594d81b37458f9f5d36d4d7df99f8917",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think the markdown is more readable without wrapping \"static\" in code markup (same for line 853 below)",
      "created_at": "2020-05-05T11:44:45Z",
      "updated_at": "2020-05-22T12:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420046912",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420046912"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 847,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420047499",
      "pull_request_review_id": 405709912,
      "id": 420047499,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA0NzQ5OQ==",
      "diff_hunk": "@@ -839,6 +840,37 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use idiom",
      "path": "doc/developer-notes.md",
      "position": null,
      "original_position": 12,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "7e3f40dd594d81b37458f9f5d36d4d7df99f8917",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "can drop \"idiom\"? or maybe more clear with quotes: \"Construct On First Use\" idiom, but I personally prefer without \"idiom\"\r\n\r\n(same for line 853 below)",
      "created_at": "2020-05-05T11:45:59Z",
      "updated_at": "2020-05-22T12:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420047499",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420047499"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 843,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420047910",
      "pull_request_review_id": 405709912,
      "id": 420047910,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA0NzkxMA==",
      "diff_hunk": "@@ -839,6 +840,37 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use idiom\n+------------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"`static` initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the `static` initialization order problem, use the Construct On First Use idiom:\n+\n+```C++\n+BCLog::Logger& LogInstance()\n+{\n+    // See doc/developers-notes.md#construct-on-first-use-idiom\n+    static BCLog::Logger* g_logger{new BCLog::Logger()};\n+    return *g_logger;\n+}\n+```\n+\n+*Rationale*: This approache guaranties that:\n+\n+- an object gets constructed prior to its first use",
      "path": "doc/developer-notes.md",
      "position": null,
      "original_position": 35,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "7e3f40dd594d81b37458f9f5d36d4d7df99f8917",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "s/gets/is/",
      "created_at": "2020-05-05T11:46:47Z",
      "updated_at": "2020-05-22T12:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420047910",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420047910"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 866,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420048042",
      "pull_request_review_id": 405709912,
      "id": 420048042,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA0ODA0Mg==",
      "diff_hunk": "@@ -839,6 +840,37 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use idiom\n+------------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"`static` initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the `static` initialization order problem, use the Construct On First Use idiom:\n+\n+```C++\n+BCLog::Logger& LogInstance()\n+{\n+    // See doc/developers-notes.md#construct-on-first-use-idiom\n+    static BCLog::Logger* g_logger{new BCLog::Logger()};\n+    return *g_logger;\n+}\n+```\n+\n+*Rationale*: This approache guaranties that:\n+\n+- an object gets constructed prior to its first use\n+- an object doesn’t get destructed until after its last use",
      "path": "doc/developer-notes.md",
      "position": null,
      "original_position": 36,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "7e3f40dd594d81b37458f9f5d36d4d7df99f8917",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "s/doesn't get/is not/",
      "created_at": "2020-05-05T11:47:07Z",
      "updated_at": "2020-05-22T12:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420048042",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420048042"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 867,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420049394",
      "pull_request_review_id": 405712930,
      "id": 420049394,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA0OTM5NA==",
      "diff_hunk": "@@ -839,6 +840,37 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use idiom\n+------------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"`static` initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the `static` initialization order problem, use the Construct On First Use idiom:\n+\n+```C++\n+BCLog::Logger& LogInstance()\n+{\n+    // See doc/developers-notes.md#construct-on-first-use-idiom\n+    static BCLog::Logger* g_logger{new BCLog::Logger()};\n+    return *g_logger;\n+}\n+```\n+\n+*Rationale*: This approache guaranties that:",
      "path": "doc/developer-notes.md",
      "position": null,
      "original_position": 33,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "7e3f40dd594d81b37458f9f5d36d4d7df99f8917",
      "in_reply_to_id": 420046291,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thank you! [Updated](https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-624007651).",
      "created_at": "2020-05-05T11:49:47Z",
      "updated_at": "2020-05-22T12:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420049394",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420049394"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 864,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420049925",
      "pull_request_review_id": 405709912,
      "id": 420049925,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA0OTkyNQ==",
      "diff_hunk": "@@ -13,21 +13,7 @@ const char * const DEFAULT_DEBUGLOGFILE = \"debug.log\";\n \n BCLog::Logger& LogInstance()\n {\n-/**\n- * NOTE: the logger instances is leaked on exit. This is ugly, but will be\n- * cleaned up by the OS/libc. Defining a logger as a global object doesn't work\n- * since the order of destruction of static/global objects is undefined.\n- * Consider if the logger gets destroyed, and then some later destructor calls\n- * LogPrintf, maybe indirectly, and you get a core dump at shutdown trying to\n- * access the logger. When the shutdown sequence is fully audited and tested,\n- * explicit destruction of these objects can be implemented by changing this\n- * from a raw pointer to a std::unique_ptr.\n- * Since the destructor is never called, the logger and all its members must\n- * have a trivial destructor.\n- *\n- * This method of initialization was originally introduced in\n- * ee3374234c60aba2cc4c5cd5cac1c0aefc2d817c.\n- */\n+    // See doc/developers-notes.md#construct-on-first-use-idiom",
      "path": "src/logging.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "a2234071ddc633cf92ba501126b74bf78731f676",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "developer",
      "created_at": "2020-05-05T11:50:54Z",
      "updated_at": "2020-05-22T12:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420049925",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420049925"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420050170",
      "pull_request_review_id": 405709912,
      "id": 420050170,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA1MDE3MA==",
      "diff_hunk": "@@ -436,8 +436,7 @@ class RNGState {\n \n RNGState& GetRNGState() noexcept\n {\n-    // This C++11 idiom relies on the guarantee that static variable are initialized\n-    // on first call, even when multiple parallel calls are permitted.\n+    // See doc/developers-notes.md#construct-on-first-use-idiom",
      "path": "src/random.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "a2234071ddc633cf92ba501126b74bf78731f676",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "developer",
      "created_at": "2020-05-05T11:51:23Z",
      "updated_at": "2020-05-22T12:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420050170",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420050170"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 439,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420050539",
      "pull_request_review_id": 405709912,
      "id": 420050539,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA1MDUzOQ==",
      "diff_hunk": "@@ -839,6 +840,37 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use idiom\n+------------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"`static` initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the `static` initialization order problem, use the Construct On First Use idiom:\n+\n+```C++\n+BCLog::Logger& LogInstance()\n+{\n+    // See doc/developers-notes.md#construct-on-first-use-idiom\n+    static BCLog::Logger* g_logger{new BCLog::Logger()};\n+    return *g_logger;\n+}\n+```\n+\n+*Rationale*: This approache guarantees that:\n+\n+- an object gets constructed prior to its first use\n+- an object doesn’t get destructed until after its last use\n+- the initialization of an object is thread-safe\n+\n+*Note 1*: Even though the object pointed to by a pointer is never deleted, the memory doesn't actually \"leak\" since the operating system automatically reclaims all the memory in a program's heap when that program exits.\n+\n+*Note 2*: If it is required that the destructor for an object is called while the program is exiting, other approaches must be used.",
      "path": "doc/developer-notes.md",
      "position": null,
      "original_position": 41,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "a2234071ddc633cf92ba501126b74bf78731f676",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If the destructor for an object needs to be called",
      "created_at": "2020-05-05T11:52:04Z",
      "updated_at": "2020-05-22T12:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420050539",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420050539"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 872,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420050657",
      "pull_request_review_id": 405709912,
      "id": 420050657,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA1MDY1Nw==",
      "diff_hunk": "@@ -78,21 +78,14 @@ typedef std::map<std::pair<void*, void*>, LockStack> LockOrders;\n typedef std::set<std::pair<void*, void*> > InvLockOrders;\n \n struct LockData {\n-    // Very ugly hack: as the global constructs and destructors run single\n-    // threaded, we use this boolean to know whether LockData still exists,\n-    // as DeleteLock can get called by global RecursiveMutex destructors\n-    // after LockData disappears.\n-    bool available;\n-    LockData() : available(true) {}\n-    ~LockData() { available = false; }\n-\n     LockOrders lockorders;\n     InvLockOrders invlockorders;\n     std::mutex dd_mutex;\n };\n LockData& GetLockData() {\n-    static LockData lockdata;\n-    return lockdata;\n+    // See doc/developers-notes.md#construct-on-first-use-idiom",
      "path": "src/sync.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "a2234071ddc633cf92ba501126b74bf78731f676",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "developer",
      "created_at": "2020-05-05T11:52:17Z",
      "updated_at": "2020-05-22T12:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420050657",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420050657"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420053647",
      "pull_request_review_id": 405718197,
      "id": 420053647,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA1MzY0Nw==",
      "diff_hunk": "@@ -839,6 +840,37 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use idiom\n+------------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"`static` initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the `static` initialization order problem, use the Construct On First Use idiom:\n+\n+```C++\n+BCLog::Logger& LogInstance()\n+{\n+    // See doc/developers-notes.md#construct-on-first-use-idiom\n+    static BCLog::Logger* g_logger{new BCLog::Logger()};\n+    return *g_logger;\n+}\n+```\n+\n+*Rationale*: This approache guaranties that:",
      "path": "doc/developer-notes.md",
      "position": null,
      "original_position": 33,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "7e3f40dd594d81b37458f9f5d36d4d7df99f8917",
      "in_reply_to_id": 420046291,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "oops, somehow that comment was published before the review...GitHub :man_shrugging: ",
      "created_at": "2020-05-05T11:58:06Z",
      "updated_at": "2020-05-22T12:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420053647",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420053647"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 864,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420082930",
      "pull_request_review_id": 405754524,
      "id": 420082930,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA4MjkzMA==",
      "diff_hunk": "@@ -839,6 +840,37 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use\n+------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"static initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the static initialization order problem, use the Construct On First Use:\n+\n+```C++\n+BCLog::Logger& LogInstance()\n+{\n+    // See doc/developer-notes.md#construct-on-first-use\n+    static BCLog::Logger* g_logger{new BCLog::Logger()};\n+    return *g_logger;\n+}\n+```\n+\n+*Rationale*: This approache guarantees that:",
      "path": "doc/developer-notes.md",
      "position": null,
      "original_position": 33,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "d3c26862e263fea7d49df7f9bc9acef30a84c1ca",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "approach",
      "created_at": "2020-05-05T12:50:19Z",
      "updated_at": "2020-05-22T12:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420082930",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420082930"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 864,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420083226",
      "pull_request_review_id": 405754524,
      "id": 420083226,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA4MzIyNg==",
      "diff_hunk": "@@ -839,6 +840,37 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use\n+------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"static initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the static initialization order problem, use the Construct On First Use:",
      "path": "doc/developer-notes.md",
      "position": null,
      "original_position": 22,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "d3c26862e263fea7d49df7f9bc9acef30a84c1ca",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "s/use the/be sure to/",
      "created_at": "2020-05-05T12:50:50Z",
      "updated_at": "2020-05-22T12:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420083226",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420083226"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 853,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420084466",
      "pull_request_review_id": 405754524,
      "id": 420084466,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA4NDQ2Ng==",
      "diff_hunk": "@@ -839,6 +840,37 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use\n+------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"static initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the static initialization order problem, use the Construct On First Use:\n+\n+```C++\n+BCLog::Logger& LogInstance()\n+{\n+    // See doc/developer-notes.md#construct-on-first-use",
      "path": "doc/developer-notes.md",
      "position": null,
      "original_position": 27,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "d3c26862e263fea7d49df7f9bc9acef30a84c1ca",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "comment seems unneeded?",
      "created_at": "2020-05-05T12:53:00Z",
      "updated_at": "2020-05-22T12:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420084466",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420084466"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 858,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420084908",
      "pull_request_review_id": 405754524,
      "id": 420084908,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA4NDkwOA==",
      "diff_hunk": "@@ -839,6 +840,37 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use\n+------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"static initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the static initialization order problem, use the Construct On First Use:\n+\n+```C++\n+BCLog::Logger& LogInstance()",
      "path": "doc/developer-notes.md",
      "position": null,
      "original_position": 25,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "d3c26862e263fea7d49df7f9bc9acef30a84c1ca",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "is this code snippet a good explanation of the concept?",
      "created_at": "2020-05-05T12:53:44Z",
      "updated_at": "2020-05-22T12:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420084908",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420084908"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 856,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420086744",
      "pull_request_review_id": 405754524,
      "id": 420086744,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA4Njc0NA==",
      "diff_hunk": "@@ -839,6 +840,37 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use\n+------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"static initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the static initialization order problem, use the Construct On First Use:\n+\n+```C++\n+BCLog::Logger& LogInstance()\n+{\n+    // See doc/developer-notes.md#construct-on-first-use\n+    static BCLog::Logger* g_logger{new BCLog::Logger()};\n+    return *g_logger;\n+}\n+```\n+\n+*Rationale*: This approache guarantees that:\n+\n+- an object is constructed prior to its first use",
      "path": "doc/developer-notes.md",
      "position": null,
      "original_position": 35,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "d3c26862e263fea7d49df7f9bc9acef30a84c1ca",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "sorry to re-review the same area, but I think this could be reduced to two points and would be better written as:\r\n- the object is constructed before first use and not destroyed until after last use\r\n- the object initialization is thread-safe\r\n\r\n(also: destructed -> destroyed and the \"its\" can be removed)",
      "created_at": "2020-05-05T12:56:34Z",
      "updated_at": "2020-05-22T12:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420086744",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420086744"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 866,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420100644",
      "pull_request_review_id": 405777105,
      "id": 420100644,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDEwMDY0NA==",
      "diff_hunk": "@@ -839,6 +840,37 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use\n+------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"static initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the static initialization order problem, use the Construct On First Use:\n+\n+```C++\n+BCLog::Logger& LogInstance()\n+{\n+    // See doc/developer-notes.md#construct-on-first-use",
      "path": "doc/developer-notes.md",
      "position": null,
      "original_position": 27,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "d3c26862e263fea7d49df7f9bc9acef30a84c1ca",
      "in_reply_to_id": 420084466,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It seems developers need multi-line comments to describe rationale of using  COFU :)\r\nThis oneliner is just a pointer to docs with detailed explanation and pitfalls (like not calling a destructor). I'd prefer keep it as is.",
      "created_at": "2020-05-05T13:17:41Z",
      "updated_at": "2020-05-22T12:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420100644",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420100644"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 858,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420101738",
      "pull_request_review_id": 405778448,
      "id": 420101738,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDEwMTczOA==",
      "diff_hunk": "@@ -839,6 +840,37 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use\n+------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"static initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the static initialization order problem, use the Construct On First Use:\n+\n+```C++\n+BCLog::Logger& LogInstance()",
      "path": "doc/developer-notes.md",
      "position": null,
      "original_position": 25,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "d3c26862e263fea7d49df7f9bc9acef30a84c1ca",
      "in_reply_to_id": 420084908,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why not? I'd say \"example\" rather \"explanation\".",
      "created_at": "2020-05-05T13:19:16Z",
      "updated_at": "2020-05-22T12:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420101738",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420101738"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 856,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420107046",
      "pull_request_review_id": 405785343,
      "id": 420107046,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDEwNzA0Ng==",
      "diff_hunk": "@@ -839,6 +840,37 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use\n+------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"static initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the static initialization order problem, use the Construct On First Use:\n+\n+```C++\n+BCLog::Logger& LogInstance()\n+{\n+    // See doc/developer-notes.md#construct-on-first-use\n+    static BCLog::Logger* g_logger{new BCLog::Logger()};\n+    return *g_logger;\n+}\n+```\n+\n+*Rationale*: This approache guarantees that:",
      "path": "doc/developer-notes.md",
      "position": null,
      "original_position": 33,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "d3c26862e263fea7d49df7f9bc9acef30a84c1ca",
      "in_reply_to_id": 420082930,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "[Updated](https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-624053939).",
      "created_at": "2020-05-05T13:26:50Z",
      "updated_at": "2020-05-22T12:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420107046",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420107046"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 864,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420107190",
      "pull_request_review_id": 405785532,
      "id": 420107190,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDEwNzE5MA==",
      "diff_hunk": "@@ -839,6 +840,37 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use\n+------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"static initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the static initialization order problem, use the Construct On First Use:",
      "path": "doc/developer-notes.md",
      "position": null,
      "original_position": 22,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "d3c26862e263fea7d49df7f9bc9acef30a84c1ca",
      "in_reply_to_id": 420083226,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "[Updated](https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-624053939).",
      "created_at": "2020-05-05T13:27:01Z",
      "updated_at": "2020-05-22T12:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420107190",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420107190"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 853,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420107506",
      "pull_request_review_id": 405785948,
      "id": 420107506,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDEwNzUwNg==",
      "diff_hunk": "@@ -839,6 +840,37 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use\n+------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"static initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the static initialization order problem, use the Construct On First Use:\n+\n+```C++\n+BCLog::Logger& LogInstance()\n+{\n+    // See doc/developer-notes.md#construct-on-first-use\n+    static BCLog::Logger* g_logger{new BCLog::Logger()};\n+    return *g_logger;\n+}\n+```\n+\n+*Rationale*: This approache guarantees that:\n+\n+- an object is constructed prior to its first use",
      "path": "doc/developer-notes.md",
      "position": null,
      "original_position": 35,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "d3c26862e263fea7d49df7f9bc9acef30a84c1ca",
      "in_reply_to_id": 420086744,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "[Updated](https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-624053939).",
      "created_at": "2020-05-05T13:27:27Z",
      "updated_at": "2020-05-22T12:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420107506",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420107506"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 866,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420109240",
      "pull_request_review_id": 405788154,
      "id": 420109240,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDEwOTI0MA==",
      "diff_hunk": "@@ -839,6 +840,37 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use\n+------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"static initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the static initialization order problem, use the Construct On First Use:\n+\n+```C++\n+BCLog::Logger& LogInstance()\n+{\n+    // See doc/developer-notes.md#construct-on-first-use",
      "path": "doc/developer-notes.md",
      "position": null,
      "original_position": 27,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "d3c26862e263fea7d49df7f9bc9acef30a84c1ca",
      "in_reply_to_id": 420084466,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, in the codebase it's fine but here it's a pointer to itself :) edit: reading the rendered doc I guess it's fine",
      "created_at": "2020-05-05T13:29:45Z",
      "updated_at": "2020-05-22T12:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420109240",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420109240"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 858,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420109425",
      "pull_request_review_id": 405788393,
      "id": 420109425,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDEwOTQyNQ==",
      "diff_hunk": "@@ -839,6 +840,37 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use\n+------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"static initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the static initialization order problem, use the Construct On First Use:\n+\n+```C++\n+BCLog::Logger& LogInstance()\n+{\n+    // See doc/developer-notes.md#construct-on-first-use\n+    static BCLog::Logger* g_logger{new BCLog::Logger()};\n+    return *g_logger;\n+}\n+```\n+\n+*Rationale*: This approache guarantees that:\n+\n+- an object is constructed prior to its first use",
      "path": "doc/developer-notes.md",
      "position": null,
      "original_position": 35,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "d3c26862e263fea7d49df7f9bc9acef30a84c1ca",
      "in_reply_to_id": 420086744,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "\"its\" seems prevent any ambiguation :)",
      "created_at": "2020-05-05T13:30:01Z",
      "updated_at": "2020-05-22T12:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420109425",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420109425"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 866,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420112012",
      "pull_request_review_id": 405791697,
      "id": 420112012,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDExMjAxMg==",
      "diff_hunk": "@@ -839,6 +840,37 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use\n+------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"static initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the static initialization order problem, use the Construct On First Use:\n+\n+```C++\n+BCLog::Logger& LogInstance()",
      "path": "doc/developer-notes.md",
      "position": null,
      "original_position": 25,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "d3c26862e263fea7d49df7f9bc9acef30a84c1ca",
      "in_reply_to_id": 420084908,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sure; people can look it up anyway for more info.",
      "created_at": "2020-05-05T13:33:39Z",
      "updated_at": "2020-05-22T12:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420112012",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420112012"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 856,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420112084",
      "pull_request_review_id": 405791799,
      "id": 420112084,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDExMjA4NA==",
      "diff_hunk": "@@ -839,6 +840,37 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use\n+------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"static initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the static initialization order problem, use the Construct On First Use:\n+\n+```C++\n+BCLog::Logger& LogInstance()\n+{\n+    // See doc/developer-notes.md#construct-on-first-use",
      "path": "doc/developer-notes.md",
      "position": null,
      "original_position": 27,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "d3c26862e263fea7d49df7f9bc9acef30a84c1ca",
      "in_reply_to_id": 420084466,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "As it is an \"example\", the presence of the comment line seems reasonable, no?",
      "created_at": "2020-05-05T13:33:44Z",
      "updated_at": "2020-05-22T12:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420112084",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420112084"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 858,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420242951",
      "pull_request_review_id": 405956635,
      "id": 420242951,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI0Mjk1MQ==",
      "diff_hunk": "@@ -839,6 +840,36 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use\n+------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"static initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the static initialization order problem, be sure to Construct On First Use:\n+\n+```C++\n+BCLog::Logger& LogInstance()\n+{\n+    // See doc/developer-notes.md#construct-on-first-use\n+    static BCLog::Logger* g_logger{new BCLog::Logger()};",
      "path": "doc/developer-notes.md",
      "position": null,
      "original_position": 28,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "86ce03c53e22f0ce2c4bfbabd4aae5cf62dcb0fc",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's nicer to use std::unique_pointer here, so that the object also gets destroyed on shutdown (in reserve order compared to initialization).",
      "created_at": "2020-05-05T16:29:33Z",
      "updated_at": "2020-05-22T12:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420242951",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420242951"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 859,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420247771",
      "pull_request_review_id": 405962487,
      "id": 420247771,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI0Nzc3MQ==",
      "diff_hunk": "@@ -839,6 +840,36 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use\n+------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"static initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the static initialization order problem, be sure to Construct On First Use:\n+\n+```C++\n+BCLog::Logger& LogInstance()\n+{\n+    // See doc/developer-notes.md#construct-on-first-use\n+    static BCLog::Logger* g_logger{new BCLog::Logger()};",
      "path": "doc/developer-notes.md",
      "position": null,
      "original_position": 28,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "86ce03c53e22f0ce2c4bfbabd4aae5cf62dcb0fc",
      "in_reply_to_id": 420242951,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Agree that the docs should recommend the version that doesn't leak. An additional note can say that a version that leaks might be preferable in rare circumstances.",
      "created_at": "2020-05-05T16:36:16Z",
      "updated_at": "2020-05-22T12:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420247771",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420247771"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 859,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420472355",
      "pull_request_review_id": 406228938,
      "id": 420472355,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ3MjM1NQ==",
      "diff_hunk": "@@ -839,6 +840,36 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use\n+------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"static initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the static initialization order problem, be sure to Construct On First Use:\n+\n+```C++\n+BCLog::Logger& LogInstance()\n+{\n+    // See doc/developer-notes.md#construct-on-first-use\n+    static BCLog::Logger* g_logger{new BCLog::Logger()};",
      "path": "doc/developer-notes.md",
      "position": null,
      "original_position": 28,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "86ce03c53e22f0ce2c4bfbabd4aae5cf62dcb0fc",
      "in_reply_to_id": 420242951,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "IMO, destroying an object via `std::unique_pointer`:\r\n- is not required as no actual memory leak happens at program exit ([C++ FAQ-a](https://isocpp.org/wiki/faq/ctors#static-init-order-on-first-use) and [FAQ-b](https://isocpp.org/wiki/faq/ctors#nifty-counter-idiom)); in another words, not destroying an object does not implies memory leaks in that case\r\n- is not safe as this object could (potentially) be destroyed before its last use at program exit sequence, e.g., instances of `BCLog::Logger` and `LockData` classes.",
      "created_at": "2020-05-05T23:45:37Z",
      "updated_at": "2020-05-22T12:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420472355",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420472355"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 859,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420476145",
      "pull_request_review_id": 406233142,
      "id": 420476145,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ3NjE0NQ==",
      "diff_hunk": "@@ -839,6 +840,36 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use\n+------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"static initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the static initialization order problem, be sure to Construct On First Use:\n+\n+```C++\n+BCLog::Logger& LogInstance()\n+{\n+    // See doc/developer-notes.md#construct-on-first-use\n+    static BCLog::Logger* g_logger{new BCLog::Logger()};",
      "path": "doc/developer-notes.md",
      "position": null,
      "original_position": 28,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "86ce03c53e22f0ce2c4bfbabd4aae5cf62dcb0fc",
      "in_reply_to_id": 420242951,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The initial intention of changing the docs was to drop every long explanation in the source, and just re-direct a code reader to the docs. If these changes seem controversial, all doc-change commits could be dropped :)",
      "created_at": "2020-05-05T23:57:47Z",
      "updated_at": "2020-05-22T12:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420476145",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420476145"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 859,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420492795",
      "pull_request_review_id": 406250534,
      "id": 420492795,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ5Mjc5NQ==",
      "diff_hunk": "@@ -839,6 +840,36 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use\n+------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"static initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the static initialization order problem, be sure to Construct On First Use:\n+\n+```C++\n+BCLog::Logger& LogInstance()\n+{\n+    // See doc/developer-notes.md#construct-on-first-use\n+    static BCLog::Logger* g_logger{new BCLog::Logger()};",
      "path": "doc/developer-notes.md",
      "position": null,
      "original_position": 28,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "86ce03c53e22f0ce2c4bfbabd4aae5cf62dcb0fc",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "👀 \r\n```cpp\r\nstatic BCLog::Logger logger;\r\nreturn logger;\r\n```",
      "created_at": "2020-05-06T00:59:59Z",
      "updated_at": "2020-05-22T12:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420492795",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420492795"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 859,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420503783",
      "pull_request_review_id": 406261389,
      "id": 420503783,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUwMzc4Mw==",
      "diff_hunk": "@@ -839,6 +840,36 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use\n+------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"static initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the static initialization order problem, be sure to Construct On First Use:\n+\n+```C++\n+BCLog::Logger& LogInstance()\n+{\n+    // See doc/developer-notes.md#construct-on-first-use\n+    static BCLog::Logger* g_logger{new BCLog::Logger()};",
      "path": "doc/developer-notes.md",
      "position": null,
      "original_position": 28,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "86ce03c53e22f0ce2c4bfbabd4aae5cf62dcb0fc",
      "in_reply_to_id": 420492795,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> ```c++\r\n> static BCLog::Logger logger;\r\n> return logger;\r\n> ```\r\n\r\nThe `logger` object could (potentially) be destroyed before its last use at program exit sequence that leads to undefined behavior.\r\n\r\n",
      "created_at": "2020-05-06T01:46:05Z",
      "updated_at": "2020-05-22T12:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420503783",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420503783"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 859,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420504248",
      "pull_request_review_id": 406261890,
      "id": 420504248,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUwNDI0OA==",
      "diff_hunk": "@@ -839,6 +840,36 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use\n+------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"static initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the static initialization order problem, be sure to Construct On First Use:\n+\n+```C++\n+BCLog::Logger& LogInstance()\n+{\n+    // See doc/developer-notes.md#construct-on-first-use\n+    static BCLog::Logger* g_logger{new BCLog::Logger()};",
      "path": "doc/developer-notes.md",
      "position": null,
      "original_position": 28,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "86ce03c53e22f0ce2c4bfbabd4aae5cf62dcb0fc",
      "in_reply_to_id": 420492795,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Actually, the d954f7c8c017c7e9bf60f48a8c41da8c498239f7 commit in this PR fixes such issue for the `lockdata` object.",
      "created_at": "2020-05-06T01:48:14Z",
      "updated_at": "2020-05-22T12:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420504248",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420504248"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 859,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420998960",
      "pull_request_review_id": 406873565,
      "id": 420998960,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk5ODk2MA==",
      "diff_hunk": "@@ -839,6 +840,36 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use\n+------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"static initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the static initialization order problem, be sure to Construct On First Use:\n+\n+```C++\n+BCLog::Logger& LogInstance()\n+{\n+    // See doc/developer-notes.md#construct-on-first-use\n+    static BCLog::Logger* g_logger{new BCLog::Logger()};",
      "path": "doc/developer-notes.md",
      "position": null,
      "original_position": 28,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "86ce03c53e22f0ce2c4bfbabd4aae5cf62dcb0fc",
      "in_reply_to_id": 420242951,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "* Some tools check for leaked memory at exit, so making that the default increases verbosity for those tools.\r\n* The destructor must be trivial to be able to do that in the first place. I am not sure why you remove that requirement in the docs.",
      "created_at": "2020-05-06T18:21:41Z",
      "updated_at": "2020-05-22T12:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420998960",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420998960"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 859,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421001720",
      "pull_request_review_id": 406877034,
      "id": 421001720,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAwMTcyMA==",
      "diff_hunk": "@@ -839,6 +840,36 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use\n+------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"static initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the static initialization order problem, be sure to Construct On First Use:\n+\n+```C++\n+BCLog::Logger& LogInstance()\n+{\n+    // See doc/developer-notes.md#construct-on-first-use\n+    static BCLog::Logger* g_logger{new BCLog::Logger()};",
      "path": "doc/developer-notes.md",
      "position": null,
      "original_position": 28,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "86ce03c53e22f0ce2c4bfbabd4aae5cf62dcb0fc",
      "in_reply_to_id": 420242951,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not doing that is not a leak. It's just memory that's still reachable at exit (which at least valgrind classifies differently than leaked memory, and doesn't warn about).\r\n\r\nI think it's just cleaner to clean things up too; for example this makes it easier to move globals into a class if that ever makes sense. Also, if that works, it means there exists a clear layering between which modules depend on which others in terms of initialization order, which is a low-priority nice-to-have if possible.",
      "created_at": "2020-05-06T18:26:25Z",
      "updated_at": "2020-05-22T12:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r421001720",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421001720"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 859,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421479070",
      "pull_request_review_id": 407439396,
      "id": 421479070,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ3OTA3MA==",
      "diff_hunk": "@@ -839,6 +840,36 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use\n+------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"static initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the static initialization order problem, be sure to Construct On First Use:",
      "path": "doc/developer-notes.md",
      "position": null,
      "original_position": 22,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "86ce03c53e22f0ce2c4bfbabd4aae5cf62dcb0fc",
      "in_reply_to_id": null,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think you should make this suggestion in general. This solution, while valuable in rare cases such as logging and tracking locks, is a brute-force one that does not belong in actual application code. It's *messy* and assumes we don't actually know what's going on (in regard to initialization dependencies) or what are all the edge cases.\r\n\r\nYou're supposed to expliclty allocate things in a deterministic order during initialization and destroy it in a (usually reversed) deterministic order on shutdown in the appropriate functions in `init.cpp`, not rely on global initialization order nor first use.\r\n",
      "created_at": "2020-05-07T12:52:21Z",
      "updated_at": "2020-05-22T12:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r421479070",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421479070"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 853,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421480237",
      "pull_request_review_id": 407440860,
      "id": 421480237,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ4MDIzNw==",
      "diff_hunk": "@@ -839,6 +840,36 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use\n+------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"static initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the static initialization order problem, be sure to Construct On First Use:\n+\n+```C++\n+BCLog::Logger& LogInstance()\n+{\n+    // See doc/developer-notes.md#construct-on-first-use\n+    static BCLog::Logger* g_logger{new BCLog::Logger()};",
      "path": "doc/developer-notes.md",
      "position": null,
      "original_position": 28,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "86ce03c53e22f0ce2c4bfbabd4aae5cf62dcb0fc",
      "in_reply_to_id": 420242951,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Right, `unique_ptr` won't work here. It was the same destruction order (thougn not initialization order) problem as using a global directly.",
      "created_at": "2020-05-07T12:54:11Z",
      "updated_at": "2020-05-22T12:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r421480237",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421480237"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 859,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421561195",
      "pull_request_review_id": 407544310,
      "id": 421561195,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU2MTE5NQ==",
      "diff_hunk": "@@ -839,6 +840,36 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use\n+------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"static initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the static initialization order problem, be sure to Construct On First Use:\n+\n+```C++\n+BCLog::Logger& LogInstance()\n+{\n+    // See doc/developer-notes.md#construct-on-first-use\n+    static BCLog::Logger* g_logger{new BCLog::Logger()};",
      "path": "doc/developer-notes.md",
      "position": null,
      "original_position": 28,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "86ce03c53e22f0ce2c4bfbabd4aae5cf62dcb0fc",
      "in_reply_to_id": 420242951,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Changes to the `developer-notes.md` [dropped](https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-625296903).",
      "created_at": "2020-05-07T14:43:39Z",
      "updated_at": "2020-05-22T12:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r421561195",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421561195"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 859,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421561551",
      "pull_request_review_id": 407544702,
      "id": 421561551,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU2MTU1MQ==",
      "diff_hunk": "@@ -839,6 +840,36 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use\n+------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"static initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the static initialization order problem, be sure to Construct On First Use:\n+\n+```C++\n+BCLog::Logger& LogInstance()\n+{\n+    // See doc/developer-notes.md#construct-on-first-use\n+    static BCLog::Logger* g_logger{new BCLog::Logger()};",
      "path": "doc/developer-notes.md",
      "position": null,
      "original_position": 28,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "86ce03c53e22f0ce2c4bfbabd4aae5cf62dcb0fc",
      "in_reply_to_id": 420492795,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Changes to the `developer-notes.md` [dropped](https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-625296903).",
      "created_at": "2020-05-07T14:44:04Z",
      "updated_at": "2020-05-22T12:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r421561551",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421561551"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 859,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/423808117",
      "pull_request_review_id": 410137892,
      "id": 423808117,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgwODExNw==",
      "diff_hunk": "@@ -78,21 +78,15 @@ typedef std::map<std::pair<void*, void*>, LockStack> LockOrders;\n typedef std::set<std::pair<void*, void*> > InvLockOrders;\n \n struct LockData {\n-    // Very ugly hack: as the global constructs and destructors run single\n-    // threaded, we use this boolean to know whether LockData still exists,\n-    // as DeleteLock can get called by global RecursiveMutex destructors\n-    // after LockData disappears.\n-    bool available;\n-    LockData() : available(true) {}\n-    ~LockData() { available = false; }\n-\n     LockOrders lockorders;\n     InvLockOrders invlockorders;\n     std::mutex dd_mutex;\n };\n LockData& GetLockData() {\n-    static LockData lockdata;\n-    return lockdata;\n+    // This approach guarantees that the *lockdata object is not destroyed until after its last use.\n+    // The operating system automatically reclaims all the memory in a program's heap when that program exits.\n+    static LockData* lockdata{new LockData()};\n+    return *lockdata;\n }\n \n static thread_local LockStack g_lockstack;",
      "path": "src/sync.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "6bc686839a7cc09e3586e2a47ae4f16b5d918d3a",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why is the above UB, but this not?",
      "created_at": "2020-05-12T15:04:35Z",
      "updated_at": "2020-05-22T12:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r423808117",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/423808117"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/424187486",
      "pull_request_review_id": 410605642,
      "id": 424187486,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE4NzQ4Ng==",
      "diff_hunk": "@@ -78,21 +78,15 @@ typedef std::map<std::pair<void*, void*>, LockStack> LockOrders;\n typedef std::set<std::pair<void*, void*> > InvLockOrders;\n \n struct LockData {\n-    // Very ugly hack: as the global constructs and destructors run single\n-    // threaded, we use this boolean to know whether LockData still exists,\n-    // as DeleteLock can get called by global RecursiveMutex destructors\n-    // after LockData disappears.\n-    bool available;\n-    LockData() : available(true) {}\n-    ~LockData() { available = false; }\n-\n     LockOrders lockorders;\n     InvLockOrders invlockorders;\n     std::mutex dd_mutex;\n };\n LockData& GetLockData() {\n-    static LockData lockdata;\n-    return lockdata;\n+    // This approach guarantees that the *lockdata object is not destroyed until after its last use.\n+    // The operating system automatically reclaims all the memory in a program's heap when that program exits.\n+    static LockData* lockdata{new LockData()};\n+    return *lockdata;\n }\n \n static thread_local LockStack g_lockstack;",
      "path": "src/sync.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "6bc686839a7cc09e3586e2a47ae4f16b5d918d3a",
      "in_reply_to_id": 423808117,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The `g_lockstack` variable is involved in locking and unlocking `AnnotatedMixin<>` mutexes.\r\n\r\nBut `lockdata` is used in `AnnotatedMixin<>` destructor:\r\nhttps://github.com/bitcoin/bitcoin/blob/8da1e43b63cb36759eeb1fcfd6768163265c44e2/src/sync.h#L84-L86\r\n\r\n_and_ we have global `AnnotatedMixin<>` mutexes.",
      "created_at": "2020-05-13T05:52:21Z",
      "updated_at": "2020-05-22T12:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r424187486",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/424187486"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/424344096",
      "pull_request_review_id": 410804242,
      "id": 424344096,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM0NDA5Ng==",
      "diff_hunk": "@@ -78,21 +78,15 @@ typedef std::map<std::pair<void*, void*>, LockStack> LockOrders;\n typedef std::set<std::pair<void*, void*> > InvLockOrders;\n \n struct LockData {\n-    // Very ugly hack: as the global constructs and destructors run single\n-    // threaded, we use this boolean to know whether LockData still exists,\n-    // as DeleteLock can get called by global RecursiveMutex destructors\n-    // after LockData disappears.\n-    bool available;\n-    LockData() : available(true) {}\n-    ~LockData() { available = false; }\n-\n     LockOrders lockorders;\n     InvLockOrders invlockorders;\n     std::mutex dd_mutex;\n };\n LockData& GetLockData() {\n-    static LockData lockdata;\n-    return lockdata;\n+    // This approach guarantees that the *lockdata object is not destroyed until after its last use.\n+    // The operating system automatically reclaims all the memory in a program's heap when that program exits.\n+    static LockData* lockdata{new LockData()};\n+    return *lockdata;\n }\n \n static thread_local LockStack g_lockstack;",
      "path": "src/sync.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "6bc686839a7cc09e3586e2a47ae4f16b5d918d3a",
      "in_reply_to_id": 423808117,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "So it would make sense to fix both occurrences of UB in one pull",
      "created_at": "2020-05-13T10:45:53Z",
      "updated_at": "2020-05-22T12:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r424344096",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/424344096"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/424369462",
      "pull_request_review_id": 410836911,
      "id": 424369462,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM2OTQ2Mg==",
      "diff_hunk": "@@ -78,21 +78,15 @@ typedef std::map<std::pair<void*, void*>, LockStack> LockOrders;\n typedef std::set<std::pair<void*, void*> > InvLockOrders;\n \n struct LockData {\n-    // Very ugly hack: as the global constructs and destructors run single\n-    // threaded, we use this boolean to know whether LockData still exists,\n-    // as DeleteLock can get called by global RecursiveMutex destructors\n-    // after LockData disappears.\n-    bool available;\n-    LockData() : available(true) {}\n-    ~LockData() { available = false; }\n-\n     LockOrders lockorders;\n     InvLockOrders invlockorders;\n     std::mutex dd_mutex;\n };\n LockData& GetLockData() {\n-    static LockData lockdata;\n-    return lockdata;\n+    // This approach guarantees that the *lockdata object is not destroyed until after its last use.\n+    // The operating system automatically reclaims all the memory in a program's heap when that program exits.\n+    static LockData* lockdata{new LockData()};\n+    return *lockdata;\n }\n \n static thread_local LockStack g_lockstack;",
      "path": "src/sync.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "6bc686839a7cc09e3586e2a47ae4f16b5d918d3a",
      "in_reply_to_id": 423808117,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sorry for my poor English...\r\nI meant that only `lockdata` could be a source of UB because it is used in the `~AnnotatedMixin<>` and the destroy order itself is not predictable in any way.\r\n\r\nThe destroying of `g_lockstack` couldn't cause UB, IMO.",
      "created_at": "2020-05-13T11:37:34Z",
      "updated_at": "2020-05-22T12:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r424369462",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/424369462"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/424376692",
      "pull_request_review_id": 410846175,
      "id": 424376692,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM3NjY5Mg==",
      "diff_hunk": "@@ -78,21 +78,15 @@ typedef std::map<std::pair<void*, void*>, LockStack> LockOrders;\n typedef std::set<std::pair<void*, void*> > InvLockOrders;\n \n struct LockData {\n-    // Very ugly hack: as the global constructs and destructors run single\n-    // threaded, we use this boolean to know whether LockData still exists,\n-    // as DeleteLock can get called by global RecursiveMutex destructors\n-    // after LockData disappears.\n-    bool available;\n-    LockData() : available(true) {}\n-    ~LockData() { available = false; }\n-\n     LockOrders lockorders;\n     InvLockOrders invlockorders;\n     std::mutex dd_mutex;\n };\n LockData& GetLockData() {\n-    static LockData lockdata;\n-    return lockdata;\n+    // This approach guarantees that the *lockdata object is not destroyed until after its last use.\n+    // The operating system automatically reclaims all the memory in a program's heap when that program exits.\n+    static LockData* lockdata{new LockData()};\n+    return *lockdata;\n }\n \n static thread_local LockStack g_lockstack;",
      "path": "src/sync.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "6bc686839a7cc09e3586e2a47ae4f16b5d918d3a",
      "in_reply_to_id": 423808117,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ok, I have deleted my comment. Here is the backtrace (same backtrace on master and this pull):\r\n\r\n<details><summary>backtrace</summary>\r\n\r\n```\r\nvalgrind /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn -runs=1 /bitcoin-core/ci/scratch/qa-assets/fuzz_seed_corpus/process_message_blocktxn\r\n==51564== Memcheck, a memory error detector\r\n==51564== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\r\n==51564== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info\r\n==51564== Command: /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn -runs=1 /bitcoin-core/ci/scratch/qa-assets/fuzz_seed_corpus/process_message_blocktxn\r\n==51564== \r\nINFO: Seed: 2408119127\r\nINFO: Loaded 1 modules   (115207 inline 8-bit counters): 115207 [0x1357748, 0x137394f), \r\nINFO: Loaded 1 PC tables (115207 PCs): 115207 [0x1373950,0x15359c0), \r\nINFO:      304 files found in /bitcoin-core/ci/scratch/qa-assets/fuzz_seed_corpus/process_message_blocktxn\r\nINFO: -max_len is not provided; libFuzzer will not generate inputs larger than 1007323 bytes\r\nINFO: seed corpus: files: 304 min: 1b max: 1007323b total: 7665972b rss: 245Mb\r\n#64\tpulse  cov: 3446 ft: 4828 corp: 45/2817b exec/s: 32 rss: 271Mb\r\n#128\tpulse  cov: 3507 ft: 6576 corp: 103/13967b exec/s: 42 rss: 277Mb\r\n#256\tpulse  cov: 3511 ft: 8158 corp: 211/121Kb exec/s: 32 rss: 277Mb\r\n#305\tINITED cov: 3511 ft: 8241 corp: 229/480Kb exec/s: 30 rss: 280Mb\r\n#305\tDONE   cov: 3511 ft: 8241 corp: 229/480Kb lim: 301441 exec/s: 30 rss: 280Mb\r\nDone 305 runs in 10 second(s)\r\n==51564== Invalid write of size 8\r\n==51564==    at 0xA5D451: std::pair<void*, CLockLocation>::pair(std::pair<void*, CLockLocation>&&) (stl_pair.h:304)\r\n==51564==    by 0xA5D3B1: void __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::construct<std::pair<void*, CLockLocation>, std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>*, std::pair<void*, CLockLocation>&&) (new_allocator.h:147)\r\n==51564==    by 0xA5D00D: void std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::construct<std::pair<void*, CLockLocation>, std::pair<void*, CLockLocation> >(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, std::pair<void*, CLockLocation>&&) (alloc_traits.h:484)\r\n==51564==    by 0xA5CE86: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:115)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5559B8: UniqueLock<AnnotatedMixin<std::mutex>, std::unique_lock<std::mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4DF455: UniqueLock<AnnotatedMixin<std::mutex>, std::unique_lock<std::mutex> >::UniqueLock(AnnotatedMixin<std::mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA18954: CScheduler::stop(bool) (scheduler.cpp:77)\r\n==51564==    by 0xB05A9D: TestingSetup::~TestingSetup() (setup_common.cpp:174)\r\n==51564==    by 0x4CC5A26: __run_exit_handlers (exit.c:108)\r\n==51564==  Address 0x5170be0 is 0 bytes inside a block of size 768 free'd\r\n==51564==    at 0x483CFBF: operator delete(void*) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E79A: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::deallocate(std::pair<void*, CLockLocation>*, unsigned long) (new_allocator.h:128)\r\n==51564==    by 0xA5E6F2: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::deallocate(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, unsigned long) (alloc_traits.h:470)\r\n==51564==    by 0xA5DB99: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_deallocate(std::pair<void*, CLockLocation>*, unsigned long) (stl_vector.h:351)\r\n==51564==    by 0xA60D20: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~_Vector_base() (stl_vector.h:332)\r\n==51564==    by 0xA57104: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~vector() (stl_vector.h:680)\r\n==51564==    by 0x4CC643E: __call_tls_dtors (cxa_thread_atexit_impl.c:155)\r\n==51564==    by 0x4CC5B8C: __run_exit_handlers (exit.c:46)\r\n==51564==    by 0x4CC5BDF: exit (exit.c:139)\r\n==51564==    by 0x4236D8: fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==    by 0x44C322: main (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==  Block was alloc'd at\r\n==51564==    at 0x483BE63: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E095: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::allocate(unsigned long, void const*) (new_allocator.h:114)\r\n==51564==    by 0xA5DF94: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::allocate(std::allocator<std::pair<void*, CLockLocation> >&, unsigned long) (alloc_traits.h:444)\r\n==51564==    by 0xA5D90D: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_allocate(unsigned long) (stl_vector.h:343)\r\n==51564==    by 0xA5D17F: void std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_realloc_insert<std::pair<void*, CLockLocation> >(__gnu_cxx::__normal_iterator<std::pair<void*, CLockLocation>*, std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > > >, std::pair<void*, CLockLocation>&&) (vector.tcc:440)\r\n==51564==    by 0xA5CED2: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:121)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5160A8: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4BB885: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::UniqueLock(AnnotatedMixin<std::recursive_mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA7479F: ArgsManager::GetSetting(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (system.cpp:861)\r\n==51564== \r\n==51564== Invalid write of size 1\r\n==51564==    at 0xA5D505: CLockLocation::CLockLocation(CLockLocation&&) (sync.cpp:43)\r\n==51564==    by 0xA5D467: std::pair<void*, CLockLocation>::pair(std::pair<void*, CLockLocation>&&) (stl_pair.h:304)\r\n==51564==    by 0xA5D3B1: void __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::construct<std::pair<void*, CLockLocation>, std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>*, std::pair<void*, CLockLocation>&&) (new_allocator.h:147)\r\n==51564==    by 0xA5D00D: void std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::construct<std::pair<void*, CLockLocation>, std::pair<void*, CLockLocation> >(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, std::pair<void*, CLockLocation>&&) (alloc_traits.h:484)\r\n==51564==    by 0xA5CE86: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:115)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5559B8: UniqueLock<AnnotatedMixin<std::mutex>, std::unique_lock<std::mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4DF455: UniqueLock<AnnotatedMixin<std::mutex>, std::unique_lock<std::mutex> >::UniqueLock(AnnotatedMixin<std::mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA18954: CScheduler::stop(bool) (scheduler.cpp:77)\r\n==51564==    by 0xB05A9D: TestingSetup::~TestingSetup() (setup_common.cpp:174)\r\n==51564==  Address 0x5170be8 is 8 bytes inside a block of size 768 free'd\r\n==51564==    at 0x483CFBF: operator delete(void*) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E79A: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::deallocate(std::pair<void*, CLockLocation>*, unsigned long) (new_allocator.h:128)\r\n==51564==    by 0xA5E6F2: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::deallocate(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, unsigned long) (alloc_traits.h:470)\r\n==51564==    by 0xA5DB99: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_deallocate(std::pair<void*, CLockLocation>*, unsigned long) (stl_vector.h:351)\r\n==51564==    by 0xA60D20: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~_Vector_base() (stl_vector.h:332)\r\n==51564==    by 0xA57104: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~vector() (stl_vector.h:680)\r\n==51564==    by 0x4CC643E: __call_tls_dtors (cxa_thread_atexit_impl.c:155)\r\n==51564==    by 0x4CC5B8C: __run_exit_handlers (exit.c:46)\r\n==51564==    by 0x4CC5BDF: exit (exit.c:139)\r\n==51564==    by 0x4236D8: fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==    by 0x44C322: main (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==  Block was alloc'd at\r\n==51564==    at 0x483BE63: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E095: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::allocate(unsigned long, void const*) (new_allocator.h:114)\r\n==51564==    by 0xA5DF94: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::allocate(std::allocator<std::pair<void*, CLockLocation> >&, unsigned long) (alloc_traits.h:444)\r\n==51564==    by 0xA5D90D: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_allocate(unsigned long) (stl_vector.h:343)\r\n==51564==    by 0xA5D17F: void std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_realloc_insert<std::pair<void*, CLockLocation> >(__gnu_cxx::__normal_iterator<std::pair<void*, CLockLocation>*, std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > > >, std::pair<void*, CLockLocation>&&) (vector.tcc:440)\r\n==51564==    by 0xA5CED2: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:121)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5160A8: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4BB885: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::UniqueLock(AnnotatedMixin<std::recursive_mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA7479F: ArgsManager::GetSetting(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (system.cpp:861)\r\n==51564== \r\n==51564== Invalid write of size 8\r\n==51564==    at 0x4991D88: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28)\r\n==51564==    by 0xA5D525: CLockLocation::CLockLocation(CLockLocation&&) (sync.cpp:43)\r\n==51564==    by 0xA5D467: std::pair<void*, CLockLocation>::pair(std::pair<void*, CLockLocation>&&) (stl_pair.h:304)\r\n==51564==    by 0xA5D3B1: void __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::construct<std::pair<void*, CLockLocation>, std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>*, std::pair<void*, CLockLocation>&&) (new_allocator.h:147)\r\n==51564==    by 0xA5D00D: void std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::construct<std::pair<void*, CLockLocation>, std::pair<void*, CLockLocation> >(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, std::pair<void*, CLockLocation>&&) (alloc_traits.h:484)\r\n==51564==    by 0xA5CE86: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:115)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5559B8: UniqueLock<AnnotatedMixin<std::mutex>, std::unique_lock<std::mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4DF455: UniqueLock<AnnotatedMixin<std::mutex>, std::unique_lock<std::mutex> >::UniqueLock(AnnotatedMixin<std::mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA18954: CScheduler::stop(bool) (scheduler.cpp:77)\r\n==51564==  Address 0x5170bf0 is 16 bytes inside a block of size 768 free'd\r\n==51564==    at 0x483CFBF: operator delete(void*) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E79A: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::deallocate(std::pair<void*, CLockLocation>*, unsigned long) (new_allocator.h:128)\r\n==51564==    by 0xA5E6F2: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::deallocate(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, unsigned long) (alloc_traits.h:470)\r\n==51564==    by 0xA5DB99: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_deallocate(std::pair<void*, CLockLocation>*, unsigned long) (stl_vector.h:351)\r\n==51564==    by 0xA60D20: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~_Vector_base() (stl_vector.h:332)\r\n==51564==    by 0xA57104: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~vector() (stl_vector.h:680)\r\n==51564==    by 0x4CC643E: __call_tls_dtors (cxa_thread_atexit_impl.c:155)\r\n==51564==    by 0x4CC5B8C: __run_exit_handlers (exit.c:46)\r\n==51564==    by 0x4CC5BDF: exit (exit.c:139)\r\n==51564==    by 0x4236D8: fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==    by 0x44C322: main (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==  Block was alloc'd at\r\n==51564==    at 0x483BE63: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E095: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::allocate(unsigned long, void const*) (new_allocator.h:114)\r\n==51564==    by 0xA5DF94: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::allocate(std::allocator<std::pair<void*, CLockLocation> >&, unsigned long) (alloc_traits.h:444)\r\n==51564==    by 0xA5D90D: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_allocate(unsigned long) (stl_vector.h:343)\r\n==51564==    by 0xA5D17F: void std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_realloc_insert<std::pair<void*, CLockLocation> >(__gnu_cxx::__normal_iterator<std::pair<void*, CLockLocation>*, std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > > >, std::pair<void*, CLockLocation>&&) (vector.tcc:440)\r\n==51564==    by 0xA5CED2: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:121)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5160A8: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4BB885: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::UniqueLock(AnnotatedMixin<std::recursive_mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA7479F: ArgsManager::GetSetting(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (system.cpp:861)\r\n==51564== \r\n==51564== Invalid write of size 8\r\n==51564==    at 0x4991DC5: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28)\r\n==51564==    by 0xA5D525: CLockLocation::CLockLocation(CLockLocation&&) (sync.cpp:43)\r\n==51564==    by 0xA5D467: std::pair<void*, CLockLocation>::pair(std::pair<void*, CLockLocation>&&) (stl_pair.h:304)\r\n==51564==    by 0xA5D3B1: void __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::construct<std::pair<void*, CLockLocation>, std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>*, std::pair<void*, CLockLocation>&&) (new_allocator.h:147)\r\n==51564==    by 0xA5D00D: void std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::construct<std::pair<void*, CLockLocation>, std::pair<void*, CLockLocation> >(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, std::pair<void*, CLockLocation>&&) (alloc_traits.h:484)\r\n==51564==    by 0xA5CE86: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:115)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5559B8: UniqueLock<AnnotatedMixin<std::mutex>, std::unique_lock<std::mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4DF455: UniqueLock<AnnotatedMixin<std::mutex>, std::unique_lock<std::mutex> >::UniqueLock(AnnotatedMixin<std::mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA18954: CScheduler::stop(bool) (scheduler.cpp:77)\r\n==51564==  Address 0x5170c00 is 32 bytes inside a block of size 768 free'd\r\n==51564==    at 0x483CFBF: operator delete(void*) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E79A: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::deallocate(std::pair<void*, CLockLocation>*, unsigned long) (new_allocator.h:128)\r\n==51564==    by 0xA5E6F2: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::deallocate(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, unsigned long) (alloc_traits.h:470)\r\n==51564==    by 0xA5DB99: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_deallocate(std::pair<void*, CLockLocation>*, unsigned long) (stl_vector.h:351)\r\n==51564==    by 0xA60D20: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~_Vector_base() (stl_vector.h:332)\r\n==51564==    by 0xA57104: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~vector() (stl_vector.h:680)\r\n==51564==    by 0x4CC643E: __call_tls_dtors (cxa_thread_atexit_impl.c:155)\r\n==51564==    by 0x4CC5B8C: __run_exit_handlers (exit.c:46)\r\n==51564==    by 0x4CC5BDF: exit (exit.c:139)\r\n==51564==    by 0x4236D8: fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==    by 0x44C322: main (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==  Block was alloc'd at\r\n==51564==    at 0x483BE63: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E095: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::allocate(unsigned long, void const*) (new_allocator.h:114)\r\n==51564==    by 0xA5DF94: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::allocate(std::allocator<std::pair<void*, CLockLocation> >&, unsigned long) (alloc_traits.h:444)\r\n==51564==    by 0xA5D90D: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_allocate(unsigned long) (stl_vector.h:343)\r\n==51564==    by 0xA5D17F: void std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_realloc_insert<std::pair<void*, CLockLocation> >(__gnu_cxx::__normal_iterator<std::pair<void*, CLockLocation>*, std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > > >, std::pair<void*, CLockLocation>&&) (vector.tcc:440)\r\n==51564==    by 0xA5CED2: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:121)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5160A8: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4BB885: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::UniqueLock(AnnotatedMixin<std::recursive_mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA7479F: ArgsManager::GetSetting(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (system.cpp:861)\r\n==51564== \r\n==51564== Invalid write of size 8\r\n==51564==    at 0x4991DB1: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28)\r\n==51564==    by 0xA5D525: CLockLocation::CLockLocation(CLockLocation&&) (sync.cpp:43)\r\n==51564==    by 0xA5D467: std::pair<void*, CLockLocation>::pair(std::pair<void*, CLockLocation>&&) (stl_pair.h:304)\r\n==51564==    by 0xA5D3B1: void __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::construct<std::pair<void*, CLockLocation>, std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>*, std::pair<void*, CLockLocation>&&) (new_allocator.h:147)\r\n==51564==    by 0xA5D00D: void std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::construct<std::pair<void*, CLockLocation>, std::pair<void*, CLockLocation> >(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, std::pair<void*, CLockLocation>&&) (alloc_traits.h:484)\r\n==51564==    by 0xA5CE86: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:115)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5559B8: UniqueLock<AnnotatedMixin<std::mutex>, std::unique_lock<std::mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4DF455: UniqueLock<AnnotatedMixin<std::mutex>, std::unique_lock<std::mutex> >::UniqueLock(AnnotatedMixin<std::mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA18954: CScheduler::stop(bool) (scheduler.cpp:77)\r\n==51564==  Address 0x5170bf8 is 24 bytes inside a block of size 768 free'd\r\n==51564==    at 0x483CFBF: operator delete(void*) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E79A: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::deallocate(std::pair<void*, CLockLocation>*, unsigned long) (new_allocator.h:128)\r\n==51564==    by 0xA5E6F2: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::deallocate(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, unsigned long) (alloc_traits.h:470)\r\n==51564==    by 0xA5DB99: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_deallocate(std::pair<void*, CLockLocation>*, unsigned long) (stl_vector.h:351)\r\n==51564==    by 0xA60D20: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~_Vector_base() (stl_vector.h:332)\r\n==51564==    by 0xA57104: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~vector() (stl_vector.h:680)\r\n==51564==    by 0x4CC643E: __call_tls_dtors (cxa_thread_atexit_impl.c:155)\r\n==51564==    by 0x4CC5B8C: __run_exit_handlers (exit.c:46)\r\n==51564==    by 0x4CC5BDF: exit (exit.c:139)\r\n==51564==    by 0x4236D8: fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==    by 0x44C322: main (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==  Block was alloc'd at\r\n==51564==    at 0x483BE63: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E095: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::allocate(unsigned long, void const*) (new_allocator.h:114)\r\n==51564==    by 0xA5DF94: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::allocate(std::allocator<std::pair<void*, CLockLocation> >&, unsigned long) (alloc_traits.h:444)\r\n==51564==    by 0xA5D90D: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_allocate(unsigned long) (stl_vector.h:343)\r\n==51564==    by 0xA5D17F: void std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_realloc_insert<std::pair<void*, CLockLocation> >(__gnu_cxx::__normal_iterator<std::pair<void*, CLockLocation>*, std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > > >, std::pair<void*, CLockLocation>&&) (vector.tcc:440)\r\n==51564==    by 0xA5CED2: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:121)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5160A8: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4BB885: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::UniqueLock(AnnotatedMixin<std::recursive_mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA7479F: ArgsManager::GetSetting(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (system.cpp:861)\r\n==51564== \r\n==51564== Invalid write of size 8\r\n==51564==    at 0x4991D88: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28)\r\n==51564==    by 0xA5D540: CLockLocation::CLockLocation(CLockLocation&&) (sync.cpp:43)\r\n==51564==    by 0xA5D467: std::pair<void*, CLockLocation>::pair(std::pair<void*, CLockLocation>&&) (stl_pair.h:304)\r\n==51564==    by 0xA5D3B1: void __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::construct<std::pair<void*, CLockLocation>, std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>*, std::pair<void*, CLockLocation>&&) (new_allocator.h:147)\r\n==51564==    by 0xA5D00D: void std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::construct<std::pair<void*, CLockLocation>, std::pair<void*, CLockLocation> >(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, std::pair<void*, CLockLocation>&&) (alloc_traits.h:484)\r\n==51564==    by 0xA5CE86: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:115)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5559B8: UniqueLock<AnnotatedMixin<std::mutex>, std::unique_lock<std::mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4DF455: UniqueLock<AnnotatedMixin<std::mutex>, std::unique_lock<std::mutex> >::UniqueLock(AnnotatedMixin<std::mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA18954: CScheduler::stop(bool) (scheduler.cpp:77)\r\n==51564==  Address 0x5170c10 is 48 bytes inside a block of size 768 free'd\r\n==51564==    at 0x483CFBF: operator delete(void*) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E79A: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::deallocate(std::pair<void*, CLockLocation>*, unsigned long) (new_allocator.h:128)\r\n==51564==    by 0xA5E6F2: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::deallocate(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, unsigned long) (alloc_traits.h:470)\r\n==51564==    by 0xA5DB99: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_deallocate(std::pair<void*, CLockLocation>*, unsigned long) (stl_vector.h:351)\r\n==51564==    by 0xA60D20: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~_Vector_base() (stl_vector.h:332)\r\n==51564==    by 0xA57104: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~vector() (stl_vector.h:680)\r\n==51564==    by 0x4CC643E: __call_tls_dtors (cxa_thread_atexit_impl.c:155)\r\n==51564==    by 0x4CC5B8C: __run_exit_handlers (exit.c:46)\r\n==51564==    by 0x4CC5BDF: exit (exit.c:139)\r\n==51564==    by 0x4236D8: fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==    by 0x44C322: main (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==  Block was alloc'd at\r\n==51564==    at 0x483BE63: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E095: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::allocate(unsigned long, void const*) (new_allocator.h:114)\r\n==51564==    by 0xA5DF94: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::allocate(std::allocator<std::pair<void*, CLockLocation> >&, unsigned long) (alloc_traits.h:444)\r\n==51564==    by 0xA5D90D: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_allocate(unsigned long) (stl_vector.h:343)\r\n==51564==    by 0xA5D17F: void std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_realloc_insert<std::pair<void*, CLockLocation> >(__gnu_cxx::__normal_iterator<std::pair<void*, CLockLocation>*, std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > > >, std::pair<void*, CLockLocation>&&) (vector.tcc:440)\r\n==51564==    by 0xA5CED2: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:121)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5160A8: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4BB885: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::UniqueLock(AnnotatedMixin<std::recursive_mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA7479F: ArgsManager::GetSetting(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (system.cpp:861)\r\n==51564== \r\n==51564== Invalid write of size 8\r\n==51564==    at 0x4991DC5: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28)\r\n==51564==    by 0xA5D540: CLockLocation::CLockLocation(CLockLocation&&) (sync.cpp:43)\r\n==51564==    by 0xA5D467: std::pair<void*, CLockLocation>::pair(std::pair<void*, CLockLocation>&&) (stl_pair.h:304)\r\n==51564==    by 0xA5D3B1: void __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::construct<std::pair<void*, CLockLocation>, std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>*, std::pair<void*, CLockLocation>&&) (new_allocator.h:147)\r\n==51564==    by 0xA5D00D: void std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::construct<std::pair<void*, CLockLocation>, std::pair<void*, CLockLocation> >(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, std::pair<void*, CLockLocation>&&) (alloc_traits.h:484)\r\n==51564==    by 0xA5CE86: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:115)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5559B8: UniqueLock<AnnotatedMixin<std::mutex>, std::unique_lock<std::mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4DF455: UniqueLock<AnnotatedMixin<std::mutex>, std::unique_lock<std::mutex> >::UniqueLock(AnnotatedMixin<std::mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA18954: CScheduler::stop(bool) (scheduler.cpp:77)\r\n==51564==  Address 0x5170c20 is 64 bytes inside a block of size 768 free'd\r\n==51564==    at 0x483CFBF: operator delete(void*) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E79A: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::deallocate(std::pair<void*, CLockLocation>*, unsigned long) (new_allocator.h:128)\r\n==51564==    by 0xA5E6F2: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::deallocate(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, unsigned long) (alloc_traits.h:470)\r\n==51564==    by 0xA5DB99: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_deallocate(std::pair<void*, CLockLocation>*, unsigned long) (stl_vector.h:351)\r\n==51564==    by 0xA60D20: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~_Vector_base() (stl_vector.h:332)\r\n==51564==    by 0xA57104: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~vector() (stl_vector.h:680)\r\n==51564==    by 0x4CC643E: __call_tls_dtors (cxa_thread_atexit_impl.c:155)\r\n==51564==    by 0x4CC5B8C: __run_exit_handlers (exit.c:46)\r\n==51564==    by 0x4CC5BDF: exit (exit.c:139)\r\n==51564==    by 0x4236D8: fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==    by 0x44C322: main (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==  Block was alloc'd at\r\n==51564==    at 0x483BE63: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E095: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::allocate(unsigned long, void const*) (new_allocator.h:114)\r\n==51564==    by 0xA5DF94: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::allocate(std::allocator<std::pair<void*, CLockLocation> >&, unsigned long) (alloc_traits.h:444)\r\n==51564==    by 0xA5D90D: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_allocate(unsigned long) (stl_vector.h:343)\r\n==51564==    by 0xA5D17F: void std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_realloc_insert<std::pair<void*, CLockLocation> >(__gnu_cxx::__normal_iterator<std::pair<void*, CLockLocation>*, std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > > >, std::pair<void*, CLockLocation>&&) (vector.tcc:440)\r\n==51564==    by 0xA5CED2: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:121)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5160A8: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4BB885: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::UniqueLock(AnnotatedMixin<std::recursive_mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA7479F: ArgsManager::GetSetting(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (system.cpp:861)\r\n==51564== \r\n==51564== Invalid write of size 8\r\n==51564==    at 0x4991DB1: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28)\r\n==51564==    by 0xA5D540: CLockLocation::CLockLocation(CLockLocation&&) (sync.cpp:43)\r\n==51564==    by 0xA5D467: std::pair<void*, CLockLocation>::pair(std::pair<void*, CLockLocation>&&) (stl_pair.h:304)\r\n==51564==    by 0xA5D3B1: void __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::construct<std::pair<void*, CLockLocation>, std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>*, std::pair<void*, CLockLocation>&&) (new_allocator.h:147)\r\n==51564==    by 0xA5D00D: void std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::construct<std::pair<void*, CLockLocation>, std::pair<void*, CLockLocation> >(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, std::pair<void*, CLockLocation>&&) (alloc_traits.h:484)\r\n==51564==    by 0xA5CE86: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:115)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5559B8: UniqueLock<AnnotatedMixin<std::mutex>, std::unique_lock<std::mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4DF455: UniqueLock<AnnotatedMixin<std::mutex>, std::unique_lock<std::mutex> >::UniqueLock(AnnotatedMixin<std::mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA18954: CScheduler::stop(bool) (scheduler.cpp:77)\r\n==51564==  Address 0x5170c18 is 56 bytes inside a block of size 768 free'd\r\n==51564==    at 0x483CFBF: operator delete(void*) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E79A: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::deallocate(std::pair<void*, CLockLocation>*, unsigned long) (new_allocator.h:128)\r\n==51564==    by 0xA5E6F2: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::deallocate(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, unsigned long) (alloc_traits.h:470)\r\n==51564==    by 0xA5DB99: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_deallocate(std::pair<void*, CLockLocation>*, unsigned long) (stl_vector.h:351)\r\n==51564==    by 0xA60D20: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~_Vector_base() (stl_vector.h:332)\r\n==51564==    by 0xA57104: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~vector() (stl_vector.h:680)\r\n==51564==    by 0x4CC643E: __call_tls_dtors (cxa_thread_atexit_impl.c:155)\r\n==51564==    by 0x4CC5B8C: __run_exit_handlers (exit.c:46)\r\n==51564==    by 0x4CC5BDF: exit (exit.c:139)\r\n==51564==    by 0x4236D8: fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==    by 0x44C322: main (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==  Block was alloc'd at\r\n==51564==    at 0x483BE63: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E095: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::allocate(unsigned long, void const*) (new_allocator.h:114)\r\n==51564==    by 0xA5DF94: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::allocate(std::allocator<std::pair<void*, CLockLocation> >&, unsigned long) (alloc_traits.h:444)\r\n==51564==    by 0xA5D90D: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_allocate(unsigned long) (stl_vector.h:343)\r\n==51564==    by 0xA5D17F: void std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_realloc_insert<std::pair<void*, CLockLocation> >(__gnu_cxx::__normal_iterator<std::pair<void*, CLockLocation>*, std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > > >, std::pair<void*, CLockLocation>&&) (vector.tcc:440)\r\n==51564==    by 0xA5CED2: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:121)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5160A8: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4BB885: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::UniqueLock(AnnotatedMixin<std::recursive_mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA7479F: ArgsManager::GetSetting(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (system.cpp:861)\r\n==51564== \r\n==51564== Invalid write of size 4\r\n==51564==    at 0xA5D54D: CLockLocation::CLockLocation(CLockLocation&&) (sync.cpp:43)\r\n==51564==    by 0xA5D467: std::pair<void*, CLockLocation>::pair(std::pair<void*, CLockLocation>&&) (stl_pair.h:304)\r\n==51564==    by 0xA5D3B1: void __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::construct<std::pair<void*, CLockLocation>, std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>*, std::pair<void*, CLockLocation>&&) (new_allocator.h:147)\r\n==51564==    by 0xA5D00D: void std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::construct<std::pair<void*, CLockLocation>, std::pair<void*, CLockLocation> >(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, std::pair<void*, CLockLocation>&&) (alloc_traits.h:484)\r\n==51564==    by 0xA5CE86: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:115)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5559B8: UniqueLock<AnnotatedMixin<std::mutex>, std::unique_lock<std::mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4DF455: UniqueLock<AnnotatedMixin<std::mutex>, std::unique_lock<std::mutex> >::UniqueLock(AnnotatedMixin<std::mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA18954: CScheduler::stop(bool) (scheduler.cpp:77)\r\n==51564==    by 0xB05A9D: TestingSetup::~TestingSetup() (setup_common.cpp:174)\r\n==51564==  Address 0x5170c38 is 88 bytes inside a block of size 768 free'd\r\n==51564==    at 0x483CFBF: operator delete(void*) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E79A: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::deallocate(std::pair<void*, CLockLocation>*, unsigned long) (new_allocator.h:128)\r\n==51564==    by 0xA5E6F2: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::deallocate(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, unsigned long) (alloc_traits.h:470)\r\n==51564==    by 0xA5DB99: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_deallocate(std::pair<void*, CLockLocation>*, unsigned long) (stl_vector.h:351)\r\n==51564==    by 0xA60D20: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~_Vector_base() (stl_vector.h:332)\r\n==51564==    by 0xA57104: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~vector() (stl_vector.h:680)\r\n==51564==    by 0x4CC643E: __call_tls_dtors (cxa_thread_atexit_impl.c:155)\r\n==51564==    by 0x4CC5B8C: __run_exit_handlers (exit.c:46)\r\n==51564==    by 0x4CC5BDF: exit (exit.c:139)\r\n==51564==    by 0x4236D8: fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==    by 0x44C322: main (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==  Block was alloc'd at\r\n==51564==    at 0x483BE63: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E095: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::allocate(unsigned long, void const*) (new_allocator.h:114)\r\n==51564==    by 0xA5DF94: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::allocate(std::allocator<std::pair<void*, CLockLocation> >&, unsigned long) (alloc_traits.h:444)\r\n==51564==    by 0xA5D90D: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_allocate(unsigned long) (stl_vector.h:343)\r\n==51564==    by 0xA5D17F: void std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_realloc_insert<std::pair<void*, CLockLocation> >(__gnu_cxx::__normal_iterator<std::pair<void*, CLockLocation>*, std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > > >, std::pair<void*, CLockLocation>&&) (vector.tcc:440)\r\n==51564==    by 0xA5CED2: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:121)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5160A8: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4BB885: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::UniqueLock(AnnotatedMixin<std::recursive_mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA7479F: ArgsManager::GetSetting(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (system.cpp:861)\r\n==51564== \r\n==51564== Invalid write of size 8\r\n==51564==    at 0xA5D555: CLockLocation::CLockLocation(CLockLocation&&) (sync.cpp:43)\r\n==51564==    by 0xA5D467: std::pair<void*, CLockLocation>::pair(std::pair<void*, CLockLocation>&&) (stl_pair.h:304)\r\n==51564==    by 0xA5D3B1: void __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::construct<std::pair<void*, CLockLocation>, std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>*, std::pair<void*, CLockLocation>&&) (new_allocator.h:147)\r\n==51564==    by 0xA5D00D: void std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::construct<std::pair<void*, CLockLocation>, std::pair<void*, CLockLocation> >(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, std::pair<void*, CLockLocation>&&) (alloc_traits.h:484)\r\n==51564==    by 0xA5CE86: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:115)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5559B8: UniqueLock<AnnotatedMixin<std::mutex>, std::unique_lock<std::mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4DF455: UniqueLock<AnnotatedMixin<std::mutex>, std::unique_lock<std::mutex> >::UniqueLock(AnnotatedMixin<std::mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA18954: CScheduler::stop(bool) (scheduler.cpp:77)\r\n==51564==    by 0xB05A9D: TestingSetup::~TestingSetup() (setup_common.cpp:174)\r\n==51564==  Address 0x5170c30 is 80 bytes inside a block of size 768 free'd\r\n==51564==    at 0x483CFBF: operator delete(void*) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E79A: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::deallocate(std::pair<void*, CLockLocation>*, unsigned long) (new_allocator.h:128)\r\n==51564==    by 0xA5E6F2: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::deallocate(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, unsigned long) (alloc_traits.h:470)\r\n==51564==    by 0xA5DB99: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_deallocate(std::pair<void*, CLockLocation>*, unsigned long) (stl_vector.h:351)\r\n==51564==    by 0xA60D20: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~_Vector_base() (stl_vector.h:332)\r\n==51564==    by 0xA57104: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~vector() (stl_vector.h:680)\r\n==51564==    by 0x4CC643E: __call_tls_dtors (cxa_thread_atexit_impl.c:155)\r\n==51564==    by 0x4CC5B8C: __run_exit_handlers (exit.c:46)\r\n==51564==    by 0x4CC5BDF: exit (exit.c:139)\r\n==51564==    by 0x4236D8: fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==    by 0x44C322: main (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==  Block was alloc'd at\r\n==51564==    at 0x483BE63: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E095: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::allocate(unsigned long, void const*) (new_allocator.h:114)\r\n==51564==    by 0xA5DF94: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::allocate(std::allocator<std::pair<void*, CLockLocation> >&, unsigned long) (alloc_traits.h:444)\r\n==51564==    by 0xA5D90D: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_allocate(unsigned long) (stl_vector.h:343)\r\n==51564==    by 0xA5D17F: void std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_realloc_insert<std::pair<void*, CLockLocation> >(__gnu_cxx::__normal_iterator<std::pair<void*, CLockLocation>*, std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > > >, std::pair<void*, CLockLocation>&&) (vector.tcc:440)\r\n==51564==    by 0xA5CED2: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:121)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5160A8: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4BB885: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::UniqueLock(AnnotatedMixin<std::recursive_mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA7479F: ArgsManager::GetSetting(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (system.cpp:861)\r\n==51564== \r\n==51564== Invalid read of size 8\r\n==51564==    at 0xA57487: push_lock(void*, CLockLocation const&) (sync.cpp:138)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5559B8: UniqueLock<AnnotatedMixin<std::mutex>, std::unique_lock<std::mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4DF455: UniqueLock<AnnotatedMixin<std::mutex>, std::unique_lock<std::mutex> >::UniqueLock(AnnotatedMixin<std::mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA18954: CScheduler::stop(bool) (scheduler.cpp:77)\r\n==51564==    by 0xB05A9D: TestingSetup::~TestingSetup() (setup_common.cpp:174)\r\n==51564==    by 0x4CC5A26: __run_exit_handlers (exit.c:108)\r\n==51564==    by 0x4CC5BDF: exit (exit.c:139)\r\n==51564==    by 0x4236D8: fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==    by 0x44C322: main (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==  Address 0x5170be0 is 0 bytes inside a block of size 768 free'd\r\n==51564==    at 0x483CFBF: operator delete(void*) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E79A: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::deallocate(std::pair<void*, CLockLocation>*, unsigned long) (new_allocator.h:128)\r\n==51564==    by 0xA5E6F2: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::deallocate(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, unsigned long) (alloc_traits.h:470)\r\n==51564==    by 0xA5DB99: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_deallocate(std::pair<void*, CLockLocation>*, unsigned long) (stl_vector.h:351)\r\n==51564==    by 0xA60D20: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~_Vector_base() (stl_vector.h:332)\r\n==51564==    by 0xA57104: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~vector() (stl_vector.h:680)\r\n==51564==    by 0x4CC643E: __call_tls_dtors (cxa_thread_atexit_impl.c:155)\r\n==51564==    by 0x4CC5B8C: __run_exit_handlers (exit.c:46)\r\n==51564==    by 0x4CC5BDF: exit (exit.c:139)\r\n==51564==    by 0x4236D8: fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==    by 0x44C322: main (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==  Block was alloc'd at\r\n==51564==    at 0x483BE63: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E095: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::allocate(unsigned long, void const*) (new_allocator.h:114)\r\n==51564==    by 0xA5DF94: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::allocate(std::allocator<std::pair<void*, CLockLocation> >&, unsigned long) (alloc_traits.h:444)\r\n==51564==    by 0xA5D90D: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_allocate(unsigned long) (stl_vector.h:343)\r\n==51564==    by 0xA5D17F: void std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_realloc_insert<std::pair<void*, CLockLocation> >(__gnu_cxx::__normal_iterator<std::pair<void*, CLockLocation>*, std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > > >, std::pair<void*, CLockLocation>&&) (vector.tcc:440)\r\n==51564==    by 0xA5CED2: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:121)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5160A8: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4BB885: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::UniqueLock(AnnotatedMixin<std::recursive_mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA7479F: ArgsManager::GetSetting(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (system.cpp:861)\r\n==51564== \r\n==51564== Invalid read of size 8\r\n==51564==    at 0x4991E34: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28)\r\n==51564==    by 0xA57AD0: CLockLocation::~CLockLocation() (sync.cpp:43)\r\n==51564==    by 0xA5C3B9: std::pair<void*, CLockLocation>::~pair() (stl_iterator.h:1286)\r\n==51564==    by 0xA5E64E: void __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::destroy<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>*) (new_allocator.h:153)\r\n==51564==    by 0xA5E5B2: void std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::destroy<std::pair<void*, CLockLocation> >(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*) (alloc_traits.h:497)\r\n==51564==    by 0xA659B5: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::pop_back() (stl_vector.h:1226)\r\n==51564==    by 0xA5855A: pop_lock() (sync.cpp:155)\r\n==51564==    by 0xA584D2: LeaveCritical() (sync.cpp:177)\r\n==51564==    by 0x4DF72C: UniqueLock<AnnotatedMixin<std::mutex>, std::unique_lock<std::mutex> >::~UniqueLock() (sync.h:169)\r\n==51564==    by 0xA1899E: CScheduler::stop(bool) (scheduler.cpp:82)\r\n==51564==    by 0xB05A9D: TestingSetup::~TestingSetup() (setup_common.cpp:174)\r\n==51564==    by 0x4CC5A26: __run_exit_handlers (exit.c:108)\r\n==51564==  Address 0x5170c10 is 48 bytes inside a block of size 768 free'd\r\n==51564==    at 0x483CFBF: operator delete(void*) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E79A: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::deallocate(std::pair<void*, CLockLocation>*, unsigned long) (new_allocator.h:128)\r\n==51564==    by 0xA5E6F2: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::deallocate(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, unsigned long) (alloc_traits.h:470)\r\n==51564==    by 0xA5DB99: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_deallocate(std::pair<void*, CLockLocation>*, unsigned long) (stl_vector.h:351)\r\n==51564==    by 0xA60D20: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~_Vector_base() (stl_vector.h:332)\r\n==51564==    by 0xA57104: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~vector() (stl_vector.h:680)\r\n==51564==    by 0x4CC643E: __call_tls_dtors (cxa_thread_atexit_impl.c:155)\r\n==51564==    by 0x4CC5B8C: __run_exit_handlers (exit.c:46)\r\n==51564==    by 0x4CC5BDF: exit (exit.c:139)\r\n==51564==    by 0x4236D8: fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==    by 0x44C322: main (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==  Block was alloc'd at\r\n==51564==    at 0x483BE63: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E095: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::allocate(unsigned long, void const*) (new_allocator.h:114)\r\n==51564==    by 0xA5DF94: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::allocate(std::allocator<std::pair<void*, CLockLocation> >&, unsigned long) (alloc_traits.h:444)\r\n==51564==    by 0xA5D90D: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_allocate(unsigned long) (stl_vector.h:343)\r\n==51564==    by 0xA5D17F: void std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_realloc_insert<std::pair<void*, CLockLocation> >(__gnu_cxx::__normal_iterator<std::pair<void*, CLockLocation>*, std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > > >, std::pair<void*, CLockLocation>&&) (vector.tcc:440)\r\n==51564==    by 0xA5CED2: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:121)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5160A8: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4BB885: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::UniqueLock(AnnotatedMixin<std::recursive_mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA7479F: ArgsManager::GetSetting(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (system.cpp:861)\r\n==51564== \r\n==51564== Invalid read of size 8\r\n==51564==    at 0x4991E34: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28)\r\n==51564==    by 0xA57AE0: CLockLocation::~CLockLocation() (sync.cpp:43)\r\n==51564==    by 0xA5C3B9: std::pair<void*, CLockLocation>::~pair() (stl_iterator.h:1286)\r\n==51564==    by 0xA5E64E: void __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::destroy<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>*) (new_allocator.h:153)\r\n==51564==    by 0xA5E5B2: void std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::destroy<std::pair<void*, CLockLocation> >(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*) (alloc_traits.h:497)\r\n==51564==    by 0xA659B5: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::pop_back() (stl_vector.h:1226)\r\n==51564==    by 0xA5855A: pop_lock() (sync.cpp:155)\r\n==51564==    by 0xA584D2: LeaveCritical() (sync.cpp:177)\r\n==51564==    by 0x4DF72C: UniqueLock<AnnotatedMixin<std::mutex>, std::unique_lock<std::mutex> >::~UniqueLock() (sync.h:169)\r\n==51564==    by 0xA1899E: CScheduler::stop(bool) (scheduler.cpp:82)\r\n==51564==    by 0xB05A9D: TestingSetup::~TestingSetup() (setup_common.cpp:174)\r\n==51564==    by 0x4CC5A26: __run_exit_handlers (exit.c:108)\r\n==51564==  Address 0x5170bf0 is 16 bytes inside a block of size 768 free'd\r\n==51564==    at 0x483CFBF: operator delete(void*) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E79A: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::deallocate(std::pair<void*, CLockLocation>*, unsigned long) (new_allocator.h:128)\r\n==51564==    by 0xA5E6F2: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::deallocate(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, unsigned long) (alloc_traits.h:470)\r\n==51564==    by 0xA5DB99: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_deallocate(std::pair<void*, CLockLocation>*, unsigned long) (stl_vector.h:351)\r\n==51564==    by 0xA60D20: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~_Vector_base() (stl_vector.h:332)\r\n==51564==    by 0xA57104: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~vector() (stl_vector.h:680)\r\n==51564==    by 0x4CC643E: __call_tls_dtors (cxa_thread_atexit_impl.c:155)\r\n==51564==    by 0x4CC5B8C: __run_exit_handlers (exit.c:46)\r\n==51564==    by 0x4CC5BDF: exit (exit.c:139)\r\n==51564==    by 0x4236D8: fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==    by 0x44C322: main (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==  Block was alloc'd at\r\n==51564==    at 0x483BE63: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E095: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::allocate(unsigned long, void const*) (new_allocator.h:114)\r\n==51564==    by 0xA5DF94: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::allocate(std::allocator<std::pair<void*, CLockLocation> >&, unsigned long) (alloc_traits.h:444)\r\n==51564==    by 0xA5D90D: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_allocate(unsigned long) (stl_vector.h:343)\r\n==51564==    by 0xA5D17F: void std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_realloc_insert<std::pair<void*, CLockLocation> >(__gnu_cxx::__normal_iterator<std::pair<void*, CLockLocation>*, std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > > >, std::pair<void*, CLockLocation>&&) (vector.tcc:440)\r\n==51564==    by 0xA5CED2: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:121)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5160A8: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4BB885: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::UniqueLock(AnnotatedMixin<std::recursive_mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA7479F: ArgsManager::GetSetting(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (system.cpp:861)\r\n==51564== \r\n==51564== Invalid write of size 8\r\n==51564==    at 0x4991D97: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28)\r\n==51564==    by 0xA5D525: CLockLocation::CLockLocation(CLockLocation&&) (sync.cpp:43)\r\n==51564==    by 0xA5D467: std::pair<void*, CLockLocation>::pair(std::pair<void*, CLockLocation>&&) (stl_pair.h:304)\r\n==51564==    by 0xA5D3B1: void __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::construct<std::pair<void*, CLockLocation>, std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>*, std::pair<void*, CLockLocation>&&) (new_allocator.h:147)\r\n==51564==    by 0xA5D00D: void std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::construct<std::pair<void*, CLockLocation>, std::pair<void*, CLockLocation> >(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, std::pair<void*, CLockLocation>&&) (alloc_traits.h:484)\r\n==51564==    by 0xA5CE86: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:115)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5160A8: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4BB885: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::UniqueLock(AnnotatedMixin<std::recursive_mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA1A5E8: SingleThreadedSchedulerClient::ProcessQueue() (scheduler.cpp:161)\r\n==51564==  Address 0x5170bf0 is 16 bytes inside a block of size 768 free'd\r\n==51564==    at 0x483CFBF: operator delete(void*) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E79A: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::deallocate(std::pair<void*, CLockLocation>*, unsigned long) (new_allocator.h:128)\r\n==51564==    by 0xA5E6F2: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::deallocate(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, unsigned long) (alloc_traits.h:470)\r\n==51564==    by 0xA5DB99: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_deallocate(std::pair<void*, CLockLocation>*, unsigned long) (stl_vector.h:351)\r\n==51564==    by 0xA60D20: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~_Vector_base() (stl_vector.h:332)\r\n==51564==    by 0xA57104: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~vector() (stl_vector.h:680)\r\n==51564==    by 0x4CC643E: __call_tls_dtors (cxa_thread_atexit_impl.c:155)\r\n==51564==    by 0x4CC5B8C: __run_exit_handlers (exit.c:46)\r\n==51564==    by 0x4CC5BDF: exit (exit.c:139)\r\n==51564==    by 0x4236D8: fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==    by 0x44C322: main (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==  Block was alloc'd at\r\n==51564==    at 0x483BE63: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E095: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::allocate(unsigned long, void const*) (new_allocator.h:114)\r\n==51564==    by 0xA5DF94: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::allocate(std::allocator<std::pair<void*, CLockLocation> >&, unsigned long) (alloc_traits.h:444)\r\n==51564==    by 0xA5D90D: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_allocate(unsigned long) (stl_vector.h:343)\r\n==51564==    by 0xA5D17F: void std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_realloc_insert<std::pair<void*, CLockLocation> >(__gnu_cxx::__normal_iterator<std::pair<void*, CLockLocation>*, std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > > >, std::pair<void*, CLockLocation>&&) (vector.tcc:440)\r\n==51564==    by 0xA5CED2: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:121)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5160A8: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4BB885: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::UniqueLock(AnnotatedMixin<std::recursive_mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA7479F: ArgsManager::GetSetting(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (system.cpp:861)\r\n==51564== \r\n==51564== Invalid write of size 8\r\n==51564==    at 0x4991D9E: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28)\r\n==51564==    by 0xA5D525: CLockLocation::CLockLocation(CLockLocation&&) (sync.cpp:43)\r\n==51564==    by 0xA5D467: std::pair<void*, CLockLocation>::pair(std::pair<void*, CLockLocation>&&) (stl_pair.h:304)\r\n==51564==    by 0xA5D3B1: void __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::construct<std::pair<void*, CLockLocation>, std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>*, std::pair<void*, CLockLocation>&&) (new_allocator.h:147)\r\n==51564==    by 0xA5D00D: void std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::construct<std::pair<void*, CLockLocation>, std::pair<void*, CLockLocation> >(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, std::pair<void*, CLockLocation>&&) (alloc_traits.h:484)\r\n==51564==    by 0xA5CE86: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:115)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5160A8: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4BB885: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::UniqueLock(AnnotatedMixin<std::recursive_mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA1A5E8: SingleThreadedSchedulerClient::ProcessQueue() (scheduler.cpp:161)\r\n==51564==  Address 0x5170c00 is 32 bytes inside a block of size 768 free'd\r\n==51564==    at 0x483CFBF: operator delete(void*) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E79A: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::deallocate(std::pair<void*, CLockLocation>*, unsigned long) (new_allocator.h:128)\r\n==51564==    by 0xA5E6F2: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::deallocate(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, unsigned long) (alloc_traits.h:470)\r\n==51564==    by 0xA5DB99: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_deallocate(std::pair<void*, CLockLocation>*, unsigned long) (stl_vector.h:351)\r\n==51564==    by 0xA60D20: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~_Vector_base() (stl_vector.h:332)\r\n==51564==    by 0xA57104: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~vector() (stl_vector.h:680)\r\n==51564==    by 0x4CC643E: __call_tls_dtors (cxa_thread_atexit_impl.c:155)\r\n==51564==    by 0x4CC5B8C: __run_exit_handlers (exit.c:46)\r\n==51564==    by 0x4CC5BDF: exit (exit.c:139)\r\n==51564==    by 0x4236D8: fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==    by 0x44C322: main (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==  Block was alloc'd at\r\n==51564==    at 0x483BE63: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E095: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::allocate(unsigned long, void const*) (new_allocator.h:114)\r\n==51564==    by 0xA5DF94: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::allocate(std::allocator<std::pair<void*, CLockLocation> >&, unsigned long) (alloc_traits.h:444)\r\n==51564==    by 0xA5D90D: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_allocate(unsigned long) (stl_vector.h:343)\r\n==51564==    by 0xA5D17F: void std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_realloc_insert<std::pair<void*, CLockLocation> >(__gnu_cxx::__normal_iterator<std::pair<void*, CLockLocation>*, std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > > >, std::pair<void*, CLockLocation>&&) (vector.tcc:440)\r\n==51564==    by 0xA5CED2: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:121)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5160A8: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4BB885: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::UniqueLock(AnnotatedMixin<std::recursive_mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA7479F: ArgsManager::GetSetting(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (system.cpp:861)\r\n==51564== \r\n==51564== Invalid read of size 8\r\n==51564==    at 0xA57487: push_lock(void*, CLockLocation const&) (sync.cpp:138)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5160A8: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4BB885: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::UniqueLock(AnnotatedMixin<std::recursive_mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA1A5E8: SingleThreadedSchedulerClient::ProcessQueue() (scheduler.cpp:161)\r\n==51564==    by 0xA1B0CF: SingleThreadedSchedulerClient::EmptyQueue() (scheduler.cpp:201)\r\n==51564==    by 0x8DE049: CMainSignals::FlushBackgroundCallbacks() (validationinterface.cpp:103)\r\n==51564==    by 0xB05B4A: TestingSetup::~TestingSetup() (setup_common.cpp:177)\r\n==51564==    by 0x4CC5A26: __run_exit_handlers (exit.c:108)\r\n==51564==    by 0x4CC5BDF: exit (exit.c:139)\r\n==51564==    by 0x4236D8: fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==    by 0x44C322: main (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==  Address 0x5170be0 is 0 bytes inside a block of size 768 free'd\r\n==51564==    at 0x483CFBF: operator delete(void*) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E79A: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::deallocate(std::pair<void*, CLockLocation>*, unsigned long) (new_allocator.h:128)\r\n==51564==    by 0xA5E6F2: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::deallocate(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, unsigned long) (alloc_traits.h:470)\r\n==51564==    by 0xA5DB99: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_deallocate(std::pair<void*, CLockLocation>*, unsigned long) (stl_vector.h:351)\r\n==51564==    by 0xA60D20: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~_Vector_base() (stl_vector.h:332)\r\n==51564==    by 0xA57104: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~vector() (stl_vector.h:680)\r\n==51564==    by 0x4CC643E: __call_tls_dtors (cxa_thread_atexit_impl.c:155)\r\n==51564==    by 0x4CC5B8C: __run_exit_handlers (exit.c:46)\r\n==51564==    by 0x4CC5BDF: exit (exit.c:139)\r\n==51564==    by 0x4236D8: fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==    by 0x44C322: main (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==  Block was alloc'd at\r\n==51564==    at 0x483BE63: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E095: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::allocate(unsigned long, void const*) (new_allocator.h:114)\r\n==51564==    by 0xA5DF94: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::allocate(std::allocator<std::pair<void*, CLockLocation> >&, unsigned long) (alloc_traits.h:444)\r\n==51564==    by 0xA5D90D: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_allocate(unsigned long) (stl_vector.h:343)\r\n==51564==    by 0xA5D17F: void std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_realloc_insert<std::pair<void*, CLockLocation> >(__gnu_cxx::__normal_iterator<std::pair<void*, CLockLocation>*, std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > > >, std::pair<void*, CLockLocation>&&) (vector.tcc:440)\r\n==51564==    by 0xA5CED2: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:121)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5160A8: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4BB885: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::UniqueLock(AnnotatedMixin<std::recursive_mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA7479F: ArgsManager::GetSetting(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (system.cpp:861)\r\n==51564== \r\n==51564== Invalid write of size 8\r\n==51564==    at 0x4991D97: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28)\r\n==51564==    by 0xA5D540: CLockLocation::CLockLocation(CLockLocation&&) (sync.cpp:43)\r\n==51564==    by 0xA5D467: std::pair<void*, CLockLocation>::pair(std::pair<void*, CLockLocation>&&) (stl_pair.h:304)\r\n==51564==    by 0xA5D3B1: void __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::construct<std::pair<void*, CLockLocation>, std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>*, std::pair<void*, CLockLocation>&&) (new_allocator.h:147)\r\n==51564==    by 0xA5D00D: void std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::construct<std::pair<void*, CLockLocation>, std::pair<void*, CLockLocation> >(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, std::pair<void*, CLockLocation>&&) (alloc_traits.h:484)\r\n==51564==    by 0xA5CE86: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:115)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5559B8: UniqueLock<AnnotatedMixin<std::mutex>, std::unique_lock<std::mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4DF455: UniqueLock<AnnotatedMixin<std::mutex>, std::unique_lock<std::mutex> >::UniqueLock(AnnotatedMixin<std::mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA68C2B: CThreadInterrupt::operator()() (threadinterrupt.cpp:25)\r\n==51564==  Address 0x5170c10 is 48 bytes inside a block of size 768 free'd\r\n==51564==    at 0x483CFBF: operator delete(void*) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E79A: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::deallocate(std::pair<void*, CLockLocation>*, unsigned long) (new_allocator.h:128)\r\n==51564==    by 0xA5E6F2: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::deallocate(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, unsigned long) (alloc_traits.h:470)\r\n==51564==    by 0xA5DB99: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_deallocate(std::pair<void*, CLockLocation>*, unsigned long) (stl_vector.h:351)\r\n==51564==    by 0xA60D20: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~_Vector_base() (stl_vector.h:332)\r\n==51564==    by 0xA57104: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~vector() (stl_vector.h:680)\r\n==51564==    by 0x4CC643E: __call_tls_dtors (cxa_thread_atexit_impl.c:155)\r\n==51564==    by 0x4CC5B8C: __run_exit_handlers (exit.c:46)\r\n==51564==    by 0x4CC5BDF: exit (exit.c:139)\r\n==51564==    by 0x4236D8: fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==    by 0x44C322: main (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==  Block was alloc'd at\r\n==51564==    at 0x483BE63: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E095: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::allocate(unsigned long, void const*) (new_allocator.h:114)\r\n==51564==    by 0xA5DF94: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::allocate(std::allocator<std::pair<void*, CLockLocation> >&, unsigned long) (alloc_traits.h:444)\r\n==51564==    by 0xA5D90D: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_allocate(unsigned long) (stl_vector.h:343)\r\n==51564==    by 0xA5D17F: void std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_realloc_insert<std::pair<void*, CLockLocation> >(__gnu_cxx::__normal_iterator<std::pair<void*, CLockLocation>*, std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > > >, std::pair<void*, CLockLocation>&&) (vector.tcc:440)\r\n==51564==    by 0xA5CED2: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:121)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5160A8: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4BB885: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::UniqueLock(AnnotatedMixin<std::recursive_mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA7479F: ArgsManager::GetSetting(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (system.cpp:861)\r\n==51564== \r\n==51564== Invalid write of size 8\r\n==51564==    at 0x4991D9E: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28)\r\n==51564==    by 0xA5D540: CLockLocation::CLockLocation(CLockLocation&&) (sync.cpp:43)\r\n==51564==    by 0xA5D467: std::pair<void*, CLockLocation>::pair(std::pair<void*, CLockLocation>&&) (stl_pair.h:304)\r\n==51564==    by 0xA5D3B1: void __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::construct<std::pair<void*, CLockLocation>, std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>*, std::pair<void*, CLockLocation>&&) (new_allocator.h:147)\r\n==51564==    by 0xA5D00D: void std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::construct<std::pair<void*, CLockLocation>, std::pair<void*, CLockLocation> >(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, std::pair<void*, CLockLocation>&&) (alloc_traits.h:484)\r\n==51564==    by 0xA5CE86: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:115)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5559B8: UniqueLock<AnnotatedMixin<std::mutex>, std::unique_lock<std::mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4DF455: UniqueLock<AnnotatedMixin<std::mutex>, std::unique_lock<std::mutex> >::UniqueLock(AnnotatedMixin<std::mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA68C2B: CThreadInterrupt::operator()() (threadinterrupt.cpp:25)\r\n==51564==  Address 0x5170c20 is 64 bytes inside a block of size 768 free'd\r\n==51564==    at 0x483CFBF: operator delete(void*) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E79A: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::deallocate(std::pair<void*, CLockLocation>*, unsigned long) (new_allocator.h:128)\r\n==51564==    by 0xA5E6F2: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::deallocate(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, unsigned long) (alloc_traits.h:470)\r\n==51564==    by 0xA5DB99: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_deallocate(std::pair<void*, CLockLocation>*, unsigned long) (stl_vector.h:351)\r\n==51564==    by 0xA60D20: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~_Vector_base() (stl_vector.h:332)\r\n==51564==    by 0xA57104: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~vector() (stl_vector.h:680)\r\n==51564==    by 0x4CC643E: __call_tls_dtors (cxa_thread_atexit_impl.c:155)\r\n==51564==    by 0x4CC5B8C: __run_exit_handlers (exit.c:46)\r\n==51564==    by 0x4CC5BDF: exit (exit.c:139)\r\n==51564==    by 0x4236D8: fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==    by 0x44C322: main (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==  Block was alloc'd at\r\n==51564==    at 0x483BE63: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E095: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::allocate(unsigned long, void const*) (new_allocator.h:114)\r\n==51564==    by 0xA5DF94: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::allocate(std::allocator<std::pair<void*, CLockLocation> >&, unsigned long) (alloc_traits.h:444)\r\n==51564==    by 0xA5D90D: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_allocate(unsigned long) (stl_vector.h:343)\r\n==51564==    by 0xA5D17F: void std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_realloc_insert<std::pair<void*, CLockLocation> >(__gnu_cxx::__normal_iterator<std::pair<void*, CLockLocation>*, std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > > >, std::pair<void*, CLockLocation>&&) (vector.tcc:440)\r\n==51564==    by 0xA5CED2: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:121)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5160A8: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4BB885: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::UniqueLock(AnnotatedMixin<std::recursive_mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA7479F: ArgsManager::GetSetting(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (system.cpp:861)\r\n==51564== \r\n==51564== Invalid read of size 8\r\n==51564==    at 0xA5EB4A: std::pair<void*, void*>::pair<void*&, true>(void* const&, void*&) (stl_pair.h:326)\r\n==51564==    by 0xA5C46B: std::pair<std::__decay_and_strip<void* const&>::__type, std::__decay_and_strip<void*&>::__type> std::make_pair<void* const&, void*&>(void* const&, void*&) (stl_pair.h:529)\r\n==51564==    by 0xA57515: push_lock(void*, CLockLocation const&) (sync.cpp:141)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5160A8: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4BB885: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::UniqueLock(AnnotatedMixin<std::recursive_mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0x6C7727: CTxMemPool::clear() (txmempool.cpp:600)\r\n==51564==    by 0x81D4D5: UnloadBlockIndex() (validation.cpp:4584)\r\n==51564==    by 0xB05BF8: TestingSetup::~TestingSetup() (setup_common.cpp:185)\r\n==51564==    by 0x4CC5A26: __run_exit_handlers (exit.c:108)\r\n==51564==    by 0x4CC5BDF: exit (exit.c:139)\r\n==51564==    by 0x4236D8: fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==  Address 0x5170be0 is 0 bytes inside a block of size 768 free'd\r\n==51564==    at 0x483CFBF: operator delete(void*) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E79A: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::deallocate(std::pair<void*, CLockLocation>*, unsigned long) (new_allocator.h:128)\r\n==51564==    by 0xA5E6F2: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::deallocate(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, unsigned long) (alloc_traits.h:470)\r\n==51564==    by 0xA5DB99: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_deallocate(std::pair<void*, CLockLocation>*, unsigned long) (stl_vector.h:351)\r\n==51564==    by 0xA60D20: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~_Vector_base() (stl_vector.h:332)\r\n==51564==    by 0xA57104: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~vector() (stl_vector.h:680)\r\n==51564==    by 0x4CC643E: __call_tls_dtors (cxa_thread_atexit_impl.c:155)\r\n==51564==    by 0x4CC5B8C: __run_exit_handlers (exit.c:46)\r\n==51564==    by 0x4CC5BDF: exit (exit.c:139)\r\n==51564==    by 0x4236D8: fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==    by 0x44C322: main (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==  Block was alloc'd at\r\n==51564==    at 0x483BE63: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E095: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::allocate(unsigned long, void const*) (new_allocator.h:114)\r\n==51564==    by 0xA5DF94: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::allocate(std::allocator<std::pair<void*, CLockLocation> >&, unsigned long) (alloc_traits.h:444)\r\n==51564==    by 0xA5D90D: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_allocate(unsigned long) (stl_vector.h:343)\r\n==51564==    by 0xA5D17F: void std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_realloc_insert<std::pair<void*, CLockLocation> >(__gnu_cxx::__normal_iterator<std::pair<void*, CLockLocation>*, std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > > >, std::pair<void*, CLockLocation>&&) (vector.tcc:440)\r\n==51564==    by 0xA5CED2: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:121)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5160A8: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4BB885: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::UniqueLock(AnnotatedMixin<std::recursive_mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA7479F: ArgsManager::GetSetting(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (system.cpp:861)\r\n==51564== \r\n==51564== \r\n==51564== HEAP SUMMARY:\r\n==51564==     in use at exit: 23,172,862 bytes in 1,487 blocks\r\n==51564==   total heap usage: 138,583 allocs, 137,096 frees, 324,726,925 bytes allocated\r\n==51564== \r\n==51564== LEAK SUMMARY:\r\n==51564==    definitely lost: 0 bytes in 0 blocks\r\n==51564==    indirectly lost: 0 bytes in 0 blocks\r\n==51564==      possibly lost: 304 bytes in 1 blocks\r\n==51564==    still reachable: 23,172,558 bytes in 1,486 blocks\r\n==51564==         suppressed: 0 bytes in 0 blocks\r\n==51564== Rerun with --leak-check=full to see details of leaked memory\r\n==51564== \r\n==51564== For lists of detected and suppressed errors, rerun with: -s\r\n==51564== ERROR SUMMARY: 167 errors from 19 contexts (suppressed: 0 from 0)\r\n```\r\n\r\n</details>",
      "created_at": "2020-05-13T11:51:46Z",
      "updated_at": "2020-05-22T12:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r424376692",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/424376692"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/424377871",
      "pull_request_review_id": 410847628,
      "id": 424377871,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM3Nzg3MQ==",
      "diff_hunk": "@@ -78,21 +78,15 @@ typedef std::map<std::pair<void*, void*>, LockStack> LockOrders;\n typedef std::set<std::pair<void*, void*> > InvLockOrders;\n \n struct LockData {\n-    // Very ugly hack: as the global constructs and destructors run single\n-    // threaded, we use this boolean to know whether LockData still exists,\n-    // as DeleteLock can get called by global RecursiveMutex destructors\n-    // after LockData disappears.\n-    bool available;\n-    LockData() : available(true) {}\n-    ~LockData() { available = false; }\n-\n     LockOrders lockorders;\n     InvLockOrders invlockorders;\n     std::mutex dd_mutex;\n };\n LockData& GetLockData() {\n-    static LockData lockdata;\n-    return lockdata;\n+    // This approach guarantees that the *lockdata object is not destroyed until after its last use.\n+    // The operating system automatically reclaims all the memory in a program's heap when that program exits.\n+    static LockData* lockdata{new LockData()};\n+    return *lockdata;\n }\n \n static thread_local LockStack g_lockstack;",
      "path": "src/sync.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "6bc686839a7cc09e3586e2a47ae4f16b5d918d3a",
      "in_reply_to_id": 423808117,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> - struct desctructor locks the global mutex -> Reads free'd `lockstack`\r\n\r\nI can see only locking of `lockdata.dd_mutex`, or did I miss?\r\n\r\n",
      "created_at": "2020-05-13T11:54:00Z",
      "updated_at": "2020-05-22T12:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r424377871",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/424377871"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426153367",
      "pull_request_review_id": 413076551,
      "id": 426153367,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1MzM2Nw==",
      "diff_hunk": "@@ -78,21 +78,15 @@ typedef std::map<std::pair<void*, void*>, LockStack> LockOrders;\n typedef std::set<std::pair<void*, void*> > InvLockOrders;\n \n struct LockData {\n-    // Very ugly hack: as the global constructs and destructors run single\n-    // threaded, we use this boolean to know whether LockData still exists,\n-    // as DeleteLock can get called by global RecursiveMutex destructors\n-    // after LockData disappears.\n-    bool available;\n-    LockData() : available(true) {}\n-    ~LockData() { available = false; }\n-\n     LockOrders lockorders;\n     InvLockOrders invlockorders;\n     std::mutex dd_mutex;\n };\n LockData& GetLockData() {\n-    static LockData lockdata;\n-    return lockdata;\n+    // This approach guarantees that the *lockdata object is not destroyed until after its last use.\n+    // The operating system automatically reclaims all the memory in a program's heap when that program exits.\n+    static LockData* lockdata{new LockData()};\n+    return *lockdata;\n }\n \n static thread_local LockStack g_lockstack;",
      "path": "src/sync.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "6bc686839a7cc09e3586e2a47ae4f16b5d918d3a",
      "in_reply_to_id": 423808117,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "So reading from the bt, it looks like `g_lockstack` is initialized on first use. Not sure why, though. Because it is initialized on first use, it leads to invalid memory access.\r\n\r\nDonating the memory to the operating system at the end instead of calling the destructor fixes the problem for me.",
      "created_at": "2020-05-16T13:24:02Z",
      "updated_at": "2020-05-22T12:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426153367",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426153367"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426153517",
      "pull_request_review_id": 413076683,
      "id": 426153517,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1MzUxNw==",
      "diff_hunk": "@@ -78,21 +78,15 @@ typedef std::map<std::pair<void*, void*>, LockStack> LockOrders;\n typedef std::set<std::pair<void*, void*> > InvLockOrders;\n \n struct LockData {\n-    // Very ugly hack: as the global constructs and destructors run single\n-    // threaded, we use this boolean to know whether LockData still exists,\n-    // as DeleteLock can get called by global RecursiveMutex destructors\n-    // after LockData disappears.\n-    bool available;\n-    LockData() : available(true) {}\n-    ~LockData() { available = false; }\n-\n     LockOrders lockorders;\n     InvLockOrders invlockorders;\n     std::mutex dd_mutex;\n };\n LockData& GetLockData() {\n-    static LockData lockdata;\n-    return lockdata;\n+    // This approach guarantees that the *lockdata object is not destroyed until after its last use.\n+    // The operating system automatically reclaims all the memory in a program's heap when that program exits.\n+    static LockData* lockdata{new LockData()};\n+    return *lockdata;\n }\n \n static thread_local LockStack g_lockstack;",
      "path": "src/sync.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "6bc686839a7cc09e3586e2a47ae4f16b5d918d3a",
      "in_reply_to_id": 423808117,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is  this something inherent to `thread_local` to construct on first use?\r\n\r\nRunning this example program:\r\n\r\n```cpp\r\nstruct Foo {\r\n    Mutex m_mut;\r\n    Foo()\r\n    {\r\n        std::cout << __LINE__ << __func__ << std::endl;\r\n        LOCK(m_mut);\r\n    }\r\n    ~Foo()\r\n    {\r\n        std::cout << __LINE__ << __func__ << std::endl;\r\n        LOCK(m_mut);\r\n    }\r\n};\r\n\r\nvoid initialize()\r\n{\r\n}\r\n\r\nvoid test_one_input(const std::vector<uint8_t>& buffer)\r\n{\r\n    static Foo bar;\r\n}\r\n```\r\n\r\ngives me\r\n\r\n```\r\n14Foo\r\n80LockStack\r\n84~LockStack\r\n19~Foo\r\n```",
      "created_at": "2020-05-16T13:26:09Z",
      "updated_at": "2020-05-22T12:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426153517",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426153517"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426153572",
      "pull_request_review_id": 413076739,
      "id": 426153572,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1MzU3Mg==",
      "diff_hunk": "@@ -78,21 +78,15 @@ typedef std::map<std::pair<void*, void*>, LockStack> LockOrders;\n typedef std::set<std::pair<void*, void*> > InvLockOrders;\n \n struct LockData {\n-    // Very ugly hack: as the global constructs and destructors run single\n-    // threaded, we use this boolean to know whether LockData still exists,\n-    // as DeleteLock can get called by global RecursiveMutex destructors\n-    // after LockData disappears.\n-    bool available;\n-    LockData() : available(true) {}\n-    ~LockData() { available = false; }\n-\n     LockOrders lockorders;\n     InvLockOrders invlockorders;\n     std::mutex dd_mutex;\n };\n LockData& GetLockData() {\n-    static LockData lockdata;\n-    return lockdata;\n+    // This approach guarantees that the *lockdata object is not destroyed until after its last use.\n+    // The operating system automatically reclaims all the memory in a program's heap when that program exits.\n+    static LockData* lockdata{new LockData()};\n+    return *lockdata;\n }\n \n static thread_local LockStack g_lockstack;",
      "path": "src/sync.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "6bc686839a7cc09e3586e2a47ae4f16b5d918d3a",
      "in_reply_to_id": 423808117,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "How I expect it to work from reading the code was\r\n\r\n```\r\nLockStack\r\nFoo\r\n~Foo\r\n~LockStack",
      "created_at": "2020-05-16T13:27:21Z",
      "updated_at": "2020-05-22T12:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426153572",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426153572"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426218529",
      "pull_request_review_id": 413127911,
      "id": 426218529,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxODUyOQ==",
      "diff_hunk": "@@ -78,21 +78,15 @@ typedef std::map<std::pair<void*, void*>, LockStack> LockOrders;\n typedef std::set<std::pair<void*, void*> > InvLockOrders;\n \n struct LockData {\n-    // Very ugly hack: as the global constructs and destructors run single\n-    // threaded, we use this boolean to know whether LockData still exists,\n-    // as DeleteLock can get called by global RecursiveMutex destructors\n-    // after LockData disappears.\n-    bool available;\n-    LockData() : available(true) {}\n-    ~LockData() { available = false; }\n-\n     LockOrders lockorders;\n     InvLockOrders invlockorders;\n     std::mutex dd_mutex;\n };\n LockData& GetLockData() {\n-    static LockData lockdata;\n-    return lockdata;\n+    // This approach guarantees that the *lockdata object is not destroyed until after its last use.\n+    // The operating system automatically reclaims all the memory in a program's heap when that program exits.\n+    static LockData* lockdata{new LockData()};\n+    return *lockdata;\n }\n \n static thread_local LockStack g_lockstack;",
      "path": "src/sync.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "6bc686839a7cc09e3586e2a47ae4f16b5d918d3a",
      "in_reply_to_id": 423808117,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "As I understand, `~TestingSetup()` locks `Mutex newTaskMutex`, and, consequently, uses `LockStack g_lockstack`.\r\n\r\nHaving a `static` instance of the `TestingSetup` makes the destroying order unpredictable that leads to UB due to the possible usage of (writing to and reading from) `g_lockstack`.\r\n\r\nI found two cases of a `static` instance of the `TestingSetup`:\r\nhttps://github.com/bitcoin/bitcoin/blob/f8123d483caaee64c28be77fb5b6ae12293ddc4a/src/test/fuzz/process_messages.cpp#L19\r\nhttps://github.com/bitcoin/bitcoin/blob/f8123d483caaee64c28be77fb5b6ae12293ddc4a/src/test/fuzz/process_message.cpp#L44\r\n\r\n\r\n@MarcoFalke \r\n> Donating the memory to the operating system at the end instead of calling the destructor fixes the problem for me.\r\n\r\nWhich object are you talking about?",
      "created_at": "2020-05-17T05:18:39Z",
      "updated_at": "2020-05-22T12:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426218529",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426218529"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426232697",
      "pull_request_review_id": 413138747,
      "id": 426232697,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIzMjY5Nw==",
      "diff_hunk": "@@ -78,21 +78,15 @@ typedef std::map<std::pair<void*, void*>, LockStack> LockOrders;\n typedef std::set<std::pair<void*, void*> > InvLockOrders;\n \n struct LockData {\n-    // Very ugly hack: as the global constructs and destructors run single\n-    // threaded, we use this boolean to know whether LockData still exists,\n-    // as DeleteLock can get called by global RecursiveMutex destructors\n-    // after LockData disappears.\n-    bool available;\n-    LockData() : available(true) {}\n-    ~LockData() { available = false; }\n-\n     LockOrders lockorders;\n     InvLockOrders invlockorders;\n     std::mutex dd_mutex;\n };\n LockData& GetLockData() {\n-    static LockData lockdata;\n-    return lockdata;\n+    // This approach guarantees that the *lockdata object is not destroyed until after its last use.\n+    // The operating system automatically reclaims all the memory in a program's heap when that program exits.\n+    static LockData* lockdata{new LockData()};\n+    return *lockdata;\n }\n \n static thread_local LockStack g_lockstack;",
      "path": "src/sync.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "6bc686839a7cc09e3586e2a47ae4f16b5d918d3a",
      "in_reply_to_id": 423808117,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@MarcoFalke \r\n\r\nI can confirm that the following patch fixes all of the memory errors mentioned in this pull:\r\n```diff\r\ndiff --git a/src/sync.cpp b/src/sync.cpp\r\nindex 41c75302d..9b99f5cfa 100644\r\n--- a/src/sync.cpp\r\n+++ b/src/sync.cpp\r\n@@ -89,7 +89,12 @@ LockData& GetLockData() {\r\n     return *lockdata;\r\n }\r\n \r\n-static thread_local LockStack g_lockstack;\r\n+LockStack& GetLockStack() {\r\n+    // This approach guarantees that the *lockstack object is not destroyed until after its last use.\r\n+    // The operating system automatically reclaims all the memory in a program's heap when that program exits.\r\n+    static thread_local LockStack* lockstack{new LockStack()};\r\n+    return *lockstack;\r\n+}\r\n \r\n static void potential_deadlock_detected(const std::pair<void*, void*>& mismatch, const LockStack& s1, const LockStack& s2)\r\n {\r\n@@ -126,16 +131,17 @@ static void push_lock(void* c, const CLockLocation& locklocation)\r\n     LockData& lockdata = GetLockData();\r\n     std::lock_guard<std::mutex> lock(lockdata.dd_mutex);\r\n \r\n-    g_lockstack.push_back(std::make_pair(c, locklocation));\r\n+    LockStack& lockstack = GetLockStack();\r\n+    lockstack.push_back(std::make_pair(c, locklocation));\r\n \r\n-    for (const std::pair<void*, CLockLocation>& i : g_lockstack) {\r\n+    for (const std::pair<void*, CLockLocation>& i : lockstack) {\r\n         if (i.first == c)\r\n             break;\r\n \r\n         std::pair<void*, void*> p1 = std::make_pair(i.first, c);\r\n         if (lockdata.lockorders.count(p1))\r\n             continue;\r\n-        lockdata.lockorders.emplace(p1, g_lockstack);\r\n+        lockdata.lockorders.emplace(p1, lockstack);\r\n \r\n         std::pair<void*, void*> p2 = std::make_pair(c, i.first);\r\n         lockdata.invlockorders.insert(p2);\r\n@@ -146,7 +152,7 @@ static void push_lock(void* c, const CLockLocation& locklocation)\r\n \r\n static void pop_lock()\r\n {\r\n-    g_lockstack.pop_back();\r\n+    GetLockStack().pop_back();\r\n }\r\n \r\n void EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry)\r\n@@ -156,8 +162,9 @@ void EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs\r\n \r\n void CheckLastCritical(void* cs, std::string& lockname, const char* guardname, const char* file, int line)\r\n {\r\n-    if (!g_lockstack.empty()) {\r\n-        const auto& lastlock = g_lockstack.back();\r\n+    LockStack& lockstack = GetLockStack();\r\n+    if (!lockstack.empty()) {\r\n+        const auto& lastlock = lockstack.back();\r\n         if (lastlock.first == cs) {\r\n             lockname = lastlock.second.Name();\r\n             return;\r\n@@ -174,14 +181,16 @@ void LeaveCritical()\r\n std::string LocksHeld()\r\n {\r\n     std::string result;\r\n-    for (const std::pair<void*, CLockLocation>& i : g_lockstack)\r\n+    LockStack& lockstack = GetLockStack();\r\n+    for (const std::pair<void*, CLockLocation>& i : lockstack)\r\n         result += i.second.ToString() + std::string(\"\\n\");\r\n     return result;\r\n }\r\n \r\n void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs)\r\n {\r\n-    for (const std::pair<void*, CLockLocation>& i : g_lockstack)\r\n+    LockStack& lockstack = GetLockStack();\r\n+    for (const std::pair<void*, CLockLocation>& i : lockstack)\r\n         if (i.first == cs)\r\n             return;\r\n     tfm::format(std::cerr, \"Assertion failed: lock %s not held in %s:%i; locks held:\\n%s\", pszName, pszFile, nLine, LocksHeld());\r\n@@ -190,7 +199,8 @@ void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine,\r\n \r\n void AssertLockNotHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs)\r\n {\r\n-    for (const std::pair<void*, CLockLocation>& i : g_lockstack) {\r\n+    LockStack& lockstack = GetLockStack();\r\n+    for (const std::pair<void*, CLockLocation>& i : lockstack) {\r\n         if (i.first == cs) {\r\n             tfm::format(std::cerr, \"Assertion failed: lock %s held in %s:%i; locks held:\\n%s\", pszName, pszFile, nLine, LocksHeld());\r\n             abort();\r\n```\r\n\r\nGoing to investigate for any regression.",
      "created_at": "2020-05-17T08:23:24Z",
      "updated_at": "2020-05-22T12:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426232697",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426232697"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426245017",
      "pull_request_review_id": 413148818,
      "id": 426245017,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI0NTAxNw==",
      "diff_hunk": "@@ -78,21 +78,15 @@ typedef std::map<std::pair<void*, void*>, LockStack> LockOrders;\n typedef std::set<std::pair<void*, void*> > InvLockOrders;\n \n struct LockData {\n-    // Very ugly hack: as the global constructs and destructors run single\n-    // threaded, we use this boolean to know whether LockData still exists,\n-    // as DeleteLock can get called by global RecursiveMutex destructors\n-    // after LockData disappears.\n-    bool available;\n-    LockData() : available(true) {}\n-    ~LockData() { available = false; }\n-\n     LockOrders lockorders;\n     InvLockOrders invlockorders;\n     std::mutex dd_mutex;\n };\n LockData& GetLockData() {\n-    static LockData lockdata;\n-    return lockdata;\n+    // This approach guarantees that the *lockdata object is not destroyed until after its last use.\n+    // The operating system automatically reclaims all the memory in a program's heap when that program exits.\n+    static LockData* lockdata{new LockData()};\n+    return *lockdata;\n }\n \n static thread_local LockStack g_lockstack;",
      "path": "src/sync.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "6bc686839a7cc09e3586e2a47ae4f16b5d918d3a",
      "in_reply_to_id": 423808117,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Having a static instance of the TestingSetup makes the destroying order unpredictable\r\n\r\nI wasn't aware of that. I assumed that the order globals are destroyed is the inverse order of how they were constructed.",
      "created_at": "2020-05-17T10:37:19Z",
      "updated_at": "2020-05-22T12:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426245017",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426245017"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426245565",
      "pull_request_review_id": 413149300,
      "id": 426245565,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI0NTU2NQ==",
      "diff_hunk": "@@ -78,21 +78,15 @@ typedef std::map<std::pair<void*, void*>, LockStack> LockOrders;\n typedef std::set<std::pair<void*, void*> > InvLockOrders;\n \n struct LockData {\n-    // Very ugly hack: as the global constructs and destructors run single\n-    // threaded, we use this boolean to know whether LockData still exists,\n-    // as DeleteLock can get called by global RecursiveMutex destructors\n-    // after LockData disappears.\n-    bool available;\n-    LockData() : available(true) {}\n-    ~LockData() { available = false; }\n-\n     LockOrders lockorders;\n     InvLockOrders invlockorders;\n     std::mutex dd_mutex;\n };\n LockData& GetLockData() {\n-    static LockData lockdata;\n-    return lockdata;\n+    // This approach guarantees that the *lockdata object is not destroyed until after its last use.\n+    // The operating system automatically reclaims all the memory in a program's heap when that program exits.\n+    static LockData* lockdata{new LockData()};\n+    return *lockdata;\n }\n \n static thread_local LockStack g_lockstack;",
      "path": "src/sync.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "6bc686839a7cc09e3586e2a47ae4f16b5d918d3a",
      "in_reply_to_id": 423808117,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> I wasn't aware of that. I assumed that the order globals are destroyed is the inverse order of how they were constructed.\r\n\r\nThat is correct. But if globals are defined in _different_ translation units then the order of how them are constructed is unpredictable.",
      "created_at": "2020-05-17T10:42:42Z",
      "updated_at": "2020-05-22T12:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426245565",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426245565"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426246117",
      "pull_request_review_id": 413149718,
      "id": 426246117,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI0NjExNw==",
      "diff_hunk": "@@ -78,21 +78,15 @@ typedef std::map<std::pair<void*, void*>, LockStack> LockOrders;\n typedef std::set<std::pair<void*, void*> > InvLockOrders;\n \n struct LockData {\n-    // Very ugly hack: as the global constructs and destructors run single\n-    // threaded, we use this boolean to know whether LockData still exists,\n-    // as DeleteLock can get called by global RecursiveMutex destructors\n-    // after LockData disappears.\n-    bool available;\n-    LockData() : available(true) {}\n-    ~LockData() { available = false; }\n-\n     LockOrders lockorders;\n     InvLockOrders invlockorders;\n     std::mutex dd_mutex;\n };\n LockData& GetLockData() {\n-    static LockData lockdata;\n-    return lockdata;\n+    // This approach guarantees that the *lockdata object is not destroyed until after its last use.\n+    // The operating system automatically reclaims all the memory in a program's heap when that program exits.\n+    static LockData* lockdata{new LockData()};\n+    return *lockdata;\n }\n \n static thread_local LockStack g_lockstack;",
      "path": "src/sync.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "6bc686839a7cc09e3586e2a47ae4f16b5d918d3a",
      "in_reply_to_id": 423808117,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "TIL\r\n\r\nAnyway, I did the same changes as in your comment and for me that fixed the problems.",
      "created_at": "2020-05-17T10:48:14Z",
      "updated_at": "2020-05-22T12:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426246117",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426246117"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426246120",
      "pull_request_review_id": 413149723,
      "id": 426246120,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI0NjEyMA==",
      "diff_hunk": "@@ -78,21 +78,15 @@ typedef std::map<std::pair<void*, void*>, LockStack> LockOrders;\n typedef std::set<std::pair<void*, void*> > InvLockOrders;\n \n struct LockData {\n-    // Very ugly hack: as the global constructs and destructors run single\n-    // threaded, we use this boolean to know whether LockData still exists,\n-    // as DeleteLock can get called by global RecursiveMutex destructors\n-    // after LockData disappears.\n-    bool available;\n-    LockData() : available(true) {}\n-    ~LockData() { available = false; }\n-\n     LockOrders lockorders;\n     InvLockOrders invlockorders;\n     std::mutex dd_mutex;\n };\n LockData& GetLockData() {\n-    static LockData lockdata;\n-    return lockdata;\n+    // This approach guarantees that the *lockdata object is not destroyed until after its last use.\n+    // The operating system automatically reclaims all the memory in a program's heap when that program exits.\n+    static LockData* lockdata{new LockData()};\n+    return *lockdata;\n }\n \n static thread_local LockStack g_lockstack;",
      "path": "src/sync.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "6bc686839a7cc09e3586e2a47ae4f16b5d918d3a",
      "in_reply_to_id": 423808117,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Lets move them all to same unit :trollface: ",
      "created_at": "2020-05-17T10:48:16Z",
      "updated_at": "2020-05-22T12:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426246120",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426246120"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426246261",
      "pull_request_review_id": 413149850,
      "id": 426246261,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI0NjI2MQ==",
      "diff_hunk": "@@ -78,21 +78,15 @@ typedef std::map<std::pair<void*, void*>, LockStack> LockOrders;\n typedef std::set<std::pair<void*, void*> > InvLockOrders;\n \n struct LockData {\n-    // Very ugly hack: as the global constructs and destructors run single\n-    // threaded, we use this boolean to know whether LockData still exists,\n-    // as DeleteLock can get called by global RecursiveMutex destructors\n-    // after LockData disappears.\n-    bool available;\n-    LockData() : available(true) {}\n-    ~LockData() { available = false; }\n-\n     LockOrders lockorders;\n     InvLockOrders invlockorders;\n     std::mutex dd_mutex;\n };\n LockData& GetLockData() {\n-    static LockData lockdata;\n-    return lockdata;\n+    // This approach guarantees that the *lockdata object is not destroyed until after its last use.\n+    // The operating system automatically reclaims all the memory in a program's heap when that program exits.\n+    static LockData* lockdata{new LockData()};\n+    return *lockdata;\n }\n \n static thread_local LockStack g_lockstack;",
      "path": "src/sync.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "6bc686839a7cc09e3586e2a47ae4f16b5d918d3a",
      "in_reply_to_id": 423808117,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "main.cpp, maybe?",
      "created_at": "2020-05-17T10:49:44Z",
      "updated_at": "2020-05-22T12:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426246261",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426246261"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426249656",
      "pull_request_review_id": 413152562,
      "id": 426249656,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI0OTY1Ng==",
      "diff_hunk": "@@ -78,21 +78,15 @@ typedef std::map<std::pair<void*, void*>, LockStack> LockOrders;\n typedef std::set<std::pair<void*, void*> > InvLockOrders;\n \n struct LockData {\n-    // Very ugly hack: as the global constructs and destructors run single\n-    // threaded, we use this boolean to know whether LockData still exists,\n-    // as DeleteLock can get called by global RecursiveMutex destructors\n-    // after LockData disappears.\n-    bool available;\n-    LockData() : available(true) {}\n-    ~LockData() { available = false; }\n-\n     LockOrders lockorders;\n     InvLockOrders invlockorders;\n     std::mutex dd_mutex;\n };\n LockData& GetLockData() {\n-    static LockData lockdata;\n-    return lockdata;\n+    // This approach guarantees that the *lockdata object is not destroyed until after its last use.\n+    // The operating system automatically reclaims all the memory in a program's heap when that program exits.\n+    static LockData* lockdata{new LockData()};\n+    return *lockdata;\n }\n \n static thread_local LockStack g_lockstack;",
      "path": "src/sync.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "6bc686839a7cc09e3586e2a47ae4f16b5d918d3a",
      "in_reply_to_id": 423808117,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Lets move them all to same unit :trollface:\r\n\r\n> main.cpp, maybe?\r\n\r\nWhat about unit tests?",
      "created_at": "2020-05-17T11:24:32Z",
      "updated_at": "2020-05-22T12:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426249656",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426249656"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426254133",
      "pull_request_review_id": 413156230,
      "id": 426254133,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI1NDEzMw==",
      "diff_hunk": "@@ -78,21 +78,15 @@ typedef std::map<std::pair<void*, void*>, LockStack> LockOrders;\n typedef std::set<std::pair<void*, void*> > InvLockOrders;\n \n struct LockData {\n-    // Very ugly hack: as the global constructs and destructors run single\n-    // threaded, we use this boolean to know whether LockData still exists,\n-    // as DeleteLock can get called by global RecursiveMutex destructors\n-    // after LockData disappears.\n-    bool available;\n-    LockData() : available(true) {}\n-    ~LockData() { available = false; }\n-\n     LockOrders lockorders;\n     InvLockOrders invlockorders;\n     std::mutex dd_mutex;\n };\n LockData& GetLockData() {\n-    static LockData lockdata;\n-    return lockdata;\n+    // This approach guarantees that the *lockdata object is not destroyed until after its last use.\n+    // The operating system automatically reclaims all the memory in a program's heap when that program exits.\n+    static LockData* lockdata{new LockData()};\n+    return *lockdata;\n }\n \n static thread_local LockStack g_lockstack;",
      "path": "src/sync.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "6bc686839a7cc09e3586e2a47ae4f16b5d918d3a",
      "in_reply_to_id": 423808117,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "[Updated](https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-629787071).",
      "created_at": "2020-05-17T12:11:27Z",
      "updated_at": "2020-05-22T12:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426254133",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426254133"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426254548",
      "pull_request_review_id": 413156561,
      "id": 426254548,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI1NDU0OA==",
      "diff_hunk": "@@ -78,24 +78,23 @@ typedef std::map<std::pair<void*, void*>, LockStack> LockOrders;\n typedef std::set<std::pair<void*, void*> > InvLockOrders;\n \n struct LockData {\n-    // Very ugly hack: as the global constructs and destructors run single\n-    // threaded, we use this boolean to know whether LockData still exists,\n-    // as DeleteLock can get called by global RecursiveMutex destructors\n-    // after LockData disappears.\n-    bool available;\n-    LockData() : available(true) {}\n-    ~LockData() { available = false; }\n-\n     LockOrders lockorders;\n     InvLockOrders invlockorders;\n     std::mutex dd_mutex;\n };\n LockData& GetLockData() {\n-    static LockData lockdata;\n-    return lockdata;\n+    // This approach guarantees that the *lockdata object is not destroyed until after its last use.\n+    // The operating system automatically reclaims all the memory in a program's heap when that program exits.\n+    static LockData* lockdata{new LockData()};\n+    return *lockdata;\n }\n \n-static thread_local LockStack g_lockstack;\n+LockStack& GetLockStack() {\n+    // This approach guarantees that the *lockstack object is not destroyed until after its last use.\n+    // The operating system automatically reclaims all the memory in a program's heap when that program exits.",
      "path": "src/sync.cpp",
      "position": 55,
      "original_position": 28,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "d34871883ce116b8ba4e3add5d5330215a0b16f3",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe also mention that this is only safe to do because the object happens to have a trivial destructor?",
      "created_at": "2020-05-17T12:15:33Z",
      "updated_at": "2020-05-22T12:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426254548",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426254548"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 97,
      "original_line": 97,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426254602",
      "pull_request_review_id": 413156561,
      "id": 426254602,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI1NDYwMg==",
      "diff_hunk": "@@ -162,8 +162,9 @@ void EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs\n \n void CheckLastCritical(void* cs, std::string& lockname, const char* guardname, const char* file, int line)\n {\n-    if (!g_lockstack.empty()) {\n-        const auto& lastlock = g_lockstack.back();\n+    LockStack& lockstack = GetLockStack();",
      "path": "src/sync.cpp",
      "position": null,
      "original_position": 71,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "d34871883ce116b8ba4e3add5d5330215a0b16f3",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    const LockStack& lockstack = GetLockStack();\r\n```",
      "created_at": "2020-05-17T12:15:58Z",
      "updated_at": "2020-05-22T12:47:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426254602",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426254602"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 165,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426254613",
      "pull_request_review_id": 413156561,
      "id": 426254613,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI1NDYxMw==",
      "diff_hunk": "@@ -180,14 +181,16 @@ void LeaveCritical()\n std::string LocksHeld()\n {\n     std::string result;\n-    for (const std::pair<void*, CLockLocation>& i : g_lockstack)\n+    LockStack& lockstack = GetLockStack();",
      "path": "src/sync.cpp",
      "position": null,
      "original_position": 82,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "d34871883ce116b8ba4e3add5d5330215a0b16f3",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    const LockStack& lockstack = GetLockStack();\r\n```",
      "created_at": "2020-05-17T12:16:16Z",
      "updated_at": "2020-05-22T12:47:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426254613",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426254613"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 184,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426254633",
      "pull_request_review_id": 413156561,
      "id": 426254633,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI1NDYzMw==",
      "diff_hunk": "@@ -180,14 +181,16 @@ void LeaveCritical()\n std::string LocksHeld()\n {\n     std::string result;\n-    for (const std::pair<void*, CLockLocation>& i : g_lockstack)\n+    LockStack& lockstack = GetLockStack();\n+    for (const std::pair<void*, CLockLocation>& i : lockstack)\n         result += i.second.ToString() + std::string(\"\\n\");\n     return result;\n }\n \n void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs)\n {\n-    for (const std::pair<void*, CLockLocation>& i : g_lockstack)\n+    LockStack& lockstack = GetLockStack();",
      "path": "src/sync.cpp",
      "position": null,
      "original_position": 91,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "d34871883ce116b8ba4e3add5d5330215a0b16f3",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "same",
      "created_at": "2020-05-17T12:16:28Z",
      "updated_at": "2020-05-22T12:47:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426254633",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426254633"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 192,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426254648",
      "pull_request_review_id": 413156561,
      "id": 426254648,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI1NDY0OA==",
      "diff_hunk": "@@ -196,7 +199,8 @@ void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine,\n \n void AssertLockNotHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs)\n {\n-    for (const std::pair<void*, CLockLocation>& i : g_lockstack) {\n+    LockStack& lockstack = GetLockStack();",
      "path": "src/sync.cpp",
      "position": null,
      "original_position": 101,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "d34871883ce116b8ba4e3add5d5330215a0b16f3",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "same",
      "created_at": "2020-05-17T12:16:34Z",
      "updated_at": "2020-05-22T12:47:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426254648",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426254648"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 202,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426645402",
      "pull_request_review_id": 413619527,
      "id": 426645402,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY0NTQwMg==",
      "diff_hunk": "@@ -179,15 +193,23 @@ void LeaveCritical()\n \n std::string LocksHeld()\n {\n+    LockData& lockdata = GetLockData();\n+    std::lock_guard<std::mutex> lock(lockdata.dd_mutex);",
      "path": "src/sync.cpp",
      "position": 152,
      "original_position": 143,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "77b41b79d2e09ff774624a73cda7213abf26c420",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Locking a non-recursive mutex that is already locked is undefined behavior",
      "created_at": "2020-05-18T13:57:09Z",
      "updated_at": "2020-05-22T12:47:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426645402",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426645402"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 200,
      "original_line": 198,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426710235",
      "pull_request_review_id": 413703561,
      "id": 426710235,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcxMDIzNQ==",
      "diff_hunk": "@@ -179,15 +193,23 @@ void LeaveCritical()\n \n std::string LocksHeld()\n {\n+    LockData& lockdata = GetLockData();\n+    std::lock_guard<std::mutex> lock(lockdata.dd_mutex);",
      "path": "src/sync.cpp",
      "position": 152,
      "original_position": 143,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "77b41b79d2e09ff774624a73cda7213abf26c420",
      "in_reply_to_id": 426645402,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "[Fixed](https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-630262961).",
      "created_at": "2020-05-18T15:27:48Z",
      "updated_at": "2020-05-22T12:47:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426710235",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426710235"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 200,
      "original_line": 198,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429209164",
      "pull_request_review_id": 416861130,
      "id": 429209164,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwOTE2NA==",
      "diff_hunk": "@@ -78,21 +78,16 @@ typedef std::map<std::pair<void*, void*>, LockStack> LockOrders;\n typedef std::set<std::pair<void*, void*> > InvLockOrders;\n \n struct LockData {\n-    // Very ugly hack: as the global constructs and destructors run single\n-    // threaded, we use this boolean to know whether LockData still exists,\n-    // as DeleteLock can get called by global RecursiveMutex destructors\n-    // after LockData disappears.\n-    bool available;\n-    LockData() : available(true) {}\n-    ~LockData() { available = false; }\n-\n     LockOrders lockorders;\n     InvLockOrders invlockorders;\n     std::mutex dd_mutex;\n };\n+\n LockData& GetLockData() {\n-    static LockData lockdata;\n-    return lockdata;\n+    // This approach guarantees that the object is not destroyed until after its last use.\n+    // The operating system automatically reclaims all the memory in a program's heap when that program exits.",
      "path": "src/sync.cpp",
      "position": 55,
      "original_position": 21,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "458992b06d80eb568141f60a33d38e12e894e27a",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    // The operating system automatically reclaims all the memory in a program's heap when that program exits.\r\n    // Since the destructor is never called, the object and all its members must have an implicit destructor.\r\n```",
      "created_at": "2020-05-22T12:09:16Z",
      "updated_at": "2020-05-22T12:47:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r429209164",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429209164"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 97,
      "original_line": 88,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429226654",
      "pull_request_review_id": 416884074,
      "id": 429226654,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIyNjY1NA==",
      "diff_hunk": "@@ -78,21 +78,16 @@ typedef std::map<std::pair<void*, void*>, LockStack> LockOrders;\n typedef std::set<std::pair<void*, void*> > InvLockOrders;\n \n struct LockData {\n-    // Very ugly hack: as the global constructs and destructors run single\n-    // threaded, we use this boolean to know whether LockData still exists,\n-    // as DeleteLock can get called by global RecursiveMutex destructors\n-    // after LockData disappears.\n-    bool available;\n-    LockData() : available(true) {}\n-    ~LockData() { available = false; }\n-\n     LockOrders lockorders;\n     InvLockOrders invlockorders;\n     std::mutex dd_mutex;\n };\n+\n LockData& GetLockData() {\n-    static LockData lockdata;\n-    return lockdata;\n+    // This approach guarantees that the object is not destroyed until after its last use.\n+    // The operating system automatically reclaims all the memory in a program's heap when that program exits.",
      "path": "src/sync.cpp",
      "position": 55,
      "original_position": 21,
      "commit_id": "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "original_commit_id": "458992b06d80eb568141f60a33d38e12e894e27a",
      "in_reply_to_id": 429209164,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "[Updated](https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-632674167).",
      "created_at": "2020-05-22T12:49:46Z",
      "updated_at": "2020-05-22T12:49:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r429226654",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429226654"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 97,
      "original_line": 88,
      "side": "RIGHT"
    }
  ]
}