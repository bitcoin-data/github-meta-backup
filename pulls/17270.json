{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270",
    "id": 332815612,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzMyODE1NjEy",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17270",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/17270.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/17270.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17270",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17270/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/d1c02775aa74a0610809ac54bb241ddad61d2d8c",
    "number": 17270,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "Feed environment data into RNG initializers",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This introduces a new `randomenv` module that queries varies non-cryptographic (and non-RNG) sources of entropy available on the system; things like user IDs, system configuration, time, statistics, CPUID data.\r\n\r\nThe idea is that these provide a fallback in scenarios where system entropy is somehow broken (note that if system entropy *fails* we will abort regardless; this is only meant to function as a last resort against undetected failure). It includes some data sources OpenSSL currently uses, and more.\r\n\r\nThe separation between random and randomenv is a bit arbitrary, but I felt that all this \"non-essential\" functionality deserved to be separated from the core random module.",
    "labels": [
      {
        "id": 241832923,
        "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
        "name": "Utils/log/libs",
        "description": "",
        "color": "5319e7",
        "default": false
      }
    ],
    "active_lock_reason": "resolved",
    "created_at": "2019-10-27T01:26:21Z",
    "updated_at": "2022-10-24T11:40:10Z",
    "closed_at": "2019-11-18T12:34:12Z",
    "mergeable_state": "unknown",
    "merged_at": "2019-11-18T12:34:12Z",
    "merge_commit_sha": "d1c02775aa74a0610809ac54bb241ddad61d2d8c",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "sipa:201910_seedrandom",
      "ref": "201910_seedrandom",
      "sha": "d1c02775aa74a0610809ac54bb241ddad61d2d8c",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 1458655,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNDU4NjU1",
        "name": "bitcoin",
        "full_name": "sipa/bitcoin",
        "owner": {
          "login": "sipa",
          "id": 548488,
          "node_id": "MDQ6VXNlcjU0ODQ4OA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sipa",
          "html_url": "https://github.com/sipa",
          "followers_url": "https://api.github.com/users/sipa/followers",
          "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
          "organizations_url": "https://api.github.com/users/sipa/orgs",
          "repos_url": "https://api.github.com/users/sipa/repos",
          "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/sipa/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/sipa/bitcoin",
        "description": "Bitcoin integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/sipa/bitcoin",
        "archive_url": "https://api.github.com/repos/sipa/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/sipa/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/sipa/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/sipa/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/sipa/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/sipa/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/sipa/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/sipa/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/sipa/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/sipa/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/sipa/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/sipa/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/sipa/bitcoin/events",
        "forks_url": "https://api.github.com/repos/sipa/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/sipa/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/sipa/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/sipa/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/sipa/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/sipa/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/sipa/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/sipa/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/sipa/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/sipa/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/sipa/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/sipa/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/sipa/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/sipa/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/sipa/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/sipa/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:sipa/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/sipa/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/sipa/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/sipa/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/sipa/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/sipa/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/sipa/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/sipa/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/sipa/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/sipa/bitcoin/hooks",
        "svn_url": "https://github.com/sipa/bitcoin",
        "homepage": "http://www.bitcoin.org",
        "language": "TypeScript",
        "forks_count": 20,
        "stargazers_count": 81,
        "watchers_count": 81,
        "size": 215860,
        "default_branch": "lows",
        "open_issues_count": 16,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T11:52:48Z",
        "created_at": "2011-03-09T10:46:59Z",
        "updated_at": "2023-04-30T00:52:17Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "8237889e8d0fb7542669a9098516c96da91913f0",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69817,
        "watchers_count": 69817,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T22:42:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T01:13:41Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 611,
    "deletions": 108,
    "changed_files": 11,
    "commits": 11,
    "review_comments": 43,
    "comments": 35
  },
  "events": [
    {
      "event": "labeled",
      "id": 2746384792,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI3NDYzODQ3OTI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2746384792",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-27T01:35:27Z",
      "label": {
        "name": "Build system",
        "color": "5319e7"
      }
    },
    {
      "event": "unlabeled",
      "id": 2746384930,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50Mjc0NjM4NDkzMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2746384930",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-27T01:36:01Z",
      "label": {
        "name": "Build system",
        "color": "5319e7"
      }
    },
    {
      "event": "labeled",
      "id": 2746384931,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI3NDYzODQ5MzE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2746384931",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-27T01:36:01Z",
      "label": {
        "name": "Utils/log/libs",
        "color": "5319e7"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2746391515,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjc0NjM5MTUxNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2746391515",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-27T01:55:16Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2746392068,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjc0NjM5MjA2OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2746392068",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-27T01:56:49Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2746392760,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjc0NjM5Mjc2MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2746392760",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-27T01:59:01Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2746393649,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjc0NjM5MzY0OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2746393649",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-27T02:01:59Z"
    },
    {
      "event": "commented",
      "id": 546655782,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0NjY1NTc4Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/546655782",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-27T02:24:48Z",
      "updated_at": "2019-11-09T02:56:23Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#12557](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/12557.html) ([WIP] 64 bit iOS device support by Sjors)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-546655782",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17270"
    },
    {
      "event": "reviewed",
      "id": 307563127,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzA3NTYzMTI3",
      "url": null,
      "actor": null,
      "commit_id": "0c6d5cb1f7fcf00fb7a900e5f5a1f2e1e2a49978",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#pullrequestreview-307563127",
      "submitted_at": "2019-10-27T09:39:41Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270"
    },
    {
      "event": "commented",
      "id": 546680696,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0NjY4MDY5Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/546680696",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-27T10:19:50Z",
      "updated_at": "2019-10-27T10:19:50Z",
      "author_association": "MEMBER",
      "body": "Errors on MacOSX (looks like it doesn't have `environ` and `CLOCK_MONOTONIC`):\r\n```\r\nandomenv.cpp:177:19: error: use of undeclared identifier 'CLOCK_MONOTONIC'\r\n    clock_gettime(CLOCK_MONOTONIC, &ts);\r\nrandomenv.cpp:222:64: error: use of undeclared identifier 'environ'\r\n    hasher << &x << &RandAddStaticEnv << &malloc << &errno << &environ << addr;                                                \r\nrandomenv.cpp:282:9: error: use of undeclared identifier 'environ'\r\n    if (environ) {\r\nrandomenv.cpp:283:28: error: use of undeclared identifier 'environ'\r\n        for (size_t i = 0; environ[i]; ++i) {\r\nrandomenv.cpp:284:48: error: use of undeclared identifier 'environ'; did you mean 'union'?\r\n            hasher.Write((const unsigned char*)environ[i], strlen(environ[i]));\r\n                                               ^~~~~~~\r\n                                               union\r\nrandomenv.cpp:284:48: error: expected expression\r\nrandomenv.cpp:284:67: error: use of undeclared identifier 'environ'\r\n            hasher.Write((const unsigned char*)environ[i], strlen(environ[i]));\r\n                                                                 ^\r\n7 errors generated.\r\n```",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-546680696",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17270"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2746859440,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjc0Njg1OTQ0MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2746859440",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-27T20:03:40Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2746874121,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjc0Njg3NDEyMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2746874121",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-27T20:28:30Z"
    },
    {
      "event": "commented",
      "id": 546731211,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0NjczMTIxMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/546731211",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-27T20:30:07Z",
      "updated_at": "2019-10-27T20:30:07Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK: good idea",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-546731211",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17270"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2746877760,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjc0Njg3Nzc2MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2746877760",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-27T20:34:58Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2746886051,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjc0Njg4NjA1MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2746886051",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-27T20:51:03Z"
    },
    {
      "event": "commented",
      "id": 546736892,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0NjczNjg5Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/546736892",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-27T21:34:22Z",
      "updated_at": "2019-10-27T21:34:22Z",
      "author_association": "MEMBER",
      "body": "I think I've addressed a compatibility/build issues. Can someone try this on OSX, and perhaps some BSD flavor?",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-546736892",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17270"
    },
    {
      "event": "commented",
      "id": 546742728,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0Njc0MjcyOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/546742728",
      "actor": {
        "login": "RandyMcMillan",
        "id": 152159,
        "node_id": "MDQ6VXNlcjE1MjE1OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/152159?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RandyMcMillan",
        "html_url": "https://github.com/RandyMcMillan",
        "followers_url": "https://api.github.com/users/RandyMcMillan/followers",
        "following_url": "https://api.github.com/users/RandyMcMillan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RandyMcMillan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RandyMcMillan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RandyMcMillan/subscriptions",
        "organizations_url": "https://api.github.com/users/RandyMcMillan/orgs",
        "repos_url": "https://api.github.com/users/RandyMcMillan/repos",
        "events_url": "https://api.github.com/users/RandyMcMillan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RandyMcMillan/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-27T22:43:56Z",
      "updated_at": "2019-10-27T22:43:56Z",
      "author_association": "CONTRIBUTOR",
      "body": "@sipa, \r\nIt runs....\r\nhttps://github.com/RandyMcMillan/bitcoin/blob/201910_seedrandom/debug.log\r\nhttps://github.com/RandyMcMillan/bitcoin/blob/201910_seedrandom/mojave10.14.6build.txt",
      "user": {
        "login": "RandyMcMillan",
        "id": 152159,
        "node_id": "MDQ6VXNlcjE1MjE1OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/152159?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RandyMcMillan",
        "html_url": "https://github.com/RandyMcMillan",
        "followers_url": "https://api.github.com/users/RandyMcMillan/followers",
        "following_url": "https://api.github.com/users/RandyMcMillan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RandyMcMillan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RandyMcMillan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RandyMcMillan/subscriptions",
        "organizations_url": "https://api.github.com/users/RandyMcMillan/orgs",
        "repos_url": "https://api.github.com/users/RandyMcMillan/repos",
        "events_url": "https://api.github.com/users/RandyMcMillan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RandyMcMillan/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-546742728",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17270"
    },
    {
      "event": "mentioned",
      "id": 2746945133,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mjc0Njk0NTEzMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2746945133",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-27T22:43:56Z"
    },
    {
      "event": "subscribed",
      "id": 2746945134,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI3NDY5NDUxMzQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2746945134",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-27T22:43:56Z"
    },
    {
      "event": "commented",
      "id": 546743659,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0Njc0MzY1OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/546743659",
      "actor": {
        "login": "RandyMcMillan",
        "id": 152159,
        "node_id": "MDQ6VXNlcjE1MjE1OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/152159?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RandyMcMillan",
        "html_url": "https://github.com/RandyMcMillan",
        "followers_url": "https://api.github.com/users/RandyMcMillan/followers",
        "following_url": "https://api.github.com/users/RandyMcMillan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RandyMcMillan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RandyMcMillan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RandyMcMillan/subscriptions",
        "organizations_url": "https://api.github.com/users/RandyMcMillan/orgs",
        "repos_url": "https://api.github.com/users/RandyMcMillan/repos",
        "events_url": "https://api.github.com/users/RandyMcMillan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RandyMcMillan/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-27T22:56:04Z",
      "updated_at": "2019-10-27T23:00:37Z",
      "author_association": "CONTRIBUTOR",
      "body": "travis-ci > https://travis-ci.org/RandyMcMillan/bitcoin/jobs/603655433",
      "user": {
        "login": "RandyMcMillan",
        "id": 152159,
        "node_id": "MDQ6VXNlcjE1MjE1OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/152159?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RandyMcMillan",
        "html_url": "https://github.com/RandyMcMillan",
        "followers_url": "https://api.github.com/users/RandyMcMillan/followers",
        "following_url": "https://api.github.com/users/RandyMcMillan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RandyMcMillan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RandyMcMillan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RandyMcMillan/subscriptions",
        "organizations_url": "https://api.github.com/users/RandyMcMillan/orgs",
        "repos_url": "https://api.github.com/users/RandyMcMillan/repos",
        "events_url": "https://api.github.com/users/RandyMcMillan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RandyMcMillan/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-546743659",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17270"
    },
    {
      "event": "reviewed",
      "id": 307697470,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzA3Njk3NDcw",
      "url": null,
      "actor": null,
      "commit_id": "eed8cfec452a538d644844fb96606e6bc24f47c8",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK, nice commit sequence.",
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#pullrequestreview-307697470",
      "submitted_at": "2019-10-28T08:37:17Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270"
    },
    {
      "event": "commented",
      "id": 546964842,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0Njk2NDg0Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/546964842",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-28T14:13:04Z",
      "updated_at": "2019-10-28T14:13:04Z",
      "author_association": "MEMBER",
      "body": "> Can someone try this on OSX, and perhaps some BSD flavor?\r\n\r\nI get the following error when building eed8cfec452a538d644844fb96606e6bc24f47c8 on OpenBSD 6.6:\r\n```\r\n  CXX      libbitcoin_util_a-randomenv.o\r\nIn file included from randomenv.cpp:37:\r\n/usr/include/netinet/ip.h:67:19: error: field has incomplete type 'struct in_addr'\r\n        struct    in_addr ip_src, ip_dst; /* source and dest address */\r\n                          ^\r\n/usr/include/netinet/ip.h:67:11: note: forward declaration of 'in_addr'\r\n        struct    in_addr ip_src, ip_dst; /* source and dest address */\r\n                  ^\r\n/usr/include/netinet/ip.h:67:27: error: field has incomplete type 'struct in_addr'\r\n        struct    in_addr ip_src, ip_dst; /* source and dest address */\r\n                                  ^\r\n/usr/include/netinet/ip.h:67:11: note: forward declaration of 'in_addr'\r\n        struct    in_addr ip_src, ip_dst; /* source and dest address */\r\n                  ^\r\n/usr/include/netinet/ip.h:181:19: error: field has incomplete type 'struct in_addr'\r\n                        struct in_addr ipt_addr;\r\n                                       ^\r\n/usr/include/netinet/ip.h:67:11: note: forward declaration of 'in_addr'\r\n        struct    in_addr ip_src, ip_dst; /* source and dest address */\r\n                  ^\r\nrandomenv.cpp:101:57: error: unknown type name 'sockaddr_in'; did you mean 'sockaddr'?\r\n        hasher.Write((const unsigned char*)addr, sizeof(sockaddr_in));\r\n                                                        ^~~~~~~~~~~\r\n                                                        sockaddr\r\n/usr/include/sys/socket.h:207:8: note: 'sockaddr' declared here\r\nstruct sockaddr {\r\n       ^\r\nrandomenv.cpp:104:57: error: unknown type name 'sockaddr_in6'; did you mean 'sockaddr'?\r\n        hasher.Write((const unsigned char*)addr, sizeof(sockaddr_in6));\r\n                                                        ^~~~~~~~~~~~\r\n                                                        sockaddr\r\n/usr/include/sys/socket.h:207:8: note: 'sockaddr' declared here\r\nstruct sockaddr {\r\n       ^\r\n5 errors generated.\r\n```",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-546964842",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17270"
    },
    {
      "event": "commented",
      "id": 547005320,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0NzAwNTMyMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/547005320",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-28T15:37:07Z",
      "updated_at": "2019-10-28T15:37:35Z",
      "author_association": "MEMBER",
      "body": "Log on FreeBSD 12.0-RELEASE-p10 (same complaint, about `sockaddr`)\r\n<details>\r\n\r\n```\r\nMaking all in src\r\ngmake[1]: Entering directory '/usr/home/user/src/bitcoin/src'\r\ngmake[2]: Entering directory '/usr/home/user/src/bitcoin/src'\r\n  CXX      libbitcoin_util_a-randomenv.o\r\nIn file included from randomenv.cpp:37:\r\n/usr/include/netinet/ip.h:71:17: error: field has incomplete type 'struct in_addr'\r\n        struct  in_addr ip_src,ip_dst;  /* source and dest address */\r\n                        ^\r\n/usr/include/netinet/ip.h:71:9: note: forward declaration of 'in_addr'\r\n        struct  in_addr ip_src,ip_dst;  /* source and dest address */\r\n                ^\r\n/usr/include/netinet/ip.h:71:24: error: field has incomplete type 'struct in_addr'\r\n        struct  in_addr ip_src,ip_dst;  /* source and dest address */\r\n                               ^\r\n/usr/include/netinet/ip.h:71:9: note: forward declaration of 'in_addr'\r\n        struct  in_addr ip_src,ip_dst;  /* source and dest address */\r\n                ^\r\n/usr/include/netinet/ip.h:188:19: error: field has incomplete type 'struct in_addr'\r\n                        struct in_addr ipt_addr;\r\n                                       ^\r\n/usr/include/netinet/ip.h:71:9: note: forward declaration of 'in_addr'\r\n        struct  in_addr ip_src,ip_dst;  /* source and dest address */\r\n                ^\r\n/usr/include/netinet/ip.h:223:17: error: field has incomplete type 'struct in_addr'\r\n        struct  in_addr ippseudo_src;   /* source internet address */\r\n                        ^\r\n/usr/include/netinet/ip.h:71:9: note: forward declaration of 'in_addr'\r\n        struct  in_addr ip_src,ip_dst;  /* source and dest address */\r\n                ^\r\n/usr/include/netinet/ip.h:224:17: error: field has incomplete type 'struct in_addr'\r\n        struct  in_addr ippseudo_dst;   /* destination internet address */\r\n                        ^\r\n/usr/include/netinet/ip.h:71:9: note: forward declaration of 'in_addr'\r\n        struct  in_addr ip_src,ip_dst;  /* source and dest address */\r\n                ^\r\nrandomenv.cpp:101:57: error: unknown type name 'sockaddr_in'; did you mean 'sockaddr'?\r\n        hasher.Write((const unsigned char*)addr, sizeof(sockaddr_in));\r\n                                                        ^~~~~~~~~~~\r\n                                                        sockaddr\r\n/usr/include/sys/socket.h:328:8: note: 'sockaddr' declared here\r\nstruct sockaddr {\r\n       ^\r\nrandomenv.cpp:104:57: error: unknown type name 'sockaddr_in6'; did you mean 'sockaddr'?\r\n        hasher.Write((const unsigned char*)addr, sizeof(sockaddr_in6));\r\n                                                        ^~~~~~~~~~~~\r\n                                                        sockaddr\r\n/usr/include/sys/socket.h:328:8: note: 'sockaddr' declared here\r\nstruct sockaddr {\r\n       ^\r\n7 errors generated.\r\ngmake[2]: *** [Makefile:8866: libbitcoin_util_a-randomenv.o] Error 1\r\ngmake[2]: Leaving directory '/usr/home/user/src/bitcoin/src'\r\ngmake[1]: *** [Makefile:14135: all-recursive] Error 1\r\ngmake[1]: Leaving directory '/usr/home/user/src/bitcoin/src'\r\ngmake: *** [Makefile:774: all-recursive] Error 1\r\n```\r\n\r\n</details>\r\n",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-547005320",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17270"
    },
    {
      "event": "commented",
      "id": 547005637,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0NzAwNTYzNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/547005637",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-28T15:37:52Z",
      "updated_at": "2019-10-28T16:06:37Z",
      "author_association": "MEMBER",
      "body": "Building freeBSD here: https://cirrus-ci.com/task/5690364417015808\r\n\r\n\r\nEdit: Same error: https://cirrus-ci.com/task/5690364417015808?command=make#L734",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-547005637",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17270"
    },
    {
      "event": "commented",
      "id": 547011765,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0NzAxMTc2NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/547011765",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-28T15:50:40Z",
      "updated_at": "2019-10-28T15:50:40Z",
      "author_association": "MEMBER",
      "body": "Does the comment in `random.h` need to be updated?",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-547011765",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17270"
    },
    {
      "event": "commented",
      "id": 547015568,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0NzAxNTU2OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/547015568",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-28T15:58:28Z",
      "updated_at": "2019-10-28T15:58:28Z",
      "author_association": "MEMBER",
      "body": "> Does the comment in random.h need to be updated?\r\n\r\nIf that is updated, you could also cherry-pick https://github.com/bitcoin/bitcoin/pull/17265/commits/770cd9640e8b38d3456527bdf3d84b589cbd3418 out of #17265 which contains some related corrections.",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-547015568",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17270"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2749488037,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjc0OTQ4ODAzNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2749488037",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-28T17:50:34Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2749543925,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjc0OTU0MzkyNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2749543925",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-28T18:07:21Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2749547757,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjc0OTU0Nzc1Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2749547757",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-28T18:08:39Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2749648725,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjc0OTY0ODcyNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2749648725",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-28T18:40:45Z"
    },
    {
      "event": "commented",
      "id": 547089920,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0NzA4OTkyMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/547089920",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-28T18:41:44Z",
      "updated_at": "2019-10-28T18:45:02Z",
      "author_association": "MEMBER",
      "body": "New freeBSD build: https://cirrus-ci.com/task/4712584309112832",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-547089920",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17270"
    },
    {
      "event": "commented",
      "id": 547108271,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0NzEwODI3MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/547108271",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-28T19:28:01Z",
      "updated_at": "2019-10-28T19:28:01Z",
      "author_association": "MEMBER",
      "body": "New freeBSD build failure: https://cirrus-ci.com/task/4712584309112832?command=make#L761\r\n\r\n<details><summary>log</summary>\r\n\r\n```\r\n/usr/local/bin/ccache c++ -std=c++11 -DHAVE_CONFIG_H -I. -I../src/config   -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=2 -I. -I/tmp/cirrus-ci-build/db4/include -DBOOST_SP_USE_STD_ATOMIC -DBOOST_AC_USE_STD_ATOMIC -pthread -I/usr/local/include -I./leveldb/include -I./leveldb/helpers/memenv -I/usr/local/include  -I./secp256k1/include -I./univalue/include -Qunused-arguments  -DHAVE_BUILD_INFO -D__STDC_FORMAT_MACROS  -Wstack-protector -fstack-protector-all -Wall -Wextra -Wformat -Wvla -Wswitch -Wformat-security -Wthread-safety-analysis -Wrange-loop-analysis -Wredundant-decls -Wno-unused-parameter -Wno-self-assign -Wno-unused-local-typedef -Wno-deprecated-register -Wno-implicit-fallthrough    -fPIE -g -O2 -c -o libbitcoin_util_a-randomenv.o `test -f 'randomenv.cpp' || echo './'`randomenv.cpp\r\nIn file included from randomenv.cpp:29:\r\n/usr/include/netinet/ip.h:53:2: error: unknown type name 'u_char'; did you mean 'char'?\r\n        u_char  ip_hl:4,                /* header length */\r\n        ^\r\n/usr/include/netinet/ip.h:60:2: error: unknown type name 'u_char'; did you mean 'char'?\r\n        u_char  ip_tos;                 /* type of service */\r\n        ^\r\n/usr/include/netinet/ip.h:61:2: error: unknown type name 'u_short'; did you mean 'short'?\r\n        u_short ip_len;                 /* total length */\r\n        ^\r\n/usr/include/netinet/ip.h:62:2: error: unknown type name 'u_short'; did you mean 'short'?\r\n        u_short ip_id;                  /* identification */\r\n        ^\r\n/usr/include/netinet/ip.h:63:2: error: unknown type name 'u_short'; did you mean 'short'?\r\n        u_short ip_off;                 /* fragment offset field */\r\n        ^\r\n/usr/include/netinet/ip.h:68:2: error: unknown type name 'u_char'; did you mean 'char'?\r\n        u_char  ip_ttl;                 /* time to live */\r\n        ^\r\n/usr/include/netinet/ip.h:69:2: error: unknown type name 'u_char'; did you mean 'char'?\r\n        u_char  ip_p;                   /* protocol */\r\n        ^\r\n/usr/include/netinet/ip.h:70:2: error: unknown type name 'u_short'; did you mean 'short'?\r\n        u_short ip_sum;                 /* checksum */\r\n        ^\r\n/usr/include/netinet/ip.h:71:17: error: field has incomplete type 'struct in_addr'\r\n        struct  in_addr ip_src,ip_dst;  /* source and dest address */\r\n                        ^\r\n/usr/include/netinet/ip.h:71:9: note: forward declaration of 'in_addr'\r\n        struct  in_addr ip_src,ip_dst;  /* source and dest address */\r\n                ^\r\n/usr/include/netinet/ip.h:71:24: error: field has incomplete type 'struct in_addr'\r\n        struct  in_addr ip_src,ip_dst;  /* source and dest address */\r\n                               ^\r\n/usr/include/netinet/ip.h:71:9: note: forward declaration of 'in_addr'\r\n        struct  in_addr ip_src,ip_dst;  /* source and dest address */\r\n                ^\r\n/usr/include/netinet/ip.h:174:2: error: unknown type name 'u_char'; did you mean 'char'?\r\n        u_char  ipt_code;               /* IPOPT_TS */\r\n        ^\r\n/usr/include/netinet/ip.h:175:2: error: unknown type name 'u_char'; did you mean 'char'?\r\n        u_char  ipt_len;                /* size of structure (variable) */\r\n        ^\r\n/usr/include/netinet/ip.h:176:2: error: unknown type name 'u_char'; did you mean 'char'?\r\n        u_char  ipt_ptr;                /* index of current entry */\r\n        ^\r\n/usr/include/netinet/ip.h:178:2: error: unknown type name 'u_char'; did you mean 'char'?\r\n        u_char  ipt_flg:4,              /* flags, see below */\r\n        ^\r\n/usr/include/netinet/ip.h:188:19: error: field has incomplete type 'struct in_addr'\r\n                        struct in_addr ipt_addr;\r\n                                       ^\r\n/usr/include/netinet/ip.h:71:9: note: forward declaration of 'in_addr'\r\n        struct  in_addr ip_src,ip_dst;  /* source and dest address */\r\n                ^\r\n/usr/include/netinet/ip.h:223:17: error: field has incomplete type 'struct in_addr'\r\n        struct  in_addr ippseudo_src;   /* source internet address */\r\n                        ^\r\n/usr/include/netinet/ip.h:71:9: note: forward declaration of 'in_addr'\r\n        struct  in_addr ip_src,ip_dst;  /* source and dest address */\r\n                ^\r\n/usr/include/netinet/ip.h:224:17: error: field has incomplete type 'struct in_addr'\r\n        struct  in_addr ippseudo_dst;   /* destination internet address */\r\n                        ^\r\n/usr/include/netinet/ip.h:71:9: note: forward declaration of 'in_addr'\r\n        struct  in_addr ip_src,ip_dst;  /* source and dest address */\r\n                ^\r\n/usr/include/netinet/ip.h:225:2: error: unknown type name 'u_char'; did you mean 'char'?\r\n        u_char          ippseudo_pad;   /* pad, must be zero */\r\n        ^\r\n/usr/include/netinet/ip.h:226:2: error: unknown type name 'u_char'; did you mean 'char'?\r\n        u_char          ippseudo_p;     /* protocol */\r\n        ^\r\nfatal error: too many errors emitted, stopping now [-ferror-limit=]\r\n20 errors generated.\r\ngmake[2]: *** [Makefile:8866: libbitcoin_util_a-randomenv.o] Error 1\r\ngmake[2]: Leaving directory '/tmp/cirrus-ci-build/src'\r\ngmake[1]: *** [Makefile:14135: install-recursive] Error 1\r\ngmake[1]: Leaving directory '/tmp/cirrus-ci-build/src'\r\ngmake: *** [Makefile:774: install-recursive] Error 1\r\nExit status: 2\r\n```\r\n\r\n</details>",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-547108271",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17270"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2749969388,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjc0OTk2OTM4OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2749969388",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-28T20:31:39Z"
    },
    {
      "event": "commented",
      "id": 547139733,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0NzEzOTczMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/547139733",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-28T20:49:46Z",
      "updated_at": "2019-10-28T20:49:46Z",
      "author_association": "MEMBER",
      "body": "new build :pray: https://cirrus-ci.com/task/6286311933083648",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-547139733",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17270"
    },
    {
      "event": "commented",
      "id": 547146948,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0NzE0Njk0OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/547146948",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-28T21:09:19Z",
      "updated_at": "2019-10-28T21:09:19Z",
      "author_association": "MEMBER",
      "body": "@MarcoFalke Hmm, \"checking whether sysctlbyname is declared... no\". Does FreeBSD not have `sysctlbyname`?",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-547146948",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17270"
    },
    {
      "event": "mentioned",
      "id": 2750077138,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mjc1MDA3NzEzOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2750077138",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-28T21:09:22Z"
    },
    {
      "event": "subscribed",
      "id": 2750077141,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI3NTAwNzcxNDE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2750077141",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-28T21:09:22Z"
    },
    {
      "event": "commented",
      "id": 547170020,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0NzE3MDAyMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/547170020",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-28T22:19:18Z",
      "updated_at": "2019-10-28T22:19:18Z",
      "author_association": "MEMBER",
      "body": "> MarcoFalke Hmm, \"checking whether sysctlbyname is declared... no\". Does FreeBSD not have sysctlbyname?\r\n\r\nIt does, looks like you'll just need to include `sys/types.h` as well. See the [sysctlbyname docs](http://nixdoc.net/man-pages/FreeBSD/man3/sysctlbyname.3.html).\r\n\r\nAfter including `sys/types.h`I've tested using `12.0-RELEASE-p6` and see `sysctlbyname is declared... yes`.",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-547170020",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17270"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2750291220,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjc1MDI5MTIyMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2750291220",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-28T22:41:03Z"
    },
    {
      "event": "commented",
      "id": 547424674,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0NzQyNDY3NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/547424674",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-29T13:40:53Z",
      "updated_at": "2019-10-29T13:40:53Z",
      "author_association": "MEMBER",
      "body": "New build: https://cirrus-ci.com/task/5389706841292800",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-547424674",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17270"
    },
    {
      "event": "commented",
      "id": 547497557,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0NzQ5NzU1Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/547497557",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-29T16:02:30Z",
      "updated_at": "2019-10-29T16:02:30Z",
      "author_association": "MEMBER",
      "body": "Concept ACK. I have to review more closely, but how do we detect situations \"where system entropy is somehow broken\"? Are these sources now unconditionally rolled into our seeding process?",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-547497557",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17270"
    },
    {
      "event": "commented",
      "id": 547499248,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0NzQ5OTI0OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/547499248",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-29T16:05:26Z",
      "updated_at": "2019-10-29T17:05:03Z",
      "author_association": "MEMBER",
      "body": "@jamesob They're undetectable in general.\n\nTo clarify: I mean situations where system entropy is broken, for example because /dev/urandum is initialized to just 2^32 possible states and nothing new is fed into it.  An attacker who knows this could predict the random numbers you're going to generate, by simply looping over all 2^32 possibilities and comparing them with your output.\n\nThis is generally not detectable, unless it's a very extreme case (with no entropy whatsoever, say, and all reads from /dev/urandom or similar produce the same output). There is also not anything we can do to fix it; it's a terrible bug if it happens, but fixing it requires discovering and fixing the root cause.\n\nWhat this PR does is add in a bunch of environment data (e.g. interrupt statistics, resource usage statistics, pids, ...) that would make the situation slightly less bad in such a case - perhaps enough to make it non-attackable. But it's not a fix.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-547499248",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17270"
    },
    {
      "event": "mentioned",
      "id": 2752793887,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mjc1Mjc5Mzg4Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2752793887",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-29T16:05:30Z"
    },
    {
      "event": "subscribed",
      "id": 2752793892,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI3NTI3OTM4OTI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2752793892",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-29T16:05:30Z"
    },
    {
      "event": "commented",
      "id": 547538883,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0NzUzODg4Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/547538883",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-29T17:27:12Z",
      "updated_at": "2019-10-29T17:27:12Z",
      "author_association": "MEMBER",
      "body": "For obviously broken cases (e.g. the random number generator returns a constant) it is possible to detect it with automated tools that apply heuristics such as those described in https://web.archive.org/web/20110602194701/http://users.eecs.northwestern.edu/~nickle/310/2010/headRuns.pdf . However, these tools can only hint at potential problems and never certify correctness. See https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-22r1a.pdf for an example of such a tool. That tool only works for long sequences, so it doesn't seem applicable to the sources added here... Not to mention the randomness sources added in this pull request are non-cryptographic, so any slightly sane tool would immediately yell at them.",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-547538883",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17270"
    },
    {
      "event": "reviewed",
      "id": 308673063,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzA4NjczMDYz",
      "url": null,
      "actor": null,
      "commit_id": "35cfbf75871da0833c6bdd32a9ccc0114506de01",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Code review ACK on the move-only stuff up to  35cfbf7 `Move cpuid code from random & sha256 to compat/cpuid`. Concept ACK on the followup commits that add more sources (5a078e2);  looks sane, but not sure how to review.\r\n\r\nI'm able to run the test suite on macOS 10.15 (using `MACOSX_DEPLOYMENT_TARGET=10.14` to avoid https://github.com/bitcoin-core/secp256k1/issues/674).",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#pullrequestreview-308673063",
      "submitted_at": "2019-10-29T17:29:37Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2753159930,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjc1MzE1OTkzMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2753159930",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-29T17:41:59Z"
    },
    {
      "event": "commented",
      "id": 547596533,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0NzU5NjUzMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/547596533",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-29T19:42:46Z",
      "updated_at": "2019-10-29T21:49:03Z",
      "author_association": "MEMBER",
      "body": "A bunch of updates over the past days:\r\n* Cherry-picked https://github.com/bitcoin/bitcoin/commit/770cd9640e8b38d3456527bdf3d84b589cbd3418\r\n* Added a moveonly commit to merge the cpuid code in random and crypto/sha256, making it reusable for randomenv.\r\n* Added a commit to use `getauxval` on Linux.\r\n* Added a commit to use `sysctlbyname` on BSD/MacOS.\r\n* Added a commit to make sure dynamic env seeders do not run more than once per minute, and added a scheduled task to make sure they do get run occasionally.\r\n* Added a commit to fix a bug in the perfmon seeder (now that it can be called from multiple threads, it may need an atomic to track the previous run time).\r\n",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-547596533",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17270"
    },
    {
      "event": "commented",
      "id": 547619465,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0NzYxOTQ2NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/547619465",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-29T20:40:31Z",
      "updated_at": "2019-10-29T21:00:43Z",
      "author_association": "CONTRIBUTOR",
      "body": "A reminder that this sort of thing is important:  Some ryzen cpus rng returns a constant (and success), and in default configs linux relies on it for many purposes (I think, /dev/random in current default kernel configs mostly manages to dodge the over-reliance, but many other things do-- so it's a narrow miss.)\r\n\r\nhttps://arstechnica.com/gadgets/2019/10/how-a-months-old-amd-microcode-bug-destroyed-my-weekend/",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-547619465",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17270"
    },
    {
      "event": "commented",
      "id": 547901395,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0NzkwMTM5NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/547901395",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-30T13:26:10Z",
      "updated_at": "2019-10-30T13:26:10Z",
      "author_association": "MEMBER",
      "body": "Travis error on mingw:\r\n```\r\nrandomenv.cpp: In function ‘void {anonymous}::RandAddSeedPerfmon(CSHA512&)’:\r\nrandomenv.cpp:63:33: error: variable ‘std::atomic<long long int> last_perfmon’ has initializer but incomplete type\r\n     static std::atomic<int64_t> last_perfmon{0};\r\n                                 ^~~~~~~~~~~~\r\n```",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-547901395",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17270"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2757477049,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjc1NzQ3NzA0OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2757477049",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-30T20:07:21Z"
    },
    {
      "event": "reviewed",
      "id": 309491906,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzA5NDkxOTA2",
      "url": null,
      "actor": null,
      "commit_id": "ad09ad707e0ed6e3a537e1a204843792e5d06108",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#pullrequestreview-309491906",
      "submitted_at": "2019-10-30T20:15:25Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2757930810,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjc1NzkzMDgxMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2757930810",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-30T23:01:17Z"
    },
    {
      "event": "reviewed",
      "id": 309967223,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzA5OTY3MjIz",
      "url": null,
      "actor": null,
      "commit_id": "8a27be0fb0065d897d4e55a4f7367d54f8914d77",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#pullrequestreview-309967223",
      "submitted_at": "2019-10-31T15:24:34Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270"
    },
    {
      "event": "reviewed",
      "id": 309949749,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzA5OTQ5NzQ5",
      "url": null,
      "actor": null,
      "commit_id": "8a27be0fb0065d897d4e55a4f7367d54f8914d77",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK\r\n\r\n`sysctlbyname` isn't being picked up on OpenBSD (works on macOS and FreeBSD). Will investigate.\r\n\r\nI've pushed some WIP review notes up to https://github.com/fanquake/bitcoin/tree/17270_annotated.",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#pullrequestreview-309949749",
      "submitted_at": "2019-10-31T15:48:22Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270"
    },
    {
      "event": "commented",
      "id": 548513791,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0ODUxMzc5MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/548513791",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-31T18:38:18Z",
      "updated_at": "2019-10-31T18:38:18Z",
      "author_association": "MEMBER",
      "body": "> sysctlbyname isn't being picked up on OpenBSD (works on macOS and FreeBSD). Will investigate.\r\n\r\nLooks like it doesn't actually exist on OpenBSD. It only has [`sysctl`](https://man.openbsd.org/OpenBSD-6.6/sysctl.2). On OpenBSD 6.6:\r\n```bash\r\nbazinga# cat sysctl.h | grep sysctlbyname\r\nbazinga# cat sysctl.h | grep \"sysctl(\"\r\n * pairs to be used by sysctl(1) in manipulating the subsystem.\r\n * aggregated into an array in debug_sysctl(), so that it can\r\nint kern_sysctl(int *, u_int, void *, size_t *, void *, size_t,\r\nint hw_sysctl(int *, u_int, void *, size_t *, void *, size_t,\r\n< trimmed >\r\nint mpls_sysctl(int *, u_int, void *, size_t *, void *, size_t);\r\nint\tsysctl(const int *, u_int, void *, size_t *, void *, size_t);\r\n```",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-548513791",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17270"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2761003093,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjc2MTAwMzA5Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2761003093",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-31T18:44:47Z"
    },
    {
      "event": "commented",
      "id": 548517871,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0ODUxNzg3MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/548517871",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-31T18:48:28Z",
      "updated_at": "2019-10-31T18:50:08Z",
      "author_association": "MEMBER",
      "body": "Addressed the comments above (AT_RANDOM gives a pointer, removed /etc/hostconfig, added a comment that not all sysctls are available on every system).\r\n\r\nAlso added:\r\n* Added more clocks (they're gathered once a minute, some redundancy won't hurt).\r\n* Improved the CPUID code (also adds extended leaves now)\r\n* Added compiler version string (`__VERSION__`).\r\n* Added Bitcoin Core version information (`CLIENT_VERSION`, `CLIENT_NAME`, `CLIENT_BUILD`).",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-548517871",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17270"
    },
    {
      "event": "commented",
      "id": 548518085,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0ODUxODA4NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/548518085",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-31T18:49:03Z",
      "updated_at": "2019-10-31T18:49:03Z",
      "author_association": "MEMBER",
      "body": "@fanquake Ok, annoying. Perhaps that means we should use sysctl instead of sysctlbyname.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-548518085",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17270"
    },
    {
      "event": "mentioned",
      "id": 2761016109,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mjc2MTAxNjEwOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2761016109",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-31T18:49:03Z"
    },
    {
      "event": "subscribed",
      "id": 2761016113,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI3NjEwMTYxMTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2761016113",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-31T18:49:03Z"
    },
    {
      "event": "commented",
      "id": 548749200,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0ODc0OTIwMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/548749200",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-01T10:59:50Z",
      "updated_at": "2019-11-01T11:00:22Z",
      "author_association": "MEMBER",
      "body": "Changes now look good to me. Tested on Linux RISC-V 64 bit w/ no issues.",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-548749200",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17270"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2764679467,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjc2NDY3OTQ2Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2764679467",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-01T22:48:46Z"
    },
    {
      "event": "commented",
      "id": 548976525,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0ODk3NjUyNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/548976525",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-01T22:51:45Z",
      "updated_at": "2019-11-01T22:51:45Z",
      "author_association": "MEMBER",
      "body": "Replaced the use of `sysctlbyname` by `sysctl`; it's less extensive and needs more code, but likely supports more systems.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-548976525",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17270"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2764704027,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjc2NDcwNDAyNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2764704027",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-01T23:06:37Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2764744200,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjc2NDc0NDIwMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2764744200",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-01T23:38:15Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2764772348,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjc2NDc3MjM0OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2764772348",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-02T00:03:16Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2764783121,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjc2NDc4MzEyMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2764783121",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-02T00:12:19Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2764809605,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjc2NDgwOTYwNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2764809605",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-02T00:40:25Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2764831837,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjc2NDgzMTgzNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2764831837",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-02T01:09:46Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2764846090,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjc2NDg0NjA5MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2764846090",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-02T01:30:38Z"
    },
    {
      "event": "reviewed",
      "id": 311595893,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzExNTk1ODkz",
      "url": null,
      "actor": null,
      "commit_id": "d78a49906f39688b41bc36869fc91665cfbf8a21",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#pullrequestreview-311595893",
      "submitted_at": "2019-11-05T09:26:13Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270"
    },
    {
      "event": "reviewed",
      "id": 311596721,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzExNTk2NzIx",
      "url": null,
      "actor": null,
      "commit_id": "d78a49906f39688b41bc36869fc91665cfbf8a21",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#pullrequestreview-311596721",
      "submitted_at": "2019-11-05T09:27:31Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270"
    },
    {
      "event": "commented",
      "id": 549740513,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0OTc0MDUxMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/549740513",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-05T09:32:53Z",
      "updated_at": "2019-11-05T09:34:29Z",
      "author_association": "MEMBER",
      "body": "it's pretty hard to verify that this is doing anything, at runtime; it would be too much hassle to keep track of everything that is hashed, but it would be nice to have (optionally enabled. category RAND?) summarizing debug log messages like;\r\n`N bytes of static environment data added to random state`\r\n`N bytes of dynamic environment data added to random state`",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-549740513",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17270"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2772581730,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjc3MjU4MTczMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2772581730",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-05T19:00:44Z"
    },
    {
      "event": "reviewed",
      "id": 312105131,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzEyMTA1MTMx",
      "url": null,
      "actor": null,
      "commit_id": "95f1642930b0fe1156bc9c7bf9ecadceef9426af",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "narula",
        "id": 177646,
        "node_id": "MDQ6VXNlcjE3NzY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/177646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/narula",
        "html_url": "https://github.com/narula",
        "followers_url": "https://api.github.com/users/narula/followers",
        "following_url": "https://api.github.com/users/narula/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/narula/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/narula/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/narula/subscriptions",
        "organizations_url": "https://api.github.com/users/narula/orgs",
        "repos_url": "https://api.github.com/users/narula/repos",
        "events_url": "https://api.github.com/users/narula/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/narula/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#pullrequestreview-312105131",
      "submitted_at": "2019-11-05T23:10:07Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2773362889,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjc3MzM2Mjg4OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2773362889",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-05T23:18:33Z"
    },
    {
      "event": "commented",
      "id": 550067759,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU1MDA2Nzc1OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/550067759",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-05T23:19:06Z",
      "updated_at": "2019-11-05T23:19:06Z",
      "author_association": "MEMBER",
      "body": "@laanwj I've added a commit that logs the number of bytes gathered.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-550067759",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17270"
    },
    {
      "event": "mentioned",
      "id": 2773364243,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mjc3MzM2NDI0Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2773364243",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-05T23:19:07Z"
    },
    {
      "event": "subscribed",
      "id": 2773364244,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI3NzMzNjQyNDQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2773364244",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-05T23:19:07Z"
    },
    {
      "event": "reviewed",
      "id": 312119100,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzEyMTE5MTAw",
      "url": null,
      "actor": null,
      "commit_id": "f14cd4197677729491bb5fe6110904531605092b",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "madars",
        "id": 1747924,
        "node_id": "MDQ6VXNlcjE3NDc5MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1747924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/madars",
        "html_url": "https://github.com/madars",
        "followers_url": "https://api.github.com/users/madars/followers",
        "following_url": "https://api.github.com/users/madars/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/madars/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/madars/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/madars/subscriptions",
        "organizations_url": "https://api.github.com/users/madars/orgs",
        "repos_url": "https://api.github.com/users/madars/repos",
        "events_url": "https://api.github.com/users/madars/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/madars/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#pullrequestreview-312119100",
      "submitted_at": "2019-11-05T23:49:37Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2773483865,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjc3MzQ4Mzg2NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2773483865",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-06T00:16:27Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2773486250,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjc3MzQ4NjI1MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2773486250",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-06T00:17:35Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2773507799,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjc3MzUwNzc5OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2773507799",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-06T00:28:07Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2777388718,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjc3NzM4ODcxOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2777388718",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-07T00:46:23Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2780150598,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjc4MDE1MDU5OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2780150598",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-07T17:12:21Z"
    },
    {
      "event": "added_to_project",
      "id": 2780515347,
      "node_id": "MDE5OkFkZGVkVG9Qcm9qZWN0RXZlbnQyNzgwNTE1MzQ3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2780515347",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-07T19:11:56Z",
      "project_card": {
        "id": 28903396,
        "url": "https://api.github.com/projects/columns/cards/28903396",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "commented",
      "id": 552212368,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU1MjIxMjM2OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/552212368",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-10T16:52:59Z",
      "updated_at": "2019-11-10T16:54:21Z",
      "author_association": "MEMBER",
      "body": "Tested on a few different platforms;\r\n\r\nFreeBSD x86_64:\r\n```\r\n2019-11-10T13:02:15Z Feeding 66012 of dynamic environment data into RNG\r\n2019-11-10T13:02:15Z Feeding 10350 bytes of static environment data into RNG\r\n```\r\nLinux x86_64 VM:\r\n```\r\n2019-11-10T15:33:02Z Feeding 16094 of dynamic environment data into RNG\r\n2019-11-10T15:33:02Z Feeding 14944 bytes of static environment data into RNG\r\n```\r\nLinux aarch64:\r\n```\r\n2019-11-10T16:18:13Z Feeding 11043 of dynamic environment data into RNG\r\n2019-11-10T16:18:13Z Feeding 7073 bytes of static environment data into RNG\r\n```\r\nLinux arm32:\r\n```\r\n2019-11-10T15:52:06Z Feeding 10921 of dynamic environment data into RNG\r\n2019-11-10T15:52:06Z Feeding 8906 bytes of static environment data into RNG\r\n```\r\nLinux riscv64:\r\n```\r\n2019-11-10T16:50:38Z Feeding 10389 of dynamic environment data into RNG\r\n2019-11-10T16:50:38Z Feeding 6833 bytes of static environment data into RNG\r\n```\r\n\r\nNew compile warning (gcc Linux):\r\n```\r\nIn file included from randomenv.cpp:50:\r\n/usr/include/sys/sysctl.h:21:2: warning: #warning \"The <sys/sysctl.h> header is deprecated and will be removed.\" [-Wcpp]\r\n   21 | #warning \"The <sys/sysctl.h> header is deprecated and will be removed.\"\r\n      |  ^~~~~~~\r\n```\r\nLooks this was a recent libc/kernel change (http://patches-tcwg.linaro.org/patch/19443/). I don't think the intent is to use sysctl on Linux (it already reads `/proc` directly, which is what they suggest instead), so we might want to prevent its detection there somehow.\r\n\r\n(omeone might want to check on a musl-libc based system, all of these Linux is glibc based)",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-552212368",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17270"
    },
    {
      "event": "commented",
      "id": 552225553,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU1MjIyNTU1Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/552225553",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-10T19:29:37Z",
      "updated_at": "2019-11-10T19:29:37Z",
      "author_association": "MEMBER",
      "body": "Added a commit to always avoids sysctl on Linux.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-552225553",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17270"
    },
    {
      "event": "reviewed",
      "id": 315449831,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzE1NDQ5ODMx",
      "url": null,
      "actor": null,
      "commit_id": "1d1200f6b2174896f55ed4509eb7e412cacd4e7d",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#pullrequestreview-315449831",
      "submitted_at": "2019-11-12T10:58:28Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270"
    },
    {
      "event": "reviewed",
      "id": 315707820,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzE1NzA3ODIw",
      "url": null,
      "actor": null,
      "commit_id": "1d1200f6b2174896f55ed4509eb7e412cacd4e7d",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Awesome work! One real comment, but otherwise looks good.",
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#pullrequestreview-315707820",
      "submitted_at": "2019-11-12T18:34:46Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNTFiYWUxYTVhNGZhOGVmNzgyNWRkMWJiMDllM2Y0N2Y5NmQ3YTVh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b51bae1a5a4fa8ef7825dd1bb09e3f47f96d7a5a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b51bae1a5a4fa8ef7825dd1bb09e3f47f96d7a5a",
      "tree": {
        "sha": "bd08df6d431f6f5bc3578cb95e50e75ead3510a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bd08df6d431f6f5bc3578cb95e50e75ead3510a5"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/270616228bc9a3856a0a82dea26ac3480b7585cd",
          "sha": "270616228bc9a3856a0a82dea26ac3480b7585cd",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/270616228bc9a3856a0a82dea26ac3480b7585cd"
        }
      ],
      "message": "doc: minor corrections in random.cpp\n\nThis should have been part of #17151.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-11-12T22:50:44Z"
      },
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-10-26T12:05:59Z"
      },
      "sha": "b51bae1a5a4fa8ef7825dd1bb09e3f47f96d7a5a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZWEzOTAyMDE1MTg1YWRjODhhZGJkMDMxZDkxOWY5MWJjODQ0ZmQ3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cea3902015185adc88adbd031d919f91bc844fd7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/cea3902015185adc88adbd031d919f91bc844fd7",
      "tree": {
        "sha": "845d407ac3c2c00364ba64c12896ab927c9421b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/845d407ac3c2c00364ba64c12896ab927c9421b9"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b51bae1a5a4fa8ef7825dd1bb09e3f47f96d7a5a",
          "sha": "b51bae1a5a4fa8ef7825dd1bb09e3f47f96d7a5a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b51bae1a5a4fa8ef7825dd1bb09e3f47f96d7a5a"
        }
      ],
      "message": "[MOVEONLY] Move perfmon data gathering to new randomenv module",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-11-12T22:50:44Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-10-26T19:20:12Z"
      },
      "sha": "cea3902015185adc88adbd031d919f91bc844fd7"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MjNjNzk2NjY3NzBiMzBjY2U5Zjk2MmJlZDVlY2U4Y2M3ZDc0NTgw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/723c79666770b30cce9f962bed5ece8cc7d74580",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/723c79666770b30cce9f962bed5ece8cc7d74580",
      "tree": {
        "sha": "b1dbaecda34a61030ede89845bcb271fb4687277",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b1dbaecda34a61030ede89845bcb271fb4687277"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cea3902015185adc88adbd031d919f91bc844fd7",
          "sha": "cea3902015185adc88adbd031d919f91bc844fd7",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/cea3902015185adc88adbd031d919f91bc844fd7"
        }
      ],
      "message": "[MOVEONLY] Move cpuid code from random & sha256 to compat/cpuid",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-11-12T22:50:44Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-10-27T19:52:31Z"
      },
      "sha": "723c79666770b30cce9f962bed5ece8cc7d74580"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMmEyNjJhNzhjM2JjYzRkNWUxMzYxMmFiMDIxNDg3NGFiZTE1ZGUw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c2a262a78c3bcc4d5e13612ab0214874abe15de0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c2a262a78c3bcc4d5e13612ab0214874abe15de0",
      "tree": {
        "sha": "cc91016fcd06686bd9af06f21b78f49737784bcb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cc91016fcd06686bd9af06f21b78f49737784bcb"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/723c79666770b30cce9f962bed5ece8cc7d74580",
          "sha": "723c79666770b30cce9f962bed5ece8cc7d74580",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/723c79666770b30cce9f962bed5ece8cc7d74580"
        }
      ],
      "message": "Seed randomness with process id / thread id / various clocks\n\nThis sort of data is also used by OpenSSL.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-11-12T22:50:44Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-10-27T00:14:21Z"
      },
      "sha": "c2a262a78c3bcc4d5e13612ab0214874abe15de0"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2793296160,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjc5MzI5NjE2MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2793296160",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-12T22:51:15Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNTU0YzFiODFiYjhjNDBlMTk4OTAyNWM2ZjE4ZTc5MzU3MjBiMTU2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2554c1b81bb8c40e1989025c6f18e7935720b156",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2554c1b81bb8c40e1989025c6f18e7935720b156",
      "tree": {
        "sha": "86dc2f698d86ed556c2fa0ac0f141dfde2f40b23",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/86dc2f698d86ed556c2fa0ac0f141dfde2f40b23"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c2a262a78c3bcc4d5e13612ab0214874abe15de0",
          "sha": "c2a262a78c3bcc4d5e13612ab0214874abe15de0",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c2a262a78c3bcc4d5e13612ab0214874abe15de0"
        }
      ],
      "message": "Gather additional entropy from the environment\n\nThis based on code by Gregory Maxwell.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-11-12T23:24:02Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-10-27T01:05:10Z"
      },
      "sha": "2554c1b81bb8c40e1989025c6f18e7935720b156"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzphODFjNDk0YjRjOWE4YzJmMWEzMTlhMDMzNzU4MjZmMTI4NjM3MDZm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a81c494b4c9a8c2f1a319a03375826f12863706f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a81c494b4c9a8c2f1a319a03375826f12863706f",
      "tree": {
        "sha": "89c230f261ae7c7ab3125d53b61ae69d945e77e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/89c230f261ae7c7ab3125d53b61ae69d945e77e3"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2554c1b81bb8c40e1989025c6f18e7935720b156",
          "sha": "2554c1b81bb8c40e1989025c6f18e7935720b156",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2554c1b81bb8c40e1989025c6f18e7935720b156"
        }
      ],
      "message": "Use sysctl for seeding on MacOS/BSD",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-11-12T23:35:22Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-10-28T17:42:25Z"
      },
      "sha": "a81c494b4c9a8c2f1a319a03375826f12863706f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMTc5M2VhMjJlMTI5OGZhN2QzYjQ0YTViNmQyMDgzMDI0OGQ4Y2Y0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/11793ea22e1298fa7d3b44a5b6d20830248d8cf4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/11793ea22e1298fa7d3b44a5b6d20830248d8cf4",
      "tree": {
        "sha": "a2966747e094a86d3760314b0da81d3b4a9b6aff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a2966747e094a86d3760314b0da81d3b4a9b6aff"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a81c494b4c9a8c2f1a319a03375826f12863706f",
          "sha": "a81c494b4c9a8c2f1a319a03375826f12863706f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/a81c494b4c9a8c2f1a319a03375826f12863706f"
        }
      ],
      "message": "Feed CPUID data into RNG",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-11-12T23:35:26Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-10-27T01:17:20Z"
      },
      "sha": "11793ea22e1298fa7d3b44a5b6d20830248d8cf4"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ODNiOTQyOTJlODk1ODdlNWFiNDBhMzBiOGE5MGUyZjU2ZTg0N2Yz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/483b94292e89587e5ab40a30b8a90e2f56e847f3",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/483b94292e89587e5ab40a30b8a90e2f56e847f3",
      "tree": {
        "sha": "cc2844001bfc7610bf08b807f51728a208981c0f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cc2844001bfc7610bf08b807f51728a208981c0f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/11793ea22e1298fa7d3b44a5b6d20830248d8cf4",
          "sha": "11793ea22e1298fa7d3b44a5b6d20830248d8cf4",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/11793ea22e1298fa7d3b44a5b6d20830248d8cf4"
        }
      ],
      "message": "Add information gathered through getauxval()\n\nSuggested by Wladimir van der Laan.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-11-12T23:35:26Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-10-27T19:36:05Z"
      },
      "sha": "483b94292e89587e5ab40a30b8a90e2f56e847f3"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNjFmMmJiMDc2ZDhmMTc4NDBhOGU3OWYxNTgzZDdmNmUzZTZkMDlh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d61f2bb076d8f17840a8e79f1583d7f6e3e6d09a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d61f2bb076d8f17840a8e79f1583d7f6e3e6d09a",
      "tree": {
        "sha": "e36bc22346ff81282bc46dffea7ba9313fc49e0f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e36bc22346ff81282bc46dffea7ba9313fc49e0f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/483b94292e89587e5ab40a30b8a90e2f56e847f3",
          "sha": "483b94292e89587e5ab40a30b8a90e2f56e847f3",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/483b94292e89587e5ab40a30b8a90e2f56e847f3"
        }
      ],
      "message": "Run background seeding periodically instead of unpredictably\n\n* Instead of calling RandAddSeedSleep anytime the scheduler goes\n  idle, call its replacement (RandAddSeedPeriodic) just once per\n  minute. This has better guarantees of actually being run, and\n  helps limit how frequently the dynamic env data is gathered.\n* Since this code runs once per minute regardless now, we no\n  longer need to keep track of the last time strengthening was\n  run; just do it always.\n* Make strengthening time context dependent (100 ms at startup,\n  10 ms once per minute afterwards).",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-11-12T23:35:26Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-10-29T18:55:59Z"
      },
      "sha": "d61f2bb076d8f17840a8e79f1583d7f6e3e6d09a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NGUxZTAyMmNlZGY2Nzc2YzVkZmZkNDg4Y2EyZTc2NmFkY2E1ZGMz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/64e1e022cedf6776c5dffd488ca2e766adca5dc3",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/64e1e022cedf6776c5dffd488ca2e766adca5dc3",
      "tree": {
        "sha": "9391261422d31946cf184a5fbb599649b48625aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9391261422d31946cf184a5fbb599649b48625aa"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d61f2bb076d8f17840a8e79f1583d7f6e3e6d09a",
          "sha": "d61f2bb076d8f17840a8e79f1583d7f6e3e6d09a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d61f2bb076d8f17840a8e79f1583d7f6e3e6d09a"
        }
      ],
      "message": "Use thread-safe atomic in perfmon seeder\n\nAlso switch to chrono based types.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-11-12T23:35:26Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-10-29T19:35:06Z"
      },
      "sha": "64e1e022cedf6776c5dffd488ca2e766adca5dc3"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMWMwMjc3NWFhNzRhMDYxMDgwOWFjNTRiYjI0MWRkYWQ2MWQyZDhj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d1c02775aa74a0610809ac54bb241ddad61d2d8c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d1c02775aa74a0610809ac54bb241ddad61d2d8c",
      "tree": {
        "sha": "13e7fe1e6c46f0870f0e308c72d7957717be95fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/13e7fe1e6c46f0870f0e308c72d7957717be95fe"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/64e1e022cedf6776c5dffd488ca2e766adca5dc3",
          "sha": "64e1e022cedf6776c5dffd488ca2e766adca5dc3",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/64e1e022cedf6776c5dffd488ca2e766adca5dc3"
        }
      ],
      "message": "Report amount of data gathered from environment",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-11-12T23:35:26Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-11-05T18:54:20Z"
      },
      "sha": "d1c02775aa74a0610809ac54bb241ddad61d2d8c"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2793399451,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjc5MzM5OTQ1MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2793399451",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-12T23:40:48Z"
    },
    {
      "event": "commented",
      "id": 553198817,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU1MzE5ODgxNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/553198817",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-13T01:44:24Z",
      "updated_at": "2019-11-13T01:44:24Z",
      "author_association": "MEMBER",
      "body": "utACK d1c02775aa74a0610809ac54bb241ddad61d2d8c. Certainly no longer measuring the time elapsed between a 1ms sleep (which got removed in the latest change) is a fair tradeoff for adding about 2 million other actually-higher-entropy bits :).",
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-553198817",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17270"
    },
    {
      "event": "commented",
      "id": 553677392,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU1MzY3NzM5Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/553677392",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-14T01:10:13Z",
      "updated_at": "2019-11-14T01:10:13Z",
      "author_association": "MEMBER",
      "body": "I've been testing d1c02775aa74a0610809ac54bb241ddad61d2d8c across various operating systems. Few logs for anyone who's interested. Will post a final review shortly.\r\n\r\n#### macOS 10.14.6\r\n```bash\r\n2019-11-13T18:24:03Z Feeding 1066350 bytes of environment data into RNG\r\n2019-11-13T18:25:03Z Feeding 216 bytes of dynamic environment data into RNG\r\n2019-11-13T18:26:03Z Feeding 216 bytes of dynamic environment data into RNG\r\n```\r\n\r\n#### OpenBSD 6.6\r\n```bash\r\n2019-11-13T19:21:17Z Feeding 9334 bytes of environment data into RNG\r\n2019-11-13T19:22:18Z Feeding 504 bytes of dynamic environment data into RNG\r\n2019-11-13T19:23:18Z Feeding 504 bytes of dynamic environment data into RNG\r\n```\r\n\r\n#### FreeBSD 12\r\n```bash\r\n2019-11-13T21:04:50Z Feeding 74253 bytes of environment data into RNG\r\n2019-11-13T21:05:51Z Feeding 66068 bytes of dynamic environment data into RNG\r\n2019-11-13T21:06:51Z Feeding 66068 bytes of dynamic environment data into RNG\r\n```\r\n\r\n#### Windows 10 WSL\r\n```bash\r\n2019-11-13T23:05:00Z Feeding 435111 bytes of environment data into RNG\r\n2019-11-13T23:06:00Z Feeding 48 bytes of dynamic environment data into RNG\r\n2019-11-13T23:07:00Z Feeding 48 bytes of dynamic environment data into RNG\r\n```\r\n\r\n#### Windows 10 MSVC\r\n```bash\r\n2019-11-13T23:16:08Z Feeding 378764 bytes of environment data into RNG\r\n2019-11-13T23:17:08Z Feeding 48 bytes of dynamic environment data into RNG\r\n2019-11-13T23:18:08Z Feeding 48 bytes of dynamic environment data into RNG\r\n```\r\n\r\n#### NetBSD 8.1\r\n```bash\r\n2019-11-13T23:50:05Z Feeding 35503 bytes of environment data into RNG\r\n2019-11-13T23:51:05Z Feeding 28268 bytes of dynamic environment data into RNG\r\n2019-11-13T23:52:05Z Feeding 28268 bytes of dynamic environment data into RNG\r\n```\r\n\r\n#### Alpine\r\n```bash\r\n2019-11-14T00:45:33Z Feeding 23631 bytes of environment data into RNG\r\n2019-11-14T00:46:33Z Feeding 14196 bytes of dynamic environment data into RNG\r\n2019-11-14T00:47:33Z Feeding 14206 bytes of dynamic environment data into RNG\r\n2019-11-14T00:48:33Z Feeding 14208 bytes of dynamic environment data into RNG\r\n2019-11-14T00:49:33Z Feeding 14211 bytes of dynamic environment data into RNG\r\n```\r\n\r\n#### Debian 10\r\n```bash\r\n2019-11-14T00:21:13Z Feeding 23714 bytes of environment data into RNG\r\n2019-11-14T00:22:13Z Feeding 13980 bytes of dynamic environment data into RNG\r\n2019-11-14T00:23:13Z Feeding 13983 bytes of dynamic environment data into RNG\r\n2019-11-14T00:24:13Z Feeding 13991 bytes of dynamic environment data into RNG\r\n2019-11-14T00:25:13Z Feeding 13988 bytes of dynamic environment data into RNG\r\n2019-11-14T00:26:13Z Feeding 13993 bytes of dynamic environment data into RNG\r\n2019-11-14T00:27:13Z Feeding 14024 bytes of dynamic environment data into RNG\r\n```",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-553677392",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17270"
    },
    {
      "event": "reviewed",
      "id": 316664778,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzE2NjY0Nzc4",
      "url": null,
      "actor": null,
      "commit_id": "d1c02775aa74a0610809ac54bb241ddad61d2d8c",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "I think the changes here should be sufficient that we can remove our OpenSSL usage (#17265). This is now likely doing above and beyond what (depends) OpenSSL was doing. I prefer the recent refactor to `RandAddPeriodic` and removing the RandAdd call from scheduler.cpp. I've done some sanity checking across various operating systems.",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#pullrequestreview-316664778",
      "submitted_at": "2019-11-14T01:58:46Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270"
    },
    {
      "event": "commented",
      "id": 554992585,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU1NDk5MjU4NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/554992585",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-18T12:21:21Z",
      "updated_at": "2019-11-18T12:21:21Z",
      "author_association": "MEMBER",
      "body": "ACK d1c02775aa74a0610809ac54bb241ddad61d2d8c\r\n\r\nI agree with @fanquake. I think this is good for merge. It has been tested on a wide range of platforms, and unarguably works.\r\n\r\nAdditional bits of entropy for specific arch and OS can be added later.",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-554992585",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17270"
    },
    {
      "event": "mentioned",
      "id": 2807306454,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjgwNzMwNjQ1NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2807306454",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-18T12:21:21Z"
    },
    {
      "event": "subscribed",
      "id": 2807306456,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI4MDczMDY0NTY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2807306456",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-18T12:21:21Z"
    },
    {
      "event": "referenced",
      "id": 2807344332,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI4MDczNDQzMzI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2807344332",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "0bb37e437e9cb4a29476edc9fa42f3e03c8bd797",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0bb37e437e9cb4a29476edc9fa42f3e03c8bd797",
      "created_at": "2019-11-18T12:33:55Z"
    },
    {
      "event": "merged",
      "id": 2807345041,
      "node_id": "MDExOk1lcmdlZEV2ZW50MjgwNzM0NTA0MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2807345041",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "d1c02775aa74a0610809ac54bb241ddad61d2d8c",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1c02775aa74a0610809ac54bb241ddad61d2d8c",
      "created_at": "2019-11-18T12:34:12Z"
    },
    {
      "event": "closed",
      "id": 2807345049,
      "node_id": "MDExOkNsb3NlZEV2ZW50MjgwNzM0NTA0OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2807345049",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-18T12:34:12Z"
    },
    {
      "event": "removed_from_project",
      "id": 2807395192,
      "node_id": "MDIzOlJlbW92ZWRGcm9tUHJvamVjdEV2ZW50MjgwNzM5NTE5Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2807395192",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-18T12:51:51Z",
      "project_card": {
        "id": 28903396,
        "url": "https://api.github.com/projects/columns/cards/28903396",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "referenced",
      "id": 2807940825,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI4MDc5NDA4MjU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2807940825",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "461e547877da0c04db69e067c923cc4540aab03a",
      "commit_url": "https://api.github.com/repos/fanquake/bitcoin/commits/461e547877da0c04db69e067c923cc4540aab03a",
      "created_at": "2019-11-18T15:25:04Z"
    },
    {
      "event": "referenced",
      "id": 2807940828,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI4MDc5NDA4Mjg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2807940828",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "55b2cb199c276781b6daa5438af2da57dea3ac52",
      "commit_url": "https://api.github.com/repos/fanquake/bitcoin/commits/55b2cb199c276781b6daa5438af2da57dea3ac52",
      "created_at": "2019-11-18T15:25:04Z"
    },
    {
      "event": "referenced",
      "id": 2809151143,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI4MDkxNTExNDM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2809151143",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "436bc5c466d0919c531fa8c26e925b9ab47e2650",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/436bc5c466d0919c531fa8c26e925b9ab47e2650",
      "created_at": "2019-11-18T21:24:33Z"
    },
    {
      "event": "referenced",
      "id": 2825240095,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI4MjUyNDAwOTU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2825240095",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "f6e42256fe8900ed90f9644906b77f97e1600952",
      "commit_url": "https://api.github.com/repos/laanwj/bitcoin/commits/f6e42256fe8900ed90f9644906b77f97e1600952",
      "created_at": "2019-11-23T09:31:19Z"
    },
    {
      "event": "referenced",
      "id": 2825873339,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI4MjU4NzMzMzk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2825873339",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "2eeacdfe44e5f5cbb240f92b3d7ddcdf5079dc3b",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2eeacdfe44e5f5cbb240f92b3d7ddcdf5079dc3b",
      "created_at": "2019-11-24T10:20:21Z"
    },
    {
      "event": "referenced",
      "id": 2826057459,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI4MjYwNTc0NTk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2826057459",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "7f69c42e6fc1ca645b8e5ecbbfed45b2703efacb",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/7f69c42e6fc1ca645b8e5ecbbfed45b2703efacb",
      "created_at": "2019-11-24T16:02:11Z"
    },
    {
      "event": "referenced",
      "id": 2826348559,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI4MjYzNDg1NTk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2826348559",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e6f167bfdfc056ced2064c7e21f8abbff6e3ff19",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6f167bfdfc056ced2064c7e21f8abbff6e3ff19",
      "created_at": "2019-11-25T00:10:15Z"
    },
    {
      "event": "referenced",
      "id": 2826449945,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI4MjY0NDk5NDU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2826449945",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "912a39b43946ca90c563c7cc331317469cc62885",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/912a39b43946ca90c563c7cc331317469cc62885",
      "created_at": "2019-11-25T01:55:18Z"
    },
    {
      "event": "referenced",
      "id": 2857972507,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI4NTc5NzI1MDc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2857972507",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "6fff333c9f00cf379562ed38c2599997f9821cfb",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fff333c9f00cf379562ed38c2599997f9821cfb",
      "created_at": "2019-12-05T14:15:02Z"
    },
    {
      "event": "referenced",
      "id": 2863070895,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI4NjMwNzA4OTU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2863070895",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "9189c75128f0c84024787d55bea43ca4ccc34dc0",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/9189c75128f0c84024787d55bea43ca4ccc34dc0",
      "created_at": "2019-12-06T23:44:32Z"
    },
    {
      "event": "referenced",
      "id": 3048156355,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMwNDgxNTYzNTU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3048156355",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "52a65504b1c73c59b6506a2af794806585876c33",
      "commit_url": "https://api.github.com/repos/luke-jr/bitcoin/commits/52a65504b1c73c59b6506a2af794806585876c33",
      "created_at": "2020-02-18T17:41:28Z"
    },
    {
      "event": "referenced",
      "id": 3048156893,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMwNDgxNTY4OTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3048156893",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "bdcfaa3318768ac6a901c859e4b83dcfc730e836",
      "commit_url": "https://api.github.com/repos/luke-jr/bitcoin/commits/bdcfaa3318768ac6a901c859e4b83dcfc730e836",
      "created_at": "2020-02-18T17:41:36Z"
    },
    {
      "event": "referenced",
      "id": 3083648826,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMwODM2NDg4MjY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3083648826",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "1a51cd1ac5a094c911d6cafb3f57ef0798d51570",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a51cd1ac5a094c911d6cafb3f57ef0798d51570",
      "created_at": "2020-02-28T21:52:06Z"
    },
    {
      "event": "referenced",
      "id": 3084328594,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMwODQzMjg1OTQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3084328594",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "639537df89858e89631e1f18fb7afb055e05a3ad",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/639537df89858e89631e1f18fb7afb055e05a3ad",
      "created_at": "2020-02-29T04:55:58Z"
    },
    {
      "event": "referenced",
      "id": 3244175897,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyNDQxNzU4OTc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3244175897",
      "actor": {
        "login": "HashUnlimited",
        "id": 26601261,
        "node_id": "MDQ6VXNlcjI2NjAxMjYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/26601261?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/HashUnlimited",
        "html_url": "https://github.com/HashUnlimited",
        "followers_url": "https://api.github.com/users/HashUnlimited/followers",
        "following_url": "https://api.github.com/users/HashUnlimited/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/HashUnlimited/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/HashUnlimited/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/HashUnlimited/subscriptions",
        "organizations_url": "https://api.github.com/users/HashUnlimited/orgs",
        "repos_url": "https://api.github.com/users/HashUnlimited/repos",
        "events_url": "https://api.github.com/users/HashUnlimited/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/HashUnlimited/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "7f9303bb8ff3cd94ca243557c73e363a55a9bc98",
      "commit_url": "https://api.github.com/repos/HashUnlimited/chaincoin/commits/7f9303bb8ff3cd94ca243557c73e363a55a9bc98",
      "created_at": "2020-04-17T12:28:27Z"
    },
    {
      "event": "referenced",
      "id": 3244175937,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyNDQxNzU5Mzc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3244175937",
      "actor": {
        "login": "HashUnlimited",
        "id": 26601261,
        "node_id": "MDQ6VXNlcjI2NjAxMjYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/26601261?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/HashUnlimited",
        "html_url": "https://github.com/HashUnlimited",
        "followers_url": "https://api.github.com/users/HashUnlimited/followers",
        "following_url": "https://api.github.com/users/HashUnlimited/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/HashUnlimited/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/HashUnlimited/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/HashUnlimited/subscriptions",
        "organizations_url": "https://api.github.com/users/HashUnlimited/orgs",
        "repos_url": "https://api.github.com/users/HashUnlimited/repos",
        "events_url": "https://api.github.com/users/HashUnlimited/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/HashUnlimited/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "ece4c4901ed04835abb599eb85449106bae323fa",
      "commit_url": "https://api.github.com/repos/HashUnlimited/chaincoin/commits/ece4c4901ed04835abb599eb85449106bae323fa",
      "created_at": "2020-04-17T12:28:27Z"
    },
    {
      "event": "referenced",
      "id": 3244175938,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyNDQxNzU5Mzg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3244175938",
      "actor": {
        "login": "HashUnlimited",
        "id": 26601261,
        "node_id": "MDQ6VXNlcjI2NjAxMjYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/26601261?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/HashUnlimited",
        "html_url": "https://github.com/HashUnlimited",
        "followers_url": "https://api.github.com/users/HashUnlimited/followers",
        "following_url": "https://api.github.com/users/HashUnlimited/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/HashUnlimited/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/HashUnlimited/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/HashUnlimited/subscriptions",
        "organizations_url": "https://api.github.com/users/HashUnlimited/orgs",
        "repos_url": "https://api.github.com/users/HashUnlimited/repos",
        "events_url": "https://api.github.com/users/HashUnlimited/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/HashUnlimited/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "f46cd876831c93c47724c80ab1aede046d690a0d",
      "commit_url": "https://api.github.com/repos/HashUnlimited/chaincoin/commits/f46cd876831c93c47724c80ab1aede046d690a0d",
      "created_at": "2020-04-17T12:28:27Z"
    },
    {
      "event": "referenced",
      "id": 3356245013,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMzNTYyNDUwMTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3356245013",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "48bfb8cc7afa2ffc59cdfee01be94fbb4ac98c90",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/48bfb8cc7afa2ffc59cdfee01be94fbb4ac98c90",
      "created_at": "2020-05-20T12:35:11Z"
    },
    {
      "event": "referenced",
      "id": 3360544896,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMzNjA1NDQ4OTY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3360544896",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "8726d6cac1ea84c97069b2fd455f6553d6507ea1",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/8726d6cac1ea84c97069b2fd455f6553d6507ea1",
      "created_at": "2020-05-21T12:50:08Z"
    },
    {
      "event": "referenced",
      "id": 3360699153,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMzNjA2OTkxNTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3360699153",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "180f05083c124b7977d5844360786116b755e7dc",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/180f05083c124b7977d5844360786116b755e7dc",
      "created_at": "2020-05-21T13:35:07Z"
    },
    {
      "event": "referenced",
      "id": 3360699156,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMzNjA2OTkxNTY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3360699156",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "df747e1aa4936525fe7725ffe7d3fd58cceeb295",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/df747e1aa4936525fe7725ffe7d3fd58cceeb295",
      "created_at": "2020-05-21T13:35:07Z"
    },
    {
      "event": "referenced",
      "id": 3360699160,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMzNjA2OTkxNjA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3360699160",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "9cb83a17b99300b5289b399882cf0ed4c56e8cfb",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/9cb83a17b99300b5289b399882cf0ed4c56e8cfb",
      "created_at": "2020-05-21T13:35:07Z"
    },
    {
      "event": "referenced",
      "id": 3362223035,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMzNjIyMjMwMzU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3362223035",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "d977136bf43362b38a5aeee96bf7780b985e425a",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/d977136bf43362b38a5aeee96bf7780b985e425a",
      "created_at": "2020-05-21T20:35:07Z"
    },
    {
      "event": "referenced",
      "id": 3364397366,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMzNjQzOTczNjY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3364397366",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "192d4bb47c3f6e8163768ad2511ec15f77d1ed55",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/192d4bb47c3f6e8163768ad2511ec15f77d1ed55",
      "created_at": "2020-05-22T11:50:09Z"
    },
    {
      "event": "referenced",
      "id": 3364397369,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMzNjQzOTczNjk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3364397369",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "05debbcdd0a2b86f6056caa1e21813489b6177e8",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/05debbcdd0a2b86f6056caa1e21813489b6177e8",
      "created_at": "2020-05-22T11:50:09Z"
    },
    {
      "event": "referenced",
      "id": 3364397376,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMzNjQzOTczNzY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3364397376",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "88aae1e0375629edc27f9dcc214562db68885bfa",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/88aae1e0375629edc27f9dcc214562db68885bfa",
      "created_at": "2020-05-22T11:50:09Z"
    },
    {
      "event": "referenced",
      "id": 3364397378,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMzNjQzOTczNzg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3364397378",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "5ff89a0754c2b09835b9df9843026918aaeb17ff",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/5ff89a0754c2b09835b9df9843026918aaeb17ff",
      "created_at": "2020-05-22T11:50:09Z"
    },
    {
      "event": "referenced",
      "id": 3364397381,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMzNjQzOTczODE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3364397381",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "fcd7977a3ecec4a7498e8529481d006f79db22fc",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/fcd7977a3ecec4a7498e8529481d006f79db22fc",
      "created_at": "2020-05-22T11:50:09Z"
    },
    {
      "event": "referenced",
      "id": 3660736525,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM2NjA3MzY1MjU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3660736525",
      "actor": {
        "login": "ftrader",
        "id": 16613123,
        "node_id": "MDQ6VXNlcjE2NjEzMTIz",
        "avatar_url": "https://avatars.githubusercontent.com/u/16613123?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ftrader",
        "html_url": "https://github.com/ftrader",
        "followers_url": "https://api.github.com/users/ftrader/followers",
        "following_url": "https://api.github.com/users/ftrader/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ftrader/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ftrader/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ftrader/subscriptions",
        "organizations_url": "https://api.github.com/users/ftrader/orgs",
        "repos_url": "https://api.github.com/users/ftrader/repos",
        "events_url": "https://api.github.com/users/ftrader/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ftrader/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "088155a5d64978d08646c4a7781fc57d0ec06dee",
      "commit_url": "https://api.github.com/repos/bitcoin-cash-node/bitcoin-cash-node/commits/088155a5d64978d08646c4a7781fc57d0ec06dee",
      "created_at": "2020-08-17T08:19:37Z"
    },
    {
      "event": "referenced",
      "id": 3980857374,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM5ODA4NTczNzQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3980857374",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "1b77769612bfefb4fdf0a03121e5cd9be356ae42",
      "commit_url": "https://api.github.com/repos/syscoin-core/syscoin/commits/1b77769612bfefb4fdf0a03121e5cd9be356ae42",
      "created_at": "2020-11-10T20:39:31Z"
    },
    {
      "event": "referenced",
      "id": 3980857607,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM5ODA4NTc2MDc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3980857607",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "c14e5d9cf91708ef5596c37e9f9ccc6b3777d68a",
      "commit_url": "https://api.github.com/repos/syscoin-core/syscoin/commits/c14e5d9cf91708ef5596c37e9f9ccc6b3777d68a",
      "created_at": "2020-11-10T20:39:34Z"
    },
    {
      "event": "referenced",
      "id": 3980857634,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM5ODA4NTc2MzQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3980857634",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "f5699796679ee9e7490acd80283deb69a89e0b42",
      "commit_url": "https://api.github.com/repos/syscoin-core/syscoin/commits/f5699796679ee9e7490acd80283deb69a89e0b42",
      "created_at": "2020-11-10T20:39:34Z"
    },
    {
      "event": "referenced",
      "id": 3980857795,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM5ODA4NTc3OTU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3980857795",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "23b220665485f01e4f0e7f630d2b3be5ba2d3691",
      "commit_url": "https://api.github.com/repos/syscoin-core/syscoin/commits/23b220665485f01e4f0e7f630d2b3be5ba2d3691",
      "created_at": "2020-11-10T20:39:37Z"
    },
    {
      "event": "referenced",
      "id": 3980858926,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM5ODA4NTg5MjY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3980858926",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "45b75873ecc4aba2a6a636bed3d8443c94082933",
      "commit_url": "https://api.github.com/repos/syscoin-core/syscoin/commits/45b75873ecc4aba2a6a636bed3d8443c94082933",
      "created_at": "2020-11-10T20:39:52Z"
    },
    {
      "event": "referenced",
      "id": 4518456872,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ1MTg0NTY4NzI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4518456872",
      "actor": {
        "login": "backpacker69",
        "id": 19201340,
        "node_id": "MDQ6VXNlcjE5MjAxMzQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19201340?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/backpacker69",
        "html_url": "https://github.com/backpacker69",
        "followers_url": "https://api.github.com/users/backpacker69/followers",
        "following_url": "https://api.github.com/users/backpacker69/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/backpacker69/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/backpacker69/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/backpacker69/subscriptions",
        "organizations_url": "https://api.github.com/users/backpacker69/orgs",
        "repos_url": "https://api.github.com/users/backpacker69/repos",
        "events_url": "https://api.github.com/users/backpacker69/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/backpacker69/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "7e08ff49c1808a4166d41ad80d09eb65562cdd2b",
      "commit_url": "https://api.github.com/repos/peercoin/peercoin/commits/7e08ff49c1808a4166d41ad80d09eb65562cdd2b",
      "created_at": "2021-03-28T19:23:24Z"
    },
    {
      "event": "referenced",
      "id": 4518456881,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ1MTg0NTY4ODE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4518456881",
      "actor": {
        "login": "backpacker69",
        "id": 19201340,
        "node_id": "MDQ6VXNlcjE5MjAxMzQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19201340?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/backpacker69",
        "html_url": "https://github.com/backpacker69",
        "followers_url": "https://api.github.com/users/backpacker69/followers",
        "following_url": "https://api.github.com/users/backpacker69/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/backpacker69/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/backpacker69/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/backpacker69/subscriptions",
        "organizations_url": "https://api.github.com/users/backpacker69/orgs",
        "repos_url": "https://api.github.com/users/backpacker69/repos",
        "events_url": "https://api.github.com/users/backpacker69/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/backpacker69/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "9787f54aef25829d2bcc180072632b7bb6342471",
      "commit_url": "https://api.github.com/repos/peercoin/peercoin/commits/9787f54aef25829d2bcc180072632b7bb6342471",
      "created_at": "2021-03-28T19:23:24Z"
    },
    {
      "event": "referenced",
      "id": 4518456883,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ1MTg0NTY4ODM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4518456883",
      "actor": {
        "login": "backpacker69",
        "id": 19201340,
        "node_id": "MDQ6VXNlcjE5MjAxMzQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19201340?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/backpacker69",
        "html_url": "https://github.com/backpacker69",
        "followers_url": "https://api.github.com/users/backpacker69/followers",
        "following_url": "https://api.github.com/users/backpacker69/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/backpacker69/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/backpacker69/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/backpacker69/subscriptions",
        "organizations_url": "https://api.github.com/users/backpacker69/orgs",
        "repos_url": "https://api.github.com/users/backpacker69/repos",
        "events_url": "https://api.github.com/users/backpacker69/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/backpacker69/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "94a4e59524faac34b144dbf4e6ba4f11e510f1cd",
      "commit_url": "https://api.github.com/repos/peercoin/peercoin/commits/94a4e59524faac34b144dbf4e6ba4f11e510f1cd",
      "created_at": "2021-03-28T19:23:24Z"
    },
    {
      "event": "referenced",
      "id": 4531824615,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ1MzE4MjQ2MTU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4531824615",
      "actor": {
        "login": "Fuzzbawls",
        "id": 7393257,
        "node_id": "MDQ6VXNlcjczOTMyNTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7393257?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fuzzbawls",
        "html_url": "https://github.com/Fuzzbawls",
        "followers_url": "https://api.github.com/users/Fuzzbawls/followers",
        "following_url": "https://api.github.com/users/Fuzzbawls/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fuzzbawls/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fuzzbawls/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fuzzbawls/subscriptions",
        "organizations_url": "https://api.github.com/users/Fuzzbawls/orgs",
        "repos_url": "https://api.github.com/users/Fuzzbawls/repos",
        "events_url": "https://api.github.com/users/Fuzzbawls/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fuzzbawls/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "f70e0c8437380206c596b34a4a65a37df2b9aef6",
      "commit_url": "https://api.github.com/repos/Fuzzbawls/PIVX/commits/f70e0c8437380206c596b34a4a65a37df2b9aef6",
      "created_at": "2021-03-31T04:03:43Z"
    },
    {
      "event": "referenced",
      "id": 4531824617,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ1MzE4MjQ2MTc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4531824617",
      "actor": {
        "login": "Fuzzbawls",
        "id": 7393257,
        "node_id": "MDQ6VXNlcjczOTMyNTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7393257?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fuzzbawls",
        "html_url": "https://github.com/Fuzzbawls",
        "followers_url": "https://api.github.com/users/Fuzzbawls/followers",
        "following_url": "https://api.github.com/users/Fuzzbawls/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fuzzbawls/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fuzzbawls/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fuzzbawls/subscriptions",
        "organizations_url": "https://api.github.com/users/Fuzzbawls/orgs",
        "repos_url": "https://api.github.com/users/Fuzzbawls/repos",
        "events_url": "https://api.github.com/users/Fuzzbawls/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fuzzbawls/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "60cb1599e4879dddc4fd8ac48643aa1597bf74ae",
      "commit_url": "https://api.github.com/repos/Fuzzbawls/PIVX/commits/60cb1599e4879dddc4fd8ac48643aa1597bf74ae",
      "created_at": "2021-03-31T04:03:43Z"
    },
    {
      "event": "referenced",
      "id": 4532549180,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ1MzI1NDkxODA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4532549180",
      "actor": {
        "login": "Fuzzbawls",
        "id": 7393257,
        "node_id": "MDQ6VXNlcjczOTMyNTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7393257?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fuzzbawls",
        "html_url": "https://github.com/Fuzzbawls",
        "followers_url": "https://api.github.com/users/Fuzzbawls/followers",
        "following_url": "https://api.github.com/users/Fuzzbawls/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fuzzbawls/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fuzzbawls/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fuzzbawls/subscriptions",
        "organizations_url": "https://api.github.com/users/Fuzzbawls/orgs",
        "repos_url": "https://api.github.com/users/Fuzzbawls/repos",
        "events_url": "https://api.github.com/users/Fuzzbawls/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fuzzbawls/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "78d66f8399634bd11032895dd7cd91b494c06a0e",
      "commit_url": "https://api.github.com/repos/Fuzzbawls/PIVX/commits/78d66f8399634bd11032895dd7cd91b494c06a0e",
      "created_at": "2021-03-31T07:08:43Z"
    },
    {
      "event": "referenced",
      "id": 4532549184,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ1MzI1NDkxODQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4532549184",
      "actor": {
        "login": "Fuzzbawls",
        "id": 7393257,
        "node_id": "MDQ6VXNlcjczOTMyNTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7393257?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fuzzbawls",
        "html_url": "https://github.com/Fuzzbawls",
        "followers_url": "https://api.github.com/users/Fuzzbawls/followers",
        "following_url": "https://api.github.com/users/Fuzzbawls/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fuzzbawls/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fuzzbawls/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fuzzbawls/subscriptions",
        "organizations_url": "https://api.github.com/users/Fuzzbawls/orgs",
        "repos_url": "https://api.github.com/users/Fuzzbawls/repos",
        "events_url": "https://api.github.com/users/Fuzzbawls/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fuzzbawls/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "2b754ac493960f39831a4aa6b9b3678b3883846b",
      "commit_url": "https://api.github.com/repos/Fuzzbawls/PIVX/commits/2b754ac493960f39831a4aa6b9b3678b3883846b",
      "created_at": "2021-03-31T07:08:43Z"
    },
    {
      "event": "referenced",
      "id": 4533296135,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ1MzMyOTYxMzU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4533296135",
      "actor": {
        "login": "Fuzzbawls",
        "id": 7393257,
        "node_id": "MDQ6VXNlcjczOTMyNTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7393257?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fuzzbawls",
        "html_url": "https://github.com/Fuzzbawls",
        "followers_url": "https://api.github.com/users/Fuzzbawls/followers",
        "following_url": "https://api.github.com/users/Fuzzbawls/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fuzzbawls/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fuzzbawls/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fuzzbawls/subscriptions",
        "organizations_url": "https://api.github.com/users/Fuzzbawls/orgs",
        "repos_url": "https://api.github.com/users/Fuzzbawls/repos",
        "events_url": "https://api.github.com/users/Fuzzbawls/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fuzzbawls/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "bd5976348217a42cc8e562e03ef6cf6046e32dd1",
      "commit_url": "https://api.github.com/repos/Fuzzbawls/PIVX/commits/bd5976348217a42cc8e562e03ef6cf6046e32dd1",
      "created_at": "2021-03-31T09:15:37Z"
    },
    {
      "event": "referenced",
      "id": 4533296140,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ1MzMyOTYxNDA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4533296140",
      "actor": {
        "login": "Fuzzbawls",
        "id": 7393257,
        "node_id": "MDQ6VXNlcjczOTMyNTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7393257?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fuzzbawls",
        "html_url": "https://github.com/Fuzzbawls",
        "followers_url": "https://api.github.com/users/Fuzzbawls/followers",
        "following_url": "https://api.github.com/users/Fuzzbawls/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fuzzbawls/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fuzzbawls/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fuzzbawls/subscriptions",
        "organizations_url": "https://api.github.com/users/Fuzzbawls/orgs",
        "repos_url": "https://api.github.com/users/Fuzzbawls/repos",
        "events_url": "https://api.github.com/users/Fuzzbawls/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fuzzbawls/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "09fbf93cc95b673ff78ca3fe0429fb5f2a7ab58f",
      "commit_url": "https://api.github.com/repos/Fuzzbawls/PIVX/commits/09fbf93cc95b673ff78ca3fe0429fb5f2a7ab58f",
      "created_at": "2021-03-31T09:15:37Z"
    },
    {
      "event": "referenced",
      "id": 4591328101,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ1OTEzMjgxMDE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4591328101",
      "actor": {
        "login": "Fuzzbawls",
        "id": 7393257,
        "node_id": "MDQ6VXNlcjczOTMyNTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7393257?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fuzzbawls",
        "html_url": "https://github.com/Fuzzbawls",
        "followers_url": "https://api.github.com/users/Fuzzbawls/followers",
        "following_url": "https://api.github.com/users/Fuzzbawls/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fuzzbawls/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fuzzbawls/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fuzzbawls/subscriptions",
        "organizations_url": "https://api.github.com/users/Fuzzbawls/orgs",
        "repos_url": "https://api.github.com/users/Fuzzbawls/repos",
        "events_url": "https://api.github.com/users/Fuzzbawls/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fuzzbawls/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "81d382fc5b47ef14136b49bb1629db50c28e48dd",
      "commit_url": "https://api.github.com/repos/Fuzzbawls/PIVX/commits/81d382fc5b47ef14136b49bb1629db50c28e48dd",
      "created_at": "2021-04-14T04:21:46Z"
    },
    {
      "event": "referenced",
      "id": 4591328104,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ1OTEzMjgxMDQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4591328104",
      "actor": {
        "login": "Fuzzbawls",
        "id": 7393257,
        "node_id": "MDQ6VXNlcjczOTMyNTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7393257?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fuzzbawls",
        "html_url": "https://github.com/Fuzzbawls",
        "followers_url": "https://api.github.com/users/Fuzzbawls/followers",
        "following_url": "https://api.github.com/users/Fuzzbawls/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fuzzbawls/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fuzzbawls/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fuzzbawls/subscriptions",
        "organizations_url": "https://api.github.com/users/Fuzzbawls/orgs",
        "repos_url": "https://api.github.com/users/Fuzzbawls/repos",
        "events_url": "https://api.github.com/users/Fuzzbawls/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fuzzbawls/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "88c2ae5f6e29533e05e52252c516a8008688c4be",
      "commit_url": "https://api.github.com/repos/Fuzzbawls/PIVX/commits/88c2ae5f6e29533e05e52252c516a8008688c4be",
      "created_at": "2021-04-14T04:21:46Z"
    },
    {
      "event": "referenced",
      "id": 4596237277,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ1OTYyMzcyNzc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4596237277",
      "actor": {
        "login": "random-zebra",
        "id": 18186894,
        "node_id": "MDQ6VXNlcjE4MTg2ODk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/18186894?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/random-zebra",
        "html_url": "https://github.com/random-zebra",
        "followers_url": "https://api.github.com/users/random-zebra/followers",
        "following_url": "https://api.github.com/users/random-zebra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/random-zebra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/random-zebra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/random-zebra/subscriptions",
        "organizations_url": "https://api.github.com/users/random-zebra/orgs",
        "repos_url": "https://api.github.com/users/random-zebra/repos",
        "events_url": "https://api.github.com/users/random-zebra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/random-zebra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "93f43f0f81f06ba017db8378fe1bbbfec01f7d1f",
      "commit_url": "https://api.github.com/repos/PIVX-Project/PIVX/commits/93f43f0f81f06ba017db8378fe1bbbfec01f7d1f",
      "created_at": "2021-04-14T23:12:21Z"
    },
    {
      "event": "referenced",
      "id": 4672910460,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ2NzI5MTA0NjA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4672910460",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "826ecb479a9695d3ae537a4a405143e92cf6004a",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/826ecb479a9695d3ae537a4a405143e92cf6004a",
      "created_at": "2021-05-01T04:53:03Z"
    },
    {
      "event": "referenced",
      "id": 4673510443,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ2NzM1MTA0NDM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4673510443",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "1b5c73d66e5a154177e5f7f546118d62d7642424",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/1b5c73d66e5a154177e5f7f546118d62d7642424",
      "created_at": "2021-05-01T12:21:09Z"
    },
    {
      "event": "referenced",
      "id": 4673633736,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ2NzM2MzM3MzY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4673633736",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "32473aab90d3aafc802937e6fdb069781d45a946",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/32473aab90d3aafc802937e6fdb069781d45a946",
      "created_at": "2021-05-01T14:16:28Z"
    },
    {
      "event": "referenced",
      "id": 4673659214,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ2NzM2NTkyMTQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4673659214",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "f0b48a848f130b1ae797a42a16bf9f4bc58fde63",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/f0b48a848f130b1ae797a42a16bf9f4bc58fde63",
      "created_at": "2021-05-01T14:39:20Z"
    },
    {
      "event": "referenced",
      "id": 4673726248,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ2NzM3MjYyNDg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4673726248",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "8d798981fa609533379334724494708c4803f36c",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/8d798981fa609533379334724494708c4803f36c",
      "created_at": "2021-05-01T15:37:01Z"
    },
    {
      "event": "referenced",
      "id": 4673770061,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ2NzM3NzAwNjE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4673770061",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "b8d4c8ed616e2b2bbb289b2cf7c11945ba16602b",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/b8d4c8ed616e2b2bbb289b2cf7c11945ba16602b",
      "created_at": "2021-05-01T16:18:15Z"
    },
    {
      "event": "referenced",
      "id": 4678661291,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ2Nzg2NjEyOTE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4678661291",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "1c91570ed7aff60a79b98a9ad2b7042bfd5a890b",
      "commit_url": "https://api.github.com/repos/furszy/bitcoin-core/commits/1c91570ed7aff60a79b98a9ad2b7042bfd5a890b",
      "created_at": "2021-05-03T15:12:38Z"
    },
    {
      "event": "referenced",
      "id": 5216975522,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDUyMTY5NzU1MjI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5216975522",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "c85ed4043da21b9a87121f9c5a42d7b950d9fcee",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/c85ed4043da21b9a87121f9c5a42d7b950d9fcee",
      "created_at": "2021-08-27T07:24:45Z"
    },
    {
      "event": "referenced",
      "id": 5321336897,
      "node_id": "REFE_lADOABII584eklQ3zwAAAAE9LShB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5321336897",
      "actor": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "b184989b4dc409754522ce75c0ed0bae789fe047",
      "commit_url": "https://api.github.com/repos/PastaPastaPasta/dash/commits/b184989b4dc409754522ce75c0ed0bae789fe047",
      "created_at": "2021-09-17T19:59:02Z"
    },
    {
      "event": "referenced",
      "id": 5359186738,
      "node_id": "REFE_lADOABII584eklQ3zwAAAAE_brMy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5359186738",
      "actor": {
        "login": "thelazier",
        "id": 10759339,
        "node_id": "MDQ6VXNlcjEwNzU5MzM5",
        "avatar_url": "https://avatars.githubusercontent.com/u/10759339?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/thelazier",
        "html_url": "https://github.com/thelazier",
        "followers_url": "https://api.github.com/users/thelazier/followers",
        "following_url": "https://api.github.com/users/thelazier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/thelazier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/thelazier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/thelazier/subscriptions",
        "organizations_url": "https://api.github.com/users/thelazier/orgs",
        "repos_url": "https://api.github.com/users/thelazier/repos",
        "events_url": "https://api.github.com/users/thelazier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/thelazier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "45c6fd58235019f2e86fb71ca33536cc7c3b4c86",
      "commit_url": "https://api.github.com/repos/thelazier/dash/commits/45c6fd58235019f2e86fb71ca33536cc7c3b4c86",
      "created_at": "2021-09-25T05:24:05Z"
    },
    {
      "event": "locked",
      "id": 5778920989,
      "node_id": "LOE_lADOABII584eklQ3zwAAAAFYc1Yd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5778920989",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-16T14:55:01Z",
      "lock_reason": "resolved"
    },
    {
      "event": "reviewed",
      "id": 1073591053,
      "node_id": "PRR_kwDOABII584__bMN",
      "url": null,
      "actor": null,
      "commit_id": "d1c02775aa74a0610809ac54bb241ddad61d2d8c",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#pullrequestreview-1073591053",
      "submitted_at": "2022-08-16T07:01:29Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339333532",
      "pull_request_review_id": 307563127,
      "id": 339333532,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzOTMzMzUzMg==",
      "diff_hunk": "@@ -0,0 +1,295 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/sha512.h>\n+#include <vector>\n+#include <support/cleanse.h>\n+#include <climits>\n+#include <thread>\n+#include <string.h>\n+\n+#include <util/time.h> // for GetTime()\n+\n+#ifdef WIN32\n+#include <compat.h> // for Windows API\n+#else\n+#include <sys/time.h>\n+#include <sys/resource.h>\n+#include <sys/types.h>\n+#include <sys/utsname.h>\n+#include <sys/socket.h>\n+#include <sys/stat.h>\n+#include <ifaddrs.h>\n+#include <fcntl.h>\n+#include <netinet/ip.h>\n+#include <unistd.h>\n+#endif\n+\n+#if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n+#include <cpuid.h>\n+#endif\n+\n+namespace {\n+\n+void RandAddSeedPerfmon(CSHA512& hasher)\n+{\n+#ifdef WIN32\n+    // Don't need this on Linux, OpenSSL automatically uses /dev/urandom\n+    // Seed with the entire set of perfmon data\n+\n+    // This can take up to 2 seconds, so only do it every 10 minutes\n+    static int64_t nLastPerfmon;\n+    if (GetTime() < nLastPerfmon + 10 * 60)\n+        return;\n+    nLastPerfmon = GetTime();\n+\n+    std::vector<unsigned char> vData(250000, 0);\n+    long ret = 0;\n+    unsigned long nSize = 0;\n+    const size_t nMaxSize = 10000000; // Bail out at more than 10MB of performance data\n+    while (true) {\n+        nSize = vData.size();\n+        ret = RegQueryValueExA(HKEY_PERFORMANCE_DATA, \"Global\", nullptr, nullptr, vData.data(), &nSize);\n+        if (ret != ERROR_MORE_DATA || vData.size() >= nMaxSize)\n+            break;\n+        vData.resize(std::max((vData.size() * 3) / 2, nMaxSize)); // Grow size of buffer exponentially\n+    }\n+    RegCloseKey(HKEY_PERFORMANCE_DATA);\n+    if (ret == ERROR_SUCCESS) {\n+        hasher.Write(vData.data(), nSize);\n+        memory_cleanse(vData.data(), nSize);\n+    } else {\n+        // Performance data is only a best-effort attempt at improving the\n+        // situation when the OS randomness (and other sources) aren't\n+        // adequate. As a result, failure to read it is isn't considered critical,\n+        // so we don't call RandFailure().\n+        // TODO: Add logging when the logger is made functional before global\n+        // constructors have been invoked.\n+    }\n+#endif\n+}\n+\n+/** Helper to easily feed data into a CSHA512.\n+ *\n+ * Note that this does not serialize the passed object (like stream.h's << operators do).\n+ * Its raw memory representation is used directly.\n+ */\n+template<typename T>\n+CSHA512& operator<<(CSHA512& hasher, const T& data) {\n+    hasher.Write((const unsigned char*)&data, sizeof(data));\n+    return hasher;\n+}\n+\n+#ifndef WIN32\n+void AddSockaddr(CSHA512& hasher, const struct sockaddr *addr)\n+{\n+    if (addr == nullptr) return;\n+    switch (addr->sa_family) {\n+    case AF_INET:\n+        hasher.Write((const unsigned char*)addr, sizeof(sockaddr_in));\n+        break;\n+    case AF_INET6:\n+        hasher.Write((const unsigned char*)addr, sizeof(sockaddr_in6));\n+        break;\n+    default:\n+        hasher.Write((const unsigned char*)&addr->sa_family, sizeof(addr->sa_family));\n+    }\n+}\n+\n+void AddStat(CSHA512& hasher, const struct stat& sb)\n+{\n+    hasher << sb.st_dev << sb.st_ino << sb.st_mode << sb.st_nlink << sb.st_uid << sb.st_gid << sb.st_size << sb.st_blksize << sb.st_blocks << sb.st_atime << sb.st_mtime << sb.st_ctime;\n+}\n+\n+void AddFile(CSHA512& hasher, const char *path)\n+{\n+    struct stat sb;\n+    int f = open(path, O_RDONLY);\n+    if (f != -1) {\n+        unsigned char fbuf[1024];\n+        int n;\n+        hasher.Write((const unsigned char*)&f, sizeof(f));\n+        if (fstat(f, &sb) == 0) {\n+            AddStat(hasher, sb);\n+        }\n+        do {\n+            n = read(f, fbuf, sizeof(fbuf));\n+            if (n > 0) hasher.Write(fbuf, n);\n+            /* not bothering with EINTR handling. */\n+        } while (n == sizeof(fbuf));\n+        close(f);\n+    }\n+}\n+\n+void AddPath(CSHA512& hasher, const char *path)\n+{\n+    struct stat sb;\n+    if (stat(path, &sb) == 0) {\n+        hasher.Write((const unsigned char*)path, strlen(path) + 1);\n+        AddStat(hasher, sb);\n+    }\n+}\n+#endif\n+\n+#if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n+void GetCPUID(uint32_t leaf, uint32_t subleaf, uint32_t& a, uint32_t& b, uint32_t& c, uint32_t& d)\n+{\n+    // We can't use __get_cpuid as it doesn't support subleafs.\n+#ifdef __GNUC__\n+    __cpuid_count(leaf, subleaf, a, b, c, d);\n+#else\n+    __asm__ (\"cpuid\" : \"=a\"(a), \"=b\"(b), \"=c\"(c), \"=d\"(d) : \"0\"(leaf), \"2\"(subleaf));\n+#endif\n+}\n+\n+void AddCPUID(CSHA512& hasher)\n+{\n+    uint32_t ax, bx, cx, dx;\n+    GetCPUID(0, 0, ax, bx, cx, dx);\n+    hasher << ax << bx << cx << dx;\n+    uint32_t max = ax;\n+    for (uint32_t leaf = 1; leaf < max; ++leaf) {\n+        for (uint32_t subleaf = 0;; ++subleaf) {\n+            GetCPUID(leaf, subleaf, ax, bx, cx, dx);\n+            hasher << leaf << subleaf << ax << bx << cx << dx;\n+            // Iterate over subleaves for leaf 4, 11, 13\n+            if (leaf != 4 && leaf != 11 && leaf != 13) break;\n+            if ((leaf == 4 || leaf == 13) && ax == 0) break;\n+            if (leaf == 11 && (cx & 0xFF00) == 0) break;\n+        }\n+    }\n+}\n+#endif\n+} // namespace\n+\n+void RandAddDynamicEnv(CSHA512& hasher)\n+{\n+    RandAddSeedPerfmon(hasher);\n+\n+#ifdef WIN32\n+    FILETIME ftime;\n+    GetSystemTimeAsFileTime(&ftime);\n+    hasher << ftime;\n+#else\n+    struct timespec ts;\n+    clock_gettime(CLOCK_MONOTONIC, &ts);\n+    struct timeval tv;\n+    gettimeofday(&tv, nullptr);\n+    hasher << ts.tv_sec << ts.tv_nsec << tv.tv_sec << tv.tv_usec;\n+\n+    // Current resource usage.\n+    struct rusage usage;\n+    if (getrusage(RUSAGE_SELF, &usage) == 0) {\n+        hasher << usage.ru_utime.tv_sec << usage.ru_utime.tv_usec << usage.ru_stime.tv_sec << usage.ru_stime.tv_usec;\n+        hasher << usage.ru_maxrss << usage.ru_minflt << usage.ru_majflt << usage.ru_inblock << usage.ru_oublock;\n+        hasher << usage.ru_nvcsw << usage.ru_nivcsw;\n+    }\n+#endif\n+\n+}\n+\n+void RandAddStaticEnv(CSHA512& hasher)\n+{\n+    // Some compile-time static properties\n+    uint32_t x;\n+    x = ((CHAR_MIN < 0) << 30) + (sizeof(void *) << 16) + (sizeof(long) << 8) + sizeof(int);\n+    hasher << x;\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__) && defined(__GNUC_PATCHLEVEL__)\n+    x = (__GNUC_PATCHLEVEL__ << 16) + (__GNUC_MINOR__ << 8) + __GNUC__;\n+    hasher << x;\n+#endif\n+#if defined(_MSC_VER)\n+    x = _MSC_VER;\n+    hasher << x;\n+#endif\n+#if defined(__STDC_VERSION__)\n+    x = __STDC_VERSION__;\n+    hasher << x;\n+#endif\n+#if defined(_XOPEN_VERSION)\n+    x = _XOPEN_VERSION;\n+    hasher << x;\n+#endif\n+\n+#if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n+    AddCPUID(hasher);\n+#endif",
      "path": "src/randomenv.cpp",
      "position": 361,
      "original_position": 218,
      "commit_id": "d1c02775aa74a0610809ac54bb241ddad61d2d8c",
      "original_commit_id": "0c6d5cb1f7fcf00fb7a900e5f5a1f2e1e2a49978",
      "in_reply_to_id": null,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "To also have CPU features bits for other architectures (on Linux) you could include `getauxval(AT_HWCAP)` and `getauxval(AT_HWCAP2)`.\r\n(maybe some other `getauxval` are relevant too, e.g. `AT_RANDOM` has 16 bytes of random data)",
      "created_at": "2019-10-27T09:39:41Z",
      "updated_at": "2019-11-12T23:40:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#discussion_r339333532",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339333532"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 361,
      "original_line": 361,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339361181",
      "pull_request_review_id": 307591830,
      "id": 339361181,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzOTM2MTE4MQ==",
      "diff_hunk": "@@ -0,0 +1,295 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/sha512.h>\n+#include <vector>\n+#include <support/cleanse.h>\n+#include <climits>\n+#include <thread>\n+#include <string.h>\n+\n+#include <util/time.h> // for GetTime()\n+\n+#ifdef WIN32\n+#include <compat.h> // for Windows API\n+#else\n+#include <sys/time.h>\n+#include <sys/resource.h>\n+#include <sys/types.h>\n+#include <sys/utsname.h>\n+#include <sys/socket.h>\n+#include <sys/stat.h>\n+#include <ifaddrs.h>\n+#include <fcntl.h>\n+#include <netinet/ip.h>\n+#include <unistd.h>\n+#endif\n+\n+#if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n+#include <cpuid.h>\n+#endif\n+\n+namespace {\n+\n+void RandAddSeedPerfmon(CSHA512& hasher)\n+{\n+#ifdef WIN32\n+    // Don't need this on Linux, OpenSSL automatically uses /dev/urandom\n+    // Seed with the entire set of perfmon data\n+\n+    // This can take up to 2 seconds, so only do it every 10 minutes\n+    static int64_t nLastPerfmon;\n+    if (GetTime() < nLastPerfmon + 10 * 60)\n+        return;\n+    nLastPerfmon = GetTime();\n+\n+    std::vector<unsigned char> vData(250000, 0);\n+    long ret = 0;\n+    unsigned long nSize = 0;\n+    const size_t nMaxSize = 10000000; // Bail out at more than 10MB of performance data\n+    while (true) {\n+        nSize = vData.size();\n+        ret = RegQueryValueExA(HKEY_PERFORMANCE_DATA, \"Global\", nullptr, nullptr, vData.data(), &nSize);\n+        if (ret != ERROR_MORE_DATA || vData.size() >= nMaxSize)\n+            break;\n+        vData.resize(std::max((vData.size() * 3) / 2, nMaxSize)); // Grow size of buffer exponentially\n+    }\n+    RegCloseKey(HKEY_PERFORMANCE_DATA);\n+    if (ret == ERROR_SUCCESS) {\n+        hasher.Write(vData.data(), nSize);\n+        memory_cleanse(vData.data(), nSize);\n+    } else {\n+        // Performance data is only a best-effort attempt at improving the\n+        // situation when the OS randomness (and other sources) aren't\n+        // adequate. As a result, failure to read it is isn't considered critical,\n+        // so we don't call RandFailure().\n+        // TODO: Add logging when the logger is made functional before global\n+        // constructors have been invoked.\n+    }\n+#endif\n+}\n+\n+/** Helper to easily feed data into a CSHA512.\n+ *\n+ * Note that this does not serialize the passed object (like stream.h's << operators do).\n+ * Its raw memory representation is used directly.\n+ */\n+template<typename T>\n+CSHA512& operator<<(CSHA512& hasher, const T& data) {\n+    hasher.Write((const unsigned char*)&data, sizeof(data));\n+    return hasher;\n+}\n+\n+#ifndef WIN32\n+void AddSockaddr(CSHA512& hasher, const struct sockaddr *addr)\n+{\n+    if (addr == nullptr) return;\n+    switch (addr->sa_family) {\n+    case AF_INET:\n+        hasher.Write((const unsigned char*)addr, sizeof(sockaddr_in));\n+        break;\n+    case AF_INET6:\n+        hasher.Write((const unsigned char*)addr, sizeof(sockaddr_in6));\n+        break;\n+    default:\n+        hasher.Write((const unsigned char*)&addr->sa_family, sizeof(addr->sa_family));\n+    }\n+}\n+\n+void AddStat(CSHA512& hasher, const struct stat& sb)\n+{\n+    hasher << sb.st_dev << sb.st_ino << sb.st_mode << sb.st_nlink << sb.st_uid << sb.st_gid << sb.st_size << sb.st_blksize << sb.st_blocks << sb.st_atime << sb.st_mtime << sb.st_ctime;\n+}\n+\n+void AddFile(CSHA512& hasher, const char *path)\n+{\n+    struct stat sb;\n+    int f = open(path, O_RDONLY);\n+    if (f != -1) {\n+        unsigned char fbuf[1024];\n+        int n;\n+        hasher.Write((const unsigned char*)&f, sizeof(f));\n+        if (fstat(f, &sb) == 0) {\n+            AddStat(hasher, sb);\n+        }\n+        do {\n+            n = read(f, fbuf, sizeof(fbuf));\n+            if (n > 0) hasher.Write(fbuf, n);\n+            /* not bothering with EINTR handling. */\n+        } while (n == sizeof(fbuf));\n+        close(f);\n+    }\n+}\n+\n+void AddPath(CSHA512& hasher, const char *path)\n+{\n+    struct stat sb;\n+    if (stat(path, &sb) == 0) {\n+        hasher.Write((const unsigned char*)path, strlen(path) + 1);\n+        AddStat(hasher, sb);\n+    }\n+}\n+#endif\n+\n+#if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n+void GetCPUID(uint32_t leaf, uint32_t subleaf, uint32_t& a, uint32_t& b, uint32_t& c, uint32_t& d)\n+{\n+    // We can't use __get_cpuid as it doesn't support subleafs.\n+#ifdef __GNUC__\n+    __cpuid_count(leaf, subleaf, a, b, c, d);\n+#else\n+    __asm__ (\"cpuid\" : \"=a\"(a), \"=b\"(b), \"=c\"(c), \"=d\"(d) : \"0\"(leaf), \"2\"(subleaf));\n+#endif\n+}\n+\n+void AddCPUID(CSHA512& hasher)\n+{\n+    uint32_t ax, bx, cx, dx;\n+    GetCPUID(0, 0, ax, bx, cx, dx);\n+    hasher << ax << bx << cx << dx;\n+    uint32_t max = ax;\n+    for (uint32_t leaf = 1; leaf < max; ++leaf) {\n+        for (uint32_t subleaf = 0;; ++subleaf) {\n+            GetCPUID(leaf, subleaf, ax, bx, cx, dx);\n+            hasher << leaf << subleaf << ax << bx << cx << dx;\n+            // Iterate over subleaves for leaf 4, 11, 13\n+            if (leaf != 4 && leaf != 11 && leaf != 13) break;\n+            if ((leaf == 4 || leaf == 13) && ax == 0) break;\n+            if (leaf == 11 && (cx & 0xFF00) == 0) break;\n+        }\n+    }\n+}\n+#endif\n+} // namespace\n+\n+void RandAddDynamicEnv(CSHA512& hasher)\n+{\n+    RandAddSeedPerfmon(hasher);\n+\n+#ifdef WIN32\n+    FILETIME ftime;\n+    GetSystemTimeAsFileTime(&ftime);\n+    hasher << ftime;\n+#else\n+    struct timespec ts;\n+    clock_gettime(CLOCK_MONOTONIC, &ts);\n+    struct timeval tv;\n+    gettimeofday(&tv, nullptr);\n+    hasher << ts.tv_sec << ts.tv_nsec << tv.tv_sec << tv.tv_usec;\n+\n+    // Current resource usage.\n+    struct rusage usage;\n+    if (getrusage(RUSAGE_SELF, &usage) == 0) {\n+        hasher << usage.ru_utime.tv_sec << usage.ru_utime.tv_usec << usage.ru_stime.tv_sec << usage.ru_stime.tv_usec;\n+        hasher << usage.ru_maxrss << usage.ru_minflt << usage.ru_majflt << usage.ru_inblock << usage.ru_oublock;\n+        hasher << usage.ru_nvcsw << usage.ru_nivcsw;\n+    }\n+#endif\n+\n+}\n+\n+void RandAddStaticEnv(CSHA512& hasher)\n+{\n+    // Some compile-time static properties\n+    uint32_t x;\n+    x = ((CHAR_MIN < 0) << 30) + (sizeof(void *) << 16) + (sizeof(long) << 8) + sizeof(int);\n+    hasher << x;\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__) && defined(__GNUC_PATCHLEVEL__)\n+    x = (__GNUC_PATCHLEVEL__ << 16) + (__GNUC_MINOR__ << 8) + __GNUC__;\n+    hasher << x;\n+#endif\n+#if defined(_MSC_VER)\n+    x = _MSC_VER;\n+    hasher << x;\n+#endif\n+#if defined(__STDC_VERSION__)\n+    x = __STDC_VERSION__;\n+    hasher << x;\n+#endif\n+#if defined(_XOPEN_VERSION)\n+    x = _XOPEN_VERSION;\n+    hasher << x;\n+#endif\n+\n+#if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n+    AddCPUID(hasher);\n+#endif",
      "path": "src/randomenv.cpp",
      "position": 361,
      "original_position": 218,
      "commit_id": "d1c02775aa74a0610809ac54bb241ddad61d2d8c",
      "original_commit_id": "0c6d5cb1f7fcf00fb7a900e5f5a1f2e1e2a49978",
      "in_reply_to_id": 339333532,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good idea, added!",
      "created_at": "2019-10-27T20:05:19Z",
      "updated_at": "2019-11-12T23:40:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#discussion_r339361181",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339361181"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 361,
      "original_line": 361,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/340200295",
      "pull_request_review_id": 308673063,
      "id": 340200295,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MDIwMDI5NQ==",
      "diff_hunk": "@@ -8,15 +8,14 @@\n #include <assert.h>\n #include <string.h>\n \n+#include <compat/cpuid.h>\n+\n #if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n-#if defined(USE_ASM)",
      "path": "src/crypto/sha256.cpp",
      "position": 7,
      "original_position": 7,
      "commit_id": "d1c02775aa74a0610809ac54bb241ddad61d2d8c",
      "original_commit_id": "35cfbf75871da0833c6bdd32a9ccc0114506de01",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Are you sure you don't need to keep `if defined(USE_ASM)` around for `void Transform(`?",
      "created_at": "2019-10-29T16:51:45Z",
      "updated_at": "2019-11-12T23:40:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#discussion_r340200295",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/340200295"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 12,
      "original_line": 12,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/340246307",
      "pull_request_review_id": 308731736,
      "id": 340246307,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MDI0NjMwNw==",
      "diff_hunk": "@@ -8,15 +8,14 @@\n #include <assert.h>\n #include <string.h>\n \n+#include <compat/cpuid.h>\n+\n #if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n-#if defined(USE_ASM)",
      "path": "src/crypto/sha256.cpp",
      "position": 7,
      "original_position": 7,
      "commit_id": "d1c02775aa74a0610809ac54bb241ddad61d2d8c",
      "original_commit_id": "35cfbf75871da0833c6bdd32a9ccc0114506de01",
      "in_reply_to_id": 340200295,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2019-10-29T18:14:21Z",
      "updated_at": "2019-11-12T23:40:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#discussion_r340246307",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/340246307"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 12,
      "original_line": 12,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/340835357",
      "pull_request_review_id": 309491906,
      "id": 340835357,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MDgzNTM1Nw==",
      "diff_hunk": "@@ -60,10 +61,11 @@ void RandAddSeedPerfmon(CSHA512& hasher)\n     // Seed with the entire set of perfmon data\n \n     // This can take up to 2 seconds, so only do it every 10 minutes\n-    static int64_t nLastPerfmon;\n-    if (GetTime() < nLastPerfmon + 10 * 60)\n-        return;\n-    nLastPerfmon = GetTime();\n+    static std::atomic<int64_t> last_perfmon{0};\n+    int64_t last_time = last_perfmon.load();\n+    int64_t current_time = GetTime();",
      "path": "src/randomenv.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "d1c02775aa74a0610809ac54bb241ddad61d2d8c",
      "original_commit_id": "ad09ad707e0ed6e3a537e1a204843792e5d06108",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in commit ad09ad707e0ed6e3a537e1a204843792e5d06108:\r\n\r\n`GetTime` is deprecated (see https://dev.visucore.com/bitcoin/doxygen/time_8cpp.html#a350f99e2a13df31f2afbd7f80ab21a5e). I guess you wanted to use `GetSystemTimeInSeconds`",
      "created_at": "2019-10-30T20:15:25Z",
      "updated_at": "2019-11-12T23:40:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#discussion_r340835357",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/340835357"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/340835915",
      "pull_request_review_id": 309492636,
      "id": 340835915,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MDgzNTkxNQ==",
      "diff_hunk": "@@ -60,10 +61,11 @@ void RandAddSeedPerfmon(CSHA512& hasher)\n     // Seed with the entire set of perfmon data\n \n     // This can take up to 2 seconds, so only do it every 10 minutes\n-    static int64_t nLastPerfmon;\n-    if (GetTime() < nLastPerfmon + 10 * 60)\n-        return;\n-    nLastPerfmon = GetTime();\n+    static std::atomic<int64_t> last_perfmon{0};\n+    int64_t last_time = last_perfmon.load();\n+    int64_t current_time = GetTime();",
      "path": "src/randomenv.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "d1c02775aa74a0610809ac54bb241ddad61d2d8c",
      "original_commit_id": "ad09ad707e0ed6e3a537e1a204843792e5d06108",
      "in_reply_to_id": 340835357,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`GetTime<std::chrono::seconds>()` can't hurt here either, as far as I can tell",
      "created_at": "2019-10-30T20:16:42Z",
      "updated_at": "2019-11-12T23:40:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#discussion_r340835915",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/340835915"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/340898164",
      "pull_request_review_id": 309571739,
      "id": 340898164,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MDg5ODE2NA==",
      "diff_hunk": "@@ -60,10 +61,11 @@ void RandAddSeedPerfmon(CSHA512& hasher)\n     // Seed with the entire set of perfmon data\n \n     // This can take up to 2 seconds, so only do it every 10 minutes\n-    static int64_t nLastPerfmon;\n-    if (GetTime() < nLastPerfmon + 10 * 60)\n-        return;\n-    nLastPerfmon = GetTime();\n+    static std::atomic<int64_t> last_perfmon{0};\n+    int64_t last_time = last_perfmon.load();\n+    int64_t current_time = GetTime();",
      "path": "src/randomenv.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "d1c02775aa74a0610809ac54bb241ddad61d2d8c",
      "original_commit_id": "ad09ad707e0ed6e3a537e1a204843792e5d06108",
      "in_reply_to_id": 340835357,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed. Also done elsewhere in the previous commit.",
      "created_at": "2019-10-30T23:03:50Z",
      "updated_at": "2019-11-12T23:40:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#discussion_r340898164",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/340898164"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/341190312",
      "pull_request_review_id": 309949749,
      "id": 341190312,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MTE5MDMxMg==",
      "diff_hunk": "@@ -0,0 +1,389 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <randomenv.h>\n+\n+#include <compat/cpuid.h>\n+#include <crypto/sha512.h>\n+#include <support/cleanse.h>\n+#include <util/time.h> // for GetTime()\n+#ifdef WIN32\n+#include <compat.h> // for Windows API\n+#endif\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <climits>\n+#include <thread>\n+#include <vector>\n+\n+#include <stdint.h>\n+#include <string.h>\n+#ifndef WIN32\n+#include <sys/types.h> // must go before a number of other headers\n+#include <fcntl.h>\n+#include <netinet/in.h>\n+#include <sys/resource.h>\n+#include <sys/socket.h>\n+#include <sys/stat.h>\n+#include <sys/time.h>\n+#include <sys/utsname.h>\n+#include <unistd.h>\n+#endif\n+#ifdef __MACH__\n+#include <mach/mach_time.h>\n+#endif\n+#if HAVE_DECL_GETIFADDRS\n+#include <ifaddrs.h>\n+#endif\n+#if HAVE_DECL_SYSCTLBYNAME\n+#include <sys/sysctl.h>\n+#endif\n+#ifdef __linux__\n+#include <sys/auxv.h>\n+#endif\n+\n+//! Necessary on some platforms\n+extern char** environ;\n+\n+namespace {\n+\n+void RandAddSeedPerfmon(CSHA512& hasher)\n+{\n+#ifdef WIN32\n+    // Don't need this on Linux, OpenSSL automatically uses /dev/urandom\n+    // Seed with the entire set of perfmon data\n+\n+    // This can take up to 2 seconds, so only do it every 10 minutes\n+    static std::atomic<std::chrono::seconds> last_perfmon{std::chrono::seconds{0}};\n+    auto last_time = last_perfmon.load();\n+    auto current_time = GetTime<std::chrono::seconds>();\n+    if (current_time < last_time + std::chrono::minutes{10}) return;\n+    last_perfmon = current_time;\n+\n+    std::vector<unsigned char> vData(250000, 0);\n+    long ret = 0;\n+    unsigned long nSize = 0;\n+    const size_t nMaxSize = 10000000; // Bail out at more than 10MB of performance data\n+    while (true) {\n+        nSize = vData.size();\n+        ret = RegQueryValueExA(HKEY_PERFORMANCE_DATA, \"Global\", nullptr, nullptr, vData.data(), &nSize);\n+        if (ret != ERROR_MORE_DATA || vData.size() >= nMaxSize)\n+            break;\n+        vData.resize(std::max((vData.size() * 3) / 2, nMaxSize)); // Grow size of buffer exponentially\n+    }\n+    RegCloseKey(HKEY_PERFORMANCE_DATA);\n+    if (ret == ERROR_SUCCESS) {\n+        hasher.Write(vData.data(), nSize);\n+        memory_cleanse(vData.data(), nSize);\n+    } else {\n+        // Performance data is only a best-effort attempt at improving the\n+        // situation when the OS randomness (and other sources) aren't\n+        // adequate. As a result, failure to read it is isn't considered critical,\n+        // so we don't call RandFailure().\n+        // TODO: Add logging when the logger is made functional before global\n+        // constructors have been invoked.\n+    }\n+#endif\n+}\n+\n+/** Helper to easily feed data into a CSHA512.\n+ *\n+ * Note that this does not serialize the passed object (like stream.h's << operators do).\n+ * Its raw memory representation is used directly.\n+ */\n+template<typename T>\n+CSHA512& operator<<(CSHA512& hasher, const T& data) {\n+    hasher.Write((const unsigned char*)&data, sizeof(data));\n+    return hasher;\n+}\n+\n+#ifndef WIN32\n+void AddSockaddr(CSHA512& hasher, const struct sockaddr *addr)\n+{\n+    if (addr == nullptr) return;\n+    switch (addr->sa_family) {\n+    case AF_INET:\n+        hasher.Write((const unsigned char*)addr, sizeof(sockaddr_in));\n+        break;\n+    case AF_INET6:\n+        hasher.Write((const unsigned char*)addr, sizeof(sockaddr_in6));\n+        break;\n+    default:\n+        hasher.Write((const unsigned char*)&addr->sa_family, sizeof(addr->sa_family));\n+    }\n+}\n+\n+void AddStat(CSHA512& hasher, const struct stat& sb)\n+{\n+    hasher << sb.st_dev << sb.st_ino << sb.st_mode << sb.st_nlink << sb.st_uid << sb.st_gid << sb.st_size << sb.st_blksize << sb.st_blocks << sb.st_atime << sb.st_mtime << sb.st_ctime;\n+}\n+\n+void AddFile(CSHA512& hasher, const char *path)\n+{\n+    struct stat sb;\n+    int f = open(path, O_RDONLY);\n+    if (f != -1) {\n+        unsigned char fbuf[1024];\n+        int n;\n+        hasher.Write((const unsigned char*)&f, sizeof(f));\n+        if (fstat(f, &sb) == 0) {\n+            AddStat(hasher, sb);\n+        }\n+        do {\n+            n = read(f, fbuf, sizeof(fbuf));\n+            if (n > 0) hasher.Write(fbuf, n);\n+            /* not bothering with EINTR handling. */\n+        } while (n == sizeof(fbuf));\n+        close(f);\n+    }\n+}\n+\n+void AddPath(CSHA512& hasher, const char *path)\n+{\n+    struct stat sb;\n+    if (stat(path, &sb) == 0) {\n+        hasher.Write((const unsigned char*)path, strlen(path) + 1);\n+        AddStat(hasher, sb);\n+    }\n+}\n+#endif\n+\n+void AddSysctl(CSHA512& hasher, const char* path)\n+{\n+#if HAVE_DECL_SYSCTLBYNAME\n+    unsigned char buffer[4096];\n+    size_t siz = 4096;\n+    int ret = sysctlbyname(path, buffer, &siz, nullptr, 0);\n+    if (ret == 0 || (ret == -1 && errno == ENOMEM)) {\n+        hasher.Write((const unsigned char*)path, strlen(path) + 1);\n+        hasher.Write(buffer, std::min<size_t>(siz, 4096));\n+    }\n+#endif\n+}\n+\n+#ifdef HAVE_GETCPUID\n+void AddCPUID(CSHA512& hasher)\n+{\n+    uint32_t ax, bx, cx, dx;\n+    GetCPUID(0, 0, ax, bx, cx, dx);\n+    hasher << ax << bx << cx << dx;\n+    uint32_t max = ax;\n+    for (uint32_t leaf = 1; leaf <= max; ++leaf) {\n+        for (uint32_t subleaf = 0;; ++subleaf) {\n+            GetCPUID(leaf, subleaf, ax, bx, cx, dx);\n+            hasher << leaf << subleaf << ax << bx << cx << dx;\n+            // Iterate over subleaves for leaf 4, 11, 13\n+            if (leaf != 4 && leaf != 11 && leaf != 13) break;\n+            if ((leaf == 4 || leaf == 13) && ax == 0) break;\n+            if (leaf == 11 && (cx & 0xFF00) == 0) break;\n+        }\n+    }\n+}\n+#endif\n+} // namespace\n+\n+void RandAddDynamicEnv(CSHA512& hasher)\n+{\n+    RandAddSeedPerfmon(hasher);\n+\n+#ifdef WIN32\n+    FILETIME ftime;\n+    GetSystemTimeAsFileTime(&ftime);\n+    hasher << ftime;\n+#else\n+#  ifdef __MACH__\n+    hasher << mach_absolute_time();\n+#  else\n+    struct timespec ts;\n+    clock_gettime(CLOCK_MONOTONIC, &ts);\n+    hasher << ts.tv_sec << ts.tv_nsec;\n+#  endif\n+    struct timeval tv;\n+    gettimeofday(&tv, nullptr);\n+    hasher << tv.tv_sec << tv.tv_usec;\n+\n+    // Current resource usage.\n+    struct rusage usage;\n+    if (getrusage(RUSAGE_SELF, &usage) == 0) {\n+        hasher << usage.ru_utime.tv_sec << usage.ru_utime.tv_usec << usage.ru_stime.tv_sec << usage.ru_stime.tv_usec;\n+        hasher << usage.ru_maxrss << usage.ru_minflt << usage.ru_majflt << usage.ru_inblock << usage.ru_oublock;\n+        hasher << usage.ru_nvcsw << usage.ru_nivcsw;\n+    }\n+\n+#ifdef __linux__\n+    AddFile(hasher, \"/proc/diskstats\");\n+    AddFile(hasher, \"/proc/vmstat\");\n+    AddFile(hasher, \"/proc/schedstat\");",
      "path": "src/randomenv.cpp",
      "position": 276,
      "original_position": 223,
      "commit_id": "d1c02775aa74a0610809ac54bb241ddad61d2d8c",
      "original_commit_id": "8a27be0fb0065d897d4e55a4f7367d54f8914d77",
      "in_reply_to_id": null,
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this should be `/proc/self/schedstat`",
      "created_at": "2019-10-31T15:02:46Z",
      "updated_at": "2019-11-12T23:40:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#discussion_r341190312",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/341190312"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 276,
      "original_line": 276,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/341199938",
      "pull_request_review_id": 309949749,
      "id": 341199938,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MTE5OTkzOA==",
      "diff_hunk": "@@ -0,0 +1,389 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <randomenv.h>\n+\n+#include <compat/cpuid.h>\n+#include <crypto/sha512.h>\n+#include <support/cleanse.h>\n+#include <util/time.h> // for GetTime()\n+#ifdef WIN32\n+#include <compat.h> // for Windows API\n+#endif\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <climits>\n+#include <thread>\n+#include <vector>\n+\n+#include <stdint.h>\n+#include <string.h>\n+#ifndef WIN32\n+#include <sys/types.h> // must go before a number of other headers\n+#include <fcntl.h>\n+#include <netinet/in.h>\n+#include <sys/resource.h>\n+#include <sys/socket.h>\n+#include <sys/stat.h>\n+#include <sys/time.h>\n+#include <sys/utsname.h>\n+#include <unistd.h>\n+#endif\n+#ifdef __MACH__\n+#include <mach/mach_time.h>\n+#endif\n+#if HAVE_DECL_GETIFADDRS\n+#include <ifaddrs.h>\n+#endif\n+#if HAVE_DECL_SYSCTLBYNAME\n+#include <sys/sysctl.h>\n+#endif\n+#ifdef __linux__\n+#include <sys/auxv.h>\n+#endif\n+\n+//! Necessary on some platforms\n+extern char** environ;\n+\n+namespace {\n+\n+void RandAddSeedPerfmon(CSHA512& hasher)\n+{\n+#ifdef WIN32\n+    // Don't need this on Linux, OpenSSL automatically uses /dev/urandom\n+    // Seed with the entire set of perfmon data\n+\n+    // This can take up to 2 seconds, so only do it every 10 minutes\n+    static std::atomic<std::chrono::seconds> last_perfmon{std::chrono::seconds{0}};\n+    auto last_time = last_perfmon.load();\n+    auto current_time = GetTime<std::chrono::seconds>();\n+    if (current_time < last_time + std::chrono::minutes{10}) return;\n+    last_perfmon = current_time;\n+\n+    std::vector<unsigned char> vData(250000, 0);\n+    long ret = 0;\n+    unsigned long nSize = 0;\n+    const size_t nMaxSize = 10000000; // Bail out at more than 10MB of performance data\n+    while (true) {\n+        nSize = vData.size();\n+        ret = RegQueryValueExA(HKEY_PERFORMANCE_DATA, \"Global\", nullptr, nullptr, vData.data(), &nSize);\n+        if (ret != ERROR_MORE_DATA || vData.size() >= nMaxSize)\n+            break;\n+        vData.resize(std::max((vData.size() * 3) / 2, nMaxSize)); // Grow size of buffer exponentially\n+    }\n+    RegCloseKey(HKEY_PERFORMANCE_DATA);\n+    if (ret == ERROR_SUCCESS) {\n+        hasher.Write(vData.data(), nSize);\n+        memory_cleanse(vData.data(), nSize);\n+    } else {\n+        // Performance data is only a best-effort attempt at improving the\n+        // situation when the OS randomness (and other sources) aren't\n+        // adequate. As a result, failure to read it is isn't considered critical,\n+        // so we don't call RandFailure().\n+        // TODO: Add logging when the logger is made functional before global\n+        // constructors have been invoked.\n+    }\n+#endif\n+}\n+\n+/** Helper to easily feed data into a CSHA512.\n+ *\n+ * Note that this does not serialize the passed object (like stream.h's << operators do).\n+ * Its raw memory representation is used directly.\n+ */\n+template<typename T>\n+CSHA512& operator<<(CSHA512& hasher, const T& data) {\n+    hasher.Write((const unsigned char*)&data, sizeof(data));\n+    return hasher;\n+}\n+\n+#ifndef WIN32\n+void AddSockaddr(CSHA512& hasher, const struct sockaddr *addr)\n+{\n+    if (addr == nullptr) return;\n+    switch (addr->sa_family) {\n+    case AF_INET:\n+        hasher.Write((const unsigned char*)addr, sizeof(sockaddr_in));\n+        break;\n+    case AF_INET6:\n+        hasher.Write((const unsigned char*)addr, sizeof(sockaddr_in6));\n+        break;\n+    default:\n+        hasher.Write((const unsigned char*)&addr->sa_family, sizeof(addr->sa_family));\n+    }\n+}\n+\n+void AddStat(CSHA512& hasher, const struct stat& sb)\n+{\n+    hasher << sb.st_dev << sb.st_ino << sb.st_mode << sb.st_nlink << sb.st_uid << sb.st_gid << sb.st_size << sb.st_blksize << sb.st_blocks << sb.st_atime << sb.st_mtime << sb.st_ctime;\n+}\n+\n+void AddFile(CSHA512& hasher, const char *path)\n+{\n+    struct stat sb;\n+    int f = open(path, O_RDONLY);\n+    if (f != -1) {\n+        unsigned char fbuf[1024];\n+        int n;\n+        hasher.Write((const unsigned char*)&f, sizeof(f));\n+        if (fstat(f, &sb) == 0) {\n+            AddStat(hasher, sb);\n+        }\n+        do {\n+            n = read(f, fbuf, sizeof(fbuf));\n+            if (n > 0) hasher.Write(fbuf, n);\n+            /* not bothering with EINTR handling. */\n+        } while (n == sizeof(fbuf));\n+        close(f);\n+    }\n+}\n+\n+void AddPath(CSHA512& hasher, const char *path)\n+{\n+    struct stat sb;\n+    if (stat(path, &sb) == 0) {\n+        hasher.Write((const unsigned char*)path, strlen(path) + 1);\n+        AddStat(hasher, sb);\n+    }\n+}\n+#endif\n+\n+void AddSysctl(CSHA512& hasher, const char* path)\n+{\n+#if HAVE_DECL_SYSCTLBYNAME\n+    unsigned char buffer[4096];\n+    size_t siz = 4096;\n+    int ret = sysctlbyname(path, buffer, &siz, nullptr, 0);\n+    if (ret == 0 || (ret == -1 && errno == ENOMEM)) {\n+        hasher.Write((const unsigned char*)path, strlen(path) + 1);\n+        hasher.Write(buffer, std::min<size_t>(siz, 4096));\n+    }\n+#endif\n+}\n+\n+#ifdef HAVE_GETCPUID\n+void AddCPUID(CSHA512& hasher)\n+{\n+    uint32_t ax, bx, cx, dx;\n+    GetCPUID(0, 0, ax, bx, cx, dx);\n+    hasher << ax << bx << cx << dx;\n+    uint32_t max = ax;\n+    for (uint32_t leaf = 1; leaf <= max; ++leaf) {\n+        for (uint32_t subleaf = 0;; ++subleaf) {\n+            GetCPUID(leaf, subleaf, ax, bx, cx, dx);\n+            hasher << leaf << subleaf << ax << bx << cx << dx;\n+            // Iterate over subleaves for leaf 4, 11, 13\n+            if (leaf != 4 && leaf != 11 && leaf != 13) break;\n+            if ((leaf == 4 || leaf == 13) && ax == 0) break;\n+            if (leaf == 11 && (cx & 0xFF00) == 0) break;\n+        }\n+    }\n+}\n+#endif\n+} // namespace\n+\n+void RandAddDynamicEnv(CSHA512& hasher)\n+{\n+    RandAddSeedPerfmon(hasher);\n+\n+#ifdef WIN32\n+    FILETIME ftime;\n+    GetSystemTimeAsFileTime(&ftime);\n+    hasher << ftime;\n+#else\n+#  ifdef __MACH__\n+    hasher << mach_absolute_time();\n+#  else\n+    struct timespec ts;\n+    clock_gettime(CLOCK_MONOTONIC, &ts);\n+    hasher << ts.tv_sec << ts.tv_nsec;\n+#  endif\n+    struct timeval tv;\n+    gettimeofday(&tv, nullptr);\n+    hasher << tv.tv_sec << tv.tv_usec;\n+\n+    // Current resource usage.\n+    struct rusage usage;\n+    if (getrusage(RUSAGE_SELF, &usage) == 0) {\n+        hasher << usage.ru_utime.tv_sec << usage.ru_utime.tv_usec << usage.ru_stime.tv_sec << usage.ru_stime.tv_usec;\n+        hasher << usage.ru_maxrss << usage.ru_minflt << usage.ru_majflt << usage.ru_inblock << usage.ru_oublock;\n+        hasher << usage.ru_nvcsw << usage.ru_nivcsw;\n+    }\n+\n+#ifdef __linux__\n+    AddFile(hasher, \"/proc/diskstats\");\n+    AddFile(hasher, \"/proc/vmstat\");\n+    AddFile(hasher, \"/proc/schedstat\");\n+    AddFile(hasher, \"/proc/zoneinfo\");\n+    AddFile(hasher, \"/proc/meminfo\");\n+    AddFile(hasher, \"/proc/softirqs\");\n+    AddFile(hasher, \"/proc/stat\");\n+    AddFile(hasher, \"/proc/self/status\");\n+#endif\n+#endif\n+\n+    AddSysctl(hasher, \"vm.loadavg\");\n+    AddSysctl(hasher, \"vm.swapusage\");",
      "path": "src/randomenv.cpp",
      "position": null,
      "original_position": 233,
      "commit_id": "d1c02775aa74a0610809ac54bb241ddad61d2d8c",
      "original_commit_id": "8a27be0fb0065d897d4e55a4f7367d54f8914d77",
      "in_reply_to_id": null,
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Note `vm.swapusage` seems to be macOS only. I can't find it on OpenBSD or FreeBSD.",
      "created_at": "2019-10-31T15:18:59Z",
      "updated_at": "2019-11-12T23:40:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#discussion_r341199938",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/341199938"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 278,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/341202812",
      "pull_request_review_id": 309949749,
      "id": 341202812,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MTIwMjgxMg==",
      "diff_hunk": "@@ -0,0 +1,389 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <randomenv.h>\n+\n+#include <compat/cpuid.h>\n+#include <crypto/sha512.h>\n+#include <support/cleanse.h>\n+#include <util/time.h> // for GetTime()\n+#ifdef WIN32\n+#include <compat.h> // for Windows API\n+#endif\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <climits>\n+#include <thread>\n+#include <vector>\n+\n+#include <stdint.h>\n+#include <string.h>\n+#ifndef WIN32\n+#include <sys/types.h> // must go before a number of other headers\n+#include <fcntl.h>\n+#include <netinet/in.h>\n+#include <sys/resource.h>\n+#include <sys/socket.h>\n+#include <sys/stat.h>\n+#include <sys/time.h>\n+#include <sys/utsname.h>\n+#include <unistd.h>\n+#endif\n+#ifdef __MACH__\n+#include <mach/mach_time.h>\n+#endif\n+#if HAVE_DECL_GETIFADDRS\n+#include <ifaddrs.h>\n+#endif\n+#if HAVE_DECL_SYSCTLBYNAME\n+#include <sys/sysctl.h>\n+#endif\n+#ifdef __linux__\n+#include <sys/auxv.h>\n+#endif\n+\n+//! Necessary on some platforms\n+extern char** environ;\n+\n+namespace {\n+\n+void RandAddSeedPerfmon(CSHA512& hasher)\n+{\n+#ifdef WIN32\n+    // Don't need this on Linux, OpenSSL automatically uses /dev/urandom\n+    // Seed with the entire set of perfmon data\n+\n+    // This can take up to 2 seconds, so only do it every 10 minutes\n+    static std::atomic<std::chrono::seconds> last_perfmon{std::chrono::seconds{0}};\n+    auto last_time = last_perfmon.load();\n+    auto current_time = GetTime<std::chrono::seconds>();\n+    if (current_time < last_time + std::chrono::minutes{10}) return;\n+    last_perfmon = current_time;\n+\n+    std::vector<unsigned char> vData(250000, 0);\n+    long ret = 0;\n+    unsigned long nSize = 0;\n+    const size_t nMaxSize = 10000000; // Bail out at more than 10MB of performance data\n+    while (true) {\n+        nSize = vData.size();\n+        ret = RegQueryValueExA(HKEY_PERFORMANCE_DATA, \"Global\", nullptr, nullptr, vData.data(), &nSize);\n+        if (ret != ERROR_MORE_DATA || vData.size() >= nMaxSize)\n+            break;\n+        vData.resize(std::max((vData.size() * 3) / 2, nMaxSize)); // Grow size of buffer exponentially\n+    }\n+    RegCloseKey(HKEY_PERFORMANCE_DATA);\n+    if (ret == ERROR_SUCCESS) {\n+        hasher.Write(vData.data(), nSize);\n+        memory_cleanse(vData.data(), nSize);\n+    } else {\n+        // Performance data is only a best-effort attempt at improving the\n+        // situation when the OS randomness (and other sources) aren't\n+        // adequate. As a result, failure to read it is isn't considered critical,\n+        // so we don't call RandFailure().\n+        // TODO: Add logging when the logger is made functional before global\n+        // constructors have been invoked.\n+    }\n+#endif\n+}\n+\n+/** Helper to easily feed data into a CSHA512.\n+ *\n+ * Note that this does not serialize the passed object (like stream.h's << operators do).\n+ * Its raw memory representation is used directly.\n+ */\n+template<typename T>\n+CSHA512& operator<<(CSHA512& hasher, const T& data) {\n+    hasher.Write((const unsigned char*)&data, sizeof(data));\n+    return hasher;\n+}\n+\n+#ifndef WIN32\n+void AddSockaddr(CSHA512& hasher, const struct sockaddr *addr)\n+{\n+    if (addr == nullptr) return;\n+    switch (addr->sa_family) {\n+    case AF_INET:\n+        hasher.Write((const unsigned char*)addr, sizeof(sockaddr_in));\n+        break;\n+    case AF_INET6:\n+        hasher.Write((const unsigned char*)addr, sizeof(sockaddr_in6));\n+        break;\n+    default:\n+        hasher.Write((const unsigned char*)&addr->sa_family, sizeof(addr->sa_family));\n+    }\n+}\n+\n+void AddStat(CSHA512& hasher, const struct stat& sb)\n+{\n+    hasher << sb.st_dev << sb.st_ino << sb.st_mode << sb.st_nlink << sb.st_uid << sb.st_gid << sb.st_size << sb.st_blksize << sb.st_blocks << sb.st_atime << sb.st_mtime << sb.st_ctime;\n+}\n+\n+void AddFile(CSHA512& hasher, const char *path)\n+{\n+    struct stat sb;\n+    int f = open(path, O_RDONLY);\n+    if (f != -1) {\n+        unsigned char fbuf[1024];\n+        int n;\n+        hasher.Write((const unsigned char*)&f, sizeof(f));\n+        if (fstat(f, &sb) == 0) {\n+            AddStat(hasher, sb);\n+        }\n+        do {\n+            n = read(f, fbuf, sizeof(fbuf));\n+            if (n > 0) hasher.Write(fbuf, n);\n+            /* not bothering with EINTR handling. */\n+        } while (n == sizeof(fbuf));\n+        close(f);\n+    }\n+}\n+\n+void AddPath(CSHA512& hasher, const char *path)\n+{\n+    struct stat sb;\n+    if (stat(path, &sb) == 0) {\n+        hasher.Write((const unsigned char*)path, strlen(path) + 1);\n+        AddStat(hasher, sb);\n+    }\n+}\n+#endif\n+\n+void AddSysctl(CSHA512& hasher, const char* path)\n+{\n+#if HAVE_DECL_SYSCTLBYNAME\n+    unsigned char buffer[4096];\n+    size_t siz = 4096;\n+    int ret = sysctlbyname(path, buffer, &siz, nullptr, 0);\n+    if (ret == 0 || (ret == -1 && errno == ENOMEM)) {\n+        hasher.Write((const unsigned char*)path, strlen(path) + 1);\n+        hasher.Write(buffer, std::min<size_t>(siz, 4096));\n+    }\n+#endif\n+}\n+\n+#ifdef HAVE_GETCPUID\n+void AddCPUID(CSHA512& hasher)\n+{\n+    uint32_t ax, bx, cx, dx;\n+    GetCPUID(0, 0, ax, bx, cx, dx);\n+    hasher << ax << bx << cx << dx;\n+    uint32_t max = ax;\n+    for (uint32_t leaf = 1; leaf <= max; ++leaf) {\n+        for (uint32_t subleaf = 0;; ++subleaf) {\n+            GetCPUID(leaf, subleaf, ax, bx, cx, dx);\n+            hasher << leaf << subleaf << ax << bx << cx << dx;\n+            // Iterate over subleaves for leaf 4, 11, 13\n+            if (leaf != 4 && leaf != 11 && leaf != 13) break;\n+            if ((leaf == 4 || leaf == 13) && ax == 0) break;\n+            if (leaf == 11 && (cx & 0xFF00) == 0) break;\n+        }\n+    }\n+}\n+#endif\n+} // namespace\n+\n+void RandAddDynamicEnv(CSHA512& hasher)\n+{\n+    RandAddSeedPerfmon(hasher);\n+\n+#ifdef WIN32\n+    FILETIME ftime;\n+    GetSystemTimeAsFileTime(&ftime);\n+    hasher << ftime;\n+#else\n+#  ifdef __MACH__\n+    hasher << mach_absolute_time();\n+#  else\n+    struct timespec ts;\n+    clock_gettime(CLOCK_MONOTONIC, &ts);\n+    hasher << ts.tv_sec << ts.tv_nsec;\n+#  endif\n+    struct timeval tv;\n+    gettimeofday(&tv, nullptr);\n+    hasher << tv.tv_sec << tv.tv_usec;\n+\n+    // Current resource usage.\n+    struct rusage usage;\n+    if (getrusage(RUSAGE_SELF, &usage) == 0) {\n+        hasher << usage.ru_utime.tv_sec << usage.ru_utime.tv_usec << usage.ru_stime.tv_sec << usage.ru_stime.tv_usec;\n+        hasher << usage.ru_maxrss << usage.ru_minflt << usage.ru_majflt << usage.ru_inblock << usage.ru_oublock;\n+        hasher << usage.ru_nvcsw << usage.ru_nivcsw;\n+    }\n+\n+#ifdef __linux__\n+    AddFile(hasher, \"/proc/diskstats\");\n+    AddFile(hasher, \"/proc/vmstat\");\n+    AddFile(hasher, \"/proc/schedstat\");\n+    AddFile(hasher, \"/proc/zoneinfo\");\n+    AddFile(hasher, \"/proc/meminfo\");\n+    AddFile(hasher, \"/proc/softirqs\");\n+    AddFile(hasher, \"/proc/stat\");\n+    AddFile(hasher, \"/proc/self/status\");\n+#endif\n+#endif\n+\n+    AddSysctl(hasher, \"vm.loadavg\");\n+    AddSysctl(hasher, \"vm.swapusage\");\n+\n+    // Stack and heap location\n+    void* addr = malloc(4097);\n+    hasher << &addr << addr;\n+    free(addr);\n+}\n+\n+void RandAddStaticEnv(CSHA512& hasher)\n+{\n+    // Some compile-time static properties\n+    uint32_t x;\n+    x = ((CHAR_MIN < 0) << 30) + (sizeof(void *) << 16) + (sizeof(long) << 8) + sizeof(int);\n+    hasher << x;\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__) && defined(__GNUC_PATCHLEVEL__)\n+    x = (__GNUC_PATCHLEVEL__ << 16) + (__GNUC_MINOR__ << 8) + __GNUC__;\n+    hasher << x;\n+#endif\n+#if defined(_MSC_VER)\n+    x = _MSC_VER;\n+    hasher << x;\n+#endif\n+#if defined(__STDC_VERSION__)\n+    x = __STDC_VERSION__;\n+    hasher << x;\n+#endif\n+#if defined(_XOPEN_VERSION)\n+    x = _XOPEN_VERSION;\n+    hasher << x;\n+#endif\n+\n+#ifdef __linux__\n+    // Information available through getauxval()\n+#  ifdef AT_HWCAP\n+    hasher << getauxval(AT_HWCAP);\n+#  endif\n+#  ifdef AT_HWCAP2\n+    hasher << getauxval(AT_HWCAP2);\n+#  endif\n+#  ifdef AT_RANDOM\n+    hasher << getauxval(AT_RANDOM);\n+#  endif\n+#  ifdef AT_PLATFORM\n+    const char* platform_str = (const char*)getauxval(AT_PLATFORM);\n+    if (platform_str) hasher.Write((const unsigned char*)platform_str, strlen(platform_str) + 1);\n+#  endif\n+#  ifdef AT_EXECFN\n+    const char* exec_str = (const char*)getauxval(AT_EXECFN);\n+    if (exec_str) hasher.Write((const unsigned char*)exec_str, strlen(exec_str) + 1);\n+#  endif\n+#endif // __linux__\n+\n+#ifdef HAVE_GETCPUID\n+    AddCPUID(hasher);\n+#endif\n+\n+    // Memory locations\n+    hasher << &x << &RandAddStaticEnv << &malloc << &errno << &environ;\n+\n+    // Hostname\n+    char hname[256];\n+    if (gethostname(hname, 256) == 0) {\n+        hasher.Write((const unsigned char*)hname, strnlen(hname, 256));\n+    }\n+\n+#if HAVE_DECL_GETIFADDRS\n+    // Network interfaces\n+    struct ifaddrs *ifad = NULL;\n+    getifaddrs(&ifad);\n+    struct ifaddrs *ifit = ifad;\n+    while (ifit != NULL) {\n+        hasher.Write((const unsigned char*)&ifit, sizeof(ifit));\n+        hasher.Write((const unsigned char*)ifit->ifa_name, strlen(ifit->ifa_name) + 1);\n+        hasher.Write((const unsigned char*)&ifit->ifa_flags, sizeof(ifit->ifa_flags));\n+        AddSockaddr(hasher, ifit->ifa_addr);\n+        AddSockaddr(hasher, ifit->ifa_netmask);\n+        AddSockaddr(hasher, ifit->ifa_dstaddr);\n+        ifit = ifit->ifa_next;\n+    }\n+    freeifaddrs(ifad);\n+#endif\n+\n+#ifndef WIN32\n+    // UNIX kernel information\n+    struct utsname name;\n+    if (uname(&name) != -1) {\n+        hasher.Write((const unsigned char*)&name.sysname, strlen(name.sysname) + 1);\n+        hasher.Write((const unsigned char*)&name.nodename, strlen(name.nodename) + 1);\n+        hasher.Write((const unsigned char*)&name.release, strlen(name.release) + 1);\n+        hasher.Write((const unsigned char*)&name.version, strlen(name.version) + 1);\n+        hasher.Write((const unsigned char*)&name.machine, strlen(name.machine) + 1);\n+    }\n+\n+    /* Path and filesystem provided data */\n+    AddPath(hasher, \"/\");\n+    AddPath(hasher, \".\");\n+    AddPath(hasher, \"/tmp\");\n+    AddPath(hasher, \"/home\");\n+    AddPath(hasher, \"/proc\");\n+#ifdef __linux__\n+    AddFile(hasher, \"/proc/cmdline\");\n+    AddFile(hasher, \"/proc/cpuinfo\");\n+    AddFile(hasher, \"/proc/version\");\n+#endif\n+    AddFile(hasher, \"/etc/passwd\");\n+    AddFile(hasher, \"/etc/group\");\n+    AddFile(hasher, \"/etc/hosts\");\n+    AddFile(hasher, \"/etc/resolv.conf\");\n+    AddFile(hasher, \"/etc/timezone\");\n+    AddFile(hasher, \"/etc/localtime\");\n+    AddFile(hasher, \"/etc/hostconfig\");",
      "path": "src/randomenv.cpp",
      "position": null,
      "original_position": 343,
      "commit_id": "d1c02775aa74a0610809ac54bb241ddad61d2d8c",
      "original_commit_id": "8a27be0fb0065d897d4e55a4f7367d54f8914d77",
      "in_reply_to_id": null,
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I couldn't find `/etc/hostconfig` on any of the platforms I tested (macOS, *BSD, Linux). Seems it used to exist on at least macOS, but was removed in `10.10`.",
      "created_at": "2019-10-31T15:23:34Z",
      "updated_at": "2019-11-12T23:40:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#discussion_r341202812",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/341202812"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 343,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/341203400",
      "pull_request_review_id": 309967223,
      "id": 341203400,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MTIwMzQwMA==",
      "diff_hunk": "@@ -0,0 +1,389 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <randomenv.h>\n+\n+#include <compat/cpuid.h>\n+#include <crypto/sha512.h>\n+#include <support/cleanse.h>\n+#include <util/time.h> // for GetTime()\n+#ifdef WIN32\n+#include <compat.h> // for Windows API\n+#endif\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <climits>\n+#include <thread>\n+#include <vector>\n+\n+#include <stdint.h>\n+#include <string.h>\n+#ifndef WIN32\n+#include <sys/types.h> // must go before a number of other headers\n+#include <fcntl.h>\n+#include <netinet/in.h>\n+#include <sys/resource.h>\n+#include <sys/socket.h>\n+#include <sys/stat.h>\n+#include <sys/time.h>\n+#include <sys/utsname.h>\n+#include <unistd.h>\n+#endif\n+#ifdef __MACH__\n+#include <mach/mach_time.h>\n+#endif\n+#if HAVE_DECL_GETIFADDRS\n+#include <ifaddrs.h>\n+#endif\n+#if HAVE_DECL_SYSCTLBYNAME\n+#include <sys/sysctl.h>\n+#endif\n+#ifdef __linux__\n+#include <sys/auxv.h>\n+#endif\n+\n+//! Necessary on some platforms\n+extern char** environ;\n+\n+namespace {\n+\n+void RandAddSeedPerfmon(CSHA512& hasher)\n+{\n+#ifdef WIN32\n+    // Don't need this on Linux, OpenSSL automatically uses /dev/urandom\n+    // Seed with the entire set of perfmon data\n+\n+    // This can take up to 2 seconds, so only do it every 10 minutes\n+    static std::atomic<std::chrono::seconds> last_perfmon{std::chrono::seconds{0}};\n+    auto last_time = last_perfmon.load();\n+    auto current_time = GetTime<std::chrono::seconds>();\n+    if (current_time < last_time + std::chrono::minutes{10}) return;\n+    last_perfmon = current_time;\n+\n+    std::vector<unsigned char> vData(250000, 0);\n+    long ret = 0;\n+    unsigned long nSize = 0;\n+    const size_t nMaxSize = 10000000; // Bail out at more than 10MB of performance data\n+    while (true) {\n+        nSize = vData.size();\n+        ret = RegQueryValueExA(HKEY_PERFORMANCE_DATA, \"Global\", nullptr, nullptr, vData.data(), &nSize);\n+        if (ret != ERROR_MORE_DATA || vData.size() >= nMaxSize)\n+            break;\n+        vData.resize(std::max((vData.size() * 3) / 2, nMaxSize)); // Grow size of buffer exponentially\n+    }\n+    RegCloseKey(HKEY_PERFORMANCE_DATA);\n+    if (ret == ERROR_SUCCESS) {\n+        hasher.Write(vData.data(), nSize);\n+        memory_cleanse(vData.data(), nSize);\n+    } else {\n+        // Performance data is only a best-effort attempt at improving the\n+        // situation when the OS randomness (and other sources) aren't\n+        // adequate. As a result, failure to read it is isn't considered critical,\n+        // so we don't call RandFailure().\n+        // TODO: Add logging when the logger is made functional before global\n+        // constructors have been invoked.\n+    }\n+#endif\n+}\n+\n+/** Helper to easily feed data into a CSHA512.\n+ *\n+ * Note that this does not serialize the passed object (like stream.h's << operators do).\n+ * Its raw memory representation is used directly.\n+ */\n+template<typename T>\n+CSHA512& operator<<(CSHA512& hasher, const T& data) {\n+    hasher.Write((const unsigned char*)&data, sizeof(data));\n+    return hasher;\n+}\n+\n+#ifndef WIN32\n+void AddSockaddr(CSHA512& hasher, const struct sockaddr *addr)\n+{\n+    if (addr == nullptr) return;\n+    switch (addr->sa_family) {\n+    case AF_INET:\n+        hasher.Write((const unsigned char*)addr, sizeof(sockaddr_in));\n+        break;\n+    case AF_INET6:\n+        hasher.Write((const unsigned char*)addr, sizeof(sockaddr_in6));\n+        break;\n+    default:\n+        hasher.Write((const unsigned char*)&addr->sa_family, sizeof(addr->sa_family));\n+    }\n+}\n+\n+void AddStat(CSHA512& hasher, const struct stat& sb)\n+{\n+    hasher << sb.st_dev << sb.st_ino << sb.st_mode << sb.st_nlink << sb.st_uid << sb.st_gid << sb.st_size << sb.st_blksize << sb.st_blocks << sb.st_atime << sb.st_mtime << sb.st_ctime;\n+}\n+\n+void AddFile(CSHA512& hasher, const char *path)\n+{\n+    struct stat sb;\n+    int f = open(path, O_RDONLY);\n+    if (f != -1) {\n+        unsigned char fbuf[1024];\n+        int n;\n+        hasher.Write((const unsigned char*)&f, sizeof(f));\n+        if (fstat(f, &sb) == 0) {\n+            AddStat(hasher, sb);\n+        }\n+        do {\n+            n = read(f, fbuf, sizeof(fbuf));\n+            if (n > 0) hasher.Write(fbuf, n);\n+            /* not bothering with EINTR handling. */\n+        } while (n == sizeof(fbuf));\n+        close(f);\n+    }\n+}\n+\n+void AddPath(CSHA512& hasher, const char *path)\n+{\n+    struct stat sb;\n+    if (stat(path, &sb) == 0) {\n+        hasher.Write((const unsigned char*)path, strlen(path) + 1);\n+        AddStat(hasher, sb);\n+    }\n+}\n+#endif\n+\n+void AddSysctl(CSHA512& hasher, const char* path)\n+{\n+#if HAVE_DECL_SYSCTLBYNAME\n+    unsigned char buffer[4096];\n+    size_t siz = 4096;\n+    int ret = sysctlbyname(path, buffer, &siz, nullptr, 0);\n+    if (ret == 0 || (ret == -1 && errno == ENOMEM)) {\n+        hasher.Write((const unsigned char*)path, strlen(path) + 1);\n+        hasher.Write(buffer, std::min<size_t>(siz, 4096));\n+    }\n+#endif\n+}\n+\n+#ifdef HAVE_GETCPUID\n+void AddCPUID(CSHA512& hasher)\n+{\n+    uint32_t ax, bx, cx, dx;\n+    GetCPUID(0, 0, ax, bx, cx, dx);\n+    hasher << ax << bx << cx << dx;\n+    uint32_t max = ax;\n+    for (uint32_t leaf = 1; leaf <= max; ++leaf) {\n+        for (uint32_t subleaf = 0;; ++subleaf) {\n+            GetCPUID(leaf, subleaf, ax, bx, cx, dx);\n+            hasher << leaf << subleaf << ax << bx << cx << dx;\n+            // Iterate over subleaves for leaf 4, 11, 13\n+            if (leaf != 4 && leaf != 11 && leaf != 13) break;\n+            if ((leaf == 4 || leaf == 13) && ax == 0) break;\n+            if (leaf == 11 && (cx & 0xFF00) == 0) break;\n+        }\n+    }\n+}\n+#endif\n+} // namespace\n+\n+void RandAddDynamicEnv(CSHA512& hasher)\n+{\n+    RandAddSeedPerfmon(hasher);\n+\n+#ifdef WIN32\n+    FILETIME ftime;\n+    GetSystemTimeAsFileTime(&ftime);\n+    hasher << ftime;\n+#else\n+#  ifdef __MACH__\n+    hasher << mach_absolute_time();\n+#  else\n+    struct timespec ts;\n+    clock_gettime(CLOCK_MONOTONIC, &ts);\n+    hasher << ts.tv_sec << ts.tv_nsec;\n+#  endif\n+    struct timeval tv;\n+    gettimeofday(&tv, nullptr);\n+    hasher << tv.tv_sec << tv.tv_usec;\n+\n+    // Current resource usage.\n+    struct rusage usage;\n+    if (getrusage(RUSAGE_SELF, &usage) == 0) {\n+        hasher << usage.ru_utime.tv_sec << usage.ru_utime.tv_usec << usage.ru_stime.tv_sec << usage.ru_stime.tv_usec;\n+        hasher << usage.ru_maxrss << usage.ru_minflt << usage.ru_majflt << usage.ru_inblock << usage.ru_oublock;\n+        hasher << usage.ru_nvcsw << usage.ru_nivcsw;\n+    }\n+\n+#ifdef __linux__\n+    AddFile(hasher, \"/proc/diskstats\");\n+    AddFile(hasher, \"/proc/vmstat\");\n+    AddFile(hasher, \"/proc/schedstat\");\n+    AddFile(hasher, \"/proc/zoneinfo\");\n+    AddFile(hasher, \"/proc/meminfo\");\n+    AddFile(hasher, \"/proc/softirqs\");\n+    AddFile(hasher, \"/proc/stat\");\n+    AddFile(hasher, \"/proc/self/status\");\n+#endif\n+#endif\n+\n+    AddSysctl(hasher, \"vm.loadavg\");\n+    AddSysctl(hasher, \"vm.swapusage\");\n+\n+    // Stack and heap location\n+    void* addr = malloc(4097);\n+    hasher << &addr << addr;\n+    free(addr);\n+}\n+\n+void RandAddStaticEnv(CSHA512& hasher)\n+{\n+    // Some compile-time static properties\n+    uint32_t x;\n+    x = ((CHAR_MIN < 0) << 30) + (sizeof(void *) << 16) + (sizeof(long) << 8) + sizeof(int);\n+    hasher << x;\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__) && defined(__GNUC_PATCHLEVEL__)\n+    x = (__GNUC_PATCHLEVEL__ << 16) + (__GNUC_MINOR__ << 8) + __GNUC__;\n+    hasher << x;\n+#endif\n+#if defined(_MSC_VER)\n+    x = _MSC_VER;\n+    hasher << x;\n+#endif\n+#if defined(__STDC_VERSION__)\n+    x = __STDC_VERSION__;\n+    hasher << x;\n+#endif\n+#if defined(_XOPEN_VERSION)\n+    x = _XOPEN_VERSION;\n+    hasher << x;\n+#endif\n+\n+#ifdef __linux__\n+    // Information available through getauxval()\n+#  ifdef AT_HWCAP\n+    hasher << getauxval(AT_HWCAP);\n+#  endif\n+#  ifdef AT_HWCAP2\n+    hasher << getauxval(AT_HWCAP2);\n+#  endif\n+#  ifdef AT_RANDOM\n+    hasher << getauxval(AT_RANDOM);",
      "path": "src/randomenv.cpp",
      "position": null,
      "original_position": 273,
      "commit_id": "d1c02775aa74a0610809ac54bb241ddad61d2d8c",
      "original_commit_id": "8a27be0fb0065d897d4e55a4f7367d54f8914d77",
      "in_reply_to_id": null,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`getauxval(AT_RANDOM)`, if present, returns a pointer to 16 bytes of random data; it's not itself random data",
      "created_at": "2019-10-31T15:24:34Z",
      "updated_at": "2019-11-12T23:40:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#discussion_r341203400",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/341203400"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 273,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/341216159",
      "pull_request_review_id": 309949749,
      "id": 341216159,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MTIxNjE1OQ==",
      "diff_hunk": "@@ -0,0 +1,389 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <randomenv.h>\n+\n+#include <compat/cpuid.h>\n+#include <crypto/sha512.h>\n+#include <support/cleanse.h>\n+#include <util/time.h> // for GetTime()\n+#ifdef WIN32\n+#include <compat.h> // for Windows API\n+#endif\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <climits>\n+#include <thread>\n+#include <vector>\n+\n+#include <stdint.h>\n+#include <string.h>\n+#ifndef WIN32\n+#include <sys/types.h> // must go before a number of other headers\n+#include <fcntl.h>\n+#include <netinet/in.h>\n+#include <sys/resource.h>\n+#include <sys/socket.h>\n+#include <sys/stat.h>\n+#include <sys/time.h>\n+#include <sys/utsname.h>\n+#include <unistd.h>\n+#endif\n+#ifdef __MACH__\n+#include <mach/mach_time.h>\n+#endif\n+#if HAVE_DECL_GETIFADDRS\n+#include <ifaddrs.h>\n+#endif\n+#if HAVE_DECL_SYSCTLBYNAME\n+#include <sys/sysctl.h>\n+#endif\n+#ifdef __linux__\n+#include <sys/auxv.h>\n+#endif\n+\n+//! Necessary on some platforms\n+extern char** environ;\n+\n+namespace {\n+\n+void RandAddSeedPerfmon(CSHA512& hasher)\n+{\n+#ifdef WIN32\n+    // Don't need this on Linux, OpenSSL automatically uses /dev/urandom\n+    // Seed with the entire set of perfmon data\n+\n+    // This can take up to 2 seconds, so only do it every 10 minutes\n+    static std::atomic<std::chrono::seconds> last_perfmon{std::chrono::seconds{0}};\n+    auto last_time = last_perfmon.load();\n+    auto current_time = GetTime<std::chrono::seconds>();\n+    if (current_time < last_time + std::chrono::minutes{10}) return;\n+    last_perfmon = current_time;\n+\n+    std::vector<unsigned char> vData(250000, 0);\n+    long ret = 0;\n+    unsigned long nSize = 0;\n+    const size_t nMaxSize = 10000000; // Bail out at more than 10MB of performance data\n+    while (true) {\n+        nSize = vData.size();\n+        ret = RegQueryValueExA(HKEY_PERFORMANCE_DATA, \"Global\", nullptr, nullptr, vData.data(), &nSize);\n+        if (ret != ERROR_MORE_DATA || vData.size() >= nMaxSize)\n+            break;\n+        vData.resize(std::max((vData.size() * 3) / 2, nMaxSize)); // Grow size of buffer exponentially\n+    }\n+    RegCloseKey(HKEY_PERFORMANCE_DATA);\n+    if (ret == ERROR_SUCCESS) {\n+        hasher.Write(vData.data(), nSize);\n+        memory_cleanse(vData.data(), nSize);\n+    } else {\n+        // Performance data is only a best-effort attempt at improving the\n+        // situation when the OS randomness (and other sources) aren't\n+        // adequate. As a result, failure to read it is isn't considered critical,\n+        // so we don't call RandFailure().\n+        // TODO: Add logging when the logger is made functional before global\n+        // constructors have been invoked.\n+    }\n+#endif\n+}\n+\n+/** Helper to easily feed data into a CSHA512.\n+ *\n+ * Note that this does not serialize the passed object (like stream.h's << operators do).\n+ * Its raw memory representation is used directly.\n+ */\n+template<typename T>\n+CSHA512& operator<<(CSHA512& hasher, const T& data) {\n+    hasher.Write((const unsigned char*)&data, sizeof(data));\n+    return hasher;\n+}\n+\n+#ifndef WIN32\n+void AddSockaddr(CSHA512& hasher, const struct sockaddr *addr)\n+{\n+    if (addr == nullptr) return;\n+    switch (addr->sa_family) {\n+    case AF_INET:\n+        hasher.Write((const unsigned char*)addr, sizeof(sockaddr_in));\n+        break;\n+    case AF_INET6:\n+        hasher.Write((const unsigned char*)addr, sizeof(sockaddr_in6));\n+        break;\n+    default:\n+        hasher.Write((const unsigned char*)&addr->sa_family, sizeof(addr->sa_family));\n+    }\n+}\n+\n+void AddStat(CSHA512& hasher, const struct stat& sb)\n+{\n+    hasher << sb.st_dev << sb.st_ino << sb.st_mode << sb.st_nlink << sb.st_uid << sb.st_gid << sb.st_size << sb.st_blksize << sb.st_blocks << sb.st_atime << sb.st_mtime << sb.st_ctime;\n+}\n+\n+void AddFile(CSHA512& hasher, const char *path)\n+{\n+    struct stat sb;\n+    int f = open(path, O_RDONLY);\n+    if (f != -1) {\n+        unsigned char fbuf[1024];\n+        int n;\n+        hasher.Write((const unsigned char*)&f, sizeof(f));\n+        if (fstat(f, &sb) == 0) {\n+            AddStat(hasher, sb);\n+        }\n+        do {\n+            n = read(f, fbuf, sizeof(fbuf));\n+            if (n > 0) hasher.Write(fbuf, n);\n+            /* not bothering with EINTR handling. */\n+        } while (n == sizeof(fbuf));\n+        close(f);\n+    }\n+}\n+\n+void AddPath(CSHA512& hasher, const char *path)\n+{\n+    struct stat sb;\n+    if (stat(path, &sb) == 0) {\n+        hasher.Write((const unsigned char*)path, strlen(path) + 1);\n+        AddStat(hasher, sb);\n+    }\n+}\n+#endif\n+\n+void AddSysctl(CSHA512& hasher, const char* path)\n+{\n+#if HAVE_DECL_SYSCTLBYNAME\n+    unsigned char buffer[4096];\n+    size_t siz = 4096;\n+    int ret = sysctlbyname(path, buffer, &siz, nullptr, 0);\n+    if (ret == 0 || (ret == -1 && errno == ENOMEM)) {\n+        hasher.Write((const unsigned char*)path, strlen(path) + 1);\n+        hasher.Write(buffer, std::min<size_t>(siz, 4096));\n+    }\n+#endif\n+}\n+\n+#ifdef HAVE_GETCPUID\n+void AddCPUID(CSHA512& hasher)\n+{\n+    uint32_t ax, bx, cx, dx;\n+    GetCPUID(0, 0, ax, bx, cx, dx);\n+    hasher << ax << bx << cx << dx;\n+    uint32_t max = ax;\n+    for (uint32_t leaf = 1; leaf <= max; ++leaf) {\n+        for (uint32_t subleaf = 0;; ++subleaf) {\n+            GetCPUID(leaf, subleaf, ax, bx, cx, dx);\n+            hasher << leaf << subleaf << ax << bx << cx << dx;\n+            // Iterate over subleaves for leaf 4, 11, 13\n+            if (leaf != 4 && leaf != 11 && leaf != 13) break;\n+            if ((leaf == 4 || leaf == 13) && ax == 0) break;\n+            if (leaf == 11 && (cx & 0xFF00) == 0) break;\n+        }\n+    }\n+}\n+#endif\n+} // namespace\n+\n+void RandAddDynamicEnv(CSHA512& hasher)\n+{\n+    RandAddSeedPerfmon(hasher);\n+\n+#ifdef WIN32\n+    FILETIME ftime;\n+    GetSystemTimeAsFileTime(&ftime);\n+    hasher << ftime;\n+#else\n+#  ifdef __MACH__\n+    hasher << mach_absolute_time();\n+#  else\n+    struct timespec ts;\n+    clock_gettime(CLOCK_MONOTONIC, &ts);",
      "path": "src/randomenv.cpp",
      "position": 234,
      "original_position": 205,
      "commit_id": "d1c02775aa74a0610809ac54bb241ddad61d2d8c",
      "original_commit_id": "8a27be0fb0065d897d4e55a4f7367d54f8914d77",
      "in_reply_to_id": null,
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It looks like upstream OpenSSL uses `CLOCK_REALTIME` when generating a timestamp. Could you explain why `CLOCK_MONOTONIC` is the better choice for us? I assume it's TODO with it being less manipulable and kernel compatibility?",
      "created_at": "2019-10-31T15:45:46Z",
      "updated_at": "2019-11-12T23:40:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#discussion_r341216159",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/341216159"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 234,
      "original_line": 234,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/341217176",
      "pull_request_review_id": 309949749,
      "id": 341217176,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MTIxNzE3Ng==",
      "diff_hunk": "@@ -0,0 +1,389 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <randomenv.h>\n+\n+#include <compat/cpuid.h>\n+#include <crypto/sha512.h>\n+#include <support/cleanse.h>\n+#include <util/time.h> // for GetTime()\n+#ifdef WIN32\n+#include <compat.h> // for Windows API\n+#endif\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <climits>\n+#include <thread>\n+#include <vector>\n+\n+#include <stdint.h>\n+#include <string.h>\n+#ifndef WIN32\n+#include <sys/types.h> // must go before a number of other headers\n+#include <fcntl.h>\n+#include <netinet/in.h>\n+#include <sys/resource.h>\n+#include <sys/socket.h>\n+#include <sys/stat.h>\n+#include <sys/time.h>\n+#include <sys/utsname.h>\n+#include <unistd.h>\n+#endif\n+#ifdef __MACH__\n+#include <mach/mach_time.h>\n+#endif\n+#if HAVE_DECL_GETIFADDRS\n+#include <ifaddrs.h>\n+#endif\n+#if HAVE_DECL_SYSCTLBYNAME\n+#include <sys/sysctl.h>\n+#endif\n+#ifdef __linux__\n+#include <sys/auxv.h>\n+#endif\n+\n+//! Necessary on some platforms\n+extern char** environ;\n+\n+namespace {\n+\n+void RandAddSeedPerfmon(CSHA512& hasher)\n+{\n+#ifdef WIN32\n+    // Don't need this on Linux, OpenSSL automatically uses /dev/urandom\n+    // Seed with the entire set of perfmon data\n+\n+    // This can take up to 2 seconds, so only do it every 10 minutes\n+    static std::atomic<std::chrono::seconds> last_perfmon{std::chrono::seconds{0}};\n+    auto last_time = last_perfmon.load();\n+    auto current_time = GetTime<std::chrono::seconds>();\n+    if (current_time < last_time + std::chrono::minutes{10}) return;\n+    last_perfmon = current_time;\n+\n+    std::vector<unsigned char> vData(250000, 0);\n+    long ret = 0;\n+    unsigned long nSize = 0;\n+    const size_t nMaxSize = 10000000; // Bail out at more than 10MB of performance data\n+    while (true) {\n+        nSize = vData.size();\n+        ret = RegQueryValueExA(HKEY_PERFORMANCE_DATA, \"Global\", nullptr, nullptr, vData.data(), &nSize);\n+        if (ret != ERROR_MORE_DATA || vData.size() >= nMaxSize)\n+            break;\n+        vData.resize(std::max((vData.size() * 3) / 2, nMaxSize)); // Grow size of buffer exponentially\n+    }\n+    RegCloseKey(HKEY_PERFORMANCE_DATA);\n+    if (ret == ERROR_SUCCESS) {\n+        hasher.Write(vData.data(), nSize);\n+        memory_cleanse(vData.data(), nSize);\n+    } else {\n+        // Performance data is only a best-effort attempt at improving the\n+        // situation when the OS randomness (and other sources) aren't\n+        // adequate. As a result, failure to read it is isn't considered critical,\n+        // so we don't call RandFailure().\n+        // TODO: Add logging when the logger is made functional before global\n+        // constructors have been invoked.\n+    }\n+#endif\n+}\n+\n+/** Helper to easily feed data into a CSHA512.\n+ *\n+ * Note that this does not serialize the passed object (like stream.h's << operators do).\n+ * Its raw memory representation is used directly.\n+ */\n+template<typename T>\n+CSHA512& operator<<(CSHA512& hasher, const T& data) {\n+    hasher.Write((const unsigned char*)&data, sizeof(data));\n+    return hasher;\n+}\n+\n+#ifndef WIN32\n+void AddSockaddr(CSHA512& hasher, const struct sockaddr *addr)\n+{\n+    if (addr == nullptr) return;\n+    switch (addr->sa_family) {\n+    case AF_INET:\n+        hasher.Write((const unsigned char*)addr, sizeof(sockaddr_in));\n+        break;\n+    case AF_INET6:\n+        hasher.Write((const unsigned char*)addr, sizeof(sockaddr_in6));\n+        break;\n+    default:\n+        hasher.Write((const unsigned char*)&addr->sa_family, sizeof(addr->sa_family));\n+    }\n+}\n+\n+void AddStat(CSHA512& hasher, const struct stat& sb)\n+{\n+    hasher << sb.st_dev << sb.st_ino << sb.st_mode << sb.st_nlink << sb.st_uid << sb.st_gid << sb.st_size << sb.st_blksize << sb.st_blocks << sb.st_atime << sb.st_mtime << sb.st_ctime;\n+}\n+\n+void AddFile(CSHA512& hasher, const char *path)\n+{\n+    struct stat sb;\n+    int f = open(path, O_RDONLY);\n+    if (f != -1) {\n+        unsigned char fbuf[1024];\n+        int n;\n+        hasher.Write((const unsigned char*)&f, sizeof(f));\n+        if (fstat(f, &sb) == 0) {\n+            AddStat(hasher, sb);\n+        }\n+        do {\n+            n = read(f, fbuf, sizeof(fbuf));\n+            if (n > 0) hasher.Write(fbuf, n);\n+            /* not bothering with EINTR handling. */\n+        } while (n == sizeof(fbuf));\n+        close(f);\n+    }\n+}\n+\n+void AddPath(CSHA512& hasher, const char *path)\n+{\n+    struct stat sb;\n+    if (stat(path, &sb) == 0) {\n+        hasher.Write((const unsigned char*)path, strlen(path) + 1);\n+        AddStat(hasher, sb);\n+    }\n+}\n+#endif\n+\n+void AddSysctl(CSHA512& hasher, const char* path)\n+{\n+#if HAVE_DECL_SYSCTLBYNAME\n+    unsigned char buffer[4096];\n+    size_t siz = 4096;\n+    int ret = sysctlbyname(path, buffer, &siz, nullptr, 0);\n+    if (ret == 0 || (ret == -1 && errno == ENOMEM)) {\n+        hasher.Write((const unsigned char*)path, strlen(path) + 1);\n+        hasher.Write(buffer, std::min<size_t>(siz, 4096));\n+    }\n+#endif\n+}\n+\n+#ifdef HAVE_GETCPUID\n+void AddCPUID(CSHA512& hasher)\n+{\n+    uint32_t ax, bx, cx, dx;\n+    GetCPUID(0, 0, ax, bx, cx, dx);\n+    hasher << ax << bx << cx << dx;\n+    uint32_t max = ax;\n+    for (uint32_t leaf = 1; leaf <= max; ++leaf) {\n+        for (uint32_t subleaf = 0;; ++subleaf) {\n+            GetCPUID(leaf, subleaf, ax, bx, cx, dx);\n+            hasher << leaf << subleaf << ax << bx << cx << dx;\n+            // Iterate over subleaves for leaf 4, 11, 13\n+            if (leaf != 4 && leaf != 11 && leaf != 13) break;\n+            if ((leaf == 4 || leaf == 13) && ax == 0) break;\n+            if (leaf == 11 && (cx & 0xFF00) == 0) break;\n+        }\n+    }\n+}\n+#endif\n+} // namespace\n+\n+void RandAddDynamicEnv(CSHA512& hasher)\n+{\n+    RandAddSeedPerfmon(hasher);\n+\n+#ifdef WIN32\n+    FILETIME ftime;\n+    GetSystemTimeAsFileTime(&ftime);\n+    hasher << ftime;\n+#else\n+#  ifdef __MACH__\n+    hasher << mach_absolute_time();",
      "path": "src/randomenv.cpp",
      "position": null,
      "original_position": 202,
      "commit_id": "d1c02775aa74a0610809ac54bb241ddad61d2d8c",
      "original_commit_id": "8a27be0fb0065d897d4e55a4f7367d54f8914d77",
      "in_reply_to_id": null,
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "There's not a heap of documentation on  `mach_absolute_time` and I can't find any calls to it in recent OpenSSL, however looks like it's available for macOS versions > 10.9. `/usr/include/mach/mach_time.h`.",
      "created_at": "2019-10-31T15:47:30Z",
      "updated_at": "2019-11-12T23:40:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#discussion_r341217176",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/341217176"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 202,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/341304182",
      "pull_request_review_id": 310099648,
      "id": 341304182,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MTMwNDE4Mg==",
      "diff_hunk": "@@ -0,0 +1,389 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <randomenv.h>\n+\n+#include <compat/cpuid.h>\n+#include <crypto/sha512.h>\n+#include <support/cleanse.h>\n+#include <util/time.h> // for GetTime()\n+#ifdef WIN32\n+#include <compat.h> // for Windows API\n+#endif\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <climits>\n+#include <thread>\n+#include <vector>\n+\n+#include <stdint.h>\n+#include <string.h>\n+#ifndef WIN32\n+#include <sys/types.h> // must go before a number of other headers\n+#include <fcntl.h>\n+#include <netinet/in.h>\n+#include <sys/resource.h>\n+#include <sys/socket.h>\n+#include <sys/stat.h>\n+#include <sys/time.h>\n+#include <sys/utsname.h>\n+#include <unistd.h>\n+#endif\n+#ifdef __MACH__\n+#include <mach/mach_time.h>\n+#endif\n+#if HAVE_DECL_GETIFADDRS\n+#include <ifaddrs.h>\n+#endif\n+#if HAVE_DECL_SYSCTLBYNAME\n+#include <sys/sysctl.h>\n+#endif\n+#ifdef __linux__\n+#include <sys/auxv.h>\n+#endif\n+\n+//! Necessary on some platforms\n+extern char** environ;\n+\n+namespace {\n+\n+void RandAddSeedPerfmon(CSHA512& hasher)\n+{\n+#ifdef WIN32\n+    // Don't need this on Linux, OpenSSL automatically uses /dev/urandom\n+    // Seed with the entire set of perfmon data\n+\n+    // This can take up to 2 seconds, so only do it every 10 minutes\n+    static std::atomic<std::chrono::seconds> last_perfmon{std::chrono::seconds{0}};\n+    auto last_time = last_perfmon.load();\n+    auto current_time = GetTime<std::chrono::seconds>();\n+    if (current_time < last_time + std::chrono::minutes{10}) return;\n+    last_perfmon = current_time;\n+\n+    std::vector<unsigned char> vData(250000, 0);\n+    long ret = 0;\n+    unsigned long nSize = 0;\n+    const size_t nMaxSize = 10000000; // Bail out at more than 10MB of performance data\n+    while (true) {\n+        nSize = vData.size();\n+        ret = RegQueryValueExA(HKEY_PERFORMANCE_DATA, \"Global\", nullptr, nullptr, vData.data(), &nSize);\n+        if (ret != ERROR_MORE_DATA || vData.size() >= nMaxSize)\n+            break;\n+        vData.resize(std::max((vData.size() * 3) / 2, nMaxSize)); // Grow size of buffer exponentially\n+    }\n+    RegCloseKey(HKEY_PERFORMANCE_DATA);\n+    if (ret == ERROR_SUCCESS) {\n+        hasher.Write(vData.data(), nSize);\n+        memory_cleanse(vData.data(), nSize);\n+    } else {\n+        // Performance data is only a best-effort attempt at improving the\n+        // situation when the OS randomness (and other sources) aren't\n+        // adequate. As a result, failure to read it is isn't considered critical,\n+        // so we don't call RandFailure().\n+        // TODO: Add logging when the logger is made functional before global\n+        // constructors have been invoked.\n+    }\n+#endif\n+}\n+\n+/** Helper to easily feed data into a CSHA512.\n+ *\n+ * Note that this does not serialize the passed object (like stream.h's << operators do).\n+ * Its raw memory representation is used directly.\n+ */\n+template<typename T>\n+CSHA512& operator<<(CSHA512& hasher, const T& data) {\n+    hasher.Write((const unsigned char*)&data, sizeof(data));\n+    return hasher;\n+}\n+\n+#ifndef WIN32\n+void AddSockaddr(CSHA512& hasher, const struct sockaddr *addr)\n+{\n+    if (addr == nullptr) return;\n+    switch (addr->sa_family) {\n+    case AF_INET:\n+        hasher.Write((const unsigned char*)addr, sizeof(sockaddr_in));\n+        break;\n+    case AF_INET6:\n+        hasher.Write((const unsigned char*)addr, sizeof(sockaddr_in6));\n+        break;\n+    default:\n+        hasher.Write((const unsigned char*)&addr->sa_family, sizeof(addr->sa_family));\n+    }\n+}\n+\n+void AddStat(CSHA512& hasher, const struct stat& sb)\n+{\n+    hasher << sb.st_dev << sb.st_ino << sb.st_mode << sb.st_nlink << sb.st_uid << sb.st_gid << sb.st_size << sb.st_blksize << sb.st_blocks << sb.st_atime << sb.st_mtime << sb.st_ctime;\n+}\n+\n+void AddFile(CSHA512& hasher, const char *path)\n+{\n+    struct stat sb;\n+    int f = open(path, O_RDONLY);\n+    if (f != -1) {\n+        unsigned char fbuf[1024];\n+        int n;\n+        hasher.Write((const unsigned char*)&f, sizeof(f));\n+        if (fstat(f, &sb) == 0) {\n+            AddStat(hasher, sb);\n+        }\n+        do {\n+            n = read(f, fbuf, sizeof(fbuf));\n+            if (n > 0) hasher.Write(fbuf, n);\n+            /* not bothering with EINTR handling. */\n+        } while (n == sizeof(fbuf));\n+        close(f);\n+    }\n+}\n+\n+void AddPath(CSHA512& hasher, const char *path)\n+{\n+    struct stat sb;\n+    if (stat(path, &sb) == 0) {\n+        hasher.Write((const unsigned char*)path, strlen(path) + 1);\n+        AddStat(hasher, sb);\n+    }\n+}\n+#endif\n+\n+void AddSysctl(CSHA512& hasher, const char* path)\n+{\n+#if HAVE_DECL_SYSCTLBYNAME\n+    unsigned char buffer[4096];\n+    size_t siz = 4096;\n+    int ret = sysctlbyname(path, buffer, &siz, nullptr, 0);\n+    if (ret == 0 || (ret == -1 && errno == ENOMEM)) {\n+        hasher.Write((const unsigned char*)path, strlen(path) + 1);\n+        hasher.Write(buffer, std::min<size_t>(siz, 4096));\n+    }\n+#endif\n+}\n+\n+#ifdef HAVE_GETCPUID\n+void AddCPUID(CSHA512& hasher)\n+{\n+    uint32_t ax, bx, cx, dx;\n+    GetCPUID(0, 0, ax, bx, cx, dx);\n+    hasher << ax << bx << cx << dx;\n+    uint32_t max = ax;\n+    for (uint32_t leaf = 1; leaf <= max; ++leaf) {\n+        for (uint32_t subleaf = 0;; ++subleaf) {\n+            GetCPUID(leaf, subleaf, ax, bx, cx, dx);\n+            hasher << leaf << subleaf << ax << bx << cx << dx;\n+            // Iterate over subleaves for leaf 4, 11, 13\n+            if (leaf != 4 && leaf != 11 && leaf != 13) break;\n+            if ((leaf == 4 || leaf == 13) && ax == 0) break;\n+            if (leaf == 11 && (cx & 0xFF00) == 0) break;\n+        }\n+    }\n+}\n+#endif\n+} // namespace\n+\n+void RandAddDynamicEnv(CSHA512& hasher)\n+{\n+    RandAddSeedPerfmon(hasher);\n+\n+#ifdef WIN32\n+    FILETIME ftime;\n+    GetSystemTimeAsFileTime(&ftime);\n+    hasher << ftime;\n+#else\n+#  ifdef __MACH__\n+    hasher << mach_absolute_time();\n+#  else\n+    struct timespec ts;\n+    clock_gettime(CLOCK_MONOTONIC, &ts);\n+    hasher << ts.tv_sec << ts.tv_nsec;\n+#  endif\n+    struct timeval tv;\n+    gettimeofday(&tv, nullptr);\n+    hasher << tv.tv_sec << tv.tv_usec;\n+\n+    // Current resource usage.\n+    struct rusage usage;\n+    if (getrusage(RUSAGE_SELF, &usage) == 0) {\n+        hasher << usage.ru_utime.tv_sec << usage.ru_utime.tv_usec << usage.ru_stime.tv_sec << usage.ru_stime.tv_usec;\n+        hasher << usage.ru_maxrss << usage.ru_minflt << usage.ru_majflt << usage.ru_inblock << usage.ru_oublock;\n+        hasher << usage.ru_nvcsw << usage.ru_nivcsw;\n+    }\n+\n+#ifdef __linux__\n+    AddFile(hasher, \"/proc/diskstats\");\n+    AddFile(hasher, \"/proc/vmstat\");\n+    AddFile(hasher, \"/proc/schedstat\");",
      "path": "src/randomenv.cpp",
      "position": 276,
      "original_position": 223,
      "commit_id": "d1c02775aa74a0610809ac54bb241ddad61d2d8c",
      "original_commit_id": "8a27be0fb0065d897d4e55a4f7367d54f8914d77",
      "in_reply_to_id": 341190312,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It seems both exist.",
      "created_at": "2019-10-31T18:34:01Z",
      "updated_at": "2019-11-12T23:40:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#discussion_r341304182",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/341304182"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 276,
      "original_line": 276,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/341304784",
      "pull_request_review_id": 310100431,
      "id": 341304784,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MTMwNDc4NA==",
      "diff_hunk": "@@ -0,0 +1,389 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <randomenv.h>\n+\n+#include <compat/cpuid.h>\n+#include <crypto/sha512.h>\n+#include <support/cleanse.h>\n+#include <util/time.h> // for GetTime()\n+#ifdef WIN32\n+#include <compat.h> // for Windows API\n+#endif\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <climits>\n+#include <thread>\n+#include <vector>\n+\n+#include <stdint.h>\n+#include <string.h>\n+#ifndef WIN32\n+#include <sys/types.h> // must go before a number of other headers\n+#include <fcntl.h>\n+#include <netinet/in.h>\n+#include <sys/resource.h>\n+#include <sys/socket.h>\n+#include <sys/stat.h>\n+#include <sys/time.h>\n+#include <sys/utsname.h>\n+#include <unistd.h>\n+#endif\n+#ifdef __MACH__\n+#include <mach/mach_time.h>\n+#endif\n+#if HAVE_DECL_GETIFADDRS\n+#include <ifaddrs.h>\n+#endif\n+#if HAVE_DECL_SYSCTLBYNAME\n+#include <sys/sysctl.h>\n+#endif\n+#ifdef __linux__\n+#include <sys/auxv.h>\n+#endif\n+\n+//! Necessary on some platforms\n+extern char** environ;\n+\n+namespace {\n+\n+void RandAddSeedPerfmon(CSHA512& hasher)\n+{\n+#ifdef WIN32\n+    // Don't need this on Linux, OpenSSL automatically uses /dev/urandom\n+    // Seed with the entire set of perfmon data\n+\n+    // This can take up to 2 seconds, so only do it every 10 minutes\n+    static std::atomic<std::chrono::seconds> last_perfmon{std::chrono::seconds{0}};\n+    auto last_time = last_perfmon.load();\n+    auto current_time = GetTime<std::chrono::seconds>();\n+    if (current_time < last_time + std::chrono::minutes{10}) return;\n+    last_perfmon = current_time;\n+\n+    std::vector<unsigned char> vData(250000, 0);\n+    long ret = 0;\n+    unsigned long nSize = 0;\n+    const size_t nMaxSize = 10000000; // Bail out at more than 10MB of performance data\n+    while (true) {\n+        nSize = vData.size();\n+        ret = RegQueryValueExA(HKEY_PERFORMANCE_DATA, \"Global\", nullptr, nullptr, vData.data(), &nSize);\n+        if (ret != ERROR_MORE_DATA || vData.size() >= nMaxSize)\n+            break;\n+        vData.resize(std::max((vData.size() * 3) / 2, nMaxSize)); // Grow size of buffer exponentially\n+    }\n+    RegCloseKey(HKEY_PERFORMANCE_DATA);\n+    if (ret == ERROR_SUCCESS) {\n+        hasher.Write(vData.data(), nSize);\n+        memory_cleanse(vData.data(), nSize);\n+    } else {\n+        // Performance data is only a best-effort attempt at improving the\n+        // situation when the OS randomness (and other sources) aren't\n+        // adequate. As a result, failure to read it is isn't considered critical,\n+        // so we don't call RandFailure().\n+        // TODO: Add logging when the logger is made functional before global\n+        // constructors have been invoked.\n+    }\n+#endif\n+}\n+\n+/** Helper to easily feed data into a CSHA512.\n+ *\n+ * Note that this does not serialize the passed object (like stream.h's << operators do).\n+ * Its raw memory representation is used directly.\n+ */\n+template<typename T>\n+CSHA512& operator<<(CSHA512& hasher, const T& data) {\n+    hasher.Write((const unsigned char*)&data, sizeof(data));\n+    return hasher;\n+}\n+\n+#ifndef WIN32\n+void AddSockaddr(CSHA512& hasher, const struct sockaddr *addr)\n+{\n+    if (addr == nullptr) return;\n+    switch (addr->sa_family) {\n+    case AF_INET:\n+        hasher.Write((const unsigned char*)addr, sizeof(sockaddr_in));\n+        break;\n+    case AF_INET6:\n+        hasher.Write((const unsigned char*)addr, sizeof(sockaddr_in6));\n+        break;\n+    default:\n+        hasher.Write((const unsigned char*)&addr->sa_family, sizeof(addr->sa_family));\n+    }\n+}\n+\n+void AddStat(CSHA512& hasher, const struct stat& sb)\n+{\n+    hasher << sb.st_dev << sb.st_ino << sb.st_mode << sb.st_nlink << sb.st_uid << sb.st_gid << sb.st_size << sb.st_blksize << sb.st_blocks << sb.st_atime << sb.st_mtime << sb.st_ctime;\n+}\n+\n+void AddFile(CSHA512& hasher, const char *path)\n+{\n+    struct stat sb;\n+    int f = open(path, O_RDONLY);\n+    if (f != -1) {\n+        unsigned char fbuf[1024];\n+        int n;\n+        hasher.Write((const unsigned char*)&f, sizeof(f));\n+        if (fstat(f, &sb) == 0) {\n+            AddStat(hasher, sb);\n+        }\n+        do {\n+            n = read(f, fbuf, sizeof(fbuf));\n+            if (n > 0) hasher.Write(fbuf, n);\n+            /* not bothering with EINTR handling. */\n+        } while (n == sizeof(fbuf));\n+        close(f);\n+    }\n+}\n+\n+void AddPath(CSHA512& hasher, const char *path)\n+{\n+    struct stat sb;\n+    if (stat(path, &sb) == 0) {\n+        hasher.Write((const unsigned char*)path, strlen(path) + 1);\n+        AddStat(hasher, sb);\n+    }\n+}\n+#endif\n+\n+void AddSysctl(CSHA512& hasher, const char* path)\n+{\n+#if HAVE_DECL_SYSCTLBYNAME\n+    unsigned char buffer[4096];\n+    size_t siz = 4096;\n+    int ret = sysctlbyname(path, buffer, &siz, nullptr, 0);\n+    if (ret == 0 || (ret == -1 && errno == ENOMEM)) {\n+        hasher.Write((const unsigned char*)path, strlen(path) + 1);\n+        hasher.Write(buffer, std::min<size_t>(siz, 4096));\n+    }\n+#endif\n+}\n+\n+#ifdef HAVE_GETCPUID\n+void AddCPUID(CSHA512& hasher)\n+{\n+    uint32_t ax, bx, cx, dx;\n+    GetCPUID(0, 0, ax, bx, cx, dx);\n+    hasher << ax << bx << cx << dx;\n+    uint32_t max = ax;\n+    for (uint32_t leaf = 1; leaf <= max; ++leaf) {\n+        for (uint32_t subleaf = 0;; ++subleaf) {\n+            GetCPUID(leaf, subleaf, ax, bx, cx, dx);\n+            hasher << leaf << subleaf << ax << bx << cx << dx;\n+            // Iterate over subleaves for leaf 4, 11, 13\n+            if (leaf != 4 && leaf != 11 && leaf != 13) break;\n+            if ((leaf == 4 || leaf == 13) && ax == 0) break;\n+            if (leaf == 11 && (cx & 0xFF00) == 0) break;\n+        }\n+    }\n+}\n+#endif\n+} // namespace\n+\n+void RandAddDynamicEnv(CSHA512& hasher)\n+{\n+    RandAddSeedPerfmon(hasher);\n+\n+#ifdef WIN32\n+    FILETIME ftime;\n+    GetSystemTimeAsFileTime(&ftime);\n+    hasher << ftime;\n+#else\n+#  ifdef __MACH__\n+    hasher << mach_absolute_time();\n+#  else\n+    struct timespec ts;\n+    clock_gettime(CLOCK_MONOTONIC, &ts);\n+    hasher << ts.tv_sec << ts.tv_nsec;\n+#  endif\n+    struct timeval tv;\n+    gettimeofday(&tv, nullptr);\n+    hasher << tv.tv_sec << tv.tv_usec;\n+\n+    // Current resource usage.\n+    struct rusage usage;\n+    if (getrusage(RUSAGE_SELF, &usage) == 0) {\n+        hasher << usage.ru_utime.tv_sec << usage.ru_utime.tv_usec << usage.ru_stime.tv_sec << usage.ru_stime.tv_usec;\n+        hasher << usage.ru_maxrss << usage.ru_minflt << usage.ru_majflt << usage.ru_inblock << usage.ru_oublock;\n+        hasher << usage.ru_nvcsw << usage.ru_nivcsw;\n+    }\n+\n+#ifdef __linux__\n+    AddFile(hasher, \"/proc/diskstats\");\n+    AddFile(hasher, \"/proc/vmstat\");\n+    AddFile(hasher, \"/proc/schedstat\");\n+    AddFile(hasher, \"/proc/zoneinfo\");\n+    AddFile(hasher, \"/proc/meminfo\");\n+    AddFile(hasher, \"/proc/softirqs\");\n+    AddFile(hasher, \"/proc/stat\");\n+    AddFile(hasher, \"/proc/self/status\");\n+#endif\n+#endif\n+\n+    AddSysctl(hasher, \"vm.loadavg\");\n+    AddSysctl(hasher, \"vm.swapusage\");",
      "path": "src/randomenv.cpp",
      "position": null,
      "original_position": 233,
      "commit_id": "d1c02775aa74a0610809ac54bb241ddad61d2d8c",
      "original_commit_id": "8a27be0fb0065d897d4e55a4f7367d54f8914d77",
      "in_reply_to_id": 341199938,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That's ok; I combined lists of sysctls listed for various platforms. Not all will exist on each.",
      "created_at": "2019-10-31T18:35:15Z",
      "updated_at": "2019-11-12T23:40:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#discussion_r341304784",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/341304784"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 278,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/341305217",
      "pull_request_review_id": 310100984,
      "id": 341305217,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MTMwNTIxNw==",
      "diff_hunk": "@@ -0,0 +1,389 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <randomenv.h>\n+\n+#include <compat/cpuid.h>\n+#include <crypto/sha512.h>\n+#include <support/cleanse.h>\n+#include <util/time.h> // for GetTime()\n+#ifdef WIN32\n+#include <compat.h> // for Windows API\n+#endif\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <climits>\n+#include <thread>\n+#include <vector>\n+\n+#include <stdint.h>\n+#include <string.h>\n+#ifndef WIN32\n+#include <sys/types.h> // must go before a number of other headers\n+#include <fcntl.h>\n+#include <netinet/in.h>\n+#include <sys/resource.h>\n+#include <sys/socket.h>\n+#include <sys/stat.h>\n+#include <sys/time.h>\n+#include <sys/utsname.h>\n+#include <unistd.h>\n+#endif\n+#ifdef __MACH__\n+#include <mach/mach_time.h>\n+#endif\n+#if HAVE_DECL_GETIFADDRS\n+#include <ifaddrs.h>\n+#endif\n+#if HAVE_DECL_SYSCTLBYNAME\n+#include <sys/sysctl.h>\n+#endif\n+#ifdef __linux__\n+#include <sys/auxv.h>\n+#endif\n+\n+//! Necessary on some platforms\n+extern char** environ;\n+\n+namespace {\n+\n+void RandAddSeedPerfmon(CSHA512& hasher)\n+{\n+#ifdef WIN32\n+    // Don't need this on Linux, OpenSSL automatically uses /dev/urandom\n+    // Seed with the entire set of perfmon data\n+\n+    // This can take up to 2 seconds, so only do it every 10 minutes\n+    static std::atomic<std::chrono::seconds> last_perfmon{std::chrono::seconds{0}};\n+    auto last_time = last_perfmon.load();\n+    auto current_time = GetTime<std::chrono::seconds>();\n+    if (current_time < last_time + std::chrono::minutes{10}) return;\n+    last_perfmon = current_time;\n+\n+    std::vector<unsigned char> vData(250000, 0);\n+    long ret = 0;\n+    unsigned long nSize = 0;\n+    const size_t nMaxSize = 10000000; // Bail out at more than 10MB of performance data\n+    while (true) {\n+        nSize = vData.size();\n+        ret = RegQueryValueExA(HKEY_PERFORMANCE_DATA, \"Global\", nullptr, nullptr, vData.data(), &nSize);\n+        if (ret != ERROR_MORE_DATA || vData.size() >= nMaxSize)\n+            break;\n+        vData.resize(std::max((vData.size() * 3) / 2, nMaxSize)); // Grow size of buffer exponentially\n+    }\n+    RegCloseKey(HKEY_PERFORMANCE_DATA);\n+    if (ret == ERROR_SUCCESS) {\n+        hasher.Write(vData.data(), nSize);\n+        memory_cleanse(vData.data(), nSize);\n+    } else {\n+        // Performance data is only a best-effort attempt at improving the\n+        // situation when the OS randomness (and other sources) aren't\n+        // adequate. As a result, failure to read it is isn't considered critical,\n+        // so we don't call RandFailure().\n+        // TODO: Add logging when the logger is made functional before global\n+        // constructors have been invoked.\n+    }\n+#endif\n+}\n+\n+/** Helper to easily feed data into a CSHA512.\n+ *\n+ * Note that this does not serialize the passed object (like stream.h's << operators do).\n+ * Its raw memory representation is used directly.\n+ */\n+template<typename T>\n+CSHA512& operator<<(CSHA512& hasher, const T& data) {\n+    hasher.Write((const unsigned char*)&data, sizeof(data));\n+    return hasher;\n+}\n+\n+#ifndef WIN32\n+void AddSockaddr(CSHA512& hasher, const struct sockaddr *addr)\n+{\n+    if (addr == nullptr) return;\n+    switch (addr->sa_family) {\n+    case AF_INET:\n+        hasher.Write((const unsigned char*)addr, sizeof(sockaddr_in));\n+        break;\n+    case AF_INET6:\n+        hasher.Write((const unsigned char*)addr, sizeof(sockaddr_in6));\n+        break;\n+    default:\n+        hasher.Write((const unsigned char*)&addr->sa_family, sizeof(addr->sa_family));\n+    }\n+}\n+\n+void AddStat(CSHA512& hasher, const struct stat& sb)\n+{\n+    hasher << sb.st_dev << sb.st_ino << sb.st_mode << sb.st_nlink << sb.st_uid << sb.st_gid << sb.st_size << sb.st_blksize << sb.st_blocks << sb.st_atime << sb.st_mtime << sb.st_ctime;\n+}\n+\n+void AddFile(CSHA512& hasher, const char *path)\n+{\n+    struct stat sb;\n+    int f = open(path, O_RDONLY);\n+    if (f != -1) {\n+        unsigned char fbuf[1024];\n+        int n;\n+        hasher.Write((const unsigned char*)&f, sizeof(f));\n+        if (fstat(f, &sb) == 0) {\n+            AddStat(hasher, sb);\n+        }\n+        do {\n+            n = read(f, fbuf, sizeof(fbuf));\n+            if (n > 0) hasher.Write(fbuf, n);\n+            /* not bothering with EINTR handling. */\n+        } while (n == sizeof(fbuf));\n+        close(f);\n+    }\n+}\n+\n+void AddPath(CSHA512& hasher, const char *path)\n+{\n+    struct stat sb;\n+    if (stat(path, &sb) == 0) {\n+        hasher.Write((const unsigned char*)path, strlen(path) + 1);\n+        AddStat(hasher, sb);\n+    }\n+}\n+#endif\n+\n+void AddSysctl(CSHA512& hasher, const char* path)\n+{\n+#if HAVE_DECL_SYSCTLBYNAME\n+    unsigned char buffer[4096];\n+    size_t siz = 4096;\n+    int ret = sysctlbyname(path, buffer, &siz, nullptr, 0);\n+    if (ret == 0 || (ret == -1 && errno == ENOMEM)) {\n+        hasher.Write((const unsigned char*)path, strlen(path) + 1);\n+        hasher.Write(buffer, std::min<size_t>(siz, 4096));\n+    }\n+#endif\n+}\n+\n+#ifdef HAVE_GETCPUID\n+void AddCPUID(CSHA512& hasher)\n+{\n+    uint32_t ax, bx, cx, dx;\n+    GetCPUID(0, 0, ax, bx, cx, dx);\n+    hasher << ax << bx << cx << dx;\n+    uint32_t max = ax;\n+    for (uint32_t leaf = 1; leaf <= max; ++leaf) {\n+        for (uint32_t subleaf = 0;; ++subleaf) {\n+            GetCPUID(leaf, subleaf, ax, bx, cx, dx);\n+            hasher << leaf << subleaf << ax << bx << cx << dx;\n+            // Iterate over subleaves for leaf 4, 11, 13\n+            if (leaf != 4 && leaf != 11 && leaf != 13) break;\n+            if ((leaf == 4 || leaf == 13) && ax == 0) break;\n+            if (leaf == 11 && (cx & 0xFF00) == 0) break;\n+        }\n+    }\n+}\n+#endif\n+} // namespace\n+\n+void RandAddDynamicEnv(CSHA512& hasher)\n+{\n+    RandAddSeedPerfmon(hasher);\n+\n+#ifdef WIN32\n+    FILETIME ftime;\n+    GetSystemTimeAsFileTime(&ftime);\n+    hasher << ftime;\n+#else\n+#  ifdef __MACH__\n+    hasher << mach_absolute_time();\n+#  else\n+    struct timespec ts;\n+    clock_gettime(CLOCK_MONOTONIC, &ts);\n+    hasher << ts.tv_sec << ts.tv_nsec;\n+#  endif\n+    struct timeval tv;\n+    gettimeofday(&tv, nullptr);\n+    hasher << tv.tv_sec << tv.tv_usec;\n+\n+    // Current resource usage.\n+    struct rusage usage;\n+    if (getrusage(RUSAGE_SELF, &usage) == 0) {\n+        hasher << usage.ru_utime.tv_sec << usage.ru_utime.tv_usec << usage.ru_stime.tv_sec << usage.ru_stime.tv_usec;\n+        hasher << usage.ru_maxrss << usage.ru_minflt << usage.ru_majflt << usage.ru_inblock << usage.ru_oublock;\n+        hasher << usage.ru_nvcsw << usage.ru_nivcsw;\n+    }\n+\n+#ifdef __linux__\n+    AddFile(hasher, \"/proc/diskstats\");\n+    AddFile(hasher, \"/proc/vmstat\");\n+    AddFile(hasher, \"/proc/schedstat\");\n+    AddFile(hasher, \"/proc/zoneinfo\");\n+    AddFile(hasher, \"/proc/meminfo\");\n+    AddFile(hasher, \"/proc/softirqs\");\n+    AddFile(hasher, \"/proc/stat\");\n+    AddFile(hasher, \"/proc/self/status\");\n+#endif\n+#endif\n+\n+    AddSysctl(hasher, \"vm.loadavg\");\n+    AddSysctl(hasher, \"vm.swapusage\");\n+\n+    // Stack and heap location\n+    void* addr = malloc(4097);\n+    hasher << &addr << addr;\n+    free(addr);\n+}\n+\n+void RandAddStaticEnv(CSHA512& hasher)\n+{\n+    // Some compile-time static properties\n+    uint32_t x;\n+    x = ((CHAR_MIN < 0) << 30) + (sizeof(void *) << 16) + (sizeof(long) << 8) + sizeof(int);\n+    hasher << x;\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__) && defined(__GNUC_PATCHLEVEL__)\n+    x = (__GNUC_PATCHLEVEL__ << 16) + (__GNUC_MINOR__ << 8) + __GNUC__;\n+    hasher << x;\n+#endif\n+#if defined(_MSC_VER)\n+    x = _MSC_VER;\n+    hasher << x;\n+#endif\n+#if defined(__STDC_VERSION__)\n+    x = __STDC_VERSION__;\n+    hasher << x;\n+#endif\n+#if defined(_XOPEN_VERSION)\n+    x = _XOPEN_VERSION;\n+    hasher << x;\n+#endif\n+\n+#ifdef __linux__\n+    // Information available through getauxval()\n+#  ifdef AT_HWCAP\n+    hasher << getauxval(AT_HWCAP);\n+#  endif\n+#  ifdef AT_HWCAP2\n+    hasher << getauxval(AT_HWCAP2);\n+#  endif\n+#  ifdef AT_RANDOM\n+    hasher << getauxval(AT_RANDOM);\n+#  endif\n+#  ifdef AT_PLATFORM\n+    const char* platform_str = (const char*)getauxval(AT_PLATFORM);\n+    if (platform_str) hasher.Write((const unsigned char*)platform_str, strlen(platform_str) + 1);\n+#  endif\n+#  ifdef AT_EXECFN\n+    const char* exec_str = (const char*)getauxval(AT_EXECFN);\n+    if (exec_str) hasher.Write((const unsigned char*)exec_str, strlen(exec_str) + 1);\n+#  endif\n+#endif // __linux__\n+\n+#ifdef HAVE_GETCPUID\n+    AddCPUID(hasher);\n+#endif\n+\n+    // Memory locations\n+    hasher << &x << &RandAddStaticEnv << &malloc << &errno << &environ;\n+\n+    // Hostname\n+    char hname[256];\n+    if (gethostname(hname, 256) == 0) {\n+        hasher.Write((const unsigned char*)hname, strnlen(hname, 256));\n+    }\n+\n+#if HAVE_DECL_GETIFADDRS\n+    // Network interfaces\n+    struct ifaddrs *ifad = NULL;\n+    getifaddrs(&ifad);\n+    struct ifaddrs *ifit = ifad;\n+    while (ifit != NULL) {\n+        hasher.Write((const unsigned char*)&ifit, sizeof(ifit));\n+        hasher.Write((const unsigned char*)ifit->ifa_name, strlen(ifit->ifa_name) + 1);\n+        hasher.Write((const unsigned char*)&ifit->ifa_flags, sizeof(ifit->ifa_flags));\n+        AddSockaddr(hasher, ifit->ifa_addr);\n+        AddSockaddr(hasher, ifit->ifa_netmask);\n+        AddSockaddr(hasher, ifit->ifa_dstaddr);\n+        ifit = ifit->ifa_next;\n+    }\n+    freeifaddrs(ifad);\n+#endif\n+\n+#ifndef WIN32\n+    // UNIX kernel information\n+    struct utsname name;\n+    if (uname(&name) != -1) {\n+        hasher.Write((const unsigned char*)&name.sysname, strlen(name.sysname) + 1);\n+        hasher.Write((const unsigned char*)&name.nodename, strlen(name.nodename) + 1);\n+        hasher.Write((const unsigned char*)&name.release, strlen(name.release) + 1);\n+        hasher.Write((const unsigned char*)&name.version, strlen(name.version) + 1);\n+        hasher.Write((const unsigned char*)&name.machine, strlen(name.machine) + 1);\n+    }\n+\n+    /* Path and filesystem provided data */\n+    AddPath(hasher, \"/\");\n+    AddPath(hasher, \".\");\n+    AddPath(hasher, \"/tmp\");\n+    AddPath(hasher, \"/home\");\n+    AddPath(hasher, \"/proc\");\n+#ifdef __linux__\n+    AddFile(hasher, \"/proc/cmdline\");\n+    AddFile(hasher, \"/proc/cpuinfo\");\n+    AddFile(hasher, \"/proc/version\");\n+#endif\n+    AddFile(hasher, \"/etc/passwd\");\n+    AddFile(hasher, \"/etc/group\");\n+    AddFile(hasher, \"/etc/hosts\");\n+    AddFile(hasher, \"/etc/resolv.conf\");\n+    AddFile(hasher, \"/etc/timezone\");\n+    AddFile(hasher, \"/etc/localtime\");\n+    AddFile(hasher, \"/etc/hostconfig\");",
      "path": "src/randomenv.cpp",
      "position": null,
      "original_position": 343,
      "commit_id": "d1c02775aa74a0610809ac54bb241ddad61d2d8c",
      "original_commit_id": "8a27be0fb0065d897d4e55a4f7367d54f8914d77",
      "in_reply_to_id": 341202812,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ok, removing.",
      "created_at": "2019-10-31T18:36:09Z",
      "updated_at": "2019-11-12T23:40:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#discussion_r341305217",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/341305217"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 343,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/341305399",
      "pull_request_review_id": 310101248,
      "id": 341305399,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MTMwNTM5OQ==",
      "diff_hunk": "@@ -0,0 +1,389 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <randomenv.h>\n+\n+#include <compat/cpuid.h>\n+#include <crypto/sha512.h>\n+#include <support/cleanse.h>\n+#include <util/time.h> // for GetTime()\n+#ifdef WIN32\n+#include <compat.h> // for Windows API\n+#endif\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <climits>\n+#include <thread>\n+#include <vector>\n+\n+#include <stdint.h>\n+#include <string.h>\n+#ifndef WIN32\n+#include <sys/types.h> // must go before a number of other headers\n+#include <fcntl.h>\n+#include <netinet/in.h>\n+#include <sys/resource.h>\n+#include <sys/socket.h>\n+#include <sys/stat.h>\n+#include <sys/time.h>\n+#include <sys/utsname.h>\n+#include <unistd.h>\n+#endif\n+#ifdef __MACH__\n+#include <mach/mach_time.h>\n+#endif\n+#if HAVE_DECL_GETIFADDRS\n+#include <ifaddrs.h>\n+#endif\n+#if HAVE_DECL_SYSCTLBYNAME\n+#include <sys/sysctl.h>\n+#endif\n+#ifdef __linux__\n+#include <sys/auxv.h>\n+#endif\n+\n+//! Necessary on some platforms\n+extern char** environ;\n+\n+namespace {\n+\n+void RandAddSeedPerfmon(CSHA512& hasher)\n+{\n+#ifdef WIN32\n+    // Don't need this on Linux, OpenSSL automatically uses /dev/urandom\n+    // Seed with the entire set of perfmon data\n+\n+    // This can take up to 2 seconds, so only do it every 10 minutes\n+    static std::atomic<std::chrono::seconds> last_perfmon{std::chrono::seconds{0}};\n+    auto last_time = last_perfmon.load();\n+    auto current_time = GetTime<std::chrono::seconds>();\n+    if (current_time < last_time + std::chrono::minutes{10}) return;\n+    last_perfmon = current_time;\n+\n+    std::vector<unsigned char> vData(250000, 0);\n+    long ret = 0;\n+    unsigned long nSize = 0;\n+    const size_t nMaxSize = 10000000; // Bail out at more than 10MB of performance data\n+    while (true) {\n+        nSize = vData.size();\n+        ret = RegQueryValueExA(HKEY_PERFORMANCE_DATA, \"Global\", nullptr, nullptr, vData.data(), &nSize);\n+        if (ret != ERROR_MORE_DATA || vData.size() >= nMaxSize)\n+            break;\n+        vData.resize(std::max((vData.size() * 3) / 2, nMaxSize)); // Grow size of buffer exponentially\n+    }\n+    RegCloseKey(HKEY_PERFORMANCE_DATA);\n+    if (ret == ERROR_SUCCESS) {\n+        hasher.Write(vData.data(), nSize);\n+        memory_cleanse(vData.data(), nSize);\n+    } else {\n+        // Performance data is only a best-effort attempt at improving the\n+        // situation when the OS randomness (and other sources) aren't\n+        // adequate. As a result, failure to read it is isn't considered critical,\n+        // so we don't call RandFailure().\n+        // TODO: Add logging when the logger is made functional before global\n+        // constructors have been invoked.\n+    }\n+#endif\n+}\n+\n+/** Helper to easily feed data into a CSHA512.\n+ *\n+ * Note that this does not serialize the passed object (like stream.h's << operators do).\n+ * Its raw memory representation is used directly.\n+ */\n+template<typename T>\n+CSHA512& operator<<(CSHA512& hasher, const T& data) {\n+    hasher.Write((const unsigned char*)&data, sizeof(data));\n+    return hasher;\n+}\n+\n+#ifndef WIN32\n+void AddSockaddr(CSHA512& hasher, const struct sockaddr *addr)\n+{\n+    if (addr == nullptr) return;\n+    switch (addr->sa_family) {\n+    case AF_INET:\n+        hasher.Write((const unsigned char*)addr, sizeof(sockaddr_in));\n+        break;\n+    case AF_INET6:\n+        hasher.Write((const unsigned char*)addr, sizeof(sockaddr_in6));\n+        break;\n+    default:\n+        hasher.Write((const unsigned char*)&addr->sa_family, sizeof(addr->sa_family));\n+    }\n+}\n+\n+void AddStat(CSHA512& hasher, const struct stat& sb)\n+{\n+    hasher << sb.st_dev << sb.st_ino << sb.st_mode << sb.st_nlink << sb.st_uid << sb.st_gid << sb.st_size << sb.st_blksize << sb.st_blocks << sb.st_atime << sb.st_mtime << sb.st_ctime;\n+}\n+\n+void AddFile(CSHA512& hasher, const char *path)\n+{\n+    struct stat sb;\n+    int f = open(path, O_RDONLY);\n+    if (f != -1) {\n+        unsigned char fbuf[1024];\n+        int n;\n+        hasher.Write((const unsigned char*)&f, sizeof(f));\n+        if (fstat(f, &sb) == 0) {\n+            AddStat(hasher, sb);\n+        }\n+        do {\n+            n = read(f, fbuf, sizeof(fbuf));\n+            if (n > 0) hasher.Write(fbuf, n);\n+            /* not bothering with EINTR handling. */\n+        } while (n == sizeof(fbuf));\n+        close(f);\n+    }\n+}\n+\n+void AddPath(CSHA512& hasher, const char *path)\n+{\n+    struct stat sb;\n+    if (stat(path, &sb) == 0) {\n+        hasher.Write((const unsigned char*)path, strlen(path) + 1);\n+        AddStat(hasher, sb);\n+    }\n+}\n+#endif\n+\n+void AddSysctl(CSHA512& hasher, const char* path)\n+{\n+#if HAVE_DECL_SYSCTLBYNAME\n+    unsigned char buffer[4096];\n+    size_t siz = 4096;\n+    int ret = sysctlbyname(path, buffer, &siz, nullptr, 0);\n+    if (ret == 0 || (ret == -1 && errno == ENOMEM)) {\n+        hasher.Write((const unsigned char*)path, strlen(path) + 1);\n+        hasher.Write(buffer, std::min<size_t>(siz, 4096));\n+    }\n+#endif\n+}\n+\n+#ifdef HAVE_GETCPUID\n+void AddCPUID(CSHA512& hasher)\n+{\n+    uint32_t ax, bx, cx, dx;\n+    GetCPUID(0, 0, ax, bx, cx, dx);\n+    hasher << ax << bx << cx << dx;\n+    uint32_t max = ax;\n+    for (uint32_t leaf = 1; leaf <= max; ++leaf) {\n+        for (uint32_t subleaf = 0;; ++subleaf) {\n+            GetCPUID(leaf, subleaf, ax, bx, cx, dx);\n+            hasher << leaf << subleaf << ax << bx << cx << dx;\n+            // Iterate over subleaves for leaf 4, 11, 13\n+            if (leaf != 4 && leaf != 11 && leaf != 13) break;\n+            if ((leaf == 4 || leaf == 13) && ax == 0) break;\n+            if (leaf == 11 && (cx & 0xFF00) == 0) break;\n+        }\n+    }\n+}\n+#endif\n+} // namespace\n+\n+void RandAddDynamicEnv(CSHA512& hasher)\n+{\n+    RandAddSeedPerfmon(hasher);\n+\n+#ifdef WIN32\n+    FILETIME ftime;\n+    GetSystemTimeAsFileTime(&ftime);\n+    hasher << ftime;\n+#else\n+#  ifdef __MACH__\n+    hasher << mach_absolute_time();\n+#  else\n+    struct timespec ts;\n+    clock_gettime(CLOCK_MONOTONIC, &ts);",
      "path": "src/randomenv.cpp",
      "position": 234,
      "original_position": 205,
      "commit_id": "d1c02775aa74a0610809ac54bb241ddad61d2d8c",
      "original_commit_id": "8a27be0fb0065d897d4e55a4f7367d54f8914d77",
      "in_reply_to_id": 341216159,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm expanding this piece of code to just use all clocks available.",
      "created_at": "2019-10-31T18:36:33Z",
      "updated_at": "2019-11-12T23:40:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#discussion_r341305399",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/341305399"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 234,
      "original_line": 234,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/341305714",
      "pull_request_review_id": 310101643,
      "id": 341305714,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MTMwNTcxNA==",
      "diff_hunk": "@@ -0,0 +1,389 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <randomenv.h>\n+\n+#include <compat/cpuid.h>\n+#include <crypto/sha512.h>\n+#include <support/cleanse.h>\n+#include <util/time.h> // for GetTime()\n+#ifdef WIN32\n+#include <compat.h> // for Windows API\n+#endif\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <climits>\n+#include <thread>\n+#include <vector>\n+\n+#include <stdint.h>\n+#include <string.h>\n+#ifndef WIN32\n+#include <sys/types.h> // must go before a number of other headers\n+#include <fcntl.h>\n+#include <netinet/in.h>\n+#include <sys/resource.h>\n+#include <sys/socket.h>\n+#include <sys/stat.h>\n+#include <sys/time.h>\n+#include <sys/utsname.h>\n+#include <unistd.h>\n+#endif\n+#ifdef __MACH__\n+#include <mach/mach_time.h>\n+#endif\n+#if HAVE_DECL_GETIFADDRS\n+#include <ifaddrs.h>\n+#endif\n+#if HAVE_DECL_SYSCTLBYNAME\n+#include <sys/sysctl.h>\n+#endif\n+#ifdef __linux__\n+#include <sys/auxv.h>\n+#endif\n+\n+//! Necessary on some platforms\n+extern char** environ;\n+\n+namespace {\n+\n+void RandAddSeedPerfmon(CSHA512& hasher)\n+{\n+#ifdef WIN32\n+    // Don't need this on Linux, OpenSSL automatically uses /dev/urandom\n+    // Seed with the entire set of perfmon data\n+\n+    // This can take up to 2 seconds, so only do it every 10 minutes\n+    static std::atomic<std::chrono::seconds> last_perfmon{std::chrono::seconds{0}};\n+    auto last_time = last_perfmon.load();\n+    auto current_time = GetTime<std::chrono::seconds>();\n+    if (current_time < last_time + std::chrono::minutes{10}) return;\n+    last_perfmon = current_time;\n+\n+    std::vector<unsigned char> vData(250000, 0);\n+    long ret = 0;\n+    unsigned long nSize = 0;\n+    const size_t nMaxSize = 10000000; // Bail out at more than 10MB of performance data\n+    while (true) {\n+        nSize = vData.size();\n+        ret = RegQueryValueExA(HKEY_PERFORMANCE_DATA, \"Global\", nullptr, nullptr, vData.data(), &nSize);\n+        if (ret != ERROR_MORE_DATA || vData.size() >= nMaxSize)\n+            break;\n+        vData.resize(std::max((vData.size() * 3) / 2, nMaxSize)); // Grow size of buffer exponentially\n+    }\n+    RegCloseKey(HKEY_PERFORMANCE_DATA);\n+    if (ret == ERROR_SUCCESS) {\n+        hasher.Write(vData.data(), nSize);\n+        memory_cleanse(vData.data(), nSize);\n+    } else {\n+        // Performance data is only a best-effort attempt at improving the\n+        // situation when the OS randomness (and other sources) aren't\n+        // adequate. As a result, failure to read it is isn't considered critical,\n+        // so we don't call RandFailure().\n+        // TODO: Add logging when the logger is made functional before global\n+        // constructors have been invoked.\n+    }\n+#endif\n+}\n+\n+/** Helper to easily feed data into a CSHA512.\n+ *\n+ * Note that this does not serialize the passed object (like stream.h's << operators do).\n+ * Its raw memory representation is used directly.\n+ */\n+template<typename T>\n+CSHA512& operator<<(CSHA512& hasher, const T& data) {\n+    hasher.Write((const unsigned char*)&data, sizeof(data));\n+    return hasher;\n+}\n+\n+#ifndef WIN32\n+void AddSockaddr(CSHA512& hasher, const struct sockaddr *addr)\n+{\n+    if (addr == nullptr) return;\n+    switch (addr->sa_family) {\n+    case AF_INET:\n+        hasher.Write((const unsigned char*)addr, sizeof(sockaddr_in));\n+        break;\n+    case AF_INET6:\n+        hasher.Write((const unsigned char*)addr, sizeof(sockaddr_in6));\n+        break;\n+    default:\n+        hasher.Write((const unsigned char*)&addr->sa_family, sizeof(addr->sa_family));\n+    }\n+}\n+\n+void AddStat(CSHA512& hasher, const struct stat& sb)\n+{\n+    hasher << sb.st_dev << sb.st_ino << sb.st_mode << sb.st_nlink << sb.st_uid << sb.st_gid << sb.st_size << sb.st_blksize << sb.st_blocks << sb.st_atime << sb.st_mtime << sb.st_ctime;\n+}\n+\n+void AddFile(CSHA512& hasher, const char *path)\n+{\n+    struct stat sb;\n+    int f = open(path, O_RDONLY);\n+    if (f != -1) {\n+        unsigned char fbuf[1024];\n+        int n;\n+        hasher.Write((const unsigned char*)&f, sizeof(f));\n+        if (fstat(f, &sb) == 0) {\n+            AddStat(hasher, sb);\n+        }\n+        do {\n+            n = read(f, fbuf, sizeof(fbuf));\n+            if (n > 0) hasher.Write(fbuf, n);\n+            /* not bothering with EINTR handling. */\n+        } while (n == sizeof(fbuf));\n+        close(f);\n+    }\n+}\n+\n+void AddPath(CSHA512& hasher, const char *path)\n+{\n+    struct stat sb;\n+    if (stat(path, &sb) == 0) {\n+        hasher.Write((const unsigned char*)path, strlen(path) + 1);\n+        AddStat(hasher, sb);\n+    }\n+}\n+#endif\n+\n+void AddSysctl(CSHA512& hasher, const char* path)\n+{\n+#if HAVE_DECL_SYSCTLBYNAME\n+    unsigned char buffer[4096];\n+    size_t siz = 4096;\n+    int ret = sysctlbyname(path, buffer, &siz, nullptr, 0);\n+    if (ret == 0 || (ret == -1 && errno == ENOMEM)) {\n+        hasher.Write((const unsigned char*)path, strlen(path) + 1);\n+        hasher.Write(buffer, std::min<size_t>(siz, 4096));\n+    }\n+#endif\n+}\n+\n+#ifdef HAVE_GETCPUID\n+void AddCPUID(CSHA512& hasher)\n+{\n+    uint32_t ax, bx, cx, dx;\n+    GetCPUID(0, 0, ax, bx, cx, dx);\n+    hasher << ax << bx << cx << dx;\n+    uint32_t max = ax;\n+    for (uint32_t leaf = 1; leaf <= max; ++leaf) {\n+        for (uint32_t subleaf = 0;; ++subleaf) {\n+            GetCPUID(leaf, subleaf, ax, bx, cx, dx);\n+            hasher << leaf << subleaf << ax << bx << cx << dx;\n+            // Iterate over subleaves for leaf 4, 11, 13\n+            if (leaf != 4 && leaf != 11 && leaf != 13) break;\n+            if ((leaf == 4 || leaf == 13) && ax == 0) break;\n+            if (leaf == 11 && (cx & 0xFF00) == 0) break;\n+        }\n+    }\n+}\n+#endif\n+} // namespace\n+\n+void RandAddDynamicEnv(CSHA512& hasher)\n+{\n+    RandAddSeedPerfmon(hasher);\n+\n+#ifdef WIN32\n+    FILETIME ftime;\n+    GetSystemTimeAsFileTime(&ftime);\n+    hasher << ftime;\n+#else\n+#  ifdef __MACH__\n+    hasher << mach_absolute_time();",
      "path": "src/randomenv.cpp",
      "position": null,
      "original_position": 202,
      "commit_id": "d1c02775aa74a0610809ac54bb241ddad61d2d8c",
      "original_commit_id": "8a27be0fb0065d897d4e55a4f7367d54f8914d77",
      "in_reply_to_id": 341217176,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, I tried to find an equivalent to CLOCK_MONOTONIC on MacOS, and found this. It doesn't exactly match what OpenSSL did.",
      "created_at": "2019-10-31T18:37:13Z",
      "updated_at": "2019-11-12T23:40:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#discussion_r341305714",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/341305714"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 202,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/341310902",
      "pull_request_review_id": 310108722,
      "id": 341310902,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MTMxMDkwMg==",
      "diff_hunk": "@@ -0,0 +1,389 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <randomenv.h>\n+\n+#include <compat/cpuid.h>\n+#include <crypto/sha512.h>\n+#include <support/cleanse.h>\n+#include <util/time.h> // for GetTime()\n+#ifdef WIN32\n+#include <compat.h> // for Windows API\n+#endif\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <climits>\n+#include <thread>\n+#include <vector>\n+\n+#include <stdint.h>\n+#include <string.h>\n+#ifndef WIN32\n+#include <sys/types.h> // must go before a number of other headers\n+#include <fcntl.h>\n+#include <netinet/in.h>\n+#include <sys/resource.h>\n+#include <sys/socket.h>\n+#include <sys/stat.h>\n+#include <sys/time.h>\n+#include <sys/utsname.h>\n+#include <unistd.h>\n+#endif\n+#ifdef __MACH__\n+#include <mach/mach_time.h>\n+#endif\n+#if HAVE_DECL_GETIFADDRS\n+#include <ifaddrs.h>\n+#endif\n+#if HAVE_DECL_SYSCTLBYNAME\n+#include <sys/sysctl.h>\n+#endif\n+#ifdef __linux__\n+#include <sys/auxv.h>\n+#endif\n+\n+//! Necessary on some platforms\n+extern char** environ;\n+\n+namespace {\n+\n+void RandAddSeedPerfmon(CSHA512& hasher)\n+{\n+#ifdef WIN32\n+    // Don't need this on Linux, OpenSSL automatically uses /dev/urandom\n+    // Seed with the entire set of perfmon data\n+\n+    // This can take up to 2 seconds, so only do it every 10 minutes\n+    static std::atomic<std::chrono::seconds> last_perfmon{std::chrono::seconds{0}};\n+    auto last_time = last_perfmon.load();\n+    auto current_time = GetTime<std::chrono::seconds>();\n+    if (current_time < last_time + std::chrono::minutes{10}) return;\n+    last_perfmon = current_time;\n+\n+    std::vector<unsigned char> vData(250000, 0);\n+    long ret = 0;\n+    unsigned long nSize = 0;\n+    const size_t nMaxSize = 10000000; // Bail out at more than 10MB of performance data\n+    while (true) {\n+        nSize = vData.size();\n+        ret = RegQueryValueExA(HKEY_PERFORMANCE_DATA, \"Global\", nullptr, nullptr, vData.data(), &nSize);\n+        if (ret != ERROR_MORE_DATA || vData.size() >= nMaxSize)\n+            break;\n+        vData.resize(std::max((vData.size() * 3) / 2, nMaxSize)); // Grow size of buffer exponentially\n+    }\n+    RegCloseKey(HKEY_PERFORMANCE_DATA);\n+    if (ret == ERROR_SUCCESS) {\n+        hasher.Write(vData.data(), nSize);\n+        memory_cleanse(vData.data(), nSize);\n+    } else {\n+        // Performance data is only a best-effort attempt at improving the\n+        // situation when the OS randomness (and other sources) aren't\n+        // adequate. As a result, failure to read it is isn't considered critical,\n+        // so we don't call RandFailure().\n+        // TODO: Add logging when the logger is made functional before global\n+        // constructors have been invoked.\n+    }\n+#endif\n+}\n+\n+/** Helper to easily feed data into a CSHA512.\n+ *\n+ * Note that this does not serialize the passed object (like stream.h's << operators do).\n+ * Its raw memory representation is used directly.\n+ */\n+template<typename T>\n+CSHA512& operator<<(CSHA512& hasher, const T& data) {\n+    hasher.Write((const unsigned char*)&data, sizeof(data));\n+    return hasher;\n+}\n+\n+#ifndef WIN32\n+void AddSockaddr(CSHA512& hasher, const struct sockaddr *addr)\n+{\n+    if (addr == nullptr) return;\n+    switch (addr->sa_family) {\n+    case AF_INET:\n+        hasher.Write((const unsigned char*)addr, sizeof(sockaddr_in));\n+        break;\n+    case AF_INET6:\n+        hasher.Write((const unsigned char*)addr, sizeof(sockaddr_in6));\n+        break;\n+    default:\n+        hasher.Write((const unsigned char*)&addr->sa_family, sizeof(addr->sa_family));\n+    }\n+}\n+\n+void AddStat(CSHA512& hasher, const struct stat& sb)\n+{\n+    hasher << sb.st_dev << sb.st_ino << sb.st_mode << sb.st_nlink << sb.st_uid << sb.st_gid << sb.st_size << sb.st_blksize << sb.st_blocks << sb.st_atime << sb.st_mtime << sb.st_ctime;\n+}\n+\n+void AddFile(CSHA512& hasher, const char *path)\n+{\n+    struct stat sb;\n+    int f = open(path, O_RDONLY);\n+    if (f != -1) {\n+        unsigned char fbuf[1024];\n+        int n;\n+        hasher.Write((const unsigned char*)&f, sizeof(f));\n+        if (fstat(f, &sb) == 0) {\n+            AddStat(hasher, sb);\n+        }\n+        do {\n+            n = read(f, fbuf, sizeof(fbuf));\n+            if (n > 0) hasher.Write(fbuf, n);\n+            /* not bothering with EINTR handling. */\n+        } while (n == sizeof(fbuf));\n+        close(f);\n+    }\n+}\n+\n+void AddPath(CSHA512& hasher, const char *path)\n+{\n+    struct stat sb;\n+    if (stat(path, &sb) == 0) {\n+        hasher.Write((const unsigned char*)path, strlen(path) + 1);\n+        AddStat(hasher, sb);\n+    }\n+}\n+#endif\n+\n+void AddSysctl(CSHA512& hasher, const char* path)\n+{\n+#if HAVE_DECL_SYSCTLBYNAME\n+    unsigned char buffer[4096];\n+    size_t siz = 4096;\n+    int ret = sysctlbyname(path, buffer, &siz, nullptr, 0);\n+    if (ret == 0 || (ret == -1 && errno == ENOMEM)) {\n+        hasher.Write((const unsigned char*)path, strlen(path) + 1);\n+        hasher.Write(buffer, std::min<size_t>(siz, 4096));\n+    }\n+#endif\n+}\n+\n+#ifdef HAVE_GETCPUID\n+void AddCPUID(CSHA512& hasher)\n+{\n+    uint32_t ax, bx, cx, dx;\n+    GetCPUID(0, 0, ax, bx, cx, dx);\n+    hasher << ax << bx << cx << dx;\n+    uint32_t max = ax;\n+    for (uint32_t leaf = 1; leaf <= max; ++leaf) {\n+        for (uint32_t subleaf = 0;; ++subleaf) {\n+            GetCPUID(leaf, subleaf, ax, bx, cx, dx);\n+            hasher << leaf << subleaf << ax << bx << cx << dx;\n+            // Iterate over subleaves for leaf 4, 11, 13\n+            if (leaf != 4 && leaf != 11 && leaf != 13) break;\n+            if ((leaf == 4 || leaf == 13) && ax == 0) break;\n+            if (leaf == 11 && (cx & 0xFF00) == 0) break;\n+        }\n+    }\n+}\n+#endif\n+} // namespace\n+\n+void RandAddDynamicEnv(CSHA512& hasher)\n+{\n+    RandAddSeedPerfmon(hasher);\n+\n+#ifdef WIN32\n+    FILETIME ftime;\n+    GetSystemTimeAsFileTime(&ftime);\n+    hasher << ftime;\n+#else\n+#  ifdef __MACH__\n+    hasher << mach_absolute_time();\n+#  else\n+    struct timespec ts;\n+    clock_gettime(CLOCK_MONOTONIC, &ts);\n+    hasher << ts.tv_sec << ts.tv_nsec;\n+#  endif\n+    struct timeval tv;\n+    gettimeofday(&tv, nullptr);\n+    hasher << tv.tv_sec << tv.tv_usec;\n+\n+    // Current resource usage.\n+    struct rusage usage;\n+    if (getrusage(RUSAGE_SELF, &usage) == 0) {\n+        hasher << usage.ru_utime.tv_sec << usage.ru_utime.tv_usec << usage.ru_stime.tv_sec << usage.ru_stime.tv_usec;\n+        hasher << usage.ru_maxrss << usage.ru_minflt << usage.ru_majflt << usage.ru_inblock << usage.ru_oublock;\n+        hasher << usage.ru_nvcsw << usage.ru_nivcsw;\n+    }\n+\n+#ifdef __linux__\n+    AddFile(hasher, \"/proc/diskstats\");\n+    AddFile(hasher, \"/proc/vmstat\");\n+    AddFile(hasher, \"/proc/schedstat\");\n+    AddFile(hasher, \"/proc/zoneinfo\");\n+    AddFile(hasher, \"/proc/meminfo\");\n+    AddFile(hasher, \"/proc/softirqs\");\n+    AddFile(hasher, \"/proc/stat\");\n+    AddFile(hasher, \"/proc/self/status\");\n+#endif\n+#endif\n+\n+    AddSysctl(hasher, \"vm.loadavg\");\n+    AddSysctl(hasher, \"vm.swapusage\");\n+\n+    // Stack and heap location\n+    void* addr = malloc(4097);\n+    hasher << &addr << addr;\n+    free(addr);\n+}\n+\n+void RandAddStaticEnv(CSHA512& hasher)\n+{\n+    // Some compile-time static properties\n+    uint32_t x;\n+    x = ((CHAR_MIN < 0) << 30) + (sizeof(void *) << 16) + (sizeof(long) << 8) + sizeof(int);\n+    hasher << x;\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__) && defined(__GNUC_PATCHLEVEL__)\n+    x = (__GNUC_PATCHLEVEL__ << 16) + (__GNUC_MINOR__ << 8) + __GNUC__;\n+    hasher << x;\n+#endif\n+#if defined(_MSC_VER)\n+    x = _MSC_VER;\n+    hasher << x;\n+#endif\n+#if defined(__STDC_VERSION__)\n+    x = __STDC_VERSION__;\n+    hasher << x;\n+#endif\n+#if defined(_XOPEN_VERSION)\n+    x = _XOPEN_VERSION;\n+    hasher << x;\n+#endif\n+\n+#ifdef __linux__\n+    // Information available through getauxval()\n+#  ifdef AT_HWCAP\n+    hasher << getauxval(AT_HWCAP);\n+#  endif\n+#  ifdef AT_HWCAP2\n+    hasher << getauxval(AT_HWCAP2);\n+#  endif\n+#  ifdef AT_RANDOM\n+    hasher << getauxval(AT_RANDOM);",
      "path": "src/randomenv.cpp",
      "position": null,
      "original_position": 273,
      "commit_id": "d1c02775aa74a0610809ac54bb241ddad61d2d8c",
      "original_commit_id": "8a27be0fb0065d897d4e55a4f7367d54f8914d77",
      "in_reply_to_id": 341203400,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2019-10-31T18:49:14Z",
      "updated_at": "2019-11-12T23:40:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#discussion_r341310902",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/341310902"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 273,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342455629",
      "pull_request_review_id": 311595893,
      "id": 342455629,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MjQ1NTYyOQ==",
      "diff_hunk": "@@ -0,0 +1,507 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <randomenv.h>\n+\n+#include <clientversion.h>\n+#include <compat/cpuid.h>\n+#include <crypto/sha512.h>\n+#include <support/cleanse.h>\n+#include <util/time.h> // for GetTime()\n+#ifdef WIN32\n+#include <compat.h> // for Windows API\n+#endif\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <chrono>\n+#include <climits>\n+#include <thread>\n+#include <vector>\n+\n+#include <stdint.h>\n+#include <string.h>\n+#ifndef WIN32\n+#include <sys/types.h> // must go before a number of other headers\n+#include <fcntl.h>\n+#include <netinet/in.h>\n+#include <sys/resource.h>\n+#include <sys/socket.h>\n+#include <sys/stat.h>\n+#include <sys/time.h>\n+#include <sys/utsname.h>\n+#include <unistd.h>\n+#endif\n+#ifdef __MACH__\n+#include <mach/clock.h>\n+#include <mach/mach.h>\n+#include <mach/mach_time.h>\n+#endif\n+#if HAVE_DECL_GETIFADDRS\n+#include <ifaddrs.h>\n+#endif\n+#if HAVE_DECL_SYSCTL\n+#include <sys/sysctl.h>\n+#endif\n+#if HAVE_VM_VM_PARAM_H\n+#include <vm/vm_param.h>\n+#endif\n+#if HAVE_SYS_RESOURCES_H\n+#include <sys/resources.h>\n+#endif\n+#if HAVE_SYS_VMMETER_H\n+#include <sys/vmmeter.h>\n+#endif\n+#ifdef __linux__\n+#include <sys/auxv.h>\n+#endif\n+\n+//! Necessary on some platforms\n+extern char** environ;\n+\n+namespace {\n+\n+void RandAddSeedPerfmon(CSHA512& hasher)\n+{\n+#ifdef WIN32\n+    // Don't need this on Linux, OpenSSL automatically uses /dev/urandom\n+    // Seed with the entire set of perfmon data\n+\n+    // This can take up to 2 seconds, so only do it every 10 minutes\n+    static std::atomic<std::chrono::seconds> last_perfmon{std::chrono::seconds{0}};\n+    auto last_time = last_perfmon.load();\n+    auto current_time = GetTime<std::chrono::seconds>();\n+    if (current_time < last_time + std::chrono::minutes{10}) return;\n+    last_perfmon = current_time;\n+\n+    std::vector<unsigned char> vData(250000, 0);\n+    long ret = 0;\n+    unsigned long nSize = 0;\n+    const size_t nMaxSize = 10000000; // Bail out at more than 10MB of performance data\n+    while (true) {\n+        nSize = vData.size();\n+        ret = RegQueryValueExA(HKEY_PERFORMANCE_DATA, \"Global\", nullptr, nullptr, vData.data(), &nSize);\n+        if (ret != ERROR_MORE_DATA || vData.size() >= nMaxSize)\n+            break;\n+        vData.resize(std::max((vData.size() * 3) / 2, nMaxSize)); // Grow size of buffer exponentially\n+    }\n+    RegCloseKey(HKEY_PERFORMANCE_DATA);\n+    if (ret == ERROR_SUCCESS) {\n+        hasher.Write(vData.data(), nSize);\n+        memory_cleanse(vData.data(), nSize);\n+    } else {\n+        // Performance data is only a best-effort attempt at improving the\n+        // situation when the OS randomness (and other sources) aren't\n+        // adequate. As a result, failure to read it is isn't considered critical,\n+        // so we don't call RandFailure().\n+        // TODO: Add logging when the logger is made functional before global\n+        // constructors have been invoked.\n+    }\n+#endif\n+}\n+\n+/** Helper to easily feed data into a CSHA512.\n+ *\n+ * Note that this does not serialize the passed object (like stream.h's << operators do).\n+ * Its raw memory representation is used directly.\n+ */\n+template<typename T>\n+CSHA512& operator<<(CSHA512& hasher, const T& data) {\n+    hasher.Write((const unsigned char*)&data, sizeof(data));\n+    return hasher;\n+}\n+\n+#ifndef WIN32\n+void AddSockaddr(CSHA512& hasher, const struct sockaddr *addr)\n+{\n+    if (addr == nullptr) return;\n+    switch (addr->sa_family) {\n+    case AF_INET:\n+        hasher.Write((const unsigned char*)addr, sizeof(sockaddr_in));\n+        break;\n+    case AF_INET6:\n+        hasher.Write((const unsigned char*)addr, sizeof(sockaddr_in6));\n+        break;\n+    default:\n+        hasher.Write((const unsigned char*)&addr->sa_family, sizeof(addr->sa_family));\n+    }\n+}\n+\n+void AddStat(CSHA512& hasher, const struct stat& sb)\n+{\n+    hasher << sb.st_dev << sb.st_ino << sb.st_mode << sb.st_nlink << sb.st_uid << sb.st_gid << sb.st_size << sb.st_blksize << sb.st_blocks << sb.st_atime << sb.st_mtime << sb.st_ctime;\n+}\n+\n+void AddFile(CSHA512& hasher, const char *path)\n+{\n+    struct stat sb;\n+    int f = open(path, O_RDONLY);\n+    if (f != -1) {\n+        unsigned char fbuf[1024];\n+        int n;\n+        hasher.Write((const unsigned char*)&f, sizeof(f));\n+        if (fstat(f, &sb) == 0) {\n+            AddStat(hasher, sb);\n+        }\n+        do {\n+            n = read(f, fbuf, sizeof(fbuf));\n+            if (n > 0) hasher.Write(fbuf, n);\n+            /* not bothering with EINTR handling. */\n+        } while (n == sizeof(fbuf));\n+        close(f);\n+    }\n+}\n+\n+void AddPath(CSHA512& hasher, const char *path)\n+{\n+    struct stat sb;\n+    if (stat(path, &sb) == 0) {\n+        hasher.Write((const unsigned char*)path, strlen(path) + 1);\n+        AddStat(hasher, sb);\n+    }\n+}\n+#endif\n+\n+template<int... S>\n+void AddSysctl(CSHA512& hasher)\n+{\n+#if HAVE_DECL_SYSCTL",
      "path": "src/randomenv.cpp",
      "position": null,
      "original_position": 174,
      "commit_id": "d1c02775aa74a0610809ac54bb241ddad61d2d8c",
      "original_commit_id": "d78a49906f39688b41bc36869fc91665cfbf8a21",
      "in_reply_to_id": null,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Shouldn't this ifdef be outside the function instead of outside it? I mean, I don't think it should be possible to call `AddSysctl` on systems without sysctl?",
      "created_at": "2019-11-05T09:26:12Z",
      "updated_at": "2019-11-12T23:40:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#discussion_r342455629",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342455629"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 174,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342456219",
      "pull_request_review_id": 311596721,
      "id": 342456219,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MjQ1NjIxOQ==",
      "diff_hunk": "@@ -0,0 +1,507 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <randomenv.h>\n+\n+#include <clientversion.h>\n+#include <compat/cpuid.h>\n+#include <crypto/sha512.h>\n+#include <support/cleanse.h>\n+#include <util/time.h> // for GetTime()\n+#ifdef WIN32\n+#include <compat.h> // for Windows API\n+#endif\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <chrono>\n+#include <climits>\n+#include <thread>\n+#include <vector>\n+\n+#include <stdint.h>\n+#include <string.h>\n+#ifndef WIN32\n+#include <sys/types.h> // must go before a number of other headers\n+#include <fcntl.h>\n+#include <netinet/in.h>\n+#include <sys/resource.h>\n+#include <sys/socket.h>\n+#include <sys/stat.h>\n+#include <sys/time.h>\n+#include <sys/utsname.h>\n+#include <unistd.h>\n+#endif\n+#ifdef __MACH__\n+#include <mach/clock.h>\n+#include <mach/mach.h>\n+#include <mach/mach_time.h>\n+#endif\n+#if HAVE_DECL_GETIFADDRS\n+#include <ifaddrs.h>\n+#endif\n+#if HAVE_DECL_SYSCTL\n+#include <sys/sysctl.h>\n+#endif\n+#if HAVE_VM_VM_PARAM_H\n+#include <vm/vm_param.h>\n+#endif\n+#if HAVE_SYS_RESOURCES_H\n+#include <sys/resources.h>\n+#endif\n+#if HAVE_SYS_VMMETER_H\n+#include <sys/vmmeter.h>\n+#endif\n+#ifdef __linux__\n+#include <sys/auxv.h>\n+#endif\n+\n+//! Necessary on some platforms\n+extern char** environ;\n+\n+namespace {\n+\n+void RandAddSeedPerfmon(CSHA512& hasher)\n+{\n+#ifdef WIN32\n+    // Don't need this on Linux, OpenSSL automatically uses /dev/urandom\n+    // Seed with the entire set of perfmon data\n+\n+    // This can take up to 2 seconds, so only do it every 10 minutes\n+    static std::atomic<std::chrono::seconds> last_perfmon{std::chrono::seconds{0}};\n+    auto last_time = last_perfmon.load();\n+    auto current_time = GetTime<std::chrono::seconds>();\n+    if (current_time < last_time + std::chrono::minutes{10}) return;\n+    last_perfmon = current_time;\n+\n+    std::vector<unsigned char> vData(250000, 0);\n+    long ret = 0;\n+    unsigned long nSize = 0;\n+    const size_t nMaxSize = 10000000; // Bail out at more than 10MB of performance data\n+    while (true) {\n+        nSize = vData.size();\n+        ret = RegQueryValueExA(HKEY_PERFORMANCE_DATA, \"Global\", nullptr, nullptr, vData.data(), &nSize);\n+        if (ret != ERROR_MORE_DATA || vData.size() >= nMaxSize)\n+            break;\n+        vData.resize(std::max((vData.size() * 3) / 2, nMaxSize)); // Grow size of buffer exponentially\n+    }\n+    RegCloseKey(HKEY_PERFORMANCE_DATA);\n+    if (ret == ERROR_SUCCESS) {\n+        hasher.Write(vData.data(), nSize);\n+        memory_cleanse(vData.data(), nSize);\n+    } else {\n+        // Performance data is only a best-effort attempt at improving the\n+        // situation when the OS randomness (and other sources) aren't\n+        // adequate. As a result, failure to read it is isn't considered critical,\n+        // so we don't call RandFailure().\n+        // TODO: Add logging when the logger is made functional before global\n+        // constructors have been invoked.\n+    }\n+#endif\n+}\n+\n+/** Helper to easily feed data into a CSHA512.\n+ *\n+ * Note that this does not serialize the passed object (like stream.h's << operators do).\n+ * Its raw memory representation is used directly.\n+ */\n+template<typename T>\n+CSHA512& operator<<(CSHA512& hasher, const T& data) {\n+    hasher.Write((const unsigned char*)&data, sizeof(data));\n+    return hasher;\n+}\n+\n+#ifndef WIN32\n+void AddSockaddr(CSHA512& hasher, const struct sockaddr *addr)\n+{\n+    if (addr == nullptr) return;\n+    switch (addr->sa_family) {\n+    case AF_INET:\n+        hasher.Write((const unsigned char*)addr, sizeof(sockaddr_in));\n+        break;\n+    case AF_INET6:\n+        hasher.Write((const unsigned char*)addr, sizeof(sockaddr_in6));\n+        break;\n+    default:\n+        hasher.Write((const unsigned char*)&addr->sa_family, sizeof(addr->sa_family));\n+    }\n+}\n+\n+void AddStat(CSHA512& hasher, const struct stat& sb)\n+{\n+    hasher << sb.st_dev << sb.st_ino << sb.st_mode << sb.st_nlink << sb.st_uid << sb.st_gid << sb.st_size << sb.st_blksize << sb.st_blocks << sb.st_atime << sb.st_mtime << sb.st_ctime;\n+}\n+\n+void AddFile(CSHA512& hasher, const char *path)\n+{\n+    struct stat sb;\n+    int f = open(path, O_RDONLY);\n+    if (f != -1) {\n+        unsigned char fbuf[1024];\n+        int n;\n+        hasher.Write((const unsigned char*)&f, sizeof(f));\n+        if (fstat(f, &sb) == 0) {\n+            AddStat(hasher, sb);\n+        }\n+        do {\n+            n = read(f, fbuf, sizeof(fbuf));\n+            if (n > 0) hasher.Write(fbuf, n);\n+            /* not bothering with EINTR handling. */\n+        } while (n == sizeof(fbuf));\n+        close(f);\n+    }\n+}\n+\n+void AddPath(CSHA512& hasher, const char *path)\n+{\n+    struct stat sb;\n+    if (stat(path, &sb) == 0) {\n+        hasher.Write((const unsigned char*)path, strlen(path) + 1);\n+        AddStat(hasher, sb);\n+    }\n+}\n+#endif\n+\n+template<int... S>\n+void AddSysctl(CSHA512& hasher)\n+{\n+#if HAVE_DECL_SYSCTL\n+    int CTL[sizeof...(S)] = {S...};\n+    unsigned char buffer[65536];\n+    size_t siz = 65536;\n+    int ret = sysctl(CTL, sizeof...(S), buffer, &siz, nullptr, 0);\n+    if (ret == 0 || (ret == -1 && errno == ENOMEM)) {\n+        hasher << sizeof(CTL);\n+        hasher.Write((const unsigned char*)CTL, sizeof(CTL));\n+        hasher.Write(buffer, std::min<size_t>(siz, 4096));\n+    }\n+#endif\n+}\n+\n+#ifdef HAVE_GETCPUID\n+void inline AddCPUID(CSHA512& hasher, uint32_t leaf, uint32_t subleaf, uint32_t& ax, uint32_t& bx, uint32_t& cx, uint32_t& dx)\n+{\n+    GetCPUID(leaf, subleaf, ax, bx, cx, dx);\n+    hasher << leaf << subleaf << ax << bx << cx << dx;\n+}\n+\n+void AddAllCPUID(CSHA512& hasher)\n+{\n+    uint32_t ax, bx, cx, dx;\n+    // Iterate over all standard leaves\n+    AddCPUID(hasher, 0, 0, ax, bx, cx, dx); // Returns max leaf in ax\n+    uint32_t max = ax;\n+    for (uint32_t leaf = 1; leaf <= max; ++leaf) {\n+        for (uint32_t subleaf = 0;; ++subleaf) {\n+            AddCPUID(hasher, leaf, subleaf, ax, bx, cx, dx);\n+            // Iterate over subleaves for leaf 4, 11, 13\n+            if (leaf != 4 && leaf != 11 && leaf != 13) break;\n+            if ((leaf == 4 || leaf == 13) && ax == 0) break;\n+            if (leaf == 11 && (cx & 0xFF00) == 0) break;\n+        }\n+    }\n+    // Iterate over all extended leaves\n+    AddCPUID(hasher, 0x80000000, 0, ax, bx, cx, dx); // Returns max extended leaf in ax\n+    uint32_t ext_max = ax;\n+    for (uint32_t leaf = 0x80000001; leaf <= ext_max; ++leaf) {\n+        AddCPUID(hasher, leaf, 0, ax, bx, cx, dx);\n+    }\n+}\n+#endif\n+} // namespace\n+\n+void RandAddDynamicEnv(CSHA512& hasher)\n+{\n+    RandAddSeedPerfmon(hasher);\n+\n+    // Various clocks\n+#ifdef WIN32\n+    FILETIME ftime;\n+    GetSystemTimeAsFileTime(&ftime);\n+    hasher << ftime;\n+#else\n+#  ifndef __MACH__\n+    // On non-MacOS systems, use various clock_gettime() calls.\n+    struct timespec ts;\n+#    ifdef CLOCK_MONOTONIC\n+    clock_gettime(CLOCK_MONOTONIC, &ts);\n+    hasher << ts.tv_sec << ts.tv_nsec;\n+#    endif\n+#    ifdef CLOCK_REALTIME\n+    clock_gettime(CLOCK_REALTIME, &ts);\n+    hasher << ts.tv_sec << ts.tv_nsec;\n+#    endif\n+#    ifdef CLOCK_BOOTTIME\n+    clock_gettime(CLOCK_BOOTTIME, &ts);\n+    hasher << ts.tv_sec << ts.tv_nsec;\n+#    endif\n+#  else\n+    // On MacOS use mach_absolute_time (number of CPU ticks since boot) as a replacement for CLOCK_MONOTONIC,\n+    // and clock_get_time for CALENDAR_CLOCK as a replacement for CLOCK_REALTIME.\n+    hasher << mach_absolute_time();\n+    // From https://gist.github.com/jbenet/1087739\n+    clock_serv_t cclock;\n+    mach_timespec_t mts;\n+    host_get_clock_service(mach_host_self(), CALENDAR_CLOCK, &cclock);",
      "path": "src/randomenv.cpp",
      "position": null,
      "original_position": 251,
      "commit_id": "d1c02775aa74a0610809ac54bb241ddad61d2d8c",
      "original_commit_id": "d78a49906f39688b41bc36869fc91665cfbf8a21",
      "in_reply_to_id": null,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "could creating the service fail? is there a return value to handle here?",
      "created_at": "2019-11-05T09:27:31Z",
      "updated_at": "2019-11-12T23:40:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#discussion_r342456219",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342456219"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 251,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342845005",
      "pull_request_review_id": 312105071,
      "id": 342845005,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0Mjg0NTAwNQ==",
      "diff_hunk": "@@ -0,0 +1,507 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <randomenv.h>\n+\n+#include <clientversion.h>\n+#include <compat/cpuid.h>\n+#include <crypto/sha512.h>\n+#include <support/cleanse.h>\n+#include <util/time.h> // for GetTime()\n+#ifdef WIN32\n+#include <compat.h> // for Windows API\n+#endif\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <chrono>\n+#include <climits>\n+#include <thread>\n+#include <vector>\n+\n+#include <stdint.h>\n+#include <string.h>\n+#ifndef WIN32\n+#include <sys/types.h> // must go before a number of other headers\n+#include <fcntl.h>\n+#include <netinet/in.h>\n+#include <sys/resource.h>\n+#include <sys/socket.h>\n+#include <sys/stat.h>\n+#include <sys/time.h>\n+#include <sys/utsname.h>\n+#include <unistd.h>\n+#endif\n+#ifdef __MACH__\n+#include <mach/clock.h>\n+#include <mach/mach.h>\n+#include <mach/mach_time.h>\n+#endif\n+#if HAVE_DECL_GETIFADDRS\n+#include <ifaddrs.h>\n+#endif\n+#if HAVE_DECL_SYSCTL\n+#include <sys/sysctl.h>\n+#endif\n+#if HAVE_VM_VM_PARAM_H\n+#include <vm/vm_param.h>\n+#endif\n+#if HAVE_SYS_RESOURCES_H\n+#include <sys/resources.h>\n+#endif\n+#if HAVE_SYS_VMMETER_H\n+#include <sys/vmmeter.h>\n+#endif\n+#ifdef __linux__\n+#include <sys/auxv.h>\n+#endif\n+\n+//! Necessary on some platforms\n+extern char** environ;\n+\n+namespace {\n+\n+void RandAddSeedPerfmon(CSHA512& hasher)\n+{\n+#ifdef WIN32\n+    // Don't need this on Linux, OpenSSL automatically uses /dev/urandom\n+    // Seed with the entire set of perfmon data\n+\n+    // This can take up to 2 seconds, so only do it every 10 minutes\n+    static std::atomic<std::chrono::seconds> last_perfmon{std::chrono::seconds{0}};\n+    auto last_time = last_perfmon.load();\n+    auto current_time = GetTime<std::chrono::seconds>();\n+    if (current_time < last_time + std::chrono::minutes{10}) return;\n+    last_perfmon = current_time;\n+\n+    std::vector<unsigned char> vData(250000, 0);\n+    long ret = 0;\n+    unsigned long nSize = 0;\n+    const size_t nMaxSize = 10000000; // Bail out at more than 10MB of performance data\n+    while (true) {\n+        nSize = vData.size();\n+        ret = RegQueryValueExA(HKEY_PERFORMANCE_DATA, \"Global\", nullptr, nullptr, vData.data(), &nSize);\n+        if (ret != ERROR_MORE_DATA || vData.size() >= nMaxSize)\n+            break;\n+        vData.resize(std::max((vData.size() * 3) / 2, nMaxSize)); // Grow size of buffer exponentially\n+    }\n+    RegCloseKey(HKEY_PERFORMANCE_DATA);\n+    if (ret == ERROR_SUCCESS) {\n+        hasher.Write(vData.data(), nSize);\n+        memory_cleanse(vData.data(), nSize);\n+    } else {\n+        // Performance data is only a best-effort attempt at improving the\n+        // situation when the OS randomness (and other sources) aren't\n+        // adequate. As a result, failure to read it is isn't considered critical,\n+        // so we don't call RandFailure().\n+        // TODO: Add logging when the logger is made functional before global\n+        // constructors have been invoked.\n+    }\n+#endif\n+}\n+\n+/** Helper to easily feed data into a CSHA512.\n+ *\n+ * Note that this does not serialize the passed object (like stream.h's << operators do).\n+ * Its raw memory representation is used directly.\n+ */\n+template<typename T>\n+CSHA512& operator<<(CSHA512& hasher, const T& data) {\n+    hasher.Write((const unsigned char*)&data, sizeof(data));\n+    return hasher;\n+}\n+\n+#ifndef WIN32\n+void AddSockaddr(CSHA512& hasher, const struct sockaddr *addr)\n+{\n+    if (addr == nullptr) return;\n+    switch (addr->sa_family) {\n+    case AF_INET:\n+        hasher.Write((const unsigned char*)addr, sizeof(sockaddr_in));\n+        break;\n+    case AF_INET6:\n+        hasher.Write((const unsigned char*)addr, sizeof(sockaddr_in6));\n+        break;\n+    default:\n+        hasher.Write((const unsigned char*)&addr->sa_family, sizeof(addr->sa_family));\n+    }\n+}\n+\n+void AddStat(CSHA512& hasher, const struct stat& sb)\n+{\n+    hasher << sb.st_dev << sb.st_ino << sb.st_mode << sb.st_nlink << sb.st_uid << sb.st_gid << sb.st_size << sb.st_blksize << sb.st_blocks << sb.st_atime << sb.st_mtime << sb.st_ctime;\n+}\n+\n+void AddFile(CSHA512& hasher, const char *path)\n+{\n+    struct stat sb;\n+    int f = open(path, O_RDONLY);\n+    if (f != -1) {\n+        unsigned char fbuf[1024];\n+        int n;\n+        hasher.Write((const unsigned char*)&f, sizeof(f));\n+        if (fstat(f, &sb) == 0) {\n+            AddStat(hasher, sb);\n+        }\n+        do {\n+            n = read(f, fbuf, sizeof(fbuf));\n+            if (n > 0) hasher.Write(fbuf, n);\n+            /* not bothering with EINTR handling. */\n+        } while (n == sizeof(fbuf));\n+        close(f);\n+    }\n+}\n+\n+void AddPath(CSHA512& hasher, const char *path)\n+{\n+    struct stat sb;\n+    if (stat(path, &sb) == 0) {\n+        hasher.Write((const unsigned char*)path, strlen(path) + 1);\n+        AddStat(hasher, sb);\n+    }\n+}\n+#endif\n+\n+template<int... S>\n+void AddSysctl(CSHA512& hasher)\n+{\n+#if HAVE_DECL_SYSCTL\n+    int CTL[sizeof...(S)] = {S...};\n+    unsigned char buffer[65536];\n+    size_t siz = 65536;\n+    int ret = sysctl(CTL, sizeof...(S), buffer, &siz, nullptr, 0);\n+    if (ret == 0 || (ret == -1 && errno == ENOMEM)) {\n+        hasher << sizeof(CTL);\n+        hasher.Write((const unsigned char*)CTL, sizeof(CTL));\n+        hasher.Write(buffer, std::min<size_t>(siz, 4096));\n+    }\n+#endif\n+}\n+\n+#ifdef HAVE_GETCPUID\n+void inline AddCPUID(CSHA512& hasher, uint32_t leaf, uint32_t subleaf, uint32_t& ax, uint32_t& bx, uint32_t& cx, uint32_t& dx)\n+{\n+    GetCPUID(leaf, subleaf, ax, bx, cx, dx);\n+    hasher << leaf << subleaf << ax << bx << cx << dx;\n+}\n+\n+void AddAllCPUID(CSHA512& hasher)\n+{\n+    uint32_t ax, bx, cx, dx;\n+    // Iterate over all standard leaves\n+    AddCPUID(hasher, 0, 0, ax, bx, cx, dx); // Returns max leaf in ax\n+    uint32_t max = ax;\n+    for (uint32_t leaf = 1; leaf <= max; ++leaf) {\n+        for (uint32_t subleaf = 0;; ++subleaf) {\n+            AddCPUID(hasher, leaf, subleaf, ax, bx, cx, dx);\n+            // Iterate over subleaves for leaf 4, 11, 13\n+            if (leaf != 4 && leaf != 11 && leaf != 13) break;\n+            if ((leaf == 4 || leaf == 13) && ax == 0) break;\n+            if (leaf == 11 && (cx & 0xFF00) == 0) break;\n+        }\n+    }\n+    // Iterate over all extended leaves\n+    AddCPUID(hasher, 0x80000000, 0, ax, bx, cx, dx); // Returns max extended leaf in ax\n+    uint32_t ext_max = ax;\n+    for (uint32_t leaf = 0x80000001; leaf <= ext_max; ++leaf) {\n+        AddCPUID(hasher, leaf, 0, ax, bx, cx, dx);\n+    }\n+}\n+#endif\n+} // namespace\n+\n+void RandAddDynamicEnv(CSHA512& hasher)\n+{\n+    RandAddSeedPerfmon(hasher);\n+\n+    // Various clocks\n+#ifdef WIN32\n+    FILETIME ftime;\n+    GetSystemTimeAsFileTime(&ftime);\n+    hasher << ftime;\n+#else\n+#  ifndef __MACH__\n+    // On non-MacOS systems, use various clock_gettime() calls.\n+    struct timespec ts;\n+#    ifdef CLOCK_MONOTONIC\n+    clock_gettime(CLOCK_MONOTONIC, &ts);\n+    hasher << ts.tv_sec << ts.tv_nsec;\n+#    endif\n+#    ifdef CLOCK_REALTIME\n+    clock_gettime(CLOCK_REALTIME, &ts);\n+    hasher << ts.tv_sec << ts.tv_nsec;\n+#    endif\n+#    ifdef CLOCK_BOOTTIME\n+    clock_gettime(CLOCK_BOOTTIME, &ts);\n+    hasher << ts.tv_sec << ts.tv_nsec;\n+#    endif\n+#  else\n+    // On MacOS use mach_absolute_time (number of CPU ticks since boot) as a replacement for CLOCK_MONOTONIC,\n+    // and clock_get_time for CALENDAR_CLOCK as a replacement for CLOCK_REALTIME.\n+    hasher << mach_absolute_time();\n+    // From https://gist.github.com/jbenet/1087739\n+    clock_serv_t cclock;\n+    mach_timespec_t mts;\n+    host_get_clock_service(mach_host_self(), CALENDAR_CLOCK, &cclock);",
      "path": "src/randomenv.cpp",
      "position": null,
      "original_position": 251,
      "commit_id": "d1c02775aa74a0610809ac54bb241ddad61d2d8c",
      "original_commit_id": "d78a49906f39688b41bc36869fc91665cfbf8a21",
      "in_reply_to_id": 342456219,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2019-11-05T23:09:58Z",
      "updated_at": "2019-11-12T23:40:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#discussion_r342845005",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342845005"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 251,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342845049",
      "pull_request_review_id": 312105122,
      "id": 342845049,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0Mjg0NTA0OQ==",
      "diff_hunk": "@@ -0,0 +1,507 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <randomenv.h>\n+\n+#include <clientversion.h>\n+#include <compat/cpuid.h>\n+#include <crypto/sha512.h>\n+#include <support/cleanse.h>\n+#include <util/time.h> // for GetTime()\n+#ifdef WIN32\n+#include <compat.h> // for Windows API\n+#endif\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <chrono>\n+#include <climits>\n+#include <thread>\n+#include <vector>\n+\n+#include <stdint.h>\n+#include <string.h>\n+#ifndef WIN32\n+#include <sys/types.h> // must go before a number of other headers\n+#include <fcntl.h>\n+#include <netinet/in.h>\n+#include <sys/resource.h>\n+#include <sys/socket.h>\n+#include <sys/stat.h>\n+#include <sys/time.h>\n+#include <sys/utsname.h>\n+#include <unistd.h>\n+#endif\n+#ifdef __MACH__\n+#include <mach/clock.h>\n+#include <mach/mach.h>\n+#include <mach/mach_time.h>\n+#endif\n+#if HAVE_DECL_GETIFADDRS\n+#include <ifaddrs.h>\n+#endif\n+#if HAVE_DECL_SYSCTL\n+#include <sys/sysctl.h>\n+#endif\n+#if HAVE_VM_VM_PARAM_H\n+#include <vm/vm_param.h>\n+#endif\n+#if HAVE_SYS_RESOURCES_H\n+#include <sys/resources.h>\n+#endif\n+#if HAVE_SYS_VMMETER_H\n+#include <sys/vmmeter.h>\n+#endif\n+#ifdef __linux__\n+#include <sys/auxv.h>\n+#endif\n+\n+//! Necessary on some platforms\n+extern char** environ;\n+\n+namespace {\n+\n+void RandAddSeedPerfmon(CSHA512& hasher)\n+{\n+#ifdef WIN32\n+    // Don't need this on Linux, OpenSSL automatically uses /dev/urandom\n+    // Seed with the entire set of perfmon data\n+\n+    // This can take up to 2 seconds, so only do it every 10 minutes\n+    static std::atomic<std::chrono::seconds> last_perfmon{std::chrono::seconds{0}};\n+    auto last_time = last_perfmon.load();\n+    auto current_time = GetTime<std::chrono::seconds>();\n+    if (current_time < last_time + std::chrono::minutes{10}) return;\n+    last_perfmon = current_time;\n+\n+    std::vector<unsigned char> vData(250000, 0);\n+    long ret = 0;\n+    unsigned long nSize = 0;\n+    const size_t nMaxSize = 10000000; // Bail out at more than 10MB of performance data\n+    while (true) {\n+        nSize = vData.size();\n+        ret = RegQueryValueExA(HKEY_PERFORMANCE_DATA, \"Global\", nullptr, nullptr, vData.data(), &nSize);\n+        if (ret != ERROR_MORE_DATA || vData.size() >= nMaxSize)\n+            break;\n+        vData.resize(std::max((vData.size() * 3) / 2, nMaxSize)); // Grow size of buffer exponentially\n+    }\n+    RegCloseKey(HKEY_PERFORMANCE_DATA);\n+    if (ret == ERROR_SUCCESS) {\n+        hasher.Write(vData.data(), nSize);\n+        memory_cleanse(vData.data(), nSize);\n+    } else {\n+        // Performance data is only a best-effort attempt at improving the\n+        // situation when the OS randomness (and other sources) aren't\n+        // adequate. As a result, failure to read it is isn't considered critical,\n+        // so we don't call RandFailure().\n+        // TODO: Add logging when the logger is made functional before global\n+        // constructors have been invoked.\n+    }\n+#endif\n+}\n+\n+/** Helper to easily feed data into a CSHA512.\n+ *\n+ * Note that this does not serialize the passed object (like stream.h's << operators do).\n+ * Its raw memory representation is used directly.\n+ */\n+template<typename T>\n+CSHA512& operator<<(CSHA512& hasher, const T& data) {\n+    hasher.Write((const unsigned char*)&data, sizeof(data));\n+    return hasher;\n+}\n+\n+#ifndef WIN32\n+void AddSockaddr(CSHA512& hasher, const struct sockaddr *addr)\n+{\n+    if (addr == nullptr) return;\n+    switch (addr->sa_family) {\n+    case AF_INET:\n+        hasher.Write((const unsigned char*)addr, sizeof(sockaddr_in));\n+        break;\n+    case AF_INET6:\n+        hasher.Write((const unsigned char*)addr, sizeof(sockaddr_in6));\n+        break;\n+    default:\n+        hasher.Write((const unsigned char*)&addr->sa_family, sizeof(addr->sa_family));\n+    }\n+}\n+\n+void AddStat(CSHA512& hasher, const struct stat& sb)\n+{\n+    hasher << sb.st_dev << sb.st_ino << sb.st_mode << sb.st_nlink << sb.st_uid << sb.st_gid << sb.st_size << sb.st_blksize << sb.st_blocks << sb.st_atime << sb.st_mtime << sb.st_ctime;\n+}\n+\n+void AddFile(CSHA512& hasher, const char *path)\n+{\n+    struct stat sb;\n+    int f = open(path, O_RDONLY);\n+    if (f != -1) {\n+        unsigned char fbuf[1024];\n+        int n;\n+        hasher.Write((const unsigned char*)&f, sizeof(f));\n+        if (fstat(f, &sb) == 0) {\n+            AddStat(hasher, sb);\n+        }\n+        do {\n+            n = read(f, fbuf, sizeof(fbuf));\n+            if (n > 0) hasher.Write(fbuf, n);\n+            /* not bothering with EINTR handling. */\n+        } while (n == sizeof(fbuf));\n+        close(f);\n+    }\n+}\n+\n+void AddPath(CSHA512& hasher, const char *path)\n+{\n+    struct stat sb;\n+    if (stat(path, &sb) == 0) {\n+        hasher.Write((const unsigned char*)path, strlen(path) + 1);\n+        AddStat(hasher, sb);\n+    }\n+}\n+#endif\n+\n+template<int... S>\n+void AddSysctl(CSHA512& hasher)\n+{\n+#if HAVE_DECL_SYSCTL",
      "path": "src/randomenv.cpp",
      "position": null,
      "original_position": 174,
      "commit_id": "d1c02775aa74a0610809ac54bb241ddad61d2d8c",
      "original_commit_id": "d78a49906f39688b41bc36869fc91665cfbf8a21",
      "in_reply_to_id": 342455629,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2019-11-05T23:10:05Z",
      "updated_at": "2019-11-12T23:40:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#discussion_r342845049",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342845049"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 174,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342845055",
      "pull_request_review_id": 312105131,
      "id": 342845055,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0Mjg0NTA1NQ==",
      "diff_hunk": "@@ -81,6 +99,58 @@ CSHA512& operator<<(CSHA512& hasher, const T& data) {\n     return hasher;\n }\n \n+#ifndef WIN32\n+void AddSockaddr(CSHA512& hasher, const struct sockaddr *addr)\n+{\n+    if (addr == nullptr) return;\n+    switch (addr->sa_family) {\n+    case AF_INET:\n+        hasher.Write((const unsigned char*)addr, sizeof(sockaddr_in));\n+        break;\n+    case AF_INET6:\n+        hasher.Write((const unsigned char*)addr, sizeof(sockaddr_in6));\n+        break;\n+    default:\n+        hasher.Write((const unsigned char*)&addr->sa_family, sizeof(addr->sa_family));\n+    }\n+}\n+\n+void AddStat(CSHA512& hasher, const struct stat& sb)\n+{\n+    hasher << sb.st_dev << sb.st_ino << sb.st_mode << sb.st_nlink << sb.st_uid << sb.st_gid << sb.st_size << sb.st_blksize << sb.st_blocks << sb.st_atime << sb.st_mtime << sb.st_ctime;\n+}\n+\n+void AddFile(CSHA512& hasher, const char *path)\n+{\n+    struct stat sb;\n+    int f = open(path, O_RDONLY);\n+    if (f != -1) {\n+        unsigned char fbuf[1024];\n+        int n;\n+        hasher.Write((const unsigned char*)&f, sizeof(f));\n+        if (fstat(f, &sb) == 0) {\n+            AddStat(hasher, sb);\n+        }\n+        do {\n+            n = read(f, fbuf, sizeof(fbuf));\n+            if (n > 0) hasher.Write(fbuf, n);\n+            /* not bothering with EINTR handling. */\n+        } while (n == sizeof(fbuf));",
      "path": "src/randomenv.cpp",
      "position": null,
      "original_position": 90,
      "commit_id": "d1c02775aa74a0610809ac54bb241ddad61d2d8c",
      "original_commit_id": "95f1642930b0fe1156bc9c7bf9ecadceef9426af",
      "in_reply_to_id": null,
      "user": {
        "login": "narula",
        "id": 177646,
        "node_id": "MDQ6VXNlcjE3NzY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/177646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/narula",
        "html_url": "https://github.com/narula",
        "followers_url": "https://api.github.com/users/narula/followers",
        "following_url": "https://api.github.com/users/narula/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/narula/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/narula/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/narula/subscriptions",
        "organizations_url": "https://api.github.com/users/narula/orgs",
        "repos_url": "https://api.github.com/users/narula/repos",
        "events_url": "https://api.github.com/users/narula/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/narula/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Might you consider only reading up to a certain number of bytes? I'm not sure you're guaranteed that some of these files won't be enormous.",
      "created_at": "2019-11-05T23:10:07Z",
      "updated_at": "2019-11-12T23:40:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#discussion_r342845055",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342845055"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 138,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342847638",
      "pull_request_review_id": 312108299,
      "id": 342847638,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0Mjg0NzYzOA==",
      "diff_hunk": "@@ -81,6 +99,58 @@ CSHA512& operator<<(CSHA512& hasher, const T& data) {\n     return hasher;\n }\n \n+#ifndef WIN32\n+void AddSockaddr(CSHA512& hasher, const struct sockaddr *addr)\n+{\n+    if (addr == nullptr) return;\n+    switch (addr->sa_family) {\n+    case AF_INET:\n+        hasher.Write((const unsigned char*)addr, sizeof(sockaddr_in));\n+        break;\n+    case AF_INET6:\n+        hasher.Write((const unsigned char*)addr, sizeof(sockaddr_in6));\n+        break;\n+    default:\n+        hasher.Write((const unsigned char*)&addr->sa_family, sizeof(addr->sa_family));\n+    }\n+}\n+\n+void AddStat(CSHA512& hasher, const struct stat& sb)\n+{\n+    hasher << sb.st_dev << sb.st_ino << sb.st_mode << sb.st_nlink << sb.st_uid << sb.st_gid << sb.st_size << sb.st_blksize << sb.st_blocks << sb.st_atime << sb.st_mtime << sb.st_ctime;\n+}\n+\n+void AddFile(CSHA512& hasher, const char *path)\n+{\n+    struct stat sb;\n+    int f = open(path, O_RDONLY);\n+    if (f != -1) {\n+        unsigned char fbuf[1024];\n+        int n;\n+        hasher.Write((const unsigned char*)&f, sizeof(f));\n+        if (fstat(f, &sb) == 0) {\n+            AddStat(hasher, sb);\n+        }\n+        do {\n+            n = read(f, fbuf, sizeof(fbuf));\n+            if (n > 0) hasher.Write(fbuf, n);\n+            /* not bothering with EINTR handling. */\n+        } while (n == sizeof(fbuf));",
      "path": "src/randomenv.cpp",
      "position": null,
      "original_position": 90,
      "commit_id": "d1c02775aa74a0610809ac54bb241ddad61d2d8c",
      "original_commit_id": "95f1642930b0fe1156bc9c7bf9ecadceef9426af",
      "in_reply_to_id": 342845055,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2019-11-05T23:18:38Z",
      "updated_at": "2019-11-12T23:40:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#discussion_r342847638",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342847638"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 138,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342856120",
      "pull_request_review_id": 312119100,
      "id": 342856120,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0Mjg1NjEyMA==",
      "diff_hunk": "@@ -0,0 +1,515 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <randomenv.h>\n+\n+#include <clientversion.h>\n+#include <compat/cpuid.h>\n+#include <crypto/sha512.h>\n+#include <support/cleanse.h>\n+#include <util/time.h> // for GetTime()\n+#ifdef WIN32\n+#include <compat.h> // for Windows API\n+#endif\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <chrono>\n+#include <climits>\n+#include <thread>\n+#include <vector>\n+\n+#include <stdint.h>\n+#include <string.h>\n+#ifndef WIN32\n+#include <sys/types.h> // must go before a number of other headers\n+#include <fcntl.h>\n+#include <netinet/in.h>\n+#include <sys/resource.h>\n+#include <sys/socket.h>\n+#include <sys/stat.h>\n+#include <sys/time.h>\n+#include <sys/utsname.h>\n+#include <unistd.h>\n+#endif\n+#ifdef __MACH__\n+#include <mach/clock.h>\n+#include <mach/mach.h>\n+#include <mach/mach_time.h>\n+#endif\n+#if HAVE_DECL_GETIFADDRS\n+#include <ifaddrs.h>\n+#endif\n+#if HAVE_DECL_SYSCTL\n+#include <sys/sysctl.h>\n+#endif\n+#if HAVE_VM_VM_PARAM_H\n+#include <vm/vm_param.h>\n+#endif\n+#if HAVE_SYS_RESOURCES_H\n+#include <sys/resources.h>\n+#endif\n+#if HAVE_SYS_VMMETER_H\n+#include <sys/vmmeter.h>\n+#endif\n+#ifdef __linux__\n+#include <sys/auxv.h>\n+#endif\n+\n+//! Necessary on some platforms\n+extern char** environ;\n+\n+namespace {\n+\n+void RandAddSeedPerfmon(CSHA512& hasher)\n+{\n+#ifdef WIN32\n+    // Don't need this on Linux, OpenSSL automatically uses /dev/urandom\n+    // Seed with the entire set of perfmon data\n+\n+    // This can take up to 2 seconds, so only do it every 10 minutes\n+    static std::atomic<std::chrono::seconds> last_perfmon{std::chrono::seconds{0}};\n+    auto last_time = last_perfmon.load();\n+    auto current_time = GetTime<std::chrono::seconds>();\n+    if (current_time < last_time + std::chrono::minutes{10}) return;\n+    last_perfmon = current_time;\n+\n+    std::vector<unsigned char> vData(250000, 0);\n+    long ret = 0;\n+    unsigned long nSize = 0;\n+    const size_t nMaxSize = 10000000; // Bail out at more than 10MB of performance data\n+    while (true) {\n+        nSize = vData.size();\n+        ret = RegQueryValueExA(HKEY_PERFORMANCE_DATA, \"Global\", nullptr, nullptr, vData.data(), &nSize);\n+        if (ret != ERROR_MORE_DATA || vData.size() >= nMaxSize)\n+            break;\n+        vData.resize(std::max((vData.size() * 3) / 2, nMaxSize)); // Grow size of buffer exponentially\n+    }\n+    RegCloseKey(HKEY_PERFORMANCE_DATA);\n+    if (ret == ERROR_SUCCESS) {\n+        hasher.Write(vData.data(), nSize);\n+        memory_cleanse(vData.data(), nSize);\n+    } else {\n+        // Performance data is only a best-effort attempt at improving the\n+        // situation when the OS randomness (and other sources) aren't\n+        // adequate. As a result, failure to read it is isn't considered critical,\n+        // so we don't call RandFailure().\n+        // TODO: Add logging when the logger is made functional before global\n+        // constructors have been invoked.\n+    }\n+#endif\n+}\n+\n+/** Helper to easily feed data into a CSHA512.\n+ *\n+ * Note that this does not serialize the passed object (like stream.h's << operators do).\n+ * Its raw memory representation is used directly.",
      "path": "src/randomenv.cpp",
      "position": 112,
      "original_position": 112,
      "commit_id": "d1c02775aa74a0610809ac54bb241ddad61d2d8c",
      "original_commit_id": "f14cd4197677729491bb5fe6110904531605092b",
      "in_reply_to_id": null,
      "user": {
        "login": "madars",
        "id": 1747924,
        "node_id": "MDQ6VXNlcjE3NDc5MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1747924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/madars",
        "html_url": "https://github.com/madars",
        "followers_url": "https://api.github.com/users/madars/followers",
        "following_url": "https://api.github.com/users/madars/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/madars/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/madars/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/madars/subscriptions",
        "organizations_url": "https://api.github.com/users/madars/orgs",
        "repos_url": "https://api.github.com/users/madars/repos",
        "events_url": "https://api.github.com/users/madars/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/madars/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should we make this comment explicitly enforced, e.g. having `static_assert(!std::is_same<T, char*>::value, \"calling hasher.operator<< on char* probably won't do what you want\");` or similar?",
      "created_at": "2019-11-05T23:49:37Z",
      "updated_at": "2019-11-12T23:40:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#discussion_r342856120",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342856120"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270"
        }
      },
      "start_line": 111,
      "original_start_line": 111,
      "start_side": "RIGHT",
      "line": 112,
      "original_line": 112,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342857493",
      "pull_request_review_id": 312120742,
      "id": 342857493,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0Mjg1NzQ5Mw==",
      "diff_hunk": "@@ -0,0 +1,515 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <randomenv.h>\n+\n+#include <clientversion.h>\n+#include <compat/cpuid.h>\n+#include <crypto/sha512.h>\n+#include <support/cleanse.h>\n+#include <util/time.h> // for GetTime()\n+#ifdef WIN32\n+#include <compat.h> // for Windows API\n+#endif\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <chrono>\n+#include <climits>\n+#include <thread>\n+#include <vector>\n+\n+#include <stdint.h>\n+#include <string.h>\n+#ifndef WIN32\n+#include <sys/types.h> // must go before a number of other headers\n+#include <fcntl.h>\n+#include <netinet/in.h>\n+#include <sys/resource.h>\n+#include <sys/socket.h>\n+#include <sys/stat.h>\n+#include <sys/time.h>\n+#include <sys/utsname.h>\n+#include <unistd.h>\n+#endif\n+#ifdef __MACH__\n+#include <mach/clock.h>\n+#include <mach/mach.h>\n+#include <mach/mach_time.h>\n+#endif\n+#if HAVE_DECL_GETIFADDRS\n+#include <ifaddrs.h>\n+#endif\n+#if HAVE_DECL_SYSCTL\n+#include <sys/sysctl.h>\n+#endif\n+#if HAVE_VM_VM_PARAM_H\n+#include <vm/vm_param.h>\n+#endif\n+#if HAVE_SYS_RESOURCES_H\n+#include <sys/resources.h>\n+#endif\n+#if HAVE_SYS_VMMETER_H\n+#include <sys/vmmeter.h>\n+#endif\n+#ifdef __linux__\n+#include <sys/auxv.h>\n+#endif\n+\n+//! Necessary on some platforms\n+extern char** environ;\n+\n+namespace {\n+\n+void RandAddSeedPerfmon(CSHA512& hasher)\n+{\n+#ifdef WIN32\n+    // Don't need this on Linux, OpenSSL automatically uses /dev/urandom\n+    // Seed with the entire set of perfmon data\n+\n+    // This can take up to 2 seconds, so only do it every 10 minutes\n+    static std::atomic<std::chrono::seconds> last_perfmon{std::chrono::seconds{0}};\n+    auto last_time = last_perfmon.load();\n+    auto current_time = GetTime<std::chrono::seconds>();\n+    if (current_time < last_time + std::chrono::minutes{10}) return;\n+    last_perfmon = current_time;\n+\n+    std::vector<unsigned char> vData(250000, 0);\n+    long ret = 0;\n+    unsigned long nSize = 0;\n+    const size_t nMaxSize = 10000000; // Bail out at more than 10MB of performance data\n+    while (true) {\n+        nSize = vData.size();\n+        ret = RegQueryValueExA(HKEY_PERFORMANCE_DATA, \"Global\", nullptr, nullptr, vData.data(), &nSize);\n+        if (ret != ERROR_MORE_DATA || vData.size() >= nMaxSize)\n+            break;\n+        vData.resize(std::max((vData.size() * 3) / 2, nMaxSize)); // Grow size of buffer exponentially\n+    }\n+    RegCloseKey(HKEY_PERFORMANCE_DATA);\n+    if (ret == ERROR_SUCCESS) {\n+        hasher.Write(vData.data(), nSize);\n+        memory_cleanse(vData.data(), nSize);\n+    } else {\n+        // Performance data is only a best-effort attempt at improving the\n+        // situation when the OS randomness (and other sources) aren't\n+        // adequate. As a result, failure to read it is isn't considered critical,\n+        // so we don't call RandFailure().\n+        // TODO: Add logging when the logger is made functional before global\n+        // constructors have been invoked.\n+    }\n+#endif\n+}\n+\n+/** Helper to easily feed data into a CSHA512.\n+ *\n+ * Note that this does not serialize the passed object (like stream.h's << operators do).\n+ * Its raw memory representation is used directly.",
      "path": "src/randomenv.cpp",
      "position": 112,
      "original_position": 112,
      "commit_id": "d1c02775aa74a0610809ac54bb241ddad61d2d8c",
      "original_commit_id": "f14cd4197677729491bb5fe6110904531605092b",
      "in_reply_to_id": 342856120,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "it's only defined in this cpp file, where the hasher is only used for one thing, so the scope for potential accidental misuse is very little (and who knows, maybe you'd *want* to hash a pointer here, if it's random enough due to ASLR)",
      "created_at": "2019-11-05T23:54:29Z",
      "updated_at": "2019-11-12T23:40:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#discussion_r342857493",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342857493"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270"
        }
      },
      "start_line": 111,
      "original_start_line": 111,
      "start_side": "RIGHT",
      "line": 112,
      "original_line": 112,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342859263",
      "pull_request_review_id": 312122849,
      "id": 342859263,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0Mjg1OTI2Mw==",
      "diff_hunk": "@@ -0,0 +1,515 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <randomenv.h>\n+\n+#include <clientversion.h>\n+#include <compat/cpuid.h>\n+#include <crypto/sha512.h>\n+#include <support/cleanse.h>\n+#include <util/time.h> // for GetTime()\n+#ifdef WIN32\n+#include <compat.h> // for Windows API\n+#endif\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <chrono>\n+#include <climits>\n+#include <thread>\n+#include <vector>\n+\n+#include <stdint.h>\n+#include <string.h>\n+#ifndef WIN32\n+#include <sys/types.h> // must go before a number of other headers\n+#include <fcntl.h>\n+#include <netinet/in.h>\n+#include <sys/resource.h>\n+#include <sys/socket.h>\n+#include <sys/stat.h>\n+#include <sys/time.h>\n+#include <sys/utsname.h>\n+#include <unistd.h>\n+#endif\n+#ifdef __MACH__\n+#include <mach/clock.h>\n+#include <mach/mach.h>\n+#include <mach/mach_time.h>\n+#endif\n+#if HAVE_DECL_GETIFADDRS\n+#include <ifaddrs.h>\n+#endif\n+#if HAVE_DECL_SYSCTL\n+#include <sys/sysctl.h>\n+#endif\n+#if HAVE_VM_VM_PARAM_H\n+#include <vm/vm_param.h>\n+#endif\n+#if HAVE_SYS_RESOURCES_H\n+#include <sys/resources.h>\n+#endif\n+#if HAVE_SYS_VMMETER_H\n+#include <sys/vmmeter.h>\n+#endif\n+#ifdef __linux__\n+#include <sys/auxv.h>\n+#endif\n+\n+//! Necessary on some platforms\n+extern char** environ;\n+\n+namespace {\n+\n+void RandAddSeedPerfmon(CSHA512& hasher)\n+{\n+#ifdef WIN32\n+    // Don't need this on Linux, OpenSSL automatically uses /dev/urandom\n+    // Seed with the entire set of perfmon data\n+\n+    // This can take up to 2 seconds, so only do it every 10 minutes\n+    static std::atomic<std::chrono::seconds> last_perfmon{std::chrono::seconds{0}};\n+    auto last_time = last_perfmon.load();\n+    auto current_time = GetTime<std::chrono::seconds>();\n+    if (current_time < last_time + std::chrono::minutes{10}) return;\n+    last_perfmon = current_time;\n+\n+    std::vector<unsigned char> vData(250000, 0);\n+    long ret = 0;\n+    unsigned long nSize = 0;\n+    const size_t nMaxSize = 10000000; // Bail out at more than 10MB of performance data\n+    while (true) {\n+        nSize = vData.size();\n+        ret = RegQueryValueExA(HKEY_PERFORMANCE_DATA, \"Global\", nullptr, nullptr, vData.data(), &nSize);\n+        if (ret != ERROR_MORE_DATA || vData.size() >= nMaxSize)\n+            break;\n+        vData.resize(std::max((vData.size() * 3) / 2, nMaxSize)); // Grow size of buffer exponentially\n+    }\n+    RegCloseKey(HKEY_PERFORMANCE_DATA);\n+    if (ret == ERROR_SUCCESS) {\n+        hasher.Write(vData.data(), nSize);\n+        memory_cleanse(vData.data(), nSize);\n+    } else {\n+        // Performance data is only a best-effort attempt at improving the\n+        // situation when the OS randomness (and other sources) aren't\n+        // adequate. As a result, failure to read it is isn't considered critical,\n+        // so we don't call RandFailure().\n+        // TODO: Add logging when the logger is made functional before global\n+        // constructors have been invoked.\n+    }\n+#endif\n+}\n+\n+/** Helper to easily feed data into a CSHA512.\n+ *\n+ * Note that this does not serialize the passed object (like stream.h's << operators do).\n+ * Its raw memory representation is used directly.",
      "path": "src/randomenv.cpp",
      "position": 112,
      "original_position": 112,
      "commit_id": "d1c02775aa74a0610809ac54bb241ddad61d2d8c",
      "original_commit_id": "f14cd4197677729491bb5fe6110904531605092b",
      "in_reply_to_id": 342856120,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "There are plenty of internal pointers being fed to the RNG here (stack locations, standard library locations, ...).",
      "created_at": "2019-11-06T00:01:03Z",
      "updated_at": "2019-11-12T23:40:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#discussion_r342859263",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342859263"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270"
        }
      },
      "start_line": 111,
      "original_start_line": 111,
      "start_side": "RIGHT",
      "line": 112,
      "original_line": 112,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342861048",
      "pull_request_review_id": 312125022,
      "id": 342861048,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0Mjg2MTA0OA==",
      "diff_hunk": "@@ -0,0 +1,515 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <randomenv.h>\n+\n+#include <clientversion.h>\n+#include <compat/cpuid.h>\n+#include <crypto/sha512.h>\n+#include <support/cleanse.h>\n+#include <util/time.h> // for GetTime()\n+#ifdef WIN32\n+#include <compat.h> // for Windows API\n+#endif\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <chrono>\n+#include <climits>\n+#include <thread>\n+#include <vector>\n+\n+#include <stdint.h>\n+#include <string.h>\n+#ifndef WIN32\n+#include <sys/types.h> // must go before a number of other headers\n+#include <fcntl.h>\n+#include <netinet/in.h>\n+#include <sys/resource.h>\n+#include <sys/socket.h>\n+#include <sys/stat.h>\n+#include <sys/time.h>\n+#include <sys/utsname.h>\n+#include <unistd.h>\n+#endif\n+#ifdef __MACH__\n+#include <mach/clock.h>\n+#include <mach/mach.h>\n+#include <mach/mach_time.h>\n+#endif\n+#if HAVE_DECL_GETIFADDRS\n+#include <ifaddrs.h>\n+#endif\n+#if HAVE_DECL_SYSCTL\n+#include <sys/sysctl.h>\n+#endif\n+#if HAVE_VM_VM_PARAM_H\n+#include <vm/vm_param.h>\n+#endif\n+#if HAVE_SYS_RESOURCES_H\n+#include <sys/resources.h>\n+#endif\n+#if HAVE_SYS_VMMETER_H\n+#include <sys/vmmeter.h>\n+#endif\n+#ifdef __linux__\n+#include <sys/auxv.h>\n+#endif\n+\n+//! Necessary on some platforms\n+extern char** environ;\n+\n+namespace {\n+\n+void RandAddSeedPerfmon(CSHA512& hasher)\n+{\n+#ifdef WIN32\n+    // Don't need this on Linux, OpenSSL automatically uses /dev/urandom\n+    // Seed with the entire set of perfmon data\n+\n+    // This can take up to 2 seconds, so only do it every 10 minutes\n+    static std::atomic<std::chrono::seconds> last_perfmon{std::chrono::seconds{0}};\n+    auto last_time = last_perfmon.load();\n+    auto current_time = GetTime<std::chrono::seconds>();\n+    if (current_time < last_time + std::chrono::minutes{10}) return;\n+    last_perfmon = current_time;\n+\n+    std::vector<unsigned char> vData(250000, 0);\n+    long ret = 0;\n+    unsigned long nSize = 0;\n+    const size_t nMaxSize = 10000000; // Bail out at more than 10MB of performance data\n+    while (true) {\n+        nSize = vData.size();\n+        ret = RegQueryValueExA(HKEY_PERFORMANCE_DATA, \"Global\", nullptr, nullptr, vData.data(), &nSize);\n+        if (ret != ERROR_MORE_DATA || vData.size() >= nMaxSize)\n+            break;\n+        vData.resize(std::max((vData.size() * 3) / 2, nMaxSize)); // Grow size of buffer exponentially\n+    }\n+    RegCloseKey(HKEY_PERFORMANCE_DATA);\n+    if (ret == ERROR_SUCCESS) {\n+        hasher.Write(vData.data(), nSize);\n+        memory_cleanse(vData.data(), nSize);\n+    } else {\n+        // Performance data is only a best-effort attempt at improving the\n+        // situation when the OS randomness (and other sources) aren't\n+        // adequate. As a result, failure to read it is isn't considered critical,\n+        // so we don't call RandFailure().\n+        // TODO: Add logging when the logger is made functional before global\n+        // constructors have been invoked.\n+    }\n+#endif\n+}\n+\n+/** Helper to easily feed data into a CSHA512.\n+ *\n+ * Note that this does not serialize the passed object (like stream.h's << operators do).\n+ * Its raw memory representation is used directly.",
      "path": "src/randomenv.cpp",
      "position": 112,
      "original_position": 112,
      "commit_id": "d1c02775aa74a0610809ac54bb241ddad61d2d8c",
      "original_commit_id": "f14cd4197677729491bb5fe6110904531605092b",
      "in_reply_to_id": 342856120,
      "user": {
        "login": "madars",
        "id": 1747924,
        "node_id": "MDQ6VXNlcjE3NDc5MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1747924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/madars",
        "html_url": "https://github.com/madars",
        "followers_url": "https://api.github.com/users/madars/followers",
        "following_url": "https://api.github.com/users/madars/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/madars/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/madars/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/madars/subscriptions",
        "organizations_url": "https://api.github.com/users/madars/orgs",
        "repos_url": "https://api.github.com/users/madars/repos",
        "events_url": "https://api.github.com/users/madars/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/madars/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "They don't appear to be `char*` pointers (e.g. `environ` is `char**`, result of a temp malloc below is `void*`, etc) but potential for misuse is a judgement call.",
      "created_at": "2019-11-06T00:08:02Z",
      "updated_at": "2019-11-12T23:40:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#discussion_r342861048",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342861048"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270"
        }
      },
      "start_line": 111,
      "original_start_line": 111,
      "start_side": "RIGHT",
      "line": 112,
      "original_line": 112,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342861634",
      "pull_request_review_id": 312125786,
      "id": 342861634,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0Mjg2MTYzNA==",
      "diff_hunk": "@@ -0,0 +1,515 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <randomenv.h>\n+\n+#include <clientversion.h>\n+#include <compat/cpuid.h>\n+#include <crypto/sha512.h>\n+#include <support/cleanse.h>\n+#include <util/time.h> // for GetTime()\n+#ifdef WIN32\n+#include <compat.h> // for Windows API\n+#endif\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <chrono>\n+#include <climits>\n+#include <thread>\n+#include <vector>\n+\n+#include <stdint.h>\n+#include <string.h>\n+#ifndef WIN32\n+#include <sys/types.h> // must go before a number of other headers\n+#include <fcntl.h>\n+#include <netinet/in.h>\n+#include <sys/resource.h>\n+#include <sys/socket.h>\n+#include <sys/stat.h>\n+#include <sys/time.h>\n+#include <sys/utsname.h>\n+#include <unistd.h>\n+#endif\n+#ifdef __MACH__\n+#include <mach/clock.h>\n+#include <mach/mach.h>\n+#include <mach/mach_time.h>\n+#endif\n+#if HAVE_DECL_GETIFADDRS\n+#include <ifaddrs.h>\n+#endif\n+#if HAVE_DECL_SYSCTL\n+#include <sys/sysctl.h>\n+#endif\n+#if HAVE_VM_VM_PARAM_H\n+#include <vm/vm_param.h>\n+#endif\n+#if HAVE_SYS_RESOURCES_H\n+#include <sys/resources.h>\n+#endif\n+#if HAVE_SYS_VMMETER_H\n+#include <sys/vmmeter.h>\n+#endif\n+#ifdef __linux__\n+#include <sys/auxv.h>\n+#endif\n+\n+//! Necessary on some platforms\n+extern char** environ;\n+\n+namespace {\n+\n+void RandAddSeedPerfmon(CSHA512& hasher)\n+{\n+#ifdef WIN32\n+    // Don't need this on Linux, OpenSSL automatically uses /dev/urandom\n+    // Seed with the entire set of perfmon data\n+\n+    // This can take up to 2 seconds, so only do it every 10 minutes\n+    static std::atomic<std::chrono::seconds> last_perfmon{std::chrono::seconds{0}};\n+    auto last_time = last_perfmon.load();\n+    auto current_time = GetTime<std::chrono::seconds>();\n+    if (current_time < last_time + std::chrono::minutes{10}) return;\n+    last_perfmon = current_time;\n+\n+    std::vector<unsigned char> vData(250000, 0);\n+    long ret = 0;\n+    unsigned long nSize = 0;\n+    const size_t nMaxSize = 10000000; // Bail out at more than 10MB of performance data\n+    while (true) {\n+        nSize = vData.size();\n+        ret = RegQueryValueExA(HKEY_PERFORMANCE_DATA, \"Global\", nullptr, nullptr, vData.data(), &nSize);\n+        if (ret != ERROR_MORE_DATA || vData.size() >= nMaxSize)\n+            break;\n+        vData.resize(std::max((vData.size() * 3) / 2, nMaxSize)); // Grow size of buffer exponentially\n+    }\n+    RegCloseKey(HKEY_PERFORMANCE_DATA);\n+    if (ret == ERROR_SUCCESS) {\n+        hasher.Write(vData.data(), nSize);\n+        memory_cleanse(vData.data(), nSize);\n+    } else {\n+        // Performance data is only a best-effort attempt at improving the\n+        // situation when the OS randomness (and other sources) aren't\n+        // adequate. As a result, failure to read it is isn't considered critical,\n+        // so we don't call RandFailure().\n+        // TODO: Add logging when the logger is made functional before global\n+        // constructors have been invoked.\n+    }\n+#endif\n+}\n+\n+/** Helper to easily feed data into a CSHA512.\n+ *\n+ * Note that this does not serialize the passed object (like stream.h's << operators do).\n+ * Its raw memory representation is used directly.",
      "path": "src/randomenv.cpp",
      "position": 112,
      "original_position": 112,
      "commit_id": "d1c02775aa74a0610809ac54bb241ddad61d2d8c",
      "original_commit_id": "f14cd4197677729491bb5fe6110904531605092b",
      "in_reply_to_id": 342856120,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah, good point. Let's see if that compiles.",
      "created_at": "2019-11-06T00:10:24Z",
      "updated_at": "2019-11-12T23:40:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#discussion_r342861634",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342861634"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270"
        }
      },
      "start_line": 111,
      "original_start_line": 111,
      "start_side": "RIGHT",
      "line": 112,
      "original_line": 112,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342863159",
      "pull_request_review_id": 312127697,
      "id": 342863159,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0Mjg2MzE1OQ==",
      "diff_hunk": "@@ -0,0 +1,515 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <randomenv.h>\n+\n+#include <clientversion.h>\n+#include <compat/cpuid.h>\n+#include <crypto/sha512.h>\n+#include <support/cleanse.h>\n+#include <util/time.h> // for GetTime()\n+#ifdef WIN32\n+#include <compat.h> // for Windows API\n+#endif\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <chrono>\n+#include <climits>\n+#include <thread>\n+#include <vector>\n+\n+#include <stdint.h>\n+#include <string.h>\n+#ifndef WIN32\n+#include <sys/types.h> // must go before a number of other headers\n+#include <fcntl.h>\n+#include <netinet/in.h>\n+#include <sys/resource.h>\n+#include <sys/socket.h>\n+#include <sys/stat.h>\n+#include <sys/time.h>\n+#include <sys/utsname.h>\n+#include <unistd.h>\n+#endif\n+#ifdef __MACH__\n+#include <mach/clock.h>\n+#include <mach/mach.h>\n+#include <mach/mach_time.h>\n+#endif\n+#if HAVE_DECL_GETIFADDRS\n+#include <ifaddrs.h>\n+#endif\n+#if HAVE_DECL_SYSCTL\n+#include <sys/sysctl.h>\n+#endif\n+#if HAVE_VM_VM_PARAM_H\n+#include <vm/vm_param.h>\n+#endif\n+#if HAVE_SYS_RESOURCES_H\n+#include <sys/resources.h>\n+#endif\n+#if HAVE_SYS_VMMETER_H\n+#include <sys/vmmeter.h>\n+#endif\n+#ifdef __linux__\n+#include <sys/auxv.h>\n+#endif\n+\n+//! Necessary on some platforms\n+extern char** environ;\n+\n+namespace {\n+\n+void RandAddSeedPerfmon(CSHA512& hasher)\n+{\n+#ifdef WIN32\n+    // Don't need this on Linux, OpenSSL automatically uses /dev/urandom\n+    // Seed with the entire set of perfmon data\n+\n+    // This can take up to 2 seconds, so only do it every 10 minutes\n+    static std::atomic<std::chrono::seconds> last_perfmon{std::chrono::seconds{0}};\n+    auto last_time = last_perfmon.load();\n+    auto current_time = GetTime<std::chrono::seconds>();\n+    if (current_time < last_time + std::chrono::minutes{10}) return;\n+    last_perfmon = current_time;\n+\n+    std::vector<unsigned char> vData(250000, 0);\n+    long ret = 0;\n+    unsigned long nSize = 0;\n+    const size_t nMaxSize = 10000000; // Bail out at more than 10MB of performance data\n+    while (true) {\n+        nSize = vData.size();\n+        ret = RegQueryValueExA(HKEY_PERFORMANCE_DATA, \"Global\", nullptr, nullptr, vData.data(), &nSize);\n+        if (ret != ERROR_MORE_DATA || vData.size() >= nMaxSize)\n+            break;\n+        vData.resize(std::max((vData.size() * 3) / 2, nMaxSize)); // Grow size of buffer exponentially\n+    }\n+    RegCloseKey(HKEY_PERFORMANCE_DATA);\n+    if (ret == ERROR_SUCCESS) {\n+        hasher.Write(vData.data(), nSize);\n+        memory_cleanse(vData.data(), nSize);\n+    } else {\n+        // Performance data is only a best-effort attempt at improving the\n+        // situation when the OS randomness (and other sources) aren't\n+        // adequate. As a result, failure to read it is isn't considered critical,\n+        // so we don't call RandFailure().\n+        // TODO: Add logging when the logger is made functional before global\n+        // constructors have been invoked.\n+    }\n+#endif\n+}\n+\n+/** Helper to easily feed data into a CSHA512.\n+ *\n+ * Note that this does not serialize the passed object (like stream.h's << operators do).\n+ * Its raw memory representation is used directly.",
      "path": "src/randomenv.cpp",
      "position": 112,
      "original_position": 112,
      "commit_id": "d1c02775aa74a0610809ac54bb241ddad61d2d8c",
      "original_commit_id": "f14cd4197677729491bb5fe6110904531605092b",
      "in_reply_to_id": 342856120,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done. I added `std::decay<T>` so that it also catches const char* and char arrays.",
      "created_at": "2019-11-06T00:16:40Z",
      "updated_at": "2019-11-12T23:40:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#discussion_r342863159",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342863159"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270"
        }
      },
      "start_line": 111,
      "original_start_line": 111,
      "start_side": "RIGHT",
      "line": 112,
      "original_line": 112,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/345140294",
      "pull_request_review_id": 315449831,
      "id": 345140294,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NTE0MDI5NA==",
      "diff_hunk": "@@ -46,6 +46,7 @@\n #if HAVE_DECL_GETIFADDRS\n #include <ifaddrs.h>\n #endif\n+#ifndef __linux__",
      "path": "src/randomenv.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "d1c02775aa74a0610809ac54bb241ddad61d2d8c",
      "original_commit_id": "1d1200f6b2174896f55ed4509eb7e412cacd4e7d",
      "in_reply_to_id": null,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks!\r\nThough, I'd slightly prefer to handle this in the build system, so that the symbol `HAVE_DECL_SYSCTL` doesn't get set in the first place in Linux. This avoids having to handle it on a case by case basis on all caller sites.",
      "created_at": "2019-11-12T10:58:28Z",
      "updated_at": "2019-11-12T23:40:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#discussion_r345140294",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/345140294"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 49,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/345339937",
      "pull_request_review_id": 315707820,
      "id": 345339937,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NTMzOTkzNw==",
      "diff_hunk": "@@ -0,0 +1,522 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <randomenv.h>\n+\n+#include <clientversion.h>\n+#include <compat/cpuid.h>\n+#include <crypto/sha512.h>\n+#include <support/cleanse.h>\n+#include <util/time.h> // for GetTime()\n+#ifdef WIN32\n+#include <compat.h> // for Windows API\n+#endif\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <chrono>\n+#include <climits>\n+#include <thread>\n+#include <vector>\n+\n+#include <stdint.h>\n+#include <string.h>\n+#ifndef WIN32\n+#include <sys/types.h> // must go before a number of other headers\n+#include <fcntl.h>\n+#include <netinet/in.h>\n+#include <sys/resource.h>\n+#include <sys/socket.h>\n+#include <sys/stat.h>\n+#include <sys/time.h>\n+#include <sys/utsname.h>\n+#include <unistd.h>\n+#endif\n+#ifdef __MACH__\n+#include <mach/clock.h>\n+#include <mach/mach.h>\n+#include <mach/mach_time.h>\n+#endif\n+#if HAVE_DECL_GETIFADDRS\n+#include <ifaddrs.h>\n+#endif\n+#ifndef __linux__\n+#if HAVE_DECL_SYSCTL\n+#include <sys/sysctl.h>\n+#endif\n+#if HAVE_VM_VM_PARAM_H\n+#include <vm/vm_param.h>\n+#endif\n+#if HAVE_SYS_RESOURCES_H\n+#include <sys/resources.h>\n+#endif\n+#if HAVE_SYS_VMMETER_H\n+#include <sys/vmmeter.h>\n+#endif\n+#else\n+#include <sys/auxv.h>\n+#endif\n+\n+//! Necessary on some platforms\n+extern char** environ;\n+\n+namespace {\n+\n+void RandAddSeedPerfmon(CSHA512& hasher)\n+{\n+#ifdef WIN32\n+    // Don't need this on Linux, OpenSSL automatically uses /dev/urandom\n+    // Seed with the entire set of perfmon data\n+\n+    // This can take up to 2 seconds, so only do it every 10 minutes\n+    static std::atomic<std::chrono::seconds> last_perfmon{std::chrono::seconds{0}};\n+    auto last_time = last_perfmon.load();\n+    auto current_time = GetTime<std::chrono::seconds>();\n+    if (current_time < last_time + std::chrono::minutes{10}) return;\n+    last_perfmon = current_time;\n+\n+    std::vector<unsigned char> vData(250000, 0);\n+    long ret = 0;\n+    unsigned long nSize = 0;\n+    const size_t nMaxSize = 10000000; // Bail out at more than 10MB of performance data\n+    while (true) {\n+        nSize = vData.size();\n+        ret = RegQueryValueExA(HKEY_PERFORMANCE_DATA, \"Global\", nullptr, nullptr, vData.data(), &nSize);\n+        if (ret != ERROR_MORE_DATA || vData.size() >= nMaxSize)\n+            break;\n+        vData.resize(std::max((vData.size() * 3) / 2, nMaxSize)); // Grow size of buffer exponentially\n+    }\n+    RegCloseKey(HKEY_PERFORMANCE_DATA);\n+    if (ret == ERROR_SUCCESS) {\n+        hasher.Write(vData.data(), nSize);\n+        memory_cleanse(vData.data(), nSize);\n+    } else {\n+        // Performance data is only a best-effort attempt at improving the\n+        // situation when the OS randomness (and other sources) aren't\n+        // adequate. As a result, failure to read it is isn't considered critical,\n+        // so we don't call RandFailure().\n+        // TODO: Add logging when the logger is made functional before global\n+        // constructors have been invoked.\n+    }\n+#endif\n+}\n+\n+/** Helper to easily feed data into a CSHA512.\n+ *\n+ * Note that this does not serialize the passed object (like stream.h's << operators do).\n+ * Its raw memory representation is used directly.\n+ */\n+template<typename T>\n+CSHA512& operator<<(CSHA512& hasher, const T& data) {\n+    static_assert(!std::is_same<typename std::decay<T>::type, char*>::value, \"Calling operator<<(CSHA512, char*) is probably not what you want\");\n+    static_assert(!std::is_same<typename std::decay<T>::type, unsigned char*>::value, \"Calling operator<<(CSHA512, unsigned char*) is probably not what you want\");\n+    static_assert(!std::is_same<typename std::decay<T>::type, const char*>::value, \"Calling operator<<(CSHA512, const char*) is probably not what you want\");\n+    static_assert(!std::is_same<typename std::decay<T>::type, const unsigned char*>::value, \"Calling operator<<(CSHA512, const unsigned char*) is probably not what you want\");\n+    hasher.Write((const unsigned char*)&data, sizeof(data));\n+    return hasher;\n+}\n+\n+#ifndef WIN32\n+void AddSockaddr(CSHA512& hasher, const struct sockaddr *addr)\n+{\n+    if (addr == nullptr) return;\n+    switch (addr->sa_family) {\n+    case AF_INET:\n+        hasher.Write((const unsigned char*)addr, sizeof(sockaddr_in));\n+        break;\n+    case AF_INET6:\n+        hasher.Write((const unsigned char*)addr, sizeof(sockaddr_in6));\n+        break;\n+    default:\n+        hasher.Write((const unsigned char*)&addr->sa_family, sizeof(addr->sa_family));\n+    }\n+}\n+\n+void AddStat(CSHA512& hasher, const struct stat& sb)\n+{\n+    hasher << sb.st_dev << sb.st_ino << sb.st_mode << sb.st_nlink << sb.st_uid << sb.st_gid << sb.st_size << sb.st_blksize << sb.st_blocks << sb.st_atime << sb.st_mtime << sb.st_ctime;",
      "path": "src/randomenv.cpp",
      "position": null,
      "original_position": 143,
      "commit_id": "d1c02775aa74a0610809ac54bb241ddad61d2d8c",
      "original_commit_id": "1d1200f6b2174896f55ed4509eb7e412cacd4e7d",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hmm, we here write a struct timeval directly into the hasher, but in other places we avoid it by writing the fields. I presume the avoiding it cases are to avoid writing padding bytes into the hasher (otherwise why both)?",
      "created_at": "2019-11-12T17:23:28Z",
      "updated_at": "2019-11-12T23:40:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#discussion_r345339937",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/345339937"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 142,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/345374202",
      "pull_request_review_id": 315707820,
      "id": 345374202,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NTM3NDIwMg==",
      "diff_hunk": "@@ -585,6 +603,9 @@ static void ProcRand(unsigned char* out, int num, RNGLevel level)\n     case RNGLevel::SLEEP:\n         SeedSleep(hasher, rng);\n         break;\n+    case RNGLevel::PERIODIC:",
      "path": "src/random.cpp",
      "position": 195,
      "original_position": 94,
      "commit_id": "d1c02775aa74a0610809ac54bb241ddad61d2d8c",
      "original_commit_id": "2f4aaf13270b96541f711b79735a6f71b51fe67f",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't get the point of this commit.\r\nYou're avoiding doing something that sleeps 1ms but runs in a tight loop for 10ms.\r\nThe real meat of the function gets called on a timer every minute, but also my be called at other times, but only runs if its been 10 minutes since the last run.\r\n\r\nMaybe we should just skip the SeedInfrequent call in SeedSleep and then we can drop all the once-per-minute checking in this file wholesale and use the scheduler?",
      "created_at": "2019-11-12T18:34:34Z",
      "updated_at": "2019-11-12T23:40:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#discussion_r345374202",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/345374202"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 577,
      "original_line": 577,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/345488583",
      "pull_request_review_id": 315899614,
      "id": 345488583,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NTQ4ODU4Mw==",
      "diff_hunk": "@@ -46,6 +46,7 @@\n #if HAVE_DECL_GETIFADDRS\n #include <ifaddrs.h>\n #endif\n+#ifndef __linux__",
      "path": "src/randomenv.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "d1c02775aa74a0610809ac54bb241ddad61d2d8c",
      "original_commit_id": "1d1200f6b2174896f55ed4509eb7e412cacd4e7d",
      "in_reply_to_id": 345140294,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good point, fixed.",
      "created_at": "2019-11-12T22:51:42Z",
      "updated_at": "2019-11-12T23:40:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#discussion_r345488583",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/345488583"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 49,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/345490375",
      "pull_request_review_id": 315901730,
      "id": 345490375,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NTQ5MDM3NQ==",
      "diff_hunk": "@@ -0,0 +1,522 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <randomenv.h>\n+\n+#include <clientversion.h>\n+#include <compat/cpuid.h>\n+#include <crypto/sha512.h>\n+#include <support/cleanse.h>\n+#include <util/time.h> // for GetTime()\n+#ifdef WIN32\n+#include <compat.h> // for Windows API\n+#endif\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <chrono>\n+#include <climits>\n+#include <thread>\n+#include <vector>\n+\n+#include <stdint.h>\n+#include <string.h>\n+#ifndef WIN32\n+#include <sys/types.h> // must go before a number of other headers\n+#include <fcntl.h>\n+#include <netinet/in.h>\n+#include <sys/resource.h>\n+#include <sys/socket.h>\n+#include <sys/stat.h>\n+#include <sys/time.h>\n+#include <sys/utsname.h>\n+#include <unistd.h>\n+#endif\n+#ifdef __MACH__\n+#include <mach/clock.h>\n+#include <mach/mach.h>\n+#include <mach/mach_time.h>\n+#endif\n+#if HAVE_DECL_GETIFADDRS\n+#include <ifaddrs.h>\n+#endif\n+#ifndef __linux__\n+#if HAVE_DECL_SYSCTL\n+#include <sys/sysctl.h>\n+#endif\n+#if HAVE_VM_VM_PARAM_H\n+#include <vm/vm_param.h>\n+#endif\n+#if HAVE_SYS_RESOURCES_H\n+#include <sys/resources.h>\n+#endif\n+#if HAVE_SYS_VMMETER_H\n+#include <sys/vmmeter.h>\n+#endif\n+#else\n+#include <sys/auxv.h>\n+#endif\n+\n+//! Necessary on some platforms\n+extern char** environ;\n+\n+namespace {\n+\n+void RandAddSeedPerfmon(CSHA512& hasher)\n+{\n+#ifdef WIN32\n+    // Don't need this on Linux, OpenSSL automatically uses /dev/urandom\n+    // Seed with the entire set of perfmon data\n+\n+    // This can take up to 2 seconds, so only do it every 10 minutes\n+    static std::atomic<std::chrono::seconds> last_perfmon{std::chrono::seconds{0}};\n+    auto last_time = last_perfmon.load();\n+    auto current_time = GetTime<std::chrono::seconds>();\n+    if (current_time < last_time + std::chrono::minutes{10}) return;\n+    last_perfmon = current_time;\n+\n+    std::vector<unsigned char> vData(250000, 0);\n+    long ret = 0;\n+    unsigned long nSize = 0;\n+    const size_t nMaxSize = 10000000; // Bail out at more than 10MB of performance data\n+    while (true) {\n+        nSize = vData.size();\n+        ret = RegQueryValueExA(HKEY_PERFORMANCE_DATA, \"Global\", nullptr, nullptr, vData.data(), &nSize);\n+        if (ret != ERROR_MORE_DATA || vData.size() >= nMaxSize)\n+            break;\n+        vData.resize(std::max((vData.size() * 3) / 2, nMaxSize)); // Grow size of buffer exponentially\n+    }\n+    RegCloseKey(HKEY_PERFORMANCE_DATA);\n+    if (ret == ERROR_SUCCESS) {\n+        hasher.Write(vData.data(), nSize);\n+        memory_cleanse(vData.data(), nSize);\n+    } else {\n+        // Performance data is only a best-effort attempt at improving the\n+        // situation when the OS randomness (and other sources) aren't\n+        // adequate. As a result, failure to read it is isn't considered critical,\n+        // so we don't call RandFailure().\n+        // TODO: Add logging when the logger is made functional before global\n+        // constructors have been invoked.\n+    }\n+#endif\n+}\n+\n+/** Helper to easily feed data into a CSHA512.\n+ *\n+ * Note that this does not serialize the passed object (like stream.h's << operators do).\n+ * Its raw memory representation is used directly.\n+ */\n+template<typename T>\n+CSHA512& operator<<(CSHA512& hasher, const T& data) {\n+    static_assert(!std::is_same<typename std::decay<T>::type, char*>::value, \"Calling operator<<(CSHA512, char*) is probably not what you want\");\n+    static_assert(!std::is_same<typename std::decay<T>::type, unsigned char*>::value, \"Calling operator<<(CSHA512, unsigned char*) is probably not what you want\");\n+    static_assert(!std::is_same<typename std::decay<T>::type, const char*>::value, \"Calling operator<<(CSHA512, const char*) is probably not what you want\");\n+    static_assert(!std::is_same<typename std::decay<T>::type, const unsigned char*>::value, \"Calling operator<<(CSHA512, const unsigned char*) is probably not what you want\");\n+    hasher.Write((const unsigned char*)&data, sizeof(data));\n+    return hasher;\n+}\n+\n+#ifndef WIN32\n+void AddSockaddr(CSHA512& hasher, const struct sockaddr *addr)\n+{\n+    if (addr == nullptr) return;\n+    switch (addr->sa_family) {\n+    case AF_INET:\n+        hasher.Write((const unsigned char*)addr, sizeof(sockaddr_in));\n+        break;\n+    case AF_INET6:\n+        hasher.Write((const unsigned char*)addr, sizeof(sockaddr_in6));\n+        break;\n+    default:\n+        hasher.Write((const unsigned char*)&addr->sa_family, sizeof(addr->sa_family));\n+    }\n+}\n+\n+void AddStat(CSHA512& hasher, const struct stat& sb)\n+{\n+    hasher << sb.st_dev << sb.st_ino << sb.st_mode << sb.st_nlink << sb.st_uid << sb.st_gid << sb.st_size << sb.st_blksize << sb.st_blocks << sb.st_atime << sb.st_mtime << sb.st_ctime;",
      "path": "src/randomenv.cpp",
      "position": null,
      "original_position": 143,
      "commit_id": "d1c02775aa74a0610809ac54bb241ddad61d2d8c",
      "original_commit_id": "1d1200f6b2174896f55ed4509eb7e412cacd4e7d",
      "in_reply_to_id": 345339937,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "One reason to writing the fields directly is because these structures may have implementation-defined other fields, which are perhaps left uninitialized. Feeding them into the hasher would then trip up valgrind & co. Perhaps this is not a real concern and we should just feed the struct in until someone notices a problem?",
      "created_at": "2019-11-12T22:56:30Z",
      "updated_at": "2019-11-12T23:40:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#discussion_r345490375",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/345490375"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 142,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/345490911",
      "pull_request_review_id": 315902440,
      "id": 345490911,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NTQ5MDkxMQ==",
      "diff_hunk": "@@ -585,6 +603,9 @@ static void ProcRand(unsigned char* out, int num, RNGLevel level)\n     case RNGLevel::SLEEP:\n         SeedSleep(hasher, rng);\n         break;\n+    case RNGLevel::PERIODIC:",
      "path": "src/random.cpp",
      "position": 195,
      "original_position": 94,
      "commit_id": "d1c02775aa74a0610809ac54bb241ddad61d2d8c",
      "original_commit_id": "2f4aaf13270b96541f711b79735a6f71b51fe67f",
      "in_reply_to_id": 345374202,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think you're right, there is fairly little advantage to having both RandAddSeedSleep and RandAddPeriodic. I've redone this PR to instead just have a RandAddPeriodic, which indeed simplifies a bunch of things including not keeping track of when the last run of the expensive stuff was (there is a still a counter in the perfmon data for windows, which only runs once every 10 minutes instead of every minute).",
      "created_at": "2019-11-12T22:58:06Z",
      "updated_at": "2019-11-12T23:40:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#discussion_r345490911",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/345490911"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 577,
      "original_line": 577,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/345505151",
      "pull_request_review_id": 315919708,
      "id": 345505151,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NTUwNTE1MQ==",
      "diff_hunk": "@@ -0,0 +1,522 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <randomenv.h>\n+\n+#include <clientversion.h>\n+#include <compat/cpuid.h>\n+#include <crypto/sha512.h>\n+#include <support/cleanse.h>\n+#include <util/time.h> // for GetTime()\n+#ifdef WIN32\n+#include <compat.h> // for Windows API\n+#endif\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <chrono>\n+#include <climits>\n+#include <thread>\n+#include <vector>\n+\n+#include <stdint.h>\n+#include <string.h>\n+#ifndef WIN32\n+#include <sys/types.h> // must go before a number of other headers\n+#include <fcntl.h>\n+#include <netinet/in.h>\n+#include <sys/resource.h>\n+#include <sys/socket.h>\n+#include <sys/stat.h>\n+#include <sys/time.h>\n+#include <sys/utsname.h>\n+#include <unistd.h>\n+#endif\n+#ifdef __MACH__\n+#include <mach/clock.h>\n+#include <mach/mach.h>\n+#include <mach/mach_time.h>\n+#endif\n+#if HAVE_DECL_GETIFADDRS\n+#include <ifaddrs.h>\n+#endif\n+#ifndef __linux__\n+#if HAVE_DECL_SYSCTL\n+#include <sys/sysctl.h>\n+#endif\n+#if HAVE_VM_VM_PARAM_H\n+#include <vm/vm_param.h>\n+#endif\n+#if HAVE_SYS_RESOURCES_H\n+#include <sys/resources.h>\n+#endif\n+#if HAVE_SYS_VMMETER_H\n+#include <sys/vmmeter.h>\n+#endif\n+#else\n+#include <sys/auxv.h>\n+#endif\n+\n+//! Necessary on some platforms\n+extern char** environ;\n+\n+namespace {\n+\n+void RandAddSeedPerfmon(CSHA512& hasher)\n+{\n+#ifdef WIN32\n+    // Don't need this on Linux, OpenSSL automatically uses /dev/urandom\n+    // Seed with the entire set of perfmon data\n+\n+    // This can take up to 2 seconds, so only do it every 10 minutes\n+    static std::atomic<std::chrono::seconds> last_perfmon{std::chrono::seconds{0}};\n+    auto last_time = last_perfmon.load();\n+    auto current_time = GetTime<std::chrono::seconds>();\n+    if (current_time < last_time + std::chrono::minutes{10}) return;\n+    last_perfmon = current_time;\n+\n+    std::vector<unsigned char> vData(250000, 0);\n+    long ret = 0;\n+    unsigned long nSize = 0;\n+    const size_t nMaxSize = 10000000; // Bail out at more than 10MB of performance data\n+    while (true) {\n+        nSize = vData.size();\n+        ret = RegQueryValueExA(HKEY_PERFORMANCE_DATA, \"Global\", nullptr, nullptr, vData.data(), &nSize);\n+        if (ret != ERROR_MORE_DATA || vData.size() >= nMaxSize)\n+            break;\n+        vData.resize(std::max((vData.size() * 3) / 2, nMaxSize)); // Grow size of buffer exponentially\n+    }\n+    RegCloseKey(HKEY_PERFORMANCE_DATA);\n+    if (ret == ERROR_SUCCESS) {\n+        hasher.Write(vData.data(), nSize);\n+        memory_cleanse(vData.data(), nSize);\n+    } else {\n+        // Performance data is only a best-effort attempt at improving the\n+        // situation when the OS randomness (and other sources) aren't\n+        // adequate. As a result, failure to read it is isn't considered critical,\n+        // so we don't call RandFailure().\n+        // TODO: Add logging when the logger is made functional before global\n+        // constructors have been invoked.\n+    }\n+#endif\n+}\n+\n+/** Helper to easily feed data into a CSHA512.\n+ *\n+ * Note that this does not serialize the passed object (like stream.h's << operators do).\n+ * Its raw memory representation is used directly.\n+ */\n+template<typename T>\n+CSHA512& operator<<(CSHA512& hasher, const T& data) {\n+    static_assert(!std::is_same<typename std::decay<T>::type, char*>::value, \"Calling operator<<(CSHA512, char*) is probably not what you want\");\n+    static_assert(!std::is_same<typename std::decay<T>::type, unsigned char*>::value, \"Calling operator<<(CSHA512, unsigned char*) is probably not what you want\");\n+    static_assert(!std::is_same<typename std::decay<T>::type, const char*>::value, \"Calling operator<<(CSHA512, const char*) is probably not what you want\");\n+    static_assert(!std::is_same<typename std::decay<T>::type, const unsigned char*>::value, \"Calling operator<<(CSHA512, const unsigned char*) is probably not what you want\");\n+    hasher.Write((const unsigned char*)&data, sizeof(data));\n+    return hasher;\n+}\n+\n+#ifndef WIN32\n+void AddSockaddr(CSHA512& hasher, const struct sockaddr *addr)\n+{\n+    if (addr == nullptr) return;\n+    switch (addr->sa_family) {\n+    case AF_INET:\n+        hasher.Write((const unsigned char*)addr, sizeof(sockaddr_in));\n+        break;\n+    case AF_INET6:\n+        hasher.Write((const unsigned char*)addr, sizeof(sockaddr_in6));\n+        break;\n+    default:\n+        hasher.Write((const unsigned char*)&addr->sa_family, sizeof(addr->sa_family));\n+    }\n+}\n+\n+void AddStat(CSHA512& hasher, const struct stat& sb)\n+{\n+    hasher << sb.st_dev << sb.st_ino << sb.st_mode << sb.st_nlink << sb.st_uid << sb.st_gid << sb.st_size << sb.st_blksize << sb.st_blocks << sb.st_atime << sb.st_mtime << sb.st_ctime;",
      "path": "src/randomenv.cpp",
      "position": null,
      "original_position": 143,
      "commit_id": "d1c02775aa74a0610809ac54bb241ddad61d2d8c",
      "original_commit_id": "1d1200f6b2174896f55ed4509eb7e412cacd4e7d",
      "in_reply_to_id": 345339937,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ok, fixed: I'm zero initializing all the structs, and then just feeding them directly into the hasher.",
      "created_at": "2019-11-12T23:43:50Z",
      "updated_at": "2019-11-12T23:43:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#discussion_r345505151",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/345505151"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 142,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/345533727",
      "pull_request_review_id": 315955443,
      "id": 345533727,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NTUzMzcyNw==",
      "diff_hunk": "@@ -0,0 +1,522 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <randomenv.h>\n+\n+#include <clientversion.h>\n+#include <compat/cpuid.h>\n+#include <crypto/sha512.h>\n+#include <support/cleanse.h>\n+#include <util/time.h> // for GetTime()\n+#ifdef WIN32\n+#include <compat.h> // for Windows API\n+#endif\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <chrono>\n+#include <climits>\n+#include <thread>\n+#include <vector>\n+\n+#include <stdint.h>\n+#include <string.h>\n+#ifndef WIN32\n+#include <sys/types.h> // must go before a number of other headers\n+#include <fcntl.h>\n+#include <netinet/in.h>\n+#include <sys/resource.h>\n+#include <sys/socket.h>\n+#include <sys/stat.h>\n+#include <sys/time.h>\n+#include <sys/utsname.h>\n+#include <unistd.h>\n+#endif\n+#ifdef __MACH__\n+#include <mach/clock.h>\n+#include <mach/mach.h>\n+#include <mach/mach_time.h>\n+#endif\n+#if HAVE_DECL_GETIFADDRS\n+#include <ifaddrs.h>\n+#endif\n+#ifndef __linux__\n+#if HAVE_DECL_SYSCTL\n+#include <sys/sysctl.h>\n+#endif\n+#if HAVE_VM_VM_PARAM_H\n+#include <vm/vm_param.h>\n+#endif\n+#if HAVE_SYS_RESOURCES_H\n+#include <sys/resources.h>\n+#endif\n+#if HAVE_SYS_VMMETER_H\n+#include <sys/vmmeter.h>\n+#endif\n+#else\n+#include <sys/auxv.h>\n+#endif\n+\n+//! Necessary on some platforms\n+extern char** environ;\n+\n+namespace {\n+\n+void RandAddSeedPerfmon(CSHA512& hasher)\n+{\n+#ifdef WIN32\n+    // Don't need this on Linux, OpenSSL automatically uses /dev/urandom\n+    // Seed with the entire set of perfmon data\n+\n+    // This can take up to 2 seconds, so only do it every 10 minutes\n+    static std::atomic<std::chrono::seconds> last_perfmon{std::chrono::seconds{0}};\n+    auto last_time = last_perfmon.load();\n+    auto current_time = GetTime<std::chrono::seconds>();\n+    if (current_time < last_time + std::chrono::minutes{10}) return;\n+    last_perfmon = current_time;\n+\n+    std::vector<unsigned char> vData(250000, 0);\n+    long ret = 0;\n+    unsigned long nSize = 0;\n+    const size_t nMaxSize = 10000000; // Bail out at more than 10MB of performance data\n+    while (true) {\n+        nSize = vData.size();\n+        ret = RegQueryValueExA(HKEY_PERFORMANCE_DATA, \"Global\", nullptr, nullptr, vData.data(), &nSize);\n+        if (ret != ERROR_MORE_DATA || vData.size() >= nMaxSize)\n+            break;\n+        vData.resize(std::max((vData.size() * 3) / 2, nMaxSize)); // Grow size of buffer exponentially\n+    }\n+    RegCloseKey(HKEY_PERFORMANCE_DATA);\n+    if (ret == ERROR_SUCCESS) {\n+        hasher.Write(vData.data(), nSize);\n+        memory_cleanse(vData.data(), nSize);\n+    } else {\n+        // Performance data is only a best-effort attempt at improving the\n+        // situation when the OS randomness (and other sources) aren't\n+        // adequate. As a result, failure to read it is isn't considered critical,\n+        // so we don't call RandFailure().\n+        // TODO: Add logging when the logger is made functional before global\n+        // constructors have been invoked.\n+    }\n+#endif\n+}\n+\n+/** Helper to easily feed data into a CSHA512.\n+ *\n+ * Note that this does not serialize the passed object (like stream.h's << operators do).\n+ * Its raw memory representation is used directly.\n+ */\n+template<typename T>\n+CSHA512& operator<<(CSHA512& hasher, const T& data) {\n+    static_assert(!std::is_same<typename std::decay<T>::type, char*>::value, \"Calling operator<<(CSHA512, char*) is probably not what you want\");\n+    static_assert(!std::is_same<typename std::decay<T>::type, unsigned char*>::value, \"Calling operator<<(CSHA512, unsigned char*) is probably not what you want\");\n+    static_assert(!std::is_same<typename std::decay<T>::type, const char*>::value, \"Calling operator<<(CSHA512, const char*) is probably not what you want\");\n+    static_assert(!std::is_same<typename std::decay<T>::type, const unsigned char*>::value, \"Calling operator<<(CSHA512, const unsigned char*) is probably not what you want\");\n+    hasher.Write((const unsigned char*)&data, sizeof(data));\n+    return hasher;\n+}\n+\n+#ifndef WIN32\n+void AddSockaddr(CSHA512& hasher, const struct sockaddr *addr)\n+{\n+    if (addr == nullptr) return;\n+    switch (addr->sa_family) {\n+    case AF_INET:\n+        hasher.Write((const unsigned char*)addr, sizeof(sockaddr_in));\n+        break;\n+    case AF_INET6:\n+        hasher.Write((const unsigned char*)addr, sizeof(sockaddr_in6));\n+        break;\n+    default:\n+        hasher.Write((const unsigned char*)&addr->sa_family, sizeof(addr->sa_family));\n+    }\n+}\n+\n+void AddStat(CSHA512& hasher, const struct stat& sb)\n+{\n+    hasher << sb.st_dev << sb.st_ino << sb.st_mode << sb.st_nlink << sb.st_uid << sb.st_gid << sb.st_size << sb.st_blksize << sb.st_blocks << sb.st_atime << sb.st_mtime << sb.st_ctime;",
      "path": "src/randomenv.cpp",
      "position": null,
      "original_position": 143,
      "commit_id": "d1c02775aa74a0610809ac54bb241ddad61d2d8c",
      "original_commit_id": "1d1200f6b2174896f55ed4509eb7e412cacd4e7d",
      "in_reply_to_id": 345339937,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I can't say I feel strongly. I see reasons to do it both ways, and as long as valgrind doesn't complain and we hash in the higher-entropy bits, it doesn't matter either way. Just figured I'd flag it since you appeared to be very careful about it in all places but here.",
      "created_at": "2019-11-13T01:42:29Z",
      "updated_at": "2019-11-13T01:42:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#discussion_r345533727",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/345533727"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 142,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/346088506",
      "pull_request_review_id": 316664778,
      "id": 346088506,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NjA4ODUwNg==",
      "diff_hunk": "@@ -0,0 +1,508 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <randomenv.h>\n+\n+#include <clientversion.h>\n+#include <compat/cpuid.h>\n+#include <crypto/sha512.h>\n+#include <support/cleanse.h>\n+#include <util/time.h> // for GetTime()\n+#ifdef WIN32\n+#include <compat.h> // for Windows API\n+#endif\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <chrono>\n+#include <climits>\n+#include <thread>\n+#include <vector>\n+\n+#include <stdint.h>\n+#include <string.h>\n+#ifndef WIN32\n+#include <sys/types.h> // must go before a number of other headers\n+#include <fcntl.h>\n+#include <netinet/in.h>\n+#include <sys/resource.h>\n+#include <sys/socket.h>\n+#include <sys/stat.h>\n+#include <sys/time.h>\n+#include <sys/utsname.h>\n+#include <unistd.h>\n+#endif\n+#ifdef __MACH__\n+#include <mach/clock.h>\n+#include <mach/mach.h>\n+#include <mach/mach_time.h>\n+#endif\n+#if HAVE_DECL_GETIFADDRS\n+#include <ifaddrs.h>\n+#endif\n+#if HAVE_SYSCTL\n+#include <sys/sysctl.h>\n+#if HAVE_VM_VM_PARAM_H\n+#include <vm/vm_param.h>\n+#endif\n+#if HAVE_SYS_RESOURCES_H\n+#include <sys/resources.h>\n+#endif\n+#if HAVE_SYS_VMMETER_H\n+#include <sys/vmmeter.h>\n+#endif\n+#endif\n+#ifdef __linux__\n+#include <sys/auxv.h>\n+#endif\n+\n+//! Necessary on some platforms\n+extern char** environ;\n+\n+namespace {\n+\n+void RandAddSeedPerfmon(CSHA512& hasher)\n+{\n+#ifdef WIN32\n+    // Don't need this on Linux, OpenSSL automatically uses /dev/urandom\n+    // Seed with the entire set of perfmon data\n+\n+    // This can take up to 2 seconds, so only do it every 10 minutes\n+    static std::atomic<std::chrono::seconds> last_perfmon{std::chrono::seconds{0}};\n+    auto last_time = last_perfmon.load();\n+    auto current_time = GetTime<std::chrono::seconds>();\n+    if (current_time < last_time + std::chrono::minutes{10}) return;\n+    last_perfmon = current_time;\n+\n+    std::vector<unsigned char> vData(250000, 0);\n+    long ret = 0;\n+    unsigned long nSize = 0;\n+    const size_t nMaxSize = 10000000; // Bail out at more than 10MB of performance data\n+    while (true) {\n+        nSize = vData.size();\n+        ret = RegQueryValueExA(HKEY_PERFORMANCE_DATA, \"Global\", nullptr, nullptr, vData.data(), &nSize);\n+        if (ret != ERROR_MORE_DATA || vData.size() >= nMaxSize)\n+            break;\n+        vData.resize(std::max((vData.size() * 3) / 2, nMaxSize)); // Grow size of buffer exponentially\n+    }\n+    RegCloseKey(HKEY_PERFORMANCE_DATA);\n+    if (ret == ERROR_SUCCESS) {\n+        hasher.Write(vData.data(), nSize);\n+        memory_cleanse(vData.data(), nSize);\n+    } else {\n+        // Performance data is only a best-effort attempt at improving the\n+        // situation when the OS randomness (and other sources) aren't\n+        // adequate. As a result, failure to read it is isn't considered critical,\n+        // so we don't call RandFailure().\n+        // TODO: Add logging when the logger is made functional before global\n+        // constructors have been invoked.\n+    }\n+#endif\n+}\n+\n+/** Helper to easily feed data into a CSHA512.\n+ *\n+ * Note that this does not serialize the passed object (like stream.h's << operators do).\n+ * Its raw memory representation is used directly.\n+ */\n+template<typename T>\n+CSHA512& operator<<(CSHA512& hasher, const T& data) {\n+    static_assert(!std::is_same<typename std::decay<T>::type, char*>::value, \"Calling operator<<(CSHA512, char*) is probably not what you want\");\n+    static_assert(!std::is_same<typename std::decay<T>::type, unsigned char*>::value, \"Calling operator<<(CSHA512, unsigned char*) is probably not what you want\");\n+    static_assert(!std::is_same<typename std::decay<T>::type, const char*>::value, \"Calling operator<<(CSHA512, const char*) is probably not what you want\");\n+    static_assert(!std::is_same<typename std::decay<T>::type, const unsigned char*>::value, \"Calling operator<<(CSHA512, const unsigned char*) is probably not what you want\");\n+    hasher.Write((const unsigned char*)&data, sizeof(data));\n+    return hasher;\n+}\n+\n+#ifndef WIN32\n+void AddSockaddr(CSHA512& hasher, const struct sockaddr *addr)\n+{\n+    if (addr == nullptr) return;\n+    switch (addr->sa_family) {\n+    case AF_INET:\n+        hasher.Write((const unsigned char*)addr, sizeof(sockaddr_in));\n+        break;\n+    case AF_INET6:\n+        hasher.Write((const unsigned char*)addr, sizeof(sockaddr_in6));\n+        break;\n+    default:\n+        hasher.Write((const unsigned char*)&addr->sa_family, sizeof(addr->sa_family));\n+    }\n+}\n+\n+void AddFile(CSHA512& hasher, const char *path)\n+{\n+    struct stat sb = {};\n+    int f = open(path, O_RDONLY);\n+    size_t total = 0;\n+    if (f != -1) {\n+        unsigned char fbuf[4096];\n+        int n;\n+        hasher.Write((const unsigned char*)&f, sizeof(f));\n+        if (fstat(f, &sb) == 0) hasher << sb;\n+        do {\n+            n = read(f, fbuf, sizeof(fbuf));\n+            if (n > 0) hasher.Write(fbuf, n);\n+            total += n;\n+            /* not bothering with EINTR handling. */\n+        } while (n == sizeof(fbuf) && total < 1048576); // Read only the first 1 Mbyte\n+        close(f);\n+    }\n+}\n+\n+void AddPath(CSHA512& hasher, const char *path)\n+{\n+    struct stat sb = {};\n+    if (stat(path, &sb) == 0) {\n+        hasher.Write((const unsigned char*)path, strlen(path) + 1);\n+        hasher << sb;\n+    }\n+}\n+#endif\n+\n+#if HAVE_SYSCTL\n+template<int... S>\n+void AddSysctl(CSHA512& hasher)\n+{\n+    int CTL[sizeof...(S)] = {S...};\n+    unsigned char buffer[65536];\n+    size_t siz = 65536;\n+    int ret = sysctl(CTL, sizeof...(S), buffer, &siz, nullptr, 0);\n+    if (ret == 0 || (ret == -1 && errno == ENOMEM)) {\n+        hasher << sizeof(CTL);\n+        hasher.Write((const unsigned char*)CTL, sizeof(CTL));\n+        if (siz > sizeof(buffer)) siz = sizeof(buffer);\n+        hasher << siz;\n+        hasher.Write(buffer, siz);\n+    }\n+}\n+#endif\n+\n+#ifdef HAVE_GETCPUID\n+void inline AddCPUID(CSHA512& hasher, uint32_t leaf, uint32_t subleaf, uint32_t& ax, uint32_t& bx, uint32_t& cx, uint32_t& dx)\n+{\n+    GetCPUID(leaf, subleaf, ax, bx, cx, dx);\n+    hasher << leaf << subleaf << ax << bx << cx << dx;\n+}\n+\n+void AddAllCPUID(CSHA512& hasher)\n+{\n+    uint32_t ax, bx, cx, dx;\n+    // Iterate over all standard leaves\n+    AddCPUID(hasher, 0, 0, ax, bx, cx, dx); // Returns max leaf in ax\n+    uint32_t max = ax;\n+    for (uint32_t leaf = 1; leaf <= max; ++leaf) {\n+        for (uint32_t subleaf = 0;; ++subleaf) {\n+            AddCPUID(hasher, leaf, subleaf, ax, bx, cx, dx);\n+            // Iterate over subleaves for leaf 4, 11, 13\n+            if (leaf != 4 && leaf != 11 && leaf != 13) break;\n+            if ((leaf == 4 || leaf == 13) && ax == 0) break;\n+            if (leaf == 11 && (cx & 0xFF00) == 0) break;\n+        }\n+    }\n+    // Iterate over all extended leaves\n+    AddCPUID(hasher, 0x80000000, 0, ax, bx, cx, dx); // Returns max extended leaf in ax\n+    uint32_t ext_max = ax;\n+    for (uint32_t leaf = 0x80000001; leaf <= ext_max; ++leaf) {\n+        AddCPUID(hasher, leaf, 0, ax, bx, cx, dx);\n+    }\n+}\n+#endif\n+} // namespace\n+\n+void RandAddDynamicEnv(CSHA512& hasher)\n+{\n+    RandAddSeedPerfmon(hasher);\n+\n+    // Various clocks\n+#ifdef WIN32\n+    FILETIME ftime;\n+    GetSystemTimeAsFileTime(&ftime);\n+    hasher << ftime;\n+#else\n+#  ifndef __MACH__",
      "path": "src/randomenv.cpp",
      "position": 230,
      "original_position": 230,
      "commit_id": "d1c02775aa74a0610809ac54bb241ddad61d2d8c",
      "original_commit_id": "d1c02775aa74a0610809ac54bb241ddad61d2d8c",
      "in_reply_to_id": null,
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Using `__MACH__` here and above is unusual for a our codebase, we use `MAC_OSX` throughout. Also `__MACH__` by itself isn't necessarily macOS, looks like if you were to use it you'd want to couple it with `__APPLE__`.",
      "created_at": "2019-11-14T01:30:12Z",
      "updated_at": "2019-11-14T01:58:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#discussion_r346088506",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/346088506"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 230,
      "original_line": 230,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/346090606",
      "pull_request_review_id": 316664778,
      "id": 346090606,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NjA5MDYwNg==",
      "diff_hunk": "@@ -0,0 +1,508 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <randomenv.h>\n+\n+#include <clientversion.h>\n+#include <compat/cpuid.h>\n+#include <crypto/sha512.h>\n+#include <support/cleanse.h>\n+#include <util/time.h> // for GetTime()\n+#ifdef WIN32\n+#include <compat.h> // for Windows API\n+#endif\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <chrono>\n+#include <climits>\n+#include <thread>\n+#include <vector>\n+\n+#include <stdint.h>\n+#include <string.h>\n+#ifndef WIN32\n+#include <sys/types.h> // must go before a number of other headers\n+#include <fcntl.h>\n+#include <netinet/in.h>\n+#include <sys/resource.h>\n+#include <sys/socket.h>\n+#include <sys/stat.h>\n+#include <sys/time.h>\n+#include <sys/utsname.h>\n+#include <unistd.h>\n+#endif\n+#ifdef __MACH__\n+#include <mach/clock.h>\n+#include <mach/mach.h>\n+#include <mach/mach_time.h>\n+#endif\n+#if HAVE_DECL_GETIFADDRS\n+#include <ifaddrs.h>\n+#endif\n+#if HAVE_SYSCTL\n+#include <sys/sysctl.h>\n+#if HAVE_VM_VM_PARAM_H\n+#include <vm/vm_param.h>\n+#endif\n+#if HAVE_SYS_RESOURCES_H\n+#include <sys/resources.h>\n+#endif\n+#if HAVE_SYS_VMMETER_H\n+#include <sys/vmmeter.h>\n+#endif\n+#endif\n+#ifdef __linux__\n+#include <sys/auxv.h>\n+#endif\n+\n+//! Necessary on some platforms\n+extern char** environ;\n+\n+namespace {\n+\n+void RandAddSeedPerfmon(CSHA512& hasher)\n+{\n+#ifdef WIN32\n+    // Don't need this on Linux, OpenSSL automatically uses /dev/urandom\n+    // Seed with the entire set of perfmon data\n+\n+    // This can take up to 2 seconds, so only do it every 10 minutes\n+    static std::atomic<std::chrono::seconds> last_perfmon{std::chrono::seconds{0}};\n+    auto last_time = last_perfmon.load();\n+    auto current_time = GetTime<std::chrono::seconds>();\n+    if (current_time < last_time + std::chrono::minutes{10}) return;\n+    last_perfmon = current_time;\n+\n+    std::vector<unsigned char> vData(250000, 0);\n+    long ret = 0;\n+    unsigned long nSize = 0;\n+    const size_t nMaxSize = 10000000; // Bail out at more than 10MB of performance data\n+    while (true) {\n+        nSize = vData.size();\n+        ret = RegQueryValueExA(HKEY_PERFORMANCE_DATA, \"Global\", nullptr, nullptr, vData.data(), &nSize);\n+        if (ret != ERROR_MORE_DATA || vData.size() >= nMaxSize)\n+            break;\n+        vData.resize(std::max((vData.size() * 3) / 2, nMaxSize)); // Grow size of buffer exponentially\n+    }\n+    RegCloseKey(HKEY_PERFORMANCE_DATA);\n+    if (ret == ERROR_SUCCESS) {\n+        hasher.Write(vData.data(), nSize);\n+        memory_cleanse(vData.data(), nSize);\n+    } else {\n+        // Performance data is only a best-effort attempt at improving the\n+        // situation when the OS randomness (and other sources) aren't\n+        // adequate. As a result, failure to read it is isn't considered critical,\n+        // so we don't call RandFailure().\n+        // TODO: Add logging when the logger is made functional before global\n+        // constructors have been invoked.\n+    }\n+#endif\n+}\n+\n+/** Helper to easily feed data into a CSHA512.\n+ *\n+ * Note that this does not serialize the passed object (like stream.h's << operators do).\n+ * Its raw memory representation is used directly.\n+ */\n+template<typename T>\n+CSHA512& operator<<(CSHA512& hasher, const T& data) {\n+    static_assert(!std::is_same<typename std::decay<T>::type, char*>::value, \"Calling operator<<(CSHA512, char*) is probably not what you want\");\n+    static_assert(!std::is_same<typename std::decay<T>::type, unsigned char*>::value, \"Calling operator<<(CSHA512, unsigned char*) is probably not what you want\");\n+    static_assert(!std::is_same<typename std::decay<T>::type, const char*>::value, \"Calling operator<<(CSHA512, const char*) is probably not what you want\");\n+    static_assert(!std::is_same<typename std::decay<T>::type, const unsigned char*>::value, \"Calling operator<<(CSHA512, const unsigned char*) is probably not what you want\");\n+    hasher.Write((const unsigned char*)&data, sizeof(data));\n+    return hasher;\n+}\n+\n+#ifndef WIN32\n+void AddSockaddr(CSHA512& hasher, const struct sockaddr *addr)\n+{\n+    if (addr == nullptr) return;\n+    switch (addr->sa_family) {\n+    case AF_INET:\n+        hasher.Write((const unsigned char*)addr, sizeof(sockaddr_in));\n+        break;\n+    case AF_INET6:\n+        hasher.Write((const unsigned char*)addr, sizeof(sockaddr_in6));\n+        break;\n+    default:\n+        hasher.Write((const unsigned char*)&addr->sa_family, sizeof(addr->sa_family));\n+    }\n+}\n+\n+void AddFile(CSHA512& hasher, const char *path)\n+{\n+    struct stat sb = {};\n+    int f = open(path, O_RDONLY);\n+    size_t total = 0;\n+    if (f != -1) {\n+        unsigned char fbuf[4096];\n+        int n;\n+        hasher.Write((const unsigned char*)&f, sizeof(f));\n+        if (fstat(f, &sb) == 0) hasher << sb;\n+        do {\n+            n = read(f, fbuf, sizeof(fbuf));\n+            if (n > 0) hasher.Write(fbuf, n);\n+            total += n;\n+            /* not bothering with EINTR handling. */\n+        } while (n == sizeof(fbuf) && total < 1048576); // Read only the first 1 Mbyte\n+        close(f);\n+    }\n+}\n+\n+void AddPath(CSHA512& hasher, const char *path)\n+{\n+    struct stat sb = {};\n+    if (stat(path, &sb) == 0) {\n+        hasher.Write((const unsigned char*)path, strlen(path) + 1);\n+        hasher << sb;\n+    }\n+}\n+#endif\n+\n+#if HAVE_SYSCTL\n+template<int... S>\n+void AddSysctl(CSHA512& hasher)\n+{\n+    int CTL[sizeof...(S)] = {S...};\n+    unsigned char buffer[65536];\n+    size_t siz = 65536;\n+    int ret = sysctl(CTL, sizeof...(S), buffer, &siz, nullptr, 0);\n+    if (ret == 0 || (ret == -1 && errno == ENOMEM)) {\n+        hasher << sizeof(CTL);\n+        hasher.Write((const unsigned char*)CTL, sizeof(CTL));\n+        if (siz > sizeof(buffer)) siz = sizeof(buffer);\n+        hasher << siz;\n+        hasher.Write(buffer, siz);\n+    }\n+}\n+#endif\n+\n+#ifdef HAVE_GETCPUID\n+void inline AddCPUID(CSHA512& hasher, uint32_t leaf, uint32_t subleaf, uint32_t& ax, uint32_t& bx, uint32_t& cx, uint32_t& dx)\n+{\n+    GetCPUID(leaf, subleaf, ax, bx, cx, dx);\n+    hasher << leaf << subleaf << ax << bx << cx << dx;\n+}\n+\n+void AddAllCPUID(CSHA512& hasher)\n+{\n+    uint32_t ax, bx, cx, dx;\n+    // Iterate over all standard leaves\n+    AddCPUID(hasher, 0, 0, ax, bx, cx, dx); // Returns max leaf in ax\n+    uint32_t max = ax;\n+    for (uint32_t leaf = 1; leaf <= max; ++leaf) {\n+        for (uint32_t subleaf = 0;; ++subleaf) {\n+            AddCPUID(hasher, leaf, subleaf, ax, bx, cx, dx);\n+            // Iterate over subleaves for leaf 4, 11, 13\n+            if (leaf != 4 && leaf != 11 && leaf != 13) break;\n+            if ((leaf == 4 || leaf == 13) && ax == 0) break;\n+            if (leaf == 11 && (cx & 0xFF00) == 0) break;\n+        }\n+    }\n+    // Iterate over all extended leaves\n+    AddCPUID(hasher, 0x80000000, 0, ax, bx, cx, dx); // Returns max extended leaf in ax\n+    uint32_t ext_max = ax;\n+    for (uint32_t leaf = 0x80000001; leaf <= ext_max; ++leaf) {\n+        AddCPUID(hasher, leaf, 0, ax, bx, cx, dx);\n+    }\n+}\n+#endif\n+} // namespace\n+\n+void RandAddDynamicEnv(CSHA512& hasher)\n+{\n+    RandAddSeedPerfmon(hasher);\n+\n+    // Various clocks\n+#ifdef WIN32\n+    FILETIME ftime;\n+    GetSystemTimeAsFileTime(&ftime);\n+    hasher << ftime;\n+#else\n+#  ifndef __MACH__\n+    // On non-MacOS systems, use various clock_gettime() calls.\n+    struct timespec ts = {};\n+#    ifdef CLOCK_MONOTONIC\n+    clock_gettime(CLOCK_MONOTONIC, &ts);\n+    hasher << ts;\n+#    endif\n+#    ifdef CLOCK_REALTIME\n+    clock_gettime(CLOCK_REALTIME, &ts);\n+    hasher << ts;\n+#    endif\n+#    ifdef CLOCK_BOOTTIME\n+    clock_gettime(CLOCK_BOOTTIME, &ts);\n+    hasher << ts;\n+#    endif\n+#  else\n+    // On MacOS use mach_absolute_time (number of CPU ticks since boot) as a replacement for CLOCK_MONOTONIC,",
      "path": "src/randomenv.cpp",
      "position": 246,
      "original_position": 246,
      "commit_id": "d1c02775aa74a0610809ac54bb241ddad61d2d8c",
      "original_commit_id": "d1c02775aa74a0610809ac54bb241ddad61d2d8c",
      "in_reply_to_id": null,
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "After #16392 (bumping our SDK and minimum required macOS to 10.12), `clock_gettime`, `CLOCK_REALTIME` and `CLOCK_MONOTONIC` will be available to use on macOS. Not necessarily anything that needs to change here now, but the potential to simplify this later.",
      "created_at": "2019-11-14T01:39:52Z",
      "updated_at": "2019-11-14T01:58:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#discussion_r346090606",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/346090606"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 246,
      "original_line": 246,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/946404577",
      "pull_request_review_id": 1073591053,
      "id": 946404577,
      "node_id": "PRRC_kwDOABII5844aPzh",
      "diff_hunk": "@@ -0,0 +1,508 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <randomenv.h>\n+\n+#include <clientversion.h>\n+#include <compat/cpuid.h>\n+#include <crypto/sha512.h>\n+#include <support/cleanse.h>\n+#include <util/time.h> // for GetTime()\n+#ifdef WIN32\n+#include <compat.h> // for Windows API\n+#endif\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <chrono>\n+#include <climits>\n+#include <thread>\n+#include <vector>\n+\n+#include <stdint.h>\n+#include <string.h>\n+#ifndef WIN32\n+#include <sys/types.h> // must go before a number of other headers\n+#include <fcntl.h>\n+#include <netinet/in.h>\n+#include <sys/resource.h>\n+#include <sys/socket.h>\n+#include <sys/stat.h>\n+#include <sys/time.h>\n+#include <sys/utsname.h>\n+#include <unistd.h>\n+#endif\n+#ifdef __MACH__\n+#include <mach/clock.h>\n+#include <mach/mach.h>\n+#include <mach/mach_time.h>\n+#endif\n+#if HAVE_DECL_GETIFADDRS\n+#include <ifaddrs.h>\n+#endif\n+#if HAVE_SYSCTL\n+#include <sys/sysctl.h>\n+#if HAVE_VM_VM_PARAM_H\n+#include <vm/vm_param.h>\n+#endif\n+#if HAVE_SYS_RESOURCES_H\n+#include <sys/resources.h>\n+#endif\n+#if HAVE_SYS_VMMETER_H\n+#include <sys/vmmeter.h>\n+#endif\n+#endif\n+#ifdef __linux__\n+#include <sys/auxv.h>\n+#endif\n+\n+//! Necessary on some platforms\n+extern char** environ;",
      "path": "src/randomenv.cpp",
      "position": 66,
      "original_position": 66,
      "commit_id": "d1c02775aa74a0610809ac54bb241ddad61d2d8c",
      "original_commit_id": "d1c02775aa74a0610809ac54bb241ddad61d2d8c",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@sipa\r\nWhile compiling natively [on Windows with MSVC](https://github.com/bitcoin/bitcoin/pull/25797#issuecomment-1215983238), receiving [`C4273`](https://docs.microsoft.com/en-us/cpp/error-messages/compiler-warnings/compiler-warning-level-1-c4273) warnings:\r\n```\r\n  randomenv.cpp\r\nC:\\Users\\hebasto\\bitcoin\\src\\randomenv.cpp(60,22): warning C4273: '__p__environ': inconsistent dll linkage [C:\\Users\\hebasto\\bitcoin\\build\\src\\util\\bitcoin_util.vcxproj]\r\nC:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.19041.0\\ucrt\\stdlib.h(1158,29): message : see previous definition of '__p__environ' [C:\\Users\\hebasto\\bitcoin\\build\\src\\util\\bitcoin_util.\r\nvcxproj]\r\n```\r\n\r\n```\r\n  randomenv.cpp\r\nC:\\Users\\hebasto\\bitcoin\\src\\randomenv.cpp(60,22): warning C4273: '__p__environ': inconsistent dll linkage [C:\\Users\\hebasto\\bitcoin\\build\\src\\kernel\\bitcoinkernel.vcxproj]\r\nC:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.19041.0\\ucrt\\stdlib.h(1158,29): message : see previous definition of '__p__environ' [C:\\Users\\hebasto\\bitcoin\\build\\src\\kernel\\bitcoinkern\r\nel.vcxproj]\r\n```\r\n\r\nConsidering https://docs.microsoft.com/en-us/cpp/c-runtime-library/environ-wenviron, is this code correct for MSVC? \r\n",
      "created_at": "2022-08-16T07:01:29Z",
      "updated_at": "2022-08-16T07:01:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#discussion_r946404577",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/946404577"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270"
        }
      },
      "start_line": 65,
      "original_start_line": 65,
      "start_side": "RIGHT",
      "line": 66,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1003213740",
      "pull_request_review_id": 1152998829,
      "id": 1003213740,
      "node_id": "PRRC_kwDOABII5847y9Os",
      "diff_hunk": "@@ -0,0 +1,508 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <randomenv.h>\n+\n+#include <clientversion.h>\n+#include <compat/cpuid.h>\n+#include <crypto/sha512.h>\n+#include <support/cleanse.h>\n+#include <util/time.h> // for GetTime()\n+#ifdef WIN32\n+#include <compat.h> // for Windows API\n+#endif\n+\n+#include <algorithm>\n+#include <atomic>\n+#include <chrono>\n+#include <climits>\n+#include <thread>\n+#include <vector>\n+\n+#include <stdint.h>\n+#include <string.h>\n+#ifndef WIN32\n+#include <sys/types.h> // must go before a number of other headers\n+#include <fcntl.h>\n+#include <netinet/in.h>\n+#include <sys/resource.h>\n+#include <sys/socket.h>\n+#include <sys/stat.h>\n+#include <sys/time.h>\n+#include <sys/utsname.h>\n+#include <unistd.h>\n+#endif\n+#ifdef __MACH__\n+#include <mach/clock.h>\n+#include <mach/mach.h>\n+#include <mach/mach_time.h>\n+#endif\n+#if HAVE_DECL_GETIFADDRS\n+#include <ifaddrs.h>\n+#endif\n+#if HAVE_SYSCTL\n+#include <sys/sysctl.h>\n+#if HAVE_VM_VM_PARAM_H\n+#include <vm/vm_param.h>\n+#endif\n+#if HAVE_SYS_RESOURCES_H\n+#include <sys/resources.h>\n+#endif\n+#if HAVE_SYS_VMMETER_H\n+#include <sys/vmmeter.h>\n+#endif\n+#endif\n+#ifdef __linux__\n+#include <sys/auxv.h>\n+#endif\n+\n+//! Necessary on some platforms\n+extern char** environ;",
      "path": "src/randomenv.cpp",
      "position": 66,
      "original_position": 66,
      "commit_id": "d1c02775aa74a0610809ac54bb241ddad61d2d8c",
      "original_commit_id": "d1c02775aa74a0610809ac54bb241ddad61d2d8c",
      "in_reply_to_id": 946404577,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nm, no issues with the latest [build](https://cirrus-ci.com/task/6359296752484352).",
      "created_at": "2022-10-24T11:40:10Z",
      "updated_at": "2022-10-24T11:40:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17270#discussion_r1003213740",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1003213740"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17270"
        }
      },
      "start_line": 65,
      "original_start_line": 65,
      "start_side": "RIGHT",
      "line": 66,
      "original_line": 66,
      "side": "RIGHT"
    }
  ]
}