{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18867",
    "id": 412940261,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDEyOTQwMjYx",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18867",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/18867.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/18867.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18867",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18867/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18867/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18867/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/f9b22e3bdb54acb2f830b3ebbad47ff17dfb5781",
    "number": 18867,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "tests: Add fuzzing harness for CCoinsViewCache",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Add fuzzing harness for `CCoinsViewCache`.\r\n\r\nSee [`doc/fuzzing.md`](https://github.com/bitcoin/bitcoin/blob/master/doc/fuzzing.md) for information on how to fuzz Bitcoin Core. Don't forget to contribute any coverage increasing inputs you find to the [Bitcoin Core fuzzing corpus repo](https://github.com/bitcoin-core/qa-assets).\r\n\r\nHappy fuzzing :)",
    "labels": [
      {
        "id": 62963516,
        "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
        "name": "Tests",
        "color": "d4c5f9",
        "default": false
      }
    ],
    "active_lock_reason": "resolved",
    "created_at": "2020-05-04T13:06:34Z",
    "updated_at": "2022-08-16T17:19:32Z",
    "closed_at": "2020-05-26T11:32:24Z",
    "mergeable_state": "unknown",
    "merged_at": "2020-05-26T11:32:24Z",
    "merge_commit_sha": "d3b0ef80f6533e58e1ce4a5cbdaa9919872033fa",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "practicalswift:fuzzers-coins_view",
      "ref": "fuzzers-coins_view",
      "sha": "f9b22e3bdb54acb2f830b3ebbad47ff17dfb5781",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 78569642,
        "node_id": "MDEwOlJlcG9zaXRvcnk3ODU2OTY0Mg==",
        "name": "bitcoin",
        "full_name": "practicalswift/bitcoin",
        "owner": {
          "login": "practicalswift",
          "id": 7826565,
          "node_id": "MDQ6VXNlcjc4MjY1NjU=",
          "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/practicalswift",
          "html_url": "https://github.com/practicalswift",
          "followers_url": "https://api.github.com/users/practicalswift/followers",
          "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
          "organizations_url": "https://api.github.com/users/practicalswift/orgs",
          "repos_url": "https://api.github.com/users/practicalswift/repos",
          "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/practicalswift/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/practicalswift/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/practicalswift/bitcoin",
        "archive_url": "https://api.github.com/repos/practicalswift/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/practicalswift/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/practicalswift/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/practicalswift/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/practicalswift/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/practicalswift/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/practicalswift/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/practicalswift/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/practicalswift/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/practicalswift/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/practicalswift/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/practicalswift/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/practicalswift/bitcoin/events",
        "forks_url": "https://api.github.com/repos/practicalswift/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/practicalswift/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/practicalswift/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/practicalswift/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/practicalswift/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/practicalswift/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/practicalswift/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/practicalswift/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/practicalswift/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/practicalswift/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/practicalswift/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/practicalswift/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/practicalswift/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/practicalswift/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/practicalswift/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/practicalswift/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:practicalswift/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/practicalswift/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/practicalswift/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/practicalswift/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/practicalswift/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/practicalswift/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/practicalswift/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/practicalswift/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/practicalswift/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/practicalswift/bitcoin/hooks",
        "svn_url": "https://github.com/practicalswift/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 3,
        "watchers_count": 3,
        "size": 164685,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2021-10-01T13:54:08Z",
        "created_at": "2017-01-10T20:09:24Z",
        "updated_at": "2022-08-28T15:39:12Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "24f70290642c9c5108d3dc62dbe055f5d1bcff9d",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69818,
        "watchers_count": 69818,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T22:42:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T03:51:27Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18867"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 313,
    "deletions": 0,
    "changed_files": 3,
    "commits": 1,
    "review_comments": 14,
    "comments": 7
  },
  "events": [
    {
      "event": "labeled",
      "id": 3299790170,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDMyOTk3OTAxNzA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3299790170",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-04T13:08:14Z",
      "label": {
        "name": "Tests",
        "color": "d4c5f9"
      }
    },
    {
      "event": "reviewed",
      "id": 404980944,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0OTgwOTQ0",
      "url": null,
      "actor": null,
      "commit_id": "b5f971a16ecbfcb0487b274f09516f17dfa19ab6",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18867#pullrequestreview-404980944",
      "submitted_at": "2020-05-04T13:22:40Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18867"
    },
    {
      "event": "commented",
      "id": 623541065,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYyMzU0MTA2NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/623541065",
      "actor": {
        "login": "jb55",
        "id": 45598,
        "node_id": "MDQ6VXNlcjQ1NTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/45598?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jb55",
        "html_url": "https://github.com/jb55",
        "followers_url": "https://api.github.com/users/jb55/followers",
        "following_url": "https://api.github.com/users/jb55/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jb55/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jb55/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jb55/subscriptions",
        "organizations_url": "https://api.github.com/users/jb55/orgs",
        "repos_url": "https://api.github.com/users/jb55/repos",
        "events_url": "https://api.github.com/users/jb55/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jb55/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-04T15:42:21Z",
      "updated_at": "2020-05-04T15:42:21Z",
      "author_association": "MEMBER",
      "body": "nice, Concept ACK",
      "user": {
        "login": "jb55",
        "id": 45598,
        "node_id": "MDQ6VXNlcjQ1NTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/45598?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jb55",
        "html_url": "https://github.com/jb55",
        "followers_url": "https://api.github.com/users/jb55/followers",
        "following_url": "https://api.github.com/users/jb55/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jb55/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jb55/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jb55/subscriptions",
        "organizations_url": "https://api.github.com/users/jb55/orgs",
        "repos_url": "https://api.github.com/users/jb55/repos",
        "events_url": "https://api.github.com/users/jb55/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jb55/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18867#issuecomment-623541065",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18867"
    },
    {
      "event": "commented",
      "id": 628204316,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYyODIwNDMxNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/628204316",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-13T19:39:53Z",
      "updated_at": "2020-05-13T19:39:53Z",
      "author_association": "MEMBER",
      "body": "ACK https://github.com/bitcoin/bitcoin/pull/18867/commits/b5f971a16ecbfcb0487b274f09516f17dfa19ab6",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18867#issuecomment-628204316",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18867"
    },
    {
      "event": "commented",
      "id": 630410609,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDQxMDYwOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/630410609",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-18T20:12:48Z",
      "updated_at": "2020-05-18T20:12:48Z",
      "author_association": "CONTRIBUTOR",
      "body": "@MarcoFalke Would you mind reviewing? :)",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18867#issuecomment-630410609",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18867"
    },
    {
      "event": "mentioned",
      "id": 3348944671,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzM0ODk0NDY3MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3348944671",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-18T20:12:49Z"
    },
    {
      "event": "subscribed",
      "id": 3348944677,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMzNDg5NDQ2Nzc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3348944677",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-18T20:12:49Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3365022590,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzM2NTAyMjU5MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3365022590",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-22T14:50:43Z"
    },
    {
      "event": "commented",
      "id": 632732323,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzMjczMjMyMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632732323",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-22T14:50:57Z",
      "updated_at": "2020-05-22T14:50:57Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased! :)",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18867#issuecomment-632732323",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18867"
    },
    {
      "event": "reviewed",
      "id": 404982232,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0OTgyMjMy",
      "url": null,
      "actor": null,
      "commit_id": "b5f971a16ecbfcb0487b274f09516f17dfa19ab6",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK. Left some ideas for more `assert`s\r\n\r\n68dd5ee2c0934b6cb8f595b4a97ba6e5d5e2a31a",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18867#pullrequestreview-404982232",
      "submitted_at": "2020-05-24T15:34:51Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18867"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOWIyMmUzYmRiNTRhY2IyZjgzMGIzZWJiYWQ0N2ZmMTdkZmI1Nzgx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f9b22e3bdb54acb2f830b3ebbad47ff17dfb5781",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f9b22e3bdb54acb2f830b3ebbad47ff17dfb5781",
      "tree": {
        "sha": "92fe0607d55de25c993027e29cba4e68413fc0f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/92fe0607d55de25c993027e29cba4e68413fc0f9"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/24f70290642c9c5108d3dc62dbe055f5d1bcff9d",
          "sha": "24f70290642c9c5108d3dc62dbe055f5d1bcff9d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/24f70290642c9c5108d3dc62dbe055f5d1bcff9d"
        }
      ],
      "message": "tests: Add fuzzing harness for CCoinsViewCache",
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-05-25T10:05:06Z"
      },
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-04-28T12:27:56Z"
      },
      "sha": "f9b22e3bdb54acb2f830b3ebbad47ff17dfb5781"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3369665491,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzM2OTY2NTQ5MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3369665491",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-25T10:05:37Z"
    },
    {
      "event": "commented",
      "id": 633494293,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzMzQ5NDI5Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/633494293",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-25T10:07:40Z",
      "updated_at": "2020-05-25T10:07:40Z",
      "author_association": "CONTRIBUTOR",
      "body": "@MarcoFalke Thanks a lot for a very good review! All feedback addressed :)",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18867#issuecomment-633494293",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18867"
    },
    {
      "event": "mentioned",
      "id": 3369672122,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzM2OTY3MjEyMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3369672122",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-25T10:07:40Z"
    },
    {
      "event": "subscribed",
      "id": 3369672127,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMzNjk2NzIxMjc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3369672127",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-25T10:07:40Z"
    },
    {
      "event": "reviewed",
      "id": 418192323,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4MTkyMzIz",
      "url": null,
      "actor": null,
      "commit_id": "f9b22e3bdb54acb2f830b3ebbad47ff17dfb5781",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18867#pullrequestreview-418192323",
      "submitted_at": "2020-05-26T11:05:49Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18867"
    },
    {
      "event": "commented",
      "id": 633959421,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzMzk1OTQyMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/633959421",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-26T11:08:35Z",
      "updated_at": "2020-05-26T11:08:35Z",
      "author_association": "MEMBER",
      "body": "ACK f9b22e3bdb",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18867#issuecomment-633959421",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18867"
    },
    {
      "event": "commented",
      "id": 633959766,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzMzk1OTc2Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/633959766",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-26T11:09:25Z",
      "updated_at": "2020-05-26T11:09:25Z",
      "author_association": "MEMBER",
      "body": "ACK f9b22e3bdb 📫\r\n\r\n<details><summary>Show signature and timestamp</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nACK f9b22e3bdb 📫\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUhWqQv/XMjZcKGe3IffrT2bXwemMhi9fKPwO9pJcYGnW6+V/8iHWrTF44+knH5Z\r\nk+gO6xywZRkw2LwHFQ2DRK8YYQex+AtAK4gsMu13bGZn6NoJToqgjfN4FZzZafzn\r\nZJmyOlPP2jO2GKAh3ur0ymUVRB5IvuitTnkjHJpFYgv0T+fFEEmrT+IwB6Gj+c9i\r\nvjRTqU1Pg4eYxtS/zygb1faD6IjN2QUK/uiIV6wdy1aXBVxivx3/p7lCgN9J7M16\r\nTrgvkdTX8Ox4mDMHV+bxmmDKPkDM2Z3ZmAlG2fr4l6ZQF57wQZ4InXRLJS/Rqx/Z\r\nR3UzNufWomLHuwvuOyCTuoVuEjk6MmRmBYxa1mTD1JdC1zEdDBCGrB6Yc/TUzHKI\r\noUSIDxnvkOq4NGetBBuR0KwWuMOvpGfywV5zryVeMYvD4FtbrIauzDCF9Khjwqtf\r\nZnhrmdf70sQDm8kU36/w64Iph54oERYYsV4DbhxqeGJQ+K1j6YKzOIvR7bPsS7ZX\r\nk+eVRXEB\r\n=x9vw\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n[Timestamp of file with hash `ead5a215f8a35eb59ebc41b959be5926bd52e9eb70983fd9272038e5d010f341  -`](https://opentimestamps.org/info/?004f70656e54696d657374616d7073000050726f6f6600bf89e2e884e892940108ead5a215f8a35eb59ebc41b959be5926bd52e9eb70983fd9272038e5d010f341f01060f3f2d4d14a0f92ca457cb561f2e18208fff01049422a8ddc924f15f2f0b4b0b6cde07208f1045eccf8daf008a3830298c0ee542c0083dfe30d2ef90c8e2e2d68747470733a2f2f616c6963652e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267fff010a50938d5623078cc8f38ecea5fcdad1f08f1045eccf8daf0082dc11e9d1ad5d5e00083dfe30d2ef90c8e2c2b68747470733a2f2f626f622e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267fff010aac5eab51ff79a51fb0e6828cad998a208f1045eccf8daf0084e7220ac0954ec620083dfe30d2ef90c8e292868747470733a2f2f66696e6e65792e63616c656e6461722e657465726e69747977616c6c2e636f6df010df86f8e63ed97bba6e242d0a5c7d815108f1045eccf8daf0088090df4b7a8a98380083dfe30d2ef90c8e232268747470733a2f2f6274632e63616c656e6461722e636174616c6c6178792e636f6d)\r\n\r\n</details>\r\n",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18867#issuecomment-633959766",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18867"
    },
    {
      "event": "merged",
      "id": 3373117433,
      "node_id": "MDExOk1lcmdlZEV2ZW50MzM3MzExNzQzMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3373117433",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "d3b0ef80f6533e58e1ce4a5cbdaa9919872033fa",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3b0ef80f6533e58e1ce4a5cbdaa9919872033fa",
      "created_at": "2020-05-26T11:32:24Z"
    },
    {
      "event": "closed",
      "id": 3373117452,
      "node_id": "MDExOkNsb3NlZEV2ZW50MzM3MzExNzQ1Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3373117452",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-26T11:32:24Z"
    },
    {
      "event": "referenced",
      "id": 3376309385,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMzNzYzMDkzODU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3376309385",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "4426e2841682184ffcb1c9133241453c404288b1",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/4426e2841682184ffcb1c9133241453c404288b1",
      "created_at": "2020-05-27T04:13:26Z"
    },
    {
      "event": "referenced",
      "id": 4251450604,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQyNTE0NTA2MDQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4251450604",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "6332444c073f84ce6bfe63705b3e7923840f1f58",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/6332444c073f84ce6bfe63705b3e7923840f1f58",
      "created_at": "2021-01-26T16:05:10Z"
    },
    {
      "event": "head_ref_deleted",
      "id": 4577821022,
      "node_id": "MDE5OkhlYWRSZWZEZWxldGVkRXZlbnQ0NTc3ODIxMDIy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4577821022",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-10T19:41:44Z"
    },
    {
      "event": "referenced",
      "id": 6567231955,
      "node_id": "REFE_lADOABII584keEJMzwAAAAGHcAHT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6567231955",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "c881c3844100ceeb373c750765fe30b0ce5e53b6",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/c881c3844100ceeb373c750765fe30b0ce5e53b6",
      "created_at": "2022-05-07T08:37:11Z"
    },
    {
      "event": "referenced",
      "id": 6567232491,
      "node_id": "REFE_lADOABII584keEJMzwAAAAGHcAPr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6567232491",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "815fc1ee8ec6498c115f668b3f2a21ab97a86b1f",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/815fc1ee8ec6498c115f668b3f2a21ab97a86b1f",
      "created_at": "2022-05-07T08:37:47Z"
    },
    {
      "event": "referenced",
      "id": 6801389467,
      "node_id": "REFE_lADOABII584keEJMzwAAAAGVZPeb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6801389467",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "3782696ea4ab9cf1006836433c0a6ba3ef45e325",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/3782696ea4ab9cf1006836433c0a6ba3ef45e325",
      "created_at": "2022-06-14T06:35:25Z"
    },
    {
      "event": "referenced",
      "id": 6801416029,
      "node_id": "REFE_lADOABII584keEJMzwAAAAGVZV9d",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6801416029",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "78c617e757eaecfdc40ba1f2f71fcb2ab9b1ed3b",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/78c617e757eaecfdc40ba1f2f71fcb2ab9b1ed3b",
      "created_at": "2022-06-14T06:40:24Z"
    },
    {
      "event": "referenced",
      "id": 6806667842,
      "node_id": "REFE_lADOABII584keEJMzwAAAAGVtYJC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6806667842",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "75ed624ce4feea8043bb6d203d77ef1d253dc100",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/75ed624ce4feea8043bb6d203d77ef1d253dc100",
      "created_at": "2022-06-14T18:12:19Z"
    },
    {
      "event": "referenced",
      "id": 6833558217,
      "node_id": "REFE_lADOABII584keEJMzwAAAAGXT9LJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6833558217",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "78993aed8377192c22ed26e266c49b9029678e23",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/78993aed8377192c22ed26e266c49b9029678e23",
      "created_at": "2022-06-18T17:45:03Z"
    },
    {
      "event": "referenced",
      "id": 6833561289,
      "node_id": "REFE_lADOABII584keEJMzwAAAAGXT97J",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6833561289",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "2c6b9991600c0e60768527654d1a3d7798f05f0c",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/2c6b9991600c0e60768527654d1a3d7798f05f0c",
      "created_at": "2022-06-18T17:46:06Z"
    },
    {
      "event": "referenced",
      "id": 6925243940,
      "node_id": "REFE_lADOABII584keEJMzwAAAAGcxtYk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6925243940",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "dee47502c28fec0b00314bae7962bbe1c5982a62",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/dee47502c28fec0b00314bae7962bbe1c5982a62",
      "created_at": "2022-07-04T06:37:20Z"
    },
    {
      "event": "referenced",
      "id": 6925255332,
      "node_id": "REFE_lADOABII584keEJMzwAAAAGcxwKk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6925255332",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "d431f226911f4e119b25ed203b4c263be48acb89",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/d431f226911f4e119b25ed203b4c263be48acb89",
      "created_at": "2022-07-04T06:39:44Z"
    },
    {
      "event": "referenced",
      "id": 6944346018,
      "node_id": "REFE_lADOABII584keEJMzwAAAAGd6k-i",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6944346018",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "08c9364a0a116372a6fde5ca7afee35c55c31a56",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/08c9364a0a116372a6fde5ca7afee35c55c31a56",
      "created_at": "2022-07-06T16:35:26Z"
    },
    {
      "event": "referenced",
      "id": 6944421943,
      "node_id": "REFE_lADOABII584keEJMzwAAAAGd63g3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6944421943",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "597d670a55a7928c6138033fea204884f5e1ce06",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/597d670a55a7928c6138033fea204884f5e1ce06",
      "created_at": "2022-07-06T16:45:15Z"
    },
    {
      "event": "referenced",
      "id": 6945610859,
      "node_id": "REFE_lADOABII584keEJMzwAAAAGd_Zxr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6945610859",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "9d7d2f96a6f1f5aa29ff75a0164543adc7c054d4",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/9d7d2f96a6f1f5aa29ff75a0164543adc7c054d4",
      "created_at": "2022-07-06T19:32:04Z"
    },
    {
      "event": "referenced",
      "id": 6979239738,
      "node_id": "REFE_lADOABII584keEJMzwAAAAGf_r86",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6979239738",
      "actor": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "eefdae1a5312f4f54210a74f79de9013acea3d5c",
      "commit_url": "https://api.github.com/repos/dashpay/dash/commits/eefdae1a5312f4f54210a74f79de9013acea3d5c",
      "created_at": "2022-07-12T16:32:57Z"
    },
    {
      "event": "referenced",
      "id": 6982537373,
      "node_id": "REFE_lADOABII584keEJMzwAAAAGgMRCd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6982537373",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "96b7d0373d48c2caf44821698d86fbe24611908e",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/96b7d0373d48c2caf44821698d86fbe24611908e",
      "created_at": "2022-07-13T03:45:22Z"
    },
    {
      "event": "referenced",
      "id": 6986410417,
      "node_id": "REFE_lADOABII584keEJMzwAAAAGgbCmx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6986410417",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "3356a43466365b67b38ba0579f35be87ec566606",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/3356a43466365b67b38ba0579f35be87ec566606",
      "created_at": "2022-07-13T14:13:23Z"
    },
    {
      "event": "referenced",
      "id": 7002942318,
      "node_id": "REFE_lADOABII584keEJMzwAAAAGhaGtu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7002942318",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "09825e4678dee7a8527ce71bbb6b6cd169ddc892",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/09825e4678dee7a8527ce71bbb6b6cd169ddc892",
      "created_at": "2022-07-15T15:54:41Z"
    },
    {
      "event": "referenced",
      "id": 7007930176,
      "node_id": "REFE_lADOABII584keEJMzwAAAAGhtIdA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7007930176",
      "actor": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "30d6584cb6d733bb0762918489bd23669a0ddee1",
      "commit_url": "https://api.github.com/repos/dashpay/dash/commits/30d6584cb6d733bb0762918489bd23669a0ddee1",
      "created_at": "2022-07-17T20:35:07Z"
    },
    {
      "event": "locked",
      "id": 7199115413,
      "node_id": "LOE_lADOABII584keEJMzwAAAAGtGciV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7199115413",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-16T17:19:32Z",
      "lock_reason": "resolved"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/419431163",
      "pull_request_review_id": 404980944,
      "id": 419431163,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQzMTE2Mw==",
      "diff_hunk": "@@ -0,0 +1,295 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <amount.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <coins.h>\n+#include <consensus/tx_verify.h>\n+#include <consensus/validation.h>\n+#include <key.h>\n+#include <node/coinstats.h>\n+#include <optional.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <pubkey.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <validation.h>\n+\n+#include <cstdint>\n+#include <limits>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+const Coin EMPTY_COIN{};\n+\n+bool operator==(const Coin& a, const Coin& b)\n+{\n+    if (a.IsSpent() && b.IsSpent()) return true;\n+    return static_cast<bool>(a.fCoinBase) == static_cast<bool>(b.fCoinBase) && a.nHeight == b.nHeight && a.out == b.out;\n+}\n+} // namespace\n+\n+void initialize()\n+{\n+    static const ECCVerifyHandle ecc_verify_handle;\n+    ECC_Start();\n+    SelectParams(CBaseChainParams::REGTEST);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    CCoinsView backend_coins_view;\n+    CCoinsViewCache coins_view_cache{&backend_coins_view};\n+    COutPoint random_out_point;\n+    Coin random_coin;\n+    CMutableTransaction random_mutable_transaction;\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 9)) {\n+        case 0: {\n+            if (random_coin.IsSpent()) {\n+                break;\n+            }\n+            Coin coin = random_coin;\n+            bool expected_code_path = false;\n+            try {\n+                coins_view_cache.AddCoin(random_out_point, std::move(coin), fuzzed_data_provider.ConsumeBool());\n+                expected_code_path = true;\n+            } catch (const std::logic_error& e) {\n+                if (e.what() == std::string{\"Attempted to overwrite an unspent coin (when possible_overwrite is false)\"}) {",
      "path": "src/test/fuzz/coins_view.cpp",
      "position": 65,
      "original_position": 64,
      "commit_id": "f9b22e3bdb54acb2f830b3ebbad47ff17dfb5781",
      "original_commit_id": "b5f971a16ecbfcb0487b274f09516f17dfa19ab6",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n                if (e.what() != std::string{\"Attempted to overwrite an unspent coin (when possible_overwrite is false)\"}) raise e;\r\n```\r\n\r\nCould `expected_code_path` be removed with this fixup? If yes, that seems preferable, as it is less code.",
      "created_at": "2020-05-04T13:22:40Z",
      "updated_at": "2020-05-25T10:05:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18867#discussion_r419431163",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/419431163"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18867"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 65,
      "original_line": 65,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/419432165",
      "pull_request_review_id": 404982232,
      "id": 419432165,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQzMjE2NQ==",
      "diff_hunk": "@@ -0,0 +1,295 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <amount.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <coins.h>\n+#include <consensus/tx_verify.h>\n+#include <consensus/validation.h>\n+#include <key.h>\n+#include <node/coinstats.h>\n+#include <optional.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <pubkey.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <validation.h>\n+\n+#include <cstdint>\n+#include <limits>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+const Coin EMPTY_COIN{};\n+\n+bool operator==(const Coin& a, const Coin& b)\n+{\n+    if (a.IsSpent() && b.IsSpent()) return true;\n+    return static_cast<bool>(a.fCoinBase) == static_cast<bool>(b.fCoinBase) && a.nHeight == b.nHeight && a.out == b.out;\n+}\n+} // namespace\n+\n+void initialize()\n+{\n+    static const ECCVerifyHandle ecc_verify_handle;\n+    ECC_Start();\n+    SelectParams(CBaseChainParams::REGTEST);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    CCoinsView backend_coins_view;\n+    CCoinsViewCache coins_view_cache{&backend_coins_view};\n+    COutPoint random_out_point;\n+    Coin random_coin;\n+    CMutableTransaction random_mutable_transaction;\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 9)) {\n+        case 0: {\n+            if (random_coin.IsSpent()) {\n+                break;\n+            }\n+            Coin coin = random_coin;\n+            bool expected_code_path = false;\n+            try {\n+                coins_view_cache.AddCoin(random_out_point, std::move(coin), fuzzed_data_provider.ConsumeBool());\n+                expected_code_path = true;\n+            } catch (const std::logic_error& e) {\n+                if (e.what() == std::string{\"Attempted to overwrite an unspent coin (when possible_overwrite is false)\"}) {\n+                    expected_code_path = true;\n+                }\n+            }\n+            assert(expected_code_path);\n+            break;\n+        }\n+        case 1: {\n+            (void)coins_view_cache.Flush();\n+            break;\n+        }\n+        case 2: {\n+            coins_view_cache.SetBestBlock(ConsumeUInt256(fuzzed_data_provider));\n+            break;\n+        }\n+        case 3: {\n+            Coin coin;",
      "path": "src/test/fuzz/coins_view.cpp",
      "position": null,
      "original_position": 80,
      "commit_id": "f9b22e3bdb54acb2f830b3ebbad47ff17dfb5781",
      "original_commit_id": "b5f971a16ecbfcb0487b274f09516f17dfa19ab6",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n            Coin move_to;\r\n```",
      "created_at": "2020-05-04T13:24:15Z",
      "updated_at": "2020-05-25T10:05:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18867#discussion_r419432165",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/419432165"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18867"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 80,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/419440744",
      "pull_request_review_id": 404992786,
      "id": 419440744,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ0MDc0NA==",
      "diff_hunk": "@@ -0,0 +1,295 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <amount.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <coins.h>\n+#include <consensus/tx_verify.h>\n+#include <consensus/validation.h>\n+#include <key.h>\n+#include <node/coinstats.h>\n+#include <optional.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <pubkey.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <validation.h>\n+\n+#include <cstdint>\n+#include <limits>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+const Coin EMPTY_COIN{};\n+\n+bool operator==(const Coin& a, const Coin& b)\n+{\n+    if (a.IsSpent() && b.IsSpent()) return true;\n+    return static_cast<bool>(a.fCoinBase) == static_cast<bool>(b.fCoinBase) && a.nHeight == b.nHeight && a.out == b.out;\n+}\n+} // namespace\n+\n+void initialize()\n+{\n+    static const ECCVerifyHandle ecc_verify_handle;\n+    ECC_Start();\n+    SelectParams(CBaseChainParams::REGTEST);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    CCoinsView backend_coins_view;\n+    CCoinsViewCache coins_view_cache{&backend_coins_view};\n+    COutPoint random_out_point;\n+    Coin random_coin;\n+    CMutableTransaction random_mutable_transaction;\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 9)) {\n+        case 0: {\n+            if (random_coin.IsSpent()) {\n+                break;\n+            }\n+            Coin coin = random_coin;\n+            bool expected_code_path = false;\n+            try {\n+                coins_view_cache.AddCoin(random_out_point, std::move(coin), fuzzed_data_provider.ConsumeBool());\n+                expected_code_path = true;\n+            } catch (const std::logic_error& e) {\n+                if (e.what() == std::string{\"Attempted to overwrite an unspent coin (when possible_overwrite is false)\"}) {",
      "path": "src/test/fuzz/coins_view.cpp",
      "position": 65,
      "original_position": 64,
      "commit_id": "f9b22e3bdb54acb2f830b3ebbad47ff17dfb5781",
      "original_commit_id": "b5f971a16ecbfcb0487b274f09516f17dfa19ab6",
      "in_reply_to_id": 419431163,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The current formulation is intentional. The problem with doing it the way you suggest is that the `throw;` line (I assume `raise e;` was a typo :)) will not be covered. That would be bad for `src/test/fuzz/` where I want literally 100% line coverage to be able to see fuzzing harness gaps where our inputs are not able to reach :)",
      "created_at": "2020-05-04T13:36:09Z",
      "updated_at": "2020-05-25T10:05:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18867#discussion_r419440744",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/419440744"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18867"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 65,
      "original_line": 65,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429644533",
      "pull_request_review_id": 404982232,
      "id": 429644533,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY0NDUzMw==",
      "diff_hunk": "@@ -0,0 +1,295 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <amount.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <coins.h>\n+#include <consensus/tx_verify.h>\n+#include <consensus/validation.h>\n+#include <key.h>\n+#include <node/coinstats.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <pubkey.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <validation.h>\n+\n+#include <cstdint>\n+#include <limits>\n+#include <optional>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+const Coin EMPTY_COIN{};\n+\n+bool operator==(const Coin& a, const Coin& b)\n+{\n+    if (a.IsSpent() && b.IsSpent()) return true;\n+    return static_cast<bool>(a.fCoinBase) == static_cast<bool>(b.fCoinBase) && a.nHeight == b.nHeight && a.out == b.out;",
      "path": "src/test/fuzz/coins_view.cpp",
      "position": null,
      "original_position": 33,
      "commit_id": "f9b22e3bdb54acb2f830b3ebbad47ff17dfb5781",
      "original_commit_id": "ab7af9323e55bd035d2680a84e986675c7757ee3",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "any reason to use static cast here? this seems to silence any sanitizers that check for overflow if the cast value was not 0 or 1",
      "created_at": "2020-05-24T14:50:16Z",
      "updated_at": "2020-05-25T10:05:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18867#discussion_r429644533",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429644533"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18867"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429645870",
      "pull_request_review_id": 404982232,
      "id": 429645870,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY0NTg3MA==",
      "diff_hunk": "@@ -0,0 +1,295 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <amount.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <coins.h>\n+#include <consensus/tx_verify.h>\n+#include <consensus/validation.h>\n+#include <key.h>\n+#include <node/coinstats.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <pubkey.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <validation.h>\n+\n+#include <cstdint>\n+#include <limits>\n+#include <optional>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+const Coin EMPTY_COIN{};\n+\n+bool operator==(const Coin& a, const Coin& b)\n+{\n+    if (a.IsSpent() && b.IsSpent()) return true;\n+    return static_cast<bool>(a.fCoinBase) == static_cast<bool>(b.fCoinBase) && a.nHeight == b.nHeight && a.out == b.out;\n+}\n+} // namespace\n+\n+void initialize()\n+{\n+    static const ECCVerifyHandle ecc_verify_handle;\n+    ECC_Start();\n+    SelectParams(CBaseChainParams::REGTEST);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    CCoinsView backend_coins_view;\n+    CCoinsViewCache coins_view_cache{&backend_coins_view};\n+    COutPoint random_out_point;\n+    Coin random_coin;\n+    CMutableTransaction random_mutable_transaction;\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 9)) {\n+        case 0: {\n+            if (random_coin.IsSpent()) {\n+                break;\n+            }\n+            Coin coin = random_coin;\n+            bool expected_code_path = false;\n+            try {\n+                coins_view_cache.AddCoin(random_out_point, std::move(coin), fuzzed_data_provider.ConsumeBool());",
      "path": "src/test/fuzz/coins_view.cpp",
      "position": null,
      "original_position": 61,
      "commit_id": "f9b22e3bdb54acb2f830b3ebbad47ff17dfb5781",
      "original_commit_id": "ab7af9323e55bd035d2680a84e986675c7757ee3",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n                coins_view_cache.AddCoin(random_out_point, std::move(coin), possible_overwrite);\r\n```",
      "created_at": "2020-05-24T15:05:08Z",
      "updated_at": "2020-05-25T10:05:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18867#discussion_r429645870",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429645870"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18867"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 61,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429645933",
      "pull_request_review_id": 404982232,
      "id": 429645933,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY0NTkzMw==",
      "diff_hunk": "@@ -0,0 +1,295 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <amount.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <coins.h>\n+#include <consensus/tx_verify.h>\n+#include <consensus/validation.h>\n+#include <key.h>\n+#include <node/coinstats.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <pubkey.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <validation.h>\n+\n+#include <cstdint>\n+#include <limits>\n+#include <optional>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+const Coin EMPTY_COIN{};\n+\n+bool operator==(const Coin& a, const Coin& b)\n+{\n+    if (a.IsSpent() && b.IsSpent()) return true;\n+    return static_cast<bool>(a.fCoinBase) == static_cast<bool>(b.fCoinBase) && a.nHeight == b.nHeight && a.out == b.out;\n+}\n+} // namespace\n+\n+void initialize()\n+{\n+    static const ECCVerifyHandle ecc_verify_handle;\n+    ECC_Start();\n+    SelectParams(CBaseChainParams::REGTEST);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    CCoinsView backend_coins_view;\n+    CCoinsViewCache coins_view_cache{&backend_coins_view};\n+    COutPoint random_out_point;\n+    Coin random_coin;\n+    CMutableTransaction random_mutable_transaction;\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 9)) {\n+        case 0: {\n+            if (random_coin.IsSpent()) {\n+                break;\n+            }\n+            Coin coin = random_coin;\n+            bool expected_code_path = false;\n+            try {\n+                coins_view_cache.AddCoin(random_out_point, std::move(coin), fuzzed_data_provider.ConsumeBool());\n+                expected_code_path = true;\n+            } catch (const std::logic_error& e) {\n+                if (e.what() == std::string{\"Attempted to overwrite an unspent coin (when possible_overwrite is false)\"}) {\n+                    expected_code_path = true;",
      "path": "src/test/fuzz/coins_view.cpp",
      "position": 67,
      "original_position": 65,
      "commit_id": "f9b22e3bdb54acb2f830b3ebbad47ff17dfb5781",
      "original_commit_id": "ab7af9323e55bd035d2680a84e986675c7757ee3",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n                    assert(possible_overwrite);\r\n```\r\n\r\nCould make this check a bit stricter?",
      "created_at": "2020-05-24T15:05:44Z",
      "updated_at": "2020-05-25T10:05:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18867#discussion_r429645933",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429645933"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18867"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 67,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429646754",
      "pull_request_review_id": 404982232,
      "id": 429646754,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY0Njc1NA==",
      "diff_hunk": "@@ -0,0 +1,295 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <amount.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <coins.h>\n+#include <consensus/tx_verify.h>\n+#include <consensus/validation.h>\n+#include <key.h>\n+#include <node/coinstats.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <pubkey.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <validation.h>\n+\n+#include <cstdint>\n+#include <limits>\n+#include <optional>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+const Coin EMPTY_COIN{};\n+\n+bool operator==(const Coin& a, const Coin& b)\n+{\n+    if (a.IsSpent() && b.IsSpent()) return true;\n+    return static_cast<bool>(a.fCoinBase) == static_cast<bool>(b.fCoinBase) && a.nHeight == b.nHeight && a.out == b.out;\n+}\n+} // namespace\n+\n+void initialize()\n+{\n+    static const ECCVerifyHandle ecc_verify_handle;\n+    ECC_Start();\n+    SelectParams(CBaseChainParams::REGTEST);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    CCoinsView backend_coins_view;\n+    CCoinsViewCache coins_view_cache{&backend_coins_view};\n+    COutPoint random_out_point;\n+    Coin random_coin;\n+    CMutableTransaction random_mutable_transaction;\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 9)) {\n+        case 0: {\n+            if (random_coin.IsSpent()) {\n+                break;\n+            }\n+            Coin coin = random_coin;\n+            bool expected_code_path = false;\n+            try {\n+                coins_view_cache.AddCoin(random_out_point, std::move(coin), fuzzed_data_provider.ConsumeBool());\n+                expected_code_path = true;\n+            } catch (const std::logic_error& e) {\n+                if (e.what() == std::string{\"Attempted to overwrite an unspent coin (when possible_overwrite is false)\"}) {\n+                    expected_code_path = true;\n+                }\n+            }\n+            assert(expected_code_path);\n+            break;\n+        }\n+        case 1: {\n+            (void)coins_view_cache.Flush();\n+            break;\n+        }\n+        case 2: {\n+            coins_view_cache.SetBestBlock(ConsumeUInt256(fuzzed_data_provider));\n+            break;\n+        }\n+        case 3: {\n+            Coin coin;\n+            (void)coins_view_cache.SpendCoin(random_out_point, fuzzed_data_provider.ConsumeBool() ? &coin : nullptr);\n+            break;\n+        }\n+        case 4: {\n+            coins_view_cache.Uncache(random_out_point);\n+            break;\n+        }\n+        case 5: {\n+            if (fuzzed_data_provider.ConsumeBool()) {\n+                backend_coins_view = CCoinsView{};\n+            }\n+            coins_view_cache.SetBackend(backend_coins_view);\n+            break;\n+        }\n+        case 6: {\n+            const std::optional<COutPoint> opt_out_point = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\n+            if (!opt_out_point) {\n+                break;\n+            }\n+            random_out_point = *opt_out_point;\n+            break;\n+        }\n+        case 7: {\n+            const std::optional<Coin> opt_coin = ConsumeDeserializable<Coin>(fuzzed_data_provider);\n+            if (!opt_coin) {\n+                break;\n+            }\n+            random_coin = *opt_coin;\n+            break;\n+        }\n+        case 8: {\n+            const std::optional<CMutableTransaction> opt_mutable_transaction = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n+            if (!opt_mutable_transaction) {\n+                break;\n+            }\n+            random_mutable_transaction = *opt_mutable_transaction;\n+            break;\n+        }\n+        case 9: {\n+            CCoinsMap coins_map;\n+            while (fuzzed_data_provider.ConsumeBool()) {\n+                CCoinsCacheEntry coins_cache_entry;\n+                coins_cache_entry.flags = fuzzed_data_provider.ConsumeIntegral<unsigned char>();\n+                if (fuzzed_data_provider.ConsumeBool()) {\n+                    coins_cache_entry.coin = random_coin;\n+                } else {\n+                    const std::optional<Coin> opt_coin = ConsumeDeserializable<Coin>(fuzzed_data_provider);\n+                    if (!opt_coin) {\n+                        break;\n+                    }\n+                    coins_cache_entry.coin = *opt_coin;\n+                }\n+                if (fuzzed_data_provider.ConsumeBool()) {\n+                    const std::optional<COutPoint> opt_out_point = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\n+                    if (!opt_out_point) {\n+                        break;\n+                    }\n+                    random_out_point = *opt_out_point;",
      "path": "src/test/fuzz/coins_view.cpp",
      "position": null,
      "original_position": 138,
      "commit_id": "f9b22e3bdb54acb2f830b3ebbad47ff17dfb5781",
      "original_commit_id": "ab7af9323e55bd035d2680a84e986675c7757ee3",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What is this doing? How is this different from the fuzz engine running case 6 -> case 9?",
      "created_at": "2020-05-24T15:15:02Z",
      "updated_at": "2020-05-25T10:05:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18867#discussion_r429646754",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429646754"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18867"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 138,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429647249",
      "pull_request_review_id": 404982232,
      "id": 429647249,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY0NzI0OQ==",
      "diff_hunk": "@@ -0,0 +1,295 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <amount.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <coins.h>\n+#include <consensus/tx_verify.h>\n+#include <consensus/validation.h>\n+#include <key.h>\n+#include <node/coinstats.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <pubkey.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <validation.h>\n+\n+#include <cstdint>\n+#include <limits>\n+#include <optional>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+const Coin EMPTY_COIN{};\n+\n+bool operator==(const Coin& a, const Coin& b)\n+{\n+    if (a.IsSpent() && b.IsSpent()) return true;\n+    return static_cast<bool>(a.fCoinBase) == static_cast<bool>(b.fCoinBase) && a.nHeight == b.nHeight && a.out == b.out;\n+}\n+} // namespace\n+\n+void initialize()\n+{\n+    static const ECCVerifyHandle ecc_verify_handle;\n+    ECC_Start();\n+    SelectParams(CBaseChainParams::REGTEST);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    CCoinsView backend_coins_view;\n+    CCoinsViewCache coins_view_cache{&backend_coins_view};\n+    COutPoint random_out_point;\n+    Coin random_coin;\n+    CMutableTransaction random_mutable_transaction;\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 9)) {\n+        case 0: {\n+            if (random_coin.IsSpent()) {\n+                break;\n+            }\n+            Coin coin = random_coin;\n+            bool expected_code_path = false;\n+            try {\n+                coins_view_cache.AddCoin(random_out_point, std::move(coin), fuzzed_data_provider.ConsumeBool());\n+                expected_code_path = true;\n+            } catch (const std::logic_error& e) {\n+                if (e.what() == std::string{\"Attempted to overwrite an unspent coin (when possible_overwrite is false)\"}) {\n+                    expected_code_path = true;\n+                }\n+            }\n+            assert(expected_code_path);\n+            break;\n+        }\n+        case 1: {\n+            (void)coins_view_cache.Flush();\n+            break;\n+        }\n+        case 2: {\n+            coins_view_cache.SetBestBlock(ConsumeUInt256(fuzzed_data_provider));\n+            break;\n+        }\n+        case 3: {\n+            Coin coin;\n+            (void)coins_view_cache.SpendCoin(random_out_point, fuzzed_data_provider.ConsumeBool() ? &coin : nullptr);\n+            break;\n+        }\n+        case 4: {\n+            coins_view_cache.Uncache(random_out_point);\n+            break;\n+        }\n+        case 5: {\n+            if (fuzzed_data_provider.ConsumeBool()) {\n+                backend_coins_view = CCoinsView{};\n+            }\n+            coins_view_cache.SetBackend(backend_coins_view);\n+            break;\n+        }\n+        case 6: {\n+            const std::optional<COutPoint> opt_out_point = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\n+            if (!opt_out_point) {\n+                break;\n+            }\n+            random_out_point = *opt_out_point;\n+            break;\n+        }\n+        case 7: {\n+            const std::optional<Coin> opt_coin = ConsumeDeserializable<Coin>(fuzzed_data_provider);\n+            if (!opt_coin) {\n+                break;\n+            }\n+            random_coin = *opt_coin;\n+            break;\n+        }\n+        case 8: {\n+            const std::optional<CMutableTransaction> opt_mutable_transaction = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n+            if (!opt_mutable_transaction) {\n+                break;\n+            }\n+            random_mutable_transaction = *opt_mutable_transaction;\n+            break;\n+        }\n+        case 9: {\n+            CCoinsMap coins_map;\n+            while (fuzzed_data_provider.ConsumeBool()) {\n+                CCoinsCacheEntry coins_cache_entry;\n+                coins_cache_entry.flags = fuzzed_data_provider.ConsumeIntegral<unsigned char>();\n+                if (fuzzed_data_provider.ConsumeBool()) {\n+                    coins_cache_entry.coin = random_coin;\n+                } else {\n+                    const std::optional<Coin> opt_coin = ConsumeDeserializable<Coin>(fuzzed_data_provider);\n+                    if (!opt_coin) {\n+                        break;\n+                    }\n+                    coins_cache_entry.coin = *opt_coin;\n+                }\n+                if (fuzzed_data_provider.ConsumeBool()) {\n+                    const std::optional<COutPoint> opt_out_point = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\n+                    if (!opt_out_point) {\n+                        break;\n+                    }\n+                    random_out_point = *opt_out_point;\n+                }\n+                coins_map.emplace(random_out_point, std::move(coins_cache_entry));\n+            }\n+            bool expected_code_path = false;\n+            try {\n+                coins_view_cache.BatchWrite(coins_map, fuzzed_data_provider.ConsumeBool() ? ConsumeUInt256(fuzzed_data_provider) : coins_view_cache.GetBestBlock());\n+                expected_code_path = true;\n+            } catch (const std::logic_error& e) {\n+                if (e.what() == std::string{\"FRESH flag misapplied to coin that exists in parent cache\"}) {\n+                    expected_code_path = true;",
      "path": "src/test/fuzz/coins_view.cpp",
      "position": 143,
      "original_position": 148,
      "commit_id": "f9b22e3bdb54acb2f830b3ebbad47ff17dfb5781",
      "original_commit_id": "ab7af9323e55bd035d2680a84e986675c7757ee3",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Note to myself only: I thought about putting a more strict assert here, but the exception doesn't give any hints which coin failed, so I don't think this is possible for now.",
      "created_at": "2020-05-24T15:20:14Z",
      "updated_at": "2020-05-25T10:05:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18867#discussion_r429647249",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429647249"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18867"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 143,
      "original_line": 143,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429647975",
      "pull_request_review_id": 404982232,
      "id": 429647975,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY0Nzk3NQ==",
      "diff_hunk": "@@ -0,0 +1,295 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <amount.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <coins.h>\n+#include <consensus/tx_verify.h>\n+#include <consensus/validation.h>\n+#include <key.h>\n+#include <node/coinstats.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <pubkey.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <validation.h>\n+\n+#include <cstdint>\n+#include <limits>\n+#include <optional>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+const Coin EMPTY_COIN{};\n+\n+bool operator==(const Coin& a, const Coin& b)\n+{\n+    if (a.IsSpent() && b.IsSpent()) return true;\n+    return static_cast<bool>(a.fCoinBase) == static_cast<bool>(b.fCoinBase) && a.nHeight == b.nHeight && a.out == b.out;\n+}\n+} // namespace\n+\n+void initialize()\n+{\n+    static const ECCVerifyHandle ecc_verify_handle;\n+    ECC_Start();\n+    SelectParams(CBaseChainParams::REGTEST);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    CCoinsView backend_coins_view;\n+    CCoinsViewCache coins_view_cache{&backend_coins_view};\n+    COutPoint random_out_point;\n+    Coin random_coin;\n+    CMutableTransaction random_mutable_transaction;\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 9)) {\n+        case 0: {\n+            if (random_coin.IsSpent()) {\n+                break;\n+            }\n+            Coin coin = random_coin;\n+            bool expected_code_path = false;\n+            try {\n+                coins_view_cache.AddCoin(random_out_point, std::move(coin), fuzzed_data_provider.ConsumeBool());\n+                expected_code_path = true;\n+            } catch (const std::logic_error& e) {\n+                if (e.what() == std::string{\"Attempted to overwrite an unspent coin (when possible_overwrite is false)\"}) {\n+                    expected_code_path = true;\n+                }\n+            }\n+            assert(expected_code_path);\n+            break;\n+        }\n+        case 1: {\n+            (void)coins_view_cache.Flush();\n+            break;\n+        }\n+        case 2: {\n+            coins_view_cache.SetBestBlock(ConsumeUInt256(fuzzed_data_provider));\n+            break;\n+        }\n+        case 3: {\n+            Coin coin;\n+            (void)coins_view_cache.SpendCoin(random_out_point, fuzzed_data_provider.ConsumeBool() ? &coin : nullptr);\n+            break;\n+        }\n+        case 4: {\n+            coins_view_cache.Uncache(random_out_point);\n+            break;\n+        }\n+        case 5: {\n+            if (fuzzed_data_provider.ConsumeBool()) {\n+                backend_coins_view = CCoinsView{};\n+            }\n+            coins_view_cache.SetBackend(backend_coins_view);\n+            break;\n+        }\n+        case 6: {\n+            const std::optional<COutPoint> opt_out_point = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\n+            if (!opt_out_point) {\n+                break;\n+            }\n+            random_out_point = *opt_out_point;\n+            break;\n+        }\n+        case 7: {\n+            const std::optional<Coin> opt_coin = ConsumeDeserializable<Coin>(fuzzed_data_provider);\n+            if (!opt_coin) {\n+                break;\n+            }\n+            random_coin = *opt_coin;\n+            break;\n+        }\n+        case 8: {\n+            const std::optional<CMutableTransaction> opt_mutable_transaction = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n+            if (!opt_mutable_transaction) {\n+                break;\n+            }\n+            random_mutable_transaction = *opt_mutable_transaction;\n+            break;\n+        }\n+        case 9: {\n+            CCoinsMap coins_map;\n+            while (fuzzed_data_provider.ConsumeBool()) {\n+                CCoinsCacheEntry coins_cache_entry;\n+                coins_cache_entry.flags = fuzzed_data_provider.ConsumeIntegral<unsigned char>();\n+                if (fuzzed_data_provider.ConsumeBool()) {\n+                    coins_cache_entry.coin = random_coin;\n+                } else {\n+                    const std::optional<Coin> opt_coin = ConsumeDeserializable<Coin>(fuzzed_data_provider);\n+                    if (!opt_coin) {\n+                        break;\n+                    }\n+                    coins_cache_entry.coin = *opt_coin;\n+                }\n+                if (fuzzed_data_provider.ConsumeBool()) {\n+                    const std::optional<COutPoint> opt_out_point = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\n+                    if (!opt_out_point) {\n+                        break;\n+                    }\n+                    random_out_point = *opt_out_point;\n+                }\n+                coins_map.emplace(random_out_point, std::move(coins_cache_entry));\n+            }\n+            bool expected_code_path = false;\n+            try {\n+                coins_view_cache.BatchWrite(coins_map, fuzzed_data_provider.ConsumeBool() ? ConsumeUInt256(fuzzed_data_provider) : coins_view_cache.GetBestBlock());\n+                expected_code_path = true;\n+            } catch (const std::logic_error& e) {\n+                if (e.what() == std::string{\"FRESH flag misapplied to coin that exists in parent cache\"}) {\n+                    expected_code_path = true;\n+                }\n+            }\n+            assert(expected_code_path);\n+            break;\n+        }\n+        }\n+    }\n+\n+    {\n+        const Coin& coin_using_access_coin = coins_view_cache.AccessCoin(random_out_point);\n+        const bool exists_using_access_coin = !(coin_using_access_coin == EMPTY_COIN);\n+        const bool exists_using_have_coin = coins_view_cache.HaveCoin(random_out_point);\n+        const bool exists_using_have_coin_in_cache = coins_view_cache.HaveCoinInCache(random_out_point);\n+        Coin coin_using_get_coin;\n+        const bool exists_using_get_coin = coins_view_cache.GetCoin(random_out_point, coin_using_get_coin);\n+        if (exists_using_get_coin) {\n+            assert(coin_using_get_coin == coin_using_access_coin);\n+        }\n+        assert((exists_using_access_coin && exists_using_have_coin_in_cache && exists_using_have_coin && exists_using_get_coin) ||\n+               (!exists_using_access_coin && !exists_using_have_coin_in_cache && !exists_using_have_coin && !exists_using_get_coin));\n+        const bool exists_using_have_coin_in_backend = backend_coins_view.HaveCoin(random_out_point);\n+        if (exists_using_have_coin_in_backend) {\n+            assert(exists_using_have_coin);\n+        }\n+        Coin coin_using_backend_get_coin;\n+        if (backend_coins_view.GetCoin(random_out_point, coin_using_backend_get_coin)) {\n+            assert(exists_using_have_coin_in_backend);\n+            assert(coin_using_get_coin == coin_using_backend_get_coin);\n+        } else {\n+            assert(!exists_using_have_coin_in_backend);\n+        }\n+    }\n+\n+    {\n+        bool expected_code_path = false;\n+        try {\n+            (void)coins_view_cache.Cursor();\n+        } catch (const std::logic_error&) {\n+            expected_code_path = true;\n+        }\n+        assert(expected_code_path);\n+        (void)coins_view_cache.DynamicMemoryUsage();\n+        (void)coins_view_cache.EstimateSize();\n+        (void)coins_view_cache.GetBestBlock();\n+        (void)coins_view_cache.GetCacheSize();\n+        (void)coins_view_cache.GetHeadBlocks();\n+        (void)coins_view_cache.HaveInputs(CTransaction{random_mutable_transaction});\n+    }\n+\n+    {\n+        const CCoinsViewCursor* coins_view_cursor = backend_coins_view.Cursor();\n+        assert(coins_view_cursor == nullptr);\n+        (void)backend_coins_view.EstimateSize();\n+        (void)backend_coins_view.GetBestBlock();\n+        (void)backend_coins_view.GetHeadBlocks();\n+    }\n+\n+    if (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 6)) {\n+        case 0: {\n+            const CTransaction transaction{random_mutable_transaction};\n+            bool is_spent = false;\n+            for (const CTxOut& tx_out : transaction.vout) {\n+                if (Coin{tx_out, 0, transaction.IsCoinBase()}.IsSpent()) {\n+                    is_spent = true;\n+                }\n+            }\n+            if (is_spent) {\n+                // Avoid:\n+                // coins.cpp:69: void CCoinsViewCache::AddCoin(const COutPoint &, Coin &&, bool): Assertion `!coin.IsSpent()' failed.\n+                break;\n+            }\n+            bool expected_code_path = false;\n+            try {\n+                AddCoins(coins_view_cache, transaction, fuzzed_data_provider.ConsumeIntegral<int>(), fuzzed_data_provider.ConsumeBool());\n+                expected_code_path = true;\n+            } catch (const std::logic_error& e) {\n+                if (e.what() == std::string{\"Attempted to overwrite an unspent coin (when possible_overwrite is false)\"}) {\n+                    expected_code_path = true;",
      "path": "src/test/fuzz/coins_view.cpp",
      "position": 225,
      "original_position": 227,
      "commit_id": "f9b22e3bdb54acb2f830b3ebbad47ff17dfb5781",
      "original_commit_id": "ab7af9323e55bd035d2680a84e986675c7757ee3",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`                    assert(possible_overwrite);`",
      "created_at": "2020-05-24T15:28:26Z",
      "updated_at": "2020-05-25T10:05:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18867#discussion_r429647975",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429647975"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18867"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 225,
      "original_line": 225,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429648160",
      "pull_request_review_id": 404982232,
      "id": 429648160,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY0ODE2MA==",
      "diff_hunk": "@@ -0,0 +1,295 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <amount.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <coins.h>\n+#include <consensus/tx_verify.h>\n+#include <consensus/validation.h>\n+#include <key.h>\n+#include <node/coinstats.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <pubkey.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <validation.h>\n+\n+#include <cstdint>\n+#include <limits>\n+#include <optional>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+const Coin EMPTY_COIN{};\n+\n+bool operator==(const Coin& a, const Coin& b)\n+{\n+    if (a.IsSpent() && b.IsSpent()) return true;\n+    return static_cast<bool>(a.fCoinBase) == static_cast<bool>(b.fCoinBase) && a.nHeight == b.nHeight && a.out == b.out;\n+}\n+} // namespace\n+\n+void initialize()\n+{\n+    static const ECCVerifyHandle ecc_verify_handle;\n+    ECC_Start();\n+    SelectParams(CBaseChainParams::REGTEST);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    CCoinsView backend_coins_view;\n+    CCoinsViewCache coins_view_cache{&backend_coins_view};\n+    COutPoint random_out_point;\n+    Coin random_coin;\n+    CMutableTransaction random_mutable_transaction;\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 9)) {\n+        case 0: {\n+            if (random_coin.IsSpent()) {\n+                break;\n+            }\n+            Coin coin = random_coin;\n+            bool expected_code_path = false;\n+            try {\n+                coins_view_cache.AddCoin(random_out_point, std::move(coin), fuzzed_data_provider.ConsumeBool());\n+                expected_code_path = true;\n+            } catch (const std::logic_error& e) {\n+                if (e.what() == std::string{\"Attempted to overwrite an unspent coin (when possible_overwrite is false)\"}) {\n+                    expected_code_path = true;\n+                }\n+            }\n+            assert(expected_code_path);\n+            break;\n+        }\n+        case 1: {\n+            (void)coins_view_cache.Flush();\n+            break;\n+        }\n+        case 2: {\n+            coins_view_cache.SetBestBlock(ConsumeUInt256(fuzzed_data_provider));\n+            break;\n+        }\n+        case 3: {\n+            Coin coin;\n+            (void)coins_view_cache.SpendCoin(random_out_point, fuzzed_data_provider.ConsumeBool() ? &coin : nullptr);\n+            break;\n+        }\n+        case 4: {\n+            coins_view_cache.Uncache(random_out_point);\n+            break;\n+        }\n+        case 5: {\n+            if (fuzzed_data_provider.ConsumeBool()) {\n+                backend_coins_view = CCoinsView{};\n+            }\n+            coins_view_cache.SetBackend(backend_coins_view);\n+            break;\n+        }\n+        case 6: {\n+            const std::optional<COutPoint> opt_out_point = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\n+            if (!opt_out_point) {\n+                break;\n+            }\n+            random_out_point = *opt_out_point;\n+            break;\n+        }\n+        case 7: {\n+            const std::optional<Coin> opt_coin = ConsumeDeserializable<Coin>(fuzzed_data_provider);\n+            if (!opt_coin) {\n+                break;\n+            }\n+            random_coin = *opt_coin;\n+            break;\n+        }\n+        case 8: {\n+            const std::optional<CMutableTransaction> opt_mutable_transaction = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n+            if (!opt_mutable_transaction) {\n+                break;\n+            }\n+            random_mutable_transaction = *opt_mutable_transaction;\n+            break;\n+        }\n+        case 9: {\n+            CCoinsMap coins_map;\n+            while (fuzzed_data_provider.ConsumeBool()) {\n+                CCoinsCacheEntry coins_cache_entry;\n+                coins_cache_entry.flags = fuzzed_data_provider.ConsumeIntegral<unsigned char>();\n+                if (fuzzed_data_provider.ConsumeBool()) {\n+                    coins_cache_entry.coin = random_coin;\n+                } else {\n+                    const std::optional<Coin> opt_coin = ConsumeDeserializable<Coin>(fuzzed_data_provider);\n+                    if (!opt_coin) {\n+                        break;\n+                    }\n+                    coins_cache_entry.coin = *opt_coin;\n+                }\n+                if (fuzzed_data_provider.ConsumeBool()) {\n+                    const std::optional<COutPoint> opt_out_point = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\n+                    if (!opt_out_point) {\n+                        break;\n+                    }\n+                    random_out_point = *opt_out_point;\n+                }\n+                coins_map.emplace(random_out_point, std::move(coins_cache_entry));\n+            }\n+            bool expected_code_path = false;\n+            try {\n+                coins_view_cache.BatchWrite(coins_map, fuzzed_data_provider.ConsumeBool() ? ConsumeUInt256(fuzzed_data_provider) : coins_view_cache.GetBestBlock());\n+                expected_code_path = true;\n+            } catch (const std::logic_error& e) {\n+                if (e.what() == std::string{\"FRESH flag misapplied to coin that exists in parent cache\"}) {\n+                    expected_code_path = true;\n+                }\n+            }\n+            assert(expected_code_path);\n+            break;\n+        }\n+        }\n+    }\n+\n+    {\n+        const Coin& coin_using_access_coin = coins_view_cache.AccessCoin(random_out_point);\n+        const bool exists_using_access_coin = !(coin_using_access_coin == EMPTY_COIN);\n+        const bool exists_using_have_coin = coins_view_cache.HaveCoin(random_out_point);\n+        const bool exists_using_have_coin_in_cache = coins_view_cache.HaveCoinInCache(random_out_point);\n+        Coin coin_using_get_coin;\n+        const bool exists_using_get_coin = coins_view_cache.GetCoin(random_out_point, coin_using_get_coin);\n+        if (exists_using_get_coin) {\n+            assert(coin_using_get_coin == coin_using_access_coin);\n+        }\n+        assert((exists_using_access_coin && exists_using_have_coin_in_cache && exists_using_have_coin && exists_using_get_coin) ||\n+               (!exists_using_access_coin && !exists_using_have_coin_in_cache && !exists_using_have_coin && !exists_using_get_coin));\n+        const bool exists_using_have_coin_in_backend = backend_coins_view.HaveCoin(random_out_point);\n+        if (exists_using_have_coin_in_backend) {\n+            assert(exists_using_have_coin);\n+        }\n+        Coin coin_using_backend_get_coin;\n+        if (backend_coins_view.GetCoin(random_out_point, coin_using_backend_get_coin)) {\n+            assert(exists_using_have_coin_in_backend);\n+            assert(coin_using_get_coin == coin_using_backend_get_coin);\n+        } else {\n+            assert(!exists_using_have_coin_in_backend);\n+        }\n+    }\n+\n+    {\n+        bool expected_code_path = false;\n+        try {\n+            (void)coins_view_cache.Cursor();\n+        } catch (const std::logic_error&) {\n+            expected_code_path = true;\n+        }\n+        assert(expected_code_path);\n+        (void)coins_view_cache.DynamicMemoryUsage();\n+        (void)coins_view_cache.EstimateSize();\n+        (void)coins_view_cache.GetBestBlock();\n+        (void)coins_view_cache.GetCacheSize();\n+        (void)coins_view_cache.GetHeadBlocks();\n+        (void)coins_view_cache.HaveInputs(CTransaction{random_mutable_transaction});\n+    }\n+\n+    {\n+        const CCoinsViewCursor* coins_view_cursor = backend_coins_view.Cursor();\n+        assert(coins_view_cursor == nullptr);\n+        (void)backend_coins_view.EstimateSize();\n+        (void)backend_coins_view.GetBestBlock();\n+        (void)backend_coins_view.GetHeadBlocks();\n+    }\n+\n+    if (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 6)) {\n+        case 0: {\n+            const CTransaction transaction{random_mutable_transaction};\n+            bool is_spent = false;\n+            for (const CTxOut& tx_out : transaction.vout) {\n+                if (Coin{tx_out, 0, transaction.IsCoinBase()}.IsSpent()) {\n+                    is_spent = true;\n+                }\n+            }\n+            if (is_spent) {\n+                // Avoid:\n+                // coins.cpp:69: void CCoinsViewCache::AddCoin(const COutPoint &, Coin &&, bool): Assertion `!coin.IsSpent()' failed.\n+                break;\n+            }\n+            bool expected_code_path = false;\n+            try {\n+                AddCoins(coins_view_cache, transaction, fuzzed_data_provider.ConsumeIntegral<int>(), fuzzed_data_provider.ConsumeBool());\n+                expected_code_path = true;\n+            } catch (const std::logic_error& e) {\n+                if (e.what() == std::string{\"Attempted to overwrite an unspent coin (when possible_overwrite is false)\"}) {\n+                    expected_code_path = true;\n+                }\n+            }\n+            assert(expected_code_path);\n+            break;\n+        }\n+        case 1: {\n+            (void)AreInputsStandard(CTransaction{random_mutable_transaction}, coins_view_cache);\n+            break;\n+        }\n+        case 2: {\n+            TxValidationState state;\n+            CAmount tx_fee;",
      "path": "src/test/fuzz/coins_view.cpp",
      "position": null,
      "original_position": 239,
      "commit_id": "f9b22e3bdb54acb2f830b3ebbad47ff17dfb5781",
      "original_commit_id": "ab7af9323e55bd035d2680a84e986675c7757ee3",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n            CAmount tx_fee_out;\r\n```",
      "created_at": "2020-05-24T15:30:45Z",
      "updated_at": "2020-05-25T10:05:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18867#discussion_r429648160",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429648160"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18867"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 239,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429648269",
      "pull_request_review_id": 404982232,
      "id": 429648269,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY0ODI2OQ==",
      "diff_hunk": "@@ -0,0 +1,295 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <amount.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <coins.h>\n+#include <consensus/tx_verify.h>\n+#include <consensus/validation.h>\n+#include <key.h>\n+#include <node/coinstats.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <pubkey.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <validation.h>\n+\n+#include <cstdint>\n+#include <limits>\n+#include <optional>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+const Coin EMPTY_COIN{};\n+\n+bool operator==(const Coin& a, const Coin& b)\n+{\n+    if (a.IsSpent() && b.IsSpent()) return true;\n+    return static_cast<bool>(a.fCoinBase) == static_cast<bool>(b.fCoinBase) && a.nHeight == b.nHeight && a.out == b.out;\n+}\n+} // namespace\n+\n+void initialize()\n+{\n+    static const ECCVerifyHandle ecc_verify_handle;\n+    ECC_Start();\n+    SelectParams(CBaseChainParams::REGTEST);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    CCoinsView backend_coins_view;\n+    CCoinsViewCache coins_view_cache{&backend_coins_view};\n+    COutPoint random_out_point;\n+    Coin random_coin;\n+    CMutableTransaction random_mutable_transaction;\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 9)) {\n+        case 0: {\n+            if (random_coin.IsSpent()) {\n+                break;\n+            }\n+            Coin coin = random_coin;\n+            bool expected_code_path = false;\n+            try {\n+                coins_view_cache.AddCoin(random_out_point, std::move(coin), fuzzed_data_provider.ConsumeBool());\n+                expected_code_path = true;\n+            } catch (const std::logic_error& e) {\n+                if (e.what() == std::string{\"Attempted to overwrite an unspent coin (when possible_overwrite is false)\"}) {\n+                    expected_code_path = true;\n+                }\n+            }\n+            assert(expected_code_path);\n+            break;\n+        }\n+        case 1: {\n+            (void)coins_view_cache.Flush();\n+            break;\n+        }\n+        case 2: {\n+            coins_view_cache.SetBestBlock(ConsumeUInt256(fuzzed_data_provider));\n+            break;\n+        }\n+        case 3: {\n+            Coin coin;\n+            (void)coins_view_cache.SpendCoin(random_out_point, fuzzed_data_provider.ConsumeBool() ? &coin : nullptr);\n+            break;\n+        }\n+        case 4: {\n+            coins_view_cache.Uncache(random_out_point);\n+            break;\n+        }\n+        case 5: {\n+            if (fuzzed_data_provider.ConsumeBool()) {\n+                backend_coins_view = CCoinsView{};\n+            }\n+            coins_view_cache.SetBackend(backend_coins_view);\n+            break;\n+        }\n+        case 6: {\n+            const std::optional<COutPoint> opt_out_point = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\n+            if (!opt_out_point) {\n+                break;\n+            }\n+            random_out_point = *opt_out_point;\n+            break;\n+        }\n+        case 7: {\n+            const std::optional<Coin> opt_coin = ConsumeDeserializable<Coin>(fuzzed_data_provider);\n+            if (!opt_coin) {\n+                break;\n+            }\n+            random_coin = *opt_coin;\n+            break;\n+        }\n+        case 8: {\n+            const std::optional<CMutableTransaction> opt_mutable_transaction = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n+            if (!opt_mutable_transaction) {\n+                break;\n+            }\n+            random_mutable_transaction = *opt_mutable_transaction;\n+            break;\n+        }\n+        case 9: {\n+            CCoinsMap coins_map;\n+            while (fuzzed_data_provider.ConsumeBool()) {\n+                CCoinsCacheEntry coins_cache_entry;\n+                coins_cache_entry.flags = fuzzed_data_provider.ConsumeIntegral<unsigned char>();\n+                if (fuzzed_data_provider.ConsumeBool()) {\n+                    coins_cache_entry.coin = random_coin;\n+                } else {\n+                    const std::optional<Coin> opt_coin = ConsumeDeserializable<Coin>(fuzzed_data_provider);\n+                    if (!opt_coin) {\n+                        break;\n+                    }\n+                    coins_cache_entry.coin = *opt_coin;\n+                }\n+                if (fuzzed_data_provider.ConsumeBool()) {\n+                    const std::optional<COutPoint> opt_out_point = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\n+                    if (!opt_out_point) {\n+                        break;\n+                    }\n+                    random_out_point = *opt_out_point;\n+                }\n+                coins_map.emplace(random_out_point, std::move(coins_cache_entry));\n+            }\n+            bool expected_code_path = false;\n+            try {\n+                coins_view_cache.BatchWrite(coins_map, fuzzed_data_provider.ConsumeBool() ? ConsumeUInt256(fuzzed_data_provider) : coins_view_cache.GetBestBlock());\n+                expected_code_path = true;\n+            } catch (const std::logic_error& e) {\n+                if (e.what() == std::string{\"FRESH flag misapplied to coin that exists in parent cache\"}) {\n+                    expected_code_path = true;\n+                }\n+            }\n+            assert(expected_code_path);\n+            break;\n+        }\n+        }\n+    }\n+\n+    {\n+        const Coin& coin_using_access_coin = coins_view_cache.AccessCoin(random_out_point);\n+        const bool exists_using_access_coin = !(coin_using_access_coin == EMPTY_COIN);\n+        const bool exists_using_have_coin = coins_view_cache.HaveCoin(random_out_point);\n+        const bool exists_using_have_coin_in_cache = coins_view_cache.HaveCoinInCache(random_out_point);\n+        Coin coin_using_get_coin;\n+        const bool exists_using_get_coin = coins_view_cache.GetCoin(random_out_point, coin_using_get_coin);\n+        if (exists_using_get_coin) {\n+            assert(coin_using_get_coin == coin_using_access_coin);\n+        }\n+        assert((exists_using_access_coin && exists_using_have_coin_in_cache && exists_using_have_coin && exists_using_get_coin) ||\n+               (!exists_using_access_coin && !exists_using_have_coin_in_cache && !exists_using_have_coin && !exists_using_get_coin));\n+        const bool exists_using_have_coin_in_backend = backend_coins_view.HaveCoin(random_out_point);\n+        if (exists_using_have_coin_in_backend) {\n+            assert(exists_using_have_coin);\n+        }\n+        Coin coin_using_backend_get_coin;\n+        if (backend_coins_view.GetCoin(random_out_point, coin_using_backend_get_coin)) {\n+            assert(exists_using_have_coin_in_backend);\n+            assert(coin_using_get_coin == coin_using_backend_get_coin);\n+        } else {\n+            assert(!exists_using_have_coin_in_backend);\n+        }\n+    }\n+\n+    {\n+        bool expected_code_path = false;\n+        try {\n+            (void)coins_view_cache.Cursor();\n+        } catch (const std::logic_error&) {\n+            expected_code_path = true;\n+        }\n+        assert(expected_code_path);\n+        (void)coins_view_cache.DynamicMemoryUsage();\n+        (void)coins_view_cache.EstimateSize();\n+        (void)coins_view_cache.GetBestBlock();\n+        (void)coins_view_cache.GetCacheSize();\n+        (void)coins_view_cache.GetHeadBlocks();\n+        (void)coins_view_cache.HaveInputs(CTransaction{random_mutable_transaction});\n+    }\n+\n+    {\n+        const CCoinsViewCursor* coins_view_cursor = backend_coins_view.Cursor();\n+        assert(coins_view_cursor == nullptr);\n+        (void)backend_coins_view.EstimateSize();\n+        (void)backend_coins_view.GetBestBlock();\n+        (void)backend_coins_view.GetHeadBlocks();\n+    }\n+\n+    if (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 6)) {\n+        case 0: {\n+            const CTransaction transaction{random_mutable_transaction};\n+            bool is_spent = false;\n+            for (const CTxOut& tx_out : transaction.vout) {\n+                if (Coin{tx_out, 0, transaction.IsCoinBase()}.IsSpent()) {\n+                    is_spent = true;\n+                }\n+            }\n+            if (is_spent) {\n+                // Avoid:\n+                // coins.cpp:69: void CCoinsViewCache::AddCoin(const COutPoint &, Coin &&, bool): Assertion `!coin.IsSpent()' failed.\n+                break;\n+            }\n+            bool expected_code_path = false;\n+            try {\n+                AddCoins(coins_view_cache, transaction, fuzzed_data_provider.ConsumeIntegral<int>(), fuzzed_data_provider.ConsumeBool());\n+                expected_code_path = true;\n+            } catch (const std::logic_error& e) {\n+                if (e.what() == std::string{\"Attempted to overwrite an unspent coin (when possible_overwrite is false)\"}) {\n+                    expected_code_path = true;\n+                }\n+            }\n+            assert(expected_code_path);\n+            break;\n+        }\n+        case 1: {\n+            (void)AreInputsStandard(CTransaction{random_mutable_transaction}, coins_view_cache);\n+            break;\n+        }\n+        case 2: {\n+            TxValidationState state;\n+            CAmount tx_fee;\n+            const CTransaction transaction{random_mutable_transaction};\n+            if (ContainsSpentInput(transaction, coins_view_cache)) {\n+                // Avoid:\n+                // consensus/tx_verify.cpp:171: bool Consensus::CheckTxInputs(const CTransaction &, TxValidationState &, const CCoinsViewCache &, int, CAmount &): Assertion `!coin.IsSpent()' failed.\n+                break;\n+            }\n+            try {\n+                (void)Consensus::CheckTxInputs(transaction, state, coins_view_cache, fuzzed_data_provider.ConsumeIntegralInRange<int>(0, std::numeric_limits<int>::max()), tx_fee);",
      "path": "src/test/fuzz/coins_view.cpp",
      "position": null,
      "original_position": 247,
      "commit_id": "f9b22e3bdb54acb2f830b3ebbad47ff17dfb5781",
      "original_commit_id": "ab7af9323e55bd035d2680a84e986675c7757ee3",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "can `assert(MoneyRange(tx_fee_out));` when check was successful?",
      "created_at": "2020-05-24T15:32:01Z",
      "updated_at": "2020-05-25T10:05:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18867#discussion_r429648269",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429648269"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18867"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 247,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430331596",
      "pull_request_review_id": 418192323,
      "id": 430331596,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMzMTU5Ng==",
      "diff_hunk": "@@ -0,0 +1,294 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <amount.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <coins.h>\n+#include <consensus/tx_verify.h>\n+#include <consensus/validation.h>\n+#include <key.h>\n+#include <node/coinstats.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <pubkey.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <validation.h>\n+\n+#include <cstdint>\n+#include <limits>\n+#include <optional>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+const Coin EMPTY_COIN{};\n+\n+bool operator==(const Coin& a, const Coin& b)\n+{\n+    if (a.IsSpent() && b.IsSpent()) return true;\n+    return a.fCoinBase == b.fCoinBase && a.nHeight == b.nHeight && a.out == b.out;\n+}\n+} // namespace\n+\n+void initialize()\n+{\n+    static const ECCVerifyHandle ecc_verify_handle;\n+    ECC_Start();\n+    SelectParams(CBaseChainParams::REGTEST);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    CCoinsView backend_coins_view;\n+    CCoinsViewCache coins_view_cache{&backend_coins_view};\n+    COutPoint random_out_point;\n+    Coin random_coin;\n+    CMutableTransaction random_mutable_transaction;\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 9)) {\n+        case 0: {\n+            if (random_coin.IsSpent()) {\n+                break;\n+            }\n+            Coin coin = random_coin;\n+            bool expected_code_path = false;",
      "path": "src/test/fuzz/coins_view.cpp",
      "position": 59,
      "original_position": 59,
      "commit_id": "f9b22e3bdb54acb2f830b3ebbad47ff17dfb5781",
      "original_commit_id": "f9b22e3bdb54acb2f830b3ebbad47ff17dfb5781",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "why is this needed?",
      "created_at": "2020-05-26T11:05:48Z",
      "updated_at": "2020-05-26T11:05:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18867#discussion_r430331596",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430331596"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18867"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 59,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430332810",
      "pull_request_review_id": 418193838,
      "id": 430332810,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMzMjgxMA==",
      "diff_hunk": "@@ -0,0 +1,294 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <amount.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <coins.h>\n+#include <consensus/tx_verify.h>\n+#include <consensus/validation.h>\n+#include <key.h>\n+#include <node/coinstats.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <pubkey.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <validation.h>\n+\n+#include <cstdint>\n+#include <limits>\n+#include <optional>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+const Coin EMPTY_COIN{};\n+\n+bool operator==(const Coin& a, const Coin& b)\n+{\n+    if (a.IsSpent() && b.IsSpent()) return true;\n+    return a.fCoinBase == b.fCoinBase && a.nHeight == b.nHeight && a.out == b.out;\n+}\n+} // namespace\n+\n+void initialize()\n+{\n+    static const ECCVerifyHandle ecc_verify_handle;\n+    ECC_Start();\n+    SelectParams(CBaseChainParams::REGTEST);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    CCoinsView backend_coins_view;\n+    CCoinsViewCache coins_view_cache{&backend_coins_view};\n+    COutPoint random_out_point;\n+    Coin random_coin;\n+    CMutableTransaction random_mutable_transaction;\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 9)) {\n+        case 0: {\n+            if (random_coin.IsSpent()) {\n+                break;\n+            }\n+            Coin coin = random_coin;\n+            bool expected_code_path = false;",
      "path": "src/test/fuzz/coins_view.cpp",
      "position": 59,
      "original_position": 59,
      "commit_id": "f9b22e3bdb54acb2f830b3ebbad47ff17dfb5781",
      "original_commit_id": "f9b22e3bdb54acb2f830b3ebbad47ff17dfb5781",
      "in_reply_to_id": 430331596,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Are you saying that the only exception that is allowed to be thrown is the one that is caught by the error string? Fair enough.",
      "created_at": "2020-05-26T11:08:11Z",
      "updated_at": "2020-05-26T11:08:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18867#discussion_r430332810",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430332810"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18867"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 59,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430338853",
      "pull_request_review_id": 418201764,
      "id": 430338853,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMzODg1Mw==",
      "diff_hunk": "@@ -0,0 +1,294 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <amount.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <coins.h>\n+#include <consensus/tx_verify.h>\n+#include <consensus/validation.h>\n+#include <key.h>\n+#include <node/coinstats.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <pubkey.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <validation.h>\n+\n+#include <cstdint>\n+#include <limits>\n+#include <optional>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+const Coin EMPTY_COIN{};\n+\n+bool operator==(const Coin& a, const Coin& b)\n+{\n+    if (a.IsSpent() && b.IsSpent()) return true;\n+    return a.fCoinBase == b.fCoinBase && a.nHeight == b.nHeight && a.out == b.out;\n+}\n+} // namespace\n+\n+void initialize()\n+{\n+    static const ECCVerifyHandle ecc_verify_handle;\n+    ECC_Start();\n+    SelectParams(CBaseChainParams::REGTEST);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    CCoinsView backend_coins_view;\n+    CCoinsViewCache coins_view_cache{&backend_coins_view};\n+    COutPoint random_out_point;\n+    Coin random_coin;\n+    CMutableTransaction random_mutable_transaction;\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 9)) {\n+        case 0: {\n+            if (random_coin.IsSpent()) {\n+                break;\n+            }\n+            Coin coin = random_coin;\n+            bool expected_code_path = false;",
      "path": "src/test/fuzz/coins_view.cpp",
      "position": 59,
      "original_position": 59,
      "commit_id": "f9b22e3bdb54acb2f830b3ebbad47ff17dfb5781",
      "original_commit_id": "f9b22e3bdb54acb2f830b3ebbad47ff17dfb5781",
      "in_reply_to_id": 430331596,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Exactly :)",
      "created_at": "2020-05-26T11:20:38Z",
      "updated_at": "2020-05-26T11:20:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18867#discussion_r430338853",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430338853"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18867"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 59,
      "original_line": 59,
      "side": "RIGHT"
    }
  ]
}