{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/3422",
    "id": 10839313,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MTA4MzkzMTM=",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/3422",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/3422.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/3422.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/3422",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/3422/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/3422/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/3422/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/daa6b20e29f3926a16d4da6962ff00b74623fc6b",
    "number": 3422,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "Unit tests for uint256.h",
    "user": {
      "login": "tholenst",
      "id": 4568264,
      "node_id": "MDQ6VXNlcjQ1NjgyNjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4568264?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tholenst",
      "html_url": "https://github.com/tholenst",
      "followers_url": "https://api.github.com/users/tholenst/followers",
      "following_url": "https://api.github.com/users/tholenst/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/tholenst/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/tholenst/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/tholenst/subscriptions",
      "organizations_url": "https://api.github.com/users/tholenst/orgs",
      "repos_url": "https://api.github.com/users/tholenst/repos",
      "events_url": "https://api.github.com/users/tholenst/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/tholenst/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Unit tests for uint256.h. The file uint160_tests.cpp is no longer needed. The ad-hoc tests which were in uint256.h are also no longer needed. The new tests achieve 100% coverage.\n",
    "labels": [],
    "active_lock_reason": "resolved",
    "created_at": "2013-12-15T19:25:20Z",
    "updated_at": "2021-09-08T10:28:30Z",
    "closed_at": "2014-01-06T09:29:36Z",
    "mergeable_state": "unknown",
    "merged_at": "2014-01-06T09:29:36Z",
    "merge_commit_sha": "df5b2c883e140ecfca3cad6c3df1a8d972007e53",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "tholenst:uinttests",
      "ref": "uinttests",
      "sha": "daa6b20e29f3926a16d4da6962ff00b74623fc6b",
      "user": {
        "login": "tholenst",
        "id": 4568264,
        "node_id": "MDQ6VXNlcjQ1NjgyNjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4568264?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tholenst",
        "html_url": "https://github.com/tholenst",
        "followers_url": "https://api.github.com/users/tholenst/followers",
        "following_url": "https://api.github.com/users/tholenst/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tholenst/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tholenst/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tholenst/subscriptions",
        "organizations_url": "https://api.github.com/users/tholenst/orgs",
        "repos_url": "https://api.github.com/users/tholenst/repos",
        "events_url": "https://api.github.com/users/tholenst/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tholenst/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 10387036,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMDM4NzAzNg==",
        "name": "bitcoin",
        "full_name": "tholenst/bitcoin",
        "owner": {
          "login": "tholenst",
          "id": 4568264,
          "node_id": "MDQ6VXNlcjQ1NjgyNjQ=",
          "avatar_url": "https://avatars.githubusercontent.com/u/4568264?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/tholenst",
          "html_url": "https://github.com/tholenst",
          "followers_url": "https://api.github.com/users/tholenst/followers",
          "following_url": "https://api.github.com/users/tholenst/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/tholenst/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/tholenst/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/tholenst/subscriptions",
          "organizations_url": "https://api.github.com/users/tholenst/orgs",
          "repos_url": "https://api.github.com/users/tholenst/repos",
          "events_url": "https://api.github.com/users/tholenst/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/tholenst/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/tholenst/bitcoin",
        "description": "Bitcoin integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/tholenst/bitcoin",
        "archive_url": "https://api.github.com/repos/tholenst/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/tholenst/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/tholenst/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/tholenst/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/tholenst/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/tholenst/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/tholenst/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/tholenst/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/tholenst/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/tholenst/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/tholenst/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/tholenst/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/tholenst/bitcoin/events",
        "forks_url": "https://api.github.com/repos/tholenst/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/tholenst/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/tholenst/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/tholenst/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/tholenst/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/tholenst/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/tholenst/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/tholenst/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/tholenst/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/tholenst/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/tholenst/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/tholenst/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/tholenst/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/tholenst/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/tholenst/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/tholenst/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:tholenst/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/tholenst/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/tholenst/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/tholenst/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/tholenst/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/tholenst/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/tholenst/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/tholenst/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/tholenst/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/tholenst/bitcoin/hooks",
        "svn_url": "https://github.com/tholenst/bitcoin",
        "homepage": "http://www.bitcoin.org",
        "language": "TypeScript",
        "forks_count": 0,
        "stargazers_count": 0,
        "watchers_count": 0,
        "size": 34997,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2014-08-29T12:00:00Z",
        "created_at": "2013-05-30T16:24:05Z",
        "updated_at": "2018-08-21T18:58:38Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "6e7792003b5c520fcc81d223f07471d690594081",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34323,
        "stargazers_count": 69817,
        "watchers_count": 69817,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T19:05:23Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-06T18:57:56Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/3422"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 628,
    "deletions": 193,
    "changed_files": 5,
    "commits": 2,
    "review_comments": 8,
    "comments": 7
  },
  "events": [
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMTA4Mzc1NjU6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMTA4Mzc1Njg6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMTA4Mzc1NzI6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "commented",
      "id": 30620087,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMwNjIwMDg3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/30620087",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2013-12-15T20:57:29Z",
      "updated_at": "2013-12-15T20:57:29Z",
      "author_association": "MEMBER",
      "body": "Very nice, just a few nits. There are several indentation errors though (tabs/spaces? please only use 4 spaces for indent).\n",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/3422#issuecomment-30620087",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/3422"
    },
    {
      "event": "closed",
      "id": 81697453,
      "node_id": "MDExOkNsb3NlZEV2ZW50ODE2OTc0NTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/81697453",
      "actor": {
        "login": "tholenst",
        "id": 4568264,
        "node_id": "MDQ6VXNlcjQ1NjgyNjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4568264?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tholenst",
        "html_url": "https://github.com/tholenst",
        "followers_url": "https://api.github.com/users/tholenst/followers",
        "following_url": "https://api.github.com/users/tholenst/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tholenst/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tholenst/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tholenst/subscriptions",
        "organizations_url": "https://api.github.com/users/tholenst/orgs",
        "repos_url": "https://api.github.com/users/tholenst/repos",
        "events_url": "https://api.github.com/users/tholenst/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tholenst/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2013-12-15T21:14:14Z"
    },
    {
      "event": "commented",
      "id": 30620563,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMwNjIwNTYz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/30620563",
      "actor": {
        "login": "tholenst",
        "id": 4568264,
        "node_id": "MDQ6VXNlcjQ1NjgyNjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4568264?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tholenst",
        "html_url": "https://github.com/tholenst",
        "followers_url": "https://api.github.com/users/tholenst/followers",
        "following_url": "https://api.github.com/users/tholenst/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tholenst/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tholenst/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tholenst/subscriptions",
        "organizations_url": "https://api.github.com/users/tholenst/orgs",
        "repos_url": "https://api.github.com/users/tholenst/repos",
        "events_url": "https://api.github.com/users/tholenst/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tholenst/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2013-12-15T21:14:42Z",
      "updated_at": "2013-12-15T21:14:42Z",
      "author_association": "CONTRIBUTOR",
      "body": "Closed while minor points are being fixed.\n",
      "user": {
        "login": "tholenst",
        "id": 4568264,
        "node_id": "MDQ6VXNlcjQ1NjgyNjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4568264?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tholenst",
        "html_url": "https://github.com/tholenst",
        "followers_url": "https://api.github.com/users/tholenst/followers",
        "following_url": "https://api.github.com/users/tholenst/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tholenst/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tholenst/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tholenst/subscriptions",
        "organizations_url": "https://api.github.com/users/tholenst/orgs",
        "repos_url": "https://api.github.com/users/tholenst/repos",
        "events_url": "https://api.github.com/users/tholenst/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tholenst/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/3422#issuecomment-30620563",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/3422"
    },
    {
      "event": "commented",
      "id": 30620708,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMwNjIwNzA4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/30620708",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2013-12-15T21:20:59Z",
      "updated_at": "2013-12-15T21:20:59Z",
      "author_association": "MEMBER",
      "body": "No need to close for minor fixes. You can just re-push to the same branch to update the pull request.\n",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/3422#issuecomment-30620708",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/3422"
    },
    {
      "event": "commented",
      "id": 30621658,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMwNjIxNjU4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/30621658",
      "actor": {
        "login": "tholenst",
        "id": 4568264,
        "node_id": "MDQ6VXNlcjQ1NjgyNjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4568264?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tholenst",
        "html_url": "https://github.com/tholenst",
        "followers_url": "https://api.github.com/users/tholenst/followers",
        "following_url": "https://api.github.com/users/tholenst/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tholenst/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tholenst/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tholenst/subscriptions",
        "organizations_url": "https://api.github.com/users/tholenst/orgs",
        "repos_url": "https://api.github.com/users/tholenst/repos",
        "events_url": "https://api.github.com/users/tholenst/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tholenst/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2013-12-15T21:37:03Z",
      "updated_at": "2013-12-15T21:37:03Z",
      "author_association": "CONTRIBUTOR",
      "body": "Yeah, problem is I won't be able to finish this until Wednesday, no need to clutter things until then.\n",
      "user": {
        "login": "tholenst",
        "id": 4568264,
        "node_id": "MDQ6VXNlcjQ1NjgyNjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4568264?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tholenst",
        "html_url": "https://github.com/tholenst",
        "followers_url": "https://api.github.com/users/tholenst/followers",
        "following_url": "https://api.github.com/users/tholenst/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tholenst/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tholenst/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tholenst/subscriptions",
        "organizations_url": "https://api.github.com/users/tholenst/orgs",
        "repos_url": "https://api.github.com/users/tholenst/repos",
        "events_url": "https://api.github.com/users/tholenst/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tholenst/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/3422#issuecomment-30621658",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/3422"
    },
    {
      "event": "reopened",
      "id": 82268440,
      "node_id": "MDEzOlJlb3BlbmVkRXZlbnQ4MjI2ODQ0MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/82268440",
      "actor": {
        "login": "tholenst",
        "id": 4568264,
        "node_id": "MDQ6VXNlcjQ1NjgyNjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4568264?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tholenst",
        "html_url": "https://github.com/tholenst",
        "followers_url": "https://api.github.com/users/tholenst/followers",
        "following_url": "https://api.github.com/users/tholenst/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tholenst/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tholenst/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tholenst/subscriptions",
        "organizations_url": "https://api.github.com/users/tholenst/orgs",
        "repos_url": "https://api.github.com/users/tholenst/repos",
        "events_url": "https://api.github.com/users/tholenst/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tholenst/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2013-12-18T08:41:02Z"
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMTA4Mzc1NzU6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "commented",
      "id": 30994427,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTk0NDI3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/30994427",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2013-12-20T08:03:09Z",
      "updated_at": "2013-12-20T08:03:09Z",
      "author_association": "MEMBER",
      "body": "Changes look good.\n\nBut before this can be merged, please reorganize the commits a bit.\n\nYou don't need to squash everything into one commit. For example d1490c6 and d1490c6 make sense as seperate ones, but do roll the dummy commit and indentation fixes into your original code changes.\n",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/3422#issuecomment-30994427",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/3422"
    },
    {
      "event": "commented",
      "id": 31066009,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMxMDY2MDA5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/31066009",
      "actor": {
        "login": "tholenst",
        "id": 4568264,
        "node_id": "MDQ6VXNlcjQ1NjgyNjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4568264?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tholenst",
        "html_url": "https://github.com/tholenst",
        "followers_url": "https://api.github.com/users/tholenst/followers",
        "following_url": "https://api.github.com/users/tholenst/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tholenst/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tholenst/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tholenst/subscriptions",
        "organizations_url": "https://api.github.com/users/tholenst/orgs",
        "repos_url": "https://api.github.com/users/tholenst/repos",
        "events_url": "https://api.github.com/users/tholenst/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tholenst/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2013-12-21T16:00:35Z",
      "updated_at": "2013-12-21T16:00:52Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thank you, Wladimir.\n\nI'm new to github and git, so I don't know yet how to do useful commit structures. I improved it. Let me know if you still see room for improvement.\n",
      "user": {
        "login": "tholenst",
        "id": 4568264,
        "node_id": "MDQ6VXNlcjQ1NjgyNjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4568264?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tholenst",
        "html_url": "https://github.com/tholenst",
        "followers_url": "https://api.github.com/users/tholenst/followers",
        "following_url": "https://api.github.com/users/tholenst/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tholenst/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tholenst/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tholenst/subscriptions",
        "organizations_url": "https://api.github.com/users/tholenst/orgs",
        "repos_url": "https://api.github.com/users/tholenst/repos",
        "events_url": "https://api.github.com/users/tholenst/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tholenst/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/3422#issuecomment-31066009",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/3422"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzplODVlMTliZTA2YzU5NTI5YmZkYTEwMDcyOWU4ZWYzMTQ4MzQ5OTUy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e85e19be06c59529bfda100729e8ef3148349952",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/e85e19be06c59529bfda100729e8ef3148349952",
      "tree": {
        "sha": "c1be2bb3178a5e9a9eadd61cded2067094f83271",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c1be2bb3178a5e9a9eadd61cded2067094f83271"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6e7792003b5c520fcc81d223f07471d690594081",
          "sha": "6e7792003b5c520fcc81d223f07471d690594081",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6e7792003b5c520fcc81d223f07471d690594081"
        }
      ],
      "message": "Changed Get64(.) to GetLow64()\n\nThe function Get64(.) has a bug in case the width is not divisible by 64.\nSince it is only ever used as Get64(0) this simply changes it to this\nspecial case. Additionally, an assert is added, and a cast to prevent\na compiler error.",
      "committer": {
        "name": "Thomas Holenstein",
        "email": "thomas.holenstein@gmail.com",
        "date": "2013-12-25T10:07:21Z"
      },
      "author": {
        "name": "Thomas Holenstein",
        "email": "thomas.holenstein@gmail.com",
        "date": "2013-12-21T15:50:49Z"
      },
      "sha": "e85e19be06c59529bfda100729e8ef3148349952"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYWE2YjIwZTI5ZjM5MjZhMTZkNGRhNjk2MmZmMDBiNzQ2MjNmYzZi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/daa6b20e29f3926a16d4da6962ff00b74623fc6b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/daa6b20e29f3926a16d4da6962ff00b74623fc6b",
      "tree": {
        "sha": "e2a653501b515319d63b1c4ddddd61498204d17c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e2a653501b515319d63b1c4ddddd61498204d17c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e85e19be06c59529bfda100729e8ef3148349952",
          "sha": "e85e19be06c59529bfda100729e8ef3148349952",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/e85e19be06c59529bfda100729e8ef3148349952"
        }
      ],
      "message": "Unittests for uint256.h\n\nUnit tests for uint256.h. The file uint160_tests.cpp is no longer\nneeded. The ad-hoc tests which were in uint256.h are also no longer\nneeded. The new tests achieve 100% coverage.",
      "committer": {
        "name": "Thomas Holenstein",
        "email": "thomas.holenstein@gmail.com",
        "date": "2013-12-25T10:07:21Z"
      },
      "author": {
        "name": "Thomas Holenstein",
        "email": "thomas.holenstein@gmail.com",
        "date": "2013-12-21T15:54:43Z"
      },
      "sha": "daa6b20e29f3926a16d4da6962ff00b74623fc6b"
    },
    {
      "event": "commented",
      "id": 31196831,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMxMTk2ODMx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/31196831",
      "actor": {
        "login": "BitcoinPullTester",
        "id": 2110907,
        "node_id": "MDQ6VXNlcjIxMTA5MDc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2110907?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BitcoinPullTester",
        "html_url": "https://github.com/BitcoinPullTester",
        "followers_url": "https://api.github.com/users/BitcoinPullTester/followers",
        "following_url": "https://api.github.com/users/BitcoinPullTester/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BitcoinPullTester/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BitcoinPullTester/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BitcoinPullTester/subscriptions",
        "organizations_url": "https://api.github.com/users/BitcoinPullTester/orgs",
        "repos_url": "https://api.github.com/users/BitcoinPullTester/repos",
        "events_url": "https://api.github.com/users/BitcoinPullTester/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BitcoinPullTester/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2013-12-25T10:40:34Z",
      "updated_at": "2013-12-25T10:40:34Z",
      "author_association": "NONE",
      "body": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/daa6b20e29f3926a16d4da6962ff00b74623fc6b for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.\n",
      "user": {
        "login": "BitcoinPullTester",
        "id": 2110907,
        "node_id": "MDQ6VXNlcjIxMTA5MDc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2110907?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BitcoinPullTester",
        "html_url": "https://github.com/BitcoinPullTester",
        "followers_url": "https://api.github.com/users/BitcoinPullTester/followers",
        "following_url": "https://api.github.com/users/BitcoinPullTester/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/BitcoinPullTester/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/BitcoinPullTester/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/BitcoinPullTester/subscriptions",
        "organizations_url": "https://api.github.com/users/BitcoinPullTester/orgs",
        "repos_url": "https://api.github.com/users/BitcoinPullTester/repos",
        "events_url": "https://api.github.com/users/BitcoinPullTester/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/BitcoinPullTester/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/3422#issuecomment-31196831",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/3422"
    },
    {
      "event": "referenced",
      "id": 84367975,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDg0MzY3OTc1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/84367975",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "ab086e0bd39b6d010c040c9bf4d781400fc7b9f8",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab086e0bd39b6d010c040c9bf4d781400fc7b9f8",
      "created_at": "2014-01-06T09:29:34Z"
    },
    {
      "event": "merged",
      "id": 84367988,
      "node_id": "MDExOk1lcmdlZEV2ZW50ODQzNjc5ODg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/84367988",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "daa6b20e29f3926a16d4da6962ff00b74623fc6b",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/daa6b20e29f3926a16d4da6962ff00b74623fc6b",
      "created_at": "2014-01-06T09:29:36Z"
    },
    {
      "event": "closed",
      "id": 84367989,
      "node_id": "MDExOkNsb3NlZEV2ZW50ODQzNjc5ODk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/84367989",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2014-01-06T09:29:36Z"
    },
    {
      "event": "locked",
      "id": 5271379836,
      "node_id": "LOE_lADOABII584Bcw6HzwAAAAE6Mt98",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5271379836",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-08T10:28:30Z",
      "lock_reason": "resolved"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/8356196",
      "pull_request_review_id": null,
      "id": 8356196,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgzNTYxOTY=",
      "diff_hunk": "@@ -1,29 +1,642 @@\n+#include <boost/test/unit_test.hpp>\n+#include <stdint.h>\n+#include <sstream>\n+#include <iomanip>\n+#include <limits>\n+#include <cmath>\n #include \"uint256.h\"\n #include <string>\n+#include \"version.h\"\n \n-#include <stdint.h>\n+BOOST_AUTO_TEST_SUITE(uint256_tests)\n \n-#include <boost/test/unit_test.hpp>\n+const unsigned char R1Array[] = \n+    \"\\x9c\\x52\\x4a\\xdb\\xcf\\x56\\x11\\x12\\x2b\\x29\\x12\\x5e\\x5d\\x35\\xd2\\xd2\"\n+    \"\\x22\\x81\\xaa\\xb5\\x33\\xf0\\x08\\x32\\xd5\\x56\\xb1\\xf9\\xea\\xe5\\x1d\\x7d\";\n+const uint256 R1L = uint256(std::vector<unsigned char>(&R1Array[0],&R1Array[0]+32));",
      "path": "src/test/uint256_tests.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "daa6b20e29f3926a16d4da6962ff00b74623fc6b",
      "original_commit_id": "b03ca188f3d433e209ccd8b62c155a5feb5de94a",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "&R1Array[32] instead?\n",
      "created_at": "2013-12-15T20:52:59Z",
      "updated_at": "2013-12-25T10:16:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/3422#discussion_r8356196",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/8356196"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/3422"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/8356199",
      "pull_request_review_id": null,
      "id": 8356199,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgzNTYxOTk=",
      "diff_hunk": "@@ -1,29 +1,642 @@\n+#include <boost/test/unit_test.hpp>\n+#include <stdint.h>\n+#include <sstream>\n+#include <iomanip>\n+#include <limits>\n+#include <cmath>\n #include \"uint256.h\"\n #include <string>\n+#include \"version.h\"\n \n-#include <stdint.h>\n+BOOST_AUTO_TEST_SUITE(uint256_tests)\n \n-#include <boost/test/unit_test.hpp>\n+const unsigned char R1Array[] = \n+    \"\\x9c\\x52\\x4a\\xdb\\xcf\\x56\\x11\\x12\\x2b\\x29\\x12\\x5e\\x5d\\x35\\xd2\\xd2\"\n+    \"\\x22\\x81\\xaa\\xb5\\x33\\xf0\\x08\\x32\\xd5\\x56\\xb1\\xf9\\xea\\xe5\\x1d\\x7d\";\n+const uint256 R1L = uint256(std::vector<unsigned char>(&R1Array[0],&R1Array[0]+32));\n+const uint160 R1S = uint160(std::vector<unsigned char>(&R1Array[0],&R1Array[0]+20));\n \n-BOOST_AUTO_TEST_SUITE(uint256_tests)\n+const unsigned char R2Array[] = \n+    \"\\x70\\x32\\x1d\\x7c\\x47\\xa5\\x6b\\x40\\x26\\x7e\\x0a\\xc3\\xa6\\x9c\\xb6\\xbf\"\n+    \"\\x13\\x30\\x47\\xa3\\x19\\x2d\\xda\\x71\\x49\\x13\\x72\\xf0\\xb4\\xca\\x81\\xd7\";\n+const uint256 R2L = uint256(std::vector<unsigned char>(&R2Array[0],&R2Array[0]+32));\n+const uint160 R2S = uint160(std::vector<unsigned char>(&R2Array[0],&R2Array[0]+20));\n+\n+const unsigned char ZeroArray[] = \n+    \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n+    \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\";\n+const uint256 ZeroL = uint256(std::vector<unsigned char>(&ZeroArray[0],&ZeroArray[0]+32));\n+const uint160 ZeroS = uint160(std::vector<unsigned char>(&ZeroArray[0],&ZeroArray[0]+20));\n+\t\t\t     \n+const unsigned char OneArray[] = \n+    \"\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n+    \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\";\n+const uint256 OneL = uint256(std::vector<unsigned char>(&OneArray[0],&OneArray[0]+32));\n+const uint160 OneS = uint160(std::vector<unsigned char>(&OneArray[0],&OneArray[0]+20));\n+\n+const unsigned char MaxArray[] = \n+    \"\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\"\n+    \"\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\";\n+const uint256 MaxL = uint256(std::vector<unsigned char>(&MaxArray[0],&MaxArray[0]+32));\n+const uint160 MaxS = uint160(std::vector<unsigned char>(&MaxArray[0],&MaxArray[0]+20));\n+\n+const uint256 HalfL = (OneL << 255);\n+const uint160 HalfS = (OneS << 159);\n+std::string ArrayToString(const unsigned char A[], unsigned int width)\n+{\n+    std::stringstream Stream;\n+    Stream << std::hex;\n+    for (unsigned int i = 0; i < width; ++i) \n+    {\n+\tStream<<std::setw(2)<<std::setfill('0')<<(unsigned int)A[width-i-1];\n+    }       \n+    return Stream.str();\n+}\n+\n+void LowestUint64OfArray(const unsigned char A[],uint64_t& R1a)\n+{\n+    R1a = 0;\n+    for (unsigned int i = 0; i < 8; ++i) \n+    {\n+\tR1a += (((uint64_t)A[i]) << 8*i);",
      "path": "src/test/uint256_tests.cpp",
      "position": null,
      "original_position": 64,
      "commit_id": "daa6b20e29f3926a16d4da6962ff00b74623fc6b",
      "original_commit_id": "b03ca188f3d433e209ccd8b62c155a5feb5de94a",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Indentation.\n",
      "created_at": "2013-12-15T20:53:45Z",
      "updated_at": "2013-12-25T10:16:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/3422#discussion_r8356199",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/8356199"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/3422"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/8356212",
      "pull_request_review_id": null,
      "id": 8356212,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgzNTYyMTI=",
      "diff_hunk": "@@ -1,29 +1,642 @@\n+#include <boost/test/unit_test.hpp>\n+#include <stdint.h>\n+#include <sstream>\n+#include <iomanip>\n+#include <limits>\n+#include <cmath>\n #include \"uint256.h\"\n #include <string>\n+#include \"version.h\"\n \n-#include <stdint.h>\n+BOOST_AUTO_TEST_SUITE(uint256_tests)\n \n-#include <boost/test/unit_test.hpp>\n+const unsigned char R1Array[] = \n+    \"\\x9c\\x52\\x4a\\xdb\\xcf\\x56\\x11\\x12\\x2b\\x29\\x12\\x5e\\x5d\\x35\\xd2\\xd2\"\n+    \"\\x22\\x81\\xaa\\xb5\\x33\\xf0\\x08\\x32\\xd5\\x56\\xb1\\xf9\\xea\\xe5\\x1d\\x7d\";\n+const uint256 R1L = uint256(std::vector<unsigned char>(&R1Array[0],&R1Array[0]+32));\n+const uint160 R1S = uint160(std::vector<unsigned char>(&R1Array[0],&R1Array[0]+20));\n \n-BOOST_AUTO_TEST_SUITE(uint256_tests)\n+const unsigned char R2Array[] = \n+    \"\\x70\\x32\\x1d\\x7c\\x47\\xa5\\x6b\\x40\\x26\\x7e\\x0a\\xc3\\xa6\\x9c\\xb6\\xbf\"\n+    \"\\x13\\x30\\x47\\xa3\\x19\\x2d\\xda\\x71\\x49\\x13\\x72\\xf0\\xb4\\xca\\x81\\xd7\";\n+const uint256 R2L = uint256(std::vector<unsigned char>(&R2Array[0],&R2Array[0]+32));\n+const uint160 R2S = uint160(std::vector<unsigned char>(&R2Array[0],&R2Array[0]+20));\n+\n+const unsigned char ZeroArray[] = \n+    \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n+    \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\";\n+const uint256 ZeroL = uint256(std::vector<unsigned char>(&ZeroArray[0],&ZeroArray[0]+32));\n+const uint160 ZeroS = uint160(std::vector<unsigned char>(&ZeroArray[0],&ZeroArray[0]+20));\n+\t\t\t     \n+const unsigned char OneArray[] = \n+    \"\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n+    \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\";\n+const uint256 OneL = uint256(std::vector<unsigned char>(&OneArray[0],&OneArray[0]+32));\n+const uint160 OneS = uint160(std::vector<unsigned char>(&OneArray[0],&OneArray[0]+20));\n+\n+const unsigned char MaxArray[] = \n+    \"\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\"\n+    \"\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\";\n+const uint256 MaxL = uint256(std::vector<unsigned char>(&MaxArray[0],&MaxArray[0]+32));\n+const uint160 MaxS = uint160(std::vector<unsigned char>(&MaxArray[0],&MaxArray[0]+20));\n+\n+const uint256 HalfL = (OneL << 255);\n+const uint160 HalfS = (OneS << 159);\n+std::string ArrayToString(const unsigned char A[], unsigned int width)\n+{\n+    std::stringstream Stream;\n+    Stream << std::hex;\n+    for (unsigned int i = 0; i < width; ++i) \n+    {\n+\tStream<<std::setw(2)<<std::setfill('0')<<(unsigned int)A[width-i-1];\n+    }       \n+    return Stream.str();\n+}\n+\n+void LowestUint64OfArray(const unsigned char A[],uint64_t& R1a)\n+{\n+    R1a = 0;\n+    for (unsigned int i = 0; i < 8; ++i) \n+    {\n+\tR1a += (((uint64_t)A[i]) << 8*i);\n+    }\n+}\n \n-BOOST_AUTO_TEST_CASE(uint256_equality)\n+BOOST_AUTO_TEST_CASE( basics ) // constructors, equality, inequality\n {\n-    uint256 num1 = 10;\n-    uint256 num2 = 11;\n-    BOOST_CHECK(num1+1 == num2);\n+    BOOST_CHECK(1 == 0+1);\n+    // constructor uint256(vector<char>):\n+    BOOST_CHECK(R1L.ToString() == ArrayToString(R1Array,32));\n+    BOOST_CHECK(R1S.ToString() == ArrayToString(R1Array,20));\n+    BOOST_CHECK(R2L.ToString() == ArrayToString(R2Array,32));\n+    BOOST_CHECK(R2S.ToString() == ArrayToString(R2Array,20));\n+    BOOST_CHECK(ZeroL.ToString() == ArrayToString(ZeroArray,32));\n+    BOOST_CHECK(ZeroS.ToString() == ArrayToString(ZeroArray,20));\n+    BOOST_CHECK(OneL.ToString() == ArrayToString(OneArray,32));\n+    BOOST_CHECK(OneS.ToString() == ArrayToString(OneArray,20));\n+    BOOST_CHECK(MaxL.ToString() == ArrayToString(MaxArray,32));\n+    BOOST_CHECK(MaxS.ToString() == ArrayToString(MaxArray,20));\n+    BOOST_CHECK(OneL.ToString() != ArrayToString(ZeroArray,32));\n+    BOOST_CHECK(OneS.ToString() != ArrayToString(ZeroArray,20));\n+\n+    // == and !=\n+    BOOST_CHECK(R1L != R2L && R1S != R2S);\n+    BOOST_CHECK(ZeroL != OneL && ZeroS != OneS);\n+    BOOST_CHECK(OneL != ZeroL && OneS != ZeroS);\n+    BOOST_CHECK(MaxL != ZeroL && MaxS != ZeroS);\n+    BOOST_CHECK(~MaxL == ZeroL && ~MaxS == ZeroS);\n+    BOOST_CHECK( ((R1L ^ R2L) ^ R1L) == R2L);\n+    BOOST_CHECK( ((R1S ^ R2S) ^ R1S) == R2S);\n+    \n+    uint64_t Tmp64 = 0xc4dab720d9c7acaaULL;\n+    for (unsigned int i = 0; i < 256; ++i) \n+    {\n+     \tBOOST_CHECK(ZeroL != (OneL << i)); \n+\tBOOST_CHECK((OneL << i) != ZeroL); \n+\tBOOST_CHECK(R1L != (R1L ^ (OneL << i)));\n+\tBOOST_CHECK(((uint256(Tmp64) ^ (OneL << i) ) != Tmp64 ));\n+    }\n+    BOOST_CHECK(ZeroL == (OneL << 256)); \n+\n+    for (unsigned int i = 0; i < 160; ++i) \n+    {\n+     \tBOOST_CHECK(ZeroS != (OneS << i)); \n+\tBOOST_CHECK((OneS << i) != ZeroS); \n+\tBOOST_CHECK(R1S != (R1S ^ (OneS << i)));\n+\tBOOST_CHECK(((uint160(Tmp64) ^ (OneS << i) ) != Tmp64 ));\n+    }\n+    BOOST_CHECK(ZeroS == (OneS << 256)); \n+\n+    // String Constructor and Copy Constructor\n+    BOOST_CHECK(uint256(\"0x\"+R1L.ToString()) == R1L);\n+    BOOST_CHECK(uint256(\"0x\"+R2L.ToString()) == R2L);\n+    BOOST_CHECK(uint256(\"0x\"+ZeroL.ToString()) == ZeroL);\n+    BOOST_CHECK(uint256(\"0x\"+OneL.ToString()) == OneL);\n+    BOOST_CHECK(uint256(\"0x\"+MaxL.ToString()) == MaxL);\n+    BOOST_CHECK(uint256(R1L.ToString()) == R1L);\n+    BOOST_CHECK(uint256(\"   0x\"+R1L.ToString()+\"   \") == R1L);\n+    BOOST_CHECK(uint256(\"\") == ZeroL);\n+    BOOST_CHECK(R1L == uint256(\"7D1DE5EAF9B156D53208F033B5AA8122D2D2355D5E12292B121156CFDB4A529C\"));\n+    BOOST_CHECK(uint256(R1L) == R1L);\n+    BOOST_CHECK((uint256(R1L^R2L)^R2L) == R1L);\n+    BOOST_CHECK(uint256(ZeroL) == ZeroL);\n+    BOOST_CHECK(uint256(OneL) == OneL);\n+\n+    BOOST_CHECK(uint160(\"0x\"+R1S.ToString()) == R1S);\n+    BOOST_CHECK(uint160(\"0x\"+R2S.ToString()) == R2S);\n+    BOOST_CHECK(uint160(\"0x\"+ZeroS.ToString()) == ZeroS);\n+    BOOST_CHECK(uint160(\"0x\"+OneS.ToString()) == OneS);\n+    BOOST_CHECK(uint160(\"0x\"+MaxS.ToString()) == MaxS);\n+    BOOST_CHECK(uint160(R1S.ToString()) == R1S);\n+    BOOST_CHECK(uint160(\"   0x\"+R1S.ToString()+\"   \") == R1S); \n+    BOOST_CHECK(uint160(\"\") == ZeroS);\n+    BOOST_CHECK(R1S == uint160(\"7D1DE5EAF9B156D53208F033B5AA8122D2D2355D5E12292B121156CFDB4A529C\"));\n \n-    uint64_t num3 = 10;\n-    BOOST_CHECK(num1 == num3);\n-    BOOST_CHECK(num1+num2 == num3+num2);\n+    BOOST_CHECK(uint160(R1S) == R1S);\n+    BOOST_CHECK((uint160(R1S^R2S)^R2S) == R1S);\n+    BOOST_CHECK(uint160(ZeroS) == ZeroS);\n+    BOOST_CHECK(uint160(OneS) == OneS);\n+\n+    // uint64_t constructor\n+    uint64_t Part;\n+    LowestUint64OfArray(R1Array,Part);\n+    BOOST_CHECK( (R1L & uint256(\"0xffffffffffffffff\")) == uint256(Part));\n+    BOOST_CHECK(ZeroL == uint256(0));\n+    BOOST_CHECK(OneL == uint256(1));\n+    BOOST_CHECK(uint256(\"0xffffffffffffffff\") = uint256(0xffffffffffffffffULL));\n+    BOOST_CHECK( (R1S & uint160(\"0xffffffffffffffff\")) == uint160(Part));\n+    BOOST_CHECK(ZeroS == uint160(0));\n+    BOOST_CHECK(OneS == uint160(1));\n+    BOOST_CHECK(uint160(\"0xffffffffffffffff\") = uint160(0xffffffffffffffffULL));\n+\n+    // Assignment (from base_uint)\n+    uint256 tmpL = ~ZeroL; BOOST_CHECK(tmpL == ~ZeroL);\n+    tmpL = ~OneL; BOOST_CHECK(tmpL == ~OneL);\n+    tmpL = ~R1L; BOOST_CHECK(tmpL == ~R1L);\n+    tmpL = ~R2L; BOOST_CHECK(tmpL == ~R2L);\n+    tmpL = ~MaxL; BOOST_CHECK(tmpL == ~MaxL);\n+    uint160 tmpS = ~ZeroS; BOOST_CHECK(tmpS == ~ZeroS);\n+    tmpS = ~OneS; BOOST_CHECK(tmpS == ~OneS);\n+    tmpS = ~R1S; BOOST_CHECK(tmpS == ~R1S);\n+    tmpS = ~R2S; BOOST_CHECK(tmpS == ~R2S);\n+    tmpS = ~MaxS; BOOST_CHECK(tmpS == ~MaxS);\n+\n+    // Wrong length must give 0\n+    BOOST_CHECK(uint256(std::vector<unsigned char>(&OneArray[0],&OneArray[0]+31)) == 0);\n+    BOOST_CHECK(uint256(std::vector<unsigned char>(&OneArray[0],&OneArray[0]+20)) == 0);\n+    BOOST_CHECK(uint160(std::vector<unsigned char>(&OneArray[0],&OneArray[0]+32)) == 0);\n+    BOOST_CHECK(uint160(std::vector<unsigned char>(&OneArray[0],&OneArray[0]+19)) == 0);\n }\n \n-BOOST_AUTO_TEST_CASE(uint256_hex)\n+void shiftArrayRight(unsigned char* to, const unsigned char* from, unsigned int arrayLength, unsigned int bitsToShift) \n {\n-    std::string hexStr = \"d35583ed493a5eee756931353144f558e6a9ab3ad6024a63ced7f10daf7faad9\";\n-    uint256 num1;\n-    num1.SetHex(hexStr);\n-    BOOST_CHECK(num1.GetHex() == hexStr);\n+    for (unsigned int T=0; T < arrayLength; ++T) \n+    {\n+\tunsigned int F = (T+bitsToShift/8);\n+\tif (F < arrayLength) \n+\t    to[T]  = from[F] >> (bitsToShift%8);\n+\telse\n+\t    to[T] = 0;\n+\tif (F + 1 < arrayLength) \n+\t    to[T] |= from[(F+1)] << (8-bitsToShift%8);\n+    }\n+}\n+\n+void shiftArrayLeft(unsigned char* to, const unsigned char* from, unsigned int arrayLength, unsigned int bitsToShift) \n+{\n+    for (unsigned int T=0; T < arrayLength; ++T) \n+    {\n+\tif (T >= bitsToShift/8) \n+\t{\n+\t    unsigned int F = T-bitsToShift/8;\n+\t    to[T]  = from[F] << (bitsToShift%8);\n+\t    if (T >= bitsToShift/8+1)\n+\t\tto[T] |= from[F-1] >> (8-bitsToShift%8);\n+\t}\n+\telse {\n+\t    to[T] = 0;\n+\t}\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE( shifts ) { // \"<<\"  \">>\"  \"<<=\"  \">>=\"\n+    unsigned char TmpArray[32];\n+    uint256 TmpL;\n+    for (unsigned int i = 0; i < 256; ++i)\n+    {\n+\tshiftArrayLeft(TmpArray, OneArray, 32, i);\n+\tBOOST_CHECK(uint256(std::vector<unsigned char>(&TmpArray[0],&TmpArray[0]+32)) == (OneL << i));\n+\tTmpL = OneL; TmpL <<= i;\n+\tBOOST_CHECK(TmpL == (OneL << i));\n+\tBOOST_CHECK((HalfL >> (255-i)) == (OneL << i));\n+\tTmpL = HalfL; TmpL >>= (255-i);\n+\tBOOST_CHECK(TmpL == (OneL << i));\n+\t\t    \n+\tshiftArrayLeft(TmpArray, R1Array, 32, i);\n+\tBOOST_CHECK(uint256(std::vector<unsigned char>(&TmpArray[0],&TmpArray[0]+32)) == (R1L << i));\n+\tTmpL = R1L; TmpL <<= i;\n+\tBOOST_CHECK(TmpL == (R1L << i));\n+\n+\tshiftArrayRight(TmpArray, R1Array, 32, i);\n+\tBOOST_CHECK(uint256(std::vector<unsigned char>(&TmpArray[0],&TmpArray[0]+32)) == (R1L >> i)); \n+\tTmpL = R1L; TmpL >>= i;\n+\tBOOST_CHECK(TmpL == (R1L >> i));\n+\n+\tshiftArrayLeft(TmpArray, MaxArray, 32, i);\n+\tBOOST_CHECK(uint256(std::vector<unsigned char>(&TmpArray[0],&TmpArray[0]+32)) == (MaxL << i));\n+\tTmpL = MaxL; TmpL <<= i;\n+\tBOOST_CHECK(TmpL == (MaxL << i));\n+\n+\tshiftArrayRight(TmpArray, MaxArray, 32, i);\n+\tBOOST_CHECK(uint256(std::vector<unsigned char>(&TmpArray[0],&TmpArray[0]+32)) == (MaxL >> i));\n+\tTmpL = MaxL; TmpL >>= i;\n+\tBOOST_CHECK(TmpL == (MaxL >> i));\n+    }\n+    uint256 c1L = uint256(0x0123456789abcdefULL);\n+    uint256 c2L = c1L << 128;\n+    for (unsigned int i = 0; i < 128; ++i) {\n+\tBOOST_CHECK((c1L << i) == (c2L >> (128-i)));\n+    }\n+    for (unsigned int i = 128; i < 256; ++i) {\n+\tBOOST_CHECK((c1L << i) == (c2L << (i-128)));\n+    }\n+\n+    uint160 TmpS;\n+    for (unsigned int i = 0; i < 160; ++i)\n+    {\n+\tshiftArrayLeft(TmpArray, OneArray, 20, i);\n+\tBOOST_CHECK(uint160(std::vector<unsigned char>(&TmpArray[0],&TmpArray[0]+20)) == (OneS << i));\n+\tTmpS = OneS; TmpS <<= i;\n+\tBOOST_CHECK(TmpS == (OneS << i));\n+\tBOOST_CHECK((HalfS >> (159-i)) == (OneS << i));\n+\tTmpS = HalfS; TmpS >>= (159-i);\n+\tBOOST_CHECK(TmpS == (OneS << i));\n+\t\t    \n+\tshiftArrayLeft(TmpArray, R1Array, 20, i);\n+\tBOOST_CHECK(uint160(std::vector<unsigned char>(&TmpArray[0],&TmpArray[0]+20)) == (R1S << i));\n+\tTmpS = R1S; TmpS <<= i;\n+\tBOOST_CHECK(TmpS == (R1S << i));\n+\n+\tshiftArrayRight(TmpArray, R1Array, 20, i);\n+\tBOOST_CHECK(uint160(std::vector<unsigned char>(&TmpArray[0],&TmpArray[0]+20)) == (R1S >> i)); \n+\tTmpS = R1S; TmpS >>= i;\n+\tBOOST_CHECK(TmpS == (R1S >> i));\n+\n+\tshiftArrayLeft(TmpArray, MaxArray, 20, i);\n+\tBOOST_CHECK(uint160(std::vector<unsigned char>(&TmpArray[0],&TmpArray[0]+20)) == (MaxS << i));\n+\tTmpS = MaxS; TmpS <<= i;\n+\tBOOST_CHECK(TmpS == (MaxS << i));\n+\n+\tshiftArrayRight(TmpArray, MaxArray, 20, i);\n+\tBOOST_CHECK(uint160(std::vector<unsigned char>(&TmpArray[0],&TmpArray[0]+20)) == (MaxS >> i));\n+\tTmpS = MaxS; TmpS >>= i;\n+\tBOOST_CHECK(TmpS == (MaxS >> i));\n+    }\n+    uint160 c1S = uint160(0x0123456789abcdefULL);\n+    uint160 c2S = c1S << 80;\n+    for (unsigned int i = 0; i < 80; ++i) {\n+\tBOOST_CHECK((c1S << i) == (c2S >> (80-i)));\n+    }\n+    for (unsigned int i = 80; i < 160; ++i) {\n+\tBOOST_CHECK((c1S << i) == (c2S << (i-80)));\n+    }\n+\n }\n \n+BOOST_AUTO_TEST_CASE( unaryOperators ) // !    ~    -\n+{\n+    BOOST_CHECK(!ZeroL);  BOOST_CHECK(!ZeroS);\n+    BOOST_CHECK(!(!OneL));BOOST_CHECK(!(!OneS));\n+    for (unsigned int i = 0; i < 256; ++i) \n+\tBOOST_CHECK(!(!(OneL<<i)));\n+    for (unsigned int i = 0; i < 160; ++i) \n+\tBOOST_CHECK(!(!(OneS<<i)));\n+    BOOST_CHECK(!(!R1L));BOOST_CHECK(!(!R1S));\n+    BOOST_CHECK(!(!R2S));BOOST_CHECK(!(!R2S)); \n+    BOOST_CHECK(!(!MaxL));BOOST_CHECK(!(!MaxS));\n+\n+    BOOST_CHECK(~ZeroL == MaxL); BOOST_CHECK(~ZeroS == MaxS);\n+\n+    unsigned char TmpArray[32];\n+    for (unsigned int i = 0; i < 32; ++i) { TmpArray[i] = ~R1Array[i]; } \n+    BOOST_CHECK(uint256(std::vector<unsigned char>(&TmpArray[0],&TmpArray[0]+32)) == (~R1L));\n+    BOOST_CHECK(uint160(std::vector<unsigned char>(&TmpArray[0],&TmpArray[0]+20)) == (~R1S));\n+\n+    BOOST_CHECK(-ZeroL == ZeroL); BOOST_CHECK(-ZeroS == ZeroS);\n+    BOOST_CHECK(-R1L == uint256(\"82e21a15064ea92acdf70fcc4a557edd2d2dcaa2a1edd6d4edeea93024b5ad64\"));\n+    BOOST_CHECK(-R1S == uint160(\"4a557edd2d2dcaa2a1edd6d4edeea93024b5ad64\"));\n+    for (unsigned int i = 0; i < 256; ++i) \n+\tBOOST_CHECK(-(OneL<<i) == (MaxL << i));\n+    for (unsigned int i = 0; i < 160; ++i) \n+\tBOOST_CHECK(-(OneS<<i) == (MaxS << i));\n+}\n+\n+\n+// Check if doing _A_ _OP_ _B_ results in the same as applying _OP_ onto each\n+// element of Aarray and Barray, and then converting the result into a uint256.\n+#define CHECKBITWISEOPERATOR(_A_,_B_,_OP_) \\\n+    for (unsigned int i = 0; i < 32; ++i) { TmpArray[i] = _A_##Array[i] _OP_ _B_##Array[i]; } \\\n+    BOOST_CHECK(uint256(std::vector<unsigned char>(&TmpArray[0],&TmpArray[0]+32)) == (_A_##L _OP_ _B_##L)); \\\n+    for (unsigned int i = 0; i < 20; ++i) { TmpArray[i] = _A_##Array[i] _OP_ _B_##Array[i]; } \\\n+    BOOST_CHECK(uint160(std::vector<unsigned char>(&TmpArray[0],&TmpArray[0]+20)) == (_A_##S _OP_ _B_##S));\n+\n+#define CHECKASSIGNMENTOPERATOR(_A_,_B_,_OP_) \\\n+    TmpL = _A_##L; TmpL _OP_##= _B_##L; BOOST_CHECK(TmpL == (_A_##L _OP_ _B_##L)); \\\n+    TmpS = _A_##S; TmpS _OP_##= _B_##S; BOOST_CHECK(TmpS == (_A_##S _OP_ _B_##S));\n+\n+BOOST_AUTO_TEST_CASE( bitwiseOperators ) \n+{\n+    unsigned char TmpArray[32];\n+    \n+    CHECKBITWISEOPERATOR(R1,R2,|)\n+    CHECKBITWISEOPERATOR(R1,R2,^)\n+    CHECKBITWISEOPERATOR(R1,R2,&)\n+    CHECKBITWISEOPERATOR(R1,Zero,|)\n+    CHECKBITWISEOPERATOR(R1,Zero,^)\n+    CHECKBITWISEOPERATOR(R1,Zero,&)\n+    CHECKBITWISEOPERATOR(R1,Max,|)\n+    CHECKBITWISEOPERATOR(R1,Max,^)\n+    CHECKBITWISEOPERATOR(R1,Max,&)\n+    CHECKBITWISEOPERATOR(Zero,R1,|)\n+    CHECKBITWISEOPERATOR(Zero,R1,^)\n+    CHECKBITWISEOPERATOR(Zero,R1,&)\n+    CHECKBITWISEOPERATOR(Max,R1,|)\n+    CHECKBITWISEOPERATOR(Max,R1,^)\n+    CHECKBITWISEOPERATOR(Max,R1,&)\n+\n+    uint256 TmpL;\n+    uint160 TmpS;\n+    CHECKASSIGNMENTOPERATOR(R1,R2,|)\n+    CHECKASSIGNMENTOPERATOR(R1,R2,^)\n+    CHECKASSIGNMENTOPERATOR(R1,R2,&)\n+    CHECKASSIGNMENTOPERATOR(R1,Zero,|)\n+    CHECKASSIGNMENTOPERATOR(R1,Zero,^)\n+    CHECKASSIGNMENTOPERATOR(R1,Zero,&)\n+    CHECKASSIGNMENTOPERATOR(R1,Max,|)\n+    CHECKASSIGNMENTOPERATOR(R1,Max,^)\n+    CHECKASSIGNMENTOPERATOR(R1,Max,&)\n+    CHECKASSIGNMENTOPERATOR(Zero,R1,|)\n+    CHECKASSIGNMENTOPERATOR(Zero,R1,^)\n+    CHECKASSIGNMENTOPERATOR(Zero,R1,&)\n+    CHECKASSIGNMENTOPERATOR(Max,R1,|)\n+    CHECKASSIGNMENTOPERATOR(Max,R1,^)\n+    CHECKASSIGNMENTOPERATOR(Max,R1,&)\n+\n+    uint64_t Tmp64 = 0xe1db685c9a0b47a2ULL; \n+    TmpL = R1L; TmpL |= Tmp64;  BOOST_CHECK(TmpL == (R1L | uint256(Tmp64)));\n+    TmpS = R1S; TmpS |= Tmp64;  BOOST_CHECK(TmpS == (R1S | uint160(Tmp64)));\n+    TmpL = R1L; TmpL |= 0; BOOST_CHECK(TmpL == R1L);\n+    TmpS = R1S; TmpS |= 0; BOOST_CHECK(TmpS == R1S);\n+    TmpL ^= 0; BOOST_CHECK(TmpL == R1L);\n+    TmpS ^= 0; BOOST_CHECK(TmpS == R1S);\n+    TmpL ^= Tmp64;  BOOST_CHECK(TmpL == (R1L ^ uint256(Tmp64)));\n+    TmpS ^= Tmp64;  BOOST_CHECK(TmpS == (R1S ^ uint160(Tmp64)));\n+}\n+\n+BOOST_AUTO_TEST_CASE( comparison ) // <= >= < >\n+{\n+    uint256 TmpL;\n+    for (unsigned int i = 0; i < 256; ++i) {\n+\tTmpL= OneL<< i;\n+\tBOOST_CHECK( TmpL >= ZeroL && TmpL > ZeroL && ZeroL < TmpL && ZeroL <= TmpL);\n+\tBOOST_CHECK( TmpL >= 0 && TmpL > 0 && 0 < TmpL && 0 <= TmpL);\n+\tTmpL |= R1L;\n+\tBOOST_CHECK( TmpL >= R1L ); BOOST_CHECK( (TmpL == R1L) != (TmpL > R1L)); BOOST_CHECK( (TmpL == R1L) || !( TmpL <= R1L));\n+\tBOOST_CHECK( R1L <= TmpL ); BOOST_CHECK( (R1L == TmpL) != (R1L < TmpL)); BOOST_CHECK( (TmpL == R1L) || !( R1L >= TmpL));\n+\tBOOST_CHECK(! (TmpL < R1L)); BOOST_CHECK(! (R1L > TmpL));\n+    }\n+    uint160 TmpS;\n+    for (unsigned int i = 0; i < 160; ++i) {\n+\tTmpS= OneS<< i;\n+\tBOOST_CHECK( TmpS >= ZeroS && TmpS > ZeroS && ZeroS < TmpS && ZeroS <= TmpS);\n+\tBOOST_CHECK( TmpS >= 0 && TmpS > 0 && 0 < TmpS && 0 <= TmpS);\n+\tTmpS |= R1S;\n+\tBOOST_CHECK( TmpS >= R1S ); BOOST_CHECK( (TmpS == R1S) != (TmpS > R1S)); BOOST_CHECK( (TmpS == R1S) || !( TmpS <= R1S));\n+\tBOOST_CHECK( R1S <= TmpS ); BOOST_CHECK( (R1S == TmpS) != (R1S < TmpS)); BOOST_CHECK( (TmpS == R1S) || !( R1S >= TmpS));\n+\tBOOST_CHECK(! (TmpS < R1S)); BOOST_CHECK(! (R1S > TmpS));\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE( plusMinus ) \n+{\n+    uint256 TmpL = 0;\n+    BOOST_CHECK(R1L+R2L == uint256(\"549FB09FEA236A1EA3E31D4D58F1B1369288D204211CA751527CFC175767850C\"));\n+    TmpL += R1L;\n+    BOOST_CHECK(TmpL == R1L);\n+    TmpL += R2L;\n+    BOOST_CHECK(TmpL == R1L + R2L);\n+    BOOST_CHECK(OneL+MaxL == ZeroL);\n+    BOOST_CHECK(MaxL+OneL == ZeroL);\n+    for (unsigned int i = 1; i < 256; ++i) {\n+\tBOOST_CHECK( (MaxL >> i) + OneL == (HalfL >> (i-1)) );\n+\tBOOST_CHECK( OneL + (MaxL >> i) == (HalfL >> (i-1)) );\n+\tTmpL = (MaxL>>i); TmpL += OneL;\n+\tBOOST_CHECK( TmpL == (HalfL >> (i-1)) );\n+\tTmpL = (MaxL>>i); TmpL += 1;\n+\tBOOST_CHECK( TmpL == (HalfL >> (i-1)) );\n+\tTmpL = (MaxL>>i); \n+\tBOOST_CHECK( TmpL++ == (MaxL>>i) );\n+\tBOOST_CHECK( TmpL == (HalfL >> (i-1)));\n+    }\n+    BOOST_CHECK(uint256(0xbedc77e27940a7ULL) + 0xee8d836fce66fbULL == uint256(0xbedc77e27940a7ULL  + 0xee8d836fce66fbULL));\n+    TmpL = uint256(0xbedc77e27940a7ULL); TmpL += 0xee8d836fce66fbULL;\n+    BOOST_CHECK(TmpL == uint256(0xbedc77e27940a7ULL+0xee8d836fce66fbULL));\n+    TmpL -= 0xee8d836fce66fbULL;  BOOST_CHECK(TmpL == 0xbedc77e27940a7ULL);\n+    TmpL = R1L;\n+    BOOST_CHECK(++TmpL == R1L+1);\n+\n+    BOOST_CHECK(R1L -(-R2L) == R1L+R2L);\n+    BOOST_CHECK(R1L -(-OneL) == R1L+OneL);\n+    BOOST_CHECK(R1L - OneL == R1L+(-OneL));\n+    for (unsigned int i = 1; i < 256; ++i) {\n+\tBOOST_CHECK((MaxL>>i) - (-OneL)  == (HalfL >> (i-1)));\n+\tBOOST_CHECK((HalfL >> (i-1)) - OneL == (MaxL>>i));\n+\tTmpL = (HalfL >> (i-1));\n+\tBOOST_CHECK(TmpL-- == (HalfL >> (i-1)));\n+\tBOOST_CHECK(TmpL == (MaxL >> i));\n+\tTmpL = (HalfL >> (i-1));\n+\tBOOST_CHECK(--TmpL == (MaxL >> i));\n+    }\n+    TmpL = R1L;\n+    BOOST_CHECK(--TmpL == R1L-1);\n+\n+    // 160-bit; copy-pasted\n+    uint160 TmpS = 0;\n+    BOOST_CHECK(R1S+R2S == uint160(\"58F1B1369288D204211CA751527CFC175767850C\"));",
      "path": "src/test/uint256_tests.cpp",
      "position": null,
      "original_position": 460,
      "commit_id": "daa6b20e29f3926a16d4da6962ff00b74623fc6b",
      "original_commit_id": "b03ca188f3d433e209ccd8b62c155a5feb5de94a",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe make this a constant defined at the beginning of the file too, so it's clear that changing one must mean changing this too?\n",
      "created_at": "2013-12-15T20:56:03Z",
      "updated_at": "2013-12-25T10:16:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/3422#discussion_r8356212",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/8356212"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/3422"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/8356222",
      "pull_request_review_id": null,
      "id": 8356222,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgzNTYyMjI=",
      "diff_hunk": "@@ -1,29 +1,642 @@\n+#include <boost/test/unit_test.hpp>\n+#include <stdint.h>\n+#include <sstream>\n+#include <iomanip>\n+#include <limits>\n+#include <cmath>\n #include \"uint256.h\"\n #include <string>\n+#include \"version.h\"\n \n-#include <stdint.h>\n+BOOST_AUTO_TEST_SUITE(uint256_tests)\n \n-#include <boost/test/unit_test.hpp>\n+const unsigned char R1Array[] = \n+    \"\\x9c\\x52\\x4a\\xdb\\xcf\\x56\\x11\\x12\\x2b\\x29\\x12\\x5e\\x5d\\x35\\xd2\\xd2\"\n+    \"\\x22\\x81\\xaa\\xb5\\x33\\xf0\\x08\\x32\\xd5\\x56\\xb1\\xf9\\xea\\xe5\\x1d\\x7d\";\n+const uint256 R1L = uint256(std::vector<unsigned char>(&R1Array[0],&R1Array[0]+32));\n+const uint160 R1S = uint160(std::vector<unsigned char>(&R1Array[0],&R1Array[0]+20));\n \n-BOOST_AUTO_TEST_SUITE(uint256_tests)\n+const unsigned char R2Array[] = \n+    \"\\x70\\x32\\x1d\\x7c\\x47\\xa5\\x6b\\x40\\x26\\x7e\\x0a\\xc3\\xa6\\x9c\\xb6\\xbf\"\n+    \"\\x13\\x30\\x47\\xa3\\x19\\x2d\\xda\\x71\\x49\\x13\\x72\\xf0\\xb4\\xca\\x81\\xd7\";\n+const uint256 R2L = uint256(std::vector<unsigned char>(&R2Array[0],&R2Array[0]+32));\n+const uint160 R2S = uint160(std::vector<unsigned char>(&R2Array[0],&R2Array[0]+20));\n+\n+const unsigned char ZeroArray[] = \n+    \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n+    \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\";\n+const uint256 ZeroL = uint256(std::vector<unsigned char>(&ZeroArray[0],&ZeroArray[0]+32));\n+const uint160 ZeroS = uint160(std::vector<unsigned char>(&ZeroArray[0],&ZeroArray[0]+20));\n+\t\t\t     \n+const unsigned char OneArray[] = \n+    \"\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n+    \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\";\n+const uint256 OneL = uint256(std::vector<unsigned char>(&OneArray[0],&OneArray[0]+32));\n+const uint160 OneS = uint160(std::vector<unsigned char>(&OneArray[0],&OneArray[0]+20));\n+\n+const unsigned char MaxArray[] = \n+    \"\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\"\n+    \"\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\";\n+const uint256 MaxL = uint256(std::vector<unsigned char>(&MaxArray[0],&MaxArray[0]+32));\n+const uint160 MaxS = uint160(std::vector<unsigned char>(&MaxArray[0],&MaxArray[0]+20));\n+\n+const uint256 HalfL = (OneL << 255);\n+const uint160 HalfS = (OneS << 159);\n+std::string ArrayToString(const unsigned char A[], unsigned int width)\n+{\n+    std::stringstream Stream;\n+    Stream << std::hex;\n+    for (unsigned int i = 0; i < width; ++i) \n+    {\n+\tStream<<std::setw(2)<<std::setfill('0')<<(unsigned int)A[width-i-1];\n+    }       \n+    return Stream.str();\n+}\n+\n+void LowestUint64OfArray(const unsigned char A[],uint64_t& R1a)\n+{\n+    R1a = 0;\n+    for (unsigned int i = 0; i < 8; ++i) \n+    {\n+\tR1a += (((uint64_t)A[i]) << 8*i);\n+    }\n+}\n \n-BOOST_AUTO_TEST_CASE(uint256_equality)\n+BOOST_AUTO_TEST_CASE( basics ) // constructors, equality, inequality\n {\n-    uint256 num1 = 10;\n-    uint256 num2 = 11;\n-    BOOST_CHECK(num1+1 == num2);\n+    BOOST_CHECK(1 == 0+1);\n+    // constructor uint256(vector<char>):\n+    BOOST_CHECK(R1L.ToString() == ArrayToString(R1Array,32));\n+    BOOST_CHECK(R1S.ToString() == ArrayToString(R1Array,20));\n+    BOOST_CHECK(R2L.ToString() == ArrayToString(R2Array,32));\n+    BOOST_CHECK(R2S.ToString() == ArrayToString(R2Array,20));\n+    BOOST_CHECK(ZeroL.ToString() == ArrayToString(ZeroArray,32));\n+    BOOST_CHECK(ZeroS.ToString() == ArrayToString(ZeroArray,20));\n+    BOOST_CHECK(OneL.ToString() == ArrayToString(OneArray,32));\n+    BOOST_CHECK(OneS.ToString() == ArrayToString(OneArray,20));\n+    BOOST_CHECK(MaxL.ToString() == ArrayToString(MaxArray,32));\n+    BOOST_CHECK(MaxS.ToString() == ArrayToString(MaxArray,20));\n+    BOOST_CHECK(OneL.ToString() != ArrayToString(ZeroArray,32));\n+    BOOST_CHECK(OneS.ToString() != ArrayToString(ZeroArray,20));\n+\n+    // == and !=\n+    BOOST_CHECK(R1L != R2L && R1S != R2S);\n+    BOOST_CHECK(ZeroL != OneL && ZeroS != OneS);\n+    BOOST_CHECK(OneL != ZeroL && OneS != ZeroS);\n+    BOOST_CHECK(MaxL != ZeroL && MaxS != ZeroS);\n+    BOOST_CHECK(~MaxL == ZeroL && ~MaxS == ZeroS);\n+    BOOST_CHECK( ((R1L ^ R2L) ^ R1L) == R2L);\n+    BOOST_CHECK( ((R1S ^ R2S) ^ R1S) == R2S);\n+    \n+    uint64_t Tmp64 = 0xc4dab720d9c7acaaULL;\n+    for (unsigned int i = 0; i < 256; ++i) \n+    {\n+     \tBOOST_CHECK(ZeroL != (OneL << i)); \n+\tBOOST_CHECK((OneL << i) != ZeroL); \n+\tBOOST_CHECK(R1L != (R1L ^ (OneL << i)));\n+\tBOOST_CHECK(((uint256(Tmp64) ^ (OneL << i) ) != Tmp64 ));\n+    }\n+    BOOST_CHECK(ZeroL == (OneL << 256)); \n+\n+    for (unsigned int i = 0; i < 160; ++i) \n+    {\n+     \tBOOST_CHECK(ZeroS != (OneS << i)); \n+\tBOOST_CHECK((OneS << i) != ZeroS); \n+\tBOOST_CHECK(R1S != (R1S ^ (OneS << i)));\n+\tBOOST_CHECK(((uint160(Tmp64) ^ (OneS << i) ) != Tmp64 ));\n+    }\n+    BOOST_CHECK(ZeroS == (OneS << 256)); \n+\n+    // String Constructor and Copy Constructor\n+    BOOST_CHECK(uint256(\"0x\"+R1L.ToString()) == R1L);\n+    BOOST_CHECK(uint256(\"0x\"+R2L.ToString()) == R2L);\n+    BOOST_CHECK(uint256(\"0x\"+ZeroL.ToString()) == ZeroL);\n+    BOOST_CHECK(uint256(\"0x\"+OneL.ToString()) == OneL);\n+    BOOST_CHECK(uint256(\"0x\"+MaxL.ToString()) == MaxL);\n+    BOOST_CHECK(uint256(R1L.ToString()) == R1L);\n+    BOOST_CHECK(uint256(\"   0x\"+R1L.ToString()+\"   \") == R1L);\n+    BOOST_CHECK(uint256(\"\") == ZeroL);\n+    BOOST_CHECK(R1L == uint256(\"7D1DE5EAF9B156D53208F033B5AA8122D2D2355D5E12292B121156CFDB4A529C\"));\n+    BOOST_CHECK(uint256(R1L) == R1L);\n+    BOOST_CHECK((uint256(R1L^R2L)^R2L) == R1L);\n+    BOOST_CHECK(uint256(ZeroL) == ZeroL);\n+    BOOST_CHECK(uint256(OneL) == OneL);\n+\n+    BOOST_CHECK(uint160(\"0x\"+R1S.ToString()) == R1S);\n+    BOOST_CHECK(uint160(\"0x\"+R2S.ToString()) == R2S);\n+    BOOST_CHECK(uint160(\"0x\"+ZeroS.ToString()) == ZeroS);\n+    BOOST_CHECK(uint160(\"0x\"+OneS.ToString()) == OneS);\n+    BOOST_CHECK(uint160(\"0x\"+MaxS.ToString()) == MaxS);\n+    BOOST_CHECK(uint160(R1S.ToString()) == R1S);\n+    BOOST_CHECK(uint160(\"   0x\"+R1S.ToString()+\"   \") == R1S); \n+    BOOST_CHECK(uint160(\"\") == ZeroS);\n+    BOOST_CHECK(R1S == uint160(\"7D1DE5EAF9B156D53208F033B5AA8122D2D2355D5E12292B121156CFDB4A529C\"));\n \n-    uint64_t num3 = 10;\n-    BOOST_CHECK(num1 == num3);\n-    BOOST_CHECK(num1+num2 == num3+num2);\n+    BOOST_CHECK(uint160(R1S) == R1S);\n+    BOOST_CHECK((uint160(R1S^R2S)^R2S) == R1S);\n+    BOOST_CHECK(uint160(ZeroS) == ZeroS);\n+    BOOST_CHECK(uint160(OneS) == OneS);\n+\n+    // uint64_t constructor\n+    uint64_t Part;\n+    LowestUint64OfArray(R1Array,Part);\n+    BOOST_CHECK( (R1L & uint256(\"0xffffffffffffffff\")) == uint256(Part));\n+    BOOST_CHECK(ZeroL == uint256(0));\n+    BOOST_CHECK(OneL == uint256(1));\n+    BOOST_CHECK(uint256(\"0xffffffffffffffff\") = uint256(0xffffffffffffffffULL));\n+    BOOST_CHECK( (R1S & uint160(\"0xffffffffffffffff\")) == uint160(Part));\n+    BOOST_CHECK(ZeroS == uint160(0));\n+    BOOST_CHECK(OneS == uint160(1));\n+    BOOST_CHECK(uint160(\"0xffffffffffffffff\") = uint160(0xffffffffffffffffULL));\n+\n+    // Assignment (from base_uint)\n+    uint256 tmpL = ~ZeroL; BOOST_CHECK(tmpL == ~ZeroL);\n+    tmpL = ~OneL; BOOST_CHECK(tmpL == ~OneL);\n+    tmpL = ~R1L; BOOST_CHECK(tmpL == ~R1L);\n+    tmpL = ~R2L; BOOST_CHECK(tmpL == ~R2L);\n+    tmpL = ~MaxL; BOOST_CHECK(tmpL == ~MaxL);\n+    uint160 tmpS = ~ZeroS; BOOST_CHECK(tmpS == ~ZeroS);\n+    tmpS = ~OneS; BOOST_CHECK(tmpS == ~OneS);\n+    tmpS = ~R1S; BOOST_CHECK(tmpS == ~R1S);\n+    tmpS = ~R2S; BOOST_CHECK(tmpS == ~R2S);\n+    tmpS = ~MaxS; BOOST_CHECK(tmpS == ~MaxS);\n+\n+    // Wrong length must give 0\n+    BOOST_CHECK(uint256(std::vector<unsigned char>(&OneArray[0],&OneArray[0]+31)) == 0);\n+    BOOST_CHECK(uint256(std::vector<unsigned char>(&OneArray[0],&OneArray[0]+20)) == 0);\n+    BOOST_CHECK(uint160(std::vector<unsigned char>(&OneArray[0],&OneArray[0]+32)) == 0);\n+    BOOST_CHECK(uint160(std::vector<unsigned char>(&OneArray[0],&OneArray[0]+19)) == 0);\n }\n \n-BOOST_AUTO_TEST_CASE(uint256_hex)\n+void shiftArrayRight(unsigned char* to, const unsigned char* from, unsigned int arrayLength, unsigned int bitsToShift) \n {\n-    std::string hexStr = \"d35583ed493a5eee756931353144f558e6a9ab3ad6024a63ced7f10daf7faad9\";\n-    uint256 num1;\n-    num1.SetHex(hexStr);\n-    BOOST_CHECK(num1.GetHex() == hexStr);\n+    for (unsigned int T=0; T < arrayLength; ++T) \n+    {\n+\tunsigned int F = (T+bitsToShift/8);\n+\tif (F < arrayLength) \n+\t    to[T]  = from[F] >> (bitsToShift%8);\n+\telse\n+\t    to[T] = 0;\n+\tif (F + 1 < arrayLength) \n+\t    to[T] |= from[(F+1)] << (8-bitsToShift%8);\n+    }\n+}\n+\n+void shiftArrayLeft(unsigned char* to, const unsigned char* from, unsigned int arrayLength, unsigned int bitsToShift) \n+{\n+    for (unsigned int T=0; T < arrayLength; ++T) \n+    {\n+\tif (T >= bitsToShift/8) \n+\t{\n+\t    unsigned int F = T-bitsToShift/8;\n+\t    to[T]  = from[F] << (bitsToShift%8);\n+\t    if (T >= bitsToShift/8+1)\n+\t\tto[T] |= from[F-1] >> (8-bitsToShift%8);\n+\t}\n+\telse {\n+\t    to[T] = 0;\n+\t}\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE( shifts ) { // \"<<\"  \">>\"  \"<<=\"  \">>=\"\n+    unsigned char TmpArray[32];\n+    uint256 TmpL;\n+    for (unsigned int i = 0; i < 256; ++i)\n+    {\n+\tshiftArrayLeft(TmpArray, OneArray, 32, i);\n+\tBOOST_CHECK(uint256(std::vector<unsigned char>(&TmpArray[0],&TmpArray[0]+32)) == (OneL << i));\n+\tTmpL = OneL; TmpL <<= i;\n+\tBOOST_CHECK(TmpL == (OneL << i));\n+\tBOOST_CHECK((HalfL >> (255-i)) == (OneL << i));\n+\tTmpL = HalfL; TmpL >>= (255-i);\n+\tBOOST_CHECK(TmpL == (OneL << i));\n+\t\t    \n+\tshiftArrayLeft(TmpArray, R1Array, 32, i);\n+\tBOOST_CHECK(uint256(std::vector<unsigned char>(&TmpArray[0],&TmpArray[0]+32)) == (R1L << i));\n+\tTmpL = R1L; TmpL <<= i;\n+\tBOOST_CHECK(TmpL == (R1L << i));\n+\n+\tshiftArrayRight(TmpArray, R1Array, 32, i);\n+\tBOOST_CHECK(uint256(std::vector<unsigned char>(&TmpArray[0],&TmpArray[0]+32)) == (R1L >> i)); \n+\tTmpL = R1L; TmpL >>= i;\n+\tBOOST_CHECK(TmpL == (R1L >> i));\n+\n+\tshiftArrayLeft(TmpArray, MaxArray, 32, i);\n+\tBOOST_CHECK(uint256(std::vector<unsigned char>(&TmpArray[0],&TmpArray[0]+32)) == (MaxL << i));\n+\tTmpL = MaxL; TmpL <<= i;\n+\tBOOST_CHECK(TmpL == (MaxL << i));\n+\n+\tshiftArrayRight(TmpArray, MaxArray, 32, i);\n+\tBOOST_CHECK(uint256(std::vector<unsigned char>(&TmpArray[0],&TmpArray[0]+32)) == (MaxL >> i));\n+\tTmpL = MaxL; TmpL >>= i;\n+\tBOOST_CHECK(TmpL == (MaxL >> i));\n+    }\n+    uint256 c1L = uint256(0x0123456789abcdefULL);\n+    uint256 c2L = c1L << 128;\n+    for (unsigned int i = 0; i < 128; ++i) {\n+\tBOOST_CHECK((c1L << i) == (c2L >> (128-i)));\n+    }\n+    for (unsigned int i = 128; i < 256; ++i) {\n+\tBOOST_CHECK((c1L << i) == (c2L << (i-128)));\n+    }\n+\n+    uint160 TmpS;\n+    for (unsigned int i = 0; i < 160; ++i)\n+    {\n+\tshiftArrayLeft(TmpArray, OneArray, 20, i);\n+\tBOOST_CHECK(uint160(std::vector<unsigned char>(&TmpArray[0],&TmpArray[0]+20)) == (OneS << i));\n+\tTmpS = OneS; TmpS <<= i;\n+\tBOOST_CHECK(TmpS == (OneS << i));\n+\tBOOST_CHECK((HalfS >> (159-i)) == (OneS << i));\n+\tTmpS = HalfS; TmpS >>= (159-i);\n+\tBOOST_CHECK(TmpS == (OneS << i));\n+\t\t    \n+\tshiftArrayLeft(TmpArray, R1Array, 20, i);\n+\tBOOST_CHECK(uint160(std::vector<unsigned char>(&TmpArray[0],&TmpArray[0]+20)) == (R1S << i));\n+\tTmpS = R1S; TmpS <<= i;\n+\tBOOST_CHECK(TmpS == (R1S << i));\n+\n+\tshiftArrayRight(TmpArray, R1Array, 20, i);\n+\tBOOST_CHECK(uint160(std::vector<unsigned char>(&TmpArray[0],&TmpArray[0]+20)) == (R1S >> i)); \n+\tTmpS = R1S; TmpS >>= i;\n+\tBOOST_CHECK(TmpS == (R1S >> i));\n+\n+\tshiftArrayLeft(TmpArray, MaxArray, 20, i);\n+\tBOOST_CHECK(uint160(std::vector<unsigned char>(&TmpArray[0],&TmpArray[0]+20)) == (MaxS << i));\n+\tTmpS = MaxS; TmpS <<= i;\n+\tBOOST_CHECK(TmpS == (MaxS << i));\n+\n+\tshiftArrayRight(TmpArray, MaxArray, 20, i);\n+\tBOOST_CHECK(uint160(std::vector<unsigned char>(&TmpArray[0],&TmpArray[0]+20)) == (MaxS >> i));\n+\tTmpS = MaxS; TmpS >>= i;\n+\tBOOST_CHECK(TmpS == (MaxS >> i));\n+    }\n+    uint160 c1S = uint160(0x0123456789abcdefULL);\n+    uint160 c2S = c1S << 80;\n+    for (unsigned int i = 0; i < 80; ++i) {\n+\tBOOST_CHECK((c1S << i) == (c2S >> (80-i)));\n+    }\n+    for (unsigned int i = 80; i < 160; ++i) {\n+\tBOOST_CHECK((c1S << i) == (c2S << (i-80)));\n+    }\n+\n }\n \n+BOOST_AUTO_TEST_CASE( unaryOperators ) // !    ~    -\n+{\n+    BOOST_CHECK(!ZeroL);  BOOST_CHECK(!ZeroS);\n+    BOOST_CHECK(!(!OneL));BOOST_CHECK(!(!OneS));\n+    for (unsigned int i = 0; i < 256; ++i) \n+\tBOOST_CHECK(!(!(OneL<<i)));\n+    for (unsigned int i = 0; i < 160; ++i) \n+\tBOOST_CHECK(!(!(OneS<<i)));\n+    BOOST_CHECK(!(!R1L));BOOST_CHECK(!(!R1S));\n+    BOOST_CHECK(!(!R2S));BOOST_CHECK(!(!R2S)); \n+    BOOST_CHECK(!(!MaxL));BOOST_CHECK(!(!MaxS));\n+\n+    BOOST_CHECK(~ZeroL == MaxL); BOOST_CHECK(~ZeroS == MaxS);\n+\n+    unsigned char TmpArray[32];\n+    for (unsigned int i = 0; i < 32; ++i) { TmpArray[i] = ~R1Array[i]; } \n+    BOOST_CHECK(uint256(std::vector<unsigned char>(&TmpArray[0],&TmpArray[0]+32)) == (~R1L));\n+    BOOST_CHECK(uint160(std::vector<unsigned char>(&TmpArray[0],&TmpArray[0]+20)) == (~R1S));\n+\n+    BOOST_CHECK(-ZeroL == ZeroL); BOOST_CHECK(-ZeroS == ZeroS);\n+    BOOST_CHECK(-R1L == uint256(\"82e21a15064ea92acdf70fcc4a557edd2d2dcaa2a1edd6d4edeea93024b5ad64\"));\n+    BOOST_CHECK(-R1S == uint160(\"4a557edd2d2dcaa2a1edd6d4edeea93024b5ad64\"));\n+    for (unsigned int i = 0; i < 256; ++i) \n+\tBOOST_CHECK(-(OneL<<i) == (MaxL << i));\n+    for (unsigned int i = 0; i < 160; ++i) \n+\tBOOST_CHECK(-(OneS<<i) == (MaxS << i));\n+}\n+\n+\n+// Check if doing _A_ _OP_ _B_ results in the same as applying _OP_ onto each\n+// element of Aarray and Barray, and then converting the result into a uint256.\n+#define CHECKBITWISEOPERATOR(_A_,_B_,_OP_) \\\n+    for (unsigned int i = 0; i < 32; ++i) { TmpArray[i] = _A_##Array[i] _OP_ _B_##Array[i]; } \\\n+    BOOST_CHECK(uint256(std::vector<unsigned char>(&TmpArray[0],&TmpArray[0]+32)) == (_A_##L _OP_ _B_##L)); \\\n+    for (unsigned int i = 0; i < 20; ++i) { TmpArray[i] = _A_##Array[i] _OP_ _B_##Array[i]; } \\\n+    BOOST_CHECK(uint160(std::vector<unsigned char>(&TmpArray[0],&TmpArray[0]+20)) == (_A_##S _OP_ _B_##S));\n+\n+#define CHECKASSIGNMENTOPERATOR(_A_,_B_,_OP_) \\\n+    TmpL = _A_##L; TmpL _OP_##= _B_##L; BOOST_CHECK(TmpL == (_A_##L _OP_ _B_##L)); \\\n+    TmpS = _A_##S; TmpS _OP_##= _B_##S; BOOST_CHECK(TmpS == (_A_##S _OP_ _B_##S));\n+\n+BOOST_AUTO_TEST_CASE( bitwiseOperators ) \n+{\n+    unsigned char TmpArray[32];\n+    \n+    CHECKBITWISEOPERATOR(R1,R2,|)\n+    CHECKBITWISEOPERATOR(R1,R2,^)\n+    CHECKBITWISEOPERATOR(R1,R2,&)\n+    CHECKBITWISEOPERATOR(R1,Zero,|)\n+    CHECKBITWISEOPERATOR(R1,Zero,^)\n+    CHECKBITWISEOPERATOR(R1,Zero,&)\n+    CHECKBITWISEOPERATOR(R1,Max,|)\n+    CHECKBITWISEOPERATOR(R1,Max,^)\n+    CHECKBITWISEOPERATOR(R1,Max,&)\n+    CHECKBITWISEOPERATOR(Zero,R1,|)\n+    CHECKBITWISEOPERATOR(Zero,R1,^)\n+    CHECKBITWISEOPERATOR(Zero,R1,&)\n+    CHECKBITWISEOPERATOR(Max,R1,|)\n+    CHECKBITWISEOPERATOR(Max,R1,^)\n+    CHECKBITWISEOPERATOR(Max,R1,&)\n+\n+    uint256 TmpL;\n+    uint160 TmpS;\n+    CHECKASSIGNMENTOPERATOR(R1,R2,|)\n+    CHECKASSIGNMENTOPERATOR(R1,R2,^)\n+    CHECKASSIGNMENTOPERATOR(R1,R2,&)\n+    CHECKASSIGNMENTOPERATOR(R1,Zero,|)\n+    CHECKASSIGNMENTOPERATOR(R1,Zero,^)\n+    CHECKASSIGNMENTOPERATOR(R1,Zero,&)\n+    CHECKASSIGNMENTOPERATOR(R1,Max,|)\n+    CHECKASSIGNMENTOPERATOR(R1,Max,^)\n+    CHECKASSIGNMENTOPERATOR(R1,Max,&)\n+    CHECKASSIGNMENTOPERATOR(Zero,R1,|)\n+    CHECKASSIGNMENTOPERATOR(Zero,R1,^)\n+    CHECKASSIGNMENTOPERATOR(Zero,R1,&)\n+    CHECKASSIGNMENTOPERATOR(Max,R1,|)\n+    CHECKASSIGNMENTOPERATOR(Max,R1,^)\n+    CHECKASSIGNMENTOPERATOR(Max,R1,&)\n+\n+    uint64_t Tmp64 = 0xe1db685c9a0b47a2ULL; \n+    TmpL = R1L; TmpL |= Tmp64;  BOOST_CHECK(TmpL == (R1L | uint256(Tmp64)));\n+    TmpS = R1S; TmpS |= Tmp64;  BOOST_CHECK(TmpS == (R1S | uint160(Tmp64)));\n+    TmpL = R1L; TmpL |= 0; BOOST_CHECK(TmpL == R1L);\n+    TmpS = R1S; TmpS |= 0; BOOST_CHECK(TmpS == R1S);\n+    TmpL ^= 0; BOOST_CHECK(TmpL == R1L);\n+    TmpS ^= 0; BOOST_CHECK(TmpS == R1S);\n+    TmpL ^= Tmp64;  BOOST_CHECK(TmpL == (R1L ^ uint256(Tmp64)));\n+    TmpS ^= Tmp64;  BOOST_CHECK(TmpS == (R1S ^ uint160(Tmp64)));\n+}\n+\n+BOOST_AUTO_TEST_CASE( comparison ) // <= >= < >\n+{\n+    uint256 TmpL;\n+    for (unsigned int i = 0; i < 256; ++i) {\n+\tTmpL= OneL<< i;\n+\tBOOST_CHECK( TmpL >= ZeroL && TmpL > ZeroL && ZeroL < TmpL && ZeroL <= TmpL);\n+\tBOOST_CHECK( TmpL >= 0 && TmpL > 0 && 0 < TmpL && 0 <= TmpL);\n+\tTmpL |= R1L;\n+\tBOOST_CHECK( TmpL >= R1L ); BOOST_CHECK( (TmpL == R1L) != (TmpL > R1L)); BOOST_CHECK( (TmpL == R1L) || !( TmpL <= R1L));\n+\tBOOST_CHECK( R1L <= TmpL ); BOOST_CHECK( (R1L == TmpL) != (R1L < TmpL)); BOOST_CHECK( (TmpL == R1L) || !( R1L >= TmpL));\n+\tBOOST_CHECK(! (TmpL < R1L)); BOOST_CHECK(! (R1L > TmpL));\n+    }\n+    uint160 TmpS;\n+    for (unsigned int i = 0; i < 160; ++i) {\n+\tTmpS= OneS<< i;\n+\tBOOST_CHECK( TmpS >= ZeroS && TmpS > ZeroS && ZeroS < TmpS && ZeroS <= TmpS);\n+\tBOOST_CHECK( TmpS >= 0 && TmpS > 0 && 0 < TmpS && 0 <= TmpS);\n+\tTmpS |= R1S;\n+\tBOOST_CHECK( TmpS >= R1S ); BOOST_CHECK( (TmpS == R1S) != (TmpS > R1S)); BOOST_CHECK( (TmpS == R1S) || !( TmpS <= R1S));\n+\tBOOST_CHECK( R1S <= TmpS ); BOOST_CHECK( (R1S == TmpS) != (R1S < TmpS)); BOOST_CHECK( (TmpS == R1S) || !( R1S >= TmpS));\n+\tBOOST_CHECK(! (TmpS < R1S)); BOOST_CHECK(! (R1S > TmpS));\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE( plusMinus ) \n+{\n+    uint256 TmpL = 0;\n+    BOOST_CHECK(R1L+R2L == uint256(\"549FB09FEA236A1EA3E31D4D58F1B1369288D204211CA751527CFC175767850C\"));\n+    TmpL += R1L;\n+    BOOST_CHECK(TmpL == R1L);\n+    TmpL += R2L;\n+    BOOST_CHECK(TmpL == R1L + R2L);\n+    BOOST_CHECK(OneL+MaxL == ZeroL);\n+    BOOST_CHECK(MaxL+OneL == ZeroL);\n+    for (unsigned int i = 1; i < 256; ++i) {\n+\tBOOST_CHECK( (MaxL >> i) + OneL == (HalfL >> (i-1)) );\n+\tBOOST_CHECK( OneL + (MaxL >> i) == (HalfL >> (i-1)) );\n+\tTmpL = (MaxL>>i); TmpL += OneL;\n+\tBOOST_CHECK( TmpL == (HalfL >> (i-1)) );\n+\tTmpL = (MaxL>>i); TmpL += 1;\n+\tBOOST_CHECK( TmpL == (HalfL >> (i-1)) );\n+\tTmpL = (MaxL>>i); \n+\tBOOST_CHECK( TmpL++ == (MaxL>>i) );\n+\tBOOST_CHECK( TmpL == (HalfL >> (i-1)));\n+    }\n+    BOOST_CHECK(uint256(0xbedc77e27940a7ULL) + 0xee8d836fce66fbULL == uint256(0xbedc77e27940a7ULL  + 0xee8d836fce66fbULL));\n+    TmpL = uint256(0xbedc77e27940a7ULL); TmpL += 0xee8d836fce66fbULL;\n+    BOOST_CHECK(TmpL == uint256(0xbedc77e27940a7ULL+0xee8d836fce66fbULL));\n+    TmpL -= 0xee8d836fce66fbULL;  BOOST_CHECK(TmpL == 0xbedc77e27940a7ULL);\n+    TmpL = R1L;\n+    BOOST_CHECK(++TmpL == R1L+1);\n+\n+    BOOST_CHECK(R1L -(-R2L) == R1L+R2L);\n+    BOOST_CHECK(R1L -(-OneL) == R1L+OneL);\n+    BOOST_CHECK(R1L - OneL == R1L+(-OneL));\n+    for (unsigned int i = 1; i < 256; ++i) {\n+\tBOOST_CHECK((MaxL>>i) - (-OneL)  == (HalfL >> (i-1)));\n+\tBOOST_CHECK((HalfL >> (i-1)) - OneL == (MaxL>>i));\n+\tTmpL = (HalfL >> (i-1));\n+\tBOOST_CHECK(TmpL-- == (HalfL >> (i-1)));\n+\tBOOST_CHECK(TmpL == (MaxL >> i));\n+\tTmpL = (HalfL >> (i-1));\n+\tBOOST_CHECK(--TmpL == (MaxL >> i));\n+    }\n+    TmpL = R1L;\n+    BOOST_CHECK(--TmpL == R1L-1);\n+\n+    // 160-bit; copy-pasted\n+    uint160 TmpS = 0;\n+    BOOST_CHECK(R1S+R2S == uint160(\"58F1B1369288D204211CA751527CFC175767850C\"));",
      "path": "src/test/uint256_tests.cpp",
      "position": null,
      "original_position": 460,
      "commit_id": "daa6b20e29f3926a16d4da6962ff00b74623fc6b",
      "original_commit_id": "b03ca188f3d433e209ccd8b62c155a5feb5de94a",
      "in_reply_to_id": null,
      "user": {
        "login": "tholenst",
        "id": 4568264,
        "node_id": "MDQ6VXNlcjQ1NjgyNjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4568264?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tholenst",
        "html_url": "https://github.com/tholenst",
        "followers_url": "https://api.github.com/users/tholenst/followers",
        "following_url": "https://api.github.com/users/tholenst/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tholenst/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tholenst/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tholenst/subscriptions",
        "organizations_url": "https://api.github.com/users/tholenst/orgs",
        "repos_url": "https://api.github.com/users/tholenst/repos",
        "events_url": "https://api.github.com/users/tholenst/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tholenst/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "OK, there are a few more of those.\n",
      "created_at": "2013-12-15T20:56:59Z",
      "updated_at": "2013-12-25T10:16:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/3422#discussion_r8356222",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/8356222"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/3422"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/8356230",
      "pull_request_review_id": null,
      "id": 8356230,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgzNTYyMzA=",
      "diff_hunk": "@@ -1,29 +1,642 @@\n+#include <boost/test/unit_test.hpp>\n+#include <stdint.h>\n+#include <sstream>\n+#include <iomanip>\n+#include <limits>\n+#include <cmath>\n #include \"uint256.h\"\n #include <string>\n+#include \"version.h\"\n \n-#include <stdint.h>\n+BOOST_AUTO_TEST_SUITE(uint256_tests)\n \n-#include <boost/test/unit_test.hpp>\n+const unsigned char R1Array[] = \n+    \"\\x9c\\x52\\x4a\\xdb\\xcf\\x56\\x11\\x12\\x2b\\x29\\x12\\x5e\\x5d\\x35\\xd2\\xd2\"\n+    \"\\x22\\x81\\xaa\\xb5\\x33\\xf0\\x08\\x32\\xd5\\x56\\xb1\\xf9\\xea\\xe5\\x1d\\x7d\";\n+const uint256 R1L = uint256(std::vector<unsigned char>(&R1Array[0],&R1Array[0]+32));",
      "path": "src/test/uint256_tests.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "daa6b20e29f3926a16d4da6962ff00b74623fc6b",
      "original_commit_id": "b03ca188f3d433e209ccd8b62c155a5feb5de94a",
      "in_reply_to_id": null,
      "user": {
        "login": "tholenst",
        "id": 4568264,
        "node_id": "MDQ6VXNlcjQ1NjgyNjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4568264?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tholenst",
        "html_url": "https://github.com/tholenst",
        "followers_url": "https://api.github.com/users/tholenst/followers",
        "following_url": "https://api.github.com/users/tholenst/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tholenst/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tholenst/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tholenst/subscriptions",
        "organizations_url": "https://api.github.com/users/tholenst/orgs",
        "repos_url": "https://api.github.com/users/tholenst/repos",
        "events_url": "https://api.github.com/users/tholenst/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tholenst/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think that wouldn't be proper. If I understand C correctly, the string constant above is null terminated, and so has 33 elements.\n",
      "created_at": "2013-12-15T20:58:10Z",
      "updated_at": "2013-12-25T10:16:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/3422#discussion_r8356230",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/8356230"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/3422"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/8356236",
      "pull_request_review_id": null,
      "id": 8356236,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgzNTYyMzY=",
      "diff_hunk": "@@ -1,29 +1,642 @@\n+#include <boost/test/unit_test.hpp>\n+#include <stdint.h>\n+#include <sstream>\n+#include <iomanip>\n+#include <limits>\n+#include <cmath>\n #include \"uint256.h\"\n #include <string>\n+#include \"version.h\"\n \n-#include <stdint.h>\n+BOOST_AUTO_TEST_SUITE(uint256_tests)\n \n-#include <boost/test/unit_test.hpp>\n+const unsigned char R1Array[] = \n+    \"\\x9c\\x52\\x4a\\xdb\\xcf\\x56\\x11\\x12\\x2b\\x29\\x12\\x5e\\x5d\\x35\\xd2\\xd2\"\n+    \"\\x22\\x81\\xaa\\xb5\\x33\\xf0\\x08\\x32\\xd5\\x56\\xb1\\xf9\\xea\\xe5\\x1d\\x7d\";\n+const uint256 R1L = uint256(std::vector<unsigned char>(&R1Array[0],&R1Array[0]+32));",
      "path": "src/test/uint256_tests.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "daa6b20e29f3926a16d4da6962ff00b74623fc6b",
      "original_commit_id": "b03ca188f3d433e209ccd8b62c155a5feb5de94a",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "a[b] is semantically equal to *(a+b). Not sure what the string constant definition has to do with it.\n",
      "created_at": "2013-12-15T20:59:17Z",
      "updated_at": "2013-12-25T10:16:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/3422#discussion_r8356236",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/8356236"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/3422"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/8356238",
      "pull_request_review_id": null,
      "id": 8356238,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgzNTYyMzg=",
      "diff_hunk": "@@ -1,29 +1,642 @@\n+#include <boost/test/unit_test.hpp>\n+#include <stdint.h>\n+#include <sstream>\n+#include <iomanip>\n+#include <limits>\n+#include <cmath>\n #include \"uint256.h\"\n #include <string>\n+#include \"version.h\"\n \n-#include <stdint.h>\n+BOOST_AUTO_TEST_SUITE(uint256_tests)\n \n-#include <boost/test/unit_test.hpp>\n+const unsigned char R1Array[] = \n+    \"\\x9c\\x52\\x4a\\xdb\\xcf\\x56\\x11\\x12\\x2b\\x29\\x12\\x5e\\x5d\\x35\\xd2\\xd2\"\n+    \"\\x22\\x81\\xaa\\xb5\\x33\\xf0\\x08\\x32\\xd5\\x56\\xb1\\xf9\\xea\\xe5\\x1d\\x7d\";\n+const uint256 R1L = uint256(std::vector<unsigned char>(&R1Array[0],&R1Array[0]+32));",
      "path": "src/test/uint256_tests.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "daa6b20e29f3926a16d4da6962ff00b74623fc6b",
      "original_commit_id": "b03ca188f3d433e209ccd8b62c155a5feb5de94a",
      "in_reply_to_id": null,
      "user": {
        "login": "tholenst",
        "id": 4568264,
        "node_id": "MDQ6VXNlcjQ1NjgyNjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4568264?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tholenst",
        "html_url": "https://github.com/tholenst",
        "followers_url": "https://api.github.com/users/tholenst/followers",
        "following_url": "https://api.github.com/users/tholenst/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tholenst/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tholenst/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tholenst/subscriptions",
        "organizations_url": "https://api.github.com/users/tholenst/orgs",
        "repos_url": "https://api.github.com/users/tholenst/repos",
        "events_url": "https://api.github.com/users/tholenst/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tholenst/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oh sorry, I read the wrong line :) Yes, you're right.\n",
      "created_at": "2013-12-15T21:00:10Z",
      "updated_at": "2013-12-25T10:16:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/3422#discussion_r8356238",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/8356238"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/3422"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/8494346",
      "pull_request_review_id": null,
      "id": 8494346,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0OTQzNDY=",
      "diff_hunk": "@@ -638,147 +630,4 @@ class uint256 : public base_uint256\n inline const uint256 operator+(const uint256& a, const uint256& b)      { return (base_uint256)a +  (base_uint256)b; }\n inline const uint256 operator-(const uint256& a, const uint256& b)      { return (base_uint256)a -  (base_uint256)b; }\n \n-\n-\n-\n-\n-\n-\n-\n-\n-\n-#ifdef TEST_UINT256",
      "path": "src/uint256.h",
      "position": 63,
      "original_position": 70,
      "commit_id": "daa6b20e29f3926a16d4da6962ff00b74623fc6b",
      "original_commit_id": "d1490c69b3a3fae776ef5c6b6c7c0c71aa9a61ee",
      "in_reply_to_id": null,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, let's remove this.\n",
      "created_at": "2013-12-20T07:59:09Z",
      "updated_at": "2013-12-25T10:16:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/3422#discussion_r8494346",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/8494346"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/3422"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 650,
      "original_line": null,
      "side": "RIGHT"
    }
  ]
}