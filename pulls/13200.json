{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200",
    "id": 186946705,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MTg2OTQ2NzA1",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13200",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/13200.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/13200.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13200",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13200/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/74ae99112e972225c8b44c62ace25dbf17fc0ee9",
    "number": 13200,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "Process logs in a separate thread",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This changeset renders and flushes log messages in a dedicated thread, preventing the originating thread from blocking (or failing) on fwrite, fflush, or the various string manipulations done on log messages. Originating threads push log messages into a buffer that is continually flushed. \r\n\r\nBenchmarks live in the comments below.\r\n\r\nOpen questions:\r\n- Do we want this behavior by default? I think so, given that it seems safer and more performant than doing log processing synchronously with Important Stuff.\r\n- Do we want to allow an opt-out configuration option that makes log processing synchronous again?\r\n- The ring buffer implementation allows either overwriting existing data or blocking when at full capacity. In the case of logging, I've set it to block and wait for capacity instead of dropping messages. Does this seem right?\r\n\r\nFuture work:\r\n- Reconcile this change with https://github.com/bitcoin/bitcoin/pull/13168 in case that's merged first (I have a patch)\r\n- Even when logging is disabled, buffer debug logs without flushing and then handle SIGSEGV et al by flushing the log buffer (idea being to give the user crash diagnostics).\r\n",
    "labels": [
      {
        "id": 241832923,
        "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
        "name": "Utils/log/libs",
        "description": "",
        "color": "5319e7",
        "default": false
      },
      {
        "id": 749416508,
        "node_id": "MDU6TGFiZWw3NDk0MTY1MDg=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Up%20for%20grabs",
        "name": "Up for grabs",
        "color": "99a810",
        "default": false
      }
    ],
    "active_lock_reason": "resolved",
    "created_at": "2018-05-09T14:51:21Z",
    "updated_at": "2022-02-15T10:33:32Z",
    "closed_at": "2018-12-14T20:22:24Z",
    "mergeable": false,
    "mergeable_state": "dirty",
    "merge_commit_sha": "e201a54efe13f2d44c32fc39d251bd2ea60257ea",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": false,
    "head": {
      "label": "jamesob:2018-05-asynclog",
      "ref": "2018-05-asynclog",
      "sha": "74ae99112e972225c8b44c62ace25dbf17fc0ee9",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 42077031,
        "node_id": "MDEwOlJlcG9zaXRvcnk0MjA3NzAzMQ==",
        "name": "bitcoin",
        "full_name": "jamesob/bitcoin",
        "owner": {
          "login": "jamesob",
          "id": 73197,
          "node_id": "MDQ6VXNlcjczMTk3",
          "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/jamesob",
          "html_url": "https://github.com/jamesob",
          "followers_url": "https://api.github.com/users/jamesob/followers",
          "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
          "organizations_url": "https://api.github.com/users/jamesob/orgs",
          "repos_url": "https://api.github.com/users/jamesob/repos",
          "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/jamesob/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/jamesob/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/jamesob/bitcoin",
        "archive_url": "https://api.github.com/repos/jamesob/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/jamesob/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/jamesob/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/jamesob/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/jamesob/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/jamesob/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/jamesob/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/jamesob/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/jamesob/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/jamesob/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/jamesob/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/jamesob/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/jamesob/bitcoin/events",
        "forks_url": "https://api.github.com/repos/jamesob/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/jamesob/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/jamesob/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/jamesob/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/jamesob/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/jamesob/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/jamesob/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/jamesob/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/jamesob/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/jamesob/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/jamesob/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/jamesob/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/jamesob/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/jamesob/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/jamesob/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/jamesob/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:jamesob/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/jamesob/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/jamesob/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/jamesob/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/jamesob/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/jamesob/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/jamesob/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/jamesob/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/jamesob/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/jamesob/bitcoin/hooks",
        "svn_url": "https://github.com/jamesob/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 2,
        "stargazers_count": 4,
        "watchers_count": 4,
        "size": 252891,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-05-31T19:20:56Z",
        "created_at": "2015-09-07T22:18:03Z",
        "updated_at": "2023-05-05T06:31:51Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "6916024768ec57a00f54224640ab4e4871d2a30a",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69818,
        "watchers_count": 69818,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T22:42:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T00:30:39Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 160,
    "deletions": 2,
    "changed_files": 3,
    "commits": 1,
    "review_comments": 48,
    "comments": 25
  },
  "events": [
    {
      "event": "labeled",
      "id": 1617825350,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDE2MTc4MjUzNTA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1617825350",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-09T14:53:14Z",
      "label": {
        "name": "Utils/log/libs",
        "color": "5319e7"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1617838254,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTYxNzgzODI1NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1617838254",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-09T14:58:26Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1617843507,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTYxNzg0MzUwNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1617843507",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-09T15:00:35Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1617891288,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTYxNzg5MTI4OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1617891288",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-09T15:20:38Z"
    },
    {
      "event": "reviewed",
      "id": 118785692,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTE4Nzg1Njky",
      "url": null,
      "actor": null,
      "commit_id": "f3f96027ebf05c267fb19e4bd37562c35dc025e3",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#pullrequestreview-118785692",
      "submitted_at": "2018-05-09T15:24:19Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
    },
    {
      "event": "commented",
      "id": 387779854,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM4Nzc3OTg1NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/387779854",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-09T15:32:31Z",
      "updated_at": "2018-05-09T15:32:31Z",
      "author_association": "MEMBER",
      "body": "Concept ACK.\r\n\r\nMy thoughts on your open questions:\r\n\r\n- Do we want this behavior by default?\r\n[JN] Yes\r\n- Do we want to allow an opt-out configuration option that makes log processing synchronous again\r\n[JN] Yes\r\n- The ring buffer implementation allows either overwriting existing data or blocking when at full capacity. In the case of logging, I've set it to block and wait for capacity instead of dropping messages. Does this seem right?\r\n[JN] I think there are at least three options here:\r\n    1. overwrite existing data\r\n    2. drop new messages\r\n    3. block\r\nI'd go with (2), but push a final message to the ring buffer saying `Logging buffer full - dropping new log messages`, and then when the ring buffer is accepting messages again, push a message saying `Logging buffer accepting new messages`. That makes it very clear to anyone reading the log that messages were dropped between timestamp A and timestamp B.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#issuecomment-387779854",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13200"
    },
    {
      "event": "commented",
      "id": 387820199,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM4NzgyMDE5OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/387820199",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-09T17:48:09Z",
      "updated_at": "2018-05-09T17:48:09Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK!\r\n\r\nAgree with @jnewbery regarding the open questions.\r\n\r\nBenchmarks would be interesting.",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#issuecomment-387820199",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13200"
    },
    {
      "event": "mentioned",
      "id": 1618203156,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTYxODIwMzE1Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1618203156",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-09T17:48:09Z"
    },
    {
      "event": "subscribed",
      "id": 1618203157,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE2MTgyMDMxNTc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1618203157",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-09T17:48:09Z"
    },
    {
      "event": "commented",
      "id": 387829283,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM4NzgyOTI4Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/387829283",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-09T18:17:32Z",
      "updated_at": "2018-05-09T18:17:32Z",
      "author_association": "MEMBER",
      "body": "Wouldn't blocking be the status-quo and thus preferable for now?",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#issuecomment-387829283",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13200"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1618267496,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTYxODI2NzQ5Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1618267496",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-09T18:20:27Z"
    },
    {
      "event": "reviewed",
      "id": 118924109,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTE4OTI0MTA5",
      "url": null,
      "actor": null,
      "commit_id": "3c13cef1550f4a1f03d6f46119474aff658156b3",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK\r\n\r\nGood idea :)\r\n\r\nJust a few things I've spotted.\r\n\r\nRegarding your questions:\r\n\r\n> Do we want this behavior by default? I think so, given that it seems safer and more performant than doing log processing synchronously with Important Stuff.\r\n\r\nYes\r\n\r\n> Do we want to allow an opt-out configuration option that makes log processing synchronous again?\r\n\r\nI'm a bit against adding config options for these kind of things. It either should work in all cases or not be used. I think for logging we should stick to one version and not have it user configurable.\r\n\r\n> The ring buffer implementation allows either overwriting existing data or blocking when at full capacity. In the case of logging, I've set it to block and wait for capacity instead of dropping messages. Does this seem right?\r\n\r\nI'm very against dropping logging data. It shouldn't happen. The threads pushing logs should wait if it does block but the buffer should be big enough that this is rare anyway.",
      "user": {
        "login": "donaloconnor",
        "id": 6394033,
        "node_id": "MDQ6VXNlcjYzOTQwMzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6394033?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/donaloconnor",
        "html_url": "https://github.com/donaloconnor",
        "followers_url": "https://api.github.com/users/donaloconnor/followers",
        "following_url": "https://api.github.com/users/donaloconnor/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/donaloconnor/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/donaloconnor/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/donaloconnor/subscriptions",
        "organizations_url": "https://api.github.com/users/donaloconnor/orgs",
        "repos_url": "https://api.github.com/users/donaloconnor/repos",
        "events_url": "https://api.github.com/users/donaloconnor/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/donaloconnor/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#pullrequestreview-118924109",
      "submitted_at": "2018-05-09T22:58:36Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1620418271,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTYyMDQxODI3MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1620418271",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-10T18:37:46Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1620560844,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTYyMDU2MDg0NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1620560844",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-10T19:51:24Z"
    },
    {
      "event": "commented",
      "id": 388176097,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM4ODE3NjA5Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/388176097",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-10T20:30:25Z",
      "updated_at": "2018-05-10T20:30:25Z",
      "author_association": "MEMBER",
      "body": "I've pushed changes that address @donaloconnor's good feedback (thanks, Donal).\r\n\r\nStill trying to decide what to do re: blocking vs. dropping messages; I'm inclined towards the approach that @jnewbery suggests since it seems to be the safest.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#issuecomment-388176097",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13200"
    },
    {
      "event": "mentioned",
      "id": 1620639012,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTYyMDYzOTAxMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1620639012",
      "actor": {
        "login": "donaloconnor",
        "id": 6394033,
        "node_id": "MDQ6VXNlcjYzOTQwMzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6394033?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/donaloconnor",
        "html_url": "https://github.com/donaloconnor",
        "followers_url": "https://api.github.com/users/donaloconnor/followers",
        "following_url": "https://api.github.com/users/donaloconnor/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/donaloconnor/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/donaloconnor/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/donaloconnor/subscriptions",
        "organizations_url": "https://api.github.com/users/donaloconnor/orgs",
        "repos_url": "https://api.github.com/users/donaloconnor/repos",
        "events_url": "https://api.github.com/users/donaloconnor/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/donaloconnor/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-10T20:30:25Z"
    },
    {
      "event": "subscribed",
      "id": 1620639013,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE2MjA2MzkwMTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1620639013",
      "actor": {
        "login": "donaloconnor",
        "id": 6394033,
        "node_id": "MDQ6VXNlcjYzOTQwMzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6394033?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/donaloconnor",
        "html_url": "https://github.com/donaloconnor",
        "followers_url": "https://api.github.com/users/donaloconnor/followers",
        "following_url": "https://api.github.com/users/donaloconnor/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/donaloconnor/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/donaloconnor/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/donaloconnor/subscriptions",
        "organizations_url": "https://api.github.com/users/donaloconnor/orgs",
        "repos_url": "https://api.github.com/users/donaloconnor/repos",
        "events_url": "https://api.github.com/users/donaloconnor/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/donaloconnor/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-10T20:30:25Z"
    },
    {
      "event": "mentioned",
      "id": 1620639014,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTYyMDYzOTAxNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1620639014",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-10T20:30:25Z"
    },
    {
      "event": "subscribed",
      "id": 1620639015,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE2MjA2MzkwMTU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1620639015",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-10T20:30:25Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1622669950,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTYyMjY2OTk1MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1622669950",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-11T19:53:17Z"
    },
    {
      "event": "reviewed",
      "id": 119560417,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTE5NTYwNDE3",
      "url": null,
      "actor": null,
      "commit_id": "5dbf3bf87dcc29202bce11dbc17cbe183af7e92f",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "left some comments - two general ones though:\r\n- you really wrote a thread safe ringbuffer - if you think this will be useful elsewhere, consider having just a pure implementation of the ringbuffer with a derivation (or wrapper) that adds the synchronization logic\r\n- Some of your api naming/consistency is a bit confusing. You have:\r\n`PushBack()` - might block if no_overwrite is set\r\n`PopFront()` - never blocks - user must know data is available\r\n`PollForOne()` - blocks, might return null\r\n\r\nOn the block vs drop debate - I think I would vote in the blocking camp since that is essentially current behavior, followed by dropping older messages\r\n",
      "user": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#pullrequestreview-119560417",
      "submitted_at": "2018-05-13T16:26:26Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
    },
    {
      "event": "commented",
      "id": 388847174,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM4ODg0NzE3NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/388847174",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-14T14:56:16Z",
      "updated_at": "2018-05-14T14:56:16Z",
      "author_association": "MEMBER",
      "body": "Thanks for the thorough review and good feedback here, @skeees. I'll address most of your comments in an upcoming push.\r\n\r\nSadly, the benchmarks aren't looking good on this one. Either my implementation of the ringbuffer is dog slow or this Concept is eminently NACKable. \r\n\r\nDoing an IBD to height 250,000 from one (chain-synced) virtual machine to another (unsynced) over my local network, this PR performed roughly 77% _slower_ than master `196c5a` (9m31s vs. 16m57s). That's a baffling deficit but I've been able to reproduce it consistently.\r\n\r\nI'm going to try applying @TheBlueMatt's previous work (https://github.com/bitcoinfibre/bitcoinfibre/commit/6b6a3aef0663775b63bac7d0aa07ec5fc4eb9fc9) to master and see if that performs any better. If it doesn't, I'm going to just abandon async logging and continue work on a periodic benchmarking system.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#issuecomment-388847174",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13200"
    },
    {
      "event": "mentioned",
      "id": 1625026494,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTYyNTAyNjQ5NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1625026494",
      "actor": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-14T14:56:16Z"
    },
    {
      "event": "subscribed",
      "id": 1625026496,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE2MjUwMjY0OTY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1625026496",
      "actor": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-14T14:56:16Z"
    },
    {
      "event": "mentioned",
      "id": 1625026498,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTYyNTAyNjQ5OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1625026498",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-14T14:56:16Z"
    },
    {
      "event": "subscribed",
      "id": 1625026499,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE2MjUwMjY0OTk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1625026499",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-14T14:56:16Z"
    },
    {
      "event": "commented",
      "id": 388854505,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM4ODg1NDUwNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/388854505",
      "actor": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-14T15:16:10Z",
      "updated_at": "2018-05-14T15:16:10Z",
      "author_association": "CONTRIBUTOR",
      "body": "I'd do some profiling / tweaking before you abandon this entirely. I'd think this should be at a minimum equivalent - and potentially substantially faster than the current way things are logged.",
      "user": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#issuecomment-388854505",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13200"
    },
    {
      "event": "commented",
      "id": 388926277,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM4ODkyNjI3Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/388926277",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-14T18:59:54Z",
      "updated_at": "2018-05-14T18:59:54Z",
      "author_association": "MEMBER",
      "body": "@TheBlueMatt's patch (https://github.com/jamesob/bitcoin/commit/7ab904ad933a7cec5c29cf4daf3f91efff93c676) is better than mine, but still a minute (i.e. 10%) slower than `master` on an SSD:\r\n\r\n### `master`\r\n```\r\nvagrant@bench:/tmp/2018-05-09-master-6186a/bitcoin$ time ./src/bitcoind -datadir=`pwd`/data -conf=`pwd`/bitcoin.conf -debug=all -printtoconsole=0 -connect=0 -addnode=10.0.0.10 -listen=1 -stopatheight=250000\r\n\r\nreal    9m33.070s\r\nuser    8m9.261s\r\nsys     3m47.927s\r\n```\r\n\r\n### `bluematt-asynclog`\r\n```\r\nvagrant@bench:/tmp/2018-05-11-2018-05-asynclog-13145/bitcoin$ rm -rf data && mkdir data && time ./src/bitcoind -datadir=`pwd`/data -conf=`pwd`/bitcoi\r\nn.conf -debug=all -printtoconsole=0 -connect=0 -addnode=10.0.0.10 -listen=1 -stopatheight=250000\r\n\r\nreal    10m26.887s\r\nuser    9m3.219s\r\nsys     4m49.201s\r\n```",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#issuecomment-388926277",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13200"
    },
    {
      "event": "mentioned",
      "id": 1625567383,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTYyNTU2NzM4Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1625567383",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-14T18:59:54Z"
    },
    {
      "event": "subscribed",
      "id": 1625567384,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE2MjU1NjczODQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1625567384",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-14T18:59:54Z"
    },
    {
      "event": "commented",
      "id": 389154500,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM4OTE1NDUwMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/389154500",
      "actor": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-15T12:49:40Z",
      "updated_at": "2018-05-15T12:49:40Z",
      "author_association": "CONTRIBUTOR",
      "body": "I was curious about the unexpectedly slow performance and tried something slightly different -  https://github.com/skeees/bitcoin/commit/1bf2307b9bf406cc199f3671e856ecd7a582b2a8\r\n\r\nits a bit messy, but good enough for benchmarking which seems to suggest it performs slightly better than the current logging, especially if you give it short workloads (e.g. do a reindex w a stopatheight of 150k) - though I imagine this effect gets washed away if you did e.g. a full IBD.",
      "user": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#issuecomment-389154500",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13200"
    },
    {
      "event": "commented",
      "id": 389294843,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM4OTI5NDg0Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/389294843",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-15T20:01:42Z",
      "updated_at": "2018-05-15T20:01:42Z",
      "author_association": "MEMBER",
      "body": "Nice, @skeees! That approach performs the best so far in terms of async logging implementations, though it's still roughly on par with master in my benchmark:\r\n\r\n```\r\nvagrant@bench:/tmp/2018-05-11-2018-05-asynclog-13145/bitcoin$ rm -rf data && mkdir data && time ./src/bitcoind -datadir=`pwd`/data -conf=`pwd`/bitcoin.conf -debug=all -printtoconsole=0 -connect=0 -addnode=10.0.0.10 -listen=1 -stopatheight=250000\r\nterminate called without an active exception\r\nAborted (core dumped)\r\n\r\nreal    9m37.566s\r\nuser    8m27.668s\r\nsys     3m38.395s\r\n```\r\n\r\n(the core dump is just an unclean shutdown of the logging thread)\r\n\r\n@skeees suggested some ideas for further improvements on his draft which he or I may fool around with.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#issuecomment-389294843",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13200"
    },
    {
      "event": "mentioned",
      "id": 1628088833,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTYyODA4ODgzMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1628088833",
      "actor": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-15T20:01:42Z"
    },
    {
      "event": "subscribed",
      "id": 1628088837,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE2MjgwODg4Mzc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1628088837",
      "actor": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-15T20:01:42Z"
    },
    {
      "event": "commented",
      "id": 389626700,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM4OTYyNjcwMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/389626700",
      "actor": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-16T18:50:44Z",
      "updated_at": "2018-05-16T18:50:44Z",
      "author_association": "CONTRIBUTOR",
      "body": "I cleaned this up a bit more and updated my branch: https://github.com/skeees/bitcoin/tree/async-log-2\r\n(still does not shutdown cleanly)\r\n\r\nFor benchmarks like the below (a reindex of 1st 100k blocks), I see a substantial improvement - that slowly fades away and longer duration things (e.g. a large IBD) is effectively equivalent - which suggests this may have some performance benefit for short bursty stuff that generates lots of logs\r\n\r\n```\r\n(~/src/bitcoin:git:master)% time ./src/bitcoind -stopatheight=100000 -noprinttoconsole -reindex -debug\r\n./src/bitcoind -stopatheight=100000 -noprinttoconsole -reindex -debug  75.24s user 20.76s system 79% cpu 2:00.70 total\r\n(~/src/bitcoin:git:async-log-2)% time ./src/bitcoind -stopatheight=100000 -noprinttoconsole -reindex -debug \r\n./src/bitcoind -stopatheight=100000 -noprinttoconsole -reindex -debug  73.26s user 9.93s system 107% cpu 1:17.38 total\r\n```",
      "user": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#issuecomment-389626700",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13200"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1637624721,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTYzNzYyNDcyMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1637624721",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-21T18:20:17Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1637635707,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTYzNzYzNTcwNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1637635707",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-21T18:26:07Z"
    },
    {
      "event": "commented",
      "id": 390773530,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM5MDc3MzUzMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/390773530",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-21T20:32:23Z",
      "updated_at": "2018-05-21T20:32:23Z",
      "author_association": "MEMBER",
      "body": "I think I'm giving up the ghost on this one. I've taken @skeees' latest work, fixed shutdown, and simplified the code a bit, but I still can't get benchmarks to show improvement.\r\n\r\nBelow is a round of three reindexes to height 100,000:\r\n\r\n### master (https://github.com/bitcoin/bitcoin/commit/196c5a947a071f7c9c5b211f0a47787a7d540ecb)\r\n\r\n```sh\r\nvagrant@bench:/tmp/2018-05-09-master-6186a/bitcoin$ for _ in `seq 3`; do time ./src/bitcoind -datadir=`pwd`/data -conf=`pwd`/bitcoin.conf -debug=all\r\n-printtoconsole=0 -connect=0 -addnode=10.0.0.10 -listen=1 -stopatheight=100000 -reindex -logasync=0; done\r\n\r\nreal    1m21.080s\r\nuser    0m33.459s\r\nsys     0m37.487s\r\n\r\nreal    1m4.716s\r\nuser    0m34.033s\r\nsys     0m33.567s\r\n\r\nreal    1m23.858s\r\nuser    0m34.043s\r\nsys     0m36.156s\r\n```\r\n\r\n### this branch  (https://github.com/bitcoin/bitcoin/pull/13200/commits/34000b1aaa626f1547ad80693e5b636857426f65)\r\n\r\n```sh\r\nvagrant@bench:/tmp/2018-05-11-2018-05-asynclog-13145/bitcoin$ for _ in `seq 3`; do time ./src/bitcoind -datadir=`pwd`/data -conf=`pwd`/bitcoin.conf -debug=all -printtoconsole=0 -connect=0 -addnode=10.0.0.10 -listen=1 -stopatheight=100000 -reindex; done\r\n\r\nreal    1m4.269s\r\nuser    0m31.258s\r\nsys     0m33.798s\r\n\r\nreal    1m30.629s\r\nuser    0m31.691s\r\nsys     0m40.961s\r\n\r\nreal    1m14.528s\r\nuser    0m32.676s\r\nsys     0m38.040s\r\n```\r\n\r\n### skeees version (https://github.com/skeees/bitcoin/commit/57dc3fcdc0b90fa4f0bff004eed8ca5ae21ad6bd)\r\n\r\n```sh\r\nvagrant@bench:/tmp/2018-05-11-2018-05-asynclog-13145/bitcoin$ for _ in `seq 3`; do time ./src/bitcoind -datadir=`pwd`/data -conf=`pwd`/bitcoin.conf -debug=all -printtoconsole=0 -connect=0 -addnode=10.0.0.10 -listen=1 -stopatheight=100000 -reindex; done\r\nterminate called without an active exception\r\nAborted (core dumped)\r\n\r\nreal    1m18.180s\r\nuser    0m33.764s\r\nsys     0m39.323s\r\nterminate called without an active exception\r\nAborted (core dumped)\r\n\r\nreal    3m17.639s\r\nuser    0m45.444s\r\nsys     2m21.804s\r\nterminate called without an active exception\r\nAborted (core dumped)\r\n\r\nreal    4m59.937s\r\nuser    0m48.212s\r\nsys     3m35.134s\r\n```\r\n\r\nCan't tell what's going on with those last two runs.\r\n\r\nIn any case, I don't think the numbers here justify the complexity of this changeset. It's surprising to me that we aren't seeing more improvement, but I've got other stuff to do. I'm going to abandon this PR for now, but if anyone wants to pick it up they're welcome to.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#issuecomment-390773530",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13200"
    },
    {
      "event": "mentioned",
      "id": 1637859974,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTYzNzg1OTk3NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1637859974",
      "actor": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-21T20:32:23Z"
    },
    {
      "event": "subscribed",
      "id": 1637859975,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE2Mzc4NTk5NzU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1637859975",
      "actor": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-21T20:32:23Z"
    },
    {
      "event": "closed",
      "id": 1637859978,
      "node_id": "MDExOkNsb3NlZEV2ZW50MTYzNzg1OTk3OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1637859978",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-21T20:32:23Z"
    },
    {
      "event": "commented",
      "id": 390776150,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM5MDc3NjE1MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/390776150",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-21T20:42:02Z",
      "updated_at": "2018-05-21T20:42:38Z",
      "author_association": "CONTRIBUTOR",
      "body": "I would like to thank you for doing this experimentation @jamesob. Negative results give insights too. Thanks!",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#issuecomment-390776150",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13200"
    },
    {
      "event": "mentioned",
      "id": 1637877520,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTYzNzg3NzUyMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1637877520",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-21T20:42:02Z"
    },
    {
      "event": "subscribed",
      "id": 1637877523,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE2Mzc4Nzc1MjM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1637877523",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-21T20:42:02Z"
    },
    {
      "event": "commented",
      "id": 391362635,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM5MTM2MjYzNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/391362635",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-23T14:13:45Z",
      "updated_at": "2018-05-23T14:13:45Z",
      "author_association": "MEMBER",
      "body": "Reopening because @skeees has some interesting bench results...",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#issuecomment-391362635",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13200"
    },
    {
      "event": "mentioned",
      "id": 1641912647,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTY0MTkxMjY0Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1641912647",
      "actor": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-23T14:13:45Z"
    },
    {
      "event": "subscribed",
      "id": 1641912649,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE2NDE5MTI2NDk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1641912649",
      "actor": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-23T14:13:45Z"
    },
    {
      "event": "reopened",
      "id": 1641912658,
      "node_id": "MDEzOlJlb3BlbmVkRXZlbnQxNjQxOTEyNjU4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1641912658",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-23T14:13:45Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1641920771,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTY0MTkyMDc3MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1641920771",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-23T14:16:53Z"
    },
    {
      "event": "commented",
      "id": 391372242,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM5MTM3MjI0Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/391372242",
      "actor": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-23T14:40:12Z",
      "updated_at": "2018-05-23T14:40:12Z",
      "author_association": "CONTRIBUTOR",
      "body": "wrote a quick benchmarking script here: https://gist.github.com/skeees/93d3ab3ce8ceabfa1b68df51d3b36b60\r\nIt compares the different logging approaches mentioned above - specifically a reindex and and ibd up to a fixed height\r\n\r\nSome sample results below (we've now had a couple of independent reproductions across a couple of different machines) - and the latest commit on this pr is consistently faster than existing implementations for microbenchmarks (100k blocks) and equivalent if you change height in the script to a larger number (e.g. if you set `HEIGHT=250000` in the script)\r\n\r\nI think, given the below, there's decent evidence that this will improve performance for bursty things, and is worth pursuing. A couple things still need to be cleaned up (shutdown mostly)\r\n\r\n(total is wall clock time)\r\n```\r\nbenchmarking reindex _pin-1805-asynclog-master\r\n59.65s user 7.97s system 197% cpu 34.296 total\r\n59.55s user 7.88s system 198% cpu 33.963 total\r\nbenchmarking reindex _pin-1805-asynclog-bluematt\r\n62.03s user 10.91s system 224% cpu 32.530 total\r\n62.88s user 11.10s system 227% cpu 32.569 total\r\nbenchmarking reindex _pin-1805-asynclog-skeees-jamesob\r\n57.02s user 5.61s system 232% cpu 26.952 total\r\n56.61s user 5.49s system 232% cpu 26.750 total\r\n\r\nbenchmarking ibd _pin-1805-asynclog-master\r\n68.38s user 11.55s system 175% cpu 45.427 total\r\n68.25s user 11.60s system 182% cpu 43.749 total\r\nbenchmarking ibd _pin-1805-asynclog-bluematt\r\n72.10s user 15.20s system 207% cpu 42.017 total\r\n72.34s user 15.10s system 207% cpu 42.170 total\r\nbenchmarking ibd _pin-1805-asynclog-skeees-jamesob\r\n65.20s user 8.46s system 210% cpu 35.001 total\r\n65.10s user 8.88s system 209% cpu 35.307 total\r\n```",
      "user": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#issuecomment-391372242",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13200"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NGFlOTkxMTJlOTcyMjI1YzhiNDRjNjJhY2UyNWRiZjE3ZmMwZWU5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/74ae99112e972225c8b44c62ace25dbf17fc0ee9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/74ae99112e972225c8b44c62ace25dbf17fc0ee9",
      "tree": {
        "sha": "a85bd2820a5b09b2dbd6ac1c11b1cd2b54fa3b69",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a85bd2820a5b09b2dbd6ac1c11b1cd2b54fa3b69"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c5870ab689995e7dc1ada530e9db27cfae9bb448",
          "sha": "c5870ab689995e7dc1ada530e9db27cfae9bb448",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c5870ab689995e7dc1ada530e9db27cfae9bb448"
        }
      ],
      "message": "logging: perform logfile writes in a separate thread\n\nInstead of flushing logs to disk synchronously within the\noriginating thread, push the log message into a ring buffer to\nbe consumed and written to disk by a separate, logging-specific\nthread.\n\nCo-authored-by: James O'Beirne <james@chaincode.com>",
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2018-05-23T14:55:05Z"
      },
      "author": {
        "name": "Jesse Cohen",
        "email": "jc@jc.lol",
        "date": "2018-05-08T16:44:27Z"
      },
      "sha": "74ae99112e972225c8b44c62ace25dbf17fc0ee9"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1642028354,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTY0MjAyODM1NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1642028354",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-23T14:55:27Z"
    },
    {
      "event": "commented",
      "id": 391428244,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM5MTQyODI0NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/391428244",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-23T17:15:11Z",
      "updated_at": "2018-05-23T17:17:11Z",
      "author_association": "CONTRIBUTOR",
      "body": "@skeees Is `_pin-1805-asynclog-master` the base case – i.e. before this PR?\r\n\r\nDo you know roughly how many log messages that were printed during the reindex and ibd rounds respectively?",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#issuecomment-391428244",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13200"
    },
    {
      "event": "mentioned",
      "id": 1642365841,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTY0MjM2NTg0MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1642365841",
      "actor": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-23T17:15:11Z"
    },
    {
      "event": "subscribed",
      "id": 1642365842,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE2NDIzNjU4NDI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1642365842",
      "actor": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-23T17:15:11Z"
    },
    {
      "event": "commented",
      "id": 391433552,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM5MTQzMzU1Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/391433552",
      "actor": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-05-23T17:32:32Z",
      "updated_at": "2018-05-23T17:34:35Z",
      "author_association": "CONTRIBUTOR",
      "body": "yeah - exactly master is a recent master (6916024768ec57a00f54224640ab4e4871d2a30a), and then i took matt's and my+jamesob's changes and rebased on top of that master - those are the 3 cases. you should be able to run that script if you wanna reproduce\r\n\r\ngood question - looks like the logs were ~150MB each run, 1.25mm lines",
      "user": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#issuecomment-391433552",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13200"
    },
    {
      "event": "closed",
      "id": 1746624222,
      "node_id": "MDExOkNsb3NlZEV2ZW50MTc0NjYyNDIyMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1746624222",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-07-22T23:49:27Z"
    },
    {
      "event": "commented",
      "id": 406906692,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjkwNjY5Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/406906692",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-07-22T23:49:28Z",
      "updated_at": "2018-07-22T23:49:28Z",
      "author_association": "MEMBER",
      "body": "<!--5d09a71f8925f3f132321140b44b946d-->The last travis run for this pull request was 60 days ago and is thus outdated. To trigger a fresh travis build, this pull request should be closed and re-opened.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#issuecomment-406906692",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13200"
    },
    {
      "event": "reopened",
      "id": 1746624225,
      "node_id": "MDEzOlJlb3BlbmVkRXZlbnQxNzQ2NjI0MjI1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1746624225",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-07-22T23:49:28Z"
    },
    {
      "event": "commented",
      "id": 414676303,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDY3NjMwMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/414676303",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-08-21T13:36:54Z",
      "updated_at": "2018-08-21T13:36:54Z",
      "author_association": "MEMBER",
      "body": "Benchmarking with bitcoinperf shows a speedup of 4.6% on IBD up to height 200,000 with this change ([details here](https://gist.github.com/jamesob/b630242d28287050628f8685934a5c4d)).",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#issuecomment-414676303",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13200"
    },
    {
      "event": "commented",
      "id": 419533677,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTUzMzY3Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/419533677",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-07T18:55:54Z",
      "updated_at": "2018-09-12T18:30:38Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->Note to reviewers: This pull request conflicts with the following ones:\n\n* #14209 (logging: Replace LogPrint macros with regular functions by MarcoFalke)\n* #13088 (Log early messages with -printtoconsole by ajtowns)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#issuecomment-419533677",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13200"
    },
    {
      "event": "commented",
      "id": 419704882,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTcwNDg4Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/419704882",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-09T10:17:37Z",
      "updated_at": "2018-09-09T10:21:05Z",
      "author_association": "CONTRIBUTOR",
      "body": ">  I'd go with (2), but push a final message to the ring buffer saying Logging buffer full - dropping new log messages, and then when the ring buffer is accepting messages again, push a message saying Logging buffer accepting new messages\r\n\r\nHow about (4)  Store a sequence number,  always overwrite.  When reading out, notice when there were missed messages via gaps in the sequence number and log \"X missed log entries\".\r\n\r\nAside, benchmarking on the first 100k blocks is something I'd strongly advise against. It's an almost completely different load than reality. The first couple hundred thousand blocks are almost completely empty, so tests against them aren't much different than a purely synthetic bench_bitcoin thing.   If you're doing a lot of this sort of testing, its useful to bring a node up to height 450k, stop it, back it up and benchmark reindexing up to 500k.\r\n\r\n",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#issuecomment-419704882",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13200"
    },
    {
      "event": "commented",
      "id": 420943850,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDk0Mzg1MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/420943850",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-13T09:29:00Z",
      "updated_at": "2018-09-13T09:29:00Z",
      "author_association": "MEMBER",
      "body": "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#issuecomment-420943850",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13200"
    },
    {
      "event": "labeled",
      "id": 1843146964,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDE4NDMxNDY5NjQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1843146964",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-13T09:29:00Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 421398482,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQyMTM5ODQ4Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/421398482",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-14T15:39:48Z",
      "updated_at": "2018-09-14T15:39:48Z",
      "author_association": "MEMBER",
      "body": "> If you're doing a lot of this sort of testing, its useful to bring a node up to height 450k, stop it, back it up and benchmark reindexing up to 500k.\r\n\r\nThat sounds much more reasonable. I'll rerun benches on that part of the chain in the next few weeks.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#issuecomment-421398482",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13200"
    },
    {
      "event": "commented",
      "id": 447457417,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NzQ1NzQxNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/447457417",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-14T20:22:23Z",
      "updated_at": "2018-12-14T20:22:23Z",
      "author_association": "MEMBER",
      "body": "<!--5fd3d806e98f4a0ca80977bb178665a0-->There hasn't been much activity lately and the patch still needs rebase, so I am closing this for now. Please let me know when you want to continue working on this, so the pull request can be re-opened.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#issuecomment-447457417",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13200"
    },
    {
      "event": "labeled",
      "id": 2027720433,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDIwMjc3MjA0MzM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2027720433",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-14T20:22:23Z",
      "label": {
        "name": "Up for grabs",
        "color": "99a810"
      }
    },
    {
      "event": "closed",
      "id": 2027720463,
      "node_id": "MDExOkNsb3NlZEV2ZW50MjAyNzcyMDQ2Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2027720463",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-14T20:22:24Z"
    },
    {
      "event": "unlabeled",
      "id": 2741494694,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50Mjc0MTQ5NDY5NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2741494694",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-24T16:50:38Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 656318985,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY1NjMxODk4NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/656318985",
      "actor": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-09T19:51:04Z",
      "updated_at": "2020-07-09T19:51:04Z",
      "author_association": "CONTRIBUTOR",
      "body": "Just a thought I had,\r\nidk if there's lock contention here but you could remove locking from this entirely and replace with atomic pointers, and then you swap the buffer pointer with a new empty buffer pointer, that way the effect on the rest of the threads should be at worse a single cache miss",
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#issuecomment-656318985",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13200"
    },
    {
      "event": "commented",
      "id": 656336168,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY1NjMzNjE2OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/656336168",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-09T20:30:33Z",
      "updated_at": "2020-07-09T20:30:33Z",
      "author_association": "MEMBER",
      "body": "> Just a thought I had\r\n\r\nI don't plan to put any more work into this, but this might be a good project to pick up for a newish contributor.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#issuecomment-656336168",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13200"
    },
    {
      "event": "locked",
      "id": 6073805518,
      "node_id": "LOE_lADOABII584TK0WTzwAAAAFqBurO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6073805518",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-15T10:33:32Z",
      "lock_reason": "resolved"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187078556",
      "pull_request_review_id": 118785692,
      "id": 187078556,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzA3ODU1Ng==",
      "diff_hunk": "@@ -271,3 +274,40 @@ void BCLog::Logger::ShrinkDebugFile()\n     else if (file != nullptr)\n         fclose(file);\n }\n+\n+namespace async_logging {\n+    using LogArgs = std::string;\n+    RingBuffer<LogArgs, 1024> log_buffer;\n+    std::unique_ptr<std::thread> flush_logs_thread;\n+    std::once_flag flush_logs_thread_started;\n+\n+    static void ConsumeLogs()\n+    {\n+        std::unique_ptr<LogArgs> next_log_line;\n+        while (next_log_line = log_buffer.PollForOne()) {",
      "path": "src/logging.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "74ae99112e972225c8b44c62ace25dbf17fc0ee9",
      "original_commit_id": "f3f96027ebf05c267fb19e4bd37562c35dc025e3",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe add batch support?",
      "created_at": "2018-05-09T15:24:18Z",
      "updated_at": "2018-05-23T14:55:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187078556",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187078556"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 287,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187192208",
      "pull_request_review_id": 118924109,
      "id": 187192208,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzE5MjIwOA==",
      "diff_hunk": "@@ -0,0 +1,145 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S, typename ST=int>",
      "path": "src/ringbuffer.h",
      "position": null,
      "original_position": 23,
      "commit_id": "74ae99112e972225c8b44c62ace25dbf17fc0ee9",
      "original_commit_id": "3c13cef1550f4a1f03d6f46119474aff658156b3",
      "in_reply_to_id": null,
      "user": {
        "login": "donaloconnor",
        "id": 6394033,
        "node_id": "MDQ6VXNlcjYzOTQwMzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6394033?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/donaloconnor",
        "html_url": "https://github.com/donaloconnor",
        "followers_url": "https://api.github.com/users/donaloconnor/followers",
        "following_url": "https://api.github.com/users/donaloconnor/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/donaloconnor/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/donaloconnor/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/donaloconnor/subscriptions",
        "organizations_url": "https://api.github.com/users/donaloconnor/orgs",
        "repos_url": "https://api.github.com/users/donaloconnor/repos",
        "events_url": "https://api.github.com/users/donaloconnor/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/donaloconnor/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Do we really need the size type template parameter? Especially if you are passing an int through as a value. `size_t` makes more sense to me since std::array is size_t and signed sizes (int) also make no sense.",
      "created_at": "2018-05-09T22:17:09Z",
      "updated_at": "2018-05-23T14:55:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187192208",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187192208"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 23,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187192592",
      "pull_request_review_id": 118924109,
      "id": 187192592,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzE5MjU5Mg==",
      "diff_hunk": "@@ -0,0 +1,145 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S, typename ST=int>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+    using size_type = ST;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }\n+    ~RingBuffer() { }\n+\n+    /** @return the number of elements in the buffer. */\n+    inline size_type Size() const {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return m_size;\n+    }\n+    inline size_type MaxSize() const { return S; }",
      "path": "src/ringbuffer.h",
      "position": null,
      "original_position": 38,
      "commit_id": "74ae99112e972225c8b44c62ace25dbf17fc0ee9",
      "original_commit_id": "3c13cef1550f4a1f03d6f46119474aff658156b3",
      "in_reply_to_id": null,
      "user": {
        "login": "donaloconnor",
        "id": 6394033,
        "node_id": "MDQ6VXNlcjYzOTQwMzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6394033?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/donaloconnor",
        "html_url": "https://github.com/donaloconnor",
        "followers_url": "https://api.github.com/users/donaloconnor/followers",
        "following_url": "https://api.github.com/users/donaloconnor/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/donaloconnor/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/donaloconnor/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/donaloconnor/subscriptions",
        "organizations_url": "https://api.github.com/users/donaloconnor/orgs",
        "repos_url": "https://api.github.com/users/donaloconnor/repos",
        "events_url": "https://api.github.com/users/donaloconnor/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/donaloconnor/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "constexpr ? I guess inline helps some here.",
      "created_at": "2018-05-09T22:19:09Z",
      "updated_at": "2018-05-23T14:55:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187192592",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187192592"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187193169",
      "pull_request_review_id": 118924109,
      "id": 187193169,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzE5MzE2OQ==",
      "diff_hunk": "@@ -0,0 +1,145 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S, typename ST=int>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+    using size_type = ST;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }\n+    ~RingBuffer() { }\n+\n+    /** @return the number of elements in the buffer. */\n+    inline size_type Size() const {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return m_size;\n+    }\n+    inline size_type MaxSize() const { return S; }\n+\n+    value_type PopFront()\n+    {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return AssumeLockedPopFront();\n+    }\n+\n+    /**\n+     * Push an element into the buffer.\n+     *\n+     * @arg no_overwrite  If true, block and wait to write instead of overwriting existing data.\n+     */\n+    size_type PushBack(value_type v, bool no_overwrite = true)\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        if (no_overwrite && m_size == S) {\n+            m_read_condvar.wait(lock, [this]() { return this->m_size < S; });\n+        }\n+        m_buffer[m_insert_at_idx] = v;\n+\n+        // We're overwriting existing data, so increment the read index too.\n+        if (m_size > 0 && m_insert_at_idx == m_read_at_idx) m_read_at_idx = IncrementIdx(m_read_at_idx);\n+        if (m_size < S) ++m_size;\n+        m_insert_at_idx = IncrementIdx(m_insert_at_idx);\n+\n+        return m_size;\n+    }\n+\n+    /** Interrupt anyone waiting for reads. */\n+    void SignalStopWaiting() {\n+        m_stop_waiting.store(true);\n+    }\n+\n+    /**\n+     * Block until the buffer has content to process, polling periodically, and\n+     * then return a pointer to an element. Allow interrupts by using SignalStopWaiting().\n+     *\n+     * @return false if the poll was interrupted without executing func.\n+     */\n+    std::unique_ptr<value_type> PollForOne(int poll_interval_ms = 200)\n+    {\n+        while (!m_stop_waiting.load()) {\n+            {\n+                std::unique_lock<std::mutex> lock(m_lock);\n+                if (m_size > 0) {\n+                    return std::unique_ptr<value_type>(new value_type(AssumeLockedPopFront()));\n+                }\n+            }\n+            std::this_thread::sleep_for(std::chrono::milliseconds(poll_interval_ms));\n+        }\n+        return nullptr;\n+    }\n+\n+    /** @return all values currently in the buffer after popping them. */\n+    std::vector<value_type> PopAll()\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        std::vector<value_type> values;\n+\n+        while (m_size > 0 && m_read_at_idx != m_insert_at_idx) {\n+            values.push_back(AssumeLockedPopFront());\n+        }\n+        return std::move(values);\n+    }\n+\n+private:\n+    std::array<value_type, S> m_buffer;\n+\n+    /** Number of elements in the buffer. */\n+    size_type m_size;\n+\n+    /** Index at which the next insertion will happen. */\n+    std::atomic<ST> m_insert_at_idx;",
      "path": "src/ringbuffer.h",
      "position": null,
      "original_position": 111,
      "commit_id": "74ae99112e972225c8b44c62ace25dbf17fc0ee9",
      "original_commit_id": "3c13cef1550f4a1f03d6f46119474aff658156b3",
      "in_reply_to_id": null,
      "user": {
        "login": "donaloconnor",
        "id": 6394033,
        "node_id": "MDQ6VXNlcjYzOTQwMzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6394033?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/donaloconnor",
        "html_url": "https://github.com/donaloconnor",
        "followers_url": "https://api.github.com/users/donaloconnor/followers",
        "following_url": "https://api.github.com/users/donaloconnor/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/donaloconnor/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/donaloconnor/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/donaloconnor/subscriptions",
        "organizations_url": "https://api.github.com/users/donaloconnor/orgs",
        "repos_url": "https://api.github.com/users/donaloconnor/repos",
        "events_url": "https://api.github.com/users/donaloconnor/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/donaloconnor/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "it doesn't make sense why having these (`m_insert_at_idx`and `m_read_at_idx`) as std::atomic is necessary if they are protected by the mutex",
      "created_at": "2018-05-09T22:22:18Z",
      "updated_at": "2018-05-23T14:55:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187193169",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187193169"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 111,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187193683",
      "pull_request_review_id": 118924109,
      "id": 187193683,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzE5MzY4Mw==",
      "diff_hunk": "@@ -0,0 +1,145 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S, typename ST=int>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+    using size_type = ST;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }\n+    ~RingBuffer() { }\n+\n+    /** @return the number of elements in the buffer. */\n+    inline size_type Size() const {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return m_size;\n+    }\n+    inline size_type MaxSize() const { return S; }\n+\n+    value_type PopFront()\n+    {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return AssumeLockedPopFront();\n+    }\n+\n+    /**\n+     * Push an element into the buffer.\n+     *\n+     * @arg no_overwrite  If true, block and wait to write instead of overwriting existing data.\n+     */\n+    size_type PushBack(value_type v, bool no_overwrite = true)\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        if (no_overwrite && m_size == S) {\n+            m_read_condvar.wait(lock, [this]() { return this->m_size < S; });\n+        }\n+        m_buffer[m_insert_at_idx] = v;\n+\n+        // We're overwriting existing data, so increment the read index too.\n+        if (m_size > 0 && m_insert_at_idx == m_read_at_idx) m_read_at_idx = IncrementIdx(m_read_at_idx);\n+        if (m_size < S) ++m_size;\n+        m_insert_at_idx = IncrementIdx(m_insert_at_idx);\n+\n+        return m_size;\n+    }\n+\n+    /** Interrupt anyone waiting for reads. */\n+    void SignalStopWaiting() {\n+        m_stop_waiting.store(true);\n+    }\n+\n+    /**\n+     * Block until the buffer has content to process, polling periodically, and\n+     * then return a pointer to an element. Allow interrupts by using SignalStopWaiting().\n+     *\n+     * @return false if the poll was interrupted without executing func.\n+     */\n+    std::unique_ptr<value_type> PollForOne(int poll_interval_ms = 200)\n+    {\n+        while (!m_stop_waiting.load()) {\n+            {\n+                std::unique_lock<std::mutex> lock(m_lock);\n+                if (m_size > 0) {\n+                    return std::unique_ptr<value_type>(new value_type(AssumeLockedPopFront()));\n+                }\n+            }\n+            std::this_thread::sleep_for(std::chrono::milliseconds(poll_interval_ms));\n+        }\n+        return nullptr;\n+    }\n+\n+    /** @return all values currently in the buffer after popping them. */\n+    std::vector<value_type> PopAll()\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        std::vector<value_type> values;\n+\n+        while (m_size > 0 && m_read_at_idx != m_insert_at_idx) {\n+            values.push_back(AssumeLockedPopFront());\n+        }\n+        return std::move(values);\n+    }\n+\n+private:\n+    std::array<value_type, S> m_buffer;\n+\n+    /** Number of elements in the buffer. */\n+    size_type m_size;\n+\n+    /** Index at which the next insertion will happen. */\n+    std::atomic<ST> m_insert_at_idx;\n+\n+    /** Index of the next element to read. */\n+    std::atomic<ST> m_read_at_idx;\n+\n+    /** Set to signal that we should stop waiting for elements in, e.g., PollForOne(). */\n+    std::atomic<bool> m_stop_waiting;\n+\n+    /** Notifies when a read has happened. */\n+    std::condition_variable m_read_condvar;\n+\n+    /** Protects access to m_buffer, m_size, m_insert_at_idx, m_read_at_idx. */\n+    mutable std::mutex m_lock;\n+\n+    /**\n+     * Pop an element off the front of the buffer and return it. Assumes caller\n+     * holds m_lock.\n+     */\n+    value_type AssumeLockedPopFront()\n+    {\n+        assert(m_size > 0);\n+\n+        value_type data = std::move(m_buffer[m_read_at_idx]);\n+        m_buffer[m_read_at_idx] = value_type();",
      "path": "src/ringbuffer.h",
      "position": null,
      "original_position": 134,
      "commit_id": "74ae99112e972225c8b44c62ace25dbf17fc0ee9",
      "original_commit_id": "3c13cef1550f4a1f03d6f46119474aff658156b3",
      "in_reply_to_id": null,
      "user": {
        "login": "donaloconnor",
        "id": 6394033,
        "node_id": "MDQ6VXNlcjYzOTQwMzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6394033?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/donaloconnor",
        "html_url": "https://github.com/donaloconnor",
        "followers_url": "https://api.github.com/users/donaloconnor/followers",
        "following_url": "https://api.github.com/users/donaloconnor/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/donaloconnor/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/donaloconnor/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/donaloconnor/subscriptions",
        "organizations_url": "https://api.github.com/users/donaloconnor/orgs",
        "repos_url": "https://api.github.com/users/donaloconnor/repos",
        "events_url": "https://api.github.com/users/donaloconnor/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/donaloconnor/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "if the object is movable it will be moved and the value will be empty already but if it's not movable and it's copied then I guess there's no big deal letting the data present? Seems unnecessary to construct an empty object in a free slot again.",
      "created_at": "2018-05-09T22:25:00Z",
      "updated_at": "2018-05-23T14:55:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187193683",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187193683"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 134,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187194522",
      "pull_request_review_id": 118924109,
      "id": 187194522,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzE5NDUyMg==",
      "diff_hunk": "@@ -0,0 +1,145 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S, typename ST=int>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+    using size_type = ST;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }\n+    ~RingBuffer() { }\n+\n+    /** @return the number of elements in the buffer. */\n+    inline size_type Size() const {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return m_size;\n+    }\n+    inline size_type MaxSize() const { return S; }\n+\n+    value_type PopFront()\n+    {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return AssumeLockedPopFront();\n+    }\n+\n+    /**\n+     * Push an element into the buffer.\n+     *\n+     * @arg no_overwrite  If true, block and wait to write instead of overwriting existing data.\n+     */\n+    size_type PushBack(value_type v, bool no_overwrite = true)",
      "path": "src/ringbuffer.h",
      "position": null,
      "original_position": 51,
      "commit_id": "74ae99112e972225c8b44c62ace25dbf17fc0ee9",
      "original_commit_id": "3c13cef1550f4a1f03d6f46119474aff658156b3",
      "in_reply_to_id": null,
      "user": {
        "login": "donaloconnor",
        "id": 6394033,
        "node_id": "MDQ6VXNlcjYzOTQwMzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6394033?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/donaloconnor",
        "html_url": "https://github.com/donaloconnor",
        "followers_url": "https://api.github.com/users/donaloconnor/followers",
        "following_url": "https://api.github.com/users/donaloconnor/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/donaloconnor/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/donaloconnor/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/donaloconnor/subscriptions",
        "organizations_url": "https://api.github.com/users/donaloconnor/orgs",
        "repos_url": "https://api.github.com/users/donaloconnor/repos",
        "events_url": "https://api.github.com/users/donaloconnor/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/donaloconnor/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think having a move version of PushBack with const v& ref push back would make more sense to avoid unnecessary copying.\r\n`PushBack(value_type&& v)` and `PushBack(const value_type& v)` ",
      "created_at": "2018-05-09T22:28:50Z",
      "updated_at": "2018-05-23T14:55:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187194522",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187194522"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 51,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187197537",
      "pull_request_review_id": 118924109,
      "id": 187197537,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzE5NzUzNw==",
      "diff_hunk": "@@ -271,3 +274,40 @@ void BCLog::Logger::ShrinkDebugFile()\n     else if (file != nullptr)\n         fclose(file);\n }\n+\n+namespace async_logging {\n+    using LogArgs = std::string;\n+    RingBuffer<LogArgs, 1024> log_buffer;\n+    std::unique_ptr<std::thread> flush_logs_thread;\n+    std::once_flag flush_logs_thread_started;\n+\n+    static void ConsumeLogs()\n+    {\n+        std::unique_ptr<LogArgs> next_log_line;\n+        while (next_log_line = log_buffer.PollForOne()) {\n+            g_logger->LogPrintStr(*next_log_line);\n+        }\n+    }\n+\n+    void FlushAll()\n+    {\n+        for (LogArgs s : log_buffer.PopAll()) {",
      "path": "src/logging.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "74ae99112e972225c8b44c62ace25dbf17fc0ee9",
      "original_commit_id": "4e8af464b39e23ce048c37d85d471dd5a8685ba1",
      "in_reply_to_id": null,
      "user": {
        "login": "donaloconnor",
        "id": 6394033,
        "node_id": "MDQ6VXNlcjYzOTQwMzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6394033?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/donaloconnor",
        "html_url": "https://github.com/donaloconnor",
        "followers_url": "https://api.github.com/users/donaloconnor/followers",
        "following_url": "https://api.github.com/users/donaloconnor/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/donaloconnor/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/donaloconnor/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/donaloconnor/subscriptions",
        "organizations_url": "https://api.github.com/users/donaloconnor/orgs",
        "repos_url": "https://api.github.com/users/donaloconnor/repos",
        "events_url": "https://api.github.com/users/donaloconnor/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/donaloconnor/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`LogArgs& s` to avoid copies",
      "created_at": "2018-05-09T22:45:26Z",
      "updated_at": "2018-05-23T14:55:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187197537",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187197537"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 294,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187199539",
      "pull_request_review_id": 118924109,
      "id": 187199539,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzE5OTUzOQ==",
      "diff_hunk": "@@ -0,0 +1,145 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S, typename ST=int>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+    using size_type = ST;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }\n+    ~RingBuffer() { }\n+\n+    /** @return the number of elements in the buffer. */\n+    inline size_type Size() const {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return m_size;\n+    }\n+    inline size_type MaxSize() const { return S; }\n+\n+    value_type PopFront()\n+    {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return AssumeLockedPopFront();\n+    }\n+\n+    /**\n+     * Push an element into the buffer.\n+     *\n+     * @arg no_overwrite  If true, block and wait to write instead of overwriting existing data.\n+     */\n+    size_type PushBack(value_type v, bool no_overwrite = true)\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        if (no_overwrite && m_size == S) {\n+            m_read_condvar.wait(lock, [this]() { return this->m_size < S; });\n+        }\n+        m_buffer[m_insert_at_idx] = v;\n+\n+        // We're overwriting existing data, so increment the read index too.\n+        if (m_size > 0 && m_insert_at_idx == m_read_at_idx) m_read_at_idx = IncrementIdx(m_read_at_idx);\n+        if (m_size < S) ++m_size;\n+        m_insert_at_idx = IncrementIdx(m_insert_at_idx);\n+\n+        return m_size;\n+    }\n+\n+    /** Interrupt anyone waiting for reads. */\n+    void SignalStopWaiting() {\n+        m_stop_waiting.store(true);\n+    }\n+\n+    /**\n+     * Block until the buffer has content to process, polling periodically, and\n+     * then return a pointer to an element. Allow interrupts by using SignalStopWaiting().\n+     *\n+     * @return false if the poll was interrupted without executing func.\n+     */\n+    std::unique_ptr<value_type> PollForOne(int poll_interval_ms = 200)\n+    {\n+        while (!m_stop_waiting.load()) {\n+            {\n+                std::unique_lock<std::mutex> lock(m_lock);\n+                if (m_size > 0) {\n+                    return std::unique_ptr<value_type>(new value_type(AssumeLockedPopFront()));\n+                }\n+            }\n+            std::this_thread::sleep_for(std::chrono::milliseconds(poll_interval_ms));\n+        }\n+        return nullptr;\n+    }\n+\n+    /** @return all values currently in the buffer after popping them. */\n+    std::vector<value_type> PopAll()\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        std::vector<value_type> values;\n+\n+        while (m_size > 0 && m_read_at_idx != m_insert_at_idx) {\n+            values.push_back(AssumeLockedPopFront());\n+        }\n+        return std::move(values);\n+    }\n+\n+private:\n+    std::array<value_type, S> m_buffer;",
      "path": "src/ringbuffer.h",
      "position": null,
      "original_position": 105,
      "commit_id": "74ae99112e972225c8b44c62ace25dbf17fc0ee9",
      "original_commit_id": "4e8af464b39e23ce048c37d85d471dd5a8685ba1",
      "in_reply_to_id": null,
      "user": {
        "login": "donaloconnor",
        "id": 6394033,
        "node_id": "MDQ6VXNlcjYzOTQwMzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6394033?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/donaloconnor",
        "html_url": "https://github.com/donaloconnor",
        "followers_url": "https://api.github.com/users/donaloconnor/followers",
        "following_url": "https://api.github.com/users/donaloconnor/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/donaloconnor/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/donaloconnor/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/donaloconnor/subscriptions",
        "organizations_url": "https://api.github.com/users/donaloconnor/orgs",
        "repos_url": "https://api.github.com/users/donaloconnor/repos",
        "events_url": "https://api.github.com/users/donaloconnor/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/donaloconnor/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I feel we should use dynamic/heap memory for this for the following reasons:\r\n\r\n1. This is only allocated once on start up and is of fixed size.\r\n2. Passing a large value to this array can potentially have 2 problems:\r\n   1. In the stack it can overflow (if used later by someone else)\r\n   2. In global/static data it will grow the executable size. \r\n\r\nAnyway just what I feel. Maybe std::array is okay in this case though. I'm just imagining uses of this class further down the line ",
      "created_at": "2018-05-09T22:57:46Z",
      "updated_at": "2018-05-23T14:55:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187199539",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187199539"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 104,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187394393",
      "pull_request_review_id": 119167054,
      "id": 187394393,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzM5NDM5Mw==",
      "diff_hunk": "@@ -0,0 +1,145 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S, typename ST=int>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+    using size_type = ST;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }\n+    ~RingBuffer() { }\n+\n+    /** @return the number of elements in the buffer. */\n+    inline size_type Size() const {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return m_size;\n+    }\n+    inline size_type MaxSize() const { return S; }\n+\n+    value_type PopFront()\n+    {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return AssumeLockedPopFront();\n+    }\n+\n+    /**\n+     * Push an element into the buffer.\n+     *\n+     * @arg no_overwrite  If true, block and wait to write instead of overwriting existing data.\n+     */\n+    size_type PushBack(value_type v, bool no_overwrite = true)",
      "path": "src/ringbuffer.h",
      "position": null,
      "original_position": 51,
      "commit_id": "74ae99112e972225c8b44c62ace25dbf17fc0ee9",
      "original_commit_id": "3c13cef1550f4a1f03d6f46119474aff658156b3",
      "in_reply_to_id": 187194522,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good catch. Shouldn't `const value_type&` bind to both rvalues and lvalues, though?",
      "created_at": "2018-05-10T17:07:29Z",
      "updated_at": "2018-05-23T14:55:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187394393",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187394393"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 51,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187423121",
      "pull_request_review_id": 119202230,
      "id": 187423121,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzQyMzEyMQ==",
      "diff_hunk": "@@ -0,0 +1,145 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S, typename ST=int>",
      "path": "src/ringbuffer.h",
      "position": null,
      "original_position": 23,
      "commit_id": "74ae99112e972225c8b44c62ace25dbf17fc0ee9",
      "original_commit_id": "3c13cef1550f4a1f03d6f46119474aff658156b3",
      "in_reply_to_id": 187192208,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yep, agree. Fixed.",
      "created_at": "2018-05-10T18:47:14Z",
      "updated_at": "2018-05-23T14:55:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187423121",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187423121"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 23,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187423152",
      "pull_request_review_id": 119202274,
      "id": 187423152,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzQyMzE1Mg==",
      "diff_hunk": "@@ -0,0 +1,145 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S, typename ST=int>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+    using size_type = ST;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }\n+    ~RingBuffer() { }\n+\n+    /** @return the number of elements in the buffer. */\n+    inline size_type Size() const {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return m_size;\n+    }\n+    inline size_type MaxSize() const { return S; }",
      "path": "src/ringbuffer.h",
      "position": null,
      "original_position": 38,
      "commit_id": "74ae99112e972225c8b44c62ace25dbf17fc0ee9",
      "original_commit_id": "3c13cef1550f4a1f03d6f46119474aff658156b3",
      "in_reply_to_id": 187192592,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2018-05-10T18:47:20Z",
      "updated_at": "2018-05-23T14:55:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187423152",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187423152"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187423208",
      "pull_request_review_id": 119202339,
      "id": 187423208,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzQyMzIwOA==",
      "diff_hunk": "@@ -0,0 +1,145 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S, typename ST=int>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+    using size_type = ST;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }\n+    ~RingBuffer() { }\n+\n+    /** @return the number of elements in the buffer. */\n+    inline size_type Size() const {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return m_size;\n+    }\n+    inline size_type MaxSize() const { return S; }\n+\n+    value_type PopFront()\n+    {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return AssumeLockedPopFront();\n+    }\n+\n+    /**\n+     * Push an element into the buffer.\n+     *\n+     * @arg no_overwrite  If true, block and wait to write instead of overwriting existing data.\n+     */\n+    size_type PushBack(value_type v, bool no_overwrite = true)\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        if (no_overwrite && m_size == S) {\n+            m_read_condvar.wait(lock, [this]() { return this->m_size < S; });\n+        }\n+        m_buffer[m_insert_at_idx] = v;\n+\n+        // We're overwriting existing data, so increment the read index too.\n+        if (m_size > 0 && m_insert_at_idx == m_read_at_idx) m_read_at_idx = IncrementIdx(m_read_at_idx);\n+        if (m_size < S) ++m_size;\n+        m_insert_at_idx = IncrementIdx(m_insert_at_idx);\n+\n+        return m_size;\n+    }\n+\n+    /** Interrupt anyone waiting for reads. */\n+    void SignalStopWaiting() {\n+        m_stop_waiting.store(true);\n+    }\n+\n+    /**\n+     * Block until the buffer has content to process, polling periodically, and\n+     * then return a pointer to an element. Allow interrupts by using SignalStopWaiting().\n+     *\n+     * @return false if the poll was interrupted without executing func.\n+     */\n+    std::unique_ptr<value_type> PollForOne(int poll_interval_ms = 200)\n+    {\n+        while (!m_stop_waiting.load()) {\n+            {\n+                std::unique_lock<std::mutex> lock(m_lock);\n+                if (m_size > 0) {\n+                    return std::unique_ptr<value_type>(new value_type(AssumeLockedPopFront()));\n+                }\n+            }\n+            std::this_thread::sleep_for(std::chrono::milliseconds(poll_interval_ms));\n+        }\n+        return nullptr;\n+    }\n+\n+    /** @return all values currently in the buffer after popping them. */\n+    std::vector<value_type> PopAll()\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        std::vector<value_type> values;\n+\n+        while (m_size > 0 && m_read_at_idx != m_insert_at_idx) {\n+            values.push_back(AssumeLockedPopFront());\n+        }\n+        return std::move(values);\n+    }\n+\n+private:\n+    std::array<value_type, S> m_buffer;\n+\n+    /** Number of elements in the buffer. */\n+    size_type m_size;\n+\n+    /** Index at which the next insertion will happen. */\n+    std::atomic<ST> m_insert_at_idx;",
      "path": "src/ringbuffer.h",
      "position": null,
      "original_position": 111,
      "commit_id": "74ae99112e972225c8b44c62ace25dbf17fc0ee9",
      "original_commit_id": "3c13cef1550f4a1f03d6f46119474aff658156b3",
      "in_reply_to_id": 187193169,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good point, fixed.",
      "created_at": "2018-05-10T18:47:28Z",
      "updated_at": "2018-05-23T14:55:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187423208",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187423208"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 111,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187423274",
      "pull_request_review_id": 119202417,
      "id": 187423274,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzQyMzI3NA==",
      "diff_hunk": "@@ -0,0 +1,145 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S, typename ST=int>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+    using size_type = ST;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }\n+    ~RingBuffer() { }\n+\n+    /** @return the number of elements in the buffer. */\n+    inline size_type Size() const {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return m_size;\n+    }\n+    inline size_type MaxSize() const { return S; }\n+\n+    value_type PopFront()\n+    {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return AssumeLockedPopFront();\n+    }\n+\n+    /**\n+     * Push an element into the buffer.\n+     *\n+     * @arg no_overwrite  If true, block and wait to write instead of overwriting existing data.\n+     */\n+    size_type PushBack(value_type v, bool no_overwrite = true)\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        if (no_overwrite && m_size == S) {\n+            m_read_condvar.wait(lock, [this]() { return this->m_size < S; });\n+        }\n+        m_buffer[m_insert_at_idx] = v;\n+\n+        // We're overwriting existing data, so increment the read index too.\n+        if (m_size > 0 && m_insert_at_idx == m_read_at_idx) m_read_at_idx = IncrementIdx(m_read_at_idx);\n+        if (m_size < S) ++m_size;\n+        m_insert_at_idx = IncrementIdx(m_insert_at_idx);\n+\n+        return m_size;\n+    }\n+\n+    /** Interrupt anyone waiting for reads. */\n+    void SignalStopWaiting() {\n+        m_stop_waiting.store(true);\n+    }\n+\n+    /**\n+     * Block until the buffer has content to process, polling periodically, and\n+     * then return a pointer to an element. Allow interrupts by using SignalStopWaiting().\n+     *\n+     * @return false if the poll was interrupted without executing func.\n+     */\n+    std::unique_ptr<value_type> PollForOne(int poll_interval_ms = 200)\n+    {\n+        while (!m_stop_waiting.load()) {\n+            {\n+                std::unique_lock<std::mutex> lock(m_lock);\n+                if (m_size > 0) {\n+                    return std::unique_ptr<value_type>(new value_type(AssumeLockedPopFront()));\n+                }\n+            }\n+            std::this_thread::sleep_for(std::chrono::milliseconds(poll_interval_ms));\n+        }\n+        return nullptr;\n+    }\n+\n+    /** @return all values currently in the buffer after popping them. */\n+    std::vector<value_type> PopAll()\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        std::vector<value_type> values;\n+\n+        while (m_size > 0 && m_read_at_idx != m_insert_at_idx) {\n+            values.push_back(AssumeLockedPopFront());\n+        }\n+        return std::move(values);\n+    }\n+\n+private:\n+    std::array<value_type, S> m_buffer;\n+\n+    /** Number of elements in the buffer. */\n+    size_type m_size;\n+\n+    /** Index at which the next insertion will happen. */\n+    std::atomic<ST> m_insert_at_idx;\n+\n+    /** Index of the next element to read. */\n+    std::atomic<ST> m_read_at_idx;\n+\n+    /** Set to signal that we should stop waiting for elements in, e.g., PollForOne(). */\n+    std::atomic<bool> m_stop_waiting;\n+\n+    /** Notifies when a read has happened. */\n+    std::condition_variable m_read_condvar;\n+\n+    /** Protects access to m_buffer, m_size, m_insert_at_idx, m_read_at_idx. */\n+    mutable std::mutex m_lock;\n+\n+    /**\n+     * Pop an element off the front of the buffer and return it. Assumes caller\n+     * holds m_lock.\n+     */\n+    value_type AssumeLockedPopFront()\n+    {\n+        assert(m_size > 0);\n+\n+        value_type data = std::move(m_buffer[m_read_at_idx]);\n+        m_buffer[m_read_at_idx] = value_type();",
      "path": "src/ringbuffer.h",
      "position": null,
      "original_position": 134,
      "commit_id": "74ae99112e972225c8b44c62ace25dbf17fc0ee9",
      "original_commit_id": "3c13cef1550f4a1f03d6f46119474aff658156b3",
      "in_reply_to_id": 187193683,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Agree, fixed.",
      "created_at": "2018-05-10T18:47:39Z",
      "updated_at": "2018-05-23T14:55:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187423274",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187423274"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 134,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187423322",
      "pull_request_review_id": 119202481,
      "id": 187423322,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzQyMzMyMg==",
      "diff_hunk": "@@ -0,0 +1,145 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S, typename ST=int>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+    using size_type = ST;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }\n+    ~RingBuffer() { }\n+\n+    /** @return the number of elements in the buffer. */\n+    inline size_type Size() const {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return m_size;\n+    }\n+    inline size_type MaxSize() const { return S; }\n+\n+    value_type PopFront()\n+    {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return AssumeLockedPopFront();\n+    }\n+\n+    /**\n+     * Push an element into the buffer.\n+     *\n+     * @arg no_overwrite  If true, block and wait to write instead of overwriting existing data.\n+     */\n+    size_type PushBack(value_type v, bool no_overwrite = true)",
      "path": "src/ringbuffer.h",
      "position": null,
      "original_position": 51,
      "commit_id": "74ae99112e972225c8b44c62ace25dbf17fc0ee9",
      "original_commit_id": "3c13cef1550f4a1f03d6f46119474aff658156b3",
      "in_reply_to_id": 187194522,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2018-05-10T18:47:49Z",
      "updated_at": "2018-05-23T14:55:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187423322",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187423322"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 51,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187423354",
      "pull_request_review_id": 119202517,
      "id": 187423354,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzQyMzM1NA==",
      "diff_hunk": "@@ -271,3 +274,40 @@ void BCLog::Logger::ShrinkDebugFile()\n     else if (file != nullptr)\n         fclose(file);\n }\n+\n+namespace async_logging {\n+    using LogArgs = std::string;\n+    RingBuffer<LogArgs, 1024> log_buffer;\n+    std::unique_ptr<std::thread> flush_logs_thread;\n+    std::once_flag flush_logs_thread_started;\n+\n+    static void ConsumeLogs()\n+    {\n+        std::unique_ptr<LogArgs> next_log_line;\n+        while (next_log_line = log_buffer.PollForOne()) {\n+            g_logger->LogPrintStr(*next_log_line);\n+        }\n+    }\n+\n+    void FlushAll()\n+    {\n+        for (LogArgs s : log_buffer.PopAll()) {",
      "path": "src/logging.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "74ae99112e972225c8b44c62ace25dbf17fc0ee9",
      "original_commit_id": "4e8af464b39e23ce048c37d85d471dd5a8685ba1",
      "in_reply_to_id": 187197537,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good catch, fixed.",
      "created_at": "2018-05-10T18:47:56Z",
      "updated_at": "2018-05-23T14:55:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187423354",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187423354"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 294,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187446772",
      "pull_request_review_id": 119231039,
      "id": 187446772,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzQ0Njc3Mg==",
      "diff_hunk": "@@ -0,0 +1,145 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S, typename ST=int>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+    using size_type = ST;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }\n+    ~RingBuffer() { }\n+\n+    /** @return the number of elements in the buffer. */\n+    inline size_type Size() const {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return m_size;\n+    }\n+    inline size_type MaxSize() const { return S; }\n+\n+    value_type PopFront()\n+    {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return AssumeLockedPopFront();\n+    }\n+\n+    /**\n+     * Push an element into the buffer.\n+     *\n+     * @arg no_overwrite  If true, block and wait to write instead of overwriting existing data.\n+     */\n+    size_type PushBack(value_type v, bool no_overwrite = true)\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        if (no_overwrite && m_size == S) {\n+            m_read_condvar.wait(lock, [this]() { return this->m_size < S; });\n+        }\n+        m_buffer[m_insert_at_idx] = v;\n+\n+        // We're overwriting existing data, so increment the read index too.\n+        if (m_size > 0 && m_insert_at_idx == m_read_at_idx) m_read_at_idx = IncrementIdx(m_read_at_idx);\n+        if (m_size < S) ++m_size;\n+        m_insert_at_idx = IncrementIdx(m_insert_at_idx);\n+\n+        return m_size;\n+    }\n+\n+    /** Interrupt anyone waiting for reads. */\n+    void SignalStopWaiting() {\n+        m_stop_waiting.store(true);\n+    }\n+\n+    /**\n+     * Block until the buffer has content to process, polling periodically, and\n+     * then return a pointer to an element. Allow interrupts by using SignalStopWaiting().\n+     *\n+     * @return false if the poll was interrupted without executing func.\n+     */\n+    std::unique_ptr<value_type> PollForOne(int poll_interval_ms = 200)\n+    {\n+        while (!m_stop_waiting.load()) {\n+            {\n+                std::unique_lock<std::mutex> lock(m_lock);\n+                if (m_size > 0) {\n+                    return std::unique_ptr<value_type>(new value_type(AssumeLockedPopFront()));\n+                }\n+            }\n+            std::this_thread::sleep_for(std::chrono::milliseconds(poll_interval_ms));\n+        }\n+        return nullptr;\n+    }\n+\n+    /** @return all values currently in the buffer after popping them. */\n+    std::vector<value_type> PopAll()\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        std::vector<value_type> values;\n+\n+        while (m_size > 0 && m_read_at_idx != m_insert_at_idx) {\n+            values.push_back(AssumeLockedPopFront());\n+        }\n+        return std::move(values);\n+    }\n+\n+private:\n+    std::array<value_type, S> m_buffer;",
      "path": "src/ringbuffer.h",
      "position": null,
      "original_position": 105,
      "commit_id": "74ae99112e972225c8b44c62ace25dbf17fc0ee9",
      "original_commit_id": "4e8af464b39e23ce048c37d85d471dd5a8685ba1",
      "in_reply_to_id": 187199539,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm going to leave this as-is for now since I don't think it's a real problem, but if you have thoughts to the contrary I'm curious to hear.",
      "created_at": "2018-05-10T20:16:51Z",
      "updated_at": "2018-05-23T14:55:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187446772",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187446772"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 104,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187450684",
      "pull_request_review_id": 119235762,
      "id": 187450684,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzQ1MDY4NA==",
      "diff_hunk": "@@ -0,0 +1,145 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S, typename ST=int>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+    using size_type = ST;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }\n+    ~RingBuffer() { }\n+\n+    /** @return the number of elements in the buffer. */\n+    inline size_type Size() const {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return m_size;\n+    }\n+    inline size_type MaxSize() const { return S; }\n+\n+    value_type PopFront()\n+    {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return AssumeLockedPopFront();\n+    }\n+\n+    /**\n+     * Push an element into the buffer.\n+     *\n+     * @arg no_overwrite  If true, block and wait to write instead of overwriting existing data.\n+     */\n+    size_type PushBack(value_type v, bool no_overwrite = true)\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        if (no_overwrite && m_size == S) {\n+            m_read_condvar.wait(lock, [this]() { return this->m_size < S; });\n+        }\n+        m_buffer[m_insert_at_idx] = v;\n+\n+        // We're overwriting existing data, so increment the read index too.\n+        if (m_size > 0 && m_insert_at_idx == m_read_at_idx) m_read_at_idx = IncrementIdx(m_read_at_idx);\n+        if (m_size < S) ++m_size;\n+        m_insert_at_idx = IncrementIdx(m_insert_at_idx);\n+\n+        return m_size;\n+    }\n+\n+    /** Interrupt anyone waiting for reads. */\n+    void SignalStopWaiting() {\n+        m_stop_waiting.store(true);\n+    }\n+\n+    /**\n+     * Block until the buffer has content to process, polling periodically, and\n+     * then return a pointer to an element. Allow interrupts by using SignalStopWaiting().\n+     *\n+     * @return false if the poll was interrupted without executing func.\n+     */\n+    std::unique_ptr<value_type> PollForOne(int poll_interval_ms = 200)\n+    {\n+        while (!m_stop_waiting.load()) {\n+            {\n+                std::unique_lock<std::mutex> lock(m_lock);\n+                if (m_size > 0) {\n+                    return std::unique_ptr<value_type>(new value_type(AssumeLockedPopFront()));\n+                }\n+            }\n+            std::this_thread::sleep_for(std::chrono::milliseconds(poll_interval_ms));\n+        }\n+        return nullptr;\n+    }\n+\n+    /** @return all values currently in the buffer after popping them. */\n+    std::vector<value_type> PopAll()\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        std::vector<value_type> values;\n+\n+        while (m_size > 0 && m_read_at_idx != m_insert_at_idx) {\n+            values.push_back(AssumeLockedPopFront());\n+        }\n+        return std::move(values);\n+    }\n+\n+private:\n+    std::array<value_type, S> m_buffer;",
      "path": "src/ringbuffer.h",
      "position": null,
      "original_position": 105,
      "commit_id": "74ae99112e972225c8b44c62ace25dbf17fc0ee9",
      "original_commit_id": "4e8af464b39e23ce048c37d85d471dd5a8685ba1",
      "in_reply_to_id": 187199539,
      "user": {
        "login": "donaloconnor",
        "id": 6394033,
        "node_id": "MDQ6VXNlcjYzOTQwMzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6394033?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/donaloconnor",
        "html_url": "https://github.com/donaloconnor",
        "followers_url": "https://api.github.com/users/donaloconnor/followers",
        "following_url": "https://api.github.com/users/donaloconnor/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/donaloconnor/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/donaloconnor/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/donaloconnor/subscriptions",
        "organizations_url": "https://api.github.com/users/donaloconnor/orgs",
        "repos_url": "https://api.github.com/users/donaloconnor/repos",
        "events_url": "https://api.github.com/users/donaloconnor/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/donaloconnor/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sounds good to me thanks! I went a bit overboard with the comments anyway.",
      "created_at": "2018-05-10T20:30:42Z",
      "updated_at": "2018-05-23T14:55:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187450684",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187450684"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 104,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187451048",
      "pull_request_review_id": 119236189,
      "id": 187451048,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzQ1MTA0OA==",
      "diff_hunk": "@@ -0,0 +1,145 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S, typename ST=int>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+    using size_type = ST;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }\n+    ~RingBuffer() { }\n+\n+    /** @return the number of elements in the buffer. */\n+    inline size_type Size() const {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return m_size;\n+    }\n+    inline size_type MaxSize() const { return S; }\n+\n+    value_type PopFront()\n+    {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return AssumeLockedPopFront();\n+    }\n+\n+    /**\n+     * Push an element into the buffer.\n+     *\n+     * @arg no_overwrite  If true, block and wait to write instead of overwriting existing data.\n+     */\n+    size_type PushBack(value_type v, bool no_overwrite = true)\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        if (no_overwrite && m_size == S) {\n+            m_read_condvar.wait(lock, [this]() { return this->m_size < S; });\n+        }\n+        m_buffer[m_insert_at_idx] = v;\n+\n+        // We're overwriting existing data, so increment the read index too.\n+        if (m_size > 0 && m_insert_at_idx == m_read_at_idx) m_read_at_idx = IncrementIdx(m_read_at_idx);\n+        if (m_size < S) ++m_size;\n+        m_insert_at_idx = IncrementIdx(m_insert_at_idx);\n+\n+        return m_size;\n+    }\n+\n+    /** Interrupt anyone waiting for reads. */\n+    void SignalStopWaiting() {\n+        m_stop_waiting.store(true);\n+    }\n+\n+    /**\n+     * Block until the buffer has content to process, polling periodically, and\n+     * then return a pointer to an element. Allow interrupts by using SignalStopWaiting().\n+     *\n+     * @return false if the poll was interrupted without executing func.\n+     */\n+    std::unique_ptr<value_type> PollForOne(int poll_interval_ms = 200)\n+    {\n+        while (!m_stop_waiting.load()) {\n+            {\n+                std::unique_lock<std::mutex> lock(m_lock);\n+                if (m_size > 0) {\n+                    return std::unique_ptr<value_type>(new value_type(AssumeLockedPopFront()));\n+                }\n+            }\n+            std::this_thread::sleep_for(std::chrono::milliseconds(poll_interval_ms));\n+        }\n+        return nullptr;\n+    }\n+\n+    /** @return all values currently in the buffer after popping them. */\n+    std::vector<value_type> PopAll()\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        std::vector<value_type> values;\n+\n+        while (m_size > 0 && m_read_at_idx != m_insert_at_idx) {\n+            values.push_back(AssumeLockedPopFront());\n+        }\n+        return std::move(values);\n+    }\n+\n+private:\n+    std::array<value_type, S> m_buffer;",
      "path": "src/ringbuffer.h",
      "position": null,
      "original_position": 105,
      "commit_id": "74ae99112e972225c8b44c62ace25dbf17fc0ee9",
      "original_commit_id": "4e8af464b39e23ce048c37d85d471dd5a8685ba1",
      "in_reply_to_id": 187199539,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No, I thought your feedback was very useful - thanks!",
      "created_at": "2018-05-10T20:31:53Z",
      "updated_at": "2018-05-23T14:55:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187451048",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187451048"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 104,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784319",
      "pull_request_review_id": 119560417,
      "id": 187784319,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Nzc4NDMxOQ==",
      "diff_hunk": "@@ -0,0 +1,143 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S>",
      "path": "src/ringbuffer.h",
      "position": null,
      "original_position": 23,
      "commit_id": "74ae99112e972225c8b44c62ace25dbf17fc0ee9",
      "original_commit_id": "354aac5a692ae727480821b6174b25fbc0134b21",
      "in_reply_to_id": null,
      "user": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "consider making these template parameter names less abbreviated",
      "created_at": "2018-05-12T22:07:06Z",
      "updated_at": "2018-05-23T14:55:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784319",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784319"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 23,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784407",
      "pull_request_review_id": 119560417,
      "id": 187784407,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Nzc4NDQwNw==",
      "diff_hunk": "@@ -0,0 +1,145 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S, typename ST=int>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+    using size_type = ST;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }\n+    ~RingBuffer() { }\n+\n+    /** @return the number of elements in the buffer. */\n+    inline size_type Size() const {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return m_size;\n+    }\n+    inline size_type MaxSize() const { return S; }\n+\n+    value_type PopFront()\n+    {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return AssumeLockedPopFront();\n+    }\n+\n+    /**\n+     * Push an element into the buffer.\n+     *\n+     * @arg no_overwrite  If true, block and wait to write instead of overwriting existing data.\n+     */\n+    size_type PushBack(value_type v, bool no_overwrite = true)\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        if (no_overwrite && m_size == S) {\n+            m_read_condvar.wait(lock, [this]() { return this->m_size < S; });\n+        }\n+        m_buffer[m_insert_at_idx] = v;\n+\n+        // We're overwriting existing data, so increment the read index too.\n+        if (m_size > 0 && m_insert_at_idx == m_read_at_idx) m_read_at_idx = IncrementIdx(m_read_at_idx);\n+        if (m_size < S) ++m_size;\n+        m_insert_at_idx = IncrementIdx(m_insert_at_idx);\n+\n+        return m_size;\n+    }\n+\n+    /** Interrupt anyone waiting for reads. */\n+    void SignalStopWaiting() {\n+        m_stop_waiting.store(true);\n+    }\n+\n+    /**\n+     * Block until the buffer has content to process, polling periodically, and\n+     * then return a pointer to an element. Allow interrupts by using SignalStopWaiting().\n+     *\n+     * @return false if the poll was interrupted without executing func.\n+     */\n+    std::unique_ptr<value_type> PollForOne(int poll_interval_ms = 200)\n+    {\n+        while (!m_stop_waiting.load()) {\n+            {\n+                std::unique_lock<std::mutex> lock(m_lock);\n+                if (m_size > 0) {\n+                    return std::unique_ptr<value_type>(new value_type(AssumeLockedPopFront()));\n+                }\n+            }\n+            std::this_thread::sleep_for(std::chrono::milliseconds(poll_interval_ms));\n+        }\n+        return nullptr;\n+    }\n+\n+    /** @return all values currently in the buffer after popping them. */\n+    std::vector<value_type> PopAll()\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        std::vector<value_type> values;\n+\n+        while (m_size > 0 && m_read_at_idx != m_insert_at_idx) {\n+            values.push_back(AssumeLockedPopFront());\n+        }\n+        return std::move(values);\n+    }\n+\n+private:\n+    std::array<value_type, S> m_buffer;",
      "path": "src/ringbuffer.h",
      "position": null,
      "original_position": 105,
      "commit_id": "74ae99112e972225c8b44c62ace25dbf17fc0ee9",
      "original_commit_id": "4e8af464b39e23ce048c37d85d471dd5a8685ba1",
      "in_reply_to_id": 187199539,
      "user": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this is fine - if you want it on the heap you can alloc the entire `RingBuffer` on the heap",
      "created_at": "2018-05-12T22:11:52Z",
      "updated_at": "2018-05-23T14:55:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784407",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784407"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 104,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784436",
      "pull_request_review_id": 119560417,
      "id": 187784436,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Nzc4NDQzNg==",
      "diff_hunk": "@@ -0,0 +1,143 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }\n+    ~RingBuffer() { }\n+\n+    /** @return the number of elements in the buffer. */\n+    inline size_t Size() const {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return m_size;\n+    }\n+    constexpr size_t MaxSize() const { return S; }\n+\n+    value_type PopFront()\n+    {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return AssumeLockedPopFront();\n+    }\n+\n+    /**\n+     * Push an element into the buffer.\n+     *\n+     * @arg no_overwrite  If true, block and wait to write instead of overwriting existing data.\n+     */\n+    size_t PushBack(const value_type& v, bool no_overwrite = true)\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        if (no_overwrite && m_size == S) {\n+            m_read_condvar.wait(lock, [this]() { return this->m_size < S; });\n+        }\n+        m_buffer[m_insert_at_idx] = v;\n+\n+        // We're overwriting existing data, so increment the read index too.\n+        if (m_size > 0 && m_insert_at_idx == m_read_at_idx) m_read_at_idx = IncrementIdx(m_read_at_idx);\n+        if (m_size < S) ++m_size;\n+        m_insert_at_idx = IncrementIdx(m_insert_at_idx);\n+\n+        return m_size;\n+    }\n+\n+    /** Interrupt anyone waiting for reads. */\n+    void SignalStopWaiting() {\n+        m_stop_waiting.store(true);\n+    }\n+\n+    /**\n+     * Block until the buffer has content to process, polling periodically, and\n+     * then return a pointer to an element. Allow interrupts by using SignalStopWaiting().\n+     *\n+     * @return false if the poll was interrupted without executing func.\n+     */\n+    std::unique_ptr<value_type> PollForOne(int poll_interval_ms = 200)\n+    {\n+        while (!m_stop_waiting.load()) {",
      "path": "src/ringbuffer.h",
      "position": null,
      "original_position": 79,
      "commit_id": "74ae99112e972225c8b44c62ace25dbf17fc0ee9",
      "original_commit_id": "354aac5a692ae727480821b6174b25fbc0134b21",
      "in_reply_to_id": null,
      "user": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "this approach seems strange - why not just use another condition variable the same way you do when you push things to the buffer?",
      "created_at": "2018-05-12T22:14:02Z",
      "updated_at": "2018-05-23T14:55:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784436",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784436"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 79,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784541",
      "pull_request_review_id": 119560417,
      "id": 187784541,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Nzc4NDU0MQ==",
      "diff_hunk": "@@ -0,0 +1,143 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }\n+    ~RingBuffer() { }\n+\n+    /** @return the number of elements in the buffer. */\n+    inline size_t Size() const {",
      "path": "src/ringbuffer.h",
      "position": null,
      "original_position": 33,
      "commit_id": "74ae99112e972225c8b44c62ace25dbf17fc0ee9",
      "original_commit_id": "354aac5a692ae727480821b6174b25fbc0134b21",
      "in_reply_to_id": null,
      "user": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "inline seems overkill here?\r\n",
      "created_at": "2018-05-12T22:19:43Z",
      "updated_at": "2018-05-23T14:55:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784541",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784541"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784547",
      "pull_request_review_id": 119560417,
      "id": 187784547,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Nzc4NDU0Nw==",
      "diff_hunk": "@@ -0,0 +1,143 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }\n+    ~RingBuffer() { }\n+\n+    /** @return the number of elements in the buffer. */\n+    inline size_t Size() const {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return m_size;\n+    }\n+    constexpr size_t MaxSize() const { return S; }\n+\n+    value_type PopFront()\n+    {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return AssumeLockedPopFront();\n+    }\n+\n+    /**\n+     * Push an element into the buffer.\n+     *\n+     * @arg no_overwrite  If true, block and wait to write instead of overwriting existing data.\n+     */\n+    size_t PushBack(const value_type& v, bool no_overwrite = true)\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        if (no_overwrite && m_size == S) {\n+            m_read_condvar.wait(lock, [this]() { return this->m_size < S; });\n+        }\n+        m_buffer[m_insert_at_idx] = v;\n+\n+        // We're overwriting existing data, so increment the read index too.\n+        if (m_size > 0 && m_insert_at_idx == m_read_at_idx) m_read_at_idx = IncrementIdx(m_read_at_idx);\n+        if (m_size < S) ++m_size;\n+        m_insert_at_idx = IncrementIdx(m_insert_at_idx);\n+\n+        return m_size;\n+    }\n+\n+    /** Interrupt anyone waiting for reads. */\n+    void SignalStopWaiting() {\n+        m_stop_waiting.store(true);\n+    }\n+\n+    /**\n+     * Block until the buffer has content to process, polling periodically, and\n+     * then return a pointer to an element. Allow interrupts by using SignalStopWaiting().\n+     *\n+     * @return false if the poll was interrupted without executing func.\n+     */\n+    std::unique_ptr<value_type> PollForOne(int poll_interval_ms = 200)\n+    {\n+        while (!m_stop_waiting.load()) {\n+            {\n+                std::unique_lock<std::mutex> lock(m_lock);\n+                if (m_size > 0) {\n+                    return std::unique_ptr<value_type>(new value_type(AssumeLockedPopFront()));\n+                }\n+            }\n+            std::this_thread::sleep_for(std::chrono::milliseconds(poll_interval_ms));\n+        }\n+        return nullptr;\n+    }\n+\n+    /** @return all values currently in the buffer after popping them. */\n+    std::vector<value_type> PopAll()\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        std::vector<value_type> values;\n+\n+        while (m_size > 0 && m_read_at_idx != m_insert_at_idx) {",
      "path": "src/ringbuffer.h",
      "position": null,
      "original_position": 97,
      "commit_id": "74ae99112e972225c8b44c62ace25dbf17fc0ee9",
      "original_commit_id": "354aac5a692ae727480821b6174b25fbc0134b21",
      "in_reply_to_id": null,
      "user": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "sufficient here to just do the size check?",
      "created_at": "2018-05-12T22:20:33Z",
      "updated_at": "2018-05-23T14:55:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784547",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784547"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 97,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784588",
      "pull_request_review_id": 119560417,
      "id": 187784588,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Nzc4NDU4OA==",
      "diff_hunk": "@@ -0,0 +1,143 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }\n+    ~RingBuffer() { }\n+\n+    /** @return the number of elements in the buffer. */\n+    inline size_t Size() const {",
      "path": "src/ringbuffer.h",
      "position": null,
      "original_position": 33,
      "commit_id": "74ae99112e972225c8b44c62ace25dbf17fc0ee9",
      "original_commit_id": "354aac5a692ae727480821b6174b25fbc0134b21",
      "in_reply_to_id": 187784541,
      "user": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "also - if you wanna do the size_t stuff tradition / precedence would suggest doing `using size_type = size_t`",
      "created_at": "2018-05-12T22:22:53Z",
      "updated_at": "2018-05-23T14:55:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784588",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784588"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784616",
      "pull_request_review_id": 119560417,
      "id": 187784616,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Nzc4NDYxNg==",
      "diff_hunk": "@@ -0,0 +1,143 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }\n+    ~RingBuffer() { }\n+\n+    /** @return the number of elements in the buffer. */\n+    inline size_t Size() const {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return m_size;\n+    }\n+    constexpr size_t MaxSize() const { return S; }\n+\n+    value_type PopFront()\n+    {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return AssumeLockedPopFront();\n+    }\n+\n+    /**\n+     * Push an element into the buffer.\n+     *\n+     * @arg no_overwrite  If true, block and wait to write instead of overwriting existing data.\n+     */\n+    size_t PushBack(const value_type& v, bool no_overwrite = true)\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        if (no_overwrite && m_size == S) {\n+            m_read_condvar.wait(lock, [this]() { return this->m_size < S; });\n+        }\n+        m_buffer[m_insert_at_idx] = v;\n+\n+        // We're overwriting existing data, so increment the read index too.\n+        if (m_size > 0 && m_insert_at_idx == m_read_at_idx) m_read_at_idx = IncrementIdx(m_read_at_idx);\n+        if (m_size < S) ++m_size;",
      "path": "src/ringbuffer.h",
      "position": null,
      "original_position": 60,
      "commit_id": "74ae99112e972225c8b44c62ace25dbf17fc0ee9",
      "original_commit_id": "354aac5a692ae727480821b6174b25fbc0134b21",
      "in_reply_to_id": null,
      "user": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "more simply written as `if(m_size == S) Increment else ++size ?",
      "created_at": "2018-05-12T22:26:06Z",
      "updated_at": "2018-05-23T14:55:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784616",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784616"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784633",
      "pull_request_review_id": 119560417,
      "id": 187784633,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Nzc4NDYzMw==",
      "diff_hunk": "@@ -0,0 +1,143 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }\n+    ~RingBuffer() { }\n+\n+    /** @return the number of elements in the buffer. */\n+    inline size_t Size() const {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return m_size;\n+    }\n+    constexpr size_t MaxSize() const { return S; }\n+\n+    value_type PopFront()\n+    {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return AssumeLockedPopFront();\n+    }\n+\n+    /**\n+     * Push an element into the buffer.\n+     *\n+     * @arg no_overwrite  If true, block and wait to write instead of overwriting existing data.\n+     */\n+    size_t PushBack(const value_type& v, bool no_overwrite = true)\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        if (no_overwrite && m_size == S) {\n+            m_read_condvar.wait(lock, [this]() { return this->m_size < S; });\n+        }\n+        m_buffer[m_insert_at_idx] = v;\n+\n+        // We're overwriting existing data, so increment the read index too.\n+        if (m_size > 0 && m_insert_at_idx == m_read_at_idx) m_read_at_idx = IncrementIdx(m_read_at_idx);\n+        if (m_size < S) ++m_size;\n+        m_insert_at_idx = IncrementIdx(m_insert_at_idx);\n+\n+        return m_size;\n+    }\n+\n+    /** Interrupt anyone waiting for reads. */\n+    void SignalStopWaiting() {\n+        m_stop_waiting.store(true);\n+    }\n+\n+    /**\n+     * Block until the buffer has content to process, polling periodically, and\n+     * then return a pointer to an element. Allow interrupts by using SignalStopWaiting().\n+     *\n+     * @return false if the poll was interrupted without executing func.\n+     */\n+    std::unique_ptr<value_type> PollForOne(int poll_interval_ms = 200)\n+    {\n+        while (!m_stop_waiting.load()) {",
      "path": "src/ringbuffer.h",
      "position": null,
      "original_position": 79,
      "commit_id": "74ae99112e972225c8b44c62ace25dbf17fc0ee9",
      "original_commit_id": "354aac5a692ae727480821b6174b25fbc0134b21",
      "in_reply_to_id": 187784436,
      "user": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "if you are doing this just to handle interruption on shutdown - you can do the boost::thread::interrupt() boost::condition_var and catch a boost::thread_interrupted exception instead of polling in a loop - its another option",
      "created_at": "2018-05-12T22:27:04Z",
      "updated_at": "2018-05-23T14:55:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784633",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784633"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 79,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784645",
      "pull_request_review_id": 119560417,
      "id": 187784645,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Nzc4NDY0NQ==",
      "diff_hunk": "@@ -0,0 +1,143 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }\n+    ~RingBuffer() { }\n+\n+    /** @return the number of elements in the buffer. */\n+    inline size_t Size() const {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return m_size;\n+    }\n+    constexpr size_t MaxSize() const { return S; }\n+\n+    value_type PopFront()\n+    {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return AssumeLockedPopFront();\n+    }\n+\n+    /**\n+     * Push an element into the buffer.\n+     *\n+     * @arg no_overwrite  If true, block and wait to write instead of overwriting existing data.\n+     */\n+    size_t PushBack(const value_type& v, bool no_overwrite = true)\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        if (no_overwrite && m_size == S) {\n+            m_read_condvar.wait(lock, [this]() { return this->m_size < S; });\n+        }\n+        m_buffer[m_insert_at_idx] = v;\n+\n+        // We're overwriting existing data, so increment the read index too.\n+        if (m_size > 0 && m_insert_at_idx == m_read_at_idx) m_read_at_idx = IncrementIdx(m_read_at_idx);\n+        if (m_size < S) ++m_size;\n+        m_insert_at_idx = IncrementIdx(m_insert_at_idx);\n+\n+        return m_size;\n+    }\n+\n+    /** Interrupt anyone waiting for reads. */\n+    void SignalStopWaiting() {\n+        m_stop_waiting.store(true);\n+    }\n+\n+    /**\n+     * Block until the buffer has content to process, polling periodically, and\n+     * then return a pointer to an element. Allow interrupts by using SignalStopWaiting().\n+     *\n+     * @return false if the poll was interrupted without executing func.\n+     */\n+    std::unique_ptr<value_type> PollForOne(int poll_interval_ms = 200)",
      "path": "src/ringbuffer.h",
      "position": null,
      "original_position": 77,
      "commit_id": "74ae99112e972225c8b44c62ace25dbf17fc0ee9",
      "original_commit_id": "354aac5a692ae727480821b6174b25fbc0134b21",
      "in_reply_to_id": null,
      "user": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "why a pointer here? if you want to show that this function can fail consider this signature: `bool PollForOne(value_type& popped)` ",
      "created_at": "2018-05-12T22:28:34Z",
      "updated_at": "2018-05-23T14:55:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784645",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784645"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784650",
      "pull_request_review_id": 119560417,
      "id": 187784650,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Nzc4NDY1MA==",
      "diff_hunk": "@@ -0,0 +1,143 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }\n+    ~RingBuffer() { }\n+\n+    /** @return the number of elements in the buffer. */\n+    inline size_t Size() const {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return m_size;\n+    }\n+    constexpr size_t MaxSize() const { return S; }\n+\n+    value_type PopFront()\n+    {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return AssumeLockedPopFront();\n+    }\n+\n+    /**\n+     * Push an element into the buffer.\n+     *\n+     * @arg no_overwrite  If true, block and wait to write instead of overwriting existing data.\n+     */\n+    size_t PushBack(const value_type& v, bool no_overwrite = true)\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        if (no_overwrite && m_size == S) {\n+            m_read_condvar.wait(lock, [this]() { return this->m_size < S; });\n+        }\n+        m_buffer[m_insert_at_idx] = v;\n+\n+        // We're overwriting existing data, so increment the read index too.\n+        if (m_size > 0 && m_insert_at_idx == m_read_at_idx) m_read_at_idx = IncrementIdx(m_read_at_idx);\n+        if (m_size < S) ++m_size;\n+        m_insert_at_idx = IncrementIdx(m_insert_at_idx);\n+\n+        return m_size;\n+    }\n+\n+    /** Interrupt anyone waiting for reads. */\n+    void SignalStopWaiting() {\n+        m_stop_waiting.store(true);\n+    }\n+\n+    /**\n+     * Block until the buffer has content to process, polling periodically, and\n+     * then return a pointer to an element. Allow interrupts by using SignalStopWaiting().\n+     *\n+     * @return false if the poll was interrupted without executing func.",
      "path": "src/ringbuffer.h",
      "position": null,
      "original_position": 75,
      "commit_id": "74ae99112e972225c8b44c62ace25dbf17fc0ee9",
      "original_commit_id": "354aac5a692ae727480821b6174b25fbc0134b21",
      "in_reply_to_id": null,
      "user": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "needs update",
      "created_at": "2018-05-12T22:28:43Z",
      "updated_at": "2018-05-23T14:55:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784650",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784650"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784723",
      "pull_request_review_id": 119560417,
      "id": 187784723,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Nzc4NDcyMw==",
      "diff_hunk": "@@ -0,0 +1,143 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }\n+    ~RingBuffer() { }\n+\n+    /** @return the number of elements in the buffer. */\n+    inline size_t Size() const {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return m_size;\n+    }\n+    constexpr size_t MaxSize() const { return S; }\n+\n+    value_type PopFront()",
      "path": "src/ringbuffer.h",
      "position": null,
      "original_position": 39,
      "commit_id": "74ae99112e972225c8b44c62ace25dbf17fc0ee9",
      "original_commit_id": "354aac5a692ae727480821b6174b25fbc0134b21",
      "in_reply_to_id": null,
      "user": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "afaict this method is unsafe right now `AssumeLockedPopFront` (called internally) will assert if the buffer is empty - and there is no way currently to guarantee that I only call this method when there is something to pop",
      "created_at": "2018-05-12T22:33:31Z",
      "updated_at": "2018-05-23T14:55:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784723",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784723"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784818",
      "pull_request_review_id": 119560417,
      "id": 187784818,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Nzc4NDgxOA==",
      "diff_hunk": "@@ -0,0 +1,143 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }",
      "path": "src/ringbuffer.h",
      "position": null,
      "original_position": 29,
      "commit_id": "74ae99112e972225c8b44c62ace25dbf17fc0ee9",
      "original_commit_id": "354aac5a692ae727480821b6174b25fbc0134b21",
      "in_reply_to_id": null,
      "user": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "consider dropping m_read_at_idx - it can be expressed as a method `(m_insert_at_idx + m_size) % MaxSize()` - one less variable to ensure that you properly update",
      "created_at": "2018-05-12T22:39:57Z",
      "updated_at": "2018-05-23T14:55:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784818",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784818"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784855",
      "pull_request_review_id": 119560417,
      "id": 187784855,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Nzc4NDg1NQ==",
      "diff_hunk": "@@ -0,0 +1,143 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }\n+    ~RingBuffer() { }\n+\n+    /** @return the number of elements in the buffer. */\n+    inline size_t Size() const {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return m_size;\n+    }\n+    constexpr size_t MaxSize() const { return S; }\n+\n+    value_type PopFront()\n+    {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return AssumeLockedPopFront();\n+    }\n+\n+    /**\n+     * Push an element into the buffer.\n+     *\n+     * @arg no_overwrite  If true, block and wait to write instead of overwriting existing data.\n+     */\n+    size_t PushBack(const value_type& v, bool no_overwrite = true)\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        if (no_overwrite && m_size == S) {\n+            m_read_condvar.wait(lock, [this]() { return this->m_size < S; });\n+        }\n+        m_buffer[m_insert_at_idx] = v;\n+\n+        // We're overwriting existing data, so increment the read index too.\n+        if (m_size > 0 && m_insert_at_idx == m_read_at_idx) m_read_at_idx = IncrementIdx(m_read_at_idx);\n+        if (m_size < S) ++m_size;\n+        m_insert_at_idx = IncrementIdx(m_insert_at_idx);\n+\n+        return m_size;\n+    }\n+\n+    /** Interrupt anyone waiting for reads. */\n+    void SignalStopWaiting() {\n+        m_stop_waiting.store(true);\n+    }\n+\n+    /**\n+     * Block until the buffer has content to process, polling periodically, and\n+     * then return a pointer to an element. Allow interrupts by using SignalStopWaiting().\n+     *\n+     * @return false if the poll was interrupted without executing func.\n+     */\n+    std::unique_ptr<value_type> PollForOne(int poll_interval_ms = 200)\n+    {\n+        while (!m_stop_waiting.load()) {\n+            {\n+                std::unique_lock<std::mutex> lock(m_lock);\n+                if (m_size > 0) {\n+                    return std::unique_ptr<value_type>(new value_type(AssumeLockedPopFront()));\n+                }\n+            }\n+            std::this_thread::sleep_for(std::chrono::milliseconds(poll_interval_ms));\n+        }\n+        return nullptr;\n+    }\n+\n+    /** @return all values currently in the buffer after popping them. */\n+    std::vector<value_type> PopAll()\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        std::vector<value_type> values;",
      "path": "src/ringbuffer.h",
      "position": null,
      "original_position": 95,
      "commit_id": "74ae99112e972225c8b44c62ace25dbf17fc0ee9",
      "original_commit_id": "354aac5a692ae727480821b6174b25fbc0134b21",
      "in_reply_to_id": null,
      "user": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "can preallocate to `m_size`",
      "created_at": "2018-05-12T22:43:48Z",
      "updated_at": "2018-05-23T14:55:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784855",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784855"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 95,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784881",
      "pull_request_review_id": 119560417,
      "id": 187784881,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Nzc4NDg4MQ==",
      "diff_hunk": "@@ -0,0 +1,143 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }\n+    ~RingBuffer() { }\n+\n+    /** @return the number of elements in the buffer. */\n+    inline size_t Size() const {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return m_size;\n+    }\n+    constexpr size_t MaxSize() const { return S; }\n+\n+    value_type PopFront()\n+    {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return AssumeLockedPopFront();\n+    }\n+\n+    /**\n+     * Push an element into the buffer.\n+     *\n+     * @arg no_overwrite  If true, block and wait to write instead of overwriting existing data.\n+     */\n+    size_t PushBack(const value_type& v, bool no_overwrite = true)\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        if (no_overwrite && m_size == S) {\n+            m_read_condvar.wait(lock, [this]() { return this->m_size < S; });\n+        }\n+        m_buffer[m_insert_at_idx] = v;\n+\n+        // We're overwriting existing data, so increment the read index too.\n+        if (m_size > 0 && m_insert_at_idx == m_read_at_idx) m_read_at_idx = IncrementIdx(m_read_at_idx);\n+        if (m_size < S) ++m_size;\n+        m_insert_at_idx = IncrementIdx(m_insert_at_idx);\n+\n+        return m_size;\n+    }\n+\n+    /** Interrupt anyone waiting for reads. */\n+    void SignalStopWaiting() {\n+        m_stop_waiting.store(true);\n+    }\n+\n+    /**\n+     * Block until the buffer has content to process, polling periodically, and\n+     * then return a pointer to an element. Allow interrupts by using SignalStopWaiting().\n+     *\n+     * @return false if the poll was interrupted without executing func.\n+     */\n+    std::unique_ptr<value_type> PollForOne(int poll_interval_ms = 200)\n+    {\n+        while (!m_stop_waiting.load()) {\n+            {\n+                std::unique_lock<std::mutex> lock(m_lock);\n+                if (m_size > 0) {\n+                    return std::unique_ptr<value_type>(new value_type(AssumeLockedPopFront()));\n+                }\n+            }\n+            std::this_thread::sleep_for(std::chrono::milliseconds(poll_interval_ms));\n+        }\n+        return nullptr;\n+    }\n+\n+    /** @return all values currently in the buffer after popping them. */\n+    std::vector<value_type> PopAll()\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        std::vector<value_type> values;\n+\n+        while (m_size > 0 && m_read_at_idx != m_insert_at_idx) {",
      "path": "src/ringbuffer.h",
      "position": null,
      "original_position": 97,
      "commit_id": "74ae99112e972225c8b44c62ace25dbf17fc0ee9",
      "original_commit_id": "354aac5a692ae727480821b6174b25fbc0134b21",
      "in_reply_to_id": 187784547,
      "user": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "also - you could just do this as two range copies one from read_at to min(read_at + m_size, S) and another from 0 to m_size - the size of the stuff you copied previously",
      "created_at": "2018-05-12T22:45:52Z",
      "updated_at": "2018-05-23T14:55:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784881",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784881"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 97,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784950",
      "pull_request_review_id": 119560417,
      "id": 187784950,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Nzc4NDk1MA==",
      "diff_hunk": "@@ -271,3 +274,44 @@ void BCLog::Logger::ShrinkDebugFile()\n     else if (file != nullptr)\n         fclose(file);\n }\n+\n+namespace async_logging {",
      "path": "src/logging.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "74ae99112e972225c8b44c62ace25dbf17fc0ee9",
      "original_commit_id": "354aac5a692ae727480821b6174b25fbc0134b21",
      "in_reply_to_id": null,
      "user": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "you might as well make this a class instead of essentially a static object. who knows when we might want to have separate instances logging different modules to different log files and its very easy to just make this a class now",
      "created_at": "2018-05-12T22:51:27Z",
      "updated_at": "2018-05-23T14:55:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784950",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784950"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 278,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784956",
      "pull_request_review_id": 119560417,
      "id": 187784956,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Nzc4NDk1Ng==",
      "diff_hunk": "@@ -271,3 +274,44 @@ void BCLog::Logger::ShrinkDebugFile()\n     else if (file != nullptr)\n         fclose(file);\n }\n+\n+namespace async_logging {\n+    using LogArgs = std::string;\n+    RingBuffer<LogArgs, 1024> log_buffer;\n+    std::unique_ptr<std::thread> flush_logs_thread;\n+    std::once_flag flush_logs_thread_started;\n+\n+    static void ConsumeLogs()\n+    {\n+        std::unique_ptr<LogArgs> next_log_line;\n+        while (next_log_line = log_buffer.PollForOne()) {\n+            g_logger->LogPrintStr(*next_log_line);\n+        }\n+    }\n+\n+    void FlushAll()\n+    {\n+        for (LogArgs& s : log_buffer.PopAll()) {\n+            g_logger->LogPrintStr(s);\n+        }\n+    }\n+\n+    void Queue(const std::string& str)\n+    {\n+        std::call_once(flush_logs_thread_started, [](){",
      "path": "src/logging.cpp",
      "position": null,
      "original_position": 38,
      "commit_id": "74ae99112e972225c8b44c62ace25dbf17fc0ee9",
      "original_commit_id": "354aac5a692ae727480821b6174b25fbc0134b21",
      "in_reply_to_id": null,
      "user": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "much clearer to just have a start method, or RAII the class if you can?",
      "created_at": "2018-05-12T22:52:04Z",
      "updated_at": "2018-05-23T14:55:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784956",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784956"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 301,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784965",
      "pull_request_review_id": 119560417,
      "id": 187784965,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Nzc4NDk2NQ==",
      "diff_hunk": "@@ -271,3 +274,44 @@ void BCLog::Logger::ShrinkDebugFile()\n     else if (file != nullptr)\n         fclose(file);\n }\n+\n+namespace async_logging {\n+    using LogArgs = std::string;\n+    RingBuffer<LogArgs, 1024> log_buffer;\n+    std::unique_ptr<std::thread> flush_logs_thread;\n+    std::once_flag flush_logs_thread_started;\n+\n+    static void ConsumeLogs()\n+    {\n+        std::unique_ptr<LogArgs> next_log_line;\n+        while (next_log_line = log_buffer.PollForOne()) {\n+            g_logger->LogPrintStr(*next_log_line);\n+        }\n+    }\n+\n+    void FlushAll()\n+    {\n+        for (LogArgs& s : log_buffer.PopAll()) {\n+            g_logger->LogPrintStr(s);\n+        }\n+    }\n+\n+    void Queue(const std::string& str)\n+    {\n+        std::call_once(flush_logs_thread_started, [](){\n+            flush_logs_thread.reset(new std::thread(ConsumeLogs));\n+        });\n+        log_buffer.PushBack(std::move(str));",
      "path": "src/logging.cpp",
      "position": null,
      "original_position": 41,
      "commit_id": "74ae99112e972225c8b44c62ace25dbf17fc0ee9",
      "original_commit_id": "354aac5a692ae727480821b6174b25fbc0134b21",
      "in_reply_to_id": null,
      "user": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "i think you want to `std::forward` here and declare the arg `const std::string&&`",
      "created_at": "2018-05-12T22:52:46Z",
      "updated_at": "2018-05-23T14:55:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784965",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187784965"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 304,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187805383",
      "pull_request_review_id": 119560417,
      "id": 187805383,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzgwNTM4Mw==",
      "diff_hunk": "@@ -0,0 +1,143 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }\n+    ~RingBuffer() { }\n+\n+    /** @return the number of elements in the buffer. */\n+    inline size_t Size() const {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return m_size;\n+    }\n+    constexpr size_t MaxSize() const { return S; }\n+\n+    value_type PopFront()\n+    {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return AssumeLockedPopFront();\n+    }\n+\n+    /**\n+     * Push an element into the buffer.\n+     *\n+     * @arg no_overwrite  If true, block and wait to write instead of overwriting existing data.\n+     */\n+    size_t PushBack(const value_type& v, bool no_overwrite = true)\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        if (no_overwrite && m_size == S) {\n+            m_read_condvar.wait(lock, [this]() { return this->m_size < S; });\n+        }\n+        m_buffer[m_insert_at_idx] = v;\n+\n+        // We're overwriting existing data, so increment the read index too.\n+        if (m_size > 0 && m_insert_at_idx == m_read_at_idx) m_read_at_idx = IncrementIdx(m_read_at_idx);\n+        if (m_size < S) ++m_size;\n+        m_insert_at_idx = IncrementIdx(m_insert_at_idx);\n+\n+        return m_size;\n+    }\n+\n+    /** Interrupt anyone waiting for reads. */\n+    void SignalStopWaiting() {",
      "path": "src/ringbuffer.h",
      "position": null,
      "original_position": 67,
      "commit_id": "74ae99112e972225c8b44c62ace25dbf17fc0ee9",
      "original_commit_id": "354aac5a692ae727480821b6174b25fbc0134b21",
      "in_reply_to_id": null,
      "user": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "to handle shutdown safely you need to have a way to interrupt writers who might be waiting for empty space too",
      "created_at": "2018-05-13T15:52:34Z",
      "updated_at": "2018-05-23T14:55:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187805383",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187805383"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187805588",
      "pull_request_review_id": 119560417,
      "id": 187805588,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzgwNTU4OA==",
      "diff_hunk": "@@ -271,3 +274,44 @@ void BCLog::Logger::ShrinkDebugFile()\n     else if (file != nullptr)\n         fclose(file);\n }\n+\n+namespace async_logging {\n+    using LogArgs = std::string;\n+    RingBuffer<LogArgs, 1024> log_buffer;\n+    std::unique_ptr<std::thread> flush_logs_thread;\n+    std::once_flag flush_logs_thread_started;\n+\n+    static void ConsumeLogs()\n+    {\n+        std::unique_ptr<LogArgs> next_log_line;\n+        while (next_log_line = log_buffer.PollForOne()) {\n+            g_logger->LogPrintStr(*next_log_line);\n+        }\n+    }\n+\n+    void FlushAll()\n+    {\n+        for (LogArgs& s : log_buffer.PopAll()) {\n+            g_logger->LogPrintStr(s);\n+        }\n+    }\n+\n+    void Queue(const std::string& str)\n+    {\n+        std::call_once(flush_logs_thread_started, [](){\n+            flush_logs_thread.reset(new std::thread(ConsumeLogs));\n+        });\n+        log_buffer.PushBack(std::move(str));\n+    }\n+\n+    void Shutdown()",
      "path": "src/logging.cpp",
      "position": null,
      "original_position": 44,
      "commit_id": "74ae99112e972225c8b44c62ace25dbf17fc0ee9",
      "original_commit_id": "354aac5a692ae727480821b6174b25fbc0134b21",
      "in_reply_to_id": null,
      "user": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "if for whatever reason there are more logs generated after you've flushed in this method - they wont ever get to the file.\r\nI think you mentioned somewhere having an option to enable synchronous logging. You should probably flip that flag that here so if something happens to get logged after the async logger is shut down it makes its way into the file, added benefit that you can be a bit less careful about when in the shutdown sequence the logger is terminated",
      "created_at": "2018-05-13T15:59:01Z",
      "updated_at": "2018-05-23T14:55:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187805588",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187805588"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 307,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187805627",
      "pull_request_review_id": 119560417,
      "id": 187805627,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzgwNTYyNw==",
      "diff_hunk": "@@ -191,5 +191,10 @@ int main(int argc, char* argv[])\n     // Connect bitcoind signal handlers\n     noui_connect();\n \n-    return (AppInit(argc, argv) ? EXIT_SUCCESS : EXIT_FAILURE);\n+    int status = AppInit(argc, argv);\n+\n+    if (!status) {",
      "path": "src/bitcoind.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "74ae99112e972225c8b44c62ace25dbf17fc0ee9",
      "original_commit_id": "354aac5a692ae727480821b6174b25fbc0134b21",
      "in_reply_to_id": null,
      "user": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "i think if you do shutdown here it will only work for coind but not qt but in init.cpp it will for both? not entirely sure though\r\n",
      "created_at": "2018-05-13T16:00:44Z",
      "updated_at": "2018-05-23T14:55:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187805627",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187805627"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 196,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187805931",
      "pull_request_review_id": 119560417,
      "id": 187805931,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzgwNTkzMQ==",
      "diff_hunk": "@@ -291,6 +291,7 @@ void Shutdown()\n     globalVerifyHandle.reset();\n     ECC_Stop();\n     LogPrintf(\"%s: done\\n\", __func__);\n+    async_logging::Shutdown();",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "74ae99112e972225c8b44c62ace25dbf17fc0ee9",
      "original_commit_id": "354aac5a692ae727480821b6174b25fbc0134b21",
      "in_reply_to_id": null,
      "user": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "oh - why do in both? if you are just concerned about capturing all logs, see my comment on the Shutdown() method below",
      "created_at": "2018-05-13T16:12:35Z",
      "updated_at": "2018-05-23T14:55:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187805931",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187805931"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 294,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187806063",
      "pull_request_review_id": 119560417,
      "id": 187806063,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzgwNjA2Mw==",
      "diff_hunk": "@@ -0,0 +1,143 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }\n+    ~RingBuffer() { }\n+\n+    /** @return the number of elements in the buffer. */\n+    inline size_t Size() const {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return m_size;\n+    }\n+    constexpr size_t MaxSize() const { return S; }\n+\n+    value_type PopFront()\n+    {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return AssumeLockedPopFront();\n+    }\n+\n+    /**\n+     * Push an element into the buffer.\n+     *\n+     * @arg no_overwrite  If true, block and wait to write instead of overwriting existing data.\n+     */\n+    size_t PushBack(const value_type& v, bool no_overwrite = true)\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        if (no_overwrite && m_size == S) {\n+            m_read_condvar.wait(lock, [this]() { return this->m_size < S; });\n+        }\n+        m_buffer[m_insert_at_idx] = v;",
      "path": "src/ringbuffer.h",
      "position": null,
      "original_position": 56,
      "commit_id": "74ae99112e972225c8b44c62ace25dbf17fc0ee9",
      "original_commit_id": "354aac5a692ae727480821b6174b25fbc0134b21",
      "in_reply_to_id": null,
      "user": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "same thing as in a prior comment - use a forward with an rvalue reference",
      "created_at": "2018-05-13T16:18:11Z",
      "updated_at": "2018-05-23T14:55:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187806063",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187806063"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187806094",
      "pull_request_review_id": 119560417,
      "id": 187806094,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NzgwNjA5NA==",
      "diff_hunk": "@@ -0,0 +1,143 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }\n+    ~RingBuffer() { }\n+\n+    /** @return the number of elements in the buffer. */\n+    inline size_t Size() const {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return m_size;\n+    }\n+    constexpr size_t MaxSize() const { return S; }\n+\n+    value_type PopFront()\n+    {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return AssumeLockedPopFront();\n+    }\n+\n+    /**\n+     * Push an element into the buffer.\n+     *\n+     * @arg no_overwrite  If true, block and wait to write instead of overwriting existing data.\n+     */\n+    size_t PushBack(const value_type& v, bool no_overwrite = true)\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        if (no_overwrite && m_size == S) {\n+            m_read_condvar.wait(lock, [this]() { return this->m_size < S; });\n+        }\n+        m_buffer[m_insert_at_idx] = v;\n+\n+        // We're overwriting existing data, so increment the read index too.\n+        if (m_size > 0 && m_insert_at_idx == m_read_at_idx) m_read_at_idx = IncrementIdx(m_read_at_idx);\n+        if (m_size < S) ++m_size;\n+        m_insert_at_idx = IncrementIdx(m_insert_at_idx);\n+\n+        return m_size;\n+    }\n+\n+    /** Interrupt anyone waiting for reads. */\n+    void SignalStopWaiting() {\n+        m_stop_waiting.store(true);\n+    }\n+\n+    /**\n+     * Block until the buffer has content to process, polling periodically, and\n+     * then return a pointer to an element. Allow interrupts by using SignalStopWaiting().\n+     *\n+     * @return false if the poll was interrupted without executing func.\n+     */\n+    std::unique_ptr<value_type> PollForOne(int poll_interval_ms = 200)\n+    {\n+        while (!m_stop_waiting.load()) {\n+            {\n+                std::unique_lock<std::mutex> lock(m_lock);\n+                if (m_size > 0) {\n+                    return std::unique_ptr<value_type>(new value_type(AssumeLockedPopFront()));",
      "path": "src/ringbuffer.h",
      "position": null,
      "original_position": 83,
      "commit_id": "74ae99112e972225c8b44c62ace25dbf17fc0ee9",
      "original_commit_id": "354aac5a692ae727480821b6174b25fbc0134b21",
      "in_reply_to_id": null,
      "user": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "i think you are doing an unnecessary copy here",
      "created_at": "2018-05-13T16:19:04Z",
      "updated_at": "2018-05-23T14:55:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187806094",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187806094"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 83,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187972826",
      "pull_request_review_id": 119857563,
      "id": 187972826,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Nzk3MjgyNg==",
      "diff_hunk": "@@ -0,0 +1,143 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }\n+    ~RingBuffer() { }\n+\n+    /** @return the number of elements in the buffer. */\n+    inline size_t Size() const {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return m_size;\n+    }\n+    constexpr size_t MaxSize() const { return S; }\n+\n+    value_type PopFront()\n+    {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return AssumeLockedPopFront();\n+    }\n+\n+    /**\n+     * Push an element into the buffer.\n+     *\n+     * @arg no_overwrite  If true, block and wait to write instead of overwriting existing data.\n+     */\n+    size_t PushBack(const value_type& v, bool no_overwrite = true)\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        if (no_overwrite && m_size == S) {\n+            m_read_condvar.wait(lock, [this]() { return this->m_size < S; });\n+        }\n+        m_buffer[m_insert_at_idx] = v;\n+\n+        // We're overwriting existing data, so increment the read index too.\n+        if (m_size > 0 && m_insert_at_idx == m_read_at_idx) m_read_at_idx = IncrementIdx(m_read_at_idx);\n+        if (m_size < S) ++m_size;\n+        m_insert_at_idx = IncrementIdx(m_insert_at_idx);\n+\n+        return m_size;\n+    }\n+\n+    /** Interrupt anyone waiting for reads. */\n+    void SignalStopWaiting() {\n+        m_stop_waiting.store(true);\n+    }\n+\n+    /**\n+     * Block until the buffer has content to process, polling periodically, and\n+     * then return a pointer to an element. Allow interrupts by using SignalStopWaiting().\n+     *\n+     * @return false if the poll was interrupted without executing func.\n+     */\n+    std::unique_ptr<value_type> PollForOne(int poll_interval_ms = 200)\n+    {\n+        while (!m_stop_waiting.load()) {",
      "path": "src/ringbuffer.h",
      "position": null,
      "original_position": 79,
      "commit_id": "74ae99112e972225c8b44c62ace25dbf17fc0ee9",
      "original_commit_id": "354aac5a692ae727480821b6174b25fbc0134b21",
      "in_reply_to_id": 187784436,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think that we're trying to move away from `boost`'s thread stuff, but I think your general suggestion holds - we can probably just flip a condition variable + boolean in `Shutdown()` to get the same sort of behavior. The polling was a pretty gross hack.",
      "created_at": "2018-05-14T14:25:52Z",
      "updated_at": "2018-05-23T14:55:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187972826",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187972826"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 79,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187973666",
      "pull_request_review_id": 119858604,
      "id": 187973666,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Nzk3MzY2Ng==",
      "diff_hunk": "@@ -0,0 +1,143 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }\n+    ~RingBuffer() { }\n+\n+    /** @return the number of elements in the buffer. */\n+    inline size_t Size() const {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return m_size;\n+    }\n+    constexpr size_t MaxSize() const { return S; }\n+\n+    value_type PopFront()\n+    {\n+        std::lock_guard<std::mutex> lock(m_lock);\n+        return AssumeLockedPopFront();\n+    }\n+\n+    /**\n+     * Push an element into the buffer.\n+     *\n+     * @arg no_overwrite  If true, block and wait to write instead of overwriting existing data.\n+     */\n+    size_t PushBack(const value_type& v, bool no_overwrite = true)\n+    {\n+        std::unique_lock<std::mutex> lock(m_lock);\n+        if (no_overwrite && m_size == S) {\n+            m_read_condvar.wait(lock, [this]() { return this->m_size < S; });\n+        }\n+        m_buffer[m_insert_at_idx] = v;\n+\n+        // We're overwriting existing data, so increment the read index too.\n+        if (m_size > 0 && m_insert_at_idx == m_read_at_idx) m_read_at_idx = IncrementIdx(m_read_at_idx);\n+        if (m_size < S) ++m_size;\n+        m_insert_at_idx = IncrementIdx(m_insert_at_idx);\n+\n+        return m_size;\n+    }\n+\n+    /** Interrupt anyone waiting for reads. */\n+    void SignalStopWaiting() {\n+        m_stop_waiting.store(true);\n+    }\n+\n+    /**\n+     * Block until the buffer has content to process, polling periodically, and\n+     * then return a pointer to an element. Allow interrupts by using SignalStopWaiting().\n+     *\n+     * @return false if the poll was interrupted without executing func.\n+     */\n+    std::unique_ptr<value_type> PollForOne(int poll_interval_ms = 200)",
      "path": "src/ringbuffer.h",
      "position": null,
      "original_position": 77,
      "commit_id": "74ae99112e972225c8b44c62ace25dbf17fc0ee9",
      "original_commit_id": "354aac5a692ae727480821b6174b25fbc0134b21",
      "in_reply_to_id": 187784645,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah yeah, that totally makes sense.",
      "created_at": "2018-05-14T14:27:55Z",
      "updated_at": "2018-05-23T14:55:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187973666",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187973666"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187976253",
      "pull_request_review_id": 119861738,
      "id": 187976253,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Nzk3NjI1Mw==",
      "diff_hunk": "@@ -0,0 +1,143 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }",
      "path": "src/ringbuffer.h",
      "position": null,
      "original_position": 29,
      "commit_id": "74ae99112e972225c8b44c62ace25dbf17fc0ee9",
      "original_commit_id": "354aac5a692ae727480821b6174b25fbc0134b21",
      "in_reply_to_id": 187784818,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think that works. Let's say we instantiate a buffer with `MaxSize() == 10` and add 5 elements, making `m_insert_at_idx == 5`. I'd want to start reading from index 0, but your formula gives me `5 + 4 % 10` = 9, which isn't right. Maybe I'm missing something here.",
      "created_at": "2018-05-14T14:34:21Z",
      "updated_at": "2018-05-23T14:55:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187976253",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187976253"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187976482",
      "pull_request_review_id": 119862020,
      "id": 187976482,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Nzk3NjQ4Mg==",
      "diff_hunk": "@@ -271,3 +274,44 @@ void BCLog::Logger::ShrinkDebugFile()\n     else if (file != nullptr)\n         fclose(file);\n }\n+\n+namespace async_logging {",
      "path": "src/logging.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "74ae99112e972225c8b44c62ace25dbf17fc0ee9",
      "original_commit_id": "354aac5a692ae727480821b6174b25fbc0134b21",
      "in_reply_to_id": 187784950,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, fair point.",
      "created_at": "2018-05-14T14:35:02Z",
      "updated_at": "2018-05-23T14:55:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187976482",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187976482"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 278,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187976982",
      "pull_request_review_id": 119862633,
      "id": 187976982,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Nzk3Njk4Mg==",
      "diff_hunk": "@@ -271,3 +274,44 @@ void BCLog::Logger::ShrinkDebugFile()\n     else if (file != nullptr)\n         fclose(file);\n }\n+\n+namespace async_logging {\n+    using LogArgs = std::string;\n+    RingBuffer<LogArgs, 1024> log_buffer;\n+    std::unique_ptr<std::thread> flush_logs_thread;\n+    std::once_flag flush_logs_thread_started;\n+\n+    static void ConsumeLogs()\n+    {\n+        std::unique_ptr<LogArgs> next_log_line;\n+        while (next_log_line = log_buffer.PollForOne()) {\n+            g_logger->LogPrintStr(*next_log_line);\n+        }\n+    }\n+\n+    void FlushAll()\n+    {\n+        for (LogArgs& s : log_buffer.PopAll()) {\n+            g_logger->LogPrintStr(s);\n+        }\n+    }\n+\n+    void Queue(const std::string& str)\n+    {\n+        std::call_once(flush_logs_thread_started, [](){\n+            flush_logs_thread.reset(new std::thread(ConsumeLogs));\n+        });\n+        log_buffer.PushBack(std::move(str));",
      "path": "src/logging.cpp",
      "position": null,
      "original_position": 41,
      "commit_id": "74ae99112e972225c8b44c62ace25dbf17fc0ee9",
      "original_commit_id": "354aac5a692ae727480821b6174b25fbc0134b21",
      "in_reply_to_id": 187784965,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah yeah, thanks.",
      "created_at": "2018-05-14T14:36:29Z",
      "updated_at": "2018-05-23T14:55:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187976982",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187976982"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 304,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187977225",
      "pull_request_review_id": 119862931,
      "id": 187977225,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Nzk3NzIyNQ==",
      "diff_hunk": "@@ -271,3 +274,44 @@ void BCLog::Logger::ShrinkDebugFile()\n     else if (file != nullptr)\n         fclose(file);\n }\n+\n+namespace async_logging {\n+    using LogArgs = std::string;\n+    RingBuffer<LogArgs, 1024> log_buffer;\n+    std::unique_ptr<std::thread> flush_logs_thread;\n+    std::once_flag flush_logs_thread_started;\n+\n+    static void ConsumeLogs()\n+    {\n+        std::unique_ptr<LogArgs> next_log_line;\n+        while (next_log_line = log_buffer.PollForOne()) {\n+            g_logger->LogPrintStr(*next_log_line);\n+        }\n+    }\n+\n+    void FlushAll()\n+    {\n+        for (LogArgs& s : log_buffer.PopAll()) {\n+            g_logger->LogPrintStr(s);\n+        }\n+    }\n+\n+    void Queue(const std::string& str)\n+    {\n+        std::call_once(flush_logs_thread_started, [](){\n+            flush_logs_thread.reset(new std::thread(ConsumeLogs));\n+        });\n+        log_buffer.PushBack(std::move(str));\n+    }\n+\n+    void Shutdown()",
      "path": "src/logging.cpp",
      "position": null,
      "original_position": 44,
      "commit_id": "74ae99112e972225c8b44c62ace25dbf17fc0ee9",
      "original_commit_id": "354aac5a692ae727480821b6174b25fbc0134b21",
      "in_reply_to_id": 187805588,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yep, good point.",
      "created_at": "2018-05-14T14:37:12Z",
      "updated_at": "2018-05-23T14:55:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187977225",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187977225"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 307,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187978434",
      "pull_request_review_id": 119864479,
      "id": 187978434,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4Nzk3ODQzNA==",
      "diff_hunk": "@@ -0,0 +1,143 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RINGBUFFER_H\n+#define BITCOIN_RINGBUFFER_H\n+\n+#include <array>\n+#include <atomic>\n+#include <cassert>\n+#include <chrono>\n+#include <condition_variable>\n+#include <functional>\n+#include <mutex>\n+#include <thread>\n+#include <vector>\n+\n+/**\n+ * A threadsafe circular buffer.\n+ *\n+ * Allows optional blocking behavior instead of overwriting when at capacity.\n+ */\n+template<typename ET, int S>\n+class RingBuffer\n+{\n+public:\n+    using value_type = ET;\n+\n+    RingBuffer() : m_size(0), m_insert_at_idx(0), m_read_at_idx(0), m_stop_waiting(false) { }",
      "path": "src/ringbuffer.h",
      "position": null,
      "original_position": 29,
      "commit_id": "74ae99112e972225c8b44c62ace25dbf17fc0ee9",
      "original_commit_id": "354aac5a692ae727480821b6174b25fbc0134b21",
      "in_reply_to_id": 187784818,
      "user": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "oh sorry - i flipped them - `m_insert_at_idx == (m_read_at_idx + m_size) % MaxSize()`\r\n",
      "created_at": "2018-05-14T14:40:26Z",
      "updated_at": "2018-05-23T14:55:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187978434",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187978434"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13200"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    }
  ]
}