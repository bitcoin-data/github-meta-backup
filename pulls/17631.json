{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
    "id": 346892608,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzQ2ODkyNjA4",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/17631.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/17631.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "number": 17631,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "Expose block filters over REST",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This adds a new rest endpoint:\r\n/rest/blockfilter/filtertype/requesttype/blockhash (eg\r\n/rest/blockfilter/basic/header/000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f.hex)\r\nwhich exposes either the filter \"header\" or the filter data itself.\r\nMost of the code is cribbed from the equivalent RPC.\r\n\r\nYou can test it at http://bitcoin-rest.bitcoin.ninja/rest//blockfilter/basic/header/000000005b7a58a939b2636f61fa4ddd62258c5fed57667a35d23f2334c4f86d.hex",
    "labels": [
      {
        "id": 98279177,
        "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
        "name": "RPC/REST/ZMQ",
        "color": "0052cc",
        "default": false
      }
    ],
    "created_at": "2019-11-29T04:45:23Z",
    "updated_at": "2023-01-18T10:08:27Z",
    "closed_at": "2021-12-20T08:02:52Z",
    "mergeable_state": "unknown",
    "merged_at": "2021-12-20T08:02:52Z",
    "merge_commit_sha": "70d6a09f5ccdc18f251bc07e5884bc85004057a1",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "TheBlueMatt:2019-11-filter-rest",
      "ref": "2019-11-filter-rest",
      "sha": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 1443291,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNDQzMjkx",
        "name": "bitcoin",
        "full_name": "TheBlueMatt/bitcoin",
        "owner": {
          "login": "TheBlueMatt",
          "id": 649246,
          "node_id": "MDQ6VXNlcjY0OTI0Ng==",
          "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/TheBlueMatt",
          "html_url": "https://github.com/TheBlueMatt",
          "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
          "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
          "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
          "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
          "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/TheBlueMatt/bitcoin",
        "description": "Bitcoin (dont fork from here, fork from bitcoin/bitcoin)",
        "fork": true,
        "url": "https://api.github.com/repos/TheBlueMatt/bitcoin",
        "archive_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/events",
        "forks_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/TheBlueMatt/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:TheBlueMatt/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/TheBlueMatt/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/hooks",
        "svn_url": "https://github.com/TheBlueMatt/bitcoin",
        "homepage": "http://www.bitcoin.org/",
        "language": "C++",
        "forks_count": 6,
        "stargazers_count": 19,
        "watchers_count": 19,
        "size": 171686,
        "default_branch": "master",
        "open_issues_count": 1,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T09:40:23Z",
        "created_at": "2011-03-05T14:14:49Z",
        "updated_at": "2022-12-15T18:21:13Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "feedb9c84e72e4fff489810a2bbeec09bcda5763",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69817,
        "watchers_count": 69817,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T22:42:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T01:13:41Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 231,
    "deletions": 5,
    "changed_files": 3,
    "commits": 2,
    "review_comments": 61,
    "comments": 38
  },
  "events": [
    {
      "event": "head_ref_force_pushed",
      "id": 2840339181,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjg0MDMzOTE4MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2840339181",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-29T05:02:00Z"
    },
    {
      "event": "labeled",
      "id": 2840354699,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI4NDAzNTQ2OTk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2840354699",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-29T05:15:46Z",
      "label": {
        "name": "RPC/REST/ZMQ",
        "color": "0052cc"
      }
    },
    {
      "event": "commented",
      "id": 559713149,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU1OTcxMzE0OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559713149",
      "actor": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-29T09:00:19Z",
      "updated_at": "2019-11-29T09:00:19Z",
      "author_association": "MEMBER",
      "body": "A test would be nice.",
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-559713149",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631"
    },
    {
      "event": "commented",
      "id": 559721048,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU1OTcyMTA0OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559721048",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-29T09:24:12Z",
      "updated_at": "2019-11-29T09:29:16Z",
      "author_association": "CONTRIBUTOR",
      "body": "After reading `doc/REST-interface.md` I'm not entirely clear about the assumed trust boundaries.\r\n\r\nWhat recommendations do we give to our users regarding exposing the REST endpoints publicly? Do the recommendations differ from our recommendations with regards to exposing the JSON-RPC endpoints publicly?\r\n\r\nAs I've understood it we regard the JSON-RPC interface as as an internal control plane only to be accessible by trusted clients. The assumption we're making from a trust boundary perspective seems to be that we assume that an untrusted clients will never be able to connect to the port serving the JSON-RPC interface (which is the same port as the REST interface).",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-559721048",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631"
    },
    {
      "event": "commented",
      "id": 559723792,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU1OTcyMzc5Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559723792",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-29T09:32:37Z",
      "updated_at": "2019-11-29T09:32:37Z",
      "author_association": "MEMBER",
      "body": "Concept ACK.\r\n\r\n> After reading doc/REST-interface.md I'm not entirely clear about the assumed trust boundaries.\r\n\r\nThat's a fair question (FWIW the limit has always been: only public data, no complex queries, do not parse JSON as input), but I'd suggest opening a new issue for it. Please keep this one for review of the code changes.",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-559723792",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631"
    },
    {
      "event": "commented",
      "id": 559725358,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU1OTcyNTM1OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559725358",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-29T09:37:16Z",
      "updated_at": "2019-11-29T09:37:16Z",
      "author_association": "CONTRIBUTOR",
      "body": "@laanwj Without knowing if consumers are trusted or not it is pretty hard to review it from a security perspective :)",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-559725358",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631"
    },
    {
      "event": "mentioned",
      "id": 2840855031,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mjg0MDg1NTAzMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2840855031",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-29T09:37:16Z"
    },
    {
      "event": "subscribed",
      "id": 2840855038,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI4NDA4NTUwMzg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2840855038",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-29T09:37:16Z"
    },
    {
      "event": "commented",
      "id": 559726929,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU1OTcyNjkyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559726929",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-29T09:42:04Z",
      "updated_at": "2019-11-29T09:46:47Z",
      "author_association": "MEMBER",
      "body": "The REST interface is a lightweight interface for querying public data. Consumers are trusted but less so than on RPC (as they don't authenticate). I still wouldn't recommend exposing it directly to the internet. But maybe it's OK to open it \"publicly\" inside some LAN or VPN that your applications run in.\r\n\r\nThis is my last general comment on this, please open a new issue if you want to continue this discussion.\r\n\r\n> `doc/REST-interface.md`\r\n\r\nSpeaking of which, please update the documentation to mention this new call.",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-559726929",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631"
    },
    {
      "event": "reviewed",
      "id": 324757830,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzI0NzU3ODMw",
      "url": null,
      "actor": null,
      "commit_id": "661f03f03576b3588d6aa973b6c731b72e50bef8",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#pullrequestreview-324757830",
      "submitted_at": "2019-11-29T14:55:45Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
    },
    {
      "event": "commented",
      "id": 559867818,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU1OTg2NzgxOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559867818",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-29T19:21:29Z",
      "updated_at": "2019-11-29T19:21:29Z",
      "author_association": "MEMBER",
      "body": "Concept ACK",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-559867818",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2842148609,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjg0MjE0ODYwOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2842148609",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-29T19:37:02Z"
    },
    {
      "event": "commented",
      "id": 559869919,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU1OTg2OTkxOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559869919",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-29T19:37:25Z",
      "updated_at": "2019-11-29T19:37:25Z",
      "author_association": "MEMBER",
      "body": "Added a basic sanity test, redid the way headers work to make it easy to get many of them just like the /headers/ request.",
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-559869919",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631"
    },
    {
      "event": "reviewed",
      "id": 324923896,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzI0OTIzODk2",
      "url": null,
      "actor": null,
      "commit_id": "6f2e02f92ebffb06392bd5b84387f6f11d2a80ff",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "paymog",
        "id": 1986950,
        "node_id": "MDQ6VXNlcjE5ODY5NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1986950?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paymog",
        "html_url": "https://github.com/paymog",
        "followers_url": "https://api.github.com/users/paymog/followers",
        "following_url": "https://api.github.com/users/paymog/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paymog/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paymog/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paymog/subscriptions",
        "organizations_url": "https://api.github.com/users/paymog/orgs",
        "repos_url": "https://api.github.com/users/paymog/repos",
        "events_url": "https://api.github.com/users/paymog/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paymog/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#pullrequestreview-324923896",
      "submitted_at": "2019-12-01T07:39:43Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
    },
    {
      "event": "commented",
      "id": 560159029,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU2MDE1OTAyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/560159029",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-12-01T21:06:04Z",
      "updated_at": "2019-12-01T21:06:04Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK",
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-560159029",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2843908172,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjg0MzkwODE3Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2843908172",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-12-02T00:31:48Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2851835427,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjg1MTgzNTQyNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2851835427",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-12-03T22:06:31Z"
    },
    {
      "event": "commented",
      "id": 562195592,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU2MjE5NTU5Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/562195592",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-12-05T16:05:19Z",
      "updated_at": "2021-10-14T12:17:47Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-562195592",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631"
    },
    {
      "event": "labeled",
      "id": 2867700204,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI4Njc3MDAyMDQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2867700204",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-12-09T20:04:55Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 338198378,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4MTk4Mzc4",
      "url": null,
      "actor": null,
      "commit_id": "3ab6abcc4dd1a70f30d1341fe21702e2a8b417f5",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#pullrequestreview-338198378",
      "submitted_at": "2020-01-03T17:55:02Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
    },
    {
      "event": "referenced",
      "id": 2922161280,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI5MjIxNjEyODA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2922161280",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "3edcc25287234b921db0fb73d145c2deebdd53af",
      "commit_url": "https://api.github.com/repos/bitcoinknots/bitcoin/commits/3edcc25287234b921db0fb73d145c2deebdd53af",
      "created_at": "2020-01-05T02:25:14Z"
    },
    {
      "event": "commented",
      "id": 622487014,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjQ4NzAxNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/622487014",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-01T17:40:16Z",
      "updated_at": "2020-05-01T17:40:16Z",
      "author_association": "MEMBER",
      "body": "Rebased.",
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-622487014",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3293904668,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzI5MzkwNDY2OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3293904668",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-01T17:40:16Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3293914378,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzI5MzkxNDM3OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3293914378",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-01T17:43:21Z"
    },
    {
      "event": "unlabeled",
      "id": 3294171343,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MzI5NDE3MTM0Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3294171343",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-01T19:12:29Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3294435512,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzI5NDQzNTUxMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3294435512",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-01T20:51:51Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3294858782,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzI5NDg1ODc4Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3294858782",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-02T01:13:42Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3294904452,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzI5NDkwNDQ1Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3294904452",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-02T02:15:03Z"
    },
    {
      "event": "reviewed",
      "id": 412902113,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyOTAyMTEz",
      "url": null,
      "actor": null,
      "commit_id": "16d8d2da598a7d234275454f9e053ed074eebf3f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Couple of nits. Otherwise looks good.\r\n\r\nCommit order is slightly confused. It adds code in one commit then changes it in later commits. I'd suggest putting the fixes first, and then adding the new block filter code in the final commit.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#pullrequestreview-412902113",
      "submitted_at": "2020-05-15T19:47:32Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
    },
    {
      "event": "commented",
      "id": 630288035,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDI4ODAzNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/630288035",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-18T16:14:26Z",
      "updated_at": "2020-05-18T16:14:26Z",
      "author_association": "MEMBER",
      "body": "Code review ACK 16d8d2da598a7d234275454f9e053ed074eebf3f.\r\nPerhaps would be good to address the style suggestion above.",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-630288035",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631"
    },
    {
      "event": "referenced",
      "id": 3426654377,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM0MjY2NTQzNzc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3426654377",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "50a9e116856ea3727a6669e72c4df41413214a04",
      "commit_url": "https://api.github.com/repos/bitcoinknots/bitcoin/commits/50a9e116856ea3727a6669e72c4df41413214a04",
      "created_at": "2020-06-09T20:12:58Z"
    },
    {
      "event": "referenced",
      "id": 3426654532,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM0MjY2NTQ1MzI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3426654532",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "61e26c9a782aa0da55a5e757b0cf7b76d37cfe73",
      "commit_url": "https://api.github.com/repos/bitcoinknots/bitcoin/commits/61e26c9a782aa0da55a5e757b0cf7b76d37cfe73",
      "created_at": "2020-06-09T20:13:00Z"
    },
    {
      "event": "referenced",
      "id": 3426654535,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM0MjY2NTQ1MzU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3426654535",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "611aac1e325e1e5359a6d587e437d58d3147d5bb",
      "commit_url": "https://api.github.com/repos/bitcoinknots/bitcoin/commits/611aac1e325e1e5359a6d587e437d58d3147d5bb",
      "created_at": "2020-06-09T20:13:00Z"
    },
    {
      "event": "referenced",
      "id": 4036331994,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQwMzYzMzE5OTQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4036331994",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "bd8df19765e8746a652866936cd920e2dc874b10",
      "commit_url": "https://api.github.com/repos/bitcoinknots/bitcoin/commits/bd8df19765e8746a652866936cd920e2dc874b10",
      "created_at": "2020-11-25T05:59:08Z"
    },
    {
      "event": "referenced",
      "id": 4036331995,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQwMzYzMzE5OTU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4036331995",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "148f0de1f040f7446380fb36060b16af91e7b7c9",
      "commit_url": "https://api.github.com/repos/bitcoinknots/bitcoin/commits/148f0de1f040f7446380fb36060b16af91e7b7c9",
      "created_at": "2020-11-25T05:59:08Z"
    },
    {
      "event": "referenced",
      "id": 4036331997,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQwMzYzMzE5OTc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4036331997",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "949c93a624b4a3a29d43ff3ead1c89e4cea88e43",
      "commit_url": "https://api.github.com/repos/bitcoinknots/bitcoin/commits/949c93a624b4a3a29d43ff3ead1c89e4cea88e43",
      "created_at": "2020-11-25T05:59:08Z"
    },
    {
      "event": "referenced",
      "id": 4052983486,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQwNTI5ODM0ODY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4052983486",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "985f4191c643f98204377c8646e2b7b83b31da31",
      "commit_url": "https://api.github.com/repos/bitcoinknots/bitcoin/commits/985f4191c643f98204377c8646e2b7b83b31da31",
      "created_at": "2020-11-30T16:59:09Z"
    },
    {
      "event": "referenced",
      "id": 5439570070,
      "node_id": "REFE_lADOABII584fmYAAzwAAAAFEOUCW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5439570070",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "fbbe3156e0efa7bc9bf2794e0814515f0ccec5d1",
      "commit_url": "https://api.github.com/repos/bitcoinknots/bitcoin/commits/fbbe3156e0efa7bc9bf2794e0814515f0ccec5d1",
      "created_at": "2021-10-10T16:20:02Z"
    },
    {
      "event": "referenced",
      "id": 5439570071,
      "node_id": "REFE_lADOABII584fmYAAzwAAAAFEOUCX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5439570071",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "198912d0d6ce1a839dc1f2cef119b5c4e16454af",
      "commit_url": "https://api.github.com/repos/bitcoinknots/bitcoin/commits/198912d0d6ce1a839dc1f2cef119b5c4e16454af",
      "created_at": "2021-10-10T16:20:02Z"
    },
    {
      "event": "referenced",
      "id": 5439570074,
      "node_id": "REFE_lADOABII584fmYAAzwAAAAFEOUCa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5439570074",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "d0686bfa1a1fc1982f4b15770e047de1397f5a69",
      "commit_url": "https://api.github.com/repos/bitcoinknots/bitcoin/commits/d0686bfa1a1fc1982f4b15770e047de1397f5a69",
      "created_at": "2021-10-10T16:20:03Z"
    },
    {
      "event": "reviewed",
      "id": 776796706,
      "node_id": "PRR_kwDOABII584uTPoi",
      "url": null,
      "actor": null,
      "commit_id": "03d3b44e22887de65c168b3fec524b6309a48659",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK. This needs a rebase, I've added a few examples of code that has since changed inline. It'd be good to address the style/commit ordering comments above when you rebase. Also please add the change to `doc/REST-interface.md` that Wladimir suggested above.",
      "user": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#pullrequestreview-776796706",
      "submitted_at": "2021-10-12T01:16:28Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
    },
    {
      "event": "reviewed",
      "id": 776805612,
      "node_id": "PRR_kwDOABII584uTRzs",
      "url": null,
      "actor": null,
      "commit_id": "16d8d2da598a7d234275454f9e053ed074eebf3f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#pullrequestreview-776805612",
      "submitted_at": "2021-10-12T01:19:08Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
    },
    {
      "event": "commented",
      "id": 940633673,
      "node_id": "IC_kwDOABII5844EO5J",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/940633673",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-12T03:58:01Z",
      "updated_at": "2021-10-12T03:58:01Z",
      "author_association": "CONTRIBUTOR",
      "body": "concept NACK: i'm mostly of the opinion we should deprecate the rest API and make it the responsibility of a proxy server.\r\n\r\nshort of deprecating it, i don't think we should add new data items.",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-940633673",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5446810768,
      "node_id": "HRFPE_lADOABII584fmYAAzwAAAAFEp7yQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5446810768",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-12T04:09:10Z"
    },
    {
      "event": "commented",
      "id": 940638949,
      "node_id": "IC_kwDOABII5844EQLl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/940638949",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-12T04:09:15Z",
      "updated_at": "2021-10-12T04:09:15Z",
      "author_association": "MEMBER",
      "body": "Ah! I'd missed the request for doc updates, sorry about that.",
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-940638949",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631"
    },
    {
      "event": "commented",
      "id": 940639460,
      "node_id": "IC_kwDOABII5844EQTk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/940639460",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-12T04:10:14Z",
      "updated_at": "2021-10-12T04:10:14Z",
      "author_association": "MEMBER",
      "body": "> concept NACK: i'm mostly of the opinion we should deprecate the rest API and make it the responsibility of a proxy server.\r\n\r\nThat's a *huge* pain. The REST interface is nice precisely *because* you can build a proxy server for it easy - its like 10 lines of nginx.conf. JSON-RPC isn't a nice protocol that is broadly supported, its basically a Bitcoin Core-only thing at this point.",
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-940639460",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631"
    },
    {
      "event": "commented",
      "id": 940641139,
      "node_id": "IC_kwDOABII5844EQtz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/940641139",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-12T04:13:53Z",
      "updated_at": "2021-10-12T04:13:53Z",
      "author_association": "CONTRIBUTOR",
      "body": "exposing this rest endpoint over NGINX is precisely how our rest endpoint should not be use, so that only serves to add confidence to my notion that it shouldn't be a part of core. A \"proper\" proxy to the rest interface would sanitize all requests.",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-940641139",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631"
    },
    {
      "event": "commented",
      "id": 940642018,
      "node_id": "IC_kwDOABII5844EQ7i",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/940642018",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-12T04:16:00Z",
      "updated_at": "2021-10-12T04:16:00Z",
      "author_association": "MEMBER",
      "body": "You can sanitize in NGINX too, its probably easier than some python script. But, seriously, that notion is absurd - \"here, you have a running production daemon, run this hacked-together python script to make its API usable\" is not the same as \"we don't want to vouch for the security of this thing, so make sure you pay close attention if you want to expose calls to the outside\".",
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-940642018",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5446838860,
      "node_id": "HRFPE_lADOABII584fmYAAzwAAAAFEqCpM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5446838860",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-12T04:19:18Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5446871173,
      "node_id": "HRFPE_lADOABII584fmYAAzwAAAAFEqKiF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5446871173",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-12T04:30:43Z"
    },
    {
      "event": "labeled",
      "id": 5449419751,
      "node_id": "LE_lADOABII584fmYAAzwAAAAFEz4vn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5449419751",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-12T12:53:23Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 777678725,
      "node_id": "PRR_kwDOABII584uWm-F",
      "url": null,
      "actor": null,
      "commit_id": "fbfbb41a4f97b0800c3e35b3600c2e82c3f7e03f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#pullrequestreview-777678725",
      "submitted_at": "2021-10-12T17:39:07Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
    },
    {
      "event": "reviewed",
      "id": 777680292,
      "node_id": "PRR_kwDOABII584uWnWk",
      "url": null,
      "actor": null,
      "commit_id": "fbfbb41a4f97b0800c3e35b3600c2e82c3f7e03f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#pullrequestreview-777680292",
      "submitted_at": "2021-10-12T17:40:56Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
    },
    {
      "event": "reviewed",
      "id": 777683353,
      "node_id": "PRR_kwDOABII584uWoGZ",
      "url": null,
      "actor": null,
      "commit_id": "fbfbb41a4f97b0800c3e35b3600c2e82c3f7e03f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#pullrequestreview-777683353",
      "submitted_at": "2021-10-12T17:44:19Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
    },
    {
      "event": "commented",
      "id": 941240622,
      "node_id": "IC_kwDOABII5844GjEu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/941240622",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-12T17:56:07Z",
      "updated_at": "2021-10-12T17:56:07Z",
      "author_association": "MEMBER",
      "body": "> This pull request conflicts with the target branch and needs rebase.\r\n\r\nLol come on @MarcoFalke...merging 5 day old lint fixes against conflicting feature PRs.....",
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-941240622",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631"
    },
    {
      "event": "mentioned",
      "id": 5451270497,
      "node_id": "MEE_lADOABII584fmYAAzwAAAAFE68lh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5451270497",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-12T17:56:07Z"
    },
    {
      "event": "subscribed",
      "id": 5451270506,
      "node_id": "SE_lADOABII584fmYAAzwAAAAFE68lq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5451270506",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-12T17:56:07Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5451272357,
      "node_id": "HRFPE_lADOABII584fmYAAzwAAAAFE69Cl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5451272357",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-12T17:56:29Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5451276273,
      "node_id": "HRFPE_lADOABII584fmYAAzwAAAAFE69_x",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5451276273",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-12T17:57:16Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5451484475,
      "node_id": "HRFPE_lADOABII584fmYAAzwAAAAFE7w07",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5451484475",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-12T18:32:17Z"
    },
    {
      "event": "unlabeled",
      "id": 5451560598,
      "node_id": "UNLE_lADOABII584fmYAAzwAAAAFE8DaW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5451560598",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-12T18:46:33Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5451674313,
      "node_id": "HRFPE_lADOABII584fmYAAzwAAAAFE8fLJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5451674313",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-12T19:05:19Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5452546950,
      "node_id": "HRFPE_lADOABII584fmYAAzwAAAAFE_0OG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5452546950",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-12T20:53:54Z"
    },
    {
      "event": "reviewed",
      "id": 778070991,
      "node_id": "PRR_kwDOABII584uYGvP",
      "url": null,
      "actor": null,
      "commit_id": "c248fc938d04f2c4418eba907f041099416714f7",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "utACK c248fc938d04f2c4418eba907f041099416714f7",
      "user": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#pullrequestreview-778070991",
      "submitted_at": "2021-10-13T04:30:50Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
    },
    {
      "event": "commented",
      "id": 941919751,
      "node_id": "IC_kwDOABII5844JI4H",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/941919751",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-13T04:52:08Z",
      "updated_at": "2021-10-13T04:52:08Z",
      "author_association": "MEMBER",
      "body": "re https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-941240622\r\n\r\nMerge conflicts are certainly frustrating and I want to apologize for that. Though, the conflicting pull was not a \"lint fix\", but a bug fix. Sure, there was no bug report, but I think that bugs should still be fixed once they are known. When the pull was created, I didn't expect a conflict and it seems there was no activity here for more than a year (https://github.com/bitcoin/bitcoin/pull/17631#ref-pullrequest-1019792843). When the pull was merged, it had several ACKs and this one had none (IIRC). Also, it seems there was a review comment about the integer parsing still unsolved: https://github.com/bitcoin/bitcoin/pull/17631#discussion_r726684583. (A sister pull request #23227 was also merged after 4 days with 3 ACKs, even though there was a conflict, so I think this is generally fine). ",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-941919751",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631"
    },
    {
      "event": "reviewed",
      "id": 778094438,
      "node_id": "PRR_kwDOABII584uYMdm",
      "url": null,
      "actor": null,
      "commit_id": "7cf4e220801edf1a80736f6fb571ad4ed280c0c1",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#pullrequestreview-778094438",
      "submitted_at": "2021-10-13T05:11:15Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
    },
    {
      "event": "referenced",
      "id": 5473707538,
      "node_id": "REFE_lADOABII584fmYAAzwAAAAFGQiYS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5473707538",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "75bfb813f828feb487fc80f0ed225376e837fe2e",
      "commit_url": "https://api.github.com/repos/bitcoinknots/bitcoin/commits/75bfb813f828feb487fc80f0ed225376e837fe2e",
      "created_at": "2021-10-17T02:39:36Z"
    },
    {
      "event": "referenced",
      "id": 5473707539,
      "node_id": "REFE_lADOABII584fmYAAzwAAAAFGQiYT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5473707539",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "61457cf1454eb826f442971c8554f54da69908a9",
      "commit_url": "https://api.github.com/repos/bitcoinknots/bitcoin/commits/61457cf1454eb826f442971c8554f54da69908a9",
      "created_at": "2021-10-17T02:39:36Z"
    },
    {
      "event": "referenced",
      "id": 5473707541,
      "node_id": "REFE_lADOABII584fmYAAzwAAAAFGQiYV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5473707541",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "80c340455052d0051abca46f267c233690e51b6c",
      "commit_url": "https://api.github.com/repos/bitcoinknots/bitcoin/commits/80c340455052d0051abca46f267c233690e51b6c",
      "created_at": "2021-10-17T02:39:36Z"
    },
    {
      "event": "commented",
      "id": 945039954,
      "node_id": "IC_kwDOABII5844VCpS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/945039954",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-17T02:55:27Z",
      "updated_at": "2021-10-17T02:55:27Z",
      "author_association": "MEMBER",
      "body": "Concept ACK",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-945039954",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGVmN2M4MjI4ZmQ1Y2Y0NTUyNjUxOGFlMmJkNWViZGQ0ODNlNjU1MjU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ef7c8228fd5cf45526518ae2bd5ebdd483e65525",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ef7c8228fd5cf45526518ae2bd5ebdd483e65525",
      "tree": {
        "sha": "7bb6ce58e8a924f4d68898bb95ec72c8e008bc7e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7bb6ce58e8a924f4d68898bb95ec72c8e008bc7e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/810ce36d54e4a047f27a099e8295ddadfced75a9",
          "sha": "810ce36d54e4a047f27a099e8295ddadfced75a9",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/810ce36d54e4a047f27a099e8295ddadfced75a9"
        }
      ],
      "message": "Expose block filters over REST.\n\nThis adds a new rest endpoint:\n/rest/blockfilter/filtertype/requesttype/blockhash (eg\n/rest/blockfilter/basic/header/000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f.hex)\nwhich exposes either the filter \"header\" or the filter data itself.\nMost of the code is cribbed from the equivalent RPC.",
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2021-10-17T02:56:56Z"
      },
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-11-29T03:39:12Z"
      },
      "sha": "ef7c8228fd5cf45526518ae2bd5ebdd483e65525"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDJiNjRmYTMyNTFhYzVmZjRiNGQxNzRmMWYwYmU3MjI2NDkwZGNlODc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "tree": {
        "sha": "dafff8913879a886fd938b9cf41e81339c37f69f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dafff8913879a886fd938b9cf41e81339c37f69f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ef7c8228fd5cf45526518ae2bd5ebdd483e65525",
          "sha": "ef7c8228fd5cf45526518ae2bd5ebdd483e65525",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ef7c8228fd5cf45526518ae2bd5ebdd483e65525"
        }
      ],
      "message": "Update REST docs with new accessors",
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2021-10-17T02:56:56Z"
      },
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2021-10-12T02:56:48Z"
      },
      "sha": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5473718230,
      "node_id": "HRFPE_lADOABII584fmYAAzwAAAAFGQk_W",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5473718230",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-17T02:57:05Z"
    },
    {
      "event": "commented",
      "id": 945040154,
      "node_id": "IC_kwDOABII5844VCsa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/945040154",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-17T02:57:27Z",
      "updated_at": "2021-10-17T02:59:51Z",
      "author_association": "MEMBER",
      "body": "Addressed feedback, diff since the previous round of acks:\r\n\r\n```diff\r\n$ git diff-tree -U1 7cf4e22080 2b64fa3251\r\ndiff --git a/src/rest.cpp b/src/rest.cpp\r\nindex dd1be52f86..18ae350630 100644\r\n--- a/src/rest.cpp\r\n+++ b/src/rest.cpp\r\n@@ -343,3 +343,4 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\r\n \r\n-static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\r\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\r\n+{\r\n     if (!CheckWarmup(req))\r\n@@ -414,3 +415,3 @@ static bool rest_filter_header(const std::any& context, HTTPRequest* req, const\r\n     case RetFormat::BINARY: {\r\n-        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\r\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION | RPCSerializationFlags());\r\n         for (const uint256& header : filter_headers) {\r\n@@ -424,5 +425,4 @@ static bool rest_filter_header(const std::any& context, HTTPRequest* req, const\r\n     }\r\n-\r\n     case RetFormat::HEX: {\r\n-        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\r\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION | RPCSerializationFlags());\r\n         for (const uint256& header : filter_headers) {\r\n@@ -451,6 +451,6 @@ static bool rest_filter_header(const std::any& context, HTTPRequest* req, const\r\n     }\r\n-\r\n }\r\n \r\n-static bool rest_block_filter(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\r\n+static bool rest_block_filter(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\r\n+{\r\n     if (!CheckWarmup(req))\r\n@@ -523,3 +523,2 @@ static bool rest_block_filter(const std::any& context, HTTPRequest* req, const s\r\n     }\r\n-\r\n     case RetFormat::HEX: {\r\n@@ -533,3 +532,2 @@ static bool rest_block_filter(const std::any& context, HTTPRequest* req, const s\r\n     }\r\n-\r\n     case RetFormat::JSON: {\r\n@@ -542,3 +540,2 @@ static bool rest_block_filter(const std::any& context, HTTPRequest* req, const s\r\n     }\r\n-\r\n     default: {\r\n$\r\n```",
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-945040154",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631"
    },
    {
      "event": "commented",
      "id": 945175070,
      "node_id": "IC_kwDOABII5844Vjoe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/945175070",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-17T18:48:25Z",
      "updated_at": "2021-10-17T18:48:25Z",
      "author_association": "MEMBER",
      "body": "ACK 2b64fa3251ac5ff4b4d174f1f0be7226490dce87 - Adding blockfilters to the REST interface is analogous to serving other public data such as transactions or blocks.\r\n\r\nWould be nice to have the code DRY'd up at some point but i would consider it fine for now as that is true for many parts of `rest.cpp` . \r\n\r\nConsider updating the PR description with the updated endpoint paths. ie: `/rest/blockfilterheaders/basic/<COUNT>/...` instead of `/rest/blockfilter/basic/header/...`.",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-945175070",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631"
    },
    {
      "event": "renamed",
      "id": 5476513273,
      "node_id": "RTE_lADOABII584fmYAAzwAAAAFGbPX5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5476513273",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-18T08:24:03Z",
      "rename": {
        "from": "Expose block filters over REST.",
        "to": "Expose block filters over REST"
      }
    },
    {
      "event": "reviewed",
      "id": 782056448,
      "node_id": "PRR_kwDOABII584unTwA",
      "url": null,
      "actor": null,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "kiminuo",
        "id": 58662979,
        "node_id": "MDQ6VXNlcjU4NjYyOTc5",
        "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kiminuo",
        "html_url": "https://github.com/kiminuo",
        "followers_url": "https://api.github.com/users/kiminuo/followers",
        "following_url": "https://api.github.com/users/kiminuo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kiminuo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kiminuo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
        "organizations_url": "https://api.github.com/users/kiminuo/orgs",
        "repos_url": "https://api.github.com/users/kiminuo/repos",
        "events_url": "https://api.github.com/users/kiminuo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kiminuo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#pullrequestreview-782056448",
      "submitted_at": "2021-10-18T17:01:56Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
    },
    {
      "event": "reviewed",
      "id": 784707190,
      "node_id": "PRR_kwDOABII584uxa52",
      "url": null,
      "actor": null,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Nearly ACK. A few minor comments inline. The commit log for the first commit is outdated:\r\n\r\n```\r\n    Expose block filters over REST.\r\n    \r\n    This adds a new rest endpoint:\r\n    /rest/blockfilter/filtertype/requesttype/blockhash (eg\r\n    /rest/blockfilter/basic/header/000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f.hex)\r\n    which exposes either the filter \"header\" or the filter data itself.\r\n    Most of the code is cribbed from the equivalent RPC.\r\n```\r\n\r\nThe endpoints are now `/rest/blockfilterheaders/<FILTERTYPE>/<COUNT>/<BLOCK-HASH>` and `/rest/blockfilter/<FILTERTYPE>/<BLOCK-HASH>`",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#pullrequestreview-784707190",
      "submitted_at": "2021-10-20T16:58:47Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
    },
    {
      "event": "reviewed",
      "id": 784838008,
      "node_id": "PRR_kwDOABII584ux614",
      "url": null,
      "actor": null,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#pullrequestreview-784838008",
      "submitted_at": "2021-10-20T18:13:51Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
    },
    {
      "event": "commented",
      "id": 947919724,
      "node_id": "IC_kwDOABII5844gBts",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/947919724",
      "actor": {
        "login": "amovfx",
        "id": 45839100,
        "node_id": "MDQ6VXNlcjQ1ODM5MTAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/45839100?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amovfx",
        "html_url": "https://github.com/amovfx",
        "followers_url": "https://api.github.com/users/amovfx/followers",
        "following_url": "https://api.github.com/users/amovfx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amovfx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amovfx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amovfx/subscriptions",
        "organizations_url": "https://api.github.com/users/amovfx/orgs",
        "repos_url": "https://api.github.com/users/amovfx/repos",
        "events_url": "https://api.github.com/users/amovfx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amovfx/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-20T18:16:45Z",
      "updated_at": "2021-10-20T18:16:45Z",
      "author_association": "NONE",
      "body": "I read this in the pr-review-club. I am still learning.",
      "user": {
        "login": "amovfx",
        "id": 45839100,
        "node_id": "MDQ6VXNlcjQ1ODM5MTAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/45839100?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amovfx",
        "html_url": "https://github.com/amovfx",
        "followers_url": "https://api.github.com/users/amovfx/followers",
        "following_url": "https://api.github.com/users/amovfx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amovfx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amovfx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amovfx/subscriptions",
        "organizations_url": "https://api.github.com/users/amovfx/orgs",
        "repos_url": "https://api.github.com/users/amovfx/repos",
        "events_url": "https://api.github.com/users/amovfx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amovfx/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-947919724",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631"
    },
    {
      "event": "commented",
      "id": 997682927,
      "node_id": "IC_kwDOABII5847d27v",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/997682927",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-20T08:00:40Z",
      "updated_at": "2021-12-20T08:00:40Z",
      "author_association": "MEMBER",
      "body": "re-ack\r\n\r\nThis feature was roughly ready when the pull was opened more than two years ago. It's been held back on mostly non-behaviour changing \"nits\", which still haven't been addressed yet. I don't think they'll be addressed any time soon, so it might be better to fix them in a follow-up at this point. Going to merge to move this forward. ",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-997682927",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631"
    },
    {
      "event": "merged",
      "id": 5791008263,
      "node_id": "ME_lADOABII584fmYAAzwAAAAFZK8YH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5791008263",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "70d6a09f5ccdc18f251bc07e5884bc85004057a1",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70d6a09f5ccdc18f251bc07e5884bc85004057a1",
      "created_at": "2021-12-20T08:02:52Z"
    },
    {
      "event": "closed",
      "id": 5791008277,
      "node_id": "CE_lADOABII584fmYAAzwAAAAFZK8YV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5791008277",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-20T08:02:52Z"
    },
    {
      "event": "commented",
      "id": 997722237,
      "node_id": "IC_kwDOABII5847eAh9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/997722237",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-20T08:55:25Z",
      "updated_at": "2021-12-20T08:55:25Z",
      "author_association": "MEMBER",
      "body": "> It's been held back on mostly non-behaviour changing \"nits\", which still haven't been addressed yet. I don't think they'll be addressed any time soon, so it might be better to fix them in a follow-up at this point.\r\n\r\n@MarcoFalke I'm sure this wasn't your intention, but it seems very inconsistent that for most contributors PRs will be closed if review comments haven't been addressed, but in this case the PR was merged despite review comments not being addressed for many months. It shouldn't be the case that certain contributors can get their PRs merged even if they don't follow the project style guide or respond to review comments.\r\n\r\nI also disagree that https://github.com/bitcoin/bitcoin/pull/17631#discussion_r733031180 is a \"nit\". It's feedback on the interface design and changing it later would be an API break.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-997722237",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631"
    },
    {
      "event": "mentioned",
      "id": 5791289438,
      "node_id": "MEE_lADOABII584fmYAAzwAAAAFZMBBe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5791289438",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-20T08:55:25Z"
    },
    {
      "event": "subscribed",
      "id": 5791289441,
      "node_id": "SE_lADOABII584fmYAAzwAAAAFZMBBh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5791289441",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-20T08:55:25Z"
    },
    {
      "event": "commented",
      "id": 997727874,
      "node_id": "IC_kwDOABII5847eB6C",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/997727874",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-20T09:03:25Z",
      "updated_at": "2021-12-20T09:03:25Z",
      "author_association": "MEMBER",
      "body": ">  It shouldn't be the case that certain contributors can get their PRs merged even if they don't follow the project style guide or respond to review comments.\r\n\r\nStyle-only comments are not mandatory to address. This has always been the case, unless the style issue is so \"severe\" that a linter enforces it. If there are any style issues here that I missed and should be blocking, someone should add a linter to enforce them. Though, I couldn't find any. \r\n\r\n> I also disagree that #17631 (comment) is a \"nit\". It's feedback on the interface design and changing it later would be an API break.\r\n\r\nApologies, my bad. I wasn't aware there is a suggestion that requests to change the behaviour.\r\n",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-997727874",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631"
    },
    {
      "event": "commented",
      "id": 997741057,
      "node_id": "IC_kwDOABII5847eFIB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/997741057",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-20T09:18:33Z",
      "updated_at": "2021-12-20T09:18:33Z",
      "author_association": "MEMBER",
      "body": "> Style-only comments are not mandatory to address. This has always been the case, unless the style issue is so \"severe\" that a linter enforces it. If there are any style issues here that I missed and should be blocking, someone should add a linter to enforce them. Though, I couldn't find any.\r\n\r\nI disagree - all review comments should be addressed, even if that only means responding with a comment \"I don't intend to change this because ...\". If we don't have a culture where all review comments are responded to, then it falls to the maintainers to make the decision about whether the ignored review comments are important or not, and sometimes important review comments fall through the gaps.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-997741057",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631"
    },
    {
      "event": "labeled",
      "id": 5791517236,
      "node_id": "LE_lADOABII584fmYAAzwAAAAFZM4o0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5791517236",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-20T09:32:59Z",
      "label": {
        "name": "Up for grabs",
        "color": "99a810"
      }
    },
    {
      "event": "milestoned",
      "id": 5791517678,
      "node_id": "MIE_lADOABII584fmYAAzwAAAAFZM4vu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5791517678",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-20T09:33:04Z",
      "milestone": {
        "title": "23.0"
      }
    },
    {
      "event": "commented",
      "id": 997753304,
      "node_id": "IC_kwDOABII5847eIHY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/997753304",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-20T09:33:37Z",
      "updated_at": "2021-12-20T09:33:37Z",
      "author_association": "MEMBER",
      "body": "Ok, again apologies for missing the comment(s). I've marked this \"Up for grabs\", so that someone can address the feedback before the next major release (23.0). If no one does, I'll probably revert the changes.",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-997753304",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631"
    },
    {
      "event": "commented",
      "id": 998098949,
      "node_id": "IC_kwDOABII5847fcgF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/998098949",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-20T16:49:22Z",
      "updated_at": "2021-12-20T16:49:22Z",
      "author_association": "CONTRIBUTOR",
      "body": "It also feels premature given my nack + alternative path to implementing this in https://github.com/bitcoin/bitcoin/pull/23309 not having been reviewed -- were it just my NACK and no alternate, I'd agree that perhpas it was sufficiently addressed, but it was my NACK + Alternative + Acks on that approach from > 1 contributor.",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-998098949",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631"
    },
    {
      "event": "commented",
      "id": 998103204,
      "node_id": "IC_kwDOABII5847fdik",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/998103204",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-20T16:55:17Z",
      "updated_at": "2021-12-20T16:55:17Z",
      "author_association": "MEMBER",
      "body": "I didn't see any NACK.\r\n\r\n![Screenshot 2021-12-20 at 17-50-57 Expose block filters over REST by TheBlueMatt · Pull Request #17631 · bitcoin bitcoin](https://user-images.githubusercontent.com/6399679/146803422-3effc257-ad4c-4ba6-91dc-0bb09734a295.png)\r\n\r\n\r\nI have no idea how to deal with this, but maybe it could make sense to re-NACK a pull request whenever there is a change (push)? Or maybe use the \"GitHub review\" and click the red cross, which might not be hidden?",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-998103204",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631"
    },
    {
      "event": "commented",
      "id": 998104275,
      "node_id": "IC_kwDOABII5847fdzT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/998104275",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-20T16:56:45Z",
      "updated_at": "2021-12-20T16:56:45Z",
      "author_association": "MEMBER",
      "body": "And to comment on the content on the NACK: I don't see how this and #23309 are mutually exclusive.",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-998104275",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631"
    },
    {
      "event": "commented",
      "id": 998150822,
      "node_id": "IC_kwDOABII5847fpKm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/998150822",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-20T18:00:45Z",
      "updated_at": "2021-12-20T18:00:45Z",
      "author_association": "MEMBER",
      "body": "I agree with Marco that this has been basically ready for years, even if it might be imperfect. It's not too late for further improvements in followups, but blocking this on it was letting the perfect be the enemy of the good IMO.\r\n\r\nThat being said, it does seem to be a change in merge policy (IMO for the better), and should probably be discussed with the project and applied consistently.",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-998150822",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631"
    },
    {
      "event": "commented",
      "id": 998179500,
      "node_id": "IC_kwDOABII5847fwKs",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/998179500",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-20T18:42:42Z",
      "updated_at": "2021-12-20T18:42:42Z",
      "author_association": "CONTRIBUTOR",
      "body": "@MarcoFalke well it's a Concept Nack, so it doesn't get stale with changes (as opposed to an Approach Nack + Concept Ack).\r\n\r\nW.r.t mutually exclusive, the contention that  I was holding (and @practicalswift too I think?) is that a REST API exposed for unauthenticated users without a strong statement of the security model is probably something we shouldn't be maintaining or increasing dependency on for core, and a preference for doing it as a layer on top of a more strongly audited and maintained interface (JSON RPC) being superior. So extending the REST API and increasing dependency on it for consumers of Core is counter to the goal of removing it and replacing with 'userland' proxies.",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-998179500",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631"
    },
    {
      "event": "mentioned",
      "id": 5794623581,
      "node_id": "MEE_lADOABII584fmYAAzwAAAAFZYvBd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5794623581",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-20T18:42:42Z"
    },
    {
      "event": "subscribed",
      "id": 5794623586,
      "node_id": "SE_lADOABII584fmYAAzwAAAAFZYvBi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5794623586",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-20T18:42:42Z"
    },
    {
      "event": "mentioned",
      "id": 5794623591,
      "node_id": "MEE_lADOABII584fmYAAzwAAAAFZYvBn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5794623591",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-20T18:42:42Z"
    },
    {
      "event": "subscribed",
      "id": 5794623593,
      "node_id": "SE_lADOABII584fmYAAzwAAAAFZYvBp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5794623593",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-20T18:42:42Z"
    },
    {
      "event": "commented",
      "id": 998185449,
      "node_id": "IC_kwDOABII5847fxnp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/998185449",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-20T18:52:50Z",
      "updated_at": "2021-12-20T18:55:59Z",
      "author_association": "MEMBER",
      "body": "@JeremyRubin I think the discussion whether to provide a wrapper, and then later whether or not to deprecate/remove the existing REST interface is mostly independent from the question of what features should be exposed by the REST interface (whether that's provided by bitcoind directly or by a wrapper). Whatever risks exists by having a REST interface in the first place aren't worsened by adding another method.\r\n\r\nI do agree the merging procedure followed here was dubious, though.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-998185449",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631"
    },
    {
      "event": "mentioned",
      "id": 5794666074,
      "node_id": "MEE_lADOABII584fmYAAzwAAAAFZY5Za",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5794666074",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-20T18:52:50Z"
    },
    {
      "event": "subscribed",
      "id": 5794666081,
      "node_id": "SE_lADOABII584fmYAAzwAAAAFZY5Zh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5794666081",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-20T18:52:50Z"
    },
    {
      "event": "referenced",
      "id": 5795484727,
      "node_id": "REFE_lADOABII584fmYAAzwAAAAFZcBQ3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5795484727",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "dbc149e878f63e0603b3185735fcd91c61241e79",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/dbc149e878f63e0603b3185735fcd91c61241e79",
      "created_at": "2021-12-20T22:08:33Z"
    },
    {
      "event": "commented",
      "id": 998606141,
      "node_id": "IC_kwDOABII5847hYU9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/998606141",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-21T09:17:31Z",
      "updated_at": "2021-12-21T09:17:31Z",
      "author_association": "MEMBER",
      "body": "> I do agree the merging procedure followed here was dubious, though.\r\n\r\nOk, maybe I am being blind, but can someone explain to me what was wrong about the merging procedure?\r\n\r\n**Did this have too little review?**\r\n\r\nI'd say no. There were:\r\n\r\n* Concept ACK laanwj https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-559723792\r\n* Concept ACK jonasschnelli  https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-560159029\r\n* Concept ACK sipa https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-945039954\r\n* Nearly ACK jnewbery https://github.com/bitcoin/bitcoin/pull/17631#pullrequestreview-784707190\r\n* Review ACK naumenkogs https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-630288035\r\n* Review ACK meshcollider https://github.com/bitcoin/bitcoin/pull/17631#pullrequestreview-778070991\r\n* Review ACK myself https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-997682927\r\n* Review ACK dergoegge https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-945175070\r\n\r\n\r\nIf it is not possible to merge a pull request with 8 ACKs, then I honestly don't know how much review is needed to get anything merged. I expect that 99.8% of all pull request have less than 8 ACKs.\r\n\r\n**Was this merged before a comment should have been replied to?**\r\n\r\nYes, I missed the comment/question about the interface, and it should have been replied to before merge. Luckily it has been replied to after merge (and in my view resolved). The only unaddressed stuff now is refactoring nit comments.\r\n\r\nI don't think the merging procedure changed here. I still think that comments should be replied to before merge. However, I also think that style comments that haven't been replied to should not block a pull request indefinitely. If the overall direction of a pull request has received overall support (which this pull request did), then I think style-nits can be dropped or fixed in a follow-up. If the overall direction of a pull request is not agreed upon, or if the style-nits are rendering a follow-up to be a re-implementation, then I think it should not be merged (not applicable to this pull request).\r\n\r\n**Something else?**\r\n\r\nAgain, I am not seeing anything else wrong, so please elaborate.",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-998606141",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631"
    },
    {
      "event": "commented",
      "id": 998643956,
      "node_id": "IC_kwDOABII5847hhj0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/998643956",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-21T10:07:50Z",
      "updated_at": "2021-12-21T10:07:50Z",
      "author_association": "MEMBER",
      "body": ">>> can someone explain to me what was wrong about the merging procedure?\r\n\r\n>> Was this merged before a comment should have been replied to?\r\n\r\n> Yes\r\n\r\n@MarcoFalke - this is all I'm claiming - that review comments should be acknowledged and responded to before merge. The author doesn't have to agree with them or implement them, but if someone has taken the time to review the PR, the author should respond to that review before the PR is merged. That happens in 99% of PRs, and I don't see why this one should have been different.\r\n\r\nFor what it's worth, I agree with @stickies-v that we should make the REST API RESTful. I don't feel very strongly about it because I don't use the REST API myself, but I think the discussion should be had before merge.\r\n\r\nAnd to be clear, I think you do a fantastic job as a maintainer. In this instance you missed something, but it should never have been your responsibility to assess whether that comment **should** have been ignored. It's the author's responsibility to address all feedback on their PR.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-998643956",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631"
    },
    {
      "event": "mentioned",
      "id": 5797903445,
      "node_id": "MEE_lADOABII584fmYAAzwAAAAFZlPxV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5797903445",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-21T10:07:51Z"
    },
    {
      "event": "subscribed",
      "id": 5797903450,
      "node_id": "SE_lADOABII584fmYAAzwAAAAFZlPxa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5797903450",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-21T10:07:51Z"
    },
    {
      "event": "mentioned",
      "id": 5797903460,
      "node_id": "MEE_lADOABII584fmYAAzwAAAAFZlPxk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5797903460",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-21T10:07:51Z"
    },
    {
      "event": "subscribed",
      "id": 5797903468,
      "node_id": "SE_lADOABII584fmYAAzwAAAAFZlPxs",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5797903468",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-21T10:07:51Z"
    },
    {
      "event": "commented",
      "id": 998808625,
      "node_id": "IC_kwDOABII5847iJwx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/998808625",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-21T14:08:27Z",
      "updated_at": "2021-12-21T14:08:27Z",
      "author_association": "MEMBER",
      "body": "FWIW - I've [marked](https://github.com/bitcoin/bitcoin/pull/17631#discussion_r773150826) my RESTful comment as resolved, since @dergoegge [pointed out](https://github.com/bitcoin/bitcoin/pull/17631#discussion_r772514100) this is consistent with another endpoint. As such, a follow-up PR is probably the more elegant way to go. I'm also happy to incorporate the other unaddressed style change comments on #17631 into this new PR.\r\n\r\nI appreciate everyone's efforts in both doing the merging and keeping the process honest. I agree that requiring an author's explicit acknowledgement (or dismissal) of all (non-spam) comments would, in my view, be preferable. ",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-998808625",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631"
    },
    {
      "event": "mentioned",
      "id": 5799189454,
      "node_id": "MEE_lADOABII584fmYAAzwAAAAFZqJvO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5799189454",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-21T14:08:27Z"
    },
    {
      "event": "subscribed",
      "id": 5799189459,
      "node_id": "SE_lADOABII584fmYAAzwAAAAFZqJvT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5799189459",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-21T14:08:27Z"
    },
    {
      "event": "demilestoned",
      "id": 5803705867,
      "node_id": "DEME_lADOABII584fmYAAzwAAAAFZ7YYL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5803705867",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-22T09:43:34Z",
      "milestone": {
        "title": "23.0"
      }
    },
    {
      "event": "unlabeled",
      "id": 5803706197,
      "node_id": "UNLE_lADOABII584fmYAAzwAAAAFZ7YdV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5803706197",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-22T09:43:38Z",
      "label": {
        "name": "Up for grabs",
        "color": "99a810"
      }
    },
    {
      "event": "commented",
      "id": 999433649,
      "node_id": "IC_kwDOABII5847kiWx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/999433649",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-22T09:44:09Z",
      "updated_at": "2021-12-22T09:44:09Z",
      "author_association": "MEMBER",
      "body": "Looks like there is a follow up in #23836, so I've removed the \"up for grabs\" label again.",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-999433649",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631"
    },
    {
      "event": "referenced",
      "id": 5832180275,
      "node_id": "REFE_lADOABII584fmYAAzwAAAAFboAIz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5832180275",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "9d099b02d8f02042f46401bcdbe5a729ef607308",
      "commit_url": "https://api.github.com/repos/bitcoin-core/gui/commits/9d099b02d8f02042f46401bcdbe5a729ef607308",
      "created_at": "2022-01-02T00:37:22Z"
    },
    {
      "event": "referenced",
      "id": 5832214899,
      "node_id": "REFE_lADOABII584fmYAAzwAAAAFboIlz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5832214899",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "d7d5eb37536f875f72f92bad677c1d6d48421b47",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/d7d5eb37536f875f72f92bad677c1d6d48421b47",
      "created_at": "2022-01-02T01:39:36Z"
    },
    {
      "event": "commented",
      "id": 1015887548,
      "node_id": "IC_kwDOABII5848jTa8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1015887548",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-18T22:22:06Z",
      "updated_at": "2022-01-18T22:22:06Z",
      "author_association": "MEMBER",
      "body": "#24098 is now ready for review to address the last unaddressed comments (by myself) on this PR.",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-1015887548",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631"
    },
    {
      "event": "referenced",
      "id": 6377547885,
      "node_id": "REFE_lADOABII584fmYAAzwAAAAF8Iaht",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6377547885",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "27cfaeed1ea975f52c2307153f7295d43bc84b64",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27cfaeed1ea975f52c2307153f7295d43bc84b64",
      "created_at": "2022-04-06T07:28:09Z"
    },
    {
      "event": "locked",
      "id": 8254130338,
      "node_id": "LOE_lADOABII584fmYAAzwAAAAHr_Aii",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8254130338",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-18T10:08:27Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352165265",
      "pull_request_review_id": 324757830,
      "id": 352165265,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjE2NTI2NQ==",
      "diff_hunk": "@@ -265,6 +267,112 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_block_filter(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    //request is sent over URI scheme /rest/blockfilter/filtertype/requesttype/blockhash\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilter/filtertype/requesttype/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {",
      "path": "src/rest.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_commit_id": "661f03f03576b3588d6aa973b6c731b72e50bef8",
      "in_reply_to_id": null,
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit, the use of a single line if statement would be better (including the other one line statements as well)",
      "created_at": "2019-11-29T14:55:44Z",
      "updated_at": "2020-05-02T02:15:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352165265",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352165265"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 305,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352227089",
      "pull_request_review_id": 324833271,
      "id": 352227089,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjIyNzA4OQ==",
      "diff_hunk": "@@ -265,6 +267,112 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_block_filter(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    //request is sent over URI scheme /rest/blockfilter/filtertype/requesttype/blockhash\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilter/filtertype/requesttype/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {",
      "path": "src/rest.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_commit_id": "661f03f03576b3588d6aa973b6c731b72e50bef8",
      "in_reply_to_id": 352165265,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Would be much too long a line to do that.",
      "created_at": "2019-11-29T18:57:58Z",
      "updated_at": "2020-05-02T02:15:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352227089",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352227089"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 305,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352255960",
      "pull_request_review_id": 324867658,
      "id": 352255960,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjI1NTk2MA==",
      "diff_hunk": "@@ -265,6 +267,112 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_block_filter(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    //request is sent over URI scheme /rest/blockfilter/filtertype/requesttype/blockhash\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilter/filtertype/requesttype/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {",
      "path": "src/rest.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_commit_id": "661f03f03576b3588d6aa973b6c731b72e50bef8",
      "in_reply_to_id": 352165265,
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oh sorry I meant to ignore the brackets...",
      "created_at": "2019-11-29T23:30:54Z",
      "updated_at": "2020-05-02T02:15:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352255960",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352255960"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 305,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352325195",
      "pull_request_review_id": 324923896,
      "id": 352325195,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjMyNTE5NQ==",
      "diff_hunk": "@@ -265,6 +267,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);\n+    if (count < 1 || count > 2000) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Header count out of range: \" + uriParts[1]);",
      "path": "src/rest.cpp",
      "position": null,
      "original_position": 47,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_commit_id": "6f2e02f92ebffb06392bd5b84387f6f11d2a80ff",
      "in_reply_to_id": null,
      "user": {
        "login": "paymog",
        "id": 1986950,
        "node_id": "MDQ6VXNlcjE5ODY5NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1986950?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paymog",
        "html_url": "https://github.com/paymog",
        "followers_url": "https://api.github.com/users/paymog/followers",
        "following_url": "https://api.github.com/users/paymog/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paymog/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paymog/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paymog/subscriptions",
        "organizations_url": "https://api.github.com/users/paymog/orgs",
        "repos_url": "https://api.github.com/users/paymog/repos",
        "events_url": "https://api.github.com/users/paymog/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paymog/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think it would be useful if this error message provided the user with the valid range.",
      "created_at": "2019-12-01T07:30:23Z",
      "updated_at": "2020-05-02T02:15:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352325195",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352325195"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 300,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352325211",
      "pull_request_review_id": 324923896,
      "id": 352325211,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjMyNTIxMQ==",
      "diff_hunk": "@@ -265,6 +267,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);\n+    if (count < 1 || count > 2000) {",
      "path": "src/rest.cpp",
      "position": null,
      "original_position": 46,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_commit_id": "6f2e02f92ebffb06392bd5b84387f6f11d2a80ff",
      "in_reply_to_id": null,
      "user": {
        "login": "paymog",
        "id": 1986950,
        "node_id": "MDQ6VXNlcjE5ODY5NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1986950?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paymog",
        "html_url": "https://github.com/paymog",
        "followers_url": "https://api.github.com/users/paymog/followers",
        "following_url": "https://api.github.com/users/paymog/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paymog/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paymog/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paymog/subscriptions",
        "organizations_url": "https://api.github.com/users/paymog/orgs",
        "repos_url": "https://api.github.com/users/paymog/repos",
        "events_url": "https://api.github.com/users/paymog/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paymog/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "should `2000` be turned into a constant?",
      "created_at": "2019-12-01T07:31:01Z",
      "updated_at": "2020-05-02T02:15:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352325211",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352325211"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 299,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352325362",
      "pull_request_review_id": 324923896,
      "id": 352325362,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjMyNTM2Mg==",
      "diff_hunk": "@@ -265,6 +267,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);\n+    if (count < 1 || count > 2000) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Header count out of range: \" + uriParts[1]);\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;\n+    headers.reserve(count);\n+    {\n+        LOCK(cs_main);\n+        const CBlockIndex* pindex = LookupBlockIndex(block_hash);\n+        while (pindex != nullptr && ::ChainActive().Contains(pindex)) {\n+            headers.push_back(pindex);\n+            if (headers.size() == (unsigned long)count)\n+                break;\n+            pindex = ::ChainActive().Next(pindex);\n+        }\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    std::vector<uint256> filter_headers;\n+    filter_headers.reserve(count);\n+    for (const CBlockIndex *pindex : headers) {\n+        uint256 filter_header;\n+        if (!index->LookupFilterHeader(pindex, filter_header)) {\n+            std::string errmsg = \"Filter not found.\";\n+\n+            if (!index_ready) {\n+                errmsg += \" Block filters are still in the process of being indexed.\";\n+            } else {\n+                errmsg += \" This error is unexpected and indicates index corruption.\";\n+            }\n+\n+            return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+        }\n+        filter_headers.push_back(filter_header);\n+    }\n+\n+    switch (rf) {\n+    case RetFormat::BINARY: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string binaryHeader = ssHeader.str();\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryHeader);\n+        return true;\n+    }\n+\n+    case RetFormat::HEX: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string strHex = HexStr(ssHeader.begin(), ssHeader.end()) + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"text/plain\");\n+        req->WriteReply(HTTP_OK, strHex);\n+        return true;\n+    }\n+    case RetFormat::JSON: {\n+        UniValue jsonHeaders(UniValue::VARR);\n+        for (const uint256& header : filter_headers) {\n+            jsonHeaders.push_back(header.GetHex());\n+        }\n+\n+        std::string strJSON = jsonHeaders.write() + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"application/json\");\n+        req->WriteReply(HTTP_OK, strJSON);\n+        return true;\n+    }\n+    default: {\n+        return RESTERR(req, HTTP_NOT_FOUND, \"output format not found (available: .bin, .hex)\");",
      "path": "src/rest.cpp",
      "position": null,
      "original_position": 119,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_commit_id": "6f2e02f92ebffb06392bd5b84387f6f11d2a80ff",
      "in_reply_to_id": null,
      "user": {
        "login": "paymog",
        "id": 1986950,
        "node_id": "MDQ6VXNlcjE5ODY5NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1986950?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paymog",
        "html_url": "https://github.com/paymog",
        "followers_url": "https://api.github.com/users/paymog/followers",
        "following_url": "https://api.github.com/users/paymog/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paymog/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paymog/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paymog/subscriptions",
        "organizations_url": "https://api.github.com/users/paymog/orgs",
        "repos_url": "https://api.github.com/users/paymog/repos",
        "events_url": "https://api.github.com/users/paymog/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paymog/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If I'm reading the code right it looks like json is a valid output format too along with binary and hex.",
      "created_at": "2019-12-01T07:35:43Z",
      "updated_at": "2020-05-02T02:15:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352325362",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352325362"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 372,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352325420",
      "pull_request_review_id": 324923896,
      "id": 352325420,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjMyNTQyMA==",
      "diff_hunk": "@@ -265,6 +267,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);\n+    if (count < 1 || count > 2000) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Header count out of range: \" + uriParts[1]);\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;\n+    headers.reserve(count);\n+    {\n+        LOCK(cs_main);\n+        const CBlockIndex* pindex = LookupBlockIndex(block_hash);\n+        while (pindex != nullptr && ::ChainActive().Contains(pindex)) {\n+            headers.push_back(pindex);\n+            if (headers.size() == (unsigned long)count)\n+                break;\n+            pindex = ::ChainActive().Next(pindex);\n+        }\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    std::vector<uint256> filter_headers;\n+    filter_headers.reserve(count);\n+    for (const CBlockIndex *pindex : headers) {\n+        uint256 filter_header;\n+        if (!index->LookupFilterHeader(pindex, filter_header)) {\n+            std::string errmsg = \"Filter not found.\";\n+\n+            if (!index_ready) {\n+                errmsg += \" Block filters are still in the process of being indexed.\";\n+            } else {\n+                errmsg += \" This error is unexpected and indicates index corruption.\";\n+            }\n+\n+            return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+        }\n+        filter_headers.push_back(filter_header);\n+    }\n+\n+    switch (rf) {\n+    case RetFormat::BINARY: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string binaryHeader = ssHeader.str();\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryHeader);\n+        return true;\n+    }\n+\n+    case RetFormat::HEX: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string strHex = HexStr(ssHeader.begin(), ssHeader.end()) + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"text/plain\");\n+        req->WriteReply(HTTP_OK, strHex);\n+        return true;\n+    }\n+    case RetFormat::JSON: {\n+        UniValue jsonHeaders(UniValue::VARR);\n+        for (const uint256& header : filter_headers) {\n+            jsonHeaders.push_back(header.GetHex());\n+        }\n+\n+        std::string strJSON = jsonHeaders.write() + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"application/json\");\n+        req->WriteReply(HTTP_OK, strJSON);\n+        return true;\n+    }\n+    default: {\n+        return RESTERR(req, HTTP_NOT_FOUND, \"output format not found (available: .bin, .hex)\");\n+    }\n+    }\n+\n+}\n+static bool rest_block_filter(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    //request is sent over URI scheme /rest/blockfilter/filtertype/blockhash\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 2) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilter/filtertype/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[1], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[1]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {",
      "path": "src/rest.cpp",
      "position": 181,
      "original_position": 149,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_commit_id": "6f2e02f92ebffb06392bd5b84387f6f11d2a80ff",
      "in_reply_to_id": null,
      "user": {
        "login": "paymog",
        "id": 1986950,
        "node_id": "MDQ6VXNlcjE5ODY5NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1986950?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paymog",
        "html_url": "https://github.com/paymog",
        "followers_url": "https://api.github.com/users/paymog/followers",
        "following_url": "https://api.github.com/users/paymog/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paymog/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paymog/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paymog/subscriptions",
        "organizations_url": "https://api.github.com/users/paymog/orgs",
        "repos_url": "https://api.github.com/users/paymog/repos",
        "events_url": "https://api.github.com/users/paymog/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paymog/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "the code for extracting `filtertype`, `index` and `blockhash` is shared between these two functions. Should this extraction code be pulled out into their own functions?",
      "created_at": "2019-12-01T07:37:17Z",
      "updated_at": "2020-05-02T02:15:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352325420",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352325420"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 479,
      "original_line": 479,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352325461",
      "pull_request_review_id": 324923896,
      "id": 352325461,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjMyNTQ2MQ==",
      "diff_hunk": "@@ -265,6 +267,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);\n+    if (count < 1 || count > 2000) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Header count out of range: \" + uriParts[1]);\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;\n+    headers.reserve(count);\n+    {\n+        LOCK(cs_main);\n+        const CBlockIndex* pindex = LookupBlockIndex(block_hash);\n+        while (pindex != nullptr && ::ChainActive().Contains(pindex)) {\n+            headers.push_back(pindex);\n+            if (headers.size() == (unsigned long)count)\n+                break;\n+            pindex = ::ChainActive().Next(pindex);\n+        }\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    std::vector<uint256> filter_headers;\n+    filter_headers.reserve(count);\n+    for (const CBlockIndex *pindex : headers) {\n+        uint256 filter_header;\n+        if (!index->LookupFilterHeader(pindex, filter_header)) {\n+            std::string errmsg = \"Filter not found.\";\n+\n+            if (!index_ready) {\n+                errmsg += \" Block filters are still in the process of being indexed.\";\n+            } else {\n+                errmsg += \" This error is unexpected and indicates index corruption.\";\n+            }\n+\n+            return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+        }\n+        filter_headers.push_back(filter_header);\n+    }\n+\n+    switch (rf) {\n+    case RetFormat::BINARY: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string binaryHeader = ssHeader.str();\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryHeader);\n+        return true;\n+    }\n+\n+    case RetFormat::HEX: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string strHex = HexStr(ssHeader.begin(), ssHeader.end()) + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"text/plain\");\n+        req->WriteReply(HTTP_OK, strHex);\n+        return true;\n+    }\n+    case RetFormat::JSON: {\n+        UniValue jsonHeaders(UniValue::VARR);\n+        for (const uint256& header : filter_headers) {\n+            jsonHeaders.push_back(header.GetHex());\n+        }\n+\n+        std::string strJSON = jsonHeaders.write() + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"application/json\");\n+        req->WriteReply(HTTP_OK, strJSON);\n+        return true;\n+    }\n+    default: {\n+        return RESTERR(req, HTTP_NOT_FOUND, \"output format not found (available: .bin, .hex)\");\n+    }\n+    }\n+\n+}\n+static bool rest_block_filter(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    //request is sent over URI scheme /rest/blockfilter/filtertype/blockhash\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 2) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilter/filtertype/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[1], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[1]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    const CBlockIndex* block_index;\n+    bool block_was_connected;\n+    {\n+        LOCK(cs_main);\n+        block_index = LookupBlockIndex(block_hash);\n+        if (!block_index) {\n+            return RESTERR(req, HTTP_NOT_FOUND, uriParts[1] + \" not found\");",
      "path": "src/rest.cpp",
      "position": null,
      "original_position": 159,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_commit_id": "6f2e02f92ebffb06392bd5b84387f6f11d2a80ff",
      "in_reply_to_id": null,
      "user": {
        "login": "paymog",
        "id": 1986950,
        "node_id": "MDQ6VXNlcjE5ODY5NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1986950?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paymog",
        "html_url": "https://github.com/paymog",
        "followers_url": "https://api.github.com/users/paymog/followers",
        "following_url": "https://api.github.com/users/paymog/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paymog/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paymog/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paymog/subscriptions",
        "organizations_url": "https://api.github.com/users/paymog/orgs",
        "repos_url": "https://api.github.com/users/paymog/repos",
        "events_url": "https://api.github.com/users/paymog/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paymog/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: can the error message be changed to `\"Block \" + uriParts[1] + \" not found\"`?",
      "created_at": "2019-12-01T07:38:27Z",
      "updated_at": "2020-05-02T02:15:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352325461",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352325461"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 492,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352386152",
      "pull_request_review_id": 324976238,
      "id": 352386152,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjM4NjE1Mg==",
      "diff_hunk": "@@ -265,6 +267,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);\n+    if (count < 1 || count > 2000) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Header count out of range: \" + uriParts[1]);\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;\n+    headers.reserve(count);\n+    {\n+        LOCK(cs_main);\n+        const CBlockIndex* pindex = LookupBlockIndex(block_hash);\n+        while (pindex != nullptr && ::ChainActive().Contains(pindex)) {\n+            headers.push_back(pindex);\n+            if (headers.size() == (unsigned long)count)\n+                break;\n+            pindex = ::ChainActive().Next(pindex);\n+        }\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    std::vector<uint256> filter_headers;\n+    filter_headers.reserve(count);\n+    for (const CBlockIndex *pindex : headers) {\n+        uint256 filter_header;\n+        if (!index->LookupFilterHeader(pindex, filter_header)) {\n+            std::string errmsg = \"Filter not found.\";\n+\n+            if (!index_ready) {\n+                errmsg += \" Block filters are still in the process of being indexed.\";\n+            } else {\n+                errmsg += \" This error is unexpected and indicates index corruption.\";\n+            }\n+\n+            return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+        }\n+        filter_headers.push_back(filter_header);\n+    }\n+\n+    switch (rf) {\n+    case RetFormat::BINARY: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string binaryHeader = ssHeader.str();\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryHeader);\n+        return true;\n+    }\n+\n+    case RetFormat::HEX: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string strHex = HexStr(ssHeader.begin(), ssHeader.end()) + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"text/plain\");\n+        req->WriteReply(HTTP_OK, strHex);\n+        return true;\n+    }\n+    case RetFormat::JSON: {\n+        UniValue jsonHeaders(UniValue::VARR);\n+        for (const uint256& header : filter_headers) {\n+            jsonHeaders.push_back(header.GetHex());\n+        }\n+\n+        std::string strJSON = jsonHeaders.write() + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"application/json\");\n+        req->WriteReply(HTTP_OK, strJSON);\n+        return true;\n+    }\n+    default: {\n+        return RESTERR(req, HTTP_NOT_FOUND, \"output format not found (available: .bin, .hex)\");\n+    }\n+    }\n+\n+}\n+static bool rest_block_filter(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    //request is sent over URI scheme /rest/blockfilter/filtertype/blockhash\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 2) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilter/filtertype/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[1], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[1]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {",
      "path": "src/rest.cpp",
      "position": 181,
      "original_position": 149,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_commit_id": "6f2e02f92ebffb06392bd5b84387f6f11d2a80ff",
      "in_reply_to_id": 352325420,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Lets leave DRY'ing up rest.cpp for a separate commit. I played with it a bit and there isn't an obvious solution here that doesn't end up adding more lines, but the whole of REST probably could get DRY'd up a lot especially in the results-providing section.",
      "created_at": "2019-12-02T00:25:23Z",
      "updated_at": "2020-05-02T02:15:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352386152",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352386152"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 479,
      "original_line": 479,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352386354",
      "pull_request_review_id": 324976486,
      "id": 352386354,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjM4NjM1NA==",
      "diff_hunk": "@@ -265,6 +267,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);\n+    if (count < 1 || count > 2000) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Header count out of range: \" + uriParts[1]);",
      "path": "src/rest.cpp",
      "position": null,
      "original_position": 47,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_commit_id": "6f2e02f92ebffb06392bd5b84387f6f11d2a80ff",
      "in_reply_to_id": 352325195,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hmm, its the same limits as for headers (the code was copied from that section above). Not sure where to document this given the lack of equivalent documentation like we have in RPC where we can fail with help text. Maybe we should have some kind of much more informative general help system like we do for RPC, though its obviously out of scope here.",
      "created_at": "2019-12-02T00:28:17Z",
      "updated_at": "2020-05-02T02:15:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352386354",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352386354"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 300,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352386378",
      "pull_request_review_id": 324976527,
      "id": 352386378,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjM4NjM3OA==",
      "diff_hunk": "@@ -265,6 +267,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);\n+    if (count < 1 || count > 2000) {",
      "path": "src/rest.cpp",
      "position": null,
      "original_position": 46,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_commit_id": "6f2e02f92ebffb06392bd5b84387f6f11d2a80ff",
      "in_reply_to_id": 352325211,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ehh, its the net limit, and dunno where to put it? Not really worth it.",
      "created_at": "2019-12-02T00:28:43Z",
      "updated_at": "2020-05-02T02:15:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352386378",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352386378"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 299,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352386428",
      "pull_request_review_id": 324976597,
      "id": 352386428,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjM4NjQyOA==",
      "diff_hunk": "@@ -265,6 +267,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);\n+    if (count < 1 || count > 2000) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Header count out of range: \" + uriParts[1]);\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;\n+    headers.reserve(count);\n+    {\n+        LOCK(cs_main);\n+        const CBlockIndex* pindex = LookupBlockIndex(block_hash);\n+        while (pindex != nullptr && ::ChainActive().Contains(pindex)) {\n+            headers.push_back(pindex);\n+            if (headers.size() == (unsigned long)count)\n+                break;\n+            pindex = ::ChainActive().Next(pindex);\n+        }\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    std::vector<uint256> filter_headers;\n+    filter_headers.reserve(count);\n+    for (const CBlockIndex *pindex : headers) {\n+        uint256 filter_header;\n+        if (!index->LookupFilterHeader(pindex, filter_header)) {\n+            std::string errmsg = \"Filter not found.\";\n+\n+            if (!index_ready) {\n+                errmsg += \" Block filters are still in the process of being indexed.\";\n+            } else {\n+                errmsg += \" This error is unexpected and indicates index corruption.\";\n+            }\n+\n+            return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+        }\n+        filter_headers.push_back(filter_header);\n+    }\n+\n+    switch (rf) {\n+    case RetFormat::BINARY: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string binaryHeader = ssHeader.str();\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryHeader);\n+        return true;\n+    }\n+\n+    case RetFormat::HEX: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string strHex = HexStr(ssHeader.begin(), ssHeader.end()) + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"text/plain\");\n+        req->WriteReply(HTTP_OK, strHex);\n+        return true;\n+    }\n+    case RetFormat::JSON: {\n+        UniValue jsonHeaders(UniValue::VARR);\n+        for (const uint256& header : filter_headers) {\n+            jsonHeaders.push_back(header.GetHex());\n+        }\n+\n+        std::string strJSON = jsonHeaders.write() + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"application/json\");\n+        req->WriteReply(HTTP_OK, strJSON);\n+        return true;\n+    }\n+    default: {\n+        return RESTERR(req, HTTP_NOT_FOUND, \"output format not found (available: .bin, .hex)\");",
      "path": "src/rest.cpp",
      "position": null,
      "original_position": 119,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_commit_id": "6f2e02f92ebffb06392bd5b84387f6f11d2a80ff",
      "in_reply_to_id": 352325362,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hmm, good catch. Looks like headers is busted too, I fixed both.",
      "created_at": "2019-12-02T00:29:36Z",
      "updated_at": "2020-05-02T02:15:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352386428",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352386428"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 372,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352386459",
      "pull_request_review_id": 324976635,
      "id": 352386459,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjM4NjQ1OQ==",
      "diff_hunk": "@@ -265,6 +267,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);\n+    if (count < 1 || count > 2000) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Header count out of range: \" + uriParts[1]);\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;\n+    headers.reserve(count);\n+    {\n+        LOCK(cs_main);\n+        const CBlockIndex* pindex = LookupBlockIndex(block_hash);\n+        while (pindex != nullptr && ::ChainActive().Contains(pindex)) {\n+            headers.push_back(pindex);\n+            if (headers.size() == (unsigned long)count)\n+                break;\n+            pindex = ::ChainActive().Next(pindex);\n+        }\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    std::vector<uint256> filter_headers;\n+    filter_headers.reserve(count);\n+    for (const CBlockIndex *pindex : headers) {\n+        uint256 filter_header;\n+        if (!index->LookupFilterHeader(pindex, filter_header)) {\n+            std::string errmsg = \"Filter not found.\";\n+\n+            if (!index_ready) {\n+                errmsg += \" Block filters are still in the process of being indexed.\";\n+            } else {\n+                errmsg += \" This error is unexpected and indicates index corruption.\";\n+            }\n+\n+            return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+        }\n+        filter_headers.push_back(filter_header);\n+    }\n+\n+    switch (rf) {\n+    case RetFormat::BINARY: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string binaryHeader = ssHeader.str();\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryHeader);\n+        return true;\n+    }\n+\n+    case RetFormat::HEX: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string strHex = HexStr(ssHeader.begin(), ssHeader.end()) + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"text/plain\");\n+        req->WriteReply(HTTP_OK, strHex);\n+        return true;\n+    }\n+    case RetFormat::JSON: {\n+        UniValue jsonHeaders(UniValue::VARR);\n+        for (const uint256& header : filter_headers) {\n+            jsonHeaders.push_back(header.GetHex());\n+        }\n+\n+        std::string strJSON = jsonHeaders.write() + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"application/json\");\n+        req->WriteReply(HTTP_OK, strJSON);\n+        return true;\n+    }\n+    default: {\n+        return RESTERR(req, HTTP_NOT_FOUND, \"output format not found (available: .bin, .hex)\");\n+    }\n+    }\n+\n+}\n+static bool rest_block_filter(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    //request is sent over URI scheme /rest/blockfilter/filtertype/blockhash\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 2) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilter/filtertype/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[1], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[1]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    const CBlockIndex* block_index;\n+    bool block_was_connected;\n+    {\n+        LOCK(cs_main);\n+        block_index = LookupBlockIndex(block_hash);\n+        if (!block_index) {\n+            return RESTERR(req, HTTP_NOT_FOUND, uriParts[1] + \" not found\");",
      "path": "src/rest.cpp",
      "position": null,
      "original_position": 159,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_commit_id": "6f2e02f92ebffb06392bd5b84387f6f11d2a80ff",
      "in_reply_to_id": 352325461,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hmm, its coped from the block code, so to keep it the same everywhere I'll leave it.",
      "created_at": "2019-12-02T00:30:05Z",
      "updated_at": "2020-05-02T02:15:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352386459",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352386459"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 492,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/353320872",
      "pull_request_review_id": 326321878,
      "id": 353320872,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MzMyMDg3Mg==",
      "diff_hunk": "@@ -265,6 +267,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);\n+    if (count < 1 || count > 2000) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Header count out of range: \" + uriParts[1]);",
      "path": "src/rest.cpp",
      "position": null,
      "original_position": 47,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_commit_id": "6f2e02f92ebffb06392bd5b84387f6f11d2a80ff",
      "in_reply_to_id": 352325195,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "similarly, it'd make sense to define a constant for this, and use it in both places, instead of hardcoding 2000 (which I guess is just a sanity limit)",
      "created_at": "2019-12-03T17:31:58Z",
      "updated_at": "2020-05-02T02:15:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r353320872",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/353320872"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 300,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/362901473",
      "pull_request_review_id": 338198378,
      "id": 362901473,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkwMTQ3Mw==",
      "diff_hunk": "@@ -128,8 +130,8 @@ static bool rest_headers(HTTPRequest* req,\n         return RESTERR(req, HTTP_BAD_REQUEST, \"No header count specified. Use /rest/headers/<count>/<hash>.<ext>.\");\n \n     long count = strtol(path[0].c_str(), nullptr, 10);\n-    if (count < 1 || count > 2000)\n-        return RESTERR(req, HTTP_BAD_REQUEST, \"Header count out of range: \" + path[0]);\n+    if (count < 1 || count > MAX_HEADERS_RESULTS)\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Header count out of acceptable range (1-2000): \" + path[0]);",
      "path": "src/rest.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_commit_id": "3ab6abcc4dd1a70f30d1341fe21702e2a8b417f5",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Use `%u` here instead of `2000`?",
      "created_at": "2020-01-03T17:54:20Z",
      "updated_at": "2020-05-02T02:15:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r362901473",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/362901473"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425996988",
      "pull_request_review_id": 412902113,
      "id": 425996988,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk5Njk4OA==",
      "diff_hunk": "@@ -27,6 +29,7 @@\n #include <univalue.h>\n \n static const size_t MAX_GETUTXOS_OUTPOINTS = 15; //allow a max of 15 outpoints to be queried at once\n+static const unsigned int MAX_HEADERS_RESULTS = 2000;",
      "path": "src/rest.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_commit_id": "16d8d2da598a7d234275454f9e053ed074eebf3f",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: `constrexpr`",
      "created_at": "2020-05-15T19:09:31Z",
      "updated_at": "2020-05-15T19:47:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r425996988",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425996988"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425997435",
      "pull_request_review_id": 412902113,
      "id": 425997435,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk5NzQzNQ==",
      "diff_hunk": "@@ -285,6 +288,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)",
      "path": "src/rest.cpp",
      "position": null,
      "original_position": 45,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_commit_id": "16d8d2da598a7d234275454f9e053ed074eebf3f",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Since this is all new code, can you adhere to style guide? if blocks with braces or on same lines, variable names in camel case, etc.",
      "created_at": "2020-05-15T19:10:31Z",
      "updated_at": "2020-05-15T19:47:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r425997435",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425997435"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 291,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726682001",
      "pull_request_review_id": 776796706,
      "id": 726682001,
      "node_id": "PRRC_kwDOABII584rUEmR",
      "diff_hunk": "@@ -285,6 +287,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");",
      "path": "src/rest.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_commit_id": "03d3b44e22887de65c168b3fec524b6309a48659",
      "in_reply_to_id": null,
      "user": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`<>` around parameters would be clearer",
      "created_at": "2021-10-12T00:52:35Z",
      "updated_at": "2021-10-12T01:16:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r726682001",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726682001"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 300,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726684583",
      "pull_request_review_id": 776796706,
      "id": 726684583,
      "node_id": "PRRC_kwDOABII584rUFOn",
      "diff_hunk": "@@ -285,6 +287,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);",
      "path": "src/rest.cpp",
      "position": null,
      "original_position": 45,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_commit_id": "03d3b44e22887de65c168b3fec524b6309a48659",
      "in_reply_to_id": null,
      "user": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": " `strtol` -> `ParseInt32` (#20457)",
      "created_at": "2021-10-12T01:00:34Z",
      "updated_at": "2021-10-12T01:16:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r726684583",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726684583"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 369,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726688389",
      "pull_request_review_id": 776796706,
      "id": 726688389,
      "node_id": "PRRC_kwDOABII584rUGKF",
      "diff_hunk": "@@ -285,6 +287,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);\n+    if (count < 1 || count > 2000) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Header count out of range: \" + uriParts[1]);\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;\n+    headers.reserve(count);\n+    {\n+        LOCK(cs_main);\n+        const CBlockIndex* pindex = LookupBlockIndex(block_hash);\n+        while (pindex != nullptr && ::ChainActive().Contains(pindex)) {\n+            headers.push_back(pindex);\n+            if (headers.size() == (unsigned long)count)\n+                break;\n+            pindex = ::ChainActive().Next(pindex);",
      "path": "src/rest.cpp",
      "position": null,
      "original_position": 59,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_commit_id": "03d3b44e22887de65c168b3fec524b6309a48659",
      "in_reply_to_id": null,
      "user": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: #21866\r\n```\r\nconst CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(block_hash);\r\nCChain& active_chain = chainman.ActiveChain();\r\n...\r\npindex = active_chain.Next(pindex);\r\n```\r\n",
      "created_at": "2021-10-12T01:13:45Z",
      "updated_at": "2021-10-12T02:36:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r726688389",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726688389"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 332,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726690019",
      "pull_request_review_id": 776805612,
      "id": 726690019,
      "node_id": "PRRC_kwDOABII584rUGjj",
      "diff_hunk": "@@ -280,6 +280,9 @@ def run_test(self):\n         self.sync_all()\n         json_obj = self.test_rest_request(\"/headers/5/{}\".format(bb_hash))\n         assert_equal(len(json_obj), 5)  # now we should have 5 header objects\n+        json_obj = self.test_rest_request(\"/blockfilterheaders/basic/5/{}\".format(bb_hash))\n+        assert_equal(len(json_obj), 5)  # now we should have 5 filter header objects\n+        self.test_rest_request(\"/blockfilter/basic/{}\".format(bb_hash), req_type=ReqType.BIN, ret_type=RetType.OBJ)",
      "path": "test/functional/interface_rest.py",
      "position": null,
      "original_position": 15,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_commit_id": "16d8d2da598a7d234275454f9e053ed074eebf3f",
      "in_reply_to_id": null,
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n        self.test_rest_request(f\"/blockfilter/basic/{bb_hash}\", req_type=ReqType.BIN, ret_type=RetType.OBJ)\r\n```",
      "created_at": "2021-10-12T01:19:07Z",
      "updated_at": "2021-10-12T01:19:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r726690019",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726690019"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 285,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726728370",
      "pull_request_review_id": 776849069,
      "id": 726728370,
      "node_id": "PRRC_kwDOABII584rUP6y",
      "diff_hunk": "@@ -285,6 +287,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");",
      "path": "src/rest.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_commit_id": "03d3b44e22887de65c168b3fec524b6309a48659",
      "in_reply_to_id": 726682001,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Heh, that's new since this PR was opened :)",
      "created_at": "2021-10-12T03:16:54Z",
      "updated_at": "2021-10-12T03:16:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r726728370",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726728370"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 300,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726729173",
      "pull_request_review_id": 776850021,
      "id": 726729173,
      "node_id": "PRRC_kwDOABII584rUQHV",
      "diff_hunk": "@@ -285,6 +287,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);",
      "path": "src/rest.cpp",
      "position": null,
      "original_position": 45,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_commit_id": "03d3b44e22887de65c168b3fec524b6309a48659",
      "in_reply_to_id": 726684583,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This isn't done in `rest_headers` either, which this code was copied from. Should both change or is it supposed to be strtol?",
      "created_at": "2021-10-12T03:19:25Z",
      "updated_at": "2021-10-12T03:19:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r726729173",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726729173"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 369,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726958379",
      "pull_request_review_id": 777141981,
      "id": 726958379,
      "node_id": "PRRC_kwDOABII584rVIEr",
      "diff_hunk": "@@ -285,6 +287,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);",
      "path": "src/rest.cpp",
      "position": null,
      "original_position": 45,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_commit_id": "03d3b44e22887de65c168b3fec524b6309a48659",
      "in_reply_to_id": 726684583,
      "user": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think its just another new code preference, to phase out locale-dependent functions. Since you're touching up `MAX_HEADERS_RESULTS` in `rest_headers` anyway, you could do this there too. Up to you.",
      "created_at": "2021-10-12T09:56:16Z",
      "updated_at": "2021-10-12T09:56:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r726958379",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726958379"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 369,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727358127",
      "pull_request_review_id": 777678725,
      "id": 727358127,
      "node_id": "PRRC_kwDOABII584rWpqv",
      "diff_hunk": "@@ -30,6 +32,7 @@\n #include <univalue.h>\n \n static const size_t MAX_GETUTXOS_OUTPOINTS = 15; //allow a max of 15 outpoints to be queried at once\n+static constexpr unsigned int MAX_HEADERS_RESULTS = 2000;",
      "path": "src/rest.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_commit_id": "fbfbb41a4f97b0800c3e35b3600c2e82c3f7e03f",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is it intentionally redefined rather than moving `net_processing`'s to a header?",
      "created_at": "2021-10-12T17:39:07Z",
      "updated_at": "2021-10-12T17:39:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727358127",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727358127"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 35,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727359240",
      "pull_request_review_id": 777680292,
      "id": 727359240,
      "node_id": "PRRC_kwDOABII584rWp8I",
      "diff_hunk": "@@ -335,6 +338,216 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 blockHash;",
      "path": "src/rest.cpp",
      "position": null,
      "original_position": 58,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_commit_id": "fbfbb41a4f97b0800c3e35b3600c2e82c3f7e03f",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Variable names are supposed to be snake case like you had before...",
      "created_at": "2021-10-12T17:40:56Z",
      "updated_at": "2021-10-12T17:40:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727359240",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727359240"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 356,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727361515",
      "pull_request_review_id": 777683353,
      "id": 727361515,
      "node_id": "PRRC_kwDOABII584rWqfr",
      "diff_hunk": "@@ -335,6 +338,216 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 blockHash;\n+    if (!ParseHashStr(uriParts[2], blockHash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);\n+    if (count < 1 || (unsigned int)count > MAX_HEADERS_RESULTS) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Header count out of acceptable range (1-%u): %s\",  MAX_HEADERS_RESULTS, uriParts[1]));\n+    }\n+\n+\n+    const CBlockIndex* tip = nullptr;",
      "path": "src/rest.cpp",
      "position": null,
      "original_position": 79,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_commit_id": "fbfbb41a4f97b0800c3e35b3600c2e82c3f7e03f",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Better to leave it uninitialised here so failure to do so below (in a future PR) will hit warnings.",
      "created_at": "2021-10-12T17:44:19Z",
      "updated_at": "2021-10-12T17:44:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727361515",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727361515"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 377,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727367152",
      "pull_request_review_id": 777690565,
      "id": 727367152,
      "node_id": "PRRC_kwDOABII584rWr3w",
      "diff_hunk": "@@ -335,6 +338,216 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 blockHash;",
      "path": "src/rest.cpp",
      "position": null,
      "original_position": 58,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_commit_id": "fbfbb41a4f97b0800c3e35b3600c2e82c3f7e03f",
      "in_reply_to_id": 727359240,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "John seems to disagree https://github.com/bitcoin/bitcoin/pull/17631#discussion_r425997435",
      "created_at": "2021-10-12T17:52:28Z",
      "updated_at": "2021-10-12T17:52:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727367152",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727367152"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 356,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727367824",
      "pull_request_review_id": 777691396,
      "id": 727367824,
      "node_id": "PRRC_kwDOABII584rWsCQ",
      "diff_hunk": "@@ -335,6 +338,216 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 blockHash;\n+    if (!ParseHashStr(uriParts[2], blockHash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);\n+    if (count < 1 || (unsigned int)count > MAX_HEADERS_RESULTS) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Header count out of acceptable range (1-%u): %s\",  MAX_HEADERS_RESULTS, uriParts[1]));\n+    }\n+\n+\n+    const CBlockIndex* tip = nullptr;",
      "path": "src/rest.cpp",
      "position": null,
      "original_position": 79,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_commit_id": "fbfbb41a4f97b0800c3e35b3600c2e82c3f7e03f",
      "in_reply_to_id": 727361515,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Actually, this variable is unused?",
      "created_at": "2021-10-12T17:53:23Z",
      "updated_at": "2021-10-12T17:53:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727367824",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727367824"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 377,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727369694",
      "pull_request_review_id": 777693686,
      "id": 727369694,
      "node_id": "PRRC_kwDOABII584rWsfe",
      "diff_hunk": "@@ -30,6 +32,7 @@\n #include <univalue.h>\n \n static const size_t MAX_GETUTXOS_OUTPOINTS = 15; //allow a max of 15 outpoints to be queried at once\n+static constexpr unsigned int MAX_HEADERS_RESULTS = 2000;",
      "path": "src/rest.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_commit_id": "fbfbb41a4f97b0800c3e35b3600c2e82c3f7e03f",
      "in_reply_to_id": 727358127,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good catch, renamed it here.",
      "created_at": "2021-10-12T17:56:01Z",
      "updated_at": "2021-10-12T17:56:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727369694",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727369694"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 35,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727399160",
      "pull_request_review_id": 777732533,
      "id": 727399160,
      "node_id": "PRRC_kwDOABII584rWzr4",
      "diff_hunk": "@@ -335,6 +338,216 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 blockHash;",
      "path": "src/rest.cpp",
      "position": null,
      "original_position": 58,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_commit_id": "fbfbb41a4f97b0800c3e35b3600c2e82c3f7e03f",
      "in_reply_to_id": 727359240,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Must be a typo? https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#coding-style-c",
      "created_at": "2021-10-12T18:40:50Z",
      "updated_at": "2021-10-12T18:40:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727399160",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727399160"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 356,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727683427",
      "pull_request_review_id": 778070991,
      "id": 727683427,
      "node_id": "PRRC_kwDOABII584rX5Fj",
      "diff_hunk": "@@ -337,6 +340,213 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uri_parts;\n+    boost::split(uri_parts, param, boost::is_any_of(\"/\"));\n+    if (uri_parts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uri_parts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uri_parts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uri_parts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uri_parts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uri_parts[0]);\n+    }\n+\n+    const auto parsed_count{ToIntegral<size_t>(uri_parts[1])};\n+    if (!parsed_count.has_value() || *parsed_count < 1 || *parsed_count > MAX_REST_HEADERS_RESULTS) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Header count out of acceptable range (1-%u): %s\",  MAX_REST_HEADERS_RESULTS, uri_parts[1]));\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;\n+    headers.reserve(*parsed_count);\n+    {\n+        ChainstateManager* maybe_chainman = GetChainman(context, req);\n+        if (!maybe_chainman) return false;\n+        ChainstateManager& chainman = *maybe_chainman;\n+        LOCK(cs_main);\n+        CChain& active_chain = chainman.ActiveChain();\n+        const CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(block_hash);\n+        while (pindex != nullptr && active_chain.Contains(pindex)) {\n+            headers.push_back(pindex);\n+            if (headers.size() == *parsed_count)\n+                break;\n+            pindex = active_chain.Next(pindex);\n+        }\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    std::vector<uint256> filter_headers;\n+    filter_headers.reserve(*parsed_count);\n+    for (const CBlockIndex *pindex : headers) {\n+        uint256 filter_header;\n+        if (!index->LookupFilterHeader(pindex, filter_header)) {\n+            std::string errmsg = \"Filter not found.\";\n+\n+            if (!index_ready) {\n+                errmsg += \" Block filters are still in the process of being indexed.\";\n+            } else {\n+                errmsg += \" This error is unexpected and indicates index corruption.\";\n+            }\n+\n+            return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+        }\n+        filter_headers.push_back(filter_header);",
      "path": "src/rest.cpp",
      "position": 113,
      "original_position": 112,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_commit_id": "c248fc938d04f2c4418eba907f041099416714f7",
      "in_reply_to_id": null,
      "user": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "could `std::move` this",
      "created_at": "2021-10-13T04:09:43Z",
      "updated_at": "2021-10-13T04:30:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727683427",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727683427"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 411,
      "original_line": 411,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727683868",
      "pull_request_review_id": 778070991,
      "id": 727683868,
      "node_id": "PRRC_kwDOABII584rX5Mc",
      "diff_hunk": "@@ -337,6 +340,213 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uri_parts;\n+    boost::split(uri_parts, param, boost::is_any_of(\"/\"));\n+    if (uri_parts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uri_parts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uri_parts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uri_parts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uri_parts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uri_parts[0]);\n+    }\n+\n+    const auto parsed_count{ToIntegral<size_t>(uri_parts[1])};\n+    if (!parsed_count.has_value() || *parsed_count < 1 || *parsed_count > MAX_REST_HEADERS_RESULTS) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Header count out of acceptable range (1-%u): %s\",  MAX_REST_HEADERS_RESULTS, uri_parts[1]));\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;\n+    headers.reserve(*parsed_count);\n+    {\n+        ChainstateManager* maybe_chainman = GetChainman(context, req);\n+        if (!maybe_chainman) return false;\n+        ChainstateManager& chainman = *maybe_chainman;\n+        LOCK(cs_main);\n+        CChain& active_chain = chainman.ActiveChain();\n+        const CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(block_hash);\n+        while (pindex != nullptr && active_chain.Contains(pindex)) {\n+            headers.push_back(pindex);\n+            if (headers.size() == *parsed_count)\n+                break;\n+            pindex = active_chain.Next(pindex);\n+        }\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    std::vector<uint256> filter_headers;\n+    filter_headers.reserve(*parsed_count);\n+    for (const CBlockIndex *pindex : headers) {\n+        uint256 filter_header;\n+        if (!index->LookupFilterHeader(pindex, filter_header)) {\n+            std::string errmsg = \"Filter not found.\";\n+\n+            if (!index_ready) {\n+                errmsg += \" Block filters are still in the process of being indexed.\";\n+            } else {\n+                errmsg += \" This error is unexpected and indicates index corruption.\";\n+            }\n+\n+            return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+        }\n+        filter_headers.push_back(filter_header);\n+    }\n+\n+    switch (rf) {\n+    case RetFormat::BINARY: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string binaryHeader = ssHeader.str();\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryHeader);\n+        return true;\n+    }\n+",
      "path": "src/rest.cpp",
      "position": null,
      "original_position": 127,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_commit_id": "c248fc938d04f2c4418eba907f041099416714f7",
      "in_reply_to_id": null,
      "user": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: extraneous newline",
      "created_at": "2021-10-13T04:11:08Z",
      "updated_at": "2021-10-13T04:30:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727683868",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727683868"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 425,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727686091",
      "pull_request_review_id": 778070991,
      "id": 727686091,
      "node_id": "PRRC_kwDOABII584rX5vL",
      "diff_hunk": "@@ -337,6 +340,213 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uri_parts;\n+    boost::split(uri_parts, param, boost::is_any_of(\"/\"));\n+    if (uri_parts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uri_parts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uri_parts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uri_parts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uri_parts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uri_parts[0]);\n+    }\n+\n+    const auto parsed_count{ToIntegral<size_t>(uri_parts[1])};\n+    if (!parsed_count.has_value() || *parsed_count < 1 || *parsed_count > MAX_REST_HEADERS_RESULTS) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Header count out of acceptable range (1-%u): %s\",  MAX_REST_HEADERS_RESULTS, uri_parts[1]));\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;\n+    headers.reserve(*parsed_count);\n+    {\n+        ChainstateManager* maybe_chainman = GetChainman(context, req);\n+        if (!maybe_chainman) return false;\n+        ChainstateManager& chainman = *maybe_chainman;\n+        LOCK(cs_main);\n+        CChain& active_chain = chainman.ActiveChain();\n+        const CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(block_hash);\n+        while (pindex != nullptr && active_chain.Contains(pindex)) {\n+            headers.push_back(pindex);\n+            if (headers.size() == *parsed_count)\n+                break;\n+            pindex = active_chain.Next(pindex);\n+        }\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    std::vector<uint256> filter_headers;\n+    filter_headers.reserve(*parsed_count);\n+    for (const CBlockIndex *pindex : headers) {\n+        uint256 filter_header;\n+        if (!index->LookupFilterHeader(pindex, filter_header)) {\n+            std::string errmsg = \"Filter not found.\";\n+\n+            if (!index_ready) {\n+                errmsg += \" Block filters are still in the process of being indexed.\";\n+            } else {\n+                errmsg += \" This error is unexpected and indicates index corruption.\";\n+            }\n+\n+            return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+        }\n+        filter_headers.push_back(filter_header);\n+    }\n+\n+    switch (rf) {\n+    case RetFormat::BINARY: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string binaryHeader = ssHeader.str();\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryHeader);\n+        return true;\n+    }\n+\n+    case RetFormat::HEX: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string strHex = HexStr(ssHeader) + \"\\n\";",
      "path": "src/rest.cpp",
      "position": 134,
      "original_position": 134,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_commit_id": "c248fc938d04f2c4418eba907f041099416714f7",
      "in_reply_to_id": null,
      "user": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "There are only two differences between BINARY and HEX:\r\n- `ssHeader.str()` and `HexStr(ssHeader)`\r\n- `\"application/octet-stream\"` vs `\"text/plain\"`\r\n\r\nIt could be written a lot more concisely as something like this:\r\n```cpp\r\ncase RetFormat::BINARY:\r\ncase RetFormat::HEX: {\r\n    CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\r\n    for (const uint256& header : filter_headers) {\r\n        ssHeader << header;\r\n    }\r\n\r\n    std::string header_string = (rf == RetFormat::HEX) ? HexStr(ssHeader) : ssHeader.str();\r\n    std::string content_type = (rf == RetFormat::HEX) ? \"text/plain\" : \"application/octet-stream\";\r\n    req->WriteHeader(\"Content-Type\", content_type);\r\n    req->WriteReply(HTTP_OK, header_string);\r\n    return true;\r\n}\r\n```",
      "created_at": "2021-10-13T04:18:10Z",
      "updated_at": "2021-10-13T04:36:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727686091",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727686091"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 432,
      "original_line": 432,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727698281",
      "pull_request_review_id": 778088419,
      "id": 727698281,
      "node_id": "PRRC_kwDOABII584rX8tp",
      "diff_hunk": "@@ -285,6 +287,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);",
      "path": "src/rest.cpp",
      "position": null,
      "original_position": 45,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_commit_id": "03d3b44e22887de65c168b3fec524b6309a48659",
      "in_reply_to_id": 726684583,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think the real issue isn't whether `strtol` or something else is used, but whether parsing errors are ignored or not. `strtol` makes it easy to ignore them, so it seems reasonable to use our wrappers. (Or alternatively, add the error handling)",
      "created_at": "2021-10-13T04:54:47Z",
      "updated_at": "2021-10-13T04:54:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727698281",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727698281"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 369,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727703209",
      "pull_request_review_id": 778094438,
      "id": 727703209,
      "node_id": "PRRC_kwDOABII584rX96p",
      "diff_hunk": "@@ -337,6 +340,213 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uri_parts;\n+    boost::split(uri_parts, param, boost::is_any_of(\"/\"));\n+    if (uri_parts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uri_parts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uri_parts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uri_parts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uri_parts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uri_parts[0]);\n+    }\n+\n+    const auto parsed_count{ToIntegral<size_t>(uri_parts[1])};\n+    if (!parsed_count.has_value() || *parsed_count < 1 || *parsed_count > MAX_REST_HEADERS_RESULTS) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Header count out of acceptable range (1-%u): %s\",  MAX_REST_HEADERS_RESULTS, uri_parts[1]));\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;\n+    headers.reserve(*parsed_count);\n+    {\n+        ChainstateManager* maybe_chainman = GetChainman(context, req);\n+        if (!maybe_chainman) return false;\n+        ChainstateManager& chainman = *maybe_chainman;\n+        LOCK(cs_main);\n+        CChain& active_chain = chainman.ActiveChain();\n+        const CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(block_hash);\n+        while (pindex != nullptr && active_chain.Contains(pindex)) {\n+            headers.push_back(pindex);\n+            if (headers.size() == *parsed_count)\n+                break;\n+            pindex = active_chain.Next(pindex);\n+        }\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    std::vector<uint256> filter_headers;\n+    filter_headers.reserve(*parsed_count);\n+    for (const CBlockIndex *pindex : headers) {\n+        uint256 filter_header;\n+        if (!index->LookupFilterHeader(pindex, filter_header)) {\n+            std::string errmsg = \"Filter not found.\";\n+\n+            if (!index_ready) {\n+                errmsg += \" Block filters are still in the process of being indexed.\";\n+            } else {\n+                errmsg += \" This error is unexpected and indicates index corruption.\";\n+            }\n+\n+            return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+        }\n+        filter_headers.push_back(filter_header);\n+    }\n+\n+    switch (rf) {\n+    case RetFormat::BINARY: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string binaryHeader = ssHeader.str();\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryHeader);\n+        return true;\n+    }\n+\n+    case RetFormat::HEX: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string strHex = HexStr(ssHeader) + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"text/plain\");\n+        req->WriteReply(HTTP_OK, strHex);\n+        return true;\n+    }\n+    case RetFormat::JSON: {\n+        UniValue jsonHeaders(UniValue::VARR);\n+        for (const uint256& header : filter_headers) {\n+            jsonHeaders.push_back(header.GetHex());\n+        }\n+\n+        std::string strJSON = jsonHeaders.write() + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"application/json\");\n+        req->WriteReply(HTTP_OK, strJSON);\n+        return true;\n+    }\n+    default: {\n+        return RESTERR(req, HTTP_NOT_FOUND, \"output format not found (available: \" + AvailableDataFormatsString() + \")\");\n+    }\n+    }\n+\n+}\n+\n+static bool rest_block_filter(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    //request is sent over URI scheme /rest/blockfilter/filtertype/blockhash\n+    std::vector<std::string> uri_parts;\n+    boost::split(uri_parts, param, boost::is_any_of(\"/\"));\n+    if (uri_parts.size() != 2) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilter/<filtertype>/<blockhash>\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uri_parts[1], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uri_parts[1]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uri_parts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uri_parts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uri_parts[0]);\n+    }\n+\n+    const CBlockIndex* block_index;\n+    bool block_was_connected;\n+    {\n+        ChainstateManager* maybe_chainman = GetChainman(context, req);\n+        if (!maybe_chainman) return false;\n+        ChainstateManager& chainman = *maybe_chainman;\n+        LOCK(cs_main);\n+        block_index = chainman.m_blockman.LookupBlockIndex(block_hash);\n+        if (!block_index) {\n+            return RESTERR(req, HTTP_NOT_FOUND, uri_parts[1] + \" not found\");\n+        }\n+        block_was_connected = block_index->IsValid(BLOCK_VALID_SCRIPTS);\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    BlockFilter filter;\n+    if (!index->LookupFilter(block_index, filter)) {\n+        std::string errmsg = \"Filter not found.\";\n+\n+        if (!block_was_connected) {\n+            errmsg += \" Block was not connected to active chain.\";\n+        } else if (!index_ready) {\n+            errmsg += \" Block filters are still in the process of being indexed.\";\n+        } else {\n+            errmsg += \" This error is unexpected and indicates index corruption.\";\n+        }\n+\n+        return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+    }\n+\n+    switch (rf) {\n+    case RetFormat::BINARY: {\n+        CDataStream ssResp(SER_NETWORK, PROTOCOL_VERSION | RPCSerializationFlags());\n+        ssResp << filter;\n+\n+        std::string binaryResp = ssResp.str();\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryResp);\n+        return true;\n+    }\n+\n+    case RetFormat::HEX: {\n+        CDataStream ssResp(SER_NETWORK, PROTOCOL_VERSION | RPCSerializationFlags());",
      "path": "src/rest.cpp",
      "position": 227,
      "original_position": 228,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_commit_id": "7cf4e220801edf1a80736f6fb571ad4ed280c0c1",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n        CDataStream ssResp(SER_NETWORK, PROTOCOL_VERSION);\r\n```\r\n\r\nnit if you need to retouch. This shouldn't have any effect, since no txs are serialized?",
      "created_at": "2021-10-13T05:09:13Z",
      "updated_at": "2021-10-13T05:11:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727703209",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727703209"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 525,
      "original_line": 525,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727703918",
      "pull_request_review_id": 778094438,
      "id": 727703918,
      "node_id": "PRRC_kwDOABII584rX-Fu",
      "diff_hunk": "@@ -337,6 +340,213 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))",
      "path": "src/rest.cpp",
      "position": null,
      "original_position": 47,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_commit_id": "7cf4e220801edf1a80736f6fb571ad4ed280c0c1",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit, if you need to re-touch, according to clang-format: \r\n\r\n```suggestion\r\nstatic bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\r\n{\r\n    if (!CheckWarmup(req)) {\r\n```",
      "created_at": "2021-10-13T05:11:08Z",
      "updated_at": "2021-10-13T05:11:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727703918",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727703918"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
        }
      },
      "start_line": null,
      "original_start_line": 344,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 346,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/728287246",
      "pull_request_review_id": 778878987,
      "id": 728287246,
      "node_id": "PRRC_kwDOABII584raMgO",
      "diff_hunk": "@@ -337,6 +340,213 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))",
      "path": "src/rest.cpp",
      "position": null,
      "original_position": 47,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_commit_id": "7cf4e220801edf1a80736f6fb571ad4ed280c0c1",
      "in_reply_to_id": 727703918,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah, I'd misread John's comment at https://github.com/bitcoin/bitcoin/pull/17631#discussion_r425997435 as referring to all braces, not just if ones, my bad.",
      "created_at": "2021-10-13T17:14:35Z",
      "updated_at": "2021-10-13T17:14:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r728287246",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/728287246"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
        }
      },
      "start_line": null,
      "original_start_line": 344,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 346,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730343312",
      "pull_request_review_id": 781403824,
      "id": 730343312,
      "node_id": "PRRC_kwDOABII584riCeQ",
      "diff_hunk": "@@ -337,6 +340,213 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uri_parts;\n+    boost::split(uri_parts, param, boost::is_any_of(\"/\"));\n+    if (uri_parts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uri_parts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uri_parts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uri_parts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uri_parts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uri_parts[0]);\n+    }\n+\n+    const auto parsed_count{ToIntegral<size_t>(uri_parts[1])};\n+    if (!parsed_count.has_value() || *parsed_count < 1 || *parsed_count > MAX_REST_HEADERS_RESULTS) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Header count out of acceptable range (1-%u): %s\",  MAX_REST_HEADERS_RESULTS, uri_parts[1]));\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;\n+    headers.reserve(*parsed_count);\n+    {\n+        ChainstateManager* maybe_chainman = GetChainman(context, req);\n+        if (!maybe_chainman) return false;\n+        ChainstateManager& chainman = *maybe_chainman;\n+        LOCK(cs_main);\n+        CChain& active_chain = chainman.ActiveChain();\n+        const CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(block_hash);\n+        while (pindex != nullptr && active_chain.Contains(pindex)) {\n+            headers.push_back(pindex);\n+            if (headers.size() == *parsed_count)\n+                break;\n+            pindex = active_chain.Next(pindex);\n+        }\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    std::vector<uint256> filter_headers;\n+    filter_headers.reserve(*parsed_count);\n+    for (const CBlockIndex *pindex : headers) {\n+        uint256 filter_header;\n+        if (!index->LookupFilterHeader(pindex, filter_header)) {\n+            std::string errmsg = \"Filter not found.\";\n+\n+            if (!index_ready) {\n+                errmsg += \" Block filters are still in the process of being indexed.\";\n+            } else {\n+                errmsg += \" This error is unexpected and indicates index corruption.\";\n+            }\n+\n+            return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+        }\n+        filter_headers.push_back(filter_header);",
      "path": "src/rest.cpp",
      "position": 113,
      "original_position": 112,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_commit_id": "c248fc938d04f2c4418eba907f041099416714f7",
      "in_reply_to_id": 727683427,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't believe this does anything for the 32-byte array on stack?",
      "created_at": "2021-10-17T02:51:53Z",
      "updated_at": "2021-10-17T02:51:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730343312",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730343312"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 411,
      "original_line": 411,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730343426",
      "pull_request_review_id": 781403879,
      "id": 730343426,
      "node_id": "PRRC_kwDOABII584riCgC",
      "diff_hunk": "@@ -337,6 +340,213 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uri_parts;\n+    boost::split(uri_parts, param, boost::is_any_of(\"/\"));\n+    if (uri_parts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uri_parts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uri_parts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uri_parts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uri_parts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uri_parts[0]);\n+    }\n+\n+    const auto parsed_count{ToIntegral<size_t>(uri_parts[1])};\n+    if (!parsed_count.has_value() || *parsed_count < 1 || *parsed_count > MAX_REST_HEADERS_RESULTS) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Header count out of acceptable range (1-%u): %s\",  MAX_REST_HEADERS_RESULTS, uri_parts[1]));\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;\n+    headers.reserve(*parsed_count);\n+    {\n+        ChainstateManager* maybe_chainman = GetChainman(context, req);\n+        if (!maybe_chainman) return false;\n+        ChainstateManager& chainman = *maybe_chainman;\n+        LOCK(cs_main);\n+        CChain& active_chain = chainman.ActiveChain();\n+        const CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(block_hash);\n+        while (pindex != nullptr && active_chain.Contains(pindex)) {\n+            headers.push_back(pindex);\n+            if (headers.size() == *parsed_count)\n+                break;\n+            pindex = active_chain.Next(pindex);\n+        }\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    std::vector<uint256> filter_headers;\n+    filter_headers.reserve(*parsed_count);\n+    for (const CBlockIndex *pindex : headers) {\n+        uint256 filter_header;\n+        if (!index->LookupFilterHeader(pindex, filter_header)) {\n+            std::string errmsg = \"Filter not found.\";\n+\n+            if (!index_ready) {\n+                errmsg += \" Block filters are still in the process of being indexed.\";\n+            } else {\n+                errmsg += \" This error is unexpected and indicates index corruption.\";\n+            }\n+\n+            return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+        }\n+        filter_headers.push_back(filter_header);",
      "path": "src/rest.cpp",
      "position": 113,
      "original_position": 112,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_commit_id": "c248fc938d04f2c4418eba907f041099416714f7",
      "in_reply_to_id": 727683427,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It doesn't make a difference, indeed.",
      "created_at": "2021-10-17T02:53:19Z",
      "updated_at": "2021-10-17T02:53:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730343426",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730343426"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 411,
      "original_line": 411,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730343458",
      "pull_request_review_id": 781403889,
      "id": 730343458,
      "node_id": "PRRC_kwDOABII584riCgi",
      "diff_hunk": "@@ -337,6 +340,213 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uri_parts;\n+    boost::split(uri_parts, param, boost::is_any_of(\"/\"));\n+    if (uri_parts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uri_parts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uri_parts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uri_parts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uri_parts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uri_parts[0]);\n+    }\n+\n+    const auto parsed_count{ToIntegral<size_t>(uri_parts[1])};\n+    if (!parsed_count.has_value() || *parsed_count < 1 || *parsed_count > MAX_REST_HEADERS_RESULTS) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Header count out of acceptable range (1-%u): %s\",  MAX_REST_HEADERS_RESULTS, uri_parts[1]));\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;\n+    headers.reserve(*parsed_count);\n+    {\n+        ChainstateManager* maybe_chainman = GetChainman(context, req);\n+        if (!maybe_chainman) return false;\n+        ChainstateManager& chainman = *maybe_chainman;\n+        LOCK(cs_main);\n+        CChain& active_chain = chainman.ActiveChain();\n+        const CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(block_hash);\n+        while (pindex != nullptr && active_chain.Contains(pindex)) {\n+            headers.push_back(pindex);\n+            if (headers.size() == *parsed_count)\n+                break;\n+            pindex = active_chain.Next(pindex);\n+        }\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    std::vector<uint256> filter_headers;\n+    filter_headers.reserve(*parsed_count);\n+    for (const CBlockIndex *pindex : headers) {\n+        uint256 filter_header;\n+        if (!index->LookupFilterHeader(pindex, filter_header)) {\n+            std::string errmsg = \"Filter not found.\";\n+\n+            if (!index_ready) {\n+                errmsg += \" Block filters are still in the process of being indexed.\";\n+            } else {\n+                errmsg += \" This error is unexpected and indicates index corruption.\";\n+            }\n+\n+            return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+        }\n+        filter_headers.push_back(filter_header);\n+    }\n+\n+    switch (rf) {\n+    case RetFormat::BINARY: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string binaryHeader = ssHeader.str();\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryHeader);\n+        return true;\n+    }\n+\n+    case RetFormat::HEX: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string strHex = HexStr(ssHeader) + \"\\n\";",
      "path": "src/rest.cpp",
      "position": 134,
      "original_position": 134,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_commit_id": "c248fc938d04f2c4418eba907f041099416714f7",
      "in_reply_to_id": 727686091,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Unless its pressing I'd vaguely rather keep the code the same as the rest of the code in the same file. At least personally I don't find this more readable.",
      "created_at": "2021-10-17T02:53:42Z",
      "updated_at": "2021-10-17T02:53:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730343458",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730343458"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 432,
      "original_line": 432,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730343635",
      "pull_request_review_id": 781403938,
      "id": 730343635,
      "node_id": "PRRC_kwDOABII584riCjT",
      "diff_hunk": "@@ -285,6 +287,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);",
      "path": "src/rest.cpp",
      "position": null,
      "original_position": 45,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_commit_id": "03d3b44e22887de65c168b3fec524b6309a48659",
      "in_reply_to_id": 726684583,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is now `const auto parsed_count{ToIntegral<size_t>(uri_parts[1])};`, so good, I presume (though admittedly I don't really know *what* that does....mumbles about C++).",
      "created_at": "2021-10-17T02:55:31Z",
      "updated_at": "2021-10-17T02:55:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730343635",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730343635"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 369,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730378712",
      "pull_request_review_id": 781423810,
      "id": 730378712,
      "node_id": "PRRC_kwDOABII584riLHY",
      "diff_hunk": "@@ -337,6 +340,213 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uri_parts;\n+    boost::split(uri_parts, param, boost::is_any_of(\"/\"));\n+    if (uri_parts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uri_parts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uri_parts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uri_parts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uri_parts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uri_parts[0]);\n+    }\n+\n+    const auto parsed_count{ToIntegral<size_t>(uri_parts[1])};\n+    if (!parsed_count.has_value() || *parsed_count < 1 || *parsed_count > MAX_REST_HEADERS_RESULTS) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Header count out of acceptable range (1-%u): %s\",  MAX_REST_HEADERS_RESULTS, uri_parts[1]));\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;\n+    headers.reserve(*parsed_count);\n+    {\n+        ChainstateManager* maybe_chainman = GetChainman(context, req);\n+        if (!maybe_chainman) return false;\n+        ChainstateManager& chainman = *maybe_chainman;\n+        LOCK(cs_main);\n+        CChain& active_chain = chainman.ActiveChain();\n+        const CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(block_hash);\n+        while (pindex != nullptr && active_chain.Contains(pindex)) {\n+            headers.push_back(pindex);\n+            if (headers.size() == *parsed_count)\n+                break;\n+            pindex = active_chain.Next(pindex);\n+        }\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    std::vector<uint256> filter_headers;\n+    filter_headers.reserve(*parsed_count);\n+    for (const CBlockIndex *pindex : headers) {\n+        uint256 filter_header;\n+        if (!index->LookupFilterHeader(pindex, filter_header)) {\n+            std::string errmsg = \"Filter not found.\";\n+\n+            if (!index_ready) {\n+                errmsg += \" Block filters are still in the process of being indexed.\";\n+            } else {\n+                errmsg += \" This error is unexpected and indicates index corruption.\";\n+            }\n+\n+            return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+        }\n+        filter_headers.push_back(filter_header);\n+    }\n+\n+    switch (rf) {\n+    case RetFormat::BINARY: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string binaryHeader = ssHeader.str();\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryHeader);\n+        return true;\n+    }\n+\n+    case RetFormat::HEX: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string strHex = HexStr(ssHeader) + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"text/plain\");\n+        req->WriteReply(HTTP_OK, strHex);\n+        return true;\n+    }\n+    case RetFormat::JSON: {\n+        UniValue jsonHeaders(UniValue::VARR);\n+        for (const uint256& header : filter_headers) {\n+            jsonHeaders.push_back(header.GetHex());\n+        }\n+\n+        std::string strJSON = jsonHeaders.write() + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"application/json\");\n+        req->WriteReply(HTTP_OK, strJSON);\n+        return true;\n+    }\n+    default: {\n+        return RESTERR(req, HTTP_NOT_FOUND, \"output format not found (available: \" + AvailableDataFormatsString() + \")\");\n+    }\n+    }\n+\n+}\n+\n+static bool rest_block_filter(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    //request is sent over URI scheme /rest/blockfilter/filtertype/blockhash\n+    std::vector<std::string> uri_parts;\n+    boost::split(uri_parts, param, boost::is_any_of(\"/\"));\n+    if (uri_parts.size() != 2) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilter/<filtertype>/<blockhash>\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uri_parts[1], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uri_parts[1]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uri_parts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uri_parts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uri_parts[0]);\n+    }\n+\n+    const CBlockIndex* block_index;\n+    bool block_was_connected;\n+    {\n+        ChainstateManager* maybe_chainman = GetChainman(context, req);\n+        if (!maybe_chainman) return false;\n+        ChainstateManager& chainman = *maybe_chainman;\n+        LOCK(cs_main);\n+        block_index = chainman.m_blockman.LookupBlockIndex(block_hash);\n+        if (!block_index) {\n+            return RESTERR(req, HTTP_NOT_FOUND, uri_parts[1] + \" not found\");\n+        }\n+        block_was_connected = block_index->IsValid(BLOCK_VALID_SCRIPTS);\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    BlockFilter filter;\n+    if (!index->LookupFilter(block_index, filter)) {\n+        std::string errmsg = \"Filter not found.\";\n+\n+        if (!block_was_connected) {\n+            errmsg += \" Block was not connected to active chain.\";\n+        } else if (!index_ready) {\n+            errmsg += \" Block filters are still in the process of being indexed.\";\n+        } else {\n+            errmsg += \" This error is unexpected and indicates index corruption.\";\n+        }\n+\n+        return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+    }\n+\n+    switch (rf) {\n+    case RetFormat::BINARY: {\n+        CDataStream ssResp(SER_NETWORK, PROTOCOL_VERSION | RPCSerializationFlags());\n+        ssResp << filter;\n+\n+        std::string binaryResp = ssResp.str();\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryResp);\n+        return true;\n+    }\n+\n+    case RetFormat::HEX: {\n+        CDataStream ssResp(SER_NETWORK, PROTOCOL_VERSION | RPCSerializationFlags());",
      "path": "src/rest.cpp",
      "position": 227,
      "original_position": 228,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_commit_id": "7cf4e220801edf1a80736f6fb571ad4ed280c0c1",
      "in_reply_to_id": 727703209,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Looks like you didn't remove this in the last force push?",
      "created_at": "2021-10-17T08:46:05Z",
      "updated_at": "2021-10-17T08:46:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730378712",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730378712"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 525,
      "original_line": 525,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730515278",
      "pull_request_review_id": 781524205,
      "id": 730515278,
      "node_id": "PRRC_kwDOABII584risdO",
      "diff_hunk": "@@ -337,6 +340,213 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uri_parts;\n+    boost::split(uri_parts, param, boost::is_any_of(\"/\"));\n+    if (uri_parts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uri_parts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uri_parts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uri_parts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uri_parts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uri_parts[0]);\n+    }\n+\n+    const auto parsed_count{ToIntegral<size_t>(uri_parts[1])};\n+    if (!parsed_count.has_value() || *parsed_count < 1 || *parsed_count > MAX_REST_HEADERS_RESULTS) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Header count out of acceptable range (1-%u): %s\",  MAX_REST_HEADERS_RESULTS, uri_parts[1]));\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;\n+    headers.reserve(*parsed_count);\n+    {\n+        ChainstateManager* maybe_chainman = GetChainman(context, req);\n+        if (!maybe_chainman) return false;\n+        ChainstateManager& chainman = *maybe_chainman;\n+        LOCK(cs_main);\n+        CChain& active_chain = chainman.ActiveChain();\n+        const CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(block_hash);\n+        while (pindex != nullptr && active_chain.Contains(pindex)) {\n+            headers.push_back(pindex);\n+            if (headers.size() == *parsed_count)\n+                break;\n+            pindex = active_chain.Next(pindex);\n+        }\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    std::vector<uint256> filter_headers;\n+    filter_headers.reserve(*parsed_count);\n+    for (const CBlockIndex *pindex : headers) {\n+        uint256 filter_header;\n+        if (!index->LookupFilterHeader(pindex, filter_header)) {\n+            std::string errmsg = \"Filter not found.\";\n+\n+            if (!index_ready) {\n+                errmsg += \" Block filters are still in the process of being indexed.\";\n+            } else {\n+                errmsg += \" This error is unexpected and indicates index corruption.\";\n+            }\n+\n+            return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+        }\n+        filter_headers.push_back(filter_header);\n+    }\n+\n+    switch (rf) {\n+    case RetFormat::BINARY: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string binaryHeader = ssHeader.str();\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryHeader);\n+        return true;\n+    }\n+\n+    case RetFormat::HEX: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string strHex = HexStr(ssHeader) + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"text/plain\");\n+        req->WriteReply(HTTP_OK, strHex);\n+        return true;\n+    }\n+    case RetFormat::JSON: {\n+        UniValue jsonHeaders(UniValue::VARR);\n+        for (const uint256& header : filter_headers) {\n+            jsonHeaders.push_back(header.GetHex());\n+        }\n+\n+        std::string strJSON = jsonHeaders.write() + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"application/json\");\n+        req->WriteReply(HTTP_OK, strJSON);\n+        return true;\n+    }\n+    default: {\n+        return RESTERR(req, HTTP_NOT_FOUND, \"output format not found (available: \" + AvailableDataFormatsString() + \")\");\n+    }\n+    }\n+\n+}\n+\n+static bool rest_block_filter(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    //request is sent over URI scheme /rest/blockfilter/filtertype/blockhash\n+    std::vector<std::string> uri_parts;\n+    boost::split(uri_parts, param, boost::is_any_of(\"/\"));\n+    if (uri_parts.size() != 2) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilter/<filtertype>/<blockhash>\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uri_parts[1], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uri_parts[1]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uri_parts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uri_parts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uri_parts[0]);\n+    }\n+\n+    const CBlockIndex* block_index;\n+    bool block_was_connected;\n+    {\n+        ChainstateManager* maybe_chainman = GetChainman(context, req);\n+        if (!maybe_chainman) return false;\n+        ChainstateManager& chainman = *maybe_chainman;\n+        LOCK(cs_main);\n+        block_index = chainman.m_blockman.LookupBlockIndex(block_hash);\n+        if (!block_index) {\n+            return RESTERR(req, HTTP_NOT_FOUND, uri_parts[1] + \" not found\");\n+        }\n+        block_was_connected = block_index->IsValid(BLOCK_VALID_SCRIPTS);\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    BlockFilter filter;\n+    if (!index->LookupFilter(block_index, filter)) {\n+        std::string errmsg = \"Filter not found.\";\n+\n+        if (!block_was_connected) {\n+            errmsg += \" Block was not connected to active chain.\";\n+        } else if (!index_ready) {\n+            errmsg += \" Block filters are still in the process of being indexed.\";\n+        } else {\n+            errmsg += \" This error is unexpected and indicates index corruption.\";\n+        }\n+\n+        return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+    }\n+\n+    switch (rf) {\n+    case RetFormat::BINARY: {\n+        CDataStream ssResp(SER_NETWORK, PROTOCOL_VERSION | RPCSerializationFlags());\n+        ssResp << filter;\n+\n+        std::string binaryResp = ssResp.str();\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryResp);\n+        return true;\n+    }\n+\n+    case RetFormat::HEX: {\n+        CDataStream ssResp(SER_NETWORK, PROTOCOL_VERSION | RPCSerializationFlags());",
      "path": "src/rest.cpp",
      "position": 227,
      "original_position": 228,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_commit_id": "7cf4e220801edf1a80736f6fb571ad4ed280c0c1",
      "in_reply_to_id": 727703209,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oops, I'd misread your comment here, I thought you were asking me to add the flags like they are elsewhere in the file. I'm a bit confused why they were added elsewhere in the file since this PR was opened if they should be removed now?",
      "created_at": "2021-10-18T01:29:08Z",
      "updated_at": "2021-10-18T01:29:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730515278",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730515278"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 525,
      "original_line": 525,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730682151",
      "pull_request_review_id": 781735874,
      "id": 730682151,
      "node_id": "PRRC_kwDOABII584rjVMn",
      "diff_hunk": "@@ -337,6 +340,213 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uri_parts;\n+    boost::split(uri_parts, param, boost::is_any_of(\"/\"));\n+    if (uri_parts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uri_parts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uri_parts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uri_parts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uri_parts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uri_parts[0]);\n+    }\n+\n+    const auto parsed_count{ToIntegral<size_t>(uri_parts[1])};\n+    if (!parsed_count.has_value() || *parsed_count < 1 || *parsed_count > MAX_REST_HEADERS_RESULTS) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Header count out of acceptable range (1-%u): %s\",  MAX_REST_HEADERS_RESULTS, uri_parts[1]));\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;\n+    headers.reserve(*parsed_count);\n+    {\n+        ChainstateManager* maybe_chainman = GetChainman(context, req);\n+        if (!maybe_chainman) return false;\n+        ChainstateManager& chainman = *maybe_chainman;\n+        LOCK(cs_main);\n+        CChain& active_chain = chainman.ActiveChain();\n+        const CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(block_hash);\n+        while (pindex != nullptr && active_chain.Contains(pindex)) {\n+            headers.push_back(pindex);\n+            if (headers.size() == *parsed_count)\n+                break;\n+            pindex = active_chain.Next(pindex);\n+        }\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    std::vector<uint256> filter_headers;\n+    filter_headers.reserve(*parsed_count);\n+    for (const CBlockIndex *pindex : headers) {\n+        uint256 filter_header;\n+        if (!index->LookupFilterHeader(pindex, filter_header)) {\n+            std::string errmsg = \"Filter not found.\";\n+\n+            if (!index_ready) {\n+                errmsg += \" Block filters are still in the process of being indexed.\";\n+            } else {\n+                errmsg += \" This error is unexpected and indicates index corruption.\";\n+            }\n+\n+            return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+        }\n+        filter_headers.push_back(filter_header);\n+    }\n+\n+    switch (rf) {\n+    case RetFormat::BINARY: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string binaryHeader = ssHeader.str();\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryHeader);\n+        return true;\n+    }\n+\n+    case RetFormat::HEX: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string strHex = HexStr(ssHeader) + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"text/plain\");\n+        req->WriteReply(HTTP_OK, strHex);\n+        return true;\n+    }\n+    case RetFormat::JSON: {\n+        UniValue jsonHeaders(UniValue::VARR);\n+        for (const uint256& header : filter_headers) {\n+            jsonHeaders.push_back(header.GetHex());\n+        }\n+\n+        std::string strJSON = jsonHeaders.write() + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"application/json\");\n+        req->WriteReply(HTTP_OK, strJSON);\n+        return true;\n+    }\n+    default: {\n+        return RESTERR(req, HTTP_NOT_FOUND, \"output format not found (available: \" + AvailableDataFormatsString() + \")\");\n+    }\n+    }\n+\n+}\n+\n+static bool rest_block_filter(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    //request is sent over URI scheme /rest/blockfilter/filtertype/blockhash\n+    std::vector<std::string> uri_parts;\n+    boost::split(uri_parts, param, boost::is_any_of(\"/\"));\n+    if (uri_parts.size() != 2) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilter/<filtertype>/<blockhash>\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uri_parts[1], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uri_parts[1]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uri_parts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uri_parts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uri_parts[0]);\n+    }\n+\n+    const CBlockIndex* block_index;\n+    bool block_was_connected;\n+    {\n+        ChainstateManager* maybe_chainman = GetChainman(context, req);\n+        if (!maybe_chainman) return false;\n+        ChainstateManager& chainman = *maybe_chainman;\n+        LOCK(cs_main);\n+        block_index = chainman.m_blockman.LookupBlockIndex(block_hash);\n+        if (!block_index) {\n+            return RESTERR(req, HTTP_NOT_FOUND, uri_parts[1] + \" not found\");\n+        }\n+        block_was_connected = block_index->IsValid(BLOCK_VALID_SCRIPTS);\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    BlockFilter filter;\n+    if (!index->LookupFilter(block_index, filter)) {\n+        std::string errmsg = \"Filter not found.\";\n+\n+        if (!block_was_connected) {\n+            errmsg += \" Block was not connected to active chain.\";\n+        } else if (!index_ready) {\n+            errmsg += \" Block filters are still in the process of being indexed.\";\n+        } else {\n+            errmsg += \" This error is unexpected and indicates index corruption.\";\n+        }\n+\n+        return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+    }\n+\n+    switch (rf) {\n+    case RetFormat::BINARY: {\n+        CDataStream ssResp(SER_NETWORK, PROTOCOL_VERSION | RPCSerializationFlags());\n+        ssResp << filter;\n+\n+        std::string binaryResp = ssResp.str();\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryResp);\n+        return true;\n+    }\n+\n+    case RetFormat::HEX: {\n+        CDataStream ssResp(SER_NETWORK, PROTOCOL_VERSION | RPCSerializationFlags());",
      "path": "src/rest.cpp",
      "position": 227,
      "original_position": 228,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_commit_id": "7cf4e220801edf1a80736f6fb571ad4ed280c0c1",
      "in_reply_to_id": 727703209,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "They were added in commit 412bab22b23036962509d2655b68cccd726b6ba4 in 2016. `RPCSerializationFlags` only affect txs (and thus blocks), but nothing else.",
      "created_at": "2021-10-18T08:23:40Z",
      "updated_at": "2021-10-18T08:23:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730682151",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730682151"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 525,
      "original_line": 525,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730922696",
      "pull_request_review_id": 782056448,
      "id": 730922696,
      "node_id": "PRRC_kwDOABII584rkP7I",
      "diff_hunk": "@@ -337,6 +340,210 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uri_parts;\n+    boost::split(uri_parts, param, boost::is_any_of(\"/\"));\n+    if (uri_parts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uri_parts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uri_parts[2]);\n+    }",
      "path": "src/rest.cpp",
      "position": 62,
      "original_position": 62,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "in_reply_to_id": null,
      "user": {
        "login": "kiminuo",
        "id": 58662979,
        "node_id": "MDQ6VXNlcjU4NjYyOTc5",
        "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kiminuo",
        "html_url": "https://github.com/kiminuo",
        "followers_url": "https://api.github.com/users/kiminuo/followers",
        "following_url": "https://api.github.com/users/kiminuo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kiminuo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kiminuo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
        "organizations_url": "https://api.github.com/users/kiminuo/orgs",
        "repos_url": "https://api.github.com/users/kiminuo/repos",
        "events_url": "https://api.github.com/users/kiminuo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kiminuo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: Is this check intentionally before `filtertype` checks? I would expect `filtertype` to be checked first, unless it is done on purpose for performance reasons.",
      "created_at": "2021-10-18T13:29:17Z",
      "updated_at": "2021-10-18T17:01:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730922696",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730922696"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
        }
      },
      "start_line": 357,
      "original_start_line": 357,
      "start_side": "RIGHT",
      "line": 360,
      "original_line": 360,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730933199",
      "pull_request_review_id": 782056448,
      "id": 730933199,
      "node_id": "PRRC_kwDOABII584rkSfP",
      "diff_hunk": "@@ -190,8 +193,8 @@ static bool rest_headers(const std::any& context,\n         return RESTERR(req, HTTP_BAD_REQUEST, \"No header count specified. Use /rest/headers/<count>/<hash>.<ext>.\");\n \n     const auto parsed_count{ToIntegral<size_t>(path[0])};\n-    if (!parsed_count.has_value() || *parsed_count < 1 || *parsed_count > 2000) {\n-        return RESTERR(req, HTTP_BAD_REQUEST, \"Header count out of range: \" + path[0]);\n+    if (!parsed_count.has_value() || *parsed_count < 1 || *parsed_count > MAX_REST_HEADERS_RESULTS) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Header count out of acceptable range (1-%u): %s\",  MAX_REST_HEADERS_RESULTS, path[0]));",
      "path": "src/rest.cpp",
      "position": 28,
      "original_position": 28,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "in_reply_to_id": null,
      "user": {
        "login": "kiminuo",
        "id": 58662979,
        "node_id": "MDQ6VXNlcjU4NjYyOTc5",
        "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kiminuo",
        "html_url": "https://github.com/kiminuo",
        "followers_url": "https://api.github.com/users/kiminuo/followers",
        "following_url": "https://api.github.com/users/kiminuo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kiminuo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kiminuo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
        "organizations_url": "https://api.github.com/users/kiminuo/orgs",
        "repos_url": "https://api.github.com/users/kiminuo/repos",
        "events_url": "https://api.github.com/users/kiminuo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kiminuo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: The error message may also say something like \"Header count is invalid or it is out of acceptable range..\" as it happens quite regularly that somebody writes \"1OO\" instead of \"100\".",
      "created_at": "2021-10-18T13:40:28Z",
      "updated_at": "2021-10-19T07:56:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730933199",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730933199"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 197,
      "original_line": 197,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730935154",
      "pull_request_review_id": 782056448,
      "id": 730935154,
      "node_id": "PRRC_kwDOABII584rkS9y",
      "diff_hunk": "@@ -337,6 +340,210 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uri_parts;\n+    boost::split(uri_parts, param, boost::is_any_of(\"/\"));\n+    if (uri_parts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uri_parts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uri_parts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uri_parts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uri_parts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uri_parts[0]);\n+    }\n+\n+    const auto parsed_count{ToIntegral<size_t>(uri_parts[1])};\n+    if (!parsed_count.has_value() || *parsed_count < 1 || *parsed_count > MAX_REST_HEADERS_RESULTS) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Header count out of acceptable range (1-%u): %s\",  MAX_REST_HEADERS_RESULTS, uri_parts[1]));\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;\n+    headers.reserve(*parsed_count);\n+    {\n+        ChainstateManager* maybe_chainman = GetChainman(context, req);\n+        if (!maybe_chainman) return false;\n+        ChainstateManager& chainman = *maybe_chainman;\n+        LOCK(cs_main);\n+        CChain& active_chain = chainman.ActiveChain();\n+        const CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(block_hash);\n+        while (pindex != nullptr && active_chain.Contains(pindex)) {\n+            headers.push_back(pindex);\n+            if (headers.size() == *parsed_count)\n+                break;\n+            pindex = active_chain.Next(pindex);\n+        }\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    std::vector<uint256> filter_headers;\n+    filter_headers.reserve(*parsed_count);\n+    for (const CBlockIndex *pindex : headers) {",
      "path": "src/rest.cpp",
      "position": 100,
      "original_position": 100,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "in_reply_to_id": null,
      "user": {
        "login": "kiminuo",
        "id": 58662979,
        "node_id": "MDQ6VXNlcjU4NjYyOTc5",
        "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kiminuo",
        "html_url": "https://github.com/kiminuo",
        "followers_url": "https://api.github.com/users/kiminuo/followers",
        "following_url": "https://api.github.com/users/kiminuo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kiminuo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kiminuo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
        "organizations_url": "https://api.github.com/users/kiminuo/orgs",
        "repos_url": "https://api.github.com/users/kiminuo/repos",
        "events_url": "https://api.github.com/users/kiminuo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kiminuo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    for (const CBlockIndex* pindex : headers) {\r\n```",
      "created_at": "2021-10-18T13:42:33Z",
      "updated_at": "2021-10-18T17:01:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730935154",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730935154"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 398,
      "original_line": 398,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730935387",
      "pull_request_review_id": 782056448,
      "id": 730935387,
      "node_id": "PRRC_kwDOABII584rkTBb",
      "diff_hunk": "@@ -337,6 +340,210 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uri_parts;\n+    boost::split(uri_parts, param, boost::is_any_of(\"/\"));\n+    if (uri_parts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uri_parts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uri_parts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uri_parts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uri_parts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uri_parts[0]);\n+    }\n+\n+    const auto parsed_count{ToIntegral<size_t>(uri_parts[1])};\n+    if (!parsed_count.has_value() || *parsed_count < 1 || *parsed_count > MAX_REST_HEADERS_RESULTS) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Header count out of acceptable range (1-%u): %s\",  MAX_REST_HEADERS_RESULTS, uri_parts[1]));\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;",
      "path": "src/rest.cpp",
      "position": 79,
      "original_position": 79,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "in_reply_to_id": null,
      "user": {
        "login": "kiminuo",
        "id": 58662979,
        "node_id": "MDQ6VXNlcjU4NjYyOTc5",
        "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kiminuo",
        "html_url": "https://github.com/kiminuo",
        "followers_url": "https://api.github.com/users/kiminuo/followers",
        "following_url": "https://api.github.com/users/kiminuo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kiminuo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kiminuo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
        "organizations_url": "https://api.github.com/users/kiminuo/orgs",
        "repos_url": "https://api.github.com/users/kiminuo/repos",
        "events_url": "https://api.github.com/users/kiminuo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kiminuo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    std::vector<const CBlockIndex*> headers;\r\n```",
      "created_at": "2021-10-18T13:42:47Z",
      "updated_at": "2021-10-18T17:01:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730935387",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730935387"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 377,
      "original_line": 377,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730936190",
      "pull_request_review_id": 782056448,
      "id": 730936190,
      "node_id": "PRRC_kwDOABII584rkTN-",
      "diff_hunk": "@@ -337,6 +340,210 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uri_parts;\n+    boost::split(uri_parts, param, boost::is_any_of(\"/\"));\n+    if (uri_parts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uri_parts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uri_parts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uri_parts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uri_parts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uri_parts[0]);\n+    }\n+\n+    const auto parsed_count{ToIntegral<size_t>(uri_parts[1])};\n+    if (!parsed_count.has_value() || *parsed_count < 1 || *parsed_count > MAX_REST_HEADERS_RESULTS) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Header count out of acceptable range (1-%u): %s\",  MAX_REST_HEADERS_RESULTS, uri_parts[1]));",
      "path": "src/rest.cpp",
      "position": 76,
      "original_position": 76,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "in_reply_to_id": null,
      "user": {
        "login": "kiminuo",
        "id": 58662979,
        "node_id": "MDQ6VXNlcjU4NjYyOTc5",
        "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kiminuo",
        "html_url": "https://github.com/kiminuo",
        "followers_url": "https://api.github.com/users/kiminuo/followers",
        "following_url": "https://api.github.com/users/kiminuo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kiminuo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kiminuo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
        "organizations_url": "https://api.github.com/users/kiminuo/orgs",
        "repos_url": "https://api.github.com/users/kiminuo/repos",
        "events_url": "https://api.github.com/users/kiminuo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kiminuo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Header count out of acceptable range (1-%u): %s\", MAX_REST_HEADERS_RESULTS, uri_parts[1]));\r\n```",
      "created_at": "2021-10-18T13:43:35Z",
      "updated_at": "2021-10-18T17:01:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730936190",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730936190"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 374,
      "original_line": 374,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/731574305",
      "pull_request_review_id": 782891569,
      "id": 731574305,
      "node_id": "PRRC_kwDOABII584rmvAh",
      "diff_hunk": "@@ -337,6 +340,210 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uri_parts;\n+    boost::split(uri_parts, param, boost::is_any_of(\"/\"));\n+    if (uri_parts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uri_parts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uri_parts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uri_parts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uri_parts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uri_parts[0]);\n+    }\n+\n+    const auto parsed_count{ToIntegral<size_t>(uri_parts[1])};\n+    if (!parsed_count.has_value() || *parsed_count < 1 || *parsed_count > MAX_REST_HEADERS_RESULTS) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Header count out of acceptable range (1-%u): %s\",  MAX_REST_HEADERS_RESULTS, uri_parts[1]));\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;",
      "path": "src/rest.cpp",
      "position": 79,
      "original_position": 79,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "in_reply_to_id": 730935387,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Any reason not to simply do the usual `clang-format -i src/rest.cpp`? :)",
      "created_at": "2021-10-19T07:33:34Z",
      "updated_at": "2021-10-19T07:33:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r731574305",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/731574305"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 377,
      "original_line": 377,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/731592017",
      "pull_request_review_id": 782914911,
      "id": 731592017,
      "node_id": "PRRC_kwDOABII584rmzVR",
      "diff_hunk": "@@ -337,6 +340,210 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uri_parts;\n+    boost::split(uri_parts, param, boost::is_any_of(\"/\"));\n+    if (uri_parts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uri_parts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uri_parts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uri_parts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uri_parts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uri_parts[0]);\n+    }\n+\n+    const auto parsed_count{ToIntegral<size_t>(uri_parts[1])};\n+    if (!parsed_count.has_value() || *parsed_count < 1 || *parsed_count > MAX_REST_HEADERS_RESULTS) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Header count out of acceptable range (1-%u): %s\",  MAX_REST_HEADERS_RESULTS, uri_parts[1]));\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;",
      "path": "src/rest.cpp",
      "position": 79,
      "original_position": 79,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "in_reply_to_id": 730935387,
      "user": {
        "login": "kiminuo",
        "id": 58662979,
        "node_id": "MDQ6VXNlcjU4NjYyOTc5",
        "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kiminuo",
        "html_url": "https://github.com/kiminuo",
        "followers_url": "https://api.github.com/users/kiminuo/followers",
        "following_url": "https://api.github.com/users/kiminuo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kiminuo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kiminuo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
        "organizations_url": "https://api.github.com/users/kiminuo/orgs",
        "repos_url": "https://api.github.com/users/kiminuo/repos",
        "events_url": "https://api.github.com/users/kiminuo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kiminuo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "AFAIK Some violations of clang format in `rest.cpp` are from previous PRs. But in general, it would be a good thing.",
      "created_at": "2021-10-19T07:56:27Z",
      "updated_at": "2021-10-19T07:56:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r731592017",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/731592017"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 377,
      "original_line": 377,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732934750",
      "pull_request_review_id": 784707190,
      "id": 732934750,
      "node_id": "PRRC_kwDOABII584rr7Je",
      "diff_hunk": "@@ -337,6 +340,210 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart)",
      "path": "src/rest.cpp",
      "position": 46,
      "original_position": 46,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nstatic bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\r\n```",
      "created_at": "2021-10-20T16:08:05Z",
      "updated_at": "2021-10-20T16:58:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r732934750",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732934750"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
        }
      },
      "start_line": 343,
      "original_start_line": 343,
      "start_side": "RIGHT",
      "line": 344,
      "original_line": 344,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732947556",
      "pull_request_review_id": 784707190,
      "id": 732947556,
      "node_id": "PRRC_kwDOABII584rr-Rk",
      "diff_hunk": "@@ -278,11 +278,14 @@ def run_test(self):\n         self.sync_all()\n         json_obj = self.test_rest_request(f\"/headers/5/{bb_hash}\")\n         assert_equal(len(json_obj), 5)  # now we should have 5 header objects\n+        json_obj = self.test_rest_request(f\"/blockfilterheaders/basic/5/{bb_hash}\")\n+        assert_equal(len(json_obj), 5)  # now we should have 5 filter header objects\n+        self.test_rest_request(f\"/blockfilter/basic/{bb_hash}\", req_type=ReqType.BIN, ret_type=RetType.OBJ)",
      "path": "test/functional/interface_rest.py",
      "position": 15,
      "original_position": 15,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Would it make sense to do some sanity testing on the returned object? For example:\r\n\r\n```suggestion\r\n        obj = self.test_rest_request(f\"/blockfilter/basic/{bb_hash}\", req_type=ReqType.BIN, ret_type=RetType.OBJ)\r\n        assert_greater_than(len(obj.read()), 0)\r\n```\r\n\r\nor perhaps even verify that the filter is the same as that returned by the `getblockfilter` RPC.",
      "created_at": "2021-10-20T16:23:13Z",
      "updated_at": "2021-10-20T16:58:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r732947556",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732947556"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 283,
      "original_line": 283,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732974076",
      "pull_request_review_id": 784707190,
      "id": 732974076,
      "node_id": "PRRC_kwDOABII584rsEv8",
      "diff_hunk": "@@ -337,6 +340,210 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;",
      "path": "src/rest.cpp",
      "position": 49,
      "original_position": 49,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Current style is to have the clause on the same line:\r\n\r\n```suggestion\r\n    if (!CheckWarmup(req)) return false;\r\n```\r\n\r\nor enclosed in braces:\r\n\r\n```suggestion\r\n    if (!CheckWarmup(req)) {\r\n        return false;\r\n    }\r\n```\r\n\r\nSame for `if (!CheckWarmup(req))` in `rest_block_filter()` below.",
      "created_at": "2021-10-20T16:56:48Z",
      "updated_at": "2021-10-20T16:58:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r732974076",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732974076"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
        }
      },
      "start_line": 346,
      "original_start_line": 346,
      "start_side": "RIGHT",
      "line": 347,
      "original_line": 347,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/733031180",
      "pull_request_review_id": 784838008,
      "id": 733031180,
      "node_id": "PRRC_kwDOABII584rsSsM",
      "diff_hunk": "@@ -52,6 +52,20 @@ With the /notxdetails/ option JSON response will only contain the transaction ha\n Given a block hash: returns <COUNT> amount of blockheaders in upward direction.\n Returns empty if the block doesn't exist or it isn't in the active chain.\n \n+#### Blockfilter Headers\n+`GET /rest/blockfilterheaders/<FILTERTYPE>/<COUNT>/<BLOCK-HASH>.<bin|hex|json>`",
      "path": "doc/REST-interface.md",
      "position": 5,
      "original_position": 5,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "From my experience (and e.g. [this stackoverflow reponse](https://stackoverflow.com/a/31261026)), in a RESTful API path parameters are used to represent resources, and query parameters are used to control how this resource is being filtered/sorted/... To my understanding, `<COUNT>` does not represent a resource but rather a control on how many blockfilterheader resources to retrieve.\r\n\r\nWhat do you think about changing the request into\r\n`GET /rest/blockfilterheaders/<FILTERTYPE>/<BLOCK-HASH>.<bin|hex|json>?count=<COUNT>`?",
      "created_at": "2021-10-20T18:13:43Z",
      "updated_at": "2021-10-20T18:14:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r733031180",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/733031180"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 56,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/772326920",
      "pull_request_review_id": 836338048,
      "id": 772326920,
      "node_id": "PRRC_kwDOABII584uCMYI",
      "diff_hunk": "@@ -52,6 +52,20 @@ With the /notxdetails/ option JSON response will only contain the transaction ha\n Given a block hash: returns <COUNT> amount of blockheaders in upward direction.\n Returns empty if the block doesn't exist or it isn't in the active chain.\n \n+#### Blockfilter Headers\n+`GET /rest/blockfilterheaders/<FILTERTYPE>/<COUNT>/<BLOCK-HASH>.<bin|hex|json>`",
      "path": "doc/REST-interface.md",
      "position": 5,
      "original_position": 5,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "in_reply_to_id": 733031180,
      "user": {
        "login": "michaelfolkson",
        "id": 16323900,
        "node_id": "MDQ6VXNlcjE2MzIzOTAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/16323900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/michaelfolkson",
        "html_url": "https://github.com/michaelfolkson",
        "followers_url": "https://api.github.com/users/michaelfolkson/followers",
        "following_url": "https://api.github.com/users/michaelfolkson/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/michaelfolkson/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/michaelfolkson/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/michaelfolkson/subscriptions",
        "organizations_url": "https://api.github.com/users/michaelfolkson/orgs",
        "repos_url": "https://api.github.com/users/michaelfolkson/repos",
        "events_url": "https://api.github.com/users/michaelfolkson/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/michaelfolkson/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@TheBlueMatt: Any thoughts on the above?",
      "created_at": "2021-12-20T12:31:53Z",
      "updated_at": "2021-12-20T12:31:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r772326920",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/772326920"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 56,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/772514100",
      "pull_request_review_id": 836601396,
      "id": 772514100,
      "node_id": "PRRC_kwDOABII584uC6E0",
      "diff_hunk": "@@ -52,6 +52,20 @@ With the /notxdetails/ option JSON response will only contain the transaction ha\n Given a block hash: returns <COUNT> amount of blockheaders in upward direction.\n Returns empty if the block doesn't exist or it isn't in the active chain.\n \n+#### Blockfilter Headers\n+`GET /rest/blockfilterheaders/<FILTERTYPE>/<COUNT>/<BLOCK-HASH>.<bin|hex|json>`",
      "path": "doc/REST-interface.md",
      "position": 5,
      "original_position": 5,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "in_reply_to_id": 733031180,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think the reason for this PR to use `GET /rest/blockfilterheaders/<FILTERTYPE>/<COUNT>/<BLOCK-HASH><bin|hex|json>`  was that the [**blockheader** endpoint](https://github.com/bitcoin/bitcoin/blob/master/doc/REST-interface.md#blockheaders) already uses the same format. (`GET /rest/headers/<COUNT>/<BLOCK-HASH>.<bin|hex|json>`)\r\n\r\n@stickies-v makes a good point but in my opinion staying consistent with the current API was the better move.",
      "created_at": "2021-12-20T16:40:57Z",
      "updated_at": "2021-12-20T16:40:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r772514100",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/772514100"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 56,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/772521103",
      "pull_request_review_id": 836611079,
      "id": 772521103,
      "node_id": "PRRC_kwDOABII584uC7yP",
      "diff_hunk": "@@ -52,6 +52,20 @@ With the /notxdetails/ option JSON response will only contain the transaction ha\n Given a block hash: returns <COUNT> amount of blockheaders in upward direction.\n Returns empty if the block doesn't exist or it isn't in the active chain.\n \n+#### Blockfilter Headers\n+`GET /rest/blockfilterheaders/<FILTERTYPE>/<COUNT>/<BLOCK-HASH>.<bin|hex|json>`",
      "path": "doc/REST-interface.md",
      "position": 5,
      "original_position": 5,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "in_reply_to_id": 733031180,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks for taking a look @dergoegge . I was thinking about this and assumed that this was done for consistency as well.",
      "created_at": "2021-12-20T16:50:17Z",
      "updated_at": "2021-12-20T16:50:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r772521103",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/772521103"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 56,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773150826",
      "pull_request_review_id": 837455926,
      "id": 773150826,
      "node_id": "PRRC_kwDOABII584uFVhq",
      "diff_hunk": "@@ -52,6 +52,20 @@ With the /notxdetails/ option JSON response will only contain the transaction ha\n Given a block hash: returns <COUNT> amount of blockheaders in upward direction.\n Returns empty if the block doesn't exist or it isn't in the active chain.\n \n+#### Blockfilter Headers\n+`GET /rest/blockfilterheaders/<FILTERTYPE>/<COUNT>/<BLOCK-HASH>.<bin|hex|json>`",
      "path": "doc/REST-interface.md",
      "position": 5,
      "original_position": 5,
      "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "in_reply_to_id": 733031180,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I agree that consistency is important, and in that light am happy to consider this comment as resolved on this PR. However, I think having just 1 prior case should not prevent us from changing course slightly and adopting better RESTful practices. I think this can nicely be done in a separate PR, so I'm happy to look into that and see if there's an elegant way to remain backwards compatible and still adopt/encourage best practices going forward, specifically on these `/headers/` and `/blockfilterheaders/` endpoints.",
      "created_at": "2021-12-21T13:49:13Z",
      "updated_at": "2021-12-21T13:49:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r773150826",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773150826"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 56,
      "original_line": 56,
      "side": "RIGHT"
    }
  ]
}