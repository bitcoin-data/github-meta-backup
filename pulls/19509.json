{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509",
    "id": 448599640,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDQ4NTk5NjQw",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19509",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/19509.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/19509.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/bff7c66e67aa2f18ef70139338643656a54444fe",
    "number": 19509,
    "state": "closed",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "Per-Peer Message Capture",
    "user": {
      "login": "troygiorshev",
      "id": 5553787,
      "node_id": "MDQ6VXNlcjU1NTM3ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/troygiorshev",
      "html_url": "https://github.com/troygiorshev",
      "followers_url": "https://api.github.com/users/troygiorshev/followers",
      "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
      "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
      "repos_url": "https://api.github.com/users/troygiorshev/repos",
      "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This PR introduces per-peer message capture into Bitcoin Core.  ðŸ““ \r\n\r\n## Purpose\r\n\r\nThe purpose and scope of this feature is intentionally limited.  It answers a question anyone new to Bitcoin's P2P protocol has had: \"Can I see what messages my node is sending and receiving?\".\r\n\r\n## Functionality\r\n\r\nWhen a new debug-only command line argument `capturemessages` is set, any message that the node receives or sends is captured.  The capture occurs in the MessageHandler thread.  When receiving a message, it is captured as soon as the MessageHandler thread takes the message off of the vProcessMsg queue.  When sending, the message is captured just before the message is pushed onto the vSendMsg queue.\r\n\r\nThe message capture is as minimal as possible to reduce the performance impact on the node.  Messages are captured to a new `message_capture` folder in the datadir.  Each node has their own subfolder named with their IP address and port.  Inside, received and sent messages are captured into two binary files, msgs_recv.dat and msgs_sent.dat, like so:\r\n\r\n```\r\nmessage_capture/203.0.113.7:56072/msgs_recv.dat\r\nmessage_capture/203.0.113.7:56072/msgs_sent.dat\r\n```\r\n\r\nBecause the messages are raw binary dumps, included in this PR is a Python parsing tool to convert the binary files into human-readable JSON.  This script has been placed on its own and out of the way in the new `contrib/message-capture` folder.  Its usage is simple and easily discovered by the autogenerated `-h` option.\r\n\r\n## Future Maintenance\r\n\r\nI sympathize greatly with anyone who says \"the best code is no code\".\r\n\r\nThe future maintenance of this feature will be minimal.  The logic to deserialize the payload of the p2p messages exists in our testing framework.  As long as our testing framework works, so will this tool.\r\n\r\nAdditionally, I hope that the simplicity of this tool will mean that it gets used frequently, so that problems will be discovered and solved when they are small.\r\n\r\n## FAQ\r\n\r\n\"Why not just use Wireshark\"\r\n\r\nYes, Wireshark has the ability to filter and decode Bitcoin messages.  However, the purpose of the message capture added in this PR is to assist with debugging, primarily for new developers looking to improve their knowledge of the Bitcoin Protocol.  This drives the design in a different direction than Wireshark, in two different ways.  First, this tool must be convenient and simple to use.  Using an external tool, like Wireshark, requires setup and interpretation of the results.  To a new user who doesn't necessarily know what to expect, this is unnecessary difficulty.  This tool, on the other hand, \"just works\".  Turn on the command line flag, run your node, run the script, read the JSON.  Second, because this tool is being used for debugging, we want it to be as close to the true behavior of the node as possible.  A lot can happen in the SocketHandler thread that would be missed by Wireshark.\r\n\r\nAdditionally, if we are to use Wireshark, we are at the mercy of whoever it maintaining the protocol in Wireshark, both as to it being accurate and recent.  As can be seen by the **many** previous attempts to include Bitcoin in Wireshark (google \"bitcoin dissector\") this is easier said than done.\r\n\r\nLastly, I truly believe that this tool will be used significantly more by being included in the codebase.  It's just that much more discoverable.",
    "labels": [
      {
        "id": 98298007,
        "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
        "name": "P2P",
        "color": "006b75",
        "default": false
      },
      {
        "id": 241832923,
        "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
        "name": "Utils/log/libs",
        "description": "",
        "color": "5319e7",
        "default": false
      }
    ],
    "created_at": "2020-07-14T02:10:58Z",
    "updated_at": "2022-07-11T06:49:47Z",
    "closed_at": "2021-02-02T12:12:36Z",
    "mergeable_state": "unknown",
    "merged_at": "2021-02-02T12:12:36Z",
    "merge_commit_sha": "384e090f9345c07fa81ccafa8cd36037f3cd0813",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "troygiorshev:message-dump",
      "ref": "message-dump",
      "sha": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 265625232,
        "node_id": "MDEwOlJlcG9zaXRvcnkyNjU2MjUyMzI=",
        "name": "bitcoin",
        "full_name": "troygiorshev/bitcoin",
        "owner": {
          "login": "troygiorshev",
          "id": 5553787,
          "node_id": "MDQ6VXNlcjU1NTM3ODc=",
          "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/troygiorshev",
          "html_url": "https://github.com/troygiorshev",
          "followers_url": "https://api.github.com/users/troygiorshev/followers",
          "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
          "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
          "repos_url": "https://api.github.com/users/troygiorshev/repos",
          "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/troygiorshev/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/troygiorshev/bitcoin",
        "archive_url": "https://api.github.com/repos/troygiorshev/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/troygiorshev/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/troygiorshev/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/troygiorshev/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/troygiorshev/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/troygiorshev/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/troygiorshev/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/troygiorshev/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/troygiorshev/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/troygiorshev/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/troygiorshev/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/troygiorshev/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/troygiorshev/bitcoin/events",
        "forks_url": "https://api.github.com/repos/troygiorshev/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/troygiorshev/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/troygiorshev/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/troygiorshev/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/troygiorshev/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/troygiorshev/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/troygiorshev/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/troygiorshev/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/troygiorshev/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/troygiorshev/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/troygiorshev/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/troygiorshev/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/troygiorshev/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/troygiorshev/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/troygiorshev/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/troygiorshev/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:troygiorshev/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/troygiorshev/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/troygiorshev/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/troygiorshev/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/troygiorshev/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/troygiorshev/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/troygiorshev/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/troygiorshev/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/troygiorshev/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/troygiorshev/bitcoin/hooks",
        "svn_url": "https://github.com/troygiorshev/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 0,
        "watchers_count": 0,
        "size": 160214,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2021-02-16T18:44:16Z",
        "created_at": "2020-05-20T16:33:16Z",
        "updated_at": "2021-02-16T18:44:50Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "32b191fb66e644c690c94cbfdae6ddbc754769d7",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69818,
        "watchers_count": 69818,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T22:42:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T03:51:27Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 369,
    "deletions": 16,
    "changed_files": 9,
    "commits": 6,
    "review_comments": 182,
    "comments": 74
  },
  "events": [
    {
      "event": "labeled",
      "id": 3542133896,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM1NDIxMzM4OTY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3542133896",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-14T02:11:51Z",
      "label": {
        "name": "P2P",
        "color": "006b75"
      }
    },
    {
      "event": "labeled",
      "id": 3542134280,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM1NDIxMzQyODA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3542134280",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-14T02:12:00Z",
      "label": {
        "name": "Utils/log/libs",
        "color": "5319e7"
      }
    },
    {
      "event": "renamed",
      "id": 3542135714,
      "node_id": "MDE3OlJlbmFtZWRUaXRsZUV2ZW50MzU0MjEzNTcxNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3542135714",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-14T02:12:28Z",
      "rename": {
        "from": "Message dump",
        "to": "Per-Peer Message Logging"
      }
    },
    {
      "event": "convert_to_draft",
      "id": 3542141517,
      "node_id": "MDE5OkNvbnZlcnRUb0RyYWZ0RXZlbnQzNTQyMTQxNTE3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3542141517",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-14T02:14:42Z"
    },
    {
      "event": "reviewed",
      "id": 447861896,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3ODYxODk2",
      "url": null,
      "actor": null,
      "commit_id": "38c6f10d5c0c21818c934f5f265890909abd1ec2",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#pullrequestreview-447861896",
      "submitted_at": "2020-07-14T07:38:12Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
    },
    {
      "event": "commented",
      "id": 658027492,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY1ODAyNzQ5Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/658027492",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-14T07:48:07Z",
      "updated_at": "2020-07-14T07:48:07Z",
      "author_association": "MEMBER",
      "body": "Concept ACK the high-level idea. I think this feature may be quite useful while debugging, and it requires very few lines of code.\r\n\r\nI have two questions though:\r\n1. How to better integrate it with the existing codebase? Should the format be similar to what we have now:\r\n`received: addr (30003 bytes) peer=0`? Or maybe it doesn't matter.\r\n2. Is there any threat of this feature being used for DoS? Perhaps on a system where file create is expensive, an attacker could disconnect/reconnect (from a new net address?) to make us create a new file? Maybe the file should be created after 1 minute of connection lifetime? (Although the messages from the very beginning should not be lost).",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-658027492",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "commented",
      "id": 658032164,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY1ODAzMjE2NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/658032164",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-14T07:58:01Z",
      "updated_at": "2021-02-01T18:00:43Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20404 (Remove names from translatable strings by hebasto)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-658032164",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "reviewed",
      "id": 447894982,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3ODk0OTgy",
      "url": null,
      "actor": null,
      "commit_id": "dc393b30e97f743c1e58ce94051c4f4f918beb70",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK. I'm looking forward to playing around with this.\r\n\r\nMy first thought is that this would be much more useful if the user was able to specify an individual peer to log messages for, either through a command line argument `-logmessages=<ip_addr>` or through an RPC to enable and disable logging. Perhaps that can be done in a follow-up PR?",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#pullrequestreview-447894982",
      "submitted_at": "2020-07-14T08:28:48Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3543737363,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzU0MzczNzM2Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3543737363",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-14T11:28:29Z"
    },
    {
      "event": "reviewed",
      "id": 448269477,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4MjY5NDc3",
      "url": null,
      "actor": null,
      "commit_id": "cf5966a76f136d1ca7a986d6ca11808047a812c6",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK: Very nice feature! Looking forward to using it. Thanks for adding it.\r\n\r\nFeature request: Would it be possible to add a flag to the Python script that writes the recorded messages to one file each in the binary format the `ProcessMessage(â€¦)` fuzzers expect (`src/test/fuzz/process_message.cpp` and `src/test/fuzz/process_messages.cpp`)?\r\n\r\nIdeally with a file naming convention matching that of what `libFuzzer` and many other fuzzers generate: the file name being the SHA-1 of the file content.\r\n\r\nThat way this feature could be used to record live network messages that could be used directly as fuzzing inputs. A great way to generate a fuzzing seed corpus. That would be super neat! :)",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#pullrequestreview-448269477",
      "submitted_at": "2020-07-14T17:54:34Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3563605403,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzU2MzYwNTQwMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3563605403",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-20T02:36:44Z"
    },
    {
      "event": "commented",
      "id": 660768336,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDc2ODMzNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/660768336",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-20T02:39:33Z",
      "updated_at": "2020-07-20T02:39:33Z",
      "author_association": "CONTRIBUTOR",
      "body": "`git range-diff master cf5966a 9898fa1`\r\n\r\nMade suggested changes and fixed the Travis problem.",
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-660768336",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "reviewed",
      "id": 447849752,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3ODQ5NzUy",
      "url": null,
      "actor": null,
      "commit_id": "dc393b30e97f743c1e58ce94051c4f4f918beb70",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Looks surprisingly simple, so Concept ACK",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#pullrequestreview-447849752",
      "submitted_at": "2020-07-20T05:55:25Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
    },
    {
      "event": "commented",
      "id": 661838550,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2MTgzODU1MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/661838550",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-21T12:48:27Z",
      "updated_at": "2020-07-21T12:48:27Z",
      "author_association": "CONTRIBUTOR",
      "body": "@naumenkogs thanks for the concept ack!\r\n\r\n> How to better integrate it with the existing codebase? Should the format be similar to what we have now:\r\nreceived: addr (30003 bytes) peer=0? Or maybe it doesn't matter.\r\n\r\nIMO that format is good for a debug log, where things need to be compact on a single line.  For this I much prefer JSON.\r\n\r\n> Is there any threat of this feature being used for DoS? ...\r\n\r\nAt the moment, with this locked behind a debug flag, I'm not worried about DoS vectors.  For both debugging and learning someone should be at the keyboard and the node shouldn't be working with anything real.  Additionally, I imagine that if writing a very small amount to disk in this way (every time a message is sent or received) is a DoS vector then there are many more serious ones available.\r\n\r\nThat said, this is worth consideration, especially if we think this will one day be used for wider purposes.\r\n",
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-661838550",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "mentioned",
      "id": 3571089941,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzU3MTA4OTk0MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3571089941",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-21T12:48:27Z"
    },
    {
      "event": "subscribed",
      "id": 3571089945,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM1NzEwODk5NDU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3571089945",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-21T12:48:27Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3577046092,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzU3NzA0NjA5Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3577046092",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-22T18:32:45Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3577149793,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzU3NzE0OTc5Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3577149793",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-22T19:02:49Z"
    },
    {
      "event": "commented",
      "id": 662631024,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2MjYzMTAyNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/662631024",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-22T19:03:21Z",
      "updated_at": "2020-07-22T19:03:21Z",
      "author_association": "CONTRIBUTOR",
      "body": "`git range-diff master 9898fa1 cbb154e`\r\n\r\n- Trivial Rebase\r\n- Added a commit at the beginning cleaning up PushMessage's and ProcessMessages's if statements\r\n- LogMessage now uses Span\r\n- command -> msg_type\r\n- python import is now relative to file\r\n- other small comments and fixes",
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-662631024",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "reviewed",
      "id": 453671898,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNjcxODk4",
      "url": null,
      "actor": null,
      "commit_id": "cbb154e5d5b001b8e940be49a9692e2f6e27e29c",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#pullrequestreview-453671898",
      "submitted_at": "2020-07-22T20:52:59Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
    },
    {
      "event": "reviewed",
      "id": 454388361,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0Mzg4MzYx",
      "url": null,
      "actor": null,
      "commit_id": "cbb154e5d5b001b8e940be49a9692e2f6e27e29c",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#pullrequestreview-454388361",
      "submitted_at": "2020-07-23T18:23:55Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3581270261,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzU4MTI3MDI2MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3581270261",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-23T18:46:17Z"
    },
    {
      "event": "commented",
      "id": 663172100,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2MzE3MjEwMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/663172100",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-23T18:47:47Z",
      "updated_at": "2020-07-23T18:47:47Z",
      "author_association": "CONTRIBUTOR",
      "body": "`git range-diff master cbb154e 863c6b5`\r\n\r\n- Added Test\r\n- Fixed Travis warning\r\n- Made Time Mockable",
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-663172100",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "ready_for_review",
      "id": 3581553691,
      "node_id": "MDE5OlJlYWR5Rm9yUmV2aWV3RXZlbnQzNTgxNTUzNjkx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3581553691",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-23T20:13:11Z"
    },
    {
      "event": "commented",
      "id": 664031860,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDAzMTg2MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/664031860",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-26T19:45:01Z",
      "updated_at": "2020-07-26T19:48:08Z",
      "author_association": "MEMBER",
      "body": "Huge Concept ACK! Very nice idea with simple implementation, I'm also pretty sure this will be very helpful for debugging purposes. Will definitely code-review that within the next days.\r\n\r\nJust one detail I find quite odd: why create two files instead of just one and not rather include the direction as part of the serialization for each message? Is it only about saving disk space (1 byte per message) or is there another reason I'm not aware of? I've never seen a logging/sniffing tool that divides up into multiple files before and tend to think it would only complicate re-assembling the whole send/receive order later.",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-664031860",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "commented",
      "id": 664374225,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDM3NDIyNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/664374225",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-27T12:46:08Z",
      "updated_at": "2020-07-27T12:47:20Z",
      "author_association": "CONTRIBUTOR",
      "body": "@theStack Thanks for the concept ACK!\r\n\r\n> why create two files instead of just one\r\n\r\nGood question; I considered a few ways of doing this.  Just to be clear, I create two files _per peer_.  Partially, yes, this saves 1 byte per message.  I could have also just logged everything into one file, which meant I would have had to save the peer address alongside each message as well.  Ultimately, I chose the current way with the intention of simplifying the usage of the parser.  As it stands, the parser is a simple \"just give me what you want me to parse\" sort of program.  This allows the user to take advantage of globbing when selecting which files to parse (e.g. `**/*.dat` or `**/msgs_recv.dat`).  Additionally the parser, being written in python, is actually noticeably slow.  Forcing it to process all of the messages and then filter would be unnecessarily inconvenient.",
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-664374225",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "mentioned",
      "id": 3589678294,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzU4OTY3ODI5NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3589678294",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-27T12:46:08Z"
    },
    {
      "event": "subscribed",
      "id": 3589678296,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM1ODk2NzgyOTY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3589678296",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-27T12:46:08Z"
    },
    {
      "event": "commented",
      "id": 665021261,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2NTAyMTI2MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/665021261",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-28T12:53:02Z",
      "updated_at": "2020-07-28T12:53:02Z",
      "author_association": "MEMBER",
      "body": "> > why create two files instead of just one\r\n> \r\n> Good question; I considered a few ways of doing this. Just to be clear, I create two files _per peer_. Partially, yes, this saves 1 byte per message. I could have also just logged everything into one file, which meant I would have had to save the peer address alongside each message as well. Ultimately, I chose the current way with the intention of simplifying the usage of the parser. As it stands, the parser is a simple \"just give me what you want me to parse\" sort of program. This allows the user to take advantage of globbing when selecting which files to parse (e.g. `**/*.dat` or `**/msgs_recv.dat`). Additionally the parser, being written in python, is actually noticeably slow. Forcing it to process all of the messages and then filter would be unnecessarily inconvenient.\r\n\r\nGenerally I'd say it makes sense to divide up into files/folders by criteria that I would likely use as frequent search key for accessing the logging data. Would I often want to access logs for a certain peer? Absolutely. Would I want to see _only_ incoming or outcoming messages for a certain peer? Very unlikely, as the resulting data is probably not very valueable without the whole request/response stream in both directions. On the other hand, your arguments for simplification, efficiency (if only looking for incoming _or_ outcoming messages is really such a frequent operation) and flexibility are also very strong, hence this solution is also okay with me.\r\n\r\nI reviewed the code in more detail and noticed that there may be a serialization endianness problem, see the comments soon following below.\r\n",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-665021261",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "reviewed",
      "id": 456600960,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2NjAwOTYw",
      "url": null,
      "actor": null,
      "commit_id": "0c31d58f7d5c40a73e9fd67f57acf33a4d45f24a",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#pullrequestreview-456600960",
      "submitted_at": "2020-07-28T12:56:54Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
    },
    {
      "event": "commented",
      "id": 665122781,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2NTEyMjc4MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/665122781",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-28T15:53:45Z",
      "updated_at": "2020-07-28T15:53:45Z",
      "author_association": "MEMBER",
      "body": "re-run ci",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-665122781",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "closed",
      "id": 3595049624,
      "node_id": "MDExOkNsb3NlZEV2ZW50MzU5NTA0OTYyNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3595049624",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-28T15:53:45Z"
    },
    {
      "event": "reopened",
      "id": 3595049908,
      "node_id": "MDEzOlJlb3BlbmVkRXZlbnQzNTk1MDQ5OTA4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3595049908",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-28T15:53:49Z"
    },
    {
      "event": "reviewed",
      "id": 456820101,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2ODIwMTAx",
      "url": null,
      "actor": null,
      "commit_id": "863c6b5aeb08a8769895a3fb08a9adb6753b4567",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#pullrequestreview-456820101",
      "submitted_at": "2020-07-28T16:45:11Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
    },
    {
      "event": "commented",
      "id": 665987681,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2NTk4NzY4MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/665987681",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-29T23:50:00Z",
      "updated_at": "2020-07-29T23:50:00Z",
      "author_association": "MEMBER",
      "body": "I don't find your \"why not Wireshark?\" very convincing... If anything, it made me less sure this should get merged.\r\n\r\nWireshark is a fairly simple and standard tool. Glancing at the code, this PR is basically just a less-user-friendly reinvention thereof.\r\n\r\nIf there are concerns with maintenance of the Wireshark dissector, as I understand it, we could fork it and maintain it out of Wireshark's codebase.",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-665987681",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3603772350,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzYwMzc3MjM1MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3603772350",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-30T13:14:03Z"
    },
    {
      "event": "commented",
      "id": 666359778,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2NjM1OTc3OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/666359778",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-30T13:19:37Z",
      "updated_at": "2020-07-30T13:19:45Z",
      "author_association": "CONTRIBUTOR",
      "body": "`git range-diff master 863c6b5 f5fffb7`\r\n\r\n- Enforced little-endian writing to match parser\r\n- Test uses `assert_equal` when possible",
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-666359778",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "labeled",
      "id": 3604717400,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM2MDQ3MTc0MDA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3604717400",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-30T16:25:04Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3606372890,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzYwNjM3Mjg5MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3606372890",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-31T00:44:42Z"
    },
    {
      "event": "commented",
      "id": 666845848,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2Njg0NTg0OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/666845848",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-31T00:46:50Z",
      "updated_at": "2020-07-31T00:46:50Z",
      "author_association": "CONTRIBUTOR",
      "body": "rebased",
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-666845848",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "unlabeled",
      "id": 3606397339,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MzYwNjM5NzMzOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3606397339",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-31T00:57:08Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 459324826,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MzI0ODI2",
      "url": null,
      "actor": null,
      "commit_id": "6095431033a3590fa74761f1bfede4c68a032a88",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "I've been playing around with this and it's great. Just a few small comments so far.\r\n\r\nThe parser is printing hashes as large floats. Is it possible to print the hex representation:\r\n\r\n```\r\n  {\r\n    \"msgtype\": \"getheaders\",\r\n    \"hashstop\": 0,\r\n    \"locator\": {\r\n      \"nVersion\": 70015,\r\n      \"vHave\": [\r\n        6.450434035588393e+53,\r\n        7.713140798064138e+53,\r\n        2.6493031207713062e+53,\r\n        1.0843487835635608e+54,\r\n        6.8089734462318345e+53,\r\n        1.4434627912104054e+54,\r\n        3.0470281418447093e+53,\r\n        4.1428701739036675e+53,\r\n        ...\r\n```",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#pullrequestreview-459324826",
      "submitted_at": "2020-07-31T17:21:17Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3621898161,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzYyMTg5ODE2MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3621898161",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-04T20:26:27Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3624908848,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzYyNDkwODg0OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3624908848",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-05T14:20:30Z"
    },
    {
      "event": "commented",
      "id": 669222105,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2OTIyMjEwNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/669222105",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-05T14:21:06Z",
      "updated_at": "2020-08-05T14:21:06Z",
      "author_association": "CONTRIBUTOR",
      "body": "`git range-diff master 6095431 0547b23`\r\n\r\n  * Values coming from `uint256` variables print as hex correctly\r\n  * Restructured the output, renamed some fields\r\n  * Some whitespace fixes\r\n  * Small change to `msg_generic` (unused) in `messages.py`",
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-669222105",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "reviewed",
      "id": 461722878,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxNzIyODc4",
      "url": null,
      "actor": null,
      "commit_id": "0547b23754b193e45ba722e555f97f2dd60dd1b5",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#pullrequestreview-461722878",
      "submitted_at": "2020-08-05T14:31:15Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
    },
    {
      "event": "reviewed",
      "id": 462312851,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMzEyODUx",
      "url": null,
      "actor": null,
      "commit_id": "fac22eae7ce14cac4e7ab364325165ee8f7fa1ff",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#pullrequestreview-462312851",
      "submitted_at": "2020-08-06T09:37:05Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
    },
    {
      "event": "reviewed",
      "id": 462382512,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMzgyNTEy",
      "url": null,
      "actor": null,
      "commit_id": "78959de4b410987e1b1ed07f08bb0adce52ea218",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#pullrequestreview-462382512",
      "submitted_at": "2020-08-06T10:05:24Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3629179905,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzYyOTE3OTkwNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3629179905",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-06T13:57:10Z"
    },
    {
      "event": "commented",
      "id": 669943836,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2OTk0MzgzNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/669943836",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-06T13:58:26Z",
      "updated_at": "2020-08-06T13:58:26Z",
      "author_association": "CONTRIBUTOR",
      "body": "`git range-diff master 0547b23 4205c56`\r\n\r\n  * peer logging -> message logging\r\n  * command -> msgtype\r\n  * Removed unneeded `size_t` cast\r\n  * Parser now properly handles unrecognized messages\r\n  * Parser now verified payload length\r\n",
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-669943836",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "commented",
      "id": 669945057,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2OTk0NTA1Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/669945057",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-06T14:00:20Z",
      "updated_at": "2020-08-06T14:00:20Z",
      "author_association": "CONTRIBUTOR",
      "body": "Regarding mini_parser in the functional test: discussion [here](https://github.com/bitcoin/bitcoin/pull/19509#discussion_r465770624).  The popular question is \"Why reimplement the parser here, as opposed to just calling `contrib/message-logging/message-logging-parser.py`?\"\r\n\r\nThe main reason, which I agree with, is brought up by @jnewbery.  \r\n\r\n> I think it's much better not to assume that the contrib directory is available. Functional tests can be run when the build directory is out of tree and the source directory is not available. It makes sense to me to have a limited parser in the test case rather than importing from somewhere else.\r\n\r\nAdditionally, I think that this separate mini_parser makes it clear, at a glance, what exactly is being tested.  As noted in the module docstring of `p2p_message_logging.py`, the message logging parser _isn't_ tested in this test.  This test is for LogMessage only.  I would hate to run into a Hubble Space Telescope-like problem where LogMessage is wrong but the message logging parser is wrong in the same way, so the errors go by unnoticed.\r\n",
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-669945057",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "mentioned",
      "id": 3629195047,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzYyOTE5NTA0Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3629195047",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-06T14:00:20Z"
    },
    {
      "event": "subscribed",
      "id": 3629195051,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2MjkxOTUwNTE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3629195051",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-06T14:00:20Z"
    },
    {
      "event": "reviewed",
      "id": 462670289,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyNjcwMjg5",
      "url": null,
      "actor": null,
      "commit_id": "6f0e88752d9dcfe551d618e7afb09fd2063fc050",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#pullrequestreview-462670289",
      "submitted_at": "2020-08-06T16:15:27Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3634830401,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzYzNDgzMDQwMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3634830401",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-07T21:35:11Z"
    },
    {
      "event": "commented",
      "id": 670723420,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3MDcyMzQyMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/670723420",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-07T21:38:51Z",
      "updated_at": "2020-08-13T23:49:28Z",
      "author_association": "CONTRIBUTOR",
      "body": "`git range-diff master 4205c56 555e48a`\r\n\r\n- Rebased (trivial)\r\n- Now uses `MakeUCharSpan` as suggested [here](https://github.com/bitcoin/bitcoin/pull/19509#discussion_r466528085)\r\n- Now accounts for the increase in file descriptor usage (by one)\r\n   - This will be improved in #18911",
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-670723420",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "commented",
      "id": 672276687,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3MjI3NjY4Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/672276687",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-11T21:00:08Z",
      "updated_at": "2020-08-11T21:00:08Z",
      "author_association": "MEMBER",
      "body": "I tested the logging parser on my system (running Python 3.5.2) and got the following error:\r\n```\r\n$ contrib/message-logging/message-logging-parser.py /tmp/bitcoin_func_test_9sw28m5f/node0/regtest/message_logging/127.0.0.1\\:33370/*.dat\r\n/tmp/bitcoin_func_test_9sw28m5f/node0/regtest/message_logging/127.0.0.1:33370/msgs_recv.dat\r\n<class 'pathlib.PosixPath'>\r\nTraceback (most recent call last):\r\n  File \"contrib/message-logging/message-logging-parser.py\", line 129, in <module>\r\n    main()\r\n  File \"contrib/message-logging/message-logging-parser.py\", line 117, in main\r\n    process_file(log, messages, \"recv\" in log.stem)\r\n  File \"contrib/message-logging/message-logging-parser.py\", line 73, in process_file\r\n    with open(path, 'rb') as f_in:\r\nTypeError: invalid file: PosixPath('/tmp/bitcoin_func_test_9sw28m5f/node0/regtest/message_logging/127.0.0.1:33370/msgs_recv.dat')\r\n```\r\nTurns out that `open()` is capable to take `os.PathLike` objects only from Python 3.6 onwards, see https://stackoverflow.com/a/42694113\r\nSince we are still on Python 3.5 (though there is already a PR for changing to 3.6, see https://github.com/bitcoin/bitcoin/pull/19504), this should be fixed by converting the path to a string by opening `str(path)` instead.",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-672276687",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3654226107,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzY1NDIyNjEwNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3654226107",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-13T23:42:54Z"
    },
    {
      "event": "commented",
      "id": 673764080,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3Mzc2NDA4MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/673764080",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-13T23:48:23Z",
      "updated_at": "2020-08-14T02:27:43Z",
      "author_association": "CONTRIBUTOR",
      "body": "`git range-diff master 555e48a 4fc2e39`\r\n\r\n@theStack thanks for catching that!  I had been running this all under the wrong environment the whole time. (I'll plug `conda` here, never worry about your python environment again: just make sure to pick the right one)\r\n\r\nIn fixing this I ran into a current python bug!\r\nhttps://discuss.python.org/t/pathlib-absolute-vs-resolve/2573\r\n\r\nTL;DR: if you want an absolute path to a file that may not exist, in Python 3.5, **always** use `Path.cwd() / Path(arg)`.  This is due to the \"strictness\" of `resolve()` discussed [here](https://docs.python.org/3/library/pathlib.html#pathlib.Path.resolve).",
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-673764080",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "mentioned",
      "id": 3654235508,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzY1NDIzNTUwOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3654235508",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-13T23:48:24Z"
    },
    {
      "event": "subscribed",
      "id": 3654235510,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2NTQyMzU1MTA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3654235510",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-13T23:48:24Z"
    },
    {
      "event": "commented",
      "id": 675088137,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3NTA4ODEzNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/675088137",
      "actor": {
        "login": "jb55",
        "id": 45598,
        "node_id": "MDQ6VXNlcjQ1NTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/45598?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jb55",
        "html_url": "https://github.com/jb55",
        "followers_url": "https://api.github.com/users/jb55/followers",
        "following_url": "https://api.github.com/users/jb55/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jb55/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jb55/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jb55/subscriptions",
        "organizations_url": "https://api.github.com/users/jb55/orgs",
        "repos_url": "https://api.github.com/users/jb55/repos",
        "events_url": "https://api.github.com/users/jb55/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jb55/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-17T20:10:44Z",
      "updated_at": "2020-08-17T20:10:44Z",
      "author_association": "MEMBER",
      "body": "@luke-jr says:\r\n> I don't find your \"why not Wireshark?\" very convincing... If anything, it made me less sure this should get merged. Wireshark is a fairly simple and standard tool. Glancing at the code, this PR is basically just a less-user-friendly reinvention thereof. If there are concerns with maintenance of the Wireshark dissector, as I understand it, we could fork it and maintain it out of Wireshark's codebase.\r\n\r\nI'm inclined to agree. Also with a more general system like [tracepoints](https://jb55.com/s/tracepoints.patch.txt) we could do low overhead p2p(& other subsystem) tracing/filtering/[scripting](https://jb55.com/s/ibd.bt.txt) without any [custom code](https://github.com/bitcoin/bitcoin/pull/19509#pullrequestreview-447894982)",
      "user": {
        "login": "jb55",
        "id": 45598,
        "node_id": "MDQ6VXNlcjQ1NTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/45598?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jb55",
        "html_url": "https://github.com/jb55",
        "followers_url": "https://api.github.com/users/jb55/followers",
        "following_url": "https://api.github.com/users/jb55/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jb55/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jb55/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jb55/subscriptions",
        "organizations_url": "https://api.github.com/users/jb55/orgs",
        "repos_url": "https://api.github.com/users/jb55/repos",
        "events_url": "https://api.github.com/users/jb55/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jb55/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-675088137",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "mentioned",
      "id": 3663438876,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzY2MzQzODg3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3663438876",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-17T20:10:44Z"
    },
    {
      "event": "subscribed",
      "id": 3663438878,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2NjM0Mzg4Nzg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3663438878",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-17T20:10:44Z"
    },
    {
      "event": "reviewed",
      "id": 469767134,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5NzY3MTM0",
      "url": null,
      "actor": null,
      "commit_id": "4fc2e3906377991a05f78a938c0aa2f04056b81c",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "adamjonas",
        "id": 755825,
        "node_id": "MDQ6VXNlcjc1NTgyNQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/755825?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/adamjonas",
        "html_url": "https://github.com/adamjonas",
        "followers_url": "https://api.github.com/users/adamjonas/followers",
        "following_url": "https://api.github.com/users/adamjonas/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/adamjonas/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/adamjonas/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/adamjonas/subscriptions",
        "organizations_url": "https://api.github.com/users/adamjonas/orgs",
        "repos_url": "https://api.github.com/users/adamjonas/repos",
        "events_url": "https://api.github.com/users/adamjonas/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/adamjonas/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#pullrequestreview-469767134",
      "submitted_at": "2020-08-18T19:41:17Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
    },
    {
      "event": "reviewed",
      "id": 469892791,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5ODkyNzkx",
      "url": null,
      "actor": null,
      "commit_id": "0d10af73df19de62726065cb63c123fda8c237b1",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "approach ACK. this is super cool! thank you for building it! \r\n\r\nI've read over the commits, but don't feel familiar enough with many of the components & relevant concerns (yet) to leave a proper review ACK. left a couple questions though. \r\n\r\nI tried this out locally & it works great. I think it would be helpful to add some light documentation within the repo with the basics of how-to-use that you've mentioned on this PR. By basics I mean things like run node with `-logmessages`, the file structure of the `message_logging` dir & passing through `contrib/message-logging/message-logging-parser.py` to interpret. \r\n\r\nThe one trick I found very useful is using `message_logging/[ip address]/*.dat` as the arg for the message parser, since it interpolates the sent & received messages from the peer. I gleaned this from your [comment earlier](https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-664374225) because I agree with @theStack about a common desired use case as accessing all logs for a certain peer. Your reasoning behind having sent vs received as separate files makes perfect sense, and I'm happy that the message parser supports the use case nicely. My request here is something simple to make this interface more apparent.\r\n\r\nthanks again for this PR! I'm excited to query my node more and level up my `jq` skills. ",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#pullrequestreview-469892791",
      "submitted_at": "2020-08-18T23:40:09Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
    },
    {
      "event": "reviewed",
      "id": 469904528,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5OTA0NTI4",
      "url": null,
      "actor": null,
      "commit_id": "ac953a3773aa5e940976a79276894f5e892d1c55",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "narula",
        "id": 177646,
        "node_id": "MDQ6VXNlcjE3NzY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/177646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/narula",
        "html_url": "https://github.com/narula",
        "followers_url": "https://api.github.com/users/narula/followers",
        "following_url": "https://api.github.com/users/narula/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/narula/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/narula/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/narula/subscriptions",
        "organizations_url": "https://api.github.com/users/narula/orgs",
        "repos_url": "https://api.github.com/users/narula/repos",
        "events_url": "https://api.github.com/users/narula/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/narula/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#pullrequestreview-469904528",
      "submitted_at": "2020-08-18T23:51:37Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
    },
    {
      "event": "commented",
      "id": 675776414,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3NTc3NjQxNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/675776414",
      "actor": {
        "login": "narula",
        "id": 177646,
        "node_id": "MDQ6VXNlcjE3NzY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/177646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/narula",
        "html_url": "https://github.com/narula",
        "followers_url": "https://api.github.com/users/narula/followers",
        "following_url": "https://api.github.com/users/narula/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/narula/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/narula/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/narula/subscriptions",
        "organizations_url": "https://api.github.com/users/narula/orgs",
        "repos_url": "https://api.github.com/users/narula/repos",
        "events_url": "https://api.github.com/users/narula/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/narula/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-19T00:00:25Z",
      "updated_at": "2020-08-19T13:05:46Z",
      "author_association": "CONTRIBUTOR",
      "body": "~~It pains me a bit that this circumvents the existing logging infrastructure. Why is it not the case this is all just logged to debug.log (like everything else) and the parser works on that, filtering peer messages?~~\r\n\r\nAs @jnewbery points out below, I totally missed that this was binary logging! I should have looked more carefully.",
      "user": {
        "login": "narula",
        "id": 177646,
        "node_id": "MDQ6VXNlcjE3NzY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/177646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/narula",
        "html_url": "https://github.com/narula",
        "followers_url": "https://api.github.com/users/narula/followers",
        "following_url": "https://api.github.com/users/narula/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/narula/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/narula/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/narula/subscriptions",
        "organizations_url": "https://api.github.com/users/narula/orgs",
        "repos_url": "https://api.github.com/users/narula/repos",
        "events_url": "https://api.github.com/users/narula/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/narula/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-675776414",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "commented",
      "id": 675927925,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3NTkyNzkyNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/675927925",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-19T08:20:39Z",
      "updated_at": "2020-08-19T08:20:39Z",
      "author_association": "MEMBER",
      "body": "> It pains me a bit that this circumvents the existing logging infrastructure. Why is it not the case this is all just logged to debug.log (like everything else) and the parser works on that, filtering peer messages?\r\n\r\nThis PR dumps binary serialized messages (not text) to file, which is then post-processed by other software. The msgs_*.dat files can be enormous - hundreds of megabytes if blocks are being sent over that connection. Converting those messages to printable text and dropping them into the debug.log file would make them larger still, overwhelm the standard debug logging (eg a block message converted to hex would be millions of characters), and probably be a performance bottleneck (since all messages logged to debug.log would need to be deserialized and passed through tinyformat.h).\r\n\r\nI think this also answers your other questions:\r\n\r\n> I don't think \".dat\" is the right extension. These are logs, not data, and should end in \".log\".\r\n\r\n`.log` to me suggests printable text log files. These are binary files that need post-processing before they're readable.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-675927925",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "commented",
      "id": 676082265,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3NjA4MjI2NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/676082265",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-19T10:11:38Z",
      "updated_at": "2020-08-19T18:16:40Z",
      "author_association": "CONTRIBUTOR",
      "body": "Regarding the \"why not use Wireshark?\" discussion:\r\n\r\nI don't know about which use cases others are thinking about, but having this in `master` would help me a lot at least:\r\n\r\nI will use this feature in ways not suitable for Wireshark: both for long-term permanent capture of messages for after-the-fact trouble-shooting/debugging, and also for capturing messages that can be fed as seeds into the net message fuzzers.\r\n\r\nI've played with this PR a bit and it covers my needs: I certainly hope it will land in `master` :)",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-676082265",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "reviewed",
      "id": 470333360,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwMzMzMzYw",
      "url": null,
      "actor": null,
      "commit_id": "4fc2e3906377991a05f78a938c0aa2f04056b81c",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#pullrequestreview-470333360",
      "submitted_at": "2020-08-19T10:38:06Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
    },
    {
      "event": "reviewed",
      "id": 470332650,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwMzMyNjUw",
      "url": null,
      "actor": null,
      "commit_id": "4fc2e3906377991a05f78a938c0aa2f04056b81c",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#pullrequestreview-470332650",
      "submitted_at": "2020-08-19T10:43:10Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
    },
    {
      "event": "reviewed",
      "id": 470374440,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwMzc0NDQw",
      "url": null,
      "actor": null,
      "commit_id": "4fc2e3906377991a05f78a938c0aa2f04056b81c",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#pullrequestreview-470374440",
      "submitted_at": "2020-08-19T11:42:18Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
    },
    {
      "event": "reviewed",
      "id": 470375904,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwMzc1OTA0",
      "url": null,
      "actor": null,
      "commit_id": "4fc2e3906377991a05f78a938c0aa2f04056b81c",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#pullrequestreview-470375904",
      "submitted_at": "2020-08-19T11:44:31Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
    },
    {
      "event": "mentioned",
      "id": 3670679093,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzY3MDY3OTA5Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3670679093",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-19T13:05:46Z"
    },
    {
      "event": "subscribed",
      "id": 3670679095,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2NzA2NzkwOTU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3670679095",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-19T13:05:47Z"
    },
    {
      "event": "commented",
      "id": 676468262,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3NjQ2ODI2Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/676468262",
      "actor": {
        "login": "michaelfolkson",
        "id": 16323900,
        "node_id": "MDQ6VXNlcjE2MzIzOTAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/16323900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/michaelfolkson",
        "html_url": "https://github.com/michaelfolkson",
        "followers_url": "https://api.github.com/users/michaelfolkson/followers",
        "following_url": "https://api.github.com/users/michaelfolkson/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/michaelfolkson/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/michaelfolkson/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/michaelfolkson/subscriptions",
        "organizations_url": "https://api.github.com/users/michaelfolkson/orgs",
        "repos_url": "https://api.github.com/users/michaelfolkson/repos",
        "events_url": "https://api.github.com/users/michaelfolkson/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/michaelfolkson/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-19T14:41:13Z",
      "updated_at": "2020-08-19T14:41:13Z",
      "author_association": "CONTRIBUTOR",
      "body": "I think this is a clear Concept ACK for new contributors. \r\n\r\nI was unsure on the Concept ACK for longer term contributors. The fact that this is useful for some longer term contributors (e.g. @theStack, @practicalswift) convinces me it is just about a Concept ACK given the low cost (future maintenance, additional complexity). \r\n\r\n>  If there are concerns with maintenance of the Wireshark dissector, as I understand it, we could fork it and maintain it out of Wireshark's codebase.\r\n\r\nThis sounds like it would be more work and in the absence of someone saying they are keen to do this I think it is an overall Concept ACK for this PR from me. \r\n\r\n(Excellent initial motivation section from @troygiorshev and fair challenge from @luke-jr)",
      "user": {
        "login": "michaelfolkson",
        "id": 16323900,
        "node_id": "MDQ6VXNlcjE2MzIzOTAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/16323900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/michaelfolkson",
        "html_url": "https://github.com/michaelfolkson",
        "followers_url": "https://api.github.com/users/michaelfolkson/followers",
        "following_url": "https://api.github.com/users/michaelfolkson/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/michaelfolkson/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/michaelfolkson/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/michaelfolkson/subscriptions",
        "organizations_url": "https://api.github.com/users/michaelfolkson/orgs",
        "repos_url": "https://api.github.com/users/michaelfolkson/repos",
        "events_url": "https://api.github.com/users/michaelfolkson/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/michaelfolkson/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-676468262",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "mentioned",
      "id": 3671115077,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzY3MTExNTA3Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3671115077",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-19T14:41:14Z"
    },
    {
      "event": "subscribed",
      "id": 3671115080,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2NzExMTUwODA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3671115080",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-19T14:41:14Z"
    },
    {
      "event": "mentioned",
      "id": 3671115085,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzY3MTExNTA4NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3671115085",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-19T14:41:14Z"
    },
    {
      "event": "subscribed",
      "id": 3671115091,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2NzExMTUwOTE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3671115091",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-19T14:41:14Z"
    },
    {
      "event": "mentioned",
      "id": 3671115095,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzY3MTExNTA5NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3671115095",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-19T14:41:14Z"
    },
    {
      "event": "subscribed",
      "id": 3671115098,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2NzExMTUwOTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3671115098",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-19T14:41:14Z"
    },
    {
      "event": "mentioned",
      "id": 3671115102,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzY3MTExNTEwMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3671115102",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-19T14:41:14Z"
    },
    {
      "event": "subscribed",
      "id": 3671115104,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2NzExMTUxMDQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3671115104",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-19T14:41:14Z"
    },
    {
      "event": "commented",
      "id": 676555213,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3NjU1NTIxMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/676555213",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-19T17:18:54Z",
      "updated_at": "2020-08-19T17:18:54Z",
      "author_association": "MEMBER",
      "body": "I wonder why the name \"message dumping\" was changed to \"message logging\". I find dumping a much more accurate term, as this isn't just producing a log (which sounds more like metadata recording), but an exact dump of all messages.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-676555213",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "reviewed",
      "id": 470706828,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwNzA2ODI4",
      "url": null,
      "actor": null,
      "commit_id": "4fc2e3906377991a05f78a938c0aa2f04056b81c",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "FelixWeis",
        "id": 551068,
        "node_id": "MDQ6VXNlcjU1MTA2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/551068?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/FelixWeis",
        "html_url": "https://github.com/FelixWeis",
        "followers_url": "https://api.github.com/users/FelixWeis/followers",
        "following_url": "https://api.github.com/users/FelixWeis/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/FelixWeis/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/FelixWeis/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/FelixWeis/subscriptions",
        "organizations_url": "https://api.github.com/users/FelixWeis/orgs",
        "repos_url": "https://api.github.com/users/FelixWeis/repos",
        "events_url": "https://api.github.com/users/FelixWeis/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/FelixWeis/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#pullrequestreview-470706828",
      "submitted_at": "2020-08-19T17:53:20Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
    },
    {
      "event": "reviewed",
      "id": 471037212,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxMDM3MjEy",
      "url": null,
      "actor": null,
      "commit_id": "4fc2e3906377991a05f78a938c0aa2f04056b81c",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Approach ACK.\r\n\r\nGiven the minimal new code it sounds like a win to relieve developers to install yet another debugging tool. Debugging tool which may not be accurate given the steady rate of new p2p messages (block filters, erlay, wtxid, ...) or running cross-platform. If now one used it would be easy to remove it.",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#pullrequestreview-471037212",
      "submitted_at": "2020-08-20T00:05:47Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
    },
    {
      "event": "reviewed",
      "id": 471497051,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxNDk3MDUx",
      "url": null,
      "actor": null,
      "commit_id": "0d10af73df19de62726065cb63c123fda8c237b1",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#pullrequestreview-471497051",
      "submitted_at": "2020-08-20T11:19:52Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3680369151,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzY4MDM2OTE1MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3680369151",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-21T16:47:04Z"
    },
    {
      "event": "commented",
      "id": 678387396,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3ODM4NzM5Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/678387396",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-21T16:48:57Z",
      "updated_at": "2020-08-21T16:48:57Z",
      "author_association": "CONTRIBUTOR",
      "body": "`git range-diff master 4fc2e39 ff3a39c`\r\n\r\nThanks for the review everyone!\r\n\r\nImprovement\r\n\r\n* Added a progress bar to the parser\r\n\r\nFixes\r\n\r\n* Now uses GetBoolArg as opposed to IsArgSet\r\n* IP addresses now have colons replaced with underscores\r\n* One LogMessage call site is moved, as per [this comment](https://github.com/bitcoin/bitcoin/pull/19509#discussion_r472931626)\r\n* LogMessage now takes a `CAddress&` as opposed to a `CNode&`\r\n* Clarified some comments\r\n\r\nNext up, a rename and some light documentation!\r\n",
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-678387396",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "reviewed",
      "id": 479674111,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5Njc0MTEx",
      "url": null,
      "actor": null,
      "commit_id": "801154b36035bd8849e0f21a3c6d48f18db56293",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK\r\n\r\nWill do testing and deeper review when CI is green. Mostly ignored the python code for now. Travis failed with running out of disc space but it would surprise me if that was related, so I restarted it. I don't think I can restart Cirrus CI.",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#pullrequestreview-479674111",
      "submitted_at": "2020-09-01T12:44:04Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
    },
    {
      "event": "commented",
      "id": 687778637,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY4Nzc3ODYzNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/687778637",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-06T12:36:54Z",
      "updated_at": "2020-09-06T12:36:54Z",
      "author_association": "MEMBER",
      "body": "Concept ACK, I think the dumping changes to the C++ here could entirely be replaced with a use of #19866, no strong opinion on whether we should do both or not, but I think the python analysis tooling here is useful in any case.",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-687778637",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "labeled",
      "id": 3790798611,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM3OTA3OTg2MTE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3790798611",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-21T22:20:13Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3795860590,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzc5NTg2MDU5MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3795860590",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-23T02:09:19Z"
    },
    {
      "event": "commented",
      "id": 697079425,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY5NzA3OTQyNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/697079425",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-23T02:11:01Z",
      "updated_at": "2020-09-23T02:11:01Z",
      "author_association": "CONTRIBUTOR",
      "body": "`git range-diff master ff3a39c ba68f02`\r\n\r\ntrivial rebase",
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-697079425",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "unlabeled",
      "id": 3796096029,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50Mzc5NjA5NjAyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3796096029",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-23T03:38:22Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 697259250,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY5NzI1OTI1MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/697259250",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-23T09:51:47Z",
      "updated_at": "2020-09-23T09:51:47Z",
      "author_association": "MEMBER",
      "body": "@troygiorshev what's the status here? You've rebased, but there are unaddressed review comments from a few contributors. CI is also failing.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-697259250",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "mentioned",
      "id": 3797247270,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mzc5NzI0NzI3MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3797247270",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-23T09:51:47Z"
    },
    {
      "event": "subscribed",
      "id": 3797247275,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM3OTcyNDcyNzU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3797247275",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-23T09:51:47Z"
    },
    {
      "event": "reviewed",
      "id": 497088959,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3MDg4OTU5",
      "url": null,
      "actor": null,
      "commit_id": "ba68f02310c8ce4080aca8153e644634354678ab",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "michaelfolkson",
        "id": 16323900,
        "node_id": "MDQ6VXNlcjE2MzIzOTAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/16323900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/michaelfolkson",
        "html_url": "https://github.com/michaelfolkson",
        "followers_url": "https://api.github.com/users/michaelfolkson/followers",
        "following_url": "https://api.github.com/users/michaelfolkson/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/michaelfolkson/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/michaelfolkson/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/michaelfolkson/subscriptions",
        "organizations_url": "https://api.github.com/users/michaelfolkson/orgs",
        "repos_url": "https://api.github.com/users/michaelfolkson/repos",
        "events_url": "https://api.github.com/users/michaelfolkson/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/michaelfolkson/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#pullrequestreview-497088959",
      "submitted_at": "2020-09-27T15:22:48Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
    },
    {
      "event": "labeled",
      "id": 3818642639,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM4MTg2NDI2Mzk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3818642639",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-29T10:04:30Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3848444445,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzg0ODQ0NDQ0NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3848444445",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-07T04:04:13Z"
    },
    {
      "event": "commented",
      "id": 704679027,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwNDY3OTAyNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/704679027",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-07T04:09:20Z",
      "updated_at": "2020-10-07T04:09:20Z",
      "author_association": "CONTRIBUTOR",
      "body": "`git range-diff master ba68f02 5d5aeca`\r\n\r\nRebased",
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-704679027",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "unlabeled",
      "id": 3848483873,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50Mzg0ODQ4Mzg3Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3848483873",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-07T04:25:46Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3848526240,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzg0ODUyNjI0MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3848526240",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-07T04:48:04Z"
    },
    {
      "event": "renamed",
      "id": 3848528452,
      "node_id": "MDE3OlJlbmFtZWRUaXRsZUV2ZW50Mzg0ODUyODQ1Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3848528452",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-07T04:49:16Z",
      "rename": {
        "from": "Per-Peer Message Logging",
        "to": "Per-Peer Message Capture"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3848539187,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzg0ODUzOTE4Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3848539187",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-07T04:54:51Z"
    },
    {
      "event": "commented",
      "id": 704691194,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwNDY5MTE5NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/704691194",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-07T04:55:20Z",
      "updated_at": "2020-10-07T04:55:20Z",
      "author_association": "CONTRIBUTOR",
      "body": "`git range-diff master 5d5aeca 18bcf97`\r\n\r\n* Renamed \"Logging\" to \"Capture\" throughout!",
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-704691194",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3848563216,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzg0ODU2MzIxNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3848563216",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-07T05:06:28Z"
    },
    {
      "event": "commented",
      "id": 704694969,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwNDY5NDk2OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/704694969",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-07T05:08:19Z",
      "updated_at": "2020-10-07T05:08:27Z",
      "author_association": "CONTRIBUTOR",
      "body": "`git range-diff master 18bcf97 d2d3d12`\r\n\r\n* Now uses `seek` instead of `read`\r\n* Fixed `mininode` to `p2p` problem\r\n* Removed unneeded `optimistic_send` boolean from `PushMessage`\r\n\r\nStill TODO: Documentation!",
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-704694969",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "commented",
      "id": 704814038,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwNDgxNDAzOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/704814038",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-07T09:30:20Z",
      "updated_at": "2020-10-07T09:37:20Z",
      "author_association": "CONTRIBUTOR",
      "body": "Tested ACK d2d3d12d94477d0d377c82738832dfca2ac9e531\r\n\r\nLooking forward to having this in `master`. This functionality is super useful for 1.) learning purposes, 2.) troubleshooting purposes, and 3.) fuzzing purposes (easy generation of seed corpora from actual message data).\r\n\r\nI encourage others to review. To try this out:\r\n\r\n```\r\n$ gh checkout pr 19509 && make distclean && ./autogen.sh && ./configure --with-incompatible-bdb && make\r\n$ src/bitcoind -capturemessages\r\n# now look in ~/.bitcoin/message_capture/\r\n```\r\n\r\nThe availability of easy-to-use built-in tools such as this and `bitcoin-cli -netinfo` which allow for easy debugging/inspection of the P2P layer of Bitcoin Core will make the road to P2P understanding so much easier/quicker for future generations of Bitcoin Core contributions. Neat feature with great long-term benefits @troygiorshev! Thanks! :)",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-704814038",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "mentioned",
      "id": 3849531285,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mzg0OTUzMTI4NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3849531285",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-07T09:30:21Z"
    },
    {
      "event": "subscribed",
      "id": 3849531291,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM4NDk1MzEyOTE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3849531291",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-07T09:30:21Z"
    },
    {
      "event": "commented",
      "id": 706088661,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwNjA4ODY2MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/706088661",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-09T09:57:41Z",
      "updated_at": "2020-10-09T09:57:41Z",
      "author_association": "MEMBER",
      "body": "I'm planning to rereview this once the CI failures are fixed and the documentation is done.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-706088661",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3874772156,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzg3NDc3MjE1Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3874772156",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-14T05:37:53Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3874876104,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzg3NDg3NjEwNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3874876104",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-14T06:16:51Z"
    },
    {
      "event": "commented",
      "id": 708183871,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwODE4Mzg3MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/708183871",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-14T06:17:31Z",
      "updated_at": "2020-10-14T06:17:31Z",
      "author_association": "CONTRIBUTOR",
      "body": "`git range-diff master d2d3d12 d0ffb34`\r\n\r\n* Fixed remaining `mininode` to `p2p` issue\r\n* Added documentation!",
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-708183871",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "commented",
      "id": 708183974,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwODE4Mzk3NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/708183974",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-14T06:17:48Z",
      "updated_at": "2020-10-14T06:17:48Z",
      "author_association": "CONTRIBUTOR",
      "body": "`git range-diff master d0ffb34 9a9314a`\r\n\r\n* Rebased to master to fix Travis\r\n\r\nAll pending TODOs for this PR are complete.  Thanks to everyone who has reviewed so far, should be an easy reACK from many of you!",
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-708183974",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "commented",
      "id": 708206663,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwODIwNjY2Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/708206663",
      "actor": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-14T07:07:37Z",
      "updated_at": "2020-10-14T07:07:37Z",
      "author_association": "MEMBER",
      "body": "Concept ACK.",
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-708206663",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "reviewed",
      "id": 508081864,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4MDgxODY0",
      "url": null,
      "actor": null,
      "commit_id": "c2f62aefabc2b00ce0ed28901d80d636b600feef",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#pullrequestreview-508081864",
      "submitted_at": "2020-10-14T07:51:54Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
    },
    {
      "event": "commented",
      "id": 708242978,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwODI0Mjk3OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/708242978",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-14T08:21:24Z",
      "updated_at": "2020-10-14T08:21:24Z",
      "author_association": "CONTRIBUTOR",
      "body": "Removed my ACK (temporarily) in light of @MarcoFalke's [comment](https://github.com/bitcoin/bitcoin/pull/19509#discussion_r504472499) about the unrelated change in `src/net.cpp`. \r\n\r\nHopefully that will be resolved soon and I'd be glad to re-review :)",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-708242978",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "mentioned",
      "id": 3875325087,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mzg3NTMyNTA4Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3875325087",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-14T08:21:24Z"
    },
    {
      "event": "subscribed",
      "id": 3875325094,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM4NzUzMjUwOTQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3875325094",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-14T08:21:25Z"
    },
    {
      "event": "reviewed",
      "id": 508351542,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4MzUxNTQy",
      "url": null,
      "actor": null,
      "commit_id": "c2f62aefabc2b00ce0ed28901d80d636b600feef",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#pullrequestreview-508351542",
      "submitted_at": "2020-10-14T13:42:40Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
    },
    {
      "event": "commented",
      "id": 708411183,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwODQxMTE4Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/708411183",
      "actor": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-14T13:44:05Z",
      "updated_at": "2020-10-14T13:44:05Z",
      "author_association": "MEMBER",
      "body": "We could (also) expose these via ZMQ, just saying.",
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-708411183",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3884311118,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzg4NDMxMTExOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3884311118",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-16T02:39:06Z"
    },
    {
      "event": "commented",
      "id": 709696165,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwOTY5NjE2NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/709696165",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-16T02:41:54Z",
      "updated_at": "2020-10-16T02:41:54Z",
      "author_association": "CONTRIBUTOR",
      "body": "`git range-diff master 9a9314a 2418ec6`\r\n\r\n* Reverted the change to optimisticSend\r\n\r\nTravis shouldâ„¢ pass now.  I can't get the fuzz tests to build, but I get the same linker error on `master` as I do here, so I assume it's unrelated. ",
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-709696165",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "commented",
      "id": 709944745,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwOTk0NDc0NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/709944745",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-16T09:46:57Z",
      "updated_at": "2020-10-16T09:46:57Z",
      "author_association": "CONTRIBUTOR",
      "body": "Cirrus failing to fetch `sqlite-autoconf-3320100.tar.gz`, 404.  Unrelated.",
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-709944745",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "commented",
      "id": 710058576,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcxMDA1ODU3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/710058576",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-16T13:48:24Z",
      "updated_at": "2020-10-16T13:48:24Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK 2418ec658ccd2e8e033bced0f5b7c183946940ac",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-710058576",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "commented",
      "id": 727627176,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcyNzYyNzE3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/727627176",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-15T19:59:03Z",
      "updated_at": "2020-11-15T20:00:53Z",
      "author_association": "MEMBER",
      "body": "The changes themselves LGTM. However, while testing the feature on mainnet, the parsing tool `contrib/message-capture/message-capture-parser.py` encountered a problem decoding the following `version` message:\r\n\r\n```\r\n$ xxd -g1 msgs_recv.dat\r\n00000000: 75 da 89 ca 28 b4 05 00 76 65 72 73 69 6f 6e 00  u...(...version.\r\n00000010: 00 00 00 00 6b 00 00 00 60 ea 00 00 00 00 00 00  ....k...`.......\r\n00000020: 00 00 00 00 95 68 b1 5f 00 00 00 00 01 00 00 00  .....h._........\r\n00000030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff ff  ................\r\n00000040: d9 4f b2 14 20 8d 01 00 00 00 00 00 00 00 00 00  .O.. ...........\r\n00000050: 00 00 00 00 00 00 00 00 ff ff 00 00 00 00 00 00  ................\r\n00000060: 25 08 55 ca 19 a0 39 05 15 2f 62 69 74 63 6f 69  %.U...9../bitcoi\r\n00000070: 6e 2d 73 65 65 64 65 72 3a 30 2e 30 31 2f 30 57  n-seeder:0.01/0W\r\n00000080: 05 00 00                                         ...\r\n```\r\nThis output can be converted back to the binary file via `xxd -r hexdump.txt`. If anyone has a better idea how to share binary data for reviewing here (probably base64 or alike?), I'd be glad to hear it.\r\n\r\n```\r\n$ contrib/message-capture/message-capture-parser.py ~/.bitcoin/message_capture/78.244.132.5_52410/*\r\nProcessing /home/honeybadger/.bitcoin/message_capture/78.244.132.5_52410/msgs_recv.dat\r\nTraceback (most recent call last):\r\n  File \"contrib/message-capture/message-capture-parser.py\", line 178, in <module>\r\n    main()\r\n  File \"contrib/message-capture/message-capture-parser.py\", line 160, in main\r\n    process_file(str(capture), messages, \"recv\" in capture.stem, progress_bar)\r\n  File \"contrib/message-capture/message-capture-parser.py\", line 117, in process_file\r\n    assert_equal(length, payload_length)\r\n  File \"contrib/message-capture/../../test/functional/test_framework/util.py\", line 50, in assert_equal                                                                                                   \r\n    raise AssertionError(\"not(%s)\" % \" == \".join(str(arg) for arg in (thing1, thing2) + args))\r\nAssertionError: not(107 == 106)\r\n```\r\nIt seems like the deserialization routine for `msg_version` is consuming one byte less than expected. Guess that has to do with the optional `fRelay` field at the end. See also [BIP37](https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki#Extensions_to_existing_messages) and [BIP60](https://github.com/bitcoin/bips/blob/master/bip-0060.mediawiki) -- the latter is a draft, but it seems to summarize perfectly the problem we have here.",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-727627176",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "reviewed",
      "id": 530830774,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwODMwNzc0",
      "url": null,
      "actor": null,
      "commit_id": "2418ec658ccd2e8e033bced0f5b7c183946940ac",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#pullrequestreview-530830774",
      "submitted_at": "2020-11-15T20:14:51Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4008166733,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDAwODE2NjczMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4008166733",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-18T00:40:37Z"
    },
    {
      "event": "commented",
      "id": 729302211,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcyOTMwMjIxMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/729302211",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-18T00:42:40Z",
      "updated_at": "2020-11-18T01:01:33Z",
      "author_association": "CONTRIBUTOR",
      "body": "`git range-diff master 2418ec6 4690881`\r\n\r\n* Fixed version fRelay bug\r\n  * The parser now more closely matches how parsing works in the test framework and in bitcoind\r\n* Documentation now follows PEP 0394\r\n* Removed cat overuse in documentation\r\n\r\nFirst of all, many thanks @theStack for both finding the bug and identifying exactly what causes it.  Your guess was spot on and the links to the BIPs were very useful!  It ended up identifying a small bug with how I implemented my message parser.\r\n\r\nHowever, I'm not sure what to think about this message.  Looking at it closely, it has the following:\r\n\r\n* Version = 60000\r\n* fRelay = 0 (1 byte)\r\n* Declared payload size = 107\r\n* Actual payload size = 107\r\n\r\nThe fRelay field is only supposed to exist as of version 70001.  So this message is malformed.  But, in the protocol's implementation in bitcoind, we don't check this.\r\n\r\nThis is a discrepancy between our testing framework and bitcoind.  If fRelay was 1 for a message with version <70001, bitcoind would take it as a 1, whereas our testing framework would take it was a 0.  I don't think this will ever happen in the real world, but it's worth noting.  I've opened a PR to discuss this as #20411.\r\n\r\nFor now I take this as fixed.",
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-729302211",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "mentioned",
      "id": 4008171639,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDAwODE3MTYzOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4008171639",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-18T00:42:40Z"
    },
    {
      "event": "subscribed",
      "id": 4008171642,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQwMDgxNzE2NDI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4008171642",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-18T00:42:40Z"
    },
    {
      "event": "commented",
      "id": 729308771,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcyOTMwODc3MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/729308771",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-18T01:03:28Z",
      "updated_at": "2020-11-18T01:08:17Z",
      "author_association": "CONTRIBUTOR",
      "body": "Also, I thought sharing the binary file as a hexdump worked great!  Thanks for adding the tip to use xxd's `-r` flag.  I personally use HxD in Windows to view and edit binary files.  It's a GUI so everything's messy - someone who uses xxd with vim might have a good reason to have binary files shared one way or another.",
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-729308771",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "reviewed",
      "id": 533134376,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzMTM0Mzc2",
      "url": null,
      "actor": null,
      "commit_id": "4690881fc52a2d5d8b17c7a1e4ae07d3e2d88e14",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#pullrequestreview-533134376",
      "submitted_at": "2020-11-18T06:24:34Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
    },
    {
      "event": "commented",
      "id": 729462566,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcyOTQ2MjU2Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/729462566",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-18T06:29:04Z",
      "updated_at": "2020-11-18T06:29:04Z",
      "author_association": "MEMBER",
      "body": "another example: In commit fa74d3d720f I removed unused deserialize code, because supported versions of Bitcoin Core would never serialize such a version message. (We only use the test framework to test supported versions of Core). So I am wondering if the message capture may ever write a message that can't be parsed by our test code. And if there is a way to protect against this.",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-729462566",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "commented",
      "id": 729571242,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcyOTU3MTI0Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/729571242",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-18T10:02:18Z",
      "updated_at": "2020-11-18T10:02:18Z",
      "author_association": "CONTRIBUTOR",
      "body": "Is there any chance this PR could get a release milestone?\r\n\r\nFWIW I love this feature and would love to see it in `master` soon :)  Thanks @troygiorshev!",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-729571242",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "mentioned",
      "id": 4009804513,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDAwOTgwNDUxMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4009804513",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-18T10:02:18Z"
    },
    {
      "event": "subscribed",
      "id": 4009804518,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQwMDk4MDQ1MTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4009804518",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-18T10:02:18Z"
    },
    {
      "event": "labeled",
      "id": 4016797448,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQwMTY3OTc0NDg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4016797448",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-19T16:36:55Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 733509943,
      "node_id": "MDEyOklzc3VlQ29tbWVudDczMzUwOTk0Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/733509943",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-25T07:01:58Z",
      "updated_at": "2020-11-25T07:21:40Z",
      "author_association": "CONTRIBUTOR",
      "body": "> So I am wondering if the message capture may ever write a message that can't be parsed by our test code. And if there is a way to protect against this.\r\n\r\nIdeally, in my mind, our test code should function as closely as possible to Core.  So, if a message can be parsed by Core it should be able to be parsed by our test code.  You're right that this will get tricky for undefined behavior or broken messages like this.\r\n\r\n~~For now I'll add a MIN_PEER_PROTO_VERSION check as suggested [in 14025](https://github.com/bitcoin/bitcoin/pull/14025#issuecomment-415426683).~~\r\n\r\nEdit: We still have to have a way to deal with messages that fail to be deserialized by the test code.  Doesn't appear to be a problem, see below.",
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-733509943",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "commented",
      "id": 733511635,
      "node_id": "MDEyOklzc3VlQ29tbWVudDczMzUxMTYzNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/733511635",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-25T07:06:01Z",
      "updated_at": "2020-11-25T07:06:01Z",
      "author_association": "MEMBER",
      "body": "the message capture code will write the message *before* parsing. So except for the message header (message type) nothing is parsed, it could be any raw byte string. There is no way the test framework could make sense of that if not by accident.",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-733511635",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "commented",
      "id": 733517645,
      "node_id": "MDEyOklzc3VlQ29tbWVudDczMzUxNzY0NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/733517645",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-25T07:20:38Z",
      "updated_at": "2021-01-06T15:15:29Z",
      "author_association": "CONTRIBUTOR",
      "body": "Oh, yeah you're completely right, thanks.\r\n\r\nLuckily (due to #19107) only messages with a valid header are pushed onto the vRecv queue, given to ProcessMessages, and parsed by the message capture parser.  So we can trust that the header is workable.  This will allow us to simply skip ~~messages~~ files that contain messages that fail deserilization, and we should be able to continue parsing all of the other ones.\r\n\r\nI'll think of a nice way to signal this to the user.\r\n\r\nEdit: I think we'll have to skip the entire file that contains a bad message, as a bad stated size will result in the next message being deserialized badly almost all of the time.  I'll experiment and see how best to fix this.",
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-733517645",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYmY3NzlkNWRlYjA0ZjU1YzZlODQ5M2NlNGUxMmVkNDYyODYzOGYz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dbf779d5deb04f55c6e8493ce4e12ed4628638f3",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/dbf779d5deb04f55c6e8493ce4e12ed4628638f3",
      "tree": {
        "sha": "31b8a0eecda150e8642fff61b653dc4435c0ab5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/31b8a0eecda150e8642fff61b653dc4435c0ab5e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bc51b99bd5e99a4828a5f759b21ae911aef461e5",
          "sha": "bc51b99bd5e99a4828a5f759b21ae911aef461e5",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/bc51b99bd5e99a4828a5f759b21ae911aef461e5"
        }
      ],
      "message": "Clean PushMessage and ProcessMessages\n\nThis brings PushMessage and ProcessMessages further in line with the\nstyle guide by fixing their if statements.\n\nLogMessage is later called, inside an if statement, inside both of these\nmethods.",
      "committer": {
        "name": "Troy Giorshev",
        "email": "troygiorshev@gmail.com",
        "date": "2021-01-18T01:31:02Z"
      },
      "author": {
        "name": "Troy Giorshev",
        "email": "troygiorshev@gmail.com",
        "date": "2020-07-22T12:59:16Z"
      },
      "sha": "dbf779d5deb04f55c6e8493ce4e12ed4628638f3"
    },
    {
      "event": "referenced",
      "id": 4219838116,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQyMTk4MzgxMTY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4219838116",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "43f3ada27b835e6b198f9a669e4955d06f5c4d08",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/43f3ada27b835e6b198f9a669e4955d06f5c4d08",
      "created_at": "2021-01-18T21:09:27Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4224568413,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDIyNDU2ODQxMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4224568413",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-19T20:47:51Z"
    },
    {
      "event": "commented",
      "id": 763130904,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc2MzEzMDkwNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/763130904",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-19T20:49:26Z",
      "updated_at": "2021-01-19T20:49:26Z",
      "author_association": "CONTRIBUTOR",
      "body": "`git range-diff master 4690881 abbb8ac`\r\n\r\n* Parser now no longer crashes when it reaches an unrecognized or broken message.  Instead it simply skips that message and the rest of the file the message came from.\r\n* Removed an unused import from the previous force push",
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-763130904",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4224627176,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDIyNDYyNzE3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4224627176",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-19T21:01:57Z"
    },
    {
      "event": "commented",
      "id": 763139446,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc2MzEzOTQ0Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/763139446",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-19T21:03:03Z",
      "updated_at": "2021-01-19T21:03:03Z",
      "author_association": "CONTRIBUTOR",
      "body": "`git range-diff master abbb8ac d2e0f73`\r\n\r\n* Rebased",
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-763139446",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "reviewed",
      "id": 571674570,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcxNjc0NTcw",
      "url": null,
      "actor": null,
      "commit_id": "d2e0f731c5c7a2e1c060beb1ed5b16e7632e5f9d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Tested ACK d2e0f731c5c7a2e1c060beb1ed5b16e7632e5f9d modulo nits",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#pullrequestreview-571674570",
      "submitted_at": "2021-01-19T21:41:11Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4224798163,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDIyNDc5ODE2Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4224798163",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-19T21:45:46Z"
    },
    {
      "event": "commented",
      "id": 763162247,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc2MzE2MjI0Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/763162247",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-19T21:46:48Z",
      "updated_at": "2021-01-19T21:46:48Z",
      "author_association": "CONTRIBUTOR",
      "body": "`git range-diff master d2e0f73 af8bcd1`\r\n\r\n* Fixed two typos in documentation",
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-763162247",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "unlabeled",
      "id": 4224955595,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDIyNDk1NTU5NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4224955595",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-19T22:28:59Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 763289712,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc2MzI4OTcxMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/763289712",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-20T02:43:59Z",
      "updated_at": "2021-01-20T02:43:59Z",
      "author_association": "CONTRIBUTOR",
      "body": "Tested ACK af8bcd1a6ecdfa15d7fb0f98256d47dec9b40f61",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-763289712",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "reviewed",
      "id": 572113296,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcyMTEzMjk2",
      "url": null,
      "actor": null,
      "commit_id": "af8bcd1a6ecdfa15d7fb0f98256d47dec9b40f61",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "utACK af8bcd1a6ecdfa15d7fb0f98256d47dec9b40f61\r\n\r\nThis looks great, Troy. I think it can be merged, but I've given a few style suggestions inline. Feel free to take or leave.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#pullrequestreview-572113296",
      "submitted_at": "2021-01-20T12:07:07Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
    },
    {
      "event": "referenced",
      "id": 4229804009,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQyMjk4MDQwMDk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4229804009",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "d35db2baaaa74664c39b98002c2df671cdb47f6f",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/d35db2baaaa74664c39b98002c2df671cdb47f6f",
      "created_at": "2021-01-20T20:24:17Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4235268948,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDIzNTI2ODk0OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4235268948",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-21T19:36:34Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4235275316,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDIzNTI3NTMxNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4235275316",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-21T19:38:15Z"
    },
    {
      "event": "commented",
      "id": 764889339,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc2NDg4OTMzOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/764889339",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-21T19:39:19Z",
      "updated_at": "2021-01-21T19:39:19Z",
      "author_association": "CONTRIBUTOR",
      "body": "`git range-diff master af8bcd1 a17b250`\r\n\r\n* Implemented various style improvement suggested by jnewbery above",
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-764889339",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "reviewed",
      "id": 573749922,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTczNzQ5OTIy",
      "url": null,
      "actor": null,
      "commit_id": "a17b2509e0d7e7e05fd5600d5387608bb706ac0e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Tested ACK a17b2509e0d7e7e05fd5600d5387608bb706ac0e\r\nReviewed the code, captured messages on mainnet for a few minutes and parsed the output with the included parser, everything LGTM, except minor things (see below). Looking forward to see this in master (hopefully) soon! :rocket:\r\n\r\nA follow-up that takes care of  some PEP8 code style issues (running `pylint` or `black` helps here) may makes sense though :) Didn't check Python type annotations, maybe another reviewer experienced with that could run via `mypy`. (Potential issues could also solved in a follow-up though.)",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#pullrequestreview-573749922",
      "submitted_at": "2021-01-21T21:51:09Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
    },
    {
      "event": "reviewed",
      "id": 573829313,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTczODI5MzEz",
      "url": null,
      "actor": null,
      "commit_id": "e2b6430dcb50a4e90f70a3dcea693a6dc8112634",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK. I really like the approach of having separate files per peer/connection. Slightly less sure about separating send/receive, but seems ok.\r\n\r\nI wonder if we shouldn't go further actually. Having one file (or two) = one session would be pretty nice for certain analyses. That could be accomplished by adding e.g. (our own node startup time, peer id) or (connection start time) in the filenames (or directory names).\r\n\r\nI'm slightly concerned about the overhead of opening/closing files for every message sent/received. Has anyone benchmarked this (or have ideas for a useful benchmark, even)? I understand the rationale of not ~~capturing~~ occupying a large part of the file descriptor space for this, but it'd be good to know it doesn't really hurt.\r\n\r\nApologies if these questions have been answered already.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#pullrequestreview-573829313",
      "submitted_at": "2021-01-22T00:18:58Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
    },
    {
      "event": "reviewed",
      "id": 573842467,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTczODQyNDY3",
      "url": null,
      "actor": null,
      "commit_id": "a17b2509e0d7e7e05fd5600d5387608bb706ac0e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#pullrequestreview-573842467",
      "submitted_at": "2021-01-22T00:23:01Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
    },
    {
      "event": "commented",
      "id": 765304301,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc2NTMwNDMwMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/765304301",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-22T10:22:01Z",
      "updated_at": "2021-01-22T10:22:01Z",
      "author_association": "MEMBER",
      "body": "> Slightly less sure about separating send/receive, but seems ok.\r\n\r\nThis was my suggestion. Maybe a hangover from my telecoms days when it was common to dump different streams for send/recv. The benefit here is that we save one bit (really one byte since there's nowhere to stuff it in the other metadata fields) per message because we don't need a flag to indicate send/recv. As well as that, there are probably at least some tools/analyses that are only interested in traffic in one direction. Splitting the files means that those tools would not have to read/filter/seek over a bunch of messages that they're not interested in.\r\n\r\n> I wonder if we shouldn't go further actually. Having one file (or two) = one session would be pretty nice for certain analyses. That could be accomplished by adding e.g. (our own node startup time, peer id) or (connection start time) in the filenames (or directory names).\r\n\r\nACK! I think a directory structure of `<IP_port>/<peerid>/[send|recv].dev` would work very nicely.\r\n\r\n> I'm slightly concerned about the overhead of opening/closing files for every message sent/received. Has anyone benchmarked this (or have ideas for a useful benchmark, even)? I understand the rationale of not occupying a large part of the file descriptor space for this, but it'd be good to know it doesn't really hurt.\r\n\r\nThis is something that @troygiorshev and I discussed at length, but I can't find that discussion in this PR, so it was probably before it was opened. Troy, do you have any notes from then? I know you looked into both alternatives.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-765304301",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "mentioned",
      "id": 4237845297,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDIzNzg0NTI5Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4237845297",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-22T10:22:01Z"
    },
    {
      "event": "subscribed",
      "id": 4237845299,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQyMzc4NDUyOTk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4237845299",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-22T10:22:01Z"
    },
    {
      "event": "reviewed",
      "id": 574106687,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc0MTA2Njg3",
      "url": null,
      "actor": null,
      "commit_id": "e2b6430dcb50a4e90f70a3dcea693a6dc8112634",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "left some nits nothing blocking\r\n\r\n\r\nreview ACK a17b2509e0 ðŸ•µ\r\n\r\n<details><summary>Show signature and timestamp</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nreview ACK a17b2509e0 ðŸ•µ\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUguwgv9FOD3U5WBoyc0YEgJF3o3jYu8yF+c5Pv2XB6gF2p6s1eLQptvp50IGsSO\r\nTsg05XUEh9pnNixYKjtFzGonkGSZpSe2ZLBBDtgj4zuW5cphvuZlLaZjQSYmY472\r\nAOjYh34hHzSE6SLaXkQyXLOVgRR9RPlaIsWZT5FG1i25MPLWxFm70asST2gq19yT\r\nTmXXM8nq/Jm0MGmULL4PQ5UGphQgXnyYkuyE7+eEfIKy8T+QiWEumHEwfH0l/h9m\r\nwJFehDM0iXy/SfDWejKnLmHpMAavgUErQoLIyKmRjAbYtSF9yXRQsQXrl53UqlBn\r\nHqqSrlVEsm5R6F6r6/XFeHtaXZbkRx7MAAo3oM3g6YWrGshP+JPQQqwA5SeOwWg7\r\nM2qlo+uyjUiULWgCJ+wJzgfi4bdoT2rgedXp8oG4hdoSmJGYcHtZKmBQ0rQxWhzh\r\nbC/5V9IUDuZrxKf2I0+/eHtaBFcZtYfueJeMsSLk1MG+9+osiR3GGtfoe8RJVSFd\r\nvTI+2+Uy\r\n=aY6T\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n[Timestamp of file with hash `7871da5ba1b4e6ad2ab0e950c9a698549aff909de9029ac589bdbf635a33cb83  -`](https://opentimestamps.org/info/?004f70656e54696d657374616d7073000050726f6f6600bf89e2e884e8929401087871da5ba1b4e6ad2ab0e950c9a698549aff909de9029ac589bdbf635a33cb83f0105b781552e14888385e753a0e454f565608fff0103791c3eb415300df6cd93fd66fa9648b08f020cbf3259e26ffccb93125effc884182f2779405978b327eead7032367521c486b08f0205ee0e6908eb2244ecfffe7f4393032fab563b7883478bb4e4581a6e07627f97e08f104600aacd5f008e0f3a9ffcf93121e0083dfe30d2ef90c8e2c2b68747470733a2f2f626f622e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267fff0109bb2c9adb405ab8d1f86564816bab22808f120f1d71961f3d2e02744a30be158660cdcc591c937b550f50731962507dd20633408f020b4bcbc45e6fa3a508bfb6a099e1a7b515e38a5a611db935b296144dec057df7808f104600aacd4f00858f39611f507b28f0083dfe30d2ef90c8e2e2d68747470733a2f2f616c6963652e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267f010cc240dab639262ed75170562f05a9c5e08f02022b709efc5d3208887cb77a4d1209f5ea2423cbf4fc2461ef16312e0d167b59208f0206dc6ec652a1c10cfee07c8b23bc3695ed9fe60ab06ab1aff91e9cdb3570c352308f104600aacd4f0089b8113205684be5f0083dfe30d2ef90c8e292868747470733a2f2f66696e6e65792e63616c656e6461722e657465726e69747977616c6c2e636f6d)\r\n\r\n</details>\r\n",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#pullrequestreview-574106687",
      "submitted_at": "2021-01-22T10:46:01Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
    },
    {
      "event": "commented",
      "id": 765320311,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc2NTMyMDMxMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/765320311",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-22T10:53:12Z",
      "updated_at": "2021-01-22T10:53:12Z",
      "author_association": "MEMBER",
      "body": "> ACK! I think a directory structure of <IP_port>/<peerid>/[send|recv].dev would work very nicely.\r\n\r\nI think that could be confusing, because the same IP_port can have different peerid during the same connection (reconnect), but also can have the same peerid across restarts. So this make it *harder* to get the msgs of just one session.",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-765320311",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "commented",
      "id": 765322561,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc2NTMyMjU2MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/765322561",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-22T10:58:01Z",
      "updated_at": "2021-01-22T10:58:01Z",
      "author_association": "MEMBER",
      "body": "There has been some feedback, but at the very least you need to fix the linter for this to be merged.",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-765322561",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "commented",
      "id": 765324760,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc2NTMyNDc2MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/765324760",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-22T11:02:29Z",
      "updated_at": "2021-01-22T11:02:29Z",
      "author_association": "MEMBER",
      "body": "> I think that could be confusing, because the same IP_port can have different peerid during the same connection (reconnect), but also can have the same peerid across restarts. So this make it harder to get the msgs of just one session.\r\n\r\nAh, good point. I'd missed sipa's point about using a `(our own node startup time, peer id)` pair to handle restarts.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-765324760",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "commented",
      "id": 765508093,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc2NTUwODA5Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/765508093",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-22T16:00:03Z",
      "updated_at": "2021-01-23T03:18:37Z",
      "author_association": "CONTRIBUTOR",
      "body": "@sipa \r\n\r\n> Concept ACK. I really like the approach of having separate files per peer/connection. Slightly less sure about separating send/receive, but seems ok.\r\n\r\nAgreed: I also have a slight preference towards combining send and recv in the same file for these type of captures.\r\n\r\nFor \"request-response\" analysis it is really nice to be able to have the messages in correct order without having to correlate timestamps from two different files to produce an \"ordered\" file covering the entire flow.\r\n\r\nPersonally I think this ease-of-use benefit in the exceeds the cost (one extra byte to indicate direction, and having to skip one direction in the case of one direction analysis).\r\n\r\n> I wonder if we shouldn't go further actually. Having one file (or two) = one session would be pretty nice for certain analyses. That could be accomplished by adding e.g. (our own node startup time, peer id) or (connection start time) in the filenames (or directory names).\r\n\r\nStrong Concept ACK on this idea as well.\r\n\r\nIn the use cases I can think of the relevant unit of analysis is more likely to be \"one specific session (with one specific IP)\" than \"all session with one specific IP\".\r\n\r\nAnd the latter use cases can easily be covered by the user by simply concatenating multiple files of the \"one specific session\" type :)",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-765508093",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "mentioned",
      "id": 4239250100,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDIzOTI1MDEwMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4239250100",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-22T16:00:03Z"
    },
    {
      "event": "subscribed",
      "id": 4239250103,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQyMzkyNTAxMDM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4239250103",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-22T16:00:03Z"
    },
    {
      "event": "commented",
      "id": 765625996,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc2NTYyNTk5Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/765625996",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-22T19:09:15Z",
      "updated_at": "2021-01-22T19:12:28Z",
      "author_association": "MEMBER",
      "body": "@jnewbery \r\n\r\n> The benefit here is that we save one bit (really one byte since there's nowhere to stuff it in the other metadata fields) per message because we don't need a flag to indicate send/recv.\r\n\r\nThe direction could be stored in the top bit of the size field. The max protocol message size is 4000000 bytes, so even 3 bytes would be enough if we really wanted to. A variable-length encoding of command name (1 length byte + that many bytes for the command name itself e.g.) would also save several bytes on average per message.\r\n\r\nI don't think dump size is that much of a priority that it warrants lots of extra effort, but I also don't think the size argument on itself is a good reason for splitting the files based on direction.\r\n\r\n> As well as that, there are probably at least some tools/analyses that are only interested in traffic in one direction. Splitting the files means that those tools would not have to read/filter/seek over a bunch of messages that they're not interested in.\r\n\r\nMaybe, but I expect those to also be interested in just one or a few commands, and they'll still need to read/filter/seek over the ones they don't care about. On the other hand, anything analyzing query/response like things will need to look in both files too.\r\n\r\nEspecially if we'd go in a direction of separating separate sessions to the same ip/port, I think there is an elegance to having exactly 1 file = 1 session.\r\n\r\nAnother idea: would it make sense to store the version information of the dumping node (CLIENT_NAME, CLIENT_VERSION, perhaps also connection type)? Either in a header at the beginning of the file, or in the filename. That would make it easy to do analyses to compare behavior of different client versions.\r\n\r\nWhat about a directory structure of `<CLIENT_NAME>_<CLIENT_VERSION>/<ip>_<port>/<timestamp>_<peerid>.dat`?\r\n",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-765625996",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "mentioned",
      "id": 4240008023,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDI0MDAwODAyMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4240008023",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-22T19:09:16Z"
    },
    {
      "event": "subscribed",
      "id": 4240008027,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQyNDAwMDgwMjc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4240008027",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-22T19:09:16Z"
    },
    {
      "event": "commented",
      "id": 765635682,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc2NTYzNTY4Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/765635682",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-22T19:28:22Z",
      "updated_at": "2021-01-22T19:28:22Z",
      "author_association": "MEMBER",
      "body": "> Especially if we'd go in a direction of separating separate sessions to the same ip/port, I think there is an elegance to having exactly 1 file = 1 session.\r\n\r\nI agree that this seems very nice. I don't have any objection to changing the output to be this way.\r\n\r\n> What about a directory structure of `<CLIENT_NAME>_<CLIENT_VERSION>/<ip>_<port>/<timestamp>_<peerid>.dat`?\r\n\r\nI'm less convinced of this. For one, those details can easily be fished out of the received version message in the file. I also like the directory structure of one directory per peer in `.bitcoin/message_capture` (and one file per session in each of those directories). But again, if other people prefer that I won't strongly oppose it.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-765635682",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "commented",
      "id": 765637994,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc2NTYzNzk5NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/765637994",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-22T19:33:19Z",
      "updated_at": "2021-01-22T19:33:19Z",
      "author_association": "MEMBER",
      "body": "> I'm less convinced of this.\r\n\r\nYes, just a suggestion to hear what people think.\r\n\r\n> For one, those details can easily be fished out of the received version message in the file.\r\n\r\nNote that I'm talking about the version of the *dumping* node, not of the peer we're connecting to (that may also be interesting of course, but is a bit harder as it means you only know the filename after receiving VERSION).\r\n\r\n> I also like the directory structure of one directory per peer in `.bitcoin/message_capture`\r\n\r\nIf the intent is really \"one directory per peer\", the port perhaps shouldn't be included (or at least not for incoming connections), as the outgoing TCP port is newly chosen for every connection.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-765637994",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "commented",
      "id": 765704796,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc2NTcwNDc5Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/765704796",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-22T21:50:50Z",
      "updated_at": "2021-01-22T21:50:50Z",
      "author_association": "CONTRIBUTOR",
      "body": "> why not capture messages after CNode::ReceiveMsgBytes?\r\n\r\nThis has been brought up a couple times now, and it's a great question, so it's worth a full response (that won't be buried in resolved conversations).\r\n\r\nMy priority in this PR is that the capture of messages always occurs in order from an _application layer_ perspective.  Because of this, I have to capture messages in the MessageHandler thread.\r\n\r\nIf I were to instead capture incoming messages in the SocketHandler thread, say, right after ReceiveMsgBytes, the following could possibly occur:\r\n\r\n* receive and capture message X\r\n* receive and capture message Y\r\n* send and capture message A\r\n\r\nwhereas on the processing side (since X and Y are in in the `vRecvMsg` queue before being processed), the node actually did the following:\r\n\r\n* process message X\r\n* respond with message A\r\n* process message Y\r\n\r\nSo the order would be broken.  Remember, this PR isn't just a fun replacement for wireshark.  The point is that someone improving/debugging/learning bitcoin's p2p protocol can see what's actually going on from the node's perspective, without having to worry about how the timing of the queues is complicating things.",
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-765704796",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "commented",
      "id": 765715052,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc2NTcxNTA1Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/765715052",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-22T22:16:20Z",
      "updated_at": "2021-01-22T22:16:20Z",
      "author_association": "MEMBER",
      "body": "@troygiorshev That's a great point. I was thinking that the difference between net-level and net_processing-level ordering would only be different interleaving across peers, but you're right to point out it even obscures the processing within one peer. I agree it's valuable to dump in processing order.\r\n",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-765715052",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "mentioned",
      "id": 4240611174,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDI0MDYxMTE3NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4240611174",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-22T22:16:20Z"
    },
    {
      "event": "subscribed",
      "id": 4240611181,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQyNDA2MTExODE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4240611181",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-22T22:16:20Z"
    },
    {
      "event": "reviewed",
      "id": 574740233,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc0NzQwMjMz",
      "url": null,
      "actor": null,
      "commit_id": "a17b2509e0d7e7e05fd5600d5387608bb706ac0e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#pullrequestreview-574740233",
      "submitted_at": "2021-01-23T06:20:16Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
    },
    {
      "event": "commented",
      "id": 766168963,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc2NjE2ODk2Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/766168963",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-23T19:50:36Z",
      "updated_at": "2021-01-23T19:50:36Z",
      "author_association": "CONTRIBUTOR",
      "body": "> is really nice to be able to have the messages in correct order without having to correlate timestamps from two different files to produce an \"ordered\" file covering the entire flow.\r\n\r\nThis is already done for you by the parser, just give it both files and the messages will be interleaved automatically in the output file.  If I'm understanding you correctly, the following should do what you're looking for:\r\n\r\n`./message-capture-parser.py <folder>/*.dat -o out.json`\r\n\r\nThat said...\r\n\r\n> I think there is an elegance to having exactly 1 file = 1 session.\r\n\r\nI agree completely, I'll figure this out!",
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-766168963",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMmE3N2ZmOTdiZWMwOWRkNWZjYzA0M2Q4NjU5ZDhlYzVkZmI4N2My",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f2a77ff97bec09dd5fcc043d8659d8ec5dfb87c2",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f2a77ff97bec09dd5fcc043d8659d8ec5dfb87c2",
      "tree": {
        "sha": "fb44b69ac67e2183242dfd743aab011e611adb37",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fb44b69ac67e2183242dfd743aab011e611adb37"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dbf779d5deb04f55c6e8493ce4e12ed4628638f3",
          "sha": "dbf779d5deb04f55c6e8493ce4e12ed4628638f3",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/dbf779d5deb04f55c6e8493ce4e12ed4628638f3"
        }
      ],
      "message": "Add CaptureMessage\n\nThis commit adds the CaptureMessage function.  This will later be called\nwhen any message is sent or received.  The capture directory is fixed,\nin a new folder \"message_capture\" in the datadir.  Peers will then have\ntheir own subfolders, named with their IP address and port, replacing\ncolons with underscores to keep compatibility with Windows.  Inside,\nreceived and sent messages will be captured into two binary files,\nmsgs_recv.dat and msgs_sent.dat.\n\ne.g.\nmessage_capture/203.0.113.7_56072/msgs_recv.dat\nmessage_capture/203.0.113.7_56072/msgs_sent.dat\n\nThe format has been designed as to result in a minimal performance\nimpact.  A parsing script is added in a later commit.",
      "committer": {
        "name": "Troy Giorshev",
        "email": "troygiorshev@gmail.com",
        "date": "2021-01-23T20:58:42Z"
      },
      "author": {
        "name": "Troy Giorshev",
        "email": "troygiorshev@gmail.com",
        "date": "2020-07-13T17:20:47Z"
      },
      "sha": "f2a77ff97bec09dd5fcc043d8659d8ec5dfb87c2"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZDFhNTgyNTQ5YmM5ODJkNTVlMjQ1ODViMGJhMDZmOTJmMjFlOWRh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4d1a582549bc982d55e24585b0ba06f92f21e9da",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/4d1a582549bc982d55e24585b0ba06f92f21e9da",
      "tree": {
        "sha": "926a3e2d20a05a4ad93e33913310aec9a001a9fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/926a3e2d20a05a4ad93e33913310aec9a001a9fa"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f2a77ff97bec09dd5fcc043d8659d8ec5dfb87c2",
          "sha": "f2a77ff97bec09dd5fcc043d8659d8ec5dfb87c2",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f2a77ff97bec09dd5fcc043d8659d8ec5dfb87c2"
        }
      ],
      "message": "Call CaptureMessage at appropriate locations\n\nThese calls are toggled by a debug-only \"capturemessages\" flag.  Default\ndisabled.",
      "committer": {
        "name": "Troy Giorshev",
        "email": "troygiorshev@gmail.com",
        "date": "2021-01-23T20:58:42Z"
      },
      "author": {
        "name": "Troy Giorshev",
        "email": "troygiorshev@gmail.com",
        "date": "2020-07-13T18:00:03Z"
      },
      "sha": "4d1a582549bc982d55e24585b0ba06f92f21e9da"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNGYzNzhhNTA1OTIyYzBmNTQ0YjRjZmJmZGIxNjllODg0ZTAyYmU5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e4f378a505922c0f544b4cfbfdb169e884e02be9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/e4f378a505922c0f544b4cfbfdb169e884e02be9",
      "tree": {
        "sha": "a9a927c8b86d15682cdc37581febfd9562a960a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a9a927c8b86d15682cdc37581febfd9562a960a4"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4d1a582549bc982d55e24585b0ba06f92f21e9da",
          "sha": "4d1a582549bc982d55e24585b0ba06f92f21e9da",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/4d1a582549bc982d55e24585b0ba06f92f21e9da"
        }
      ],
      "message": "Add capture parser\n\nThis commit adds contrib/message-capture/message-capture-parser.py, a python\nscript to be used alongside -capturemessages to parse the captured\nmessages.\n\nIt is complete with arguments and will parse any file given, sorting the\nmessages in the files when creating the output.  If an output file is\nspecified with -o or --output, it will dump the messages in json format\nto that file, otherwise it will print to stdout.\n\nThe small change to the unused msg_generic is to bring it in line with\nthe other message classes, purely to avoid a bug in the future.",
      "committer": {
        "name": "Troy Giorshev",
        "email": "troygiorshev@gmail.com",
        "date": "2021-01-23T21:01:39Z"
      },
      "author": {
        "name": "Troy Giorshev",
        "email": "troygiorshev@gmail.com",
        "date": "2020-07-13T20:07:13Z"
      },
      "sha": "e4f378a505922c0f544b4cfbfdb169e884e02be9"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozODFmNzdiZTg1OGQ3NDE3MjA5YjZkZTBiN2NkMjNjYjdlYjk5MjYx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/381f77be858d7417209b6de0b7cd23cb7eb99261",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/381f77be858d7417209b6de0b7cd23cb7eb99261",
      "tree": {
        "sha": "a7c774d63fc48cb39ac6ed17be6c3e99c44bb5d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a7c774d63fc48cb39ac6ed17be6c3e99c44bb5d2"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e4f378a505922c0f544b4cfbfdb169e884e02be9",
          "sha": "e4f378a505922c0f544b4cfbfdb169e884e02be9",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/e4f378a505922c0f544b4cfbfdb169e884e02be9"
        }
      ],
      "message": "Add Message Capture Test\n\nAdd a functional test for CaptureMessage.  This connects and then\ndisconnects a peer so that the handshake can be used to check if capture\nis being done correctly.\n\nIncluded in a docstring in the test is the following:\n\nFrom the data file we'll only check the structure.\n\nWe won't care about things like:\n- Deserializing the payload of the message\n    - This is managed by the deserialize methods in\n      test_framework.messages\n- The order of the messages\n    - There's no reason why we can't, say, change the order of the\n      messages in the handshake\n- Message Type\n    - We can add new message types\n\nWe're ignoring these because they're simply too brittle to test here.",
      "committer": {
        "name": "Troy Giorshev",
        "email": "troygiorshev@gmail.com",
        "date": "2021-01-23T21:15:05Z"
      },
      "author": {
        "name": "Troy Giorshev",
        "email": "troygiorshev@gmail.com",
        "date": "2020-07-23T18:36:17Z"
      },
      "sha": "381f77be858d7417209b6de0b7cd23cb7eb99261"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZmY3YzY2ZTY3YWEyZjE4ZWY3MDEzOTMzODY0MzY1NmE1NDQ0NGZl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bff7c66e67aa2f18ef70139338643656a54444fe",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/bff7c66e67aa2f18ef70139338643656a54444fe",
      "tree": {
        "sha": "2835bfcb79d7c7908d92a130f1e8da385042bb28",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2835bfcb79d7c7908d92a130f1e8da385042bb28"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/381f77be858d7417209b6de0b7cd23cb7eb99261",
          "sha": "381f77be858d7417209b6de0b7cd23cb7eb99261",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/381f77be858d7417209b6de0b7cd23cb7eb99261"
        }
      ],
      "message": "Add documentation to contrib folder\n\nThis commit adds brief documentation for this feature.  Included in the\njustification is the purpose of this feature as well as usage and\nfunctionality tips.",
      "committer": {
        "name": "Troy Giorshev",
        "email": "troygiorshev@gmail.com",
        "date": "2021-01-23T21:15:05Z"
      },
      "author": {
        "name": "Troy Giorshev",
        "email": "troygiorshev@gmail.com",
        "date": "2020-10-13T11:38:59Z"
      },
      "sha": "bff7c66e67aa2f18ef70139338643656a54444fe"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4241921913,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDI0MTkyMTkxMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4241921913",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-23T21:16:10Z"
    },
    {
      "event": "commented",
      "id": 766180700,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc2NjE4MDcwMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/766180700",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-23T21:17:50Z",
      "updated_at": "2021-01-23T21:17:50Z",
      "author_association": "CONTRIBUTOR",
      "body": "`git range-diff master a17b250 bff7c66`\r\n\r\n* Message capture now more gracefully handles unrecognized and corrupted messages\r\n* Corrected typo in docs\r\n* Added comment to clarify how timestamps are being used here\r\n* A couple small improvements to the test\r\n\r\nThanks so much for the review everyone!\r\n\r\nUp soon: 1 file = 1 session",
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-766180700",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "commented",
      "id": 766330486,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc2NjMzMDQ4Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/766330486",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-24T11:14:58Z",
      "updated_at": "2021-01-24T11:14:58Z",
      "author_association": "MEMBER",
      "body": "re-ACK bff7c66e67aa2f18ef70139338643656a54444fe only some minor changes: ðŸ‘š\r\n\r\n* doc fixups\r\n* append messages in the python parser even when the msg type is unknown or something can not be decoded\r\n\r\n<details><summary>Show signature and timestamp</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nre-ACK bff7c66e67aa2f18ef70139338643656a54444fe only some minor changes: ðŸ‘š\r\n\r\n* doc fixups\r\n* append messages in the python parser even when the msg type is unknown or something can not be decoded\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUhNwgwAsIB9TNhIdWgBLKYoNkJpnwXmAPbL/OAR3t+csB3wjowlJQMz9UijiMPN\r\nH/EzFMGiWMQoDgfxBMewFNXtBetGBzdQHHO9kGk7S0uulqj4S6Tg1WAWrfSOPhbI\r\ncSDuE8XSsPXq1qEpVS5NiVjsB5IJiVyER7LqSEnMp/iemdpgCIWfvxiJzaJNXbkj\r\nijCLQ3+2D7TX/e+N8iyHyIBnC/NbTGp8fzim7AoRf6O42NFWy7CVmM2aSu5qpW5B\r\n7nxTuWff66xBAnGwCEOLgfbm3G96ZgBqXGrBXCfL5GNIVTqNTDblX08cfoyMLqdv\r\nInGH+Qdz1ObG7tqY3TRq88U8Jgl+qm1N4Yi63lg2LISAL7r/qwAeQcyk/JiEsN8g\r\n8cCVCLkTd3BPKsHb4O+ItsfLCg4xkqSPogLML+FjNj1ppDKxo/rPPrdV7Ss04lbo\r\n5f4UbCSI9WMLMS+v2ZYSASW/4CXVXKF/bgAjzxv3VYK90+ITKnIoQcBjOZv5myGc\r\nZkcqkx7K\r\n=FpGK\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n[Timestamp of file with hash `1aec4b471c3da64520ce75cb6750abae42d383f6093d1a0c1987e5b405b08997  -`](https://opentimestamps.org/info/?004f70656e54696d657374616d7073000050726f6f6600bf89e2e884e8929401081aec4b471c3da64520ce75cb6750abae42d383f6093d1a0c1987e5b405b08997f010ed000fb79e3d9792bd83c75276e67d8708fff0101c3c1b7447a654e253bfe4b2b388c24e08f120d1288561989a73084e325bdb543c21a177385af3181a39879ec230f60bbc0bad08f120259ceb048188758f76b2c4b7fced24fcc98738e8288077674740753e19e2bbd508f12011f25703e0326583336d7b54b5c464a9917eff8e853063c4cb29293ca85a6ff208f0208637c16b579b03823fd6b7236145c46b094f975b3c3c46fd1b03b9f73616fb1208f104600d5696f008c0ea01cc92b5d2c90083dfe30d2ef90c8e2e2d68747470733a2f2f616c6963652e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267fff0102f2b788d3ea97cdb8706c87025ef0beb08f120702532fc23145888a6f56e6c8855ecf11c939ad3a034f6333794ee5ddbc2dc0a08f120d3646ca389c547021f2b16e64edc6482502b9a7f55619d1326fc4197044e2acd08f104600d5696f008c5fe007d3c3c26fc0083dfe30d2ef90c8e2c2b68747470733a2f2f626f622e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267fff010d1456c29591f5bc44feae85438b6919f08f12095b5290ec43303fb8dac959291d477aefbebf57895a4f7afb51fa470cf223f0708f120f1c6d1d13d2c85fdccb106ad0a8e99c410019f9b76d96c69f3f6568981303b6208f0205ceddbf8b6c368f8438d1fa4d940938a6329b91bc43b5ce72ecc0d38fa186f8208f0206998052fe4ee5728b2e1385b9a9768b29746b270365e53712a2dbbb84d11c4be08f104600d5697f008ad27a1136a65e70a0083dfe30d2ef90c8e292868747470733a2f2f66696e6e65792e63616c656e6461722e657465726e69747977616c6c2e636f6df010e3b9c1408ea89f8d06096c5240f8e72f08f104600d5696f00822b449ea9c4f6fb60083dfe30d2ef90c8e232268747470733a2f2f6274632e63616c656e6461722e636174616c6c6178792e636f6d)\r\n\r\n</details>\r\n",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-766330486",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "commented",
      "id": 766352948,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc2NjM1Mjk0OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/766352948",
      "actor": {
        "login": "michaelfolkson",
        "id": 16323900,
        "node_id": "MDQ6VXNlcjE2MzIzOTAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/16323900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/michaelfolkson",
        "html_url": "https://github.com/michaelfolkson",
        "followers_url": "https://api.github.com/users/michaelfolkson/followers",
        "following_url": "https://api.github.com/users/michaelfolkson/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/michaelfolkson/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/michaelfolkson/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/michaelfolkson/subscriptions",
        "organizations_url": "https://api.github.com/users/michaelfolkson/orgs",
        "repos_url": "https://api.github.com/users/michaelfolkson/repos",
        "events_url": "https://api.github.com/users/michaelfolkson/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/michaelfolkson/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-24T14:01:56Z",
      "updated_at": "2021-01-24T14:01:56Z",
      "author_association": "CONTRIBUTOR",
      "body": "Still need to do **a lot** of playing around with this. Interested if you have given any thought @troygiorshev on what questions this tool can easily answer (without additional digging) and what is possible for future improvements/future PRs. Don't want to derail review of this PR though so set up a StackExchange [question](https://bitcoin.stackexchange.com/questions/101799/how-can-i-obtain-a-better-understanding-of-the-p2p-messages-between-my-full-node).",
      "user": {
        "login": "michaelfolkson",
        "id": 16323900,
        "node_id": "MDQ6VXNlcjE2MzIzOTAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/16323900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/michaelfolkson",
        "html_url": "https://github.com/michaelfolkson",
        "followers_url": "https://api.github.com/users/michaelfolkson/followers",
        "following_url": "https://api.github.com/users/michaelfolkson/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/michaelfolkson/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/michaelfolkson/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/michaelfolkson/subscriptions",
        "organizations_url": "https://api.github.com/users/michaelfolkson/orgs",
        "repos_url": "https://api.github.com/users/michaelfolkson/repos",
        "events_url": "https://api.github.com/users/michaelfolkson/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/michaelfolkson/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-766352948",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "mentioned",
      "id": 4242532712,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDI0MjUzMjcxMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4242532712",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-24T14:01:56Z"
    },
    {
      "event": "subscribed",
      "id": 4242532713,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQyNDI1MzI3MTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4242532713",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-24T14:01:56Z"
    },
    {
      "event": "reviewed",
      "id": 577620719,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc3NjIwNzE5",
      "url": null,
      "actor": null,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "re-ACK bff7c66e67aa2f18ef70139338643656a54444fe\r\nVerified that the error handling code that was introduced since my last ACK works, by corrupting a message-type in the middle of a random capture file (with a hex editor) and diffing the json outputs of the original and corrupted captures:\r\n\r\ns/sendcmpct/sendcmpcx/\r\n```diff\r\n53,57c53,55\r\n<     \"msgtype\": \"sendcmpct\",\r\n<     \"body\": {\r\n<       \"announce\": false,\r\n<       \"version\": 2\r\n<     }\r\n---\r\n>     \"msgtype\": \"sendcmpcx\",\r\n>     \"body\": \"000200000000000000\",\r\n>     \"error\": \"Unrecognized message type.\"\r\n```\r\n\r\ns/sendcmpct/<random_unprintable_gibberish>\r\n```diff\r\n<     \"msgtype\": \"sendcmpct\",\r\n<     \"body\": {\r\n<       \"announce\": false,\r\n<       \"version\": 2\r\n<     }\r\n---\r\n>     \"msgtype\": \"UNREADABLE\",\r\n>     \"body\": \"000200000000000000\",\r\n>     \"error\": \"Unrecognized message type.\"\r\n```",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#pullrequestreview-577620719",
      "submitted_at": "2021-01-27T18:08:55Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
    },
    {
      "event": "commented",
      "id": 771530227,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc3MTUzMDIyNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/771530227",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-02T10:18:39Z",
      "updated_at": "2021-02-02T10:18:39Z",
      "author_association": "MEMBER",
      "body": "The nit here can be addressed, once you have to rebase: https://github.com/bitcoin/bitcoin/pull/19509#discussion_r562515326",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-771530227",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "commented",
      "id": 771574041,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc3MTU3NDA0MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/771574041",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-02T11:35:17Z",
      "updated_at": "2021-02-02T11:35:17Z",
      "author_association": "MEMBER",
      "body": "> Up soon: 1 file = 1 session\r\n\r\n@troygiorshev Are you still planning to do this? ",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-771574041",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "mentioned",
      "id": 4278806745,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDI3ODgwNjc0NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4278806745",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-02T11:35:17Z"
    },
    {
      "event": "subscribed",
      "id": 4278806748,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQyNzg4MDY3NDg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4278806748",
      "actor": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-02T11:35:17Z"
    },
    {
      "event": "commented",
      "id": 771587318,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc3MTU4NzMxOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/771587318",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-02T12:01:24Z",
      "updated_at": "2021-02-02T12:01:24Z",
      "author_association": "MEMBER",
      "body": "utACK bff7c66e67aa2f18ef70139338643656a54444fe\r\n\r\nThis isn't part of the public interface, so the file layout can be changed in a follow-up.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-771587318",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "merged",
      "id": 4278964242,
      "node_id": "MDExOk1lcmdlZEV2ZW50NDI3ODk2NDI0Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4278964242",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "384e090f9345c07fa81ccafa8cd36037f3cd0813",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/384e090f9345c07fa81ccafa8cd36037f3cd0813",
      "created_at": "2021-02-02T12:12:36Z"
    },
    {
      "event": "closed",
      "id": 4278964248,
      "node_id": "MDExOkNsb3NlZEV2ZW50NDI3ODk2NDI0OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4278964248",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-02T12:12:36Z"
    },
    {
      "event": "referenced",
      "id": 4282554961,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQyODI1NTQ5NjE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4282554961",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "7b0f33697b332cc8665ed29edf42c04d38510960",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/7b0f33697b332cc8665ed29edf42c04d38510960",
      "created_at": "2021-02-03T01:10:13Z"
    },
    {
      "event": "reviewed",
      "id": 584895703,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTg0ODk1NzAz",
      "url": null,
      "actor": null,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "flack",
        "id": 425166,
        "node_id": "MDQ6VXNlcjQyNTE2Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/425166?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/flack",
        "html_url": "https://github.com/flack",
        "followers_url": "https://api.github.com/users/flack/followers",
        "following_url": "https://api.github.com/users/flack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/flack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/flack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/flack/subscriptions",
        "organizations_url": "https://api.github.com/users/flack/orgs",
        "repos_url": "https://api.github.com/users/flack/repos",
        "events_url": "https://api.github.com/users/flack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/flack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#pullrequestreview-584895703",
      "submitted_at": "2021-02-06T16:26:49Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
    },
    {
      "event": "commented",
      "id": 776502093,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc3NjUwMjA5Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/776502093",
      "actor": {
        "login": "leonardojobim",
        "id": 2694753,
        "node_id": "MDQ6VXNlcjI2OTQ3NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2694753?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/leonardojobim",
        "html_url": "https://github.com/leonardojobim",
        "followers_url": "https://api.github.com/users/leonardojobim/followers",
        "following_url": "https://api.github.com/users/leonardojobim/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/leonardojobim/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/leonardojobim/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/leonardojobim/subscriptions",
        "organizations_url": "https://api.github.com/users/leonardojobim/orgs",
        "repos_url": "https://api.github.com/users/leonardojobim/repos",
        "events_url": "https://api.github.com/users/leonardojobim/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/leonardojobim/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-10T07:21:02Z",
      "updated_at": "2021-02-10T19:58:17Z",
      "author_association": "NONE",
      "body": "I ran the message-capture-parser.py and received the following error:\r\n\r\n```\r\nError:\r\nTraceback (most recent call last):\r\n  File \"./message-capture-parser.py\", line 214, in <module>\r\n    main()\r\n  File \"./message-capture-parser.py\", line 199, in main\r\n    process_file(str(capture), messages, \"recv\" in capture.stem, progress_bar)\r\n  File \"./message-capture-parser.py\", line 159, in process_file\r\n    msg_dict[\"body\"] = to_jsonable(msg)\r\n  File \"./message-capture-parser.py\", line 82, in to_jsonable\r\n    elif slot in HASH_INT_VECTORS and isinstance(val[0], int):\r\nIndexError: list index out of range\r\n```\r\n\r\nSo I changed the line 82\r\n`elif slot in HASH_INT_VECTORS and isinstance(val[0], int):`\r\nto\r\n`elif isinstance(val, list) and len(val) > 0 and slot in HASH_INT_VECTORS and isinstance(val[0], int):`\r\n\r\nThe script worked after this change.\r\n\r\nThe reason of the error is the _val_ variable had the value [] and when accessing _val[0]_ the script crashed.\r\nThe error happened with following values for the msgtype and for the type of the obj variable (in to_jsonable() function):\r\n\r\n```\r\nmsgtype: 'tx'       - obj type: <class 'test_framework.messages.CTxWitness'> \r\nmsgtype: 'headers'  - obj type: <class 'test_framework.messages.msg_headers'>,\r\nmsgtype: 'blocktxn' - obj type: <class 'test_framework.messages.CTxWitness'> \r\nmsgtype: 'block'    - obj type: <class 'test_framework.messages.CTxWitness'>\r\n```\r\n\r\nI tested it on Ubuntu 20.04 on VMWare.\r\nThe command used was `./message-capture-parser.py -o out2.json ~/.bitcoin/message_capture/**/*.dat`\r\n",
      "user": {
        "login": "leonardojobim",
        "id": 2694753,
        "node_id": "MDQ6VXNlcjI2OTQ3NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2694753?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/leonardojobim",
        "html_url": "https://github.com/leonardojobim",
        "followers_url": "https://api.github.com/users/leonardojobim/followers",
        "following_url": "https://api.github.com/users/leonardojobim/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/leonardojobim/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/leonardojobim/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/leonardojobim/subscriptions",
        "organizations_url": "https://api.github.com/users/leonardojobim/orgs",
        "repos_url": "https://api.github.com/users/leonardojobim/repos",
        "events_url": "https://api.github.com/users/leonardojobim/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/leonardojobim/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-776502093",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "referenced",
      "id": 4340115073,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQzNDAxMTUwNzM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4340115073",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "69f7f50aa5b799613666ed9b007c674d096a651b",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69f7f50aa5b799613666ed9b007c674d096a651b",
      "created_at": "2021-02-17T08:38:11Z"
    },
    {
      "event": "commented",
      "id": 781252090,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc4MTI1MjA5MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/781252090",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-18T10:42:33Z",
      "updated_at": "2021-02-18T10:42:33Z",
      "author_association": "MEMBER",
      "body": "Nice find @leonardojobim! You could also test for the list's non-emptiness by checking its booleanness, which is maybe more pythonic:\r\n\r\n```python\r\nelif isinstance(val, list) and val and slot in HASH_INT_VECTORS and isinstance(val[0], int):\r\n```\r\n\r\nDo you mind opening a PR for this?",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-781252090",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19509"
    },
    {
      "event": "mentioned",
      "id": 4346051033,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDM0NjA1MTAzMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4346051033",
      "actor": {
        "login": "leonardojobim",
        "id": 2694753,
        "node_id": "MDQ6VXNlcjI2OTQ3NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2694753?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/leonardojobim",
        "html_url": "https://github.com/leonardojobim",
        "followers_url": "https://api.github.com/users/leonardojobim/followers",
        "following_url": "https://api.github.com/users/leonardojobim/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/leonardojobim/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/leonardojobim/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/leonardojobim/subscriptions",
        "organizations_url": "https://api.github.com/users/leonardojobim/orgs",
        "repos_url": "https://api.github.com/users/leonardojobim/repos",
        "events_url": "https://api.github.com/users/leonardojobim/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/leonardojobim/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-18T10:42:33Z"
    },
    {
      "event": "subscribed",
      "id": 4346051040,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQzNDYwNTEwNDA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4346051040",
      "actor": {
        "login": "leonardojobim",
        "id": 2694753,
        "node_id": "MDQ6VXNlcjI2OTQ3NTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2694753?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/leonardojobim",
        "html_url": "https://github.com/leonardojobim",
        "followers_url": "https://api.github.com/users/leonardojobim/followers",
        "following_url": "https://api.github.com/users/leonardojobim/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/leonardojobim/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/leonardojobim/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/leonardojobim/subscriptions",
        "organizations_url": "https://api.github.com/users/leonardojobim/orgs",
        "repos_url": "https://api.github.com/users/leonardojobim/repos",
        "events_url": "https://api.github.com/users/leonardojobim/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/leonardojobim/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-18T10:42:33Z"
    },
    {
      "event": "referenced",
      "id": 7845017333,
      "node_id": "REFE_lADOABII584nHeCOzwAAAAHTmXb1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7845017333",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "cfcf6bb92f46e7473dc187d097a7945eb645178c",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/cfcf6bb92f46e7473dc187d097a7945eb645178c",
      "created_at": "2022-11-18T15:36:43Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454153812",
      "pull_request_review_id": 447849752,
      "id": 454153812,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE1MzgxMg==",
      "diff_hunk": "@@ -0,0 +1,91 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Parse message log binary files.  To be used in conjunction with -logmessages.\"\"\"\n+\n+import argparse\n+import sys\n+from io import BytesIO\n+import json\n+from pathlib import Path\n+from typing import Any, List\n+\n+sys.path.append('test/functional')\n+\n+from test_framework.mininode import MESSAGEMAP\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+COMMAND_SIZE = 12\n+\n+def to_jsonable(obj: Any) -> Any:\n+    ret = {}\n+    # The msg objects don't generally include \"msgtype\" in their __slots__\n+    if hasattr(obj, \"msgtype\"):\n+        ret[\"msgtype\"] = getattr(obj, \"msgtype\", None).decode()\n+    if hasattr(obj, \"__dict__\"):\n+        ret = obj.__dict__\n+    elif hasattr(obj, \"__slots__\"):\n+        for slot in obj.__slots__:\n+            val = getattr(obj, slot, None)\n+            ret[slot] = to_jsonable(val)\n+    elif isinstance(obj, list):\n+        ret = [to_jsonable(a) for a in obj]\n+    elif isinstance(obj, bytes):\n+        ret = obj.hex()\n+    else:\n+        ret = obj\n+    return ret\n+\n+\n+def process_file(path: Path, messages: List[Any], recv: bool) -> None:\n+    with open(path, 'rb') as f_in:\n+        while True:\n+            tmp_header = f_in.read(TIME_SIZE + LENGTH_SIZE + COMMAND_SIZE)\n+            if not tmp_header:\n+                break\n+            tmp_header = BytesIO(tmp_header)\n+            time = int.from_bytes(tmp_header.read(TIME_SIZE), \"little\") # type: int\n+            command = tmp_header.read(COMMAND_SIZE).split(b'\\x00', 1)[0]  # type: bytes\n+            length = int.from_bytes(tmp_header.read(LENGTH_SIZE), \"little\") # type: int\n+            if command not in MESSAGEMAP:\n+                continue    # For now just skip unrecognized messages\n+            msg = MESSAGEMAP[command]()\n+            msg.deserialize(f_in)\n+            msg_dict = to_jsonable(msg)\n+            msg_dict[\"time\"] = time\n+            msg_dict[\"length\"] = length\n+            msg_dict[\"recv\"] = recv\n+            messages.append(msg_dict)\n+\n+\n+def main():\n+    \"\"\"Main\"\"\"\n+    parser = argparse.ArgumentParser(\n+        description=__doc__,\n+        epilog=\"EXAMPLE \\n\\tpython contrib/peer-logging/peer-logging-parser.py -o out.json <data-dir>/peer_logging/**/*.dat\",",
      "path": "contrib/peer-logging/peer-logging-parser.py",
      "position": null,
      "original_position": 67,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "dc393b30e97f743c1e58ce94051c4f4f918beb70",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think it is needed in python to duplicate how the script was called in the help.\r\n\r\n```suggestion\r\n        epilog=\"EXAMPLE \\n\\t{sys.argv[0]} -o out.json <data-dir>/peer_logging/**/*.dat\",\r\n```\r\n\r\nIn case you wanted to do this because the import (` sys.path.append('test/functional')`) is relative to the pwd, you could make it relative to this file, which would be more stable.\r\n\r\nAlso, a test wouldn't hurt.",
      "created_at": "2020-07-14T07:19:41Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r454153812",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454153812"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454163465",
      "pull_request_review_id": 447861896,
      "id": 454163465,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE2MzQ2NQ==",
      "diff_hunk": "@@ -3636,6 +3636,10 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     }\n     CNetMessage& msg(msgs.front());\n \n+    std::vector<unsigned char> tmp(msg.m_recv.data(), msg.m_recv.data() + msg.m_recv.size());\n+    if (gArgs.IsArgSet(\"-dumpmessages\"))",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "38c6f10d5c0c21818c934f5f265890909abd1ec2",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "\"dumpmessages\"?",
      "created_at": "2020-07-14T07:38:12Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r454163465",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454163465"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3640,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454189508",
      "pull_request_review_id": 447894982,
      "id": 454189508,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE4OTUwOA==",
      "diff_hunk": "@@ -2865,3 +2867,25 @@ uint64_t CConnman::CalculateKeyedNetGroup(const CAddress& ad) const\n \n     return GetDeterministicRandomizer(RANDOMIZER_ID_NETGROUP).Write(vchNetGroup.data(), vchNetGroup.size()).Finalize();\n }\n+\n+void LogMessage(CNode* node, std::string& command, std::vector<unsigned char>& data, bool is_incoming)\n+{\n+    int64_t time = GetTimeMicros();\n+\n+    fs::path base_path = GetDataDir() / \"peer_logging\" / node->addr.ToString();\n+    boost::filesystem::create_directories(base_path);",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "dc393b30e97f743c1e58ce94051c4f4f918beb70",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "use `fs::create_directories` (which is currently just an alias for boost::filesystem`, but means that the std filesystem can be substituted in when we upgrade our c++ version.",
      "created_at": "2020-07-14T08:25:32Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r454189508",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454189508"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2876,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454189846",
      "pull_request_review_id": 447894982,
      "id": 454189846,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE4OTg0Ng==",
      "diff_hunk": "@@ -2865,3 +2867,25 @@ uint64_t CConnman::CalculateKeyedNetGroup(const CAddress& ad) const\n \n     return GetDeterministicRandomizer(RANDOMIZER_ID_NETGROUP).Write(vchNetGroup.data(), vchNetGroup.size()).Finalize();\n }\n+\n+void LogMessage(CNode* node, std::string& command, std::vector<unsigned char>& data, bool is_incoming)\n+{\n+    int64_t time = GetTimeMicros();\n+\n+    fs::path base_path = GetDataDir() / \"peer_logging\" / node->addr.ToString();\n+    boost::filesystem::create_directories(base_path);",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "dc393b30e97f743c1e58ce94051c4f4f918beb70",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Does this mean we try to create the directory every time we send/receive a message? Is that a problem?",
      "created_at": "2020-07-14T08:26:09Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r454189846",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454189846"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2876,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454190521",
      "pull_request_review_id": 447894982,
      "id": 454190521,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE5MDUyMQ==",
      "diff_hunk": "@@ -3636,6 +3636,10 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     }\n     CNetMessage& msg(msgs.front());\n \n+    std::vector<unsigned char> tmp(msg.m_recv.data(), msg.m_recv.data() + msg.m_recv.size());\n+    if (gArgs.IsArgSet(\"-dumpmessages\"))\n+        LogMessage(pfrom, msg.m_command, tmp, true);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "dc393b30e97f743c1e58ce94051c4f4f918beb70",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Can this logic be moved to `ReceiveMsgBytes` so that all the message dumping is contained within the net layer?",
      "created_at": "2020-07-14T08:27:21Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r454190521",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454190521"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3641,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454288639",
      "pull_request_review_id": 448020557,
      "id": 454288639,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDI4ODYzOQ==",
      "diff_hunk": "@@ -3636,6 +3636,10 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     }\n     CNetMessage& msg(msgs.front());\n \n+    std::vector<unsigned char> tmp(msg.m_recv.data(), msg.m_recv.data() + msg.m_recv.size());\n+    if (gArgs.IsArgSet(\"-dumpmessages\"))",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "38c6f10d5c0c21818c934f5f265890909abd1ec2",
      "in_reply_to_id": 454163465,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ah thanks fixed!",
      "created_at": "2020-07-14T11:28:35Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r454288639",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454288639"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3640,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454466665",
      "pull_request_review_id": 448247139,
      "id": 454466665,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ2NjY2NQ==",
      "diff_hunk": "@@ -3636,6 +3636,10 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     }\n     CNetMessage& msg(msgs.front());\n \n+    std::vector<unsigned char> tmp(msg.m_recv.data(), msg.m_recv.data() + msg.m_recv.size());\n+    if (gArgs.IsArgSet(\"-dumpmessages\"))\n+        LogMessage(pfrom, msg.m_command, tmp, true);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "dc393b30e97f743c1e58ce94051c4f4f918beb70",
      "in_reply_to_id": 454190521,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes!  It's unfortunate that we have some MessageHandler code in net.cpp.  Right now all of the logging is done is done in MessageHandler, I think we should keep it that way.  It would be nice to move PushMessage to net_processing some day.",
      "created_at": "2020-07-14T16:01:25Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r454466665",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454466665"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3641,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454484398",
      "pull_request_review_id": 448269477,
      "id": 454484398,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ4NDM5OA==",
      "diff_hunk": "@@ -2865,3 +2867,25 @@ uint64_t CConnman::CalculateKeyedNetGroup(const CAddress& ad) const\n \n     return GetDeterministicRandomizer(RANDOMIZER_ID_NETGROUP).Write(vchNetGroup.data(), vchNetGroup.size()).Finalize();\n }\n+\n+void LogMessage(CNode* node, std::string& command, std::vector<unsigned char>& data, bool is_incoming)",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "cf5966a76f136d1ca7a986d6ca11808047a812c6",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nvoid LogMessage(const CNode& node, const std::string& command, const std::vector<unsigned char>& data, bool is_incoming)\r\n```\r\n\r\nRationale: [F.15: Prefer simple and conventional ways of passing information ](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rf-conventional) (C++ Core Guidlines) :)",
      "created_at": "2020-07-14T16:28:11Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r454484398",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454484398"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2871,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454512068",
      "pull_request_review_id": 448303477,
      "id": 454512068,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUxMjA2OA==",
      "diff_hunk": "@@ -3636,6 +3636,10 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     }\n     CNetMessage& msg(msgs.front());\n \n+    std::vector<unsigned char> tmp(msg.m_recv.data(), msg.m_recv.data() + msg.m_recv.size());\n+    if (gArgs.IsArgSet(\"-dumpmessages\"))\n+        LogMessage(pfrom, msg.m_command, tmp, true);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "dc393b30e97f743c1e58ce94051c4f4f918beb70",
      "in_reply_to_id": 454190521,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, you're right. Even though PushMessage is in net.cpp, it's always executed on the MessageHandler thread.",
      "created_at": "2020-07-14T17:11:49Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r454512068",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454512068"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3641,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454516050",
      "pull_request_review_id": 448269477,
      "id": 454516050,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUxNjA1MA==",
      "diff_hunk": "@@ -2865,3 +2867,25 @@ uint64_t CConnman::CalculateKeyedNetGroup(const CAddress& ad) const\n \n     return GetDeterministicRandomizer(RANDOMIZER_ID_NETGROUP).Write(vchNetGroup.data(), vchNetGroup.size()).Finalize();\n }\n+\n+void LogMessage(CNode* node, std::string& command, std::vector<unsigned char>& data, bool is_incoming)\n+{\n+    int64_t time = GetTimeMicros();\n+\n+    fs::path base_path = GetDataDir() / \"peer_logging\" / node->addr.ToString();\n+    boost::filesystem::create_directories(base_path);\n+\n+    fs::path path = base_path / (is_incoming ? \"msgs_recv.dat\" : \"msgs_sent.dat\");\n+    std::ofstream f(path.c_str(), std::ios::binary | std::ios::out | std::ios::app);\n+\n+    f.write((char *) &time, sizeof(time));\n+    f << command.data();\n+    for (int i = command.length(); i < CMessageHeader::COMMAND_SIZE; ++i){\n+        f << '\\0';\n+    }\n+    uint32_t size = data.size();\n+    f.write((char *) &size, sizeof(size));\n+    for (auto i : data){\n+        f << i;\n+    }",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 33,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "cf5966a76f136d1ca7a986d6ca11808047a812c6",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    f.write((const char*)data.data(), data.size());\r\n```",
      "created_at": "2020-07-14T17:18:25Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r454516050",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454516050"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": 2888,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2890,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454516500",
      "pull_request_review_id": 448269477,
      "id": 454516500,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUxNjUwMA==",
      "diff_hunk": "@@ -1004,4 +1004,6 @@ inline std::chrono::microseconds PoissonNextSend(std::chrono::microseconds now,\n     return std::chrono::microseconds{PoissonNextSend(now.count(), average_interval.count())};\n }\n \n+void LogMessage(CNode* node, std::string& command, std::vector<unsigned char>& data, bool is_incoming);",
      "path": "src/net.h",
      "position": null,
      "original_position": 4,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "cf5966a76f136d1ca7a986d6ca11808047a812c6",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nvoid LogMessage(const CNode& node, const std::string& command, const std::vector<unsigned char>& data, bool is_incoming);\r\n```",
      "created_at": "2020-07-14T17:19:11Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r454516500",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454516500"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1007,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454516814",
      "pull_request_review_id": 448269477,
      "id": 454516814,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUxNjgxNA==",
      "diff_hunk": "@@ -3636,6 +3636,10 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     }\n     CNetMessage& msg(msgs.front());\n \n+    std::vector<unsigned char> tmp(msg.m_recv.data(), msg.m_recv.data() + msg.m_recv.size());",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "cf5966a76f136d1ca7a986d6ca11808047a812c6",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The scope of `tmp` can be limited to the `gArgs.IsArgSet(\"-logmessages\")` case below.\r\n\r\n(Or perhaps skip introducing a new variable - the name `tmp` really doesn't add any information to the reader.)",
      "created_at": "2020-07-14T17:19:41Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r454516814",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454516814"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3639,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454525647",
      "pull_request_review_id": 448269477,
      "id": 454525647,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUyNTY0Nw==",
      "diff_hunk": "@@ -2865,3 +2867,25 @@ uint64_t CConnman::CalculateKeyedNetGroup(const CAddress& ad) const\n \n     return GetDeterministicRandomizer(RANDOMIZER_ID_NETGROUP).Write(vchNetGroup.data(), vchNetGroup.size()).Finalize();\n }\n+\n+void LogMessage(CNode* node, std::string& command, std::vector<unsigned char>& data, bool is_incoming)\n+{\n+    int64_t time = GetTimeMicros();\n+\n+    fs::path base_path = GetDataDir() / \"peer_logging\" / node->addr.ToString();\n+    boost::filesystem::create_directories(base_path);\n+\n+    fs::path path = base_path / (is_incoming ? \"msgs_recv.dat\" : \"msgs_sent.dat\");\n+    std::ofstream f(path.c_str(), std::ios::binary | std::ios::out | std::ios::app);",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "cf5966a76f136d1ca7a986d6ca11808047a812c6",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Could use `CAutoFile` instead (which provides proper serialization automatically)?\r\n\r\nNo need for `c_str()` here :)",
      "created_at": "2020-07-14T17:33:50Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r454525647",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454525647"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2879,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454531068",
      "pull_request_review_id": 448269477,
      "id": 454531068,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUzMTA2OA==",
      "diff_hunk": "@@ -2865,3 +2867,25 @@ uint64_t CConnman::CalculateKeyedNetGroup(const CAddress& ad) const\n \n     return GetDeterministicRandomizer(RANDOMIZER_ID_NETGROUP).Write(vchNetGroup.data(), vchNetGroup.size()).Finalize();\n }\n+\n+void LogMessage(CNode* node, std::string& command, std::vector<unsigned char>& data, bool is_incoming)\n+{\n+    int64_t time = GetTimeMicros();",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "cf5966a76f136d1ca7a986d6ca11808047a812c6",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: Could be introduced when needed?\r\n\r\nRationale: [ES.21: Donâ€™t introduce a variable (or constant) before you need to use it](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-introduce) (C++ Core Guidelines) :)",
      "created_at": "2020-07-14T17:42:24Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r454531068",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454531068"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2870,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454586940",
      "pull_request_review_id": 448394427,
      "id": 454586940,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU4Njk0MA==",
      "diff_hunk": "@@ -2865,3 +2867,25 @@ uint64_t CConnman::CalculateKeyedNetGroup(const CAddress& ad) const\n \n     return GetDeterministicRandomizer(RANDOMIZER_ID_NETGROUP).Write(vchNetGroup.data(), vchNetGroup.size()).Finalize();\n }\n+\n+void LogMessage(CNode* node, std::string& command, std::vector<unsigned char>& data, bool is_incoming)\n+{\n+    int64_t time = GetTimeMicros();\n+\n+    fs::path base_path = GetDataDir() / \"peer_logging\" / node->addr.ToString();\n+    boost::filesystem::create_directories(base_path);",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "dc393b30e97f743c1e58ce94051c4f4f918beb70",
      "in_reply_to_id": 454189508,
      "user": {
        "login": "Saibato",
        "id": 34917548,
        "node_id": "MDQ6VXNlcjM0OTE3NTQ4",
        "avatar_url": "https://avatars.githubusercontent.com/u/34917548?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Saibato",
        "html_url": "https://github.com/Saibato",
        "followers_url": "https://api.github.com/users/Saibato/followers",
        "following_url": "https://api.github.com/users/Saibato/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Saibato/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Saibato/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Saibato/subscriptions",
        "organizations_url": "https://api.github.com/users/Saibato/orgs",
        "repos_url": "https://api.github.com/users/Saibato/repos",
        "events_url": "https://api.github.com/users/Saibato/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Saibato/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit. If if log messages where enabled  by` -logmessages=<LogMessageDir> `not empty\r\nwe would have a separate LogMessagesDir , instead of logging in DataDir by default. And DataDir should be always <> LogDir.imho. see   #19419  ",
      "created_at": "2020-07-14T19:18:41Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r454586940",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/454586940"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2876,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456432065",
      "pull_request_review_id": 450643906,
      "id": 456432065,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQzMjA2NQ==",
      "diff_hunk": "@@ -2865,3 +2867,25 @@ uint64_t CConnman::CalculateKeyedNetGroup(const CAddress& ad) const\n \n     return GetDeterministicRandomizer(RANDOMIZER_ID_NETGROUP).Write(vchNetGroup.data(), vchNetGroup.size()).Finalize();\n }\n+\n+void LogMessage(CNode* node, std::string& command, std::vector<unsigned char>& data, bool is_incoming)\n+{\n+    int64_t time = GetTimeMicros();\n+\n+    fs::path base_path = GetDataDir() / \"peer_logging\" / node->addr.ToString();\n+    boost::filesystem::create_directories(base_path);",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "dc393b30e97f743c1e58ce94051c4f4f918beb70",
      "in_reply_to_id": 454189846,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is ok.  As per the boost docs: \"Creation failure because [base_path] resolves to an existing directory shall not be treated as an error.\"",
      "created_at": "2020-07-17T13:11:13Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r456432065",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456432065"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2876,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456464413",
      "pull_request_review_id": 450686601,
      "id": 456464413,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ2NDQxMw==",
      "diff_hunk": "@@ -2865,3 +2867,25 @@ uint64_t CConnman::CalculateKeyedNetGroup(const CAddress& ad) const\n \n     return GetDeterministicRandomizer(RANDOMIZER_ID_NETGROUP).Write(vchNetGroup.data(), vchNetGroup.size()).Finalize();\n }\n+\n+void LogMessage(CNode* node, std::string& command, std::vector<unsigned char>& data, bool is_incoming)\n+{\n+    int64_t time = GetTimeMicros();\n+\n+    fs::path base_path = GetDataDir() / \"peer_logging\" / node->addr.ToString();\n+    boost::filesystem::create_directories(base_path);",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "dc393b30e97f743c1e58ce94051c4f4f918beb70",
      "in_reply_to_id": 454189846,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I can't imagine this is a performance hit, but if anyone is worried I guess this could be moved to the CNode's constructor.  I would want to first be really sure that a node's address won't ever change.",
      "created_at": "2020-07-17T14:06:06Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r456464413",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456464413"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2876,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456978790",
      "pull_request_review_id": 451187565,
      "id": 456978790,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk3ODc5MA==",
      "diff_hunk": "@@ -2865,3 +2867,25 @@ uint64_t CConnman::CalculateKeyedNetGroup(const CAddress& ad) const\n \n     return GetDeterministicRandomizer(RANDOMIZER_ID_NETGROUP).Write(vchNetGroup.data(), vchNetGroup.size()).Finalize();\n }\n+\n+void LogMessage(CNode* node, std::string& command, std::vector<unsigned char>& data, bool is_incoming)\n+{\n+    int64_t time = GetTimeMicros();\n+\n+    fs::path base_path = GetDataDir() / \"peer_logging\" / node->addr.ToString();\n+    boost::filesystem::create_directories(base_path);",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "dc393b30e97f743c1e58ce94051c4f4f918beb70",
      "in_reply_to_id": 454189508,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> \r\n> \r\n> Nit. If if log messages where enabled by`-logmessages=<LogMessageDir>`not empty\r\n> we would have a separate LogMessagesDir , instead of logging in DataDir by default. And DataDir should be always <> LogDir.imho. see #19419\r\n\r\nI'll consider this, having the log directory configurable would be nice.",
      "created_at": "2020-07-20T00:51:12Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r456978790",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456978790"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2876,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456998242",
      "pull_request_review_id": 451255367,
      "id": 456998242,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODI0Mg==",
      "diff_hunk": "@@ -2865,3 +2867,25 @@ uint64_t CConnman::CalculateKeyedNetGroup(const CAddress& ad) const\n \n     return GetDeterministicRandomizer(RANDOMIZER_ID_NETGROUP).Write(vchNetGroup.data(), vchNetGroup.size()).Finalize();\n }\n+\n+void LogMessage(CNode* node, std::string& command, std::vector<unsigned char>& data, bool is_incoming)",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "cf5966a76f136d1ca7a986d6ca11808047a812c6",
      "in_reply_to_id": 454484398,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "thanks :)",
      "created_at": "2020-07-20T02:36:52Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r456998242",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456998242"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2871,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456998332",
      "pull_request_review_id": 451255566,
      "id": 456998332,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODMzMg==",
      "diff_hunk": "@@ -2865,3 +2867,25 @@ uint64_t CConnman::CalculateKeyedNetGroup(const CAddress& ad) const\n \n     return GetDeterministicRandomizer(RANDOMIZER_ID_NETGROUP).Write(vchNetGroup.data(), vchNetGroup.size()).Finalize();\n }\n+\n+void LogMessage(CNode* node, std::string& command, std::vector<unsigned char>& data, bool is_incoming)\n+{\n+    int64_t time = GetTimeMicros();\n+\n+    fs::path base_path = GetDataDir() / \"peer_logging\" / node->addr.ToString();\n+    boost::filesystem::create_directories(base_path);\n+\n+    fs::path path = base_path / (is_incoming ? \"msgs_recv.dat\" : \"msgs_sent.dat\");\n+    std::ofstream f(path.c_str(), std::ios::binary | std::ios::out | std::ios::app);",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "cf5966a76f136d1ca7a986d6ca11808047a812c6",
      "in_reply_to_id": 454525647,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks for suggesting this, `CAutoFile` is much nicer",
      "created_at": "2020-07-20T02:37:11Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r456998332",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456998332"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2879,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456998405",
      "pull_request_review_id": 451255673,
      "id": 456998405,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODQwNQ==",
      "diff_hunk": "@@ -2865,3 +2867,25 @@ uint64_t CConnman::CalculateKeyedNetGroup(const CAddress& ad) const\n \n     return GetDeterministicRandomizer(RANDOMIZER_ID_NETGROUP).Write(vchNetGroup.data(), vchNetGroup.size()).Finalize();\n }\n+\n+void LogMessage(CNode* node, std::string& command, std::vector<unsigned char>& data, bool is_incoming)\n+{\n+    int64_t time = GetTimeMicros();\n+\n+    fs::path base_path = GetDataDir() / \"peer_logging\" / node->addr.ToString();\n+    boost::filesystem::create_directories(base_path);\n+\n+    fs::path path = base_path / (is_incoming ? \"msgs_recv.dat\" : \"msgs_sent.dat\");\n+    std::ofstream f(path.c_str(), std::ios::binary | std::ios::out | std::ios::app);\n+\n+    f.write((char *) &time, sizeof(time));\n+    f << command.data();\n+    for (int i = command.length(); i < CMessageHeader::COMMAND_SIZE; ++i){\n+        f << '\\0';\n+    }\n+    uint32_t size = data.size();\n+    f.write((char *) &size, sizeof(size));\n+    for (auto i : data){\n+        f << i;\n+    }",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 33,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "cf5966a76f136d1ca7a986d6ca11808047a812c6",
      "in_reply_to_id": 454516050,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2020-07-20T02:37:23Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r456998405",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456998405"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": 2888,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2890,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456998477",
      "pull_request_review_id": 451255883,
      "id": 456998477,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODQ3Nw==",
      "diff_hunk": "@@ -3636,6 +3636,10 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     }\n     CNetMessage& msg(msgs.front());\n \n+    std::vector<unsigned char> tmp(msg.m_recv.data(), msg.m_recv.data() + msg.m_recv.size());",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "cf5966a76f136d1ca7a986d6ca11808047a812c6",
      "in_reply_to_id": 454516814,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "good point, done",
      "created_at": "2020-07-20T02:37:39Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r456998477",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/456998477"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3639,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/457072901",
      "pull_request_review_id": 447849752,
      "id": 457072901,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA3MjkwMQ==",
      "diff_hunk": "@@ -2813,6 +2813,8 @@ void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n \n         if (pnode->nSendSize > nSendBufferMaxSize)\n             pnode->fPauseSend = true;\n+        if (gArgs.IsArgSet(\"-logmessages\"))",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "9898fa106229d79772657ae8c4ff4555e8641aad",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit:\r\n\r\n```suggestion\r\n        if (gArgs.IsArgSet(\"-logmessages\")) {\r\n```",
      "created_at": "2020-07-20T05:47:11Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r457072901",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/457072901"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2816,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/457073081",
      "pull_request_review_id": 447849752,
      "id": 457073081,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA3MzA4MQ==",
      "diff_hunk": "@@ -2813,6 +2813,8 @@ void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n \n         if (pnode->nSendSize > nSendBufferMaxSize)\n             pnode->fPauseSend = true;\n+        if (gArgs.IsArgSet(\"-logmessages\"))\n+            LogMessage(*pnode, msg.m_type, msg.data, false);",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "9898fa106229d79772657ae8c4ff4555e8641aad",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit:\r\n\r\n```suggestion\r\n            LogMessage(*pnode, msg.m_type, msg.data, /* incoming */ false);\r\n```",
      "created_at": "2020-07-20T05:47:30Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r457073081",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/457073081"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2817,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/457075888",
      "pull_request_review_id": 447849752,
      "id": 457075888,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA3NTg4OA==",
      "diff_hunk": "@@ -2865,3 +2867,23 @@ uint64_t CConnman::CalculateKeyedNetGroup(const CAddress& ad) const\n \n     return GetDeterministicRandomizer(RANDOMIZER_ID_NETGROUP).Write(vchNetGroup.data(), vchNetGroup.size()).Finalize();\n }\n+\n+void LogMessage(const CNode& node, const std::string& command, const std::vector<unsigned char>& data, bool is_incoming)",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "9898fa106229d79772657ae8c4ff4555e8641aad",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: Only valid message types are logged, not junk data\r\n\r\n```suggestion\r\nvoid LogMessage(const CNode& node, const std::string& msg_type, const std::vector<unsigned char>& data, bool is_incoming)\r\n```\r\n\r\nAlso, instead of copying the message data into a new vector, why not use a cheap std::span?",
      "created_at": "2020-07-20T05:53:02Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r457075888",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/457075888"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2871,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/457076718",
      "pull_request_review_id": 447849752,
      "id": 457076718,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA3NjcxOA==",
      "diff_hunk": "@@ -2865,3 +2867,23 @@ uint64_t CConnman::CalculateKeyedNetGroup(const CAddress& ad) const\n \n     return GetDeterministicRandomizer(RANDOMIZER_ID_NETGROUP).Write(vchNetGroup.data(), vchNetGroup.size()).Finalize();\n }\n+\n+void LogMessage(const CNode& node, const std::string& command, const std::vector<unsigned char>& data, bool is_incoming)\n+{\n+    int64_t time = GetTimeMicros();",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "9898fa106229d79772657ae8c4ff4555e8641aad",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Q: Is it important that this time is equal to the receive time of the message?\r\n\r\nIf yes, you could pass in the time from the caller. (msg.m_time)",
      "created_at": "2020-07-20T05:54:42Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r457076718",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/457076718"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2870,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/458760191",
      "pull_request_review_id": 453275506,
      "id": 458760191,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc2MDE5MQ==",
      "diff_hunk": "@@ -2865,3 +2867,23 @@ uint64_t CConnman::CalculateKeyedNetGroup(const CAddress& ad) const\n \n     return GetDeterministicRandomizer(RANDOMIZER_ID_NETGROUP).Write(vchNetGroup.data(), vchNetGroup.size()).Finalize();\n }\n+\n+void LogMessage(const CNode& node, const std::string& command, const std::vector<unsigned char>& data, bool is_incoming)\n+{\n+    int64_t time = GetTimeMicros();",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "9898fa106229d79772657ae8c4ff4555e8641aad",
      "in_reply_to_id": 457076718,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The exact time doesn't matter, this is mainly used for sorting the messages later.  All that's important is that messages that are sent later have a later time.  To avoid races I only call LogMessage from the MessageHandler thread.  When sending a message in PushMessage, we don't have anything like msg.m_time until the message is into SocketHandler.",
      "created_at": "2020-07-22T12:39:01Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r458760191",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/458760191"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2870,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/458763531",
      "pull_request_review_id": 453279914,
      "id": 458763531,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc2MzUzMQ==",
      "diff_hunk": "@@ -2865,3 +2867,25 @@ uint64_t CConnman::CalculateKeyedNetGroup(const CAddress& ad) const\n \n     return GetDeterministicRandomizer(RANDOMIZER_ID_NETGROUP).Write(vchNetGroup.data(), vchNetGroup.size()).Finalize();\n }\n+\n+void LogMessage(CNode* node, std::string& command, std::vector<unsigned char>& data, bool is_incoming)\n+{\n+    int64_t time = GetTimeMicros();",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "cf5966a76f136d1ca7a986d6ca11808047a812c6",
      "in_reply_to_id": 454531068,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'd prefer to keep this as it is.  I understand (and agree with) ES.21 completely, but I'm trying to treat `time` as an argument, not a local, which is why it's right at the top.  I would love to pass it in instead but practically can't (see [here](https://github.com/bitcoin/bitcoin/pull/19509#discussion_r458760191)).\r\n\r\nIf anyone is strongly against this I'll move it.",
      "created_at": "2020-07-22T12:44:55Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r458763531",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/458763531"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2870,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/458765292",
      "pull_request_review_id": 453282138,
      "id": 458765292,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc2NTI5Mg==",
      "diff_hunk": "@@ -2813,6 +2813,8 @@ void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n \n         if (pnode->nSendSize > nSendBufferMaxSize)\n             pnode->fPauseSend = true;\n+        if (gArgs.IsArgSet(\"-logmessages\"))",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "9898fa106229d79772657ae8c4ff4555e8641aad",
      "in_reply_to_id": 457072901,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah I misread the style guide!\r\n\r\nNow that I'm adding braces to this, I'll add them to the rest of PushMessage.",
      "created_at": "2020-07-22T12:47:50Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r458765292",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/458765292"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2816,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459000213",
      "pull_request_review_id": 453581023,
      "id": 459000213,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAwMDIxMw==",
      "diff_hunk": "@@ -0,0 +1,91 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Parse message log binary files.  To be used in conjunction with -logmessages.\"\"\"\n+\n+import argparse\n+import sys\n+from io import BytesIO\n+import json\n+from pathlib import Path\n+from typing import Any, List\n+\n+sys.path.append('test/functional')\n+\n+from test_framework.mininode import MESSAGEMAP\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+COMMAND_SIZE = 12\n+\n+def to_jsonable(obj: Any) -> Any:\n+    ret = {}\n+    # The msg objects don't generally include \"msgtype\" in their __slots__\n+    if hasattr(obj, \"msgtype\"):\n+        ret[\"msgtype\"] = getattr(obj, \"msgtype\", None).decode()\n+    if hasattr(obj, \"__dict__\"):\n+        ret = obj.__dict__\n+    elif hasattr(obj, \"__slots__\"):\n+        for slot in obj.__slots__:\n+            val = getattr(obj, slot, None)\n+            ret[slot] = to_jsonable(val)\n+    elif isinstance(obj, list):\n+        ret = [to_jsonable(a) for a in obj]\n+    elif isinstance(obj, bytes):\n+        ret = obj.hex()\n+    else:\n+        ret = obj\n+    return ret\n+\n+\n+def process_file(path: Path, messages: List[Any], recv: bool) -> None:\n+    with open(path, 'rb') as f_in:\n+        while True:\n+            tmp_header = f_in.read(TIME_SIZE + LENGTH_SIZE + COMMAND_SIZE)\n+            if not tmp_header:\n+                break\n+            tmp_header = BytesIO(tmp_header)\n+            time = int.from_bytes(tmp_header.read(TIME_SIZE), \"little\") # type: int\n+            command = tmp_header.read(COMMAND_SIZE).split(b'\\x00', 1)[0]  # type: bytes\n+            length = int.from_bytes(tmp_header.read(LENGTH_SIZE), \"little\") # type: int\n+            if command not in MESSAGEMAP:\n+                continue    # For now just skip unrecognized messages\n+            msg = MESSAGEMAP[command]()\n+            msg.deserialize(f_in)\n+            msg_dict = to_jsonable(msg)\n+            msg_dict[\"time\"] = time\n+            msg_dict[\"length\"] = length\n+            msg_dict[\"recv\"] = recv\n+            messages.append(msg_dict)\n+\n+\n+def main():\n+    \"\"\"Main\"\"\"\n+    parser = argparse.ArgumentParser(\n+        description=__doc__,\n+        epilog=\"EXAMPLE \\n\\tpython contrib/peer-logging/peer-logging-parser.py -o out.json <data-dir>/peer_logging/**/*.dat\",",
      "path": "contrib/peer-logging/peer-logging-parser.py",
      "position": null,
      "original_position": 67,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "dc393b30e97f743c1e58ce94051c4f4f918beb70",
      "in_reply_to_id": 454153812,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done\r\n\r\n(That sort of format string is something I'm looking forward to in 3.6 ðŸ˜„)",
      "created_at": "2020-07-22T18:33:21Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r459000213",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459000213"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459000283",
      "pull_request_review_id": 453581112,
      "id": 459000283,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAwMDI4Mw==",
      "diff_hunk": "@@ -0,0 +1,91 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Parse message log binary files.  To be used in conjunction with -logmessages.\"\"\"\n+\n+import argparse\n+import sys\n+from io import BytesIO\n+import json\n+from pathlib import Path\n+from typing import Any, List\n+\n+sys.path.append('test/functional')\n+\n+from test_framework.mininode import MESSAGEMAP\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+COMMAND_SIZE = 12\n+\n+def to_jsonable(obj: Any) -> Any:\n+    ret = {}\n+    # The msg objects don't generally include \"msgtype\" in their __slots__\n+    if hasattr(obj, \"msgtype\"):\n+        ret[\"msgtype\"] = getattr(obj, \"msgtype\", None).decode()\n+    if hasattr(obj, \"__dict__\"):\n+        ret = obj.__dict__\n+    elif hasattr(obj, \"__slots__\"):\n+        for slot in obj.__slots__:\n+            val = getattr(obj, slot, None)\n+            ret[slot] = to_jsonable(val)\n+    elif isinstance(obj, list):\n+        ret = [to_jsonable(a) for a in obj]\n+    elif isinstance(obj, bytes):\n+        ret = obj.hex()\n+    else:\n+        ret = obj\n+    return ret\n+\n+\n+def process_file(path: Path, messages: List[Any], recv: bool) -> None:\n+    with open(path, 'rb') as f_in:\n+        while True:\n+            tmp_header = f_in.read(TIME_SIZE + LENGTH_SIZE + COMMAND_SIZE)\n+            if not tmp_header:\n+                break\n+            tmp_header = BytesIO(tmp_header)\n+            time = int.from_bytes(tmp_header.read(TIME_SIZE), \"little\") # type: int\n+            command = tmp_header.read(COMMAND_SIZE).split(b'\\x00', 1)[0]  # type: bytes\n+            length = int.from_bytes(tmp_header.read(LENGTH_SIZE), \"little\") # type: int\n+            if command not in MESSAGEMAP:\n+                continue    # For now just skip unrecognized messages\n+            msg = MESSAGEMAP[command]()\n+            msg.deserialize(f_in)\n+            msg_dict = to_jsonable(msg)\n+            msg_dict[\"time\"] = time\n+            msg_dict[\"length\"] = length\n+            msg_dict[\"recv\"] = recv\n+            messages.append(msg_dict)\n+\n+\n+def main():\n+    \"\"\"Main\"\"\"\n+    parser = argparse.ArgumentParser(\n+        description=__doc__,\n+        epilog=\"EXAMPLE \\n\\tpython contrib/peer-logging/peer-logging-parser.py -o out.json <data-dir>/peer_logging/**/*.dat\",",
      "path": "contrib/peer-logging/peer-logging-parser.py",
      "position": null,
      "original_position": 67,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "dc393b30e97f743c1e58ce94051c4f4f918beb70",
      "in_reply_to_id": 454153812,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "A test is in the works",
      "created_at": "2020-07-22T18:33:30Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r459000283",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459000283"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459000374",
      "pull_request_review_id": 453581216,
      "id": 459000374,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAwMDM3NA==",
      "diff_hunk": "@@ -2813,6 +2813,8 @@ void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n \n         if (pnode->nSendSize > nSendBufferMaxSize)\n             pnode->fPauseSend = true;\n+        if (gArgs.IsArgSet(\"-logmessages\"))\n+            LogMessage(*pnode, msg.m_type, msg.data, false);",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "9898fa106229d79772657ae8c4ff4555e8641aad",
      "in_reply_to_id": 457073081,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2020-07-22T18:33:39Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r459000374",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459000374"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2817,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459000465",
      "pull_request_review_id": 453581310,
      "id": 459000465,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAwMDQ2NQ==",
      "diff_hunk": "@@ -2865,3 +2867,23 @@ uint64_t CConnman::CalculateKeyedNetGroup(const CAddress& ad) const\n \n     return GetDeterministicRandomizer(RANDOMIZER_ID_NETGROUP).Write(vchNetGroup.data(), vchNetGroup.size()).Finalize();\n }\n+\n+void LogMessage(const CNode& node, const std::string& command, const std::vector<unsigned char>& data, bool is_incoming)",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "9898fa106229d79772657ae8c4ff4555e8641aad",
      "in_reply_to_id": 457075888,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good point!  done",
      "created_at": "2020-07-22T18:33:47Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r459000465",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459000465"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2871,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459072714",
      "pull_request_review_id": 453671898,
      "id": 459072714,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA3MjcxNA==",
      "diff_hunk": "@@ -2811,18 +2811,17 @@ void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n         pnode->mapSendBytesPerMsgCmd[msg.m_type] += nTotalSize;\n         pnode->nSendSize += nTotalSize;\n \n-        if (pnode->nSendSize > nSendBufferMaxSize)\n-            pnode->fPauseSend = true;\n+        if (pnode->nSendSize > nSendBufferMaxSize) pnode->fPauseSend = true;",
      "path": "src/net.cpp",
      "position": 16,
      "original_position": 6,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "cbb154e5d5b001b8e940be49a9692e2f6e27e29c",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Please avoid change unrelated lines (unless there are good reasons doing so). It makes it harder to reason about the actual changes if one includes unrelated whitespace changes in the same commit :)\r\n\r\nApplies also below and throughout this PR.",
      "created_at": "2020-07-22T20:46:03Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r459072714",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459072714"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2885,
      "original_line": 2885,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459075159",
      "pull_request_review_id": 453671898,
      "id": 459075159,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA3NTE1OQ==",
      "diff_hunk": "@@ -3648,14 +3648,12 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     if (!pfrom->orphan_work_set.empty()) return true;\n \n     // Don't bother if send buffer is too full to respond anyway\n-    if (pfrom->fPauseSend)\n-        return false;\n+    if (pfrom->fPauseSend) return false;",
      "path": "src/net_processing.cpp",
      "position": 6,
      "original_position": 6,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "cbb154e5d5b001b8e940be49a9692e2f6e27e29c",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Same here (and below): don't change unrelated lines :)",
      "created_at": "2020-07-22T20:50:44Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r459075159",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459075159"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4031,
      "original_line": 4031,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459179239",
      "pull_request_review_id": 453798174,
      "id": 459179239,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE3OTIzOQ==",
      "diff_hunk": "@@ -2811,18 +2811,17 @@ void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n         pnode->mapSendBytesPerMsgCmd[msg.m_type] += nTotalSize;\n         pnode->nSendSize += nTotalSize;\n \n-        if (pnode->nSendSize > nSendBufferMaxSize)\n-            pnode->fPauseSend = true;\n+        if (pnode->nSendSize > nSendBufferMaxSize) pnode->fPauseSend = true;",
      "path": "src/net.cpp",
      "position": 16,
      "original_position": 6,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "cbb154e5d5b001b8e940be49a9692e2f6e27e29c",
      "in_reply_to_id": 459072714,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I made these changes in response to [this comment](https://github.com/bitcoin/bitcoin/pull/19509#discussion_r457072901).  As far as I can tell they're all in the first commit 84a79d61cef5c9386597869adccda4aa5992cc96 (which only contains the unrelated changes), and they don't show up at all in `git range-diff master 9898fa1 cbb154e`.  i.e. on my machine I haven't mixed any real changes with whitespace changes.\r\n\r\nAre you seeing something different?  Is there a better way I could have done this?",
      "created_at": "2020-07-23T02:05:34Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r459179239",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459179239"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2885,
      "original_line": 2885,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459347986",
      "pull_request_review_id": 453999273,
      "id": 459347986,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM0Nzk4Ng==",
      "diff_hunk": "@@ -2811,18 +2811,17 @@ void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n         pnode->mapSendBytesPerMsgCmd[msg.m_type] += nTotalSize;\n         pnode->nSendSize += nTotalSize;\n \n-        if (pnode->nSendSize > nSendBufferMaxSize)\n-            pnode->fPauseSend = true;\n+        if (pnode->nSendSize > nSendBufferMaxSize) pnode->fPauseSend = true;",
      "path": "src/net.cpp",
      "position": 16,
      "original_position": 6,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "cbb154e5d5b001b8e940be49a9692e2f6e27e29c",
      "in_reply_to_id": 459072714,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This seems reasonable. Although the general advice is to not fix style on lines that you're not otherwise touching, if it's all contained within a single cleanup commit, then I think that's also fine.",
      "created_at": "2020-07-23T10:14:25Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r459347986",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459347986"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2885,
      "original_line": 2885,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459643471",
      "pull_request_review_id": 454388361,
      "id": 459643471,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0MzQ3MQ==",
      "diff_hunk": "@@ -2865,3 +2864,23 @@ uint64_t CConnman::CalculateKeyedNetGroup(const CAddress& ad) const\n \n     return GetDeterministicRandomizer(RANDOMIZER_ID_NETGROUP).Write(vchNetGroup.data(), vchNetGroup.size()).Finalize();\n }\n+\n+void LogMessage(const CNode& node, const std::string& msg_type, const Span<const unsigned char>& data, bool is_incoming)\n+{\n+    int64_t time = GetTimeMicros();\n+\n+    fs::path base_path = GetDataDir() / \"peer_logging\" / node.addr.ToString();\n+    fs::create_directories(base_path);\n+\n+    fs::path path = base_path / (is_incoming ? \"msgs_recv.dat\" : \"msgs_sent.dat\");\n+    CAutoFile f(fsbridge::fopen(path, \"ab\"), SER_DISK, CLIENT_VERSION);\n+\n+    f.write((const char*)&time, sizeof(time));\n+    f.write(msg_type.data(), msg_type.length());\n+    for (int i = msg_type.length(); i < CMessageHeader::COMMAND_SIZE; ++i) {",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 43,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "cbb154e5d5b001b8e940be49a9692e2f6e27e29c",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    for (auto i = msg_type.length(); i < CMessageHeader::COMMAND_SIZE; ++i) {\r\n```\r\n\r\nto fix the compile failure:\r\n\r\n```\r\nnet.cpp:2880:39: error: comparison of integers of different signs: 'int' and 'const size_t' (aka 'const unsigned long') [-Werror,-Wsign-compare]\r\n\r\n    for (int i = msg_type.length(); i < CMessageHeader::COMMAND_SIZE; ++i) {\r\n\r\n                                    ~ ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n1 error generated.",
      "created_at": "2020-07-23T18:23:55Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r459643471",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459643471"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2880,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459655628",
      "pull_request_review_id": 454403731,
      "id": 459655628,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1NTYyOA==",
      "diff_hunk": "@@ -2865,3 +2864,23 @@ uint64_t CConnman::CalculateKeyedNetGroup(const CAddress& ad) const\n \n     return GetDeterministicRandomizer(RANDOMIZER_ID_NETGROUP).Write(vchNetGroup.data(), vchNetGroup.size()).Finalize();\n }\n+\n+void LogMessage(const CNode& node, const std::string& msg_type, const Span<const unsigned char>& data, bool is_incoming)\n+{\n+    int64_t time = GetTimeMicros();\n+\n+    fs::path base_path = GetDataDir() / \"peer_logging\" / node.addr.ToString();\n+    fs::create_directories(base_path);\n+\n+    fs::path path = base_path / (is_incoming ? \"msgs_recv.dat\" : \"msgs_sent.dat\");\n+    CAutoFile f(fsbridge::fopen(path, \"ab\"), SER_DISK, CLIENT_VERSION);\n+\n+    f.write((const char*)&time, sizeof(time));\n+    f.write(msg_type.data(), msg_type.length());\n+    for (int i = msg_type.length(); i < CMessageHeader::COMMAND_SIZE; ++i) {",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 43,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "cbb154e5d5b001b8e940be49a9692e2f6e27e29c",
      "in_reply_to_id": 459643471,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm not sure why this didn't come up before, and still doesn't come up on my machine :/  Regardless, fixed.",
      "created_at": "2020-07-23T18:45:29Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r459655628",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459655628"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2880,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459677362",
      "pull_request_review_id": 454431303,
      "id": 459677362,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3NzM2Mg==",
      "diff_hunk": "@@ -2865,3 +2864,23 @@ uint64_t CConnman::CalculateKeyedNetGroup(const CAddress& ad) const\n \n     return GetDeterministicRandomizer(RANDOMIZER_ID_NETGROUP).Write(vchNetGroup.data(), vchNetGroup.size()).Finalize();\n }\n+\n+void LogMessage(const CNode& node, const std::string& msg_type, const Span<const unsigned char>& data, bool is_incoming)\n+{\n+    int64_t time = GetTimeMicros();\n+\n+    fs::path base_path = GetDataDir() / \"peer_logging\" / node.addr.ToString();\n+    fs::create_directories(base_path);\n+\n+    fs::path path = base_path / (is_incoming ? \"msgs_recv.dat\" : \"msgs_sent.dat\");\n+    CAutoFile f(fsbridge::fopen(path, \"ab\"), SER_DISK, CLIENT_VERSION);\n+\n+    f.write((const char*)&time, sizeof(time));\n+    f.write(msg_type.data(), msg_type.length());\n+    for (int i = msg_type.length(); i < CMessageHeader::COMMAND_SIZE; ++i) {",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 43,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "cbb154e5d5b001b8e940be49a9692e2f6e27e29c",
      "in_reply_to_id": 459643471,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't know either: #19123",
      "created_at": "2020-07-23T19:26:02Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r459677362",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/459677362"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2880,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/461556730",
      "pull_request_review_id": 456600960,
      "id": 461556730,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU1NjczMA==",
      "diff_hunk": "@@ -2861,3 +2861,23 @@ uint64_t CConnman::CalculateKeyedNetGroup(const CAddress& ad) const\n \n     return GetDeterministicRandomizer(RANDOMIZER_ID_NETGROUP).Write(vchNetGroup.data(), vchNetGroup.size()).Finalize();\n }\n+\n+void LogMessage(const CNode& node, const std::string& msg_type, const Span<const unsigned char>& data, bool is_incoming)\n+{\n+    auto time = GetTime<std::chrono::microseconds>();\n+\n+    fs::path base_path = GetDataDir() / \"peer_logging\" / node.addr.ToString();\n+    fs::create_directories(base_path);\n+\n+    fs::path path = base_path / (is_incoming ? \"msgs_recv.dat\" : \"msgs_sent.dat\");\n+    CAutoFile f(fsbridge::fopen(path, \"ab\"), SER_DISK, CLIENT_VERSION);\n+\n+    f.write((const char*)&time, sizeof(time));",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "0c31d58f7d5c40a73e9fd67f57acf33a4d45f24a",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This way of serialization doesn't seem to be endian-agnostic, i.e. it depends on the architecture whether this is written out in big or little endian format. In the parsing script you assume both time and data size are stored in little endian, hence this needs to be enforced here. I think `ser_writedata32` (see `serialization.h`) can be used for this.\r\nIt's a pity though that the CI tests don't fail, I think this is because we don't have any testing instance where the architecture uses big endian byte order :/",
      "created_at": "2020-07-28T12:55:24Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r461556730",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/461556730"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2875,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/461556757",
      "pull_request_review_id": 456600960,
      "id": 461556757,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU1Njc1Nw==",
      "diff_hunk": "@@ -2861,3 +2861,23 @@ uint64_t CConnman::CalculateKeyedNetGroup(const CAddress& ad) const\n \n     return GetDeterministicRandomizer(RANDOMIZER_ID_NETGROUP).Write(vchNetGroup.data(), vchNetGroup.size()).Finalize();\n }\n+\n+void LogMessage(const CNode& node, const std::string& msg_type, const Span<const unsigned char>& data, bool is_incoming)\n+{\n+    auto time = GetTime<std::chrono::microseconds>();\n+\n+    fs::path base_path = GetDataDir() / \"peer_logging\" / node.addr.ToString();\n+    fs::create_directories(base_path);\n+\n+    fs::path path = base_path / (is_incoming ? \"msgs_recv.dat\" : \"msgs_sent.dat\");\n+    CAutoFile f(fsbridge::fopen(path, \"ab\"), SER_DISK, CLIENT_VERSION);\n+\n+    f.write((const char*)&time, sizeof(time));\n+    f.write(msg_type.data(), msg_type.length());\n+    for (auto i = msg_type.length(); i < CMessageHeader::COMMAND_SIZE; ++i) {\n+        f << '\\0';\n+    }\n+    uint32_t size = data.size();\n+    f.write((const char*)&size, sizeof(size));",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 21,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "0c31d58f7d5c40a73e9fd67f57acf33a4d45f24a",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Same as above, this should be guaranteed to be written out in little endian byte order.",
      "created_at": "2020-07-28T12:55:28Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r461556757",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/461556757"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2881,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/461724204",
      "pull_request_review_id": 456820101,
      "id": 461724204,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTcyNDIwNA==",
      "diff_hunk": "@@ -0,0 +1,69 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test node peer logging capability.\n+\n+Additionally, the output of contrib/peer-logging/peer-logging-parser.py should be verified manually.\n+\"\"\"\n+\n+import glob\n+from io import BytesIO\n+import os\n+\n+from test_framework.mininode import P2PDataStore\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+COMMAND_SIZE = 12\n+\n+def mini_parser(dat_file):\n+    \"\"\"Parse a data file created by LogMessage.\n+\n+    From the data file we'll only check the structure.\n+\n+    We won't care about things like:\n+    - Deserializing the payload of the message\n+        - This is managed by the deserialize methods in test_framework.messages\n+    - The order of the messages\n+        - There's no reason why we can't, say, change the order of the messages in the handshake\n+    - Message Type\n+        - We can add new message types\n+\n+    We're ignoring these because they're simply too brittle to test here.\n+    \"\"\"\n+    with open(dat_file, 'rb') as f_in:\n+        while True:\n+            tmp_header_raw = f_in.read(TIME_SIZE + LENGTH_SIZE + COMMAND_SIZE)\n+            if not tmp_header_raw:\n+                break\n+            tmp_header = BytesIO(tmp_header_raw)\n+            time = int.from_bytes(tmp_header.read(TIME_SIZE), \"little\") # type: int\n+            assert(time >= 1231006505000000)   # genesis block timestamp\n+            command = tmp_header.read(COMMAND_SIZE).split(b'\\x00', 1)[0]  # type: bytes\n+            assert(len(command) > 0)\n+            length = int.from_bytes(tmp_header.read(LENGTH_SIZE), \"little\") # type: int\n+            data = f_in.read(length)\n+            assert(len(data) == length)",
      "path": "test/functional/p2p_peer_logging.py",
      "position": null,
      "original_position": 48,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "863c6b5aeb08a8769895a3fb08a9adb6753b4567",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "would be good to use assert_equal for debugability \r\n\r\nhttps://travis-ci.org/github/bitcoin/bitcoin/jobs/712616300#L3056",
      "created_at": "2020-07-28T16:45:10Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r461724204",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/461724204"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 48,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/462986846",
      "pull_request_review_id": 458388071,
      "id": 462986846,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk4Njg0Ng==",
      "diff_hunk": "@@ -2861,3 +2861,23 @@ uint64_t CConnman::CalculateKeyedNetGroup(const CAddress& ad) const\n \n     return GetDeterministicRandomizer(RANDOMIZER_ID_NETGROUP).Write(vchNetGroup.data(), vchNetGroup.size()).Finalize();\n }\n+\n+void LogMessage(const CNode& node, const std::string& msg_type, const Span<const unsigned char>& data, bool is_incoming)\n+{\n+    auto time = GetTime<std::chrono::microseconds>();\n+\n+    fs::path base_path = GetDataDir() / \"peer_logging\" / node.addr.ToString();\n+    fs::create_directories(base_path);\n+\n+    fs::path path = base_path / (is_incoming ? \"msgs_recv.dat\" : \"msgs_sent.dat\");\n+    CAutoFile f(fsbridge::fopen(path, \"ab\"), SER_DISK, CLIENT_VERSION);\n+\n+    f.write((const char*)&time, sizeof(time));\n+    f.write(msg_type.data(), msg_type.length());\n+    for (auto i = msg_type.length(); i < CMessageHeader::COMMAND_SIZE; ++i) {\n+        f << '\\0';\n+    }\n+    uint32_t size = data.size();\n+    f.write((const char*)&size, sizeof(size));",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 21,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "0c31d58f7d5c40a73e9fd67f57acf33a4d45f24a",
      "in_reply_to_id": 461556757,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2020-07-30T13:15:04Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r462986846",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/462986846"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2881,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/462988168",
      "pull_request_review_id": 458389774,
      "id": 462988168,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk4ODE2OA==",
      "diff_hunk": "@@ -2861,3 +2861,23 @@ uint64_t CConnman::CalculateKeyedNetGroup(const CAddress& ad) const\n \n     return GetDeterministicRandomizer(RANDOMIZER_ID_NETGROUP).Write(vchNetGroup.data(), vchNetGroup.size()).Finalize();\n }\n+\n+void LogMessage(const CNode& node, const std::string& msg_type, const Span<const unsigned char>& data, bool is_incoming)\n+{\n+    auto time = GetTime<std::chrono::microseconds>();\n+\n+    fs::path base_path = GetDataDir() / \"peer_logging\" / node.addr.ToString();\n+    fs::create_directories(base_path);\n+\n+    fs::path path = base_path / (is_incoming ? \"msgs_recv.dat\" : \"msgs_sent.dat\");\n+    CAutoFile f(fsbridge::fopen(path, \"ab\"), SER_DISK, CLIENT_VERSION);\n+\n+    f.write((const char*)&time, sizeof(time));",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "0c31d58f7d5c40a73e9fd67f57acf33a4d45f24a",
      "in_reply_to_id": 461556730,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks for catching this!  When fixing it I considered if it was better to instead change the test to follow the system endianness (with python's `sys.byteorder`).  I think fixing a particular endianness for the .dat files, as temporary as they are, is better.  Someone might generate them on a BE system and then parse them on a LE system one day...",
      "created_at": "2020-07-30T13:17:02Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r462988168",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/462988168"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2875,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/462988274",
      "pull_request_review_id": 458389902,
      "id": 462988274,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk4ODI3NA==",
      "diff_hunk": "@@ -0,0 +1,69 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test node peer logging capability.\n+\n+Additionally, the output of contrib/peer-logging/peer-logging-parser.py should be verified manually.\n+\"\"\"\n+\n+import glob\n+from io import BytesIO\n+import os\n+\n+from test_framework.mininode import P2PDataStore\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+COMMAND_SIZE = 12\n+\n+def mini_parser(dat_file):\n+    \"\"\"Parse a data file created by LogMessage.\n+\n+    From the data file we'll only check the structure.\n+\n+    We won't care about things like:\n+    - Deserializing the payload of the message\n+        - This is managed by the deserialize methods in test_framework.messages\n+    - The order of the messages\n+        - There's no reason why we can't, say, change the order of the messages in the handshake\n+    - Message Type\n+        - We can add new message types\n+\n+    We're ignoring these because they're simply too brittle to test here.\n+    \"\"\"\n+    with open(dat_file, 'rb') as f_in:\n+        while True:\n+            tmp_header_raw = f_in.read(TIME_SIZE + LENGTH_SIZE + COMMAND_SIZE)\n+            if not tmp_header_raw:\n+                break\n+            tmp_header = BytesIO(tmp_header_raw)\n+            time = int.from_bytes(tmp_header.read(TIME_SIZE), \"little\") # type: int\n+            assert(time >= 1231006505000000)   # genesis block timestamp\n+            command = tmp_header.read(COMMAND_SIZE).split(b'\\x00', 1)[0]  # type: bytes\n+            assert(len(command) > 0)\n+            length = int.from_bytes(tmp_header.read(LENGTH_SIZE), \"little\") # type: int\n+            data = f_in.read(length)\n+            assert(len(data) == length)",
      "path": "test/functional/p2p_peer_logging.py",
      "position": null,
      "original_position": 48,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "863c6b5aeb08a8769895a3fb08a9adb6753b4567",
      "in_reply_to_id": 461724204,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2020-07-30T13:17:11Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r462988274",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/462988274"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 48,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/463725486",
      "pull_request_review_id": 459324826,
      "id": 463725486,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzcyNTQ4Ng==",
      "diff_hunk": "@@ -0,0 +1,92 @@\n+#!/usr/bin/env python3",
      "path": "contrib/peer-logging/peer-logging-parser.py",
      "position": null,
      "original_position": 1,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "6095431033a3590fa74761f1bfede4c68a032a88",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "chmod this to 755 so it's executable.",
      "created_at": "2020-07-31T17:01:48Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r463725486",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/463725486"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/463725672",
      "pull_request_review_id": 459324826,
      "id": 463725672,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzcyNTY3Mg==",
      "diff_hunk": "@@ -0,0 +1,92 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Parse message log binary files.  To be used in conjunction with -logmessages.\"\"\"\n+\n+import argparse\n+import os\n+import sys\n+from io import BytesIO\n+import json\n+from pathlib import Path\n+from typing import Any, List\n+\n+sys.path.append(os.path.join(os.path.dirname(__file__), '../../test/functional'))\n+\n+from test_framework.mininode import MESSAGEMAP  # noqa: E402\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+COMMAND_SIZE = 12\n+\n+def to_jsonable(obj: Any) -> Any:\n+    ret = {}    # type: Any\n+    # The msg objects don't generally include \"msgtype\" in their __slots__\n+    if hasattr(obj, \"msgtype\"):\n+        ret[\"msgtype\"] = getattr(obj, \"msgtype\", None).decode()\n+    if hasattr(obj, \"__dict__\"):\n+        ret = obj.__dict__\n+    elif hasattr(obj, \"__slots__\"):\n+        for slot in obj.__slots__:\n+            val = getattr(obj, slot, None)\n+            ret[slot] = to_jsonable(val)\n+    elif isinstance(obj, list):\n+        ret = [to_jsonable(a) for a in obj]\n+    elif isinstance(obj, bytes):\n+        ret = obj.hex()\n+    else:\n+        ret = obj\n+    return ret\n+\n+\n+def process_file(path: Path, messages: List[Any], recv: bool) -> None:\n+    with open(path, 'rb') as f_in:\n+        while True:\n+            tmp_header_raw = f_in.read(TIME_SIZE + LENGTH_SIZE + COMMAND_SIZE)\n+            if not tmp_header_raw:\n+                break\n+            tmp_header = BytesIO(tmp_header_raw)\n+            time = int.from_bytes(tmp_header.read(TIME_SIZE), \"little\") # type: int",
      "path": "contrib/peer-logging/peer-logging-parser.py",
      "position": null,
      "original_position": 50,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "6095431033a3590fa74761f1bfede4c68a032a88",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: pep8 says at least 2 spaces before an inline comment :grimacing: ",
      "created_at": "2020-07-31T17:02:13Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r463725672",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/463725672"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/463731380",
      "pull_request_review_id": 459324826,
      "id": 463731380,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzczMTM4MA==",
      "diff_hunk": "@@ -0,0 +1,92 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Parse message log binary files.  To be used in conjunction with -logmessages.\"\"\"\n+\n+import argparse\n+import os\n+import sys\n+from io import BytesIO\n+import json\n+from pathlib import Path\n+from typing import Any, List\n+\n+sys.path.append(os.path.join(os.path.dirname(__file__), '../../test/functional'))\n+\n+from test_framework.mininode import MESSAGEMAP  # noqa: E402\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+COMMAND_SIZE = 12\n+\n+def to_jsonable(obj: Any) -> Any:\n+    ret = {}    # type: Any\n+    # The msg objects don't generally include \"msgtype\" in their __slots__\n+    if hasattr(obj, \"msgtype\"):\n+        ret[\"msgtype\"] = getattr(obj, \"msgtype\", None).decode()\n+    if hasattr(obj, \"__dict__\"):\n+        ret = obj.__dict__\n+    elif hasattr(obj, \"__slots__\"):\n+        for slot in obj.__slots__:\n+            val = getattr(obj, slot, None)\n+            ret[slot] = to_jsonable(val)\n+    elif isinstance(obj, list):\n+        ret = [to_jsonable(a) for a in obj]\n+    elif isinstance(obj, bytes):\n+        ret = obj.hex()\n+    else:\n+        ret = obj\n+    return ret\n+\n+\n+def process_file(path: Path, messages: List[Any], recv: bool) -> None:\n+    with open(path, 'rb') as f_in:\n+        while True:\n+            tmp_header_raw = f_in.read(TIME_SIZE + LENGTH_SIZE + COMMAND_SIZE)\n+            if not tmp_header_raw:\n+                break\n+            tmp_header = BytesIO(tmp_header_raw)\n+            time = int.from_bytes(tmp_header.read(TIME_SIZE), \"little\") # type: int\n+            command = tmp_header.read(COMMAND_SIZE).split(b'\\x00', 1)[0]  # type: bytes\n+            length = int.from_bytes(tmp_header.read(LENGTH_SIZE), \"little\") # type: int\n+            if command not in MESSAGEMAP:\n+                continue    # For now just skip unrecognized messages\n+            msg = MESSAGEMAP[command]()\n+            msg.deserialize(f_in)\n+            msg_dict = to_jsonable(msg)\n+            msg_dict[\"time\"] = time\n+            msg_dict[\"length\"] = length\n+            msg_dict[\"recv\"] = recv",
      "path": "contrib/peer-logging/peer-logging-parser.py",
      "position": null,
      "original_position": 60,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "6095431033a3590fa74761f1bfede4c68a032a88",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`\"recv\": true` and `\"recv\": false` don't seem very friendly here. Perhaps `\"direction\": \"received\"` and `\"direction\": \"sent\"` is better?",
      "created_at": "2020-07-31T17:14:44Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r463731380",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/463731380"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/463732392",
      "pull_request_review_id": 459324826,
      "id": 463732392,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzczMjM5Mg==",
      "diff_hunk": "@@ -0,0 +1,92 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Parse message log binary files.  To be used in conjunction with -logmessages.\"\"\"\n+\n+import argparse\n+import os\n+import sys\n+from io import BytesIO\n+import json\n+from pathlib import Path\n+from typing import Any, List\n+\n+sys.path.append(os.path.join(os.path.dirname(__file__), '../../test/functional'))\n+\n+from test_framework.mininode import MESSAGEMAP  # noqa: E402\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+COMMAND_SIZE = 12\n+\n+def to_jsonable(obj: Any) -> Any:\n+    ret = {}    # type: Any\n+    # The msg objects don't generally include \"msgtype\" in their __slots__\n+    if hasattr(obj, \"msgtype\"):\n+        ret[\"msgtype\"] = getattr(obj, \"msgtype\", None).decode()\n+    if hasattr(obj, \"__dict__\"):\n+        ret = obj.__dict__\n+    elif hasattr(obj, \"__slots__\"):\n+        for slot in obj.__slots__:\n+            val = getattr(obj, slot, None)\n+            ret[slot] = to_jsonable(val)\n+    elif isinstance(obj, list):\n+        ret = [to_jsonable(a) for a in obj]\n+    elif isinstance(obj, bytes):\n+        ret = obj.hex()\n+    else:\n+        ret = obj\n+    return ret\n+\n+\n+def process_file(path: Path, messages: List[Any], recv: bool) -> None:\n+    with open(path, 'rb') as f_in:\n+        while True:\n+            tmp_header_raw = f_in.read(TIME_SIZE + LENGTH_SIZE + COMMAND_SIZE)\n+            if not tmp_header_raw:\n+                break\n+            tmp_header = BytesIO(tmp_header_raw)\n+            time = int.from_bytes(tmp_header.read(TIME_SIZE), \"little\") # type: int\n+            command = tmp_header.read(COMMAND_SIZE).split(b'\\x00', 1)[0]  # type: bytes\n+            length = int.from_bytes(tmp_header.read(LENGTH_SIZE), \"little\") # type: int\n+            if command not in MESSAGEMAP:\n+                continue    # For now just skip unrecognized messages\n+            msg = MESSAGEMAP[command]()\n+            msg.deserialize(f_in)\n+            msg_dict = to_jsonable(msg)",
      "path": "contrib/peer-logging/peer-logging-parser.py",
      "position": null,
      "original_position": 57,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "6095431033a3590fa74761f1bfede4c68a032a88",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You should deserialize the body of the message to a sub-object. That means if any message types contain fields called 'msgtype', 'time', 'length' or 'recv', they won't conflict with the metadata.",
      "created_at": "2020-07-31T17:16:55Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r463732392",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/463732392"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 57,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465302710",
      "pull_request_review_id": 461138138,
      "id": 465302710,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMwMjcxMA==",
      "diff_hunk": "@@ -0,0 +1,92 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Parse message log binary files.  To be used in conjunction with -logmessages.\"\"\"\n+\n+import argparse\n+import os\n+import sys\n+from io import BytesIO\n+import json\n+from pathlib import Path\n+from typing import Any, List\n+\n+sys.path.append(os.path.join(os.path.dirname(__file__), '../../test/functional'))\n+\n+from test_framework.mininode import MESSAGEMAP  # noqa: E402\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+COMMAND_SIZE = 12\n+\n+def to_jsonable(obj: Any) -> Any:\n+    ret = {}    # type: Any\n+    # The msg objects don't generally include \"msgtype\" in their __slots__\n+    if hasattr(obj, \"msgtype\"):\n+        ret[\"msgtype\"] = getattr(obj, \"msgtype\", None).decode()\n+    if hasattr(obj, \"__dict__\"):\n+        ret = obj.__dict__\n+    elif hasattr(obj, \"__slots__\"):\n+        for slot in obj.__slots__:\n+            val = getattr(obj, slot, None)\n+            ret[slot] = to_jsonable(val)\n+    elif isinstance(obj, list):\n+        ret = [to_jsonable(a) for a in obj]\n+    elif isinstance(obj, bytes):\n+        ret = obj.hex()\n+    else:\n+        ret = obj\n+    return ret\n+\n+\n+def process_file(path: Path, messages: List[Any], recv: bool) -> None:\n+    with open(path, 'rb') as f_in:\n+        while True:\n+            tmp_header_raw = f_in.read(TIME_SIZE + LENGTH_SIZE + COMMAND_SIZE)\n+            if not tmp_header_raw:\n+                break\n+            tmp_header = BytesIO(tmp_header_raw)\n+            time = int.from_bytes(tmp_header.read(TIME_SIZE), \"little\") # type: int",
      "path": "contrib/peer-logging/peer-logging-parser.py",
      "position": null,
      "original_position": 50,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "6095431033a3590fa74761f1bfede4c68a032a88",
      "in_reply_to_id": 463725672,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "oof thanks, TIL\r\n\r\n(I'm surprised nothing caught this)",
      "created_at": "2020-08-04T20:11:49Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r465302710",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465302710"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465307759",
      "pull_request_review_id": 461144991,
      "id": 465307759,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMwNzc1OQ==",
      "diff_hunk": "@@ -0,0 +1,92 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Parse message log binary files.  To be used in conjunction with -logmessages.\"\"\"\n+\n+import argparse\n+import os\n+import sys\n+from io import BytesIO\n+import json\n+from pathlib import Path\n+from typing import Any, List\n+\n+sys.path.append(os.path.join(os.path.dirname(__file__), '../../test/functional'))\n+\n+from test_framework.mininode import MESSAGEMAP  # noqa: E402\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+COMMAND_SIZE = 12\n+\n+def to_jsonable(obj: Any) -> Any:\n+    ret = {}    # type: Any\n+    # The msg objects don't generally include \"msgtype\" in their __slots__\n+    if hasattr(obj, \"msgtype\"):\n+        ret[\"msgtype\"] = getattr(obj, \"msgtype\", None).decode()\n+    if hasattr(obj, \"__dict__\"):\n+        ret = obj.__dict__\n+    elif hasattr(obj, \"__slots__\"):\n+        for slot in obj.__slots__:\n+            val = getattr(obj, slot, None)\n+            ret[slot] = to_jsonable(val)\n+    elif isinstance(obj, list):\n+        ret = [to_jsonable(a) for a in obj]\n+    elif isinstance(obj, bytes):\n+        ret = obj.hex()\n+    else:\n+        ret = obj\n+    return ret\n+\n+\n+def process_file(path: Path, messages: List[Any], recv: bool) -> None:\n+    with open(path, 'rb') as f_in:\n+        while True:\n+            tmp_header_raw = f_in.read(TIME_SIZE + LENGTH_SIZE + COMMAND_SIZE)\n+            if not tmp_header_raw:\n+                break\n+            tmp_header = BytesIO(tmp_header_raw)\n+            time = int.from_bytes(tmp_header.read(TIME_SIZE), \"little\") # type: int\n+            command = tmp_header.read(COMMAND_SIZE).split(b'\\x00', 1)[0]  # type: bytes\n+            length = int.from_bytes(tmp_header.read(LENGTH_SIZE), \"little\") # type: int\n+            if command not in MESSAGEMAP:\n+                continue    # For now just skip unrecognized messages\n+            msg = MESSAGEMAP[command]()\n+            msg.deserialize(f_in)\n+            msg_dict = to_jsonable(msg)\n+            msg_dict[\"time\"] = time\n+            msg_dict[\"length\"] = length\n+            msg_dict[\"recv\"] = recv",
      "path": "contrib/peer-logging/peer-logging-parser.py",
      "position": null,
      "original_position": 60,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "6095431033a3590fa74761f1bfede4c68a032a88",
      "in_reply_to_id": 463731380,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'll meet you in the middle and do `\"direction\": \"recv\"` and `\"direction\": \"sent\"` :)",
      "created_at": "2020-08-04T20:21:36Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r465307759",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465307759"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465310100",
      "pull_request_review_id": 461147857,
      "id": 465310100,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMxMDEwMA==",
      "diff_hunk": "@@ -0,0 +1,92 @@\n+#!/usr/bin/env python3",
      "path": "contrib/peer-logging/peer-logging-parser.py",
      "position": null,
      "original_position": 1,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "6095431033a3590fa74761f1bfede4c68a032a88",
      "in_reply_to_id": 463725486,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2020-08-04T20:26:23Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r465310100",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465310100"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465310222",
      "pull_request_review_id": 461148006,
      "id": 465310222,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMxMDIyMg==",
      "diff_hunk": "@@ -0,0 +1,92 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Parse message log binary files.  To be used in conjunction with -logmessages.\"\"\"\n+\n+import argparse\n+import os\n+import sys\n+from io import BytesIO\n+import json\n+from pathlib import Path\n+from typing import Any, List\n+\n+sys.path.append(os.path.join(os.path.dirname(__file__), '../../test/functional'))\n+\n+from test_framework.mininode import MESSAGEMAP  # noqa: E402\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+COMMAND_SIZE = 12\n+\n+def to_jsonable(obj: Any) -> Any:\n+    ret = {}    # type: Any\n+    # The msg objects don't generally include \"msgtype\" in their __slots__\n+    if hasattr(obj, \"msgtype\"):\n+        ret[\"msgtype\"] = getattr(obj, \"msgtype\", None).decode()\n+    if hasattr(obj, \"__dict__\"):\n+        ret = obj.__dict__\n+    elif hasattr(obj, \"__slots__\"):\n+        for slot in obj.__slots__:\n+            val = getattr(obj, slot, None)\n+            ret[slot] = to_jsonable(val)\n+    elif isinstance(obj, list):\n+        ret = [to_jsonable(a) for a in obj]\n+    elif isinstance(obj, bytes):\n+        ret = obj.hex()\n+    else:\n+        ret = obj\n+    return ret\n+\n+\n+def process_file(path: Path, messages: List[Any], recv: bool) -> None:\n+    with open(path, 'rb') as f_in:\n+        while True:\n+            tmp_header_raw = f_in.read(TIME_SIZE + LENGTH_SIZE + COMMAND_SIZE)\n+            if not tmp_header_raw:\n+                break\n+            tmp_header = BytesIO(tmp_header_raw)\n+            time = int.from_bytes(tmp_header.read(TIME_SIZE), \"little\") # type: int\n+            command = tmp_header.read(COMMAND_SIZE).split(b'\\x00', 1)[0]  # type: bytes\n+            length = int.from_bytes(tmp_header.read(LENGTH_SIZE), \"little\") # type: int\n+            if command not in MESSAGEMAP:\n+                continue    # For now just skip unrecognized messages\n+            msg = MESSAGEMAP[command]()\n+            msg.deserialize(f_in)\n+            msg_dict = to_jsonable(msg)",
      "path": "contrib/peer-logging/peer-logging-parser.py",
      "position": null,
      "original_position": 57,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "6095431033a3590fa74761f1bfede4c68a032a88",
      "in_reply_to_id": 463732392,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done, and improved the names and order",
      "created_at": "2020-08-04T20:26:40Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r465310222",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465310222"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 57,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465770624",
      "pull_request_review_id": 461722878,
      "id": 465770624,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc3MDYyNA==",
      "diff_hunk": "@@ -0,0 +1,70 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test node peer logging capability.\n+\n+Additionally, the output of contrib/peer-logging/peer-logging-parser.py should be verified manually.\n+\"\"\"\n+\n+import glob\n+from io import BytesIO\n+import os\n+\n+from test_framework.mininode import P2PDataStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+COMMAND_SIZE = 12\n+\n+def mini_parser(dat_file):\n+    \"\"\"Parse a data file created by LogMessage.\n+\n+    From the data file we'll only check the structure.\n+\n+    We won't care about things like:\n+    - Deserializing the payload of the message\n+        - This is managed by the deserialize methods in test_framework.messages\n+    - The order of the messages\n+        - There's no reason why we can't, say, change the order of the messages in the handshake\n+    - Message Type\n+        - We can add new message types\n+\n+    We're ignoring these because they're simply too brittle to test here.\n+    \"\"\"\n+    with open(dat_file, 'rb') as f_in:",
      "path": "test/functional/p2p_peer_logging.py",
      "position": null,
      "original_position": 37,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "0547b23754b193e45ba722e555f97f2dd60dd1b5",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Instead of reimplementing the parser here, couldn't this just call `contrib/peer-logging/peer-logging-parser.py {dat_file}`?",
      "created_at": "2020-08-05T14:31:14Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r465770624",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465770624"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466248108",
      "pull_request_review_id": 462312851,
      "id": 466248108,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI0ODEwOA==",
      "diff_hunk": "@@ -3804,6 +3804,10 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     }\n     CNetMessage& msg(msgs.front());\n \n+    if (gArgs.IsArgSet(\"-logmessages\")) {\n+        LogMessage(*pfrom, msg.m_command, Span<const unsigned char>{(unsigned char*)msg.m_recv.data(), (size_t)msg.m_recv.size()}, /* incoming */ true);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "fac22eae7ce14cac4e7ab364325165ee8f7fa1ff",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think the cast to `size_t` is not needed here? `msg.m_recv` is an instance of `CDataStream`, its `size()` method returns `CDataStream::size_type` which is a typedef to a `std::vector::size_type`, which again is `size_t`.\r\n```suggestion\r\n        LogMessage(*pfrom, msg.m_command, Span<const unsigned char>{(unsigned char*)msg.m_recv.data(), msg.m_recv.size()}, /* incoming */ true);\r\n```",
      "created_at": "2020-08-06T08:52:03Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r466248108",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466248108"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3808,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466255925",
      "pull_request_review_id": 462312851,
      "id": 466255925,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI1NTkyNQ==",
      "diff_hunk": "@@ -0,0 +1,121 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Parse message log binary files.  To be used in conjunction with -logmessages.\"\"\"\n+\n+import argparse\n+import os\n+import sys\n+from io import BytesIO\n+import json\n+from pathlib import Path\n+from typing import Any, List\n+\n+sys.path.append(os.path.join(os.path.dirname(__file__), '../../test/functional'))\n+\n+from test_framework.messages import ser_uint256     # noqa: E402\n+from test_framework.mininode import MESSAGEMAP      # noqa: E402\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+COMMAND_SIZE = 12",
      "path": "contrib/peer-logging/peer-logging-parser.py",
      "position": null,
      "original_position": 22,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "78959de4b410987e1b1ed07f08bb0adce52ea218",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The \"command\" terminology should not be used anymore for network messages, we just call it \"message type\" now (see e.g. PRs https://github.com/bitcoin/bitcoin/pull/18533, https://github.com/bitcoin/bitcoin/pull/18610, https://github.com/bitcoin/bitcoin/pull/18937). Replacement suggestions: . s/COMMAND_SIZE/MSGTYPE_SIZE and s/command/msg_type (in the parsing code below).",
      "created_at": "2020-08-06T09:05:50Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r466255925",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466255925"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 22,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466279593",
      "pull_request_review_id": 462312851,
      "id": 466279593,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI3OTU5Mw==",
      "diff_hunk": "@@ -0,0 +1,70 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test node peer logging capability.\n+\n+Additionally, the output of contrib/peer-logging/peer-logging-parser.py should be verified manually.\n+\"\"\"\n+\n+import glob\n+from io import BytesIO\n+import os\n+\n+from test_framework.mininode import P2PDataStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+COMMAND_SIZE = 12\n+\n+def mini_parser(dat_file):\n+    \"\"\"Parse a data file created by LogMessage.\n+\n+    From the data file we'll only check the structure.\n+\n+    We won't care about things like:\n+    - Deserializing the payload of the message\n+        - This is managed by the deserialize methods in test_framework.messages\n+    - The order of the messages\n+        - There's no reason why we can't, say, change the order of the messages in the handshake\n+    - Message Type\n+        - We can add new message types\n+\n+    We're ignoring these because they're simply too brittle to test here.\n+    \"\"\"\n+    with open(dat_file, 'rb') as f_in:",
      "path": "test/functional/p2p_peer_logging.py",
      "position": null,
      "original_position": 37,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "0547b23754b193e45ba722e555f97f2dd60dd1b5",
      "in_reply_to_id": 465770624,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "+1 on code deduplication. The included timestamps check (all timestamps are past genesis block) can be done on the result rather than directly in the parser.",
      "created_at": "2020-08-06T09:29:34Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r466279593",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466279593"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466284790",
      "pull_request_review_id": 462312851,
      "id": 466284790,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI4NDc5MA==",
      "diff_hunk": "@@ -0,0 +1,121 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Parse message log binary files.  To be used in conjunction with -logmessages.\"\"\"\n+\n+import argparse\n+import os\n+import sys\n+from io import BytesIO\n+import json\n+from pathlib import Path\n+from typing import Any, List\n+\n+sys.path.append(os.path.join(os.path.dirname(__file__), '../../test/functional'))\n+\n+from test_framework.messages import ser_uint256     # noqa: E402\n+from test_framework.mininode import MESSAGEMAP      # noqa: E402\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+COMMAND_SIZE = 12\n+\n+# The test framework classes stores hashes as large ints in many cases.\n+# There isn't a way to distinguish between a large int and a large int that is actually a blob of bytes.\n+# As such, they are itemized here\n+# (These can be easily found by looking for calls to deser_uint256, deser_uint256_vector, and uint256_from_str in messages.py)\n+HASH_INTS = [\n+    \"blockhash\",\n+    \"block_hash\",\n+    \"hash\",     # A few conflicts here\n+    \"hashMerkleRoot\",\n+    \"hashPrevBlock\",\n+    \"hashstop\",\n+    \"prev_header\",\n+    \"sha256\",\n+    \"stop_hash\",\n+]\n+\n+HASH_INT_VECTORS = [\n+    \"hashes\",\n+    \"headers\",  # One conflict here\n+    \"vHave\",\n+    \"vHash\",\n+]\n+\n+def to_jsonable(obj: Any) -> Any:\n+    if hasattr(obj, \"__dict__\"):\n+        return obj.__dict__\n+    elif hasattr(obj, \"__slots__\"):\n+        ret = {}    # type: Any\n+        for slot in obj.__slots__:\n+            val = getattr(obj, slot, None)\n+            if slot in HASH_INTS and isinstance(val, int):\n+                ret[slot] = ser_uint256(val).hex()\n+            elif slot in HASH_INT_VECTORS and isinstance(val[0], int):\n+                ret[slot] = [ser_uint256(a).hex() for a in val]\n+            else:\n+                ret[slot] = to_jsonable(val)\n+        return ret\n+    elif isinstance(obj, list):\n+        return [to_jsonable(a) for a in obj]\n+    elif isinstance(obj, bytes):\n+        return obj.hex()\n+    else:\n+        return obj\n+\n+\n+def process_file(path: Path, messages: List[Any], recv: bool) -> None:\n+    with open(path, 'rb') as f_in:\n+        while True:\n+            tmp_header_raw = f_in.read(TIME_SIZE + LENGTH_SIZE + COMMAND_SIZE)\n+            if not tmp_header_raw:\n+                break\n+            tmp_header = BytesIO(tmp_header_raw)\n+            time = int.from_bytes(tmp_header.read(TIME_SIZE), \"little\")      # type: int\n+            command = tmp_header.read(COMMAND_SIZE).split(b'\\x00', 1)[0]     # type: bytes\n+            length = int.from_bytes(tmp_header.read(LENGTH_SIZE), \"little\")  # type: int\n+            if command not in MESSAGEMAP:\n+                continue    # For now just skip unrecognized messages",
      "path": "contrib/peer-logging/peer-logging-parser.py",
      "position": null,
      "original_position": 80,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "78959de4b410987e1b1ed07f08bb0adce52ea218",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "For skipping unrecognized messages, I think a dummy read on `f_in` (`length` bytes) is missing here to advance the file pointer to the next message.",
      "created_at": "2020-08-06T09:33:52Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r466284790",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466284790"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": 79,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 80,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466302307",
      "pull_request_review_id": 462377533,
      "id": 466302307,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMwMjMwNw==",
      "diff_hunk": "@@ -0,0 +1,70 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test node peer logging capability.\n+\n+Additionally, the output of contrib/peer-logging/peer-logging-parser.py should be verified manually.\n+\"\"\"\n+\n+import glob\n+from io import BytesIO\n+import os\n+\n+from test_framework.mininode import P2PDataStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+COMMAND_SIZE = 12\n+\n+def mini_parser(dat_file):\n+    \"\"\"Parse a data file created by LogMessage.\n+\n+    From the data file we'll only check the structure.\n+\n+    We won't care about things like:\n+    - Deserializing the payload of the message\n+        - This is managed by the deserialize methods in test_framework.messages\n+    - The order of the messages\n+        - There's no reason why we can't, say, change the order of the messages in the handshake\n+    - Message Type\n+        - We can add new message types\n+\n+    We're ignoring these because they're simply too brittle to test here.\n+    \"\"\"\n+    with open(dat_file, 'rb') as f_in:",
      "path": "test/functional/p2p_peer_logging.py",
      "position": null,
      "original_position": 37,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "0547b23754b193e45ba722e555f97f2dd60dd1b5",
      "in_reply_to_id": 465770624,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think it's much better not to assume that the contrib directory is available. Functional tests can be run when the build directory is out of tree and the source directory is not available. It makes sense to me to have a limited parser in the test case rather than importing from somewhere else.",
      "created_at": "2020-08-06T09:58:11Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r466302307",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466302307"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466306326",
      "pull_request_review_id": 462382512,
      "id": 466306326,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMwNjMyNg==",
      "diff_hunk": "@@ -0,0 +1,121 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Parse message log binary files.  To be used in conjunction with -logmessages.\"\"\"\n+\n+import argparse\n+import os\n+import sys\n+from io import BytesIO\n+import json\n+from pathlib import Path\n+from typing import Any, List\n+\n+sys.path.append(os.path.join(os.path.dirname(__file__), '../../test/functional'))\n+\n+from test_framework.messages import ser_uint256     # noqa: E402\n+from test_framework.mininode import MESSAGEMAP      # noqa: E402\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+COMMAND_SIZE = 12\n+\n+# The test framework classes stores hashes as large ints in many cases.\n+# There isn't a way to distinguish between a large int and a large int that is actually a blob of bytes.\n+# As such, they are itemized here\n+# (These can be easily found by looking for calls to deser_uint256, deser_uint256_vector, and uint256_from_str in messages.py)\n+HASH_INTS = [\n+    \"blockhash\",\n+    \"block_hash\",\n+    \"hash\",     # A few conflicts here\n+    \"hashMerkleRoot\",\n+    \"hashPrevBlock\",\n+    \"hashstop\",\n+    \"prev_header\",\n+    \"sha256\",\n+    \"stop_hash\",\n+]\n+\n+HASH_INT_VECTORS = [\n+    \"hashes\",\n+    \"headers\",  # One conflict here\n+    \"vHave\",\n+    \"vHash\",\n+]\n+\n+def to_jsonable(obj: Any) -> Any:\n+    if hasattr(obj, \"__dict__\"):\n+        return obj.__dict__\n+    elif hasattr(obj, \"__slots__\"):\n+        ret = {}    # type: Any\n+        for slot in obj.__slots__:\n+            val = getattr(obj, slot, None)\n+            if slot in HASH_INTS and isinstance(val, int):\n+                ret[slot] = ser_uint256(val).hex()\n+            elif slot in HASH_INT_VECTORS and isinstance(val[0], int):\n+                ret[slot] = [ser_uint256(a).hex() for a in val]\n+            else:\n+                ret[slot] = to_jsonable(val)\n+        return ret\n+    elif isinstance(obj, list):\n+        return [to_jsonable(a) for a in obj]\n+    elif isinstance(obj, bytes):\n+        return obj.hex()\n+    else:\n+        return obj\n+\n+\n+def process_file(path: Path, messages: List[Any], recv: bool) -> None:\n+    with open(path, 'rb') as f_in:\n+        while True:\n+            tmp_header_raw = f_in.read(TIME_SIZE + LENGTH_SIZE + COMMAND_SIZE)\n+            if not tmp_header_raw:\n+                break\n+            tmp_header = BytesIO(tmp_header_raw)\n+            time = int.from_bytes(tmp_header.read(TIME_SIZE), \"little\")      # type: int\n+            command = tmp_header.read(COMMAND_SIZE).split(b'\\x00', 1)[0]     # type: bytes\n+            length = int.from_bytes(tmp_header.read(LENGTH_SIZE), \"little\")  # type: int\n+            if command not in MESSAGEMAP:\n+                continue    # For now just skip unrecognized messages\n+            msg = MESSAGEMAP[command]()\n+            msg.deserialize(f_in)",
      "path": "contrib/peer-logging/peer-logging-parser.py",
      "position": null,
      "original_position": 82,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "78959de4b410987e1b1ed07f08bb0adce52ea218",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Could check here after the deserialization if the `f_in` was advanced by the expected `length` (what is currently done in the functional test), e.g. something like:\r\n```\r\n            msg_start_pos = f_in.tell()\r\n            ...\r\n            msg.deserialize(f_in)\r\n            ...\r\n            msg_length = f_in.tell() - msg_start_pos\r\n            assert_equal(length, msg_length)\r\n```",
      "created_at": "2020-08-06T10:05:24Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r466306326",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466306326"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 82,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466318870",
      "pull_request_review_id": 462397981,
      "id": 466318870,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMxODg3MA==",
      "diff_hunk": "@@ -0,0 +1,70 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test node peer logging capability.\n+\n+Additionally, the output of contrib/peer-logging/peer-logging-parser.py should be verified manually.\n+\"\"\"\n+\n+import glob\n+from io import BytesIO\n+import os\n+\n+from test_framework.mininode import P2PDataStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+COMMAND_SIZE = 12\n+\n+def mini_parser(dat_file):\n+    \"\"\"Parse a data file created by LogMessage.\n+\n+    From the data file we'll only check the structure.\n+\n+    We won't care about things like:\n+    - Deserializing the payload of the message\n+        - This is managed by the deserialize methods in test_framework.messages\n+    - The order of the messages\n+        - There's no reason why we can't, say, change the order of the messages in the handshake\n+    - Message Type\n+        - We can add new message types\n+\n+    We're ignoring these because they're simply too brittle to test here.\n+    \"\"\"\n+    with open(dat_file, 'rb') as f_in:",
      "path": "test/functional/p2p_peer_logging.py",
      "position": null,
      "original_position": 37,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "0547b23754b193e45ba722e555f97f2dd60dd1b5",
      "in_reply_to_id": 465770624,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I agree that the dependency on the contrib directory is a drawback, but then on the other hand we already have a test importing from contrib: `feature_loadblock.py` (uses `contrib/linearize` scripts). Is there really a need to run functional tests without the other sources available? They are all part of the same repository.",
      "created_at": "2020-08-06T10:30:26Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r466318870",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466318870"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466323684",
      "pull_request_review_id": 462404054,
      "id": 466323684,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMyMzY4NA==",
      "diff_hunk": "@@ -0,0 +1,70 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test node peer logging capability.\n+\n+Additionally, the output of contrib/peer-logging/peer-logging-parser.py should be verified manually.\n+\"\"\"\n+\n+import glob\n+from io import BytesIO\n+import os\n+\n+from test_framework.mininode import P2PDataStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+COMMAND_SIZE = 12\n+\n+def mini_parser(dat_file):\n+    \"\"\"Parse a data file created by LogMessage.\n+\n+    From the data file we'll only check the structure.\n+\n+    We won't care about things like:\n+    - Deserializing the payload of the message\n+        - This is managed by the deserialize methods in test_framework.messages\n+    - The order of the messages\n+        - There's no reason why we can't, say, change the order of the messages in the handshake\n+    - Message Type\n+        - We can add new message types\n+\n+    We're ignoring these because they're simply too brittle to test here.\n+    \"\"\"\n+    with open(dat_file, 'rb') as f_in:",
      "path": "test/functional/p2p_peer_logging.py",
      "position": null,
      "original_position": 37,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "0547b23754b193e45ba722e555f97f2dd60dd1b5",
      "in_reply_to_id": 465770624,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Is there really a need to run functional tests without the other sources available?\r\n\r\nYes, it's an explicit usage pattern to build out of tree and be able to run tests separately from the source directory.",
      "created_at": "2020-08-06T10:40:29Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r466323684",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466323684"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466357165",
      "pull_request_review_id": 462445547,
      "id": 466357165,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM1NzE2NQ==",
      "diff_hunk": "@@ -0,0 +1,70 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test node peer logging capability.\n+\n+Additionally, the output of contrib/peer-logging/peer-logging-parser.py should be verified manually.\n+\"\"\"\n+\n+import glob\n+from io import BytesIO\n+import os\n+\n+from test_framework.mininode import P2PDataStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+COMMAND_SIZE = 12\n+\n+def mini_parser(dat_file):\n+    \"\"\"Parse a data file created by LogMessage.\n+\n+    From the data file we'll only check the structure.\n+\n+    We won't care about things like:\n+    - Deserializing the payload of the message\n+        - This is managed by the deserialize methods in test_framework.messages\n+    - The order of the messages\n+        - There's no reason why we can't, say, change the order of the messages in the handshake\n+    - Message Type\n+        - We can add new message types\n+\n+    We're ignoring these because they're simply too brittle to test here.\n+    \"\"\"\n+    with open(dat_file, 'rb') as f_in:",
      "path": "test/functional/p2p_peer_logging.py",
      "position": null,
      "original_position": 37,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "0547b23754b193e45ba722e555f97f2dd60dd1b5",
      "in_reply_to_id": 465770624,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hm, so the usage pattern in this case is \"copy the `test/functional` folder somewhere\" and executing from there, decoupled from the repository, should still work? Still not convinced why anyone should ever want/do that (maybe I'm missing something there).",
      "created_at": "2020-08-06T11:51:25Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r466357165",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466357165"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466377977",
      "pull_request_review_id": 462472673,
      "id": 466377977,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM3Nzk3Nw==",
      "diff_hunk": "@@ -0,0 +1,70 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test node peer logging capability.\n+\n+Additionally, the output of contrib/peer-logging/peer-logging-parser.py should be verified manually.\n+\"\"\"\n+\n+import glob\n+from io import BytesIO\n+import os\n+\n+from test_framework.mininode import P2PDataStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+COMMAND_SIZE = 12\n+\n+def mini_parser(dat_file):\n+    \"\"\"Parse a data file created by LogMessage.\n+\n+    From the data file we'll only check the structure.\n+\n+    We won't care about things like:\n+    - Deserializing the payload of the message\n+        - This is managed by the deserialize methods in test_framework.messages\n+    - The order of the messages\n+        - There's no reason why we can't, say, change the order of the messages in the handshake\n+    - Message Type\n+        - We can add new message types\n+\n+    We're ignoring these because they're simply too brittle to test here.\n+    \"\"\"\n+    with open(dat_file, 'rb') as f_in:",
      "path": "test/functional/p2p_peer_logging.py",
      "position": null,
      "original_position": 37,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "0547b23754b193e45ba722e555f97f2dd60dd1b5",
      "in_reply_to_id": 465770624,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Search for \"out of tree builds\" in this repo. You'll see lots of issues/PRs for running tests out of tree.\r\n\r\n> I agree that the dependency on the contrib directory is a drawback, but then on the other hand we already have a test importing from contrib: feature_loadblock.py (uses contrib/linearize scripts).\r\n\r\nYes, and I think that's a terrible pattern that we shouldn't repeat. Importing code from contrib essentially makes those files part of the test framework.",
      "created_at": "2020-08-06T12:32:17Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r466377977",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466377977"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466392607",
      "pull_request_review_id": 462492350,
      "id": 466392607,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM5MjYwNw==",
      "diff_hunk": "@@ -3804,6 +3804,10 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     }\n     CNetMessage& msg(msgs.front());\n \n+    if (gArgs.IsArgSet(\"-logmessages\")) {\n+        LogMessage(*pfrom, msg.m_command, Span<const unsigned char>{(unsigned char*)msg.m_recv.data(), (size_t)msg.m_recv.size()}, /* incoming */ true);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "fac22eae7ce14cac4e7ab364325165ee8f7fa1ff",
      "in_reply_to_id": 466248108,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I imagine I did this because I had to, but you're right I see no reason for this cast (and clang++ agrees).  Thanks!",
      "created_at": "2020-08-06T12:58:39Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r466392607",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466392607"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3808,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466394744",
      "pull_request_review_id": 462495201,
      "id": 466394744,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM5NDc0NA==",
      "diff_hunk": "@@ -0,0 +1,121 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Parse message log binary files.  To be used in conjunction with -logmessages.\"\"\"\n+\n+import argparse\n+import os\n+import sys\n+from io import BytesIO\n+import json\n+from pathlib import Path\n+from typing import Any, List\n+\n+sys.path.append(os.path.join(os.path.dirname(__file__), '../../test/functional'))\n+\n+from test_framework.messages import ser_uint256     # noqa: E402\n+from test_framework.mininode import MESSAGEMAP      # noqa: E402\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+COMMAND_SIZE = 12",
      "path": "contrib/peer-logging/peer-logging-parser.py",
      "position": null,
      "original_position": 22,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "78959de4b410987e1b1ed07f08bb0adce52ea218",
      "in_reply_to_id": 466255925,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks for catching this!  This \"command -> message type\" switch is a monumental effort that I'm happy to be a part of.\r\n\r\nI'm going to choose `msgtype` not `msg_type` for the same reasons you did in #18610 :)",
      "created_at": "2020-08-06T13:02:08Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r466394744",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466394744"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 22,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466397116",
      "pull_request_review_id": 462498374,
      "id": 466397116,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM5NzExNg==",
      "diff_hunk": "@@ -0,0 +1,121 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Parse message log binary files.  To be used in conjunction with -logmessages.\"\"\"\n+\n+import argparse\n+import os\n+import sys\n+from io import BytesIO\n+import json\n+from pathlib import Path\n+from typing import Any, List\n+\n+sys.path.append(os.path.join(os.path.dirname(__file__), '../../test/functional'))\n+\n+from test_framework.messages import ser_uint256     # noqa: E402\n+from test_framework.mininode import MESSAGEMAP      # noqa: E402\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+COMMAND_SIZE = 12\n+\n+# The test framework classes stores hashes as large ints in many cases.\n+# There isn't a way to distinguish between a large int and a large int that is actually a blob of bytes.\n+# As such, they are itemized here\n+# (These can be easily found by looking for calls to deser_uint256, deser_uint256_vector, and uint256_from_str in messages.py)\n+HASH_INTS = [\n+    \"blockhash\",\n+    \"block_hash\",\n+    \"hash\",     # A few conflicts here\n+    \"hashMerkleRoot\",\n+    \"hashPrevBlock\",\n+    \"hashstop\",\n+    \"prev_header\",\n+    \"sha256\",\n+    \"stop_hash\",\n+]\n+\n+HASH_INT_VECTORS = [\n+    \"hashes\",\n+    \"headers\",  # One conflict here\n+    \"vHave\",\n+    \"vHash\",\n+]\n+\n+def to_jsonable(obj: Any) -> Any:\n+    if hasattr(obj, \"__dict__\"):\n+        return obj.__dict__\n+    elif hasattr(obj, \"__slots__\"):\n+        ret = {}    # type: Any\n+        for slot in obj.__slots__:\n+            val = getattr(obj, slot, None)\n+            if slot in HASH_INTS and isinstance(val, int):\n+                ret[slot] = ser_uint256(val).hex()\n+            elif slot in HASH_INT_VECTORS and isinstance(val[0], int):\n+                ret[slot] = [ser_uint256(a).hex() for a in val]\n+            else:\n+                ret[slot] = to_jsonable(val)\n+        return ret\n+    elif isinstance(obj, list):\n+        return [to_jsonable(a) for a in obj]\n+    elif isinstance(obj, bytes):\n+        return obj.hex()\n+    else:\n+        return obj\n+\n+\n+def process_file(path: Path, messages: List[Any], recv: bool) -> None:\n+    with open(path, 'rb') as f_in:\n+        while True:\n+            tmp_header_raw = f_in.read(TIME_SIZE + LENGTH_SIZE + COMMAND_SIZE)\n+            if not tmp_header_raw:\n+                break\n+            tmp_header = BytesIO(tmp_header_raw)\n+            time = int.from_bytes(tmp_header.read(TIME_SIZE), \"little\")      # type: int\n+            command = tmp_header.read(COMMAND_SIZE).split(b'\\x00', 1)[0]     # type: bytes\n+            length = int.from_bytes(tmp_header.read(LENGTH_SIZE), \"little\")  # type: int\n+            if command not in MESSAGEMAP:\n+                continue    # For now just skip unrecognized messages",
      "path": "contrib/peer-logging/peer-logging-parser.py",
      "position": null,
      "original_position": 80,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "78959de4b410987e1b1ed07f08bb0adce52ea218",
      "in_reply_to_id": 466284790,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It is, thanks!",
      "created_at": "2020-08-06T13:05:52Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r466397116",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466397116"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": 79,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 80,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466407938",
      "pull_request_review_id": 462512555,
      "id": 466407938,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQwNzkzOA==",
      "diff_hunk": "@@ -0,0 +1,121 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Parse message log binary files.  To be used in conjunction with -logmessages.\"\"\"\n+\n+import argparse\n+import os\n+import sys\n+from io import BytesIO\n+import json\n+from pathlib import Path\n+from typing import Any, List\n+\n+sys.path.append(os.path.join(os.path.dirname(__file__), '../../test/functional'))\n+\n+from test_framework.messages import ser_uint256     # noqa: E402\n+from test_framework.mininode import MESSAGEMAP      # noqa: E402\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+COMMAND_SIZE = 12\n+\n+# The test framework classes stores hashes as large ints in many cases.\n+# There isn't a way to distinguish between a large int and a large int that is actually a blob of bytes.\n+# As such, they are itemized here\n+# (These can be easily found by looking for calls to deser_uint256, deser_uint256_vector, and uint256_from_str in messages.py)\n+HASH_INTS = [\n+    \"blockhash\",\n+    \"block_hash\",\n+    \"hash\",     # A few conflicts here\n+    \"hashMerkleRoot\",\n+    \"hashPrevBlock\",\n+    \"hashstop\",\n+    \"prev_header\",\n+    \"sha256\",\n+    \"stop_hash\",\n+]\n+\n+HASH_INT_VECTORS = [\n+    \"hashes\",\n+    \"headers\",  # One conflict here\n+    \"vHave\",\n+    \"vHash\",\n+]\n+\n+def to_jsonable(obj: Any) -> Any:\n+    if hasattr(obj, \"__dict__\"):\n+        return obj.__dict__\n+    elif hasattr(obj, \"__slots__\"):\n+        ret = {}    # type: Any\n+        for slot in obj.__slots__:\n+            val = getattr(obj, slot, None)\n+            if slot in HASH_INTS and isinstance(val, int):\n+                ret[slot] = ser_uint256(val).hex()\n+            elif slot in HASH_INT_VECTORS and isinstance(val[0], int):\n+                ret[slot] = [ser_uint256(a).hex() for a in val]\n+            else:\n+                ret[slot] = to_jsonable(val)\n+        return ret\n+    elif isinstance(obj, list):\n+        return [to_jsonable(a) for a in obj]\n+    elif isinstance(obj, bytes):\n+        return obj.hex()\n+    else:\n+        return obj\n+\n+\n+def process_file(path: Path, messages: List[Any], recv: bool) -> None:\n+    with open(path, 'rb') as f_in:\n+        while True:\n+            tmp_header_raw = f_in.read(TIME_SIZE + LENGTH_SIZE + COMMAND_SIZE)\n+            if not tmp_header_raw:\n+                break\n+            tmp_header = BytesIO(tmp_header_raw)\n+            time = int.from_bytes(tmp_header.read(TIME_SIZE), \"little\")      # type: int\n+            command = tmp_header.read(COMMAND_SIZE).split(b'\\x00', 1)[0]     # type: bytes\n+            length = int.from_bytes(tmp_header.read(LENGTH_SIZE), \"little\")  # type: int\n+            if command not in MESSAGEMAP:\n+                continue    # For now just skip unrecognized messages\n+            msg = MESSAGEMAP[command]()\n+            msg.deserialize(f_in)",
      "path": "contrib/peer-logging/peer-logging-parser.py",
      "position": null,
      "original_position": 82,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "78959de4b410987e1b1ed07f08bb0adce52ea218",
      "in_reply_to_id": 466306326,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I like this a lot, thanks",
      "created_at": "2020-08-06T13:23:02Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r466407938",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466407938"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 82,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466528085",
      "pull_request_review_id": 462670289,
      "id": 466528085,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUyODA4NQ==",
      "diff_hunk": "@@ -3804,6 +3804,10 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     }\n     CNetMessage& msg(msgs.front());\n \n+    if (gArgs.IsArgSet(\"-logmessages\")) {\n+        LogMessage(*pfrom, msg.m_command, Span<const unsigned char>{(unsigned char*)msg.m_recv.data(), msg.m_recv.size()}, /* incoming */ true);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "6f0e88752d9dcfe551d618e7afb09fd2063fc050",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sorry that I didn't noticed on the earlier review today, but: if you rebase on master, this will unlock you the nice `MakeUCharSpan` (see commit e63dcc3a6752e7d406e7a650c2d6c2e95cd39aab, introduced with PR #19326 that was merged 3 days ago), not needing to cast anything anymore. :tada: ",
      "created_at": "2020-08-06T16:15:27Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r466528085",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466528085"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3808,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466988386",
      "pull_request_review_id": 463245822,
      "id": 466988386,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk4ODM4Ng==",
      "diff_hunk": "@@ -0,0 +1,70 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test node peer logging capability.\n+\n+Additionally, the output of contrib/peer-logging/peer-logging-parser.py should be verified manually.\n+\"\"\"\n+\n+import glob\n+from io import BytesIO\n+import os\n+\n+from test_framework.mininode import P2PDataStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+COMMAND_SIZE = 12\n+\n+def mini_parser(dat_file):\n+    \"\"\"Parse a data file created by LogMessage.\n+\n+    From the data file we'll only check the structure.\n+\n+    We won't care about things like:\n+    - Deserializing the payload of the message\n+        - This is managed by the deserialize methods in test_framework.messages\n+    - The order of the messages\n+        - There's no reason why we can't, say, change the order of the messages in the handshake\n+    - Message Type\n+        - We can add new message types\n+\n+    We're ignoring these because they're simply too brittle to test here.\n+    \"\"\"\n+    with open(dat_file, 'rb') as f_in:",
      "path": "test/functional/p2p_peer_logging.py",
      "position": null,
      "original_position": 37,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "0547b23754b193e45ba722e555f97f2dd60dd1b5",
      "in_reply_to_id": 465770624,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "To my understanding the primary point of out of tree builds is separation between the _build artifacts_ (i.e. everything spit out by `make`, like binaries, manpages etc.) and the source folder. I guess our disagreement stems from the fact that in your view, `contrib` is part of the source folder, while in my view it isn't -- it only contains scripts and no compilation units, hence no ending up in an (out of tree) build folder. That could change in the future though, so I can see your point.",
      "created_at": "2020-08-07T11:43:51Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r466988386",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466988386"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466989983",
      "pull_request_review_id": 463247867,
      "id": 466989983,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk4OTk4Mw==",
      "diff_hunk": "@@ -0,0 +1,70 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test node peer logging capability.\n+\n+Additionally, the output of contrib/peer-logging/peer-logging-parser.py should be verified manually.\n+\"\"\"\n+\n+import glob\n+from io import BytesIO\n+import os\n+\n+from test_framework.mininode import P2PDataStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+COMMAND_SIZE = 12\n+\n+def mini_parser(dat_file):\n+    \"\"\"Parse a data file created by LogMessage.\n+\n+    From the data file we'll only check the structure.\n+\n+    We won't care about things like:\n+    - Deserializing the payload of the message\n+        - This is managed by the deserialize methods in test_framework.messages\n+    - The order of the messages\n+        - There's no reason why we can't, say, change the order of the messages in the handshake\n+    - Message Type\n+        - We can add new message types\n+\n+    We're ignoring these because they're simply too brittle to test here.\n+    \"\"\"\n+    with open(dat_file, 'rb') as f_in:",
      "path": "test/functional/p2p_peer_logging.py",
      "position": null,
      "original_position": 37,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "0547b23754b193e45ba722e555f97f2dd60dd1b5",
      "in_reply_to_id": 465770624,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The functional test scripts itself live in the *source* directory. The build directory has a symlink to it. As long as the script in contrib is also symlinked to the build dir, this should not affect out-of-tree builds at all. And all ci scripts use out-of-tree builds, so if this lead to issues, it would be noticed immediately.",
      "created_at": "2020-08-07T11:47:58Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r466989983",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466989983"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467258687",
      "pull_request_review_id": 463598152,
      "id": 467258687,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI1ODY4Nw==",
      "diff_hunk": "@@ -3804,6 +3804,10 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     }\n     CNetMessage& msg(msgs.front());\n \n+    if (gArgs.IsArgSet(\"-logmessages\")) {\n+        LogMessage(*pfrom, msg.m_command, Span<const unsigned char>{(unsigned char*)msg.m_recv.data(), msg.m_recv.size()}, /* incoming */ true);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "6f0e88752d9dcfe551d618e7afb09fd2063fc050",
      "in_reply_to_id": 466528085,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, I'll do this!  Another upcoming improvement is #19660, but I'll try and leave that for a follow-up as not to increase the scope too far here.",
      "created_at": "2020-08-07T20:40:08Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r467258687",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467258687"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3808,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467259378",
      "pull_request_review_id": 463599041,
      "id": 467259378,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI1OTM3OA==",
      "diff_hunk": "@@ -0,0 +1,70 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test node peer logging capability.\n+\n+Additionally, the output of contrib/peer-logging/peer-logging-parser.py should be verified manually.\n+\"\"\"\n+\n+import glob\n+from io import BytesIO\n+import os\n+\n+from test_framework.mininode import P2PDataStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+COMMAND_SIZE = 12\n+\n+def mini_parser(dat_file):\n+    \"\"\"Parse a data file created by LogMessage.\n+\n+    From the data file we'll only check the structure.\n+\n+    We won't care about things like:\n+    - Deserializing the payload of the message\n+        - This is managed by the deserialize methods in test_framework.messages\n+    - The order of the messages\n+        - There's no reason why we can't, say, change the order of the messages in the handshake\n+    - Message Type\n+        - We can add new message types\n+\n+    We're ignoring these because they're simply too brittle to test here.\n+    \"\"\"\n+    with open(dat_file, 'rb') as f_in:",
      "path": "test/functional/p2p_peer_logging.py",
      "position": null,
      "original_position": 37,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "0547b23754b193e45ba722e555f97f2dd60dd1b5",
      "in_reply_to_id": 465770624,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've elaborated on why I did this [below](https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-669945057).  If anyone is still against this choice, please let me know!",
      "created_at": "2020-08-07T20:41:54Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r467259378",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467259378"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/472436516",
      "pull_request_review_id": 469767134,
      "id": 472436516,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQzNjUxNg==",
      "diff_hunk": "@@ -0,0 +1,70 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test per-peer message logging capability.\n+\n+Additionally, the output of contrib/message-logging/message-logging-parser.py should be verified manually.\n+\"\"\"\n+\n+import glob\n+from io import BytesIO\n+import os\n+\n+from test_framework.mininode import P2PDataStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+MSGTYPE_SIZE = 12\n+\n+def mini_parser(dat_file):\n+    \"\"\"Parse a data file created by LogMessage.\n+\n+    From the data file we'll only check the structure.\n+\n+    We won't care about things like:\n+    - Deserializing the payload of the message\n+        - This is managed by the deserialize methods in test_framework.messages\n+    - The order of the messages\n+        - There's no reason why we can't, say, change the order of the messages in the handshake\n+    - Message Type\n+        - We can add new message types\n+\n+    We're ignoring these because they're simply too brittle to test here.\n+    \"\"\"\n+    with open(dat_file, 'rb') as f_in:\n+        while True:\n+            tmp_header_raw = f_in.read(TIME_SIZE + LENGTH_SIZE + MSGTYPE_SIZE)\n+            if not tmp_header_raw:\n+                break\n+            tmp_header = BytesIO(tmp_header_raw)\n+            time = int.from_bytes(tmp_header.read(TIME_SIZE), \"little\")      # type: int\n+            assert(time >= 1231006505000000)   # genesis block timestamp\n+            msgtype = tmp_header.read(MSGTYPE_SIZE).split(b'\\x00', 1)[0]     # type: bytes\n+            assert(len(msgtype) > 0)\n+            length = int.from_bytes(tmp_header.read(LENGTH_SIZE), \"little\")  # type: int\n+            data = f_in.read(length)\n+            assert_equal(len(data), length)\n+\n+\n+class MessageLoggingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[\"-logmessages\"]]\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        logdir = os.path.join(self.nodes[0].datadir, \"regtest/message_logging\")\n+        # Connect an disconnect a node so that the handshake occurs",
      "path": "test/functional/p2p_message_logging.py",
      "position": null,
      "original_position": 60,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "4fc2e3906377991a05f78a938c0aa2f04056b81c",
      "in_reply_to_id": null,
      "user": {
        "login": "adamjonas",
        "id": 755825,
        "node_id": "MDQ6VXNlcjc1NTgyNQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/755825?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/adamjonas",
        "html_url": "https://github.com/adamjonas",
        "followers_url": "https://api.github.com/users/adamjonas/followers",
        "following_url": "https://api.github.com/users/adamjonas/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/adamjonas/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/adamjonas/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/adamjonas/subscriptions",
        "organizations_url": "https://api.github.com/users/adamjonas/orgs",
        "repos_url": "https://api.github.com/users/adamjonas/repos",
        "events_url": "https://api.github.com/users/adamjonas/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/adamjonas/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n        # Connect and disconnect a node so that the handshake occurs\r\n```",
      "created_at": "2020-08-18T19:41:17Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r472436516",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/472436516"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/472545184",
      "pull_request_review_id": 469892791,
      "id": 472545184,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU0NTE4NA==",
      "diff_hunk": "@@ -0,0 +1,127 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Parse message log binary files.  To be used in conjunction with -logmessages.\"\"\"\n+\n+import argparse\n+import os\n+import sys\n+from io import BytesIO\n+import json\n+from pathlib import Path\n+from typing import Any, List\n+\n+sys.path.append(os.path.join(os.path.dirname(__file__), '../../test/functional'))\n+\n+from test_framework.messages import ser_uint256     # noqa: E402\n+from test_framework.mininode import MESSAGEMAP      # noqa: E402\n+from test_framework.util import assert_equal        # noqa: E402\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+MSGTYPE_SIZE = 12\n+\n+# The test framework classes stores hashes as large ints in many cases.\n+# There isn't a way to distinguish between a large int and a large int that is actually a blob of bytes.\n+# As such, they are itemized here\n+# (These can be easily found by looking for calls to deser_uint256, deser_uint256_vector, and uint256_from_str in messages.py)\n+HASH_INTS = [\n+    \"blockhash\",\n+    \"block_hash\",\n+    \"hash\",     # A few conflicts here",
      "path": "contrib/message-logging/message-logging-parser.py",
      "position": null,
      "original_position": 32,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "0d10af73df19de62726065cb63c123fda8c237b1",
      "in_reply_to_id": null,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "conflicts with what? ",
      "created_at": "2020-08-18T23:18:18Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r472545184",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/472545184"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/472549706",
      "pull_request_review_id": 469892791,
      "id": 472549706,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU0OTcwNg==",
      "diff_hunk": "@@ -0,0 +1,70 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test per-peer message logging capability.\n+\n+Additionally, the output of contrib/message-logging/message-logging-parser.py should be verified manually.\n+\"\"\"\n+\n+import glob\n+from io import BytesIO\n+import os\n+\n+from test_framework.mininode import P2PDataStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+MSGTYPE_SIZE = 12\n+\n+def mini_parser(dat_file):\n+    \"\"\"Parse a data file created by LogMessage.\n+\n+    From the data file we'll only check the structure.\n+\n+    We won't care about things like:\n+    - Deserializing the payload of the message\n+        - This is managed by the deserialize methods in test_framework.messages\n+    - The order of the messages\n+        - There's no reason why we can't, say, change the order of the messages in the handshake\n+    - Message Type\n+        - We can add new message types\n+\n+    We're ignoring these because they're simply too brittle to test here.\n+    \"\"\"\n+    with open(dat_file, 'rb') as f_in:\n+        while True:\n+            tmp_header_raw = f_in.read(TIME_SIZE + LENGTH_SIZE + MSGTYPE_SIZE)\n+            if not tmp_header_raw:\n+                break\n+            tmp_header = BytesIO(tmp_header_raw)\n+            time = int.from_bytes(tmp_header.read(TIME_SIZE), \"little\")      # type: int\n+            assert(time >= 1231006505000000)   # genesis block timestamp\n+            msgtype = tmp_header.read(MSGTYPE_SIZE).split(b'\\x00', 1)[0]     # type: bytes\n+            assert(len(msgtype) > 0)\n+            length = int.from_bytes(tmp_header.read(LENGTH_SIZE), \"little\")  # type: int\n+            data = f_in.read(length)\n+            assert_equal(len(data), length)\n+\n+\n+class MessageLoggingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[\"-logmessages\"]]\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        logdir = os.path.join(self.nodes[0].datadir, \"regtest/message_logging\")\n+        # Connect an disconnect a node so that the handshake occurs\n+        self.nodes[0].add_p2p_connection(P2PDataStore())\n+        self.nodes[0].disconnect_p2ps()",
      "path": "test/functional/p2p_message_logging.py",
      "position": null,
      "original_position": 62,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "4fc2e3906377991a05f78a938c0aa2f04056b81c",
      "in_reply_to_id": null,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm not following why this `disconnect_p2ps()` is needed here. The comment above says \"so that the handshake occurs\", but this doesn't clarify anything for me. do you mean the version handshake? why do we need to disconnect for the version handshake to occur?\r\n\r\nmy understanding of this test is that it parses through the sent & received data files to check the structure of each recorded message is valid. I added some logging to see what message types are recorded & from what I can tell its the same whether or not we disconnect. am I missing something? ",
      "created_at": "2020-08-18T23:31:47Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r472549706",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/472549706"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 62,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/472551723",
      "pull_request_review_id": 469900074,
      "id": 472551723,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU1MTcyMw==",
      "diff_hunk": "@@ -2811,18 +2811,17 @@ void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n         pnode->mapSendBytesPerMsgCmd[msg.m_type] += nTotalSize;\n         pnode->nSendSize += nTotalSize;\n \n-        if (pnode->nSendSize > nSendBufferMaxSize)\n-            pnode->fPauseSend = true;\n+        if (pnode->nSendSize > nSendBufferMaxSize) pnode->fPauseSend = true;",
      "path": "src/net.cpp",
      "position": 16,
      "original_position": 6,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "cbb154e5d5b001b8e940be49a9692e2f6e27e29c",
      "in_reply_to_id": 459072714,
      "user": {
        "login": "narula",
        "id": 177646,
        "node_id": "MDQ6VXNlcjE3NzY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/177646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/narula",
        "html_url": "https://github.com/narula",
        "followers_url": "https://api.github.com/users/narula/followers",
        "following_url": "https://api.github.com/users/narula/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/narula/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/narula/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/narula/subscriptions",
        "organizations_url": "https://api.github.com/users/narula/orgs",
        "repos_url": "https://api.github.com/users/narula/repos",
        "events_url": "https://api.github.com/users/narula/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/narula/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Might you add something to this affect to the commit title so people know that? I didn't get that from reading \"Clean PushMessage and ProcessMessages\". Maybe \"Whitespace only changes in PushMessage and ProcessMessages\"",
      "created_at": "2020-08-18T23:38:09Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r472551723",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/472551723"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2885,
      "original_line": 2885,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/472555719",
      "pull_request_review_id": 469904528,
      "id": 472555719,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU1NTcxOQ==",
      "diff_hunk": "@@ -2880,3 +2880,23 @@ uint64_t CConnman::CalculateKeyedNetGroup(const CAddress& ad) const\n \n     return GetDeterministicRandomizer(RANDOMIZER_ID_NETGROUP).Write(vchNetGroup.data(), vchNetGroup.size()).Finalize();\n }\n+\n+void LogMessage(const CNode& node, const std::string& msg_type, const Span<const unsigned char>& data, bool is_incoming)\n+{\n+    auto time = GetTime<std::chrono::microseconds>();\n+\n+    fs::path base_path = GetDataDir() / \"message_logging\" / node.addr.ToString();\n+    fs::create_directories(base_path);\n+\n+    fs::path path = base_path / (is_incoming ? \"msgs_recv.dat\" : \"msgs_sent.dat\");",
      "path": "src/net.cpp",
      "position": 53,
      "original_position": 12,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "ac953a3773aa5e940976a79276894f5e892d1c55",
      "in_reply_to_id": null,
      "user": {
        "login": "narula",
        "id": 177646,
        "node_id": "MDQ6VXNlcjE3NzY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/177646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/narula",
        "html_url": "https://github.com/narula",
        "followers_url": "https://api.github.com/users/narula/followers",
        "following_url": "https://api.github.com/users/narula/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/narula/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/narula/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/narula/subscriptions",
        "organizations_url": "https://api.github.com/users/narula/orgs",
        "repos_url": "https://api.github.com/users/narula/repos",
        "events_url": "https://api.github.com/users/narula/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/narula/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think \".dat\" is the right extension. These are logs, not data, and should end in \".log\".",
      "created_at": "2020-08-18T23:51:36Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r472555719",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/472555719"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2951,
      "original_line": 2951,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/472923476",
      "pull_request_review_id": 470322406,
      "id": 472923476,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkyMzQ3Ng==",
      "diff_hunk": "@@ -0,0 +1,92 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Parse message log binary files.  To be used in conjunction with -logmessages.\"\"\"\n+\n+import argparse\n+import os\n+import sys\n+from io import BytesIO\n+import json\n+from pathlib import Path\n+from typing import Any, List\n+\n+sys.path.append(os.path.join(os.path.dirname(__file__), '../../test/functional'))\n+\n+from test_framework.mininode import MESSAGEMAP  # noqa: E402\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+COMMAND_SIZE = 12\n+\n+def to_jsonable(obj: Any) -> Any:\n+    ret = {}    # type: Any\n+    # The msg objects don't generally include \"msgtype\" in their __slots__\n+    if hasattr(obj, \"msgtype\"):\n+        ret[\"msgtype\"] = getattr(obj, \"msgtype\", None).decode()\n+    if hasattr(obj, \"__dict__\"):\n+        ret = obj.__dict__\n+    elif hasattr(obj, \"__slots__\"):\n+        for slot in obj.__slots__:\n+            val = getattr(obj, slot, None)\n+            ret[slot] = to_jsonable(val)\n+    elif isinstance(obj, list):\n+        ret = [to_jsonable(a) for a in obj]\n+    elif isinstance(obj, bytes):\n+        ret = obj.hex()\n+    else:\n+        ret = obj\n+    return ret\n+\n+\n+def process_file(path: Path, messages: List[Any], recv: bool) -> None:\n+    with open(path, 'rb') as f_in:\n+        while True:\n+            tmp_header_raw = f_in.read(TIME_SIZE + LENGTH_SIZE + COMMAND_SIZE)\n+            if not tmp_header_raw:\n+                break\n+            tmp_header = BytesIO(tmp_header_raw)\n+            time = int.from_bytes(tmp_header.read(TIME_SIZE), \"little\") # type: int",
      "path": "contrib/peer-logging/peer-logging-parser.py",
      "position": null,
      "original_position": 50,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "6095431033a3590fa74761f1bfede4c68a032a88",
      "in_reply_to_id": 463725672,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "at HEAD 4fc2e3906, there are still a number of misformatted inline comments and a few other nits that you would see by running the new python files through pycodestyle and black (with black, I tend to ignore the single-to-double quote changes and some of the newlines for brackets, but otherwise it's useful)",
      "created_at": "2020-08-19T10:22:03Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r472923476",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/472923476"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/472931626",
      "pull_request_review_id": 470332650,
      "id": 472931626,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkzMTYyNg==",
      "diff_hunk": "@@ -2830,18 +2830,17 @@ void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n         pnode->mapSendBytesPerMsgCmd[msg.m_type] += nTotalSize;\n         pnode->nSendSize += nTotalSize;\n \n-        if (pnode->nSendSize > nSendBufferMaxSize)\n-            pnode->fPauseSend = true;\n+        if (pnode->nSendSize > nSendBufferMaxSize) pnode->fPauseSend = true;\n+        if (gArgs.IsArgSet(\"-logmessages\")) {\n+            LogMessage(*pnode, msg.m_type, MakeSpan(msg.data), /* incoming */ false);",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "4fc2e3906377991a05f78a938c0aa2f04056b81c",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Could this be moved to the start of the function right after the `LogPrint(BCLog::NET, â€¦)` call to a.) avoid being run while we're holding `pnode->cs_vSend` (which we don't need for logging), and b.) make sure all `sending %s (%d bytes) peer=%d``BCLog::NET` debug log entries are guaranteed to have a corresponding entry in the message capture file (in the absence of fatal logging errors)?",
      "created_at": "2020-08-19T10:37:08Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r472931626",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/472931626"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2835,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/472932199",
      "pull_request_review_id": 470333360,
      "id": 472932199,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkzMjE5OQ==",
      "diff_hunk": "@@ -3841,6 +3839,10 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     }\n     CNetMessage& msg(msgs.front());\n \n+    if (gArgs.IsArgSet(\"-logmessages\")) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 21,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "4fc2e3906377991a05f78a938c0aa2f04056b81c",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "here and in `net.cpp::2834`, this may be somewhat more robust:\r\n\r\n```diff\r\n\r\n-    if (gArgs.IsArgSet(\"-logmessages\")) {\r\n+    if (gArgs.GetBoolArg(\"-logmessages\", false)) {\r\n```\r\n\r\nsee https://github.com/bitcoin/bitcoin/pull/19089/files#diff-321303fddcf725df060981d626a05df9R619 and tests at https://github.com/bitcoin/bitcoin/pull/19089/files#diff-ff77e31823822bc143e3113aaf85d4b9R64 that iirc would fail with `IsArgSet()`",
      "created_at": "2020-08-19T10:38:06Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r472932199",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/472932199"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3842,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/472933214",
      "pull_request_review_id": 470332650,
      "id": 472933214,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkzMzIxNA==",
      "diff_hunk": "@@ -2884,3 +2883,23 @@ uint64_t CConnman::CalculateKeyedNetGroup(const CAddress& ad) const\n \n     return GetDeterministicRandomizer(RANDOMIZER_ID_NETGROUP).Write(vchNetGroup.data(), vchNetGroup.size()).Finalize();\n }\n+\n+void LogMessage(const CNode& node, const std::string& msg_type, const Span<const unsigned char>& data, bool is_incoming)",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "4fc2e3906377991a05f78a938c0aa2f04056b81c",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "To make it easier to reason about this function (and its locking requirements) from looking at the function signature, what about replacing `const CNode& node` with `const CAddress& address` since that is what is actually used (`node.addr`)?",
      "created_at": "2020-08-19T10:40:09Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r472933214",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/472933214"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2887,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/472933882",
      "pull_request_review_id": 470332650,
      "id": 472933882,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkzMzg4Mg==",
      "diff_hunk": "@@ -2880,3 +2880,23 @@ uint64_t CConnman::CalculateKeyedNetGroup(const CAddress& ad) const\n \n     return GetDeterministicRandomizer(RANDOMIZER_ID_NETGROUP).Write(vchNetGroup.data(), vchNetGroup.size()).Finalize();\n }\n+\n+void LogMessage(const CNode& node, const std::string& msg_type, const Span<const unsigned char>& data, bool is_incoming)\n+{\n+    auto time = GetTime<std::chrono::microseconds>();\n+\n+    fs::path base_path = GetDataDir() / \"message_logging\" / node.addr.ToString();\n+    fs::create_directories(base_path);\n+\n+    fs::path path = base_path / (is_incoming ? \"msgs_recv.dat\" : \"msgs_sent.dat\");",
      "path": "src/net.cpp",
      "position": 53,
      "original_position": 12,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "ac953a3773aa5e940976a79276894f5e892d1c55",
      "in_reply_to_id": 472555719,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think `.dat` is fine since this is a non-text binary file. Personally I expect files with the `.log` suffix to be enjoyable in `less` (more or less) :)",
      "created_at": "2020-08-19T10:41:22Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r472933882",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/472933882"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2951,
      "original_line": 2951,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/472965651",
      "pull_request_review_id": 470374440,
      "id": 472965651,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk2NTY1MQ==",
      "diff_hunk": "@@ -520,6 +520,7 @@ void SetupServerArgs(NodeContext& node)\n         ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-debugexclude=<category>\", strprintf(\"Exclude debugging information for a category. Can be used in conjunction with -debug=1 to output debug logs for all categories except one or more specified categories.\"), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-logips\", strprintf(\"Include IP addresses in debug output (default: %u)\", DEFAULT_LOGIPS), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-logmessages\", \"Log all p2p messages to file\", ArgsManager::ALLOW_BOOL | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "4fc2e3906377991a05f78a938c0aa2f04056b81c",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think the help should specify the `message_logging` directory location and also mention the location of and need to use the `contrib/message-logging/message-logging-parser.py` script.\r\n\r\nPerhaps also add a markdown documentation file somewhere relevant that makes sense.\r\n\r\nAll of this, along with usage info, might also usefully be in the header docstring of the parser script and make sure it shows up nicely when git grepping.",
      "created_at": "2020-08-19T11:42:17Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r472965651",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/472965651"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 535,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/472966785",
      "pull_request_review_id": 470375904,
      "id": 472966785,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk2Njc4NQ==",
      "diff_hunk": "@@ -0,0 +1,127 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Parse message log binary files.  To be used in conjunction with -logmessages.\"\"\"\n+\n+import argparse\n+import os\n+import sys\n+from io import BytesIO\n+import json\n+from pathlib import Path\n+from typing import Any, List\n+\n+sys.path.append(os.path.join(os.path.dirname(__file__), '../../test/functional'))\n+\n+from test_framework.messages import ser_uint256     # noqa: E402\n+from test_framework.mininode import MESSAGEMAP      # noqa: E402\n+from test_framework.util import assert_equal        # noqa: E402\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+MSGTYPE_SIZE = 12\n+\n+# The test framework classes stores hashes as large ints in many cases.\n+# There isn't a way to distinguish between a large int and a large int that is actually a blob of bytes.\n+# As such, they are itemized here\n+# (These can be easily found by looking for calls to deser_uint256, deser_uint256_vector, and uint256_from_str in messages.py)\n+HASH_INTS = [\n+    \"blockhash\",\n+    \"block_hash\",\n+    \"hash\",     # A few conflicts here\n+    \"hashMerkleRoot\",\n+    \"hashPrevBlock\",\n+    \"hashstop\",\n+    \"prev_header\",\n+    \"sha256\",\n+    \"stop_hash\",\n+]\n+\n+HASH_INT_VECTORS = [\n+    \"hashes\",\n+    \"headers\",  # One conflict here\n+    \"vHave\",\n+    \"vHash\",\n+]\n+\n+def to_jsonable(obj: Any) -> Any:\n+    if hasattr(obj, \"__dict__\"):\n+        return obj.__dict__\n+    elif hasattr(obj, \"__slots__\"):\n+        ret = {}    # type: Any\n+        for slot in obj.__slots__:\n+            val = getattr(obj, slot, None)\n+            if slot in HASH_INTS and isinstance(val, int):\n+                ret[slot] = ser_uint256(val).hex()\n+            elif slot in HASH_INT_VECTORS and isinstance(val[0], int):\n+                ret[slot] = [ser_uint256(a).hex() for a in val]\n+            else:\n+                ret[slot] = to_jsonable(val)\n+        return ret\n+    elif isinstance(obj, list):\n+        return [to_jsonable(a) for a in obj]\n+    elif isinstance(obj, bytes):\n+        return obj.hex()\n+    else:\n+        return obj\n+\n+\n+def process_file(path: str, messages: List[Any], recv: bool) -> None:\n+    with open(path, 'rb') as f_in:\n+        while True:\n+            tmp_header_raw = f_in.read(TIME_SIZE + LENGTH_SIZE + MSGTYPE_SIZE)\n+            if not tmp_header_raw:\n+                break\n+            tmp_header = BytesIO(tmp_header_raw)\n+            time = int.from_bytes(tmp_header.read(TIME_SIZE), \"little\")      # type: int\n+            msgtype = tmp_header.read(MSGTYPE_SIZE).split(b'\\x00', 1)[0]     # type: bytes\n+            length = int.from_bytes(tmp_header.read(LENGTH_SIZE), \"little\")  # type: int\n+            if msgtype not in MESSAGEMAP:\n+                # For now just skip unrecognized messages\n+                f_in.read(length)\n+                continue\n+            payload_start_pos = f_in.tell()\n+            msg = MESSAGEMAP[msgtype]()\n+            msg.deserialize(f_in)\n+            payload_length = f_in.tell() - payload_start_pos\n+            assert_equal(length, payload_length)\n+            msg_dict = {}\n+            msg_dict[\"msgtype\"] = getattr(msg, \"msgtype\", None).decode()\n+            msg_dict[\"direction\"] = \"recv\" if recv else \"sent\"\n+            msg_dict[\"time\"] = time\n+            msg_dict[\"size\"] = length   # \"size\" is less readable here, but more readable in the output\n+            if length:\n+                msg_dict[\"body\"] = to_jsonable(msg)\n+            messages.append(msg_dict)\n+\n+\n+def main():\n+    \"\"\"Main\"\"\"\n+    parser = argparse.ArgumentParser(\n+        description=__doc__,\n+        epilog=\"EXAMPLE \\n\\t{0} -o out.json <data-dir>/message_logging/**/*.dat\".format(sys.argv[0]),\n+        formatter_class=argparse.RawTextHelpFormatter)\n+    parser.add_argument(\n+        \"logpaths\", nargs='+',\n+        help=\"binary message dump files to parse.\")\n+    parser.add_argument(\"-o\", \"--output\", help=\"output file.  If unset print to stdout\")\n+    args = parser.parse_args()\n+    logpaths = [Path.cwd() / Path(logpath) for logpath in args.logpaths]\n+    output = Path.cwd() / Path(args.output) if args.output else False\n+\n+    messages = []   # type: List[Any]\n+    for log in logpaths:\n+        process_file(str(log), messages, \"recv\" in log.stem)\n+\n+    messages.sort(key=lambda msg: msg['time'])\n+\n+    jsonrep = json.dumps(messages)\n+    if output:\n+        with open(str(output), 'w+', encoding=\"utf8\") as f_out:\n+            f_out.write(jsonrep)\n+    else:\n+        print(jsonrep)",
      "path": "contrib/message-logging/message-logging-parser.py",
      "position": null,
      "original_position": 124,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "4fc2e3906377991a05f78a938c0aa2f04056b81c",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "There may be a better way to do it, but I found the stdout to be much more readable with:\r\n```diff\r\n import os\r\n+import pprint\r\n import sys\r\n...\r\n-        print(jsonrep)\r\n+        pprint.pprint(jsonrep)\r\n```\r\nThere seems to be a formatting issue due to unescaped double quotes, however.",
      "created_at": "2020-08-19T11:44:31Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r472966785",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/472966785"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 173,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/473013742",
      "pull_request_review_id": 470436384,
      "id": 473013742,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAxMzc0Mg==",
      "diff_hunk": "@@ -2880,3 +2880,23 @@ uint64_t CConnman::CalculateKeyedNetGroup(const CAddress& ad) const\n \n     return GetDeterministicRandomizer(RANDOMIZER_ID_NETGROUP).Write(vchNetGroup.data(), vchNetGroup.size()).Finalize();\n }\n+\n+void LogMessage(const CNode& node, const std::string& msg_type, const Span<const unsigned char>& data, bool is_incoming)\n+{\n+    auto time = GetTime<std::chrono::microseconds>();\n+\n+    fs::path base_path = GetDataDir() / \"message_logging\" / node.addr.ToString();\n+    fs::create_directories(base_path);\n+\n+    fs::path path = base_path / (is_incoming ? \"msgs_recv.dat\" : \"msgs_sent.dat\");",
      "path": "src/net.cpp",
      "position": 53,
      "original_position": 12,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "ac953a3773aa5e940976a79276894f5e892d1c55",
      "in_reply_to_id": 472555719,
      "user": {
        "login": "narula",
        "id": 177646,
        "node_id": "MDQ6VXNlcjE3NzY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/177646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/narula",
        "html_url": "https://github.com/narula",
        "followers_url": "https://api.github.com/users/narula/followers",
        "following_url": "https://api.github.com/users/narula/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/narula/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/narula/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/narula/subscriptions",
        "organizations_url": "https://api.github.com/users/narula/orgs",
        "repos_url": "https://api.github.com/users/narula/repos",
        "events_url": "https://api.github.com/users/narula/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/narula/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, please disregard my comment, I misunderstood!",
      "created_at": "2020-08-19T13:06:12Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r473013742",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/473013742"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2951,
      "original_line": 2951,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/473136113",
      "pull_request_review_id": 470599778,
      "id": 473136113,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEzNjExMw==",
      "diff_hunk": "@@ -0,0 +1,70 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test per-peer message logging capability.\n+\n+Additionally, the output of contrib/message-logging/message-logging-parser.py should be verified manually.\n+\"\"\"\n+\n+import glob\n+from io import BytesIO\n+import os\n+\n+from test_framework.mininode import P2PDataStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+MSGTYPE_SIZE = 12\n+\n+def mini_parser(dat_file):\n+    \"\"\"Parse a data file created by LogMessage.\n+\n+    From the data file we'll only check the structure.\n+\n+    We won't care about things like:\n+    - Deserializing the payload of the message\n+        - This is managed by the deserialize methods in test_framework.messages\n+    - The order of the messages\n+        - There's no reason why we can't, say, change the order of the messages in the handshake\n+    - Message Type\n+        - We can add new message types\n+\n+    We're ignoring these because they're simply too brittle to test here.\n+    \"\"\"\n+    with open(dat_file, 'rb') as f_in:\n+        while True:\n+            tmp_header_raw = f_in.read(TIME_SIZE + LENGTH_SIZE + MSGTYPE_SIZE)\n+            if not tmp_header_raw:\n+                break\n+            tmp_header = BytesIO(tmp_header_raw)\n+            time = int.from_bytes(tmp_header.read(TIME_SIZE), \"little\")      # type: int\n+            assert(time >= 1231006505000000)   # genesis block timestamp\n+            msgtype = tmp_header.read(MSGTYPE_SIZE).split(b'\\x00', 1)[0]     # type: bytes\n+            assert(len(msgtype) > 0)\n+            length = int.from_bytes(tmp_header.read(LENGTH_SIZE), \"little\")  # type: int\n+            data = f_in.read(length)\n+            assert_equal(len(data), length)\n+\n+\n+class MessageLoggingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[\"-logmessages\"]]\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        logdir = os.path.join(self.nodes[0].datadir, \"regtest/message_logging\")\n+        # Connect an disconnect a node so that the handshake occurs\n+        self.nodes[0].add_p2p_connection(P2PDataStore())\n+        self.nodes[0].disconnect_p2ps()",
      "path": "test/functional/p2p_message_logging.py",
      "position": null,
      "original_position": 62,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "4fc2e3906377991a05f78a938c0aa2f04056b81c",
      "in_reply_to_id": 472549706,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I have the same question - [by default](https://github.com/bitcoin/bitcoin/blob/e9b30126545d6ddd8772363e4079d1e4908ad117/test/functional/test_framework/test_node.py#L515), `add_p2p_connection` waits for verack.\r\n\r\nMy initial guess was that disconnecting the peer closed the files or unlocked a mutex, but I don't think this is the case ðŸ¤”  ",
      "created_at": "2020-08-19T15:55:46Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r473136113",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/473136113"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 62,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/473217347",
      "pull_request_review_id": 470705976,
      "id": 473217347,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIxNzM0Nw==",
      "diff_hunk": "@@ -0,0 +1,127 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Parse message log binary files.  To be used in conjunction with -logmessages.\"\"\"\n+\n+import argparse\n+import os\n+import sys\n+from io import BytesIO\n+import json\n+from pathlib import Path\n+from typing import Any, List\n+\n+sys.path.append(os.path.join(os.path.dirname(__file__), '../../test/functional'))\n+\n+from test_framework.messages import ser_uint256     # noqa: E402\n+from test_framework.mininode import MESSAGEMAP      # noqa: E402\n+from test_framework.util import assert_equal        # noqa: E402\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+MSGTYPE_SIZE = 12\n+\n+# The test framework classes stores hashes as large ints in many cases.\n+# There isn't a way to distinguish between a large int and a large int that is actually a blob of bytes.\n+# As such, they are itemized here\n+# (These can be easily found by looking for calls to deser_uint256, deser_uint256_vector, and uint256_from_str in messages.py)\n+HASH_INTS = [\n+    \"blockhash\",\n+    \"block_hash\",\n+    \"hash\",     # A few conflicts here\n+    \"hashMerkleRoot\",\n+    \"hashPrevBlock\",\n+    \"hashstop\",\n+    \"prev_header\",\n+    \"sha256\",\n+    \"stop_hash\",\n+]\n+\n+HASH_INT_VECTORS = [\n+    \"hashes\",\n+    \"headers\",  # One conflict here\n+    \"vHave\",\n+    \"vHash\",\n+]\n+\n+def to_jsonable(obj: Any) -> Any:\n+    if hasattr(obj, \"__dict__\"):\n+        return obj.__dict__\n+    elif hasattr(obj, \"__slots__\"):\n+        ret = {}    # type: Any\n+        for slot in obj.__slots__:\n+            val = getattr(obj, slot, None)\n+            if slot in HASH_INTS and isinstance(val, int):\n+                ret[slot] = ser_uint256(val).hex()\n+            elif slot in HASH_INT_VECTORS and isinstance(val[0], int):\n+                ret[slot] = [ser_uint256(a).hex() for a in val]\n+            else:\n+                ret[slot] = to_jsonable(val)\n+        return ret\n+    elif isinstance(obj, list):\n+        return [to_jsonable(a) for a in obj]\n+    elif isinstance(obj, bytes):\n+        return obj.hex()\n+    else:\n+        return obj\n+\n+\n+def process_file(path: str, messages: List[Any], recv: bool) -> None:\n+    with open(path, 'rb') as f_in:\n+        while True:\n+            tmp_header_raw = f_in.read(TIME_SIZE + LENGTH_SIZE + MSGTYPE_SIZE)\n+            if not tmp_header_raw:\n+                break\n+            tmp_header = BytesIO(tmp_header_raw)\n+            time = int.from_bytes(tmp_header.read(TIME_SIZE), \"little\")      # type: int\n+            msgtype = tmp_header.read(MSGTYPE_SIZE).split(b'\\x00', 1)[0]     # type: bytes\n+            length = int.from_bytes(tmp_header.read(LENGTH_SIZE), \"little\")  # type: int\n+            if msgtype not in MESSAGEMAP:\n+                # For now just skip unrecognized messages\n+                f_in.read(length)\n+                continue\n+            payload_start_pos = f_in.tell()\n+            msg = MESSAGEMAP[msgtype]()\n+            msg.deserialize(f_in)\n+            payload_length = f_in.tell() - payload_start_pos\n+            assert_equal(length, payload_length)\n+            msg_dict = {}\n+            msg_dict[\"msgtype\"] = getattr(msg, \"msgtype\", None).decode()\n+            msg_dict[\"direction\"] = \"recv\" if recv else \"sent\"\n+            msg_dict[\"time\"] = time\n+            msg_dict[\"size\"] = length   # \"size\" is less readable here, but more readable in the output\n+            if length:\n+                msg_dict[\"body\"] = to_jsonable(msg)\n+            messages.append(msg_dict)\n+\n+\n+def main():\n+    \"\"\"Main\"\"\"\n+    parser = argparse.ArgumentParser(\n+        description=__doc__,\n+        epilog=\"EXAMPLE \\n\\t{0} -o out.json <data-dir>/message_logging/**/*.dat\".format(sys.argv[0]),\n+        formatter_class=argparse.RawTextHelpFormatter)\n+    parser.add_argument(\n+        \"logpaths\", nargs='+',\n+        help=\"binary message dump files to parse.\")\n+    parser.add_argument(\"-o\", \"--output\", help=\"output file.  If unset print to stdout\")\n+    args = parser.parse_args()\n+    logpaths = [Path.cwd() / Path(logpath) for logpath in args.logpaths]\n+    output = Path.cwd() / Path(args.output) if args.output else False\n+\n+    messages = []   # type: List[Any]\n+    for log in logpaths:\n+        process_file(str(log), messages, \"recv\" in log.stem)\n+\n+    messages.sort(key=lambda msg: msg['time'])\n+\n+    jsonrep = json.dumps(messages)\n+    if output:\n+        with open(str(output), 'w+', encoding=\"utf8\") as f_out:\n+            f_out.write(jsonrep)\n+    else:\n+        print(jsonrep)",
      "path": "contrib/message-logging/message-logging-parser.py",
      "position": null,
      "original_position": 124,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "4fc2e3906377991a05f78a938c0aa2f04056b81c",
      "in_reply_to_id": 472966785,
      "user": {
        "login": "FelixWeis",
        "id": 551068,
        "node_id": "MDQ6VXNlcjU1MTA2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/551068?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/FelixWeis",
        "html_url": "https://github.com/FelixWeis",
        "followers_url": "https://api.github.com/users/FelixWeis/followers",
        "following_url": "https://api.github.com/users/FelixWeis/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/FelixWeis/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/FelixWeis/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/FelixWeis/subscriptions",
        "organizations_url": "https://api.github.com/users/FelixWeis/orgs",
        "repos_url": "https://api.github.com/users/FelixWeis/repos",
        "events_url": "https://api.github.com/users/FelixWeis/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/FelixWeis/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "or just piping trough `jq`, gives you colors too",
      "created_at": "2020-08-19T17:52:07Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r473217347",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/473217347"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 173,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/473218039",
      "pull_request_review_id": 470706828,
      "id": 473218039,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIxODAzOQ==",
      "diff_hunk": "@@ -2884,3 +2883,23 @@ uint64_t CConnman::CalculateKeyedNetGroup(const CAddress& ad) const\n \n     return GetDeterministicRandomizer(RANDOMIZER_ID_NETGROUP).Write(vchNetGroup.data(), vchNetGroup.size()).Finalize();\n }\n+\n+void LogMessage(const CNode& node, const std::string& msg_type, const Span<const unsigned char>& data, bool is_incoming)\n+{\n+    auto time = GetTime<std::chrono::microseconds>();\n+\n+    fs::path base_path = GetDataDir() / \"message_logging\" / node.addr.ToString();",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 35,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "4fc2e3906377991a05f78a938c0aa2f04056b81c",
      "in_reply_to_id": null,
      "user": {
        "login": "FelixWeis",
        "id": 551068,
        "node_id": "MDQ6VXNlcjU1MTA2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/551068?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/FelixWeis",
        "html_url": "https://github.com/FelixWeis",
        "followers_url": "https://api.github.com/users/FelixWeis/followers",
        "following_url": "https://api.github.com/users/FelixWeis/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/FelixWeis/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/FelixWeis/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/FelixWeis/subscriptions",
        "organizations_url": "https://api.github.com/users/FelixWeis/orgs",
        "repos_url": "https://api.github.com/users/FelixWeis/repos",
        "events_url": "https://api.github.com/users/FelixWeis/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/FelixWeis/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "might be an issue on windows. `:` is not a valid file name char.",
      "created_at": "2020-08-19T17:53:20Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r473218039",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/473218039"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2891,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/473223806",
      "pull_request_review_id": 470714030,
      "id": 473223806,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIyMzgwNg==",
      "diff_hunk": "@@ -520,6 +520,7 @@ void SetupServerArgs(NodeContext& node)\n         ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-debugexclude=<category>\", strprintf(\"Exclude debugging information for a category. Can be used in conjunction with -debug=1 to output debug logs for all categories except one or more specified categories.\"), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-logips\", strprintf(\"Include IP addresses in debug output (default: %u)\", DEFAULT_LOGIPS), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-logmessages\", \"Log all p2p messages to file\", ArgsManager::ALLOW_BOOL | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "4fc2e3906377991a05f78a938c0aa2f04056b81c",
      "in_reply_to_id": 472965651,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The docs could also helpfully mention that passing both send and recv files to the parser will interleave them in order.",
      "created_at": "2020-08-19T18:03:17Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r473223806",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/473223806"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 535,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/473444931",
      "pull_request_review_id": 471037212,
      "id": 473444931,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ0NDkzMQ==",
      "diff_hunk": "@@ -86,6 +87,8 @@ static const uint64_t MAX_UPLOAD_TIMEFRAME = 60 * 60 * 24;\n static const bool DEFAULT_BLOCKSONLY = false;\n /** -peertimeout default */\n static const int64_t DEFAULT_PEER_CONNECT_TIMEOUT = 60;\n+/** Number of file descriptors required for message logging **/\n+static const int NUM_FDS_MESSAGE_LOGGING = 1;",
      "path": "src/net.h",
      "position": null,
      "original_position": 19,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "4fc2e3906377991a05f78a938c0aa2f04056b81c",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Each open file should have its fd so `nMaxConnections` * 2 ?",
      "created_at": "2020-08-19T23:47:52Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r473444931",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/473444931"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/473447384",
      "pull_request_review_id": 471037212,
      "id": 473447384,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ0NzM4NA==",
      "diff_hunk": "@@ -3841,6 +3839,10 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     }\n     CNetMessage& msg(msgs.front());\n \n+    if (gArgs.IsArgSet(\"-logmessages\")) {\n+        LogMessage(*pfrom, msg.m_command, MakeUCharSpan(msg.m_recv), /* incoming */ true);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "4fc2e3906377991a05f78a938c0aa2f04056b81c",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Have you tried to fit this call in `CConnman::SocketHandler` like when we iter to increment `nSizeAdded` ? I think it would be cleaner to avoid leaking more network-level processing in a p2p protocol processing function.",
      "created_at": "2020-08-19T23:51:25Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r473447384",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/473447384"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3843,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/473895565",
      "pull_request_review_id": 471497051,
      "id": 473895565,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg5NTU2NQ==",
      "diff_hunk": "@@ -0,0 +1,127 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Parse message log binary files.  To be used in conjunction with -logmessages.\"\"\"\n+\n+import argparse\n+import os\n+import sys\n+from io import BytesIO\n+import json\n+from pathlib import Path\n+from typing import Any, List\n+\n+sys.path.append(os.path.join(os.path.dirname(__file__), '../../test/functional'))\n+\n+from test_framework.messages import ser_uint256     # noqa: E402\n+from test_framework.mininode import MESSAGEMAP      # noqa: E402\n+from test_framework.util import assert_equal        # noqa: E402\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+MSGTYPE_SIZE = 12\n+\n+# The test framework classes stores hashes as large ints in many cases.\n+# There isn't a way to distinguish between a large int and a large int that is actually a blob of bytes.\n+# As such, they are itemized here\n+# (These can be easily found by looking for calls to deser_uint256, deser_uint256_vector, and uint256_from_str in messages.py)\n+HASH_INTS = [\n+    \"blockhash\",\n+    \"block_hash\",\n+    \"hash\",     # A few conflicts here\n+    \"hashMerkleRoot\",\n+    \"hashPrevBlock\",\n+    \"hashstop\",\n+    \"prev_header\",\n+    \"sha256\",\n+    \"stop_hash\",\n+]\n+\n+HASH_INT_VECTORS = [\n+    \"hashes\",\n+    \"headers\",  # One conflict here\n+    \"vHave\",\n+    \"vHash\",\n+]\n+\n+def to_jsonable(obj: Any) -> Any:\n+    if hasattr(obj, \"__dict__\"):\n+        return obj.__dict__\n+    elif hasattr(obj, \"__slots__\"):\n+        ret = {}    # type: Any\n+        for slot in obj.__slots__:\n+            val = getattr(obj, slot, None)\n+            if slot in HASH_INTS and isinstance(val, int):\n+                ret[slot] = ser_uint256(val).hex()\n+            elif slot in HASH_INT_VECTORS and isinstance(val[0], int):\n+                ret[slot] = [ser_uint256(a).hex() for a in val]\n+            else:\n+                ret[slot] = to_jsonable(val)\n+        return ret\n+    elif isinstance(obj, list):\n+        return [to_jsonable(a) for a in obj]\n+    elif isinstance(obj, bytes):\n+        return obj.hex()\n+    else:\n+        return obj\n+\n+\n+def process_file(path: str, messages: List[Any], recv: bool) -> None:\n+    with open(path, 'rb') as f_in:\n+        while True:\n+            tmp_header_raw = f_in.read(TIME_SIZE + LENGTH_SIZE + MSGTYPE_SIZE)\n+            if not tmp_header_raw:\n+                break\n+            tmp_header = BytesIO(tmp_header_raw)\n+            time = int.from_bytes(tmp_header.read(TIME_SIZE), \"little\")      # type: int\n+            msgtype = tmp_header.read(MSGTYPE_SIZE).split(b'\\x00', 1)[0]     # type: bytes\n+            length = int.from_bytes(tmp_header.read(LENGTH_SIZE), \"little\")  # type: int\n+            if msgtype not in MESSAGEMAP:\n+                # For now just skip unrecognized messages\n+                f_in.read(length)",
      "path": "contrib/message-logging/message-logging-parser.py",
      "position": null,
      "original_position": 82,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "0d10af73df19de62726065cb63c123fda8c237b1",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "For only advancing the file pointer, the `seek` method would probably be more appropriate (see e.g. https://code-maven.com/python-seek):\r\n```suggestion\r\n                f_in.seek(length, os.SEEK_CUR)\r\n```",
      "created_at": "2020-08-20T11:19:51Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r473895565",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/473895565"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/473949673",
      "pull_request_review_id": 471568984,
      "id": 473949673,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk0OTY3Mw==",
      "diff_hunk": "@@ -0,0 +1,127 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Parse message log binary files.  To be used in conjunction with -logmessages.\"\"\"\n+\n+import argparse\n+import os\n+import sys\n+from io import BytesIO\n+import json\n+from pathlib import Path\n+from typing import Any, List\n+\n+sys.path.append(os.path.join(os.path.dirname(__file__), '../../test/functional'))\n+\n+from test_framework.messages import ser_uint256     # noqa: E402\n+from test_framework.mininode import MESSAGEMAP      # noqa: E402\n+from test_framework.util import assert_equal        # noqa: E402\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+MSGTYPE_SIZE = 12\n+\n+# The test framework classes stores hashes as large ints in many cases.\n+# There isn't a way to distinguish between a large int and a large int that is actually a blob of bytes.\n+# As such, they are itemized here\n+# (These can be easily found by looking for calls to deser_uint256, deser_uint256_vector, and uint256_from_str in messages.py)\n+HASH_INTS = [\n+    \"blockhash\",\n+    \"block_hash\",\n+    \"hash\",     # A few conflicts here",
      "path": "contrib/message-logging/message-logging-parser.py",
      "position": null,
      "original_position": 32,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "0d10af73df19de62726065cb63c123fda8c237b1",
      "in_reply_to_id": 472545184,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This part of the parser recognizes a uint256 by the name of the member.  It doesn't take into account the name of the class.  In some classes (in messages.py), `self.hash` refers to one of these \"int-encoded\" uint256s, and in others it does not.\r\n\r\ne.g.\r\nCOutPoint, `self.hash` is an \"int-encoded\" uint256\r\nCTransaction, `self.hash` is a str\r\n\r\nThis is here to justify the `isinstance(val, int)` checks in `to_jsonable` but I think it's causing more confusion than it's helping.  I'll comment this somewhere else.",
      "created_at": "2020-08-20T12:59:08Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r473949673",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/473949673"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/473957438",
      "pull_request_review_id": 471589255,
      "id": 473957438,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk1NzQzOA==",
      "diff_hunk": "@@ -0,0 +1,70 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test per-peer message logging capability.\n+\n+Additionally, the output of contrib/message-logging/message-logging-parser.py should be verified manually.\n+\"\"\"\n+\n+import glob\n+from io import BytesIO\n+import os\n+\n+from test_framework.mininode import P2PDataStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+MSGTYPE_SIZE = 12\n+\n+def mini_parser(dat_file):\n+    \"\"\"Parse a data file created by LogMessage.\n+\n+    From the data file we'll only check the structure.\n+\n+    We won't care about things like:\n+    - Deserializing the payload of the message\n+        - This is managed by the deserialize methods in test_framework.messages\n+    - The order of the messages\n+        - There's no reason why we can't, say, change the order of the messages in the handshake\n+    - Message Type\n+        - We can add new message types\n+\n+    We're ignoring these because they're simply too brittle to test here.\n+    \"\"\"\n+    with open(dat_file, 'rb') as f_in:\n+        while True:\n+            tmp_header_raw = f_in.read(TIME_SIZE + LENGTH_SIZE + MSGTYPE_SIZE)\n+            if not tmp_header_raw:\n+                break\n+            tmp_header = BytesIO(tmp_header_raw)\n+            time = int.from_bytes(tmp_header.read(TIME_SIZE), \"little\")      # type: int\n+            assert(time >= 1231006505000000)   # genesis block timestamp\n+            msgtype = tmp_header.read(MSGTYPE_SIZE).split(b'\\x00', 1)[0]     # type: bytes\n+            assert(len(msgtype) > 0)\n+            length = int.from_bytes(tmp_header.read(LENGTH_SIZE), \"little\")  # type: int\n+            data = f_in.read(length)\n+            assert_equal(len(data), length)\n+\n+\n+class MessageLoggingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[\"-logmessages\"]]\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        logdir = os.path.join(self.nodes[0].datadir, \"regtest/message_logging\")\n+        # Connect an disconnect a node so that the handshake occurs\n+        self.nodes[0].add_p2p_connection(P2PDataStore())\n+        self.nodes[0].disconnect_p2ps()",
      "path": "test/functional/p2p_message_logging.py",
      "position": null,
      "original_position": 62,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "4fc2e3906377991a05f78a938c0aa2f04056b81c",
      "in_reply_to_id": 472549706,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You're both right, it isn't needed.\r\n\r\nI thought it was just good form to disconnect the peers at the end of the test.  Makes it easier for someone to expand the test later.\r\n\r\nI'll fix the comment",
      "created_at": "2020-08-20T13:11:49Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r473957438",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/473957438"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 62,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/473978706",
      "pull_request_review_id": 471619249,
      "id": 473978706,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk3ODcwNg==",
      "diff_hunk": "@@ -3841,6 +3839,10 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     }\n     CNetMessage& msg(msgs.front());\n \n+    if (gArgs.IsArgSet(\"-logmessages\")) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 21,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "4fc2e3906377991a05f78a938c0aa2f04056b81c",
      "in_reply_to_id": 472932199,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "thanks, fixed",
      "created_at": "2020-08-20T13:34:25Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r473978706",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/473978706"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3842,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/473986877",
      "pull_request_review_id": 471626269,
      "id": 473986877,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk4Njg3Nw==",
      "diff_hunk": "@@ -2830,18 +2830,17 @@ void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n         pnode->mapSendBytesPerMsgCmd[msg.m_type] += nTotalSize;\n         pnode->nSendSize += nTotalSize;\n \n-        if (pnode->nSendSize > nSendBufferMaxSize)\n-            pnode->fPauseSend = true;\n+        if (pnode->nSendSize > nSendBufferMaxSize) pnode->fPauseSend = true;\n+        if (gArgs.IsArgSet(\"-logmessages\")) {\n+            LogMessage(*pnode, msg.m_type, MakeSpan(msg.data), /* incoming */ false);",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "4fc2e3906377991a05f78a938c0aa2f04056b81c",
      "in_reply_to_id": 472931626,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yup, it can, and I agree with you that it should be.  The locking in PushMessage is a bit of a mess, which I fix up a little in #19673.",
      "created_at": "2020-08-20T13:41:55Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r473986877",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/473986877"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2835,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/473992333",
      "pull_request_review_id": 471630854,
      "id": 473992333,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk5MjMzMw==",
      "diff_hunk": "@@ -2884,3 +2883,23 @@ uint64_t CConnman::CalculateKeyedNetGroup(const CAddress& ad) const\n \n     return GetDeterministicRandomizer(RANDOMIZER_ID_NETGROUP).Write(vchNetGroup.data(), vchNetGroup.size()).Finalize();\n }\n+\n+void LogMessage(const CNode& node, const std::string& msg_type, const Span<const unsigned char>& data, bool is_incoming)",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "4fc2e3906377991a05f78a938c0aa2f04056b81c",
      "in_reply_to_id": 472933214,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I like this, thanks.  One day LogMessage may use other attributes of a CNode, but it can be easily changed back when the time comes.  Done.",
      "created_at": "2020-08-20T13:46:54Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r473992333",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/473992333"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2887,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/474025412",
      "pull_request_review_id": 471670447,
      "id": 474025412,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDAyNTQxMg==",
      "diff_hunk": "@@ -86,6 +87,8 @@ static const uint64_t MAX_UPLOAD_TIMEFRAME = 60 * 60 * 24;\n static const bool DEFAULT_BLOCKSONLY = false;\n /** -peertimeout default */\n static const int64_t DEFAULT_PEER_CONNECT_TIMEOUT = 60;\n+/** Number of file descriptors required for message logging **/\n+static const int NUM_FDS_MESSAGE_LOGGING = 1;",
      "path": "src/net.h",
      "position": null,
      "original_position": 19,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "4fc2e3906377991a05f78a938c0aa2f04056b81c",
      "in_reply_to_id": 473444931,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "We open and close the file every time, so I think it is correct the way it is.  I intentionally didn't want to double or triple our fd usage.",
      "created_at": "2020-08-20T14:27:29Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r474025412",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/474025412"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/474029818",
      "pull_request_review_id": 471676311,
      "id": 474029818,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDAyOTgxOA==",
      "diff_hunk": "@@ -0,0 +1,70 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test per-peer message logging capability.\n+\n+Additionally, the output of contrib/message-logging/message-logging-parser.py should be verified manually.\n+\"\"\"\n+\n+import glob\n+from io import BytesIO\n+import os\n+\n+from test_framework.mininode import P2PDataStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+MSGTYPE_SIZE = 12\n+\n+def mini_parser(dat_file):\n+    \"\"\"Parse a data file created by LogMessage.\n+\n+    From the data file we'll only check the structure.\n+\n+    We won't care about things like:\n+    - Deserializing the payload of the message\n+        - This is managed by the deserialize methods in test_framework.messages\n+    - The order of the messages\n+        - There's no reason why we can't, say, change the order of the messages in the handshake\n+    - Message Type\n+        - We can add new message types\n+\n+    We're ignoring these because they're simply too brittle to test here.\n+    \"\"\"\n+    with open(dat_file, 'rb') as f_in:\n+        while True:\n+            tmp_header_raw = f_in.read(TIME_SIZE + LENGTH_SIZE + MSGTYPE_SIZE)\n+            if not tmp_header_raw:\n+                break\n+            tmp_header = BytesIO(tmp_header_raw)\n+            time = int.from_bytes(tmp_header.read(TIME_SIZE), \"little\")      # type: int\n+            assert(time >= 1231006505000000)   # genesis block timestamp\n+            msgtype = tmp_header.read(MSGTYPE_SIZE).split(b'\\x00', 1)[0]     # type: bytes\n+            assert(len(msgtype) > 0)\n+            length = int.from_bytes(tmp_header.read(LENGTH_SIZE), \"little\")  # type: int\n+            data = f_in.read(length)\n+            assert_equal(len(data), length)\n+\n+\n+class MessageLoggingTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[\"-logmessages\"]]\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        logdir = os.path.join(self.nodes[0].datadir, \"regtest/message_logging\")\n+        # Connect an disconnect a node so that the handshake occurs",
      "path": "test/functional/p2p_message_logging.py",
      "position": null,
      "original_position": 60,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "4fc2e3906377991a05f78a938c0aa2f04056b81c",
      "in_reply_to_id": 472436516,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks.  Fixed",
      "created_at": "2020-08-20T14:33:08Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r474029818",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/474029818"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/474210703",
      "pull_request_review_id": 471906213,
      "id": 474210703,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIxMDcwMw==",
      "diff_hunk": "@@ -0,0 +1,127 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Parse message log binary files.  To be used in conjunction with -logmessages.\"\"\"\n+\n+import argparse\n+import os\n+import sys\n+from io import BytesIO\n+import json\n+from pathlib import Path\n+from typing import Any, List\n+\n+sys.path.append(os.path.join(os.path.dirname(__file__), '../../test/functional'))\n+\n+from test_framework.messages import ser_uint256     # noqa: E402\n+from test_framework.mininode import MESSAGEMAP      # noqa: E402\n+from test_framework.util import assert_equal        # noqa: E402\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+MSGTYPE_SIZE = 12\n+\n+# The test framework classes stores hashes as large ints in many cases.\n+# There isn't a way to distinguish between a large int and a large int that is actually a blob of bytes.\n+# As such, they are itemized here\n+# (These can be easily found by looking for calls to deser_uint256, deser_uint256_vector, and uint256_from_str in messages.py)\n+HASH_INTS = [\n+    \"blockhash\",\n+    \"block_hash\",\n+    \"hash\",     # A few conflicts here",
      "path": "contrib/message-logging/message-logging-parser.py",
      "position": null,
      "original_position": 32,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "0d10af73df19de62726065cb63c123fda8c237b1",
      "in_reply_to_id": 472545184,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "gotcha, sounds good ",
      "created_at": "2020-08-20T19:11:50Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r474210703",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/474210703"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/474249437",
      "pull_request_review_id": 471956396,
      "id": 474249437,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI0OTQzNw==",
      "diff_hunk": "@@ -86,6 +87,8 @@ static const uint64_t MAX_UPLOAD_TIMEFRAME = 60 * 60 * 24;\n static const bool DEFAULT_BLOCKSONLY = false;\n /** -peertimeout default */\n static const int64_t DEFAULT_PEER_CONNECT_TIMEOUT = 60;\n+/** Number of file descriptors required for message logging **/\n+static const int NUM_FDS_MESSAGE_LOGGING = 1;",
      "path": "src/net.h",
      "position": null,
      "original_position": 19,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "4fc2e3906377991a05f78a938c0aa2f04056b81c",
      "in_reply_to_id": 473444931,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Right, performance not being an issue, we shouldn't bother opening/closing every time. ",
      "created_at": "2020-08-20T20:19:35Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r474249437",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/474249437"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/474807738",
      "pull_request_review_id": 472635784,
      "id": 474807738,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgwNzczOA==",
      "diff_hunk": "@@ -2884,3 +2883,23 @@ uint64_t CConnman::CalculateKeyedNetGroup(const CAddress& ad) const\n \n     return GetDeterministicRandomizer(RANDOMIZER_ID_NETGROUP).Write(vchNetGroup.data(), vchNetGroup.size()).Finalize();\n }\n+\n+void LogMessage(const CNode& node, const std::string& msg_type, const Span<const unsigned char>& data, bool is_incoming)\n+{\n+    auto time = GetTime<std::chrono::microseconds>();\n+\n+    fs::path base_path = GetDataDir() / \"message_logging\" / node.addr.ToString();",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 35,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "4fc2e3906377991a05f78a938c0aa2f04056b81c",
      "in_reply_to_id": 473218039,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, fixed to use underscores instead",
      "created_at": "2020-08-21T16:39:34Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r474807738",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/474807738"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2891,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/481088231",
      "pull_request_review_id": 479674111,
      "id": 481088231,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA4ODIzMQ==",
      "diff_hunk": "@@ -3839,6 +3839,10 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     }\n     CNetMessage& msg(msgs.front());\n \n+    if (gArgs.GetBoolArg(\"-logmessages\", false)) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "801154b36035bd8849e0f21a3c6d48f18db56293",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: Put the default in a shared const",
      "created_at": "2020-09-01T12:08:04Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r481088231",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/481088231"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3878,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/481094927",
      "pull_request_review_id": 479674111,
      "id": 481094927,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA5NDkyNw==",
      "diff_hunk": "@@ -2830,18 +2830,14 @@ void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n         pnode->mapSendBytesPerMsgCmd[msg.m_type] += nTotalSize;\n         pnode->nSendSize += nTotalSize;\n \n-        if (pnode->nSendSize > nSendBufferMaxSize)\n-            pnode->fPauseSend = true;\n+        if (pnode->nSendSize > nSendBufferMaxSize) pnode->fPauseSend = true;\n         pnode->vSendMsg.push_back(std::move(serializedHeader));\n-        if (nMessageSize)\n-            pnode->vSendMsg.push_back(std::move(msg.data));\n+        if (nMessageSize) pnode->vSendMsg.push_back(std::move(msg.data));\n \n         // If write queue empty, attempt \"optimistic write\"\n-        if (optimisticSend == true)\n-            nBytesSent = SocketSendData(pnode);\n+        if (optimisticSend == true) nBytesSent = SocketSendData(pnode);",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "b3a0e528d1128ee456258f4b265b52b7e8fbc6a6",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit\r\n```suggestion\r\n        if (optimisticSend) nBytesSent = SocketSendData(pnode);\r\n```\r\n\r\nor:\r\n```suggestion\r\n        if (node->vSendMsg.empty()) nBytesSent = SocketSendData(pnode);\r\n```\r\nand remove the bool completely. The comment already clarifies what is happening.",
      "created_at": "2020-09-01T12:20:56Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r481094927",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/481094927"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2938,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/481106188",
      "pull_request_review_id": 479674111,
      "id": 481106188,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEwNjE4OA==",
      "diff_hunk": "@@ -520,6 +520,7 @@ void SetupServerArgs(NodeContext& node)\n         ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-debugexclude=<category>\", strprintf(\"Exclude debugging information for a category. Can be used in conjunction with -debug=1 to output debug logs for all categories except one or more specified categories.\"), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-logips\", strprintf(\"Include IP addresses in debug output (default: %u)\", DEFAULT_LOGIPS), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-logmessages\", \"Log all p2p messages to file\", ArgsManager::ALLOW_BOOL | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "801154b36035bd8849e0f21a3c6d48f18db56293",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: Add info on the default setting.",
      "created_at": "2020-09-01T12:40:04Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r481106188",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/481106188"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 535,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495583680",
      "pull_request_review_id": 497088959,
      "id": 495583680,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU4MzY4MA==",
      "diff_hunk": "@@ -0,0 +1,176 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Parse message log binary files.  To be used in conjunction with -logmessages.\"\"\"\n+\n+import argparse\n+import os\n+import shutil\n+import sys\n+from io import BytesIO\n+import json\n+from pathlib import Path\n+from typing import Any, List, Optional\n+\n+sys.path.append(os.path.join(os.path.dirname(__file__), '../../test/functional'))\n+\n+from test_framework.messages import ser_uint256     # noqa: E402\n+from test_framework.mininode import MESSAGEMAP      # noqa: E402",
      "path": "contrib/message-logging/message-logging-parser.py",
      "position": null,
      "original_position": 19,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "ba68f02310c8ce4080aca8153e644634354678ab",
      "in_reply_to_id": null,
      "user": {
        "login": "michaelfolkson",
        "id": 16323900,
        "node_id": "MDQ6VXNlcjE2MzIzOTAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/16323900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/michaelfolkson",
        "html_url": "https://github.com/michaelfolkson",
        "followers_url": "https://api.github.com/users/michaelfolkson/followers",
        "following_url": "https://api.github.com/users/michaelfolkson/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/michaelfolkson/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/michaelfolkson/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/michaelfolkson/subscriptions",
        "organizations_url": "https://api.github.com/users/michaelfolkson/orgs",
        "repos_url": "https://api.github.com/users/michaelfolkson/repos",
        "events_url": "https://api.github.com/users/michaelfolkson/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/michaelfolkson/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "All `test_framework.mininode` need to be replaced by `test_framework.p2p` as of https://github.com/bitcoin/bitcoin/pull/19760",
      "created_at": "2020-09-27T15:22:48Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r495583680",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495583680"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 19,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500727575",
      "pull_request_review_id": 503512875,
      "id": 500727575,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcyNzU3NQ==",
      "diff_hunk": "@@ -3841,6 +3839,10 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     }\n     CNetMessage& msg(msgs.front());\n \n+    if (gArgs.IsArgSet(\"-logmessages\")) {\n+        LogMessage(*pfrom, msg.m_command, MakeUCharSpan(msg.m_recv), /* incoming */ true);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "4fc2e3906377991a05f78a938c0aa2f04056b81c",
      "in_reply_to_id": 473447384,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "For simplicity, and to avoid any race conditions, I've made sure to keep all calls to `LogMessage` in `MessageHandler`.",
      "created_at": "2020-10-07T04:16:26Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r500727575",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500727575"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3843,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500737999",
      "pull_request_review_id": 503525221,
      "id": 500737999,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDczNzk5OQ==",
      "diff_hunk": "@@ -2830,18 +2830,14 @@ void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n         pnode->mapSendBytesPerMsgCmd[msg.m_type] += nTotalSize;\n         pnode->nSendSize += nTotalSize;\n \n-        if (pnode->nSendSize > nSendBufferMaxSize)\n-            pnode->fPauseSend = true;\n+        if (pnode->nSendSize > nSendBufferMaxSize) pnode->fPauseSend = true;\n         pnode->vSendMsg.push_back(std::move(serializedHeader));\n-        if (nMessageSize)\n-            pnode->vSendMsg.push_back(std::move(msg.data));\n+        if (nMessageSize) pnode->vSendMsg.push_back(std::move(msg.data));\n \n         // If write queue empty, attempt \"optimistic write\"\n-        if (optimisticSend == true)\n-            nBytesSent = SocketSendData(pnode);\n+        if (optimisticSend == true) nBytesSent = SocketSendData(pnode);",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "b3a0e528d1128ee456258f4b265b52b7e8fbc6a6",
      "in_reply_to_id": 481094927,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm more than happy to do this!",
      "created_at": "2020-10-07T04:59:33Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r500737999",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500737999"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2938,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500739219",
      "pull_request_review_id": 503526682,
      "id": 500739219,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDczOTIxOQ==",
      "diff_hunk": "@@ -0,0 +1,176 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Parse message log binary files.  To be used in conjunction with -logmessages.\"\"\"\n+\n+import argparse\n+import os\n+import shutil\n+import sys\n+from io import BytesIO\n+import json\n+from pathlib import Path\n+from typing import Any, List, Optional\n+\n+sys.path.append(os.path.join(os.path.dirname(__file__), '../../test/functional'))\n+\n+from test_framework.messages import ser_uint256     # noqa: E402\n+from test_framework.mininode import MESSAGEMAP      # noqa: E402",
      "path": "contrib/message-logging/message-logging-parser.py",
      "position": null,
      "original_position": 19,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "ba68f02310c8ce4080aca8153e644634354678ab",
      "in_reply_to_id": 495583680,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks!",
      "created_at": "2020-10-07T05:03:59Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r500739219",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500739219"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 19,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501096593",
      "pull_request_review_id": 503992691,
      "id": 501096593,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA5NjU5Mw==",
      "diff_hunk": "@@ -0,0 +1,127 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Parse message log binary files.  To be used in conjunction with -logmessages.\"\"\"\n+\n+import argparse\n+import os\n+import sys\n+from io import BytesIO\n+import json\n+from pathlib import Path\n+from typing import Any, List\n+\n+sys.path.append(os.path.join(os.path.dirname(__file__), '../../test/functional'))\n+\n+from test_framework.messages import ser_uint256     # noqa: E402\n+from test_framework.mininode import MESSAGEMAP      # noqa: E402\n+from test_framework.util import assert_equal        # noqa: E402\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+MSGTYPE_SIZE = 12\n+\n+# The test framework classes stores hashes as large ints in many cases.\n+# There isn't a way to distinguish between a large int and a large int that is actually a blob of bytes.\n+# As such, they are itemized here\n+# (These can be easily found by looking for calls to deser_uint256, deser_uint256_vector, and uint256_from_str in messages.py)\n+HASH_INTS = [\n+    \"blockhash\",\n+    \"block_hash\",\n+    \"hash\",     # A few conflicts here\n+    \"hashMerkleRoot\",\n+    \"hashPrevBlock\",\n+    \"hashstop\",\n+    \"prev_header\",\n+    \"sha256\",\n+    \"stop_hash\",\n+]\n+\n+HASH_INT_VECTORS = [\n+    \"hashes\",\n+    \"headers\",  # One conflict here\n+    \"vHave\",\n+    \"vHash\",\n+]\n+\n+def to_jsonable(obj: Any) -> Any:\n+    if hasattr(obj, \"__dict__\"):\n+        return obj.__dict__\n+    elif hasattr(obj, \"__slots__\"):\n+        ret = {}    # type: Any\n+        for slot in obj.__slots__:\n+            val = getattr(obj, slot, None)\n+            if slot in HASH_INTS and isinstance(val, int):\n+                ret[slot] = ser_uint256(val).hex()\n+            elif slot in HASH_INT_VECTORS and isinstance(val[0], int):\n+                ret[slot] = [ser_uint256(a).hex() for a in val]\n+            else:\n+                ret[slot] = to_jsonable(val)\n+        return ret\n+    elif isinstance(obj, list):\n+        return [to_jsonable(a) for a in obj]\n+    elif isinstance(obj, bytes):\n+        return obj.hex()\n+    else:\n+        return obj\n+\n+\n+def process_file(path: str, messages: List[Any], recv: bool) -> None:\n+    with open(path, 'rb') as f_in:\n+        while True:\n+            tmp_header_raw = f_in.read(TIME_SIZE + LENGTH_SIZE + MSGTYPE_SIZE)\n+            if not tmp_header_raw:\n+                break\n+            tmp_header = BytesIO(tmp_header_raw)\n+            time = int.from_bytes(tmp_header.read(TIME_SIZE), \"little\")      # type: int\n+            msgtype = tmp_header.read(MSGTYPE_SIZE).split(b'\\x00', 1)[0]     # type: bytes\n+            length = int.from_bytes(tmp_header.read(LENGTH_SIZE), \"little\")  # type: int\n+            if msgtype not in MESSAGEMAP:\n+                # For now just skip unrecognized messages\n+                f_in.read(length)\n+                continue\n+            payload_start_pos = f_in.tell()\n+            msg = MESSAGEMAP[msgtype]()\n+            msg.deserialize(f_in)\n+            payload_length = f_in.tell() - payload_start_pos\n+            assert_equal(length, payload_length)\n+            msg_dict = {}\n+            msg_dict[\"msgtype\"] = getattr(msg, \"msgtype\", None).decode()\n+            msg_dict[\"direction\"] = \"recv\" if recv else \"sent\"\n+            msg_dict[\"time\"] = time\n+            msg_dict[\"size\"] = length   # \"size\" is less readable here, but more readable in the output\n+            if length:\n+                msg_dict[\"body\"] = to_jsonable(msg)\n+            messages.append(msg_dict)\n+\n+\n+def main():\n+    \"\"\"Main\"\"\"\n+    parser = argparse.ArgumentParser(\n+        description=__doc__,\n+        epilog=\"EXAMPLE \\n\\t{0} -o out.json <data-dir>/message_logging/**/*.dat\".format(sys.argv[0]),\n+        formatter_class=argparse.RawTextHelpFormatter)\n+    parser.add_argument(\n+        \"logpaths\", nargs='+',\n+        help=\"binary message dump files to parse.\")\n+    parser.add_argument(\"-o\", \"--output\", help=\"output file.  If unset print to stdout\")\n+    args = parser.parse_args()\n+    logpaths = [Path.cwd() / Path(logpath) for logpath in args.logpaths]\n+    output = Path.cwd() / Path(args.output) if args.output else False\n+\n+    messages = []   # type: List[Any]\n+    for log in logpaths:\n+        process_file(str(log), messages, \"recv\" in log.stem)\n+\n+    messages.sort(key=lambda msg: msg['time'])\n+\n+    jsonrep = json.dumps(messages)\n+    if output:\n+        with open(str(output), 'w+', encoding=\"utf8\") as f_out:\n+            f_out.write(jsonrep)\n+    else:\n+        print(jsonrep)",
      "path": "contrib/message-logging/message-logging-parser.py",
      "position": null,
      "original_position": 124,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "4fc2e3906377991a05f78a938c0aa2f04056b81c",
      "in_reply_to_id": 472966785,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think I'll leave formatting to the user!  I'll take the `jq` suggestion and add that as a note in the module docstring.",
      "created_at": "2020-10-07T15:16:32Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r501096593",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/501096593"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 173,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/504472499",
      "pull_request_review_id": 508081864,
      "id": 504472499,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ3MjQ5OQ==",
      "diff_hunk": "@@ -2930,24 +2930,19 @@ void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n     size_t nBytesSent = 0;\n     {\n         LOCK(pnode->cs_vSend);\n-        bool optimisticSend(pnode->vSendMsg.empty());\n \n         //log total amount of bytes per message type\n         pnode->mapSendBytesPerMsgCmd[msg.m_type] += nTotalSize;\n         pnode->nSendSize += nTotalSize;\n \n-        if (pnode->nSendSize > nSendBufferMaxSize)\n-            pnode->fPauseSend = true;\n+        if (pnode->nSendSize > nSendBufferMaxSize) pnode->fPauseSend = true;\n         pnode->vSendMsg.push_back(std::move(serializedHeader));\n-        if (nMessageSize)\n-            pnode->vSendMsg.push_back(std::move(msg.data));\n+        if (nMessageSize) pnode->vSendMsg.push_back(std::move(msg.data));\n \n         // If write queue empty, attempt \"optimistic write\"\n-        if (optimisticSend == true)\n-            nBytesSent = SocketSendData(pnode);\n+        if (pnode->vSendMsg.empty()) nBytesSent = SocketSendData(pnode);",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 21,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "c2f62aefabc2b00ce0ed28901d80d636b600feef",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Any reason for this behavior change?",
      "created_at": "2020-10-14T07:51:54Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r504472499",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/504472499"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2943,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/504472745",
      "pull_request_review_id": 508082166,
      "id": 504472745,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ3Mjc0NQ==",
      "diff_hunk": "@@ -2930,24 +2930,19 @@ void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n     size_t nBytesSent = 0;\n     {\n         LOCK(pnode->cs_vSend);\n-        bool optimisticSend(pnode->vSendMsg.empty());\n \n         //log total amount of bytes per message type\n         pnode->mapSendBytesPerMsgCmd[msg.m_type] += nTotalSize;\n         pnode->nSendSize += nTotalSize;\n \n-        if (pnode->nSendSize > nSendBufferMaxSize)\n-            pnode->fPauseSend = true;\n+        if (pnode->nSendSize > nSendBufferMaxSize) pnode->fPauseSend = true;\n         pnode->vSendMsg.push_back(std::move(serializedHeader));\n-        if (nMessageSize)\n-            pnode->vSendMsg.push_back(std::move(msg.data));\n+        if (nMessageSize) pnode->vSendMsg.push_back(std::move(msg.data));\n \n         // If write queue empty, attempt \"optimistic write\"\n-        if (optimisticSend == true)\n-            nBytesSent = SocketSendData(pnode);\n+        if (pnode->vSendMsg.empty()) nBytesSent = SocketSendData(pnode);",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 21,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "c2f62aefabc2b00ce0ed28901d80d636b600feef",
      "in_reply_to_id": 504472499,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Probably causing the ci failures",
      "created_at": "2020-10-14T07:52:18Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r504472745",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/504472745"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2943,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/504680940",
      "pull_request_review_id": 508351542,
      "id": 504680940,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY4MDk0MA==",
      "diff_hunk": "@@ -2930,24 +2930,19 @@ void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n     size_t nBytesSent = 0;\n     {\n         LOCK(pnode->cs_vSend);\n-        bool optimisticSend(pnode->vSendMsg.empty());\n \n         //log total amount of bytes per message type\n         pnode->mapSendBytesPerMsgCmd[msg.m_type] += nTotalSize;\n         pnode->nSendSize += nTotalSize;\n \n-        if (pnode->nSendSize > nSendBufferMaxSize)\n-            pnode->fPauseSend = true;\n+        if (pnode->nSendSize > nSendBufferMaxSize) pnode->fPauseSend = true;\n         pnode->vSendMsg.push_back(std::move(serializedHeader));\n-        if (nMessageSize)\n-            pnode->vSendMsg.push_back(std::move(msg.data));\n+        if (nMessageSize) pnode->vSendMsg.push_back(std::move(msg.data));\n \n         // If write queue empty, attempt \"optimistic write\"\n-        if (optimisticSend == true)\n-            nBytesSent = SocketSendData(pnode);\n+        if (pnode->vSendMsg.empty()) nBytesSent = SocketSendData(pnode);",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 21,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "c2f62aefabc2b00ce0ed28901d80d636b600feef",
      "in_reply_to_id": 504472499,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "c2f62aefabc2b00ce0ed28901d80d636b600feef\r\n\r\nExactly, msg.data is pushed to `vSendMsg` right above.",
      "created_at": "2020-10-14T13:34:37Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r504680940",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/504680940"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2943,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/504685058",
      "pull_request_review_id": 508351542,
      "id": 504685058,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY4NTA1OA==",
      "diff_hunk": "@@ -2985,3 +2985,27 @@ uint64_t CConnman::CalculateKeyedNetGroup(const CAddress& ad) const\n \n     return GetDeterministicRandomizer(RANDOMIZER_ID_NETGROUP).Write(vchNetGroup.data(), vchNetGroup.size()).Finalize();\n }\n+\n+void CaptureMessage(const CAddress& addr, const std::string& msg_type, const Span<const unsigned char>& data, bool is_incoming)\n+{\n+    auto time = GetTime<std::chrono::microseconds>();\n+\n+    // Windows folder names can not include a colon\n+    std::string clean_addr = addr.ToString();\n+    std::replace(clean_addr.begin(), clean_addr.end(), ':', '_');\n+\n+    fs::path base_path = GetDataDir() / \"message_capture\" / clean_addr;\n+    fs::create_directories(base_path);\n+\n+    fs::path path = base_path / (is_incoming ? \"msgs_recv.dat\" : \"msgs_sent.dat\");\n+    CAutoFile f(fsbridge::fopen(path, \"ab\"), SER_DISK, CLIENT_VERSION);",
      "path": "src/net.cpp",
      "position": 54,
      "original_position": 17,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "2dd63707380ae5cdf79a2a8d98e0133f881f9381",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "2dd63707380ae5cdf79a2a8d98e0133f881f9381\r\n\r\nI know this is a debugging feature, but file open/close for each message is kind of bad right, also because close flushes?",
      "created_at": "2020-10-14T13:40:10Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r504685058",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/504685058"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2952,
      "original_line": 2952,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/505020396",
      "pull_request_review_id": 508811939,
      "id": 505020396,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTAyMDM5Ng==",
      "diff_hunk": "@@ -2930,24 +2930,19 @@ void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n     size_t nBytesSent = 0;\n     {\n         LOCK(pnode->cs_vSend);\n-        bool optimisticSend(pnode->vSendMsg.empty());\n \n         //log total amount of bytes per message type\n         pnode->mapSendBytesPerMsgCmd[msg.m_type] += nTotalSize;\n         pnode->nSendSize += nTotalSize;\n \n-        if (pnode->nSendSize > nSendBufferMaxSize)\n-            pnode->fPauseSend = true;\n+        if (pnode->nSendSize > nSendBufferMaxSize) pnode->fPauseSend = true;\n         pnode->vSendMsg.push_back(std::move(serializedHeader));\n-        if (nMessageSize)\n-            pnode->vSendMsg.push_back(std::move(msg.data));\n+        if (nMessageSize) pnode->vSendMsg.push_back(std::move(msg.data));\n \n         // If write queue empty, attempt \"optimistic write\"\n-        if (optimisticSend == true)\n-            nBytesSent = SocketSendData(pnode);\n+        if (pnode->vSendMsg.empty()) nBytesSent = SocketSendData(pnode);",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 21,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "c2f62aefabc2b00ce0ed28901d80d636b600feef",
      "in_reply_to_id": 504472499,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'll give this a look",
      "created_at": "2020-10-14T22:24:09Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r505020396",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/505020396"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2943,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/505984756",
      "pull_request_review_id": 509964773,
      "id": 505984756,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk4NDc1Ng==",
      "diff_hunk": "@@ -2930,24 +2930,19 @@ void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n     size_t nBytesSent = 0;\n     {\n         LOCK(pnode->cs_vSend);\n-        bool optimisticSend(pnode->vSendMsg.empty());\n \n         //log total amount of bytes per message type\n         pnode->mapSendBytesPerMsgCmd[msg.m_type] += nTotalSize;\n         pnode->nSendSize += nTotalSize;\n \n-        if (pnode->nSendSize > nSendBufferMaxSize)\n-            pnode->fPauseSend = true;\n+        if (pnode->nSendSize > nSendBufferMaxSize) pnode->fPauseSend = true;\n         pnode->vSendMsg.push_back(std::move(serializedHeader));\n-        if (nMessageSize)\n-            pnode->vSendMsg.push_back(std::move(msg.data));\n+        if (nMessageSize) pnode->vSendMsg.push_back(std::move(msg.data));\n \n         // If write queue empty, attempt \"optimistic write\"\n-        if (optimisticSend == true)\n-            nBytesSent = SocketSendData(pnode);\n+        if (pnode->vSendMsg.empty()) nBytesSent = SocketSendData(pnode);",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 21,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "c2f62aefabc2b00ce0ed28901d80d636b600feef",
      "in_reply_to_id": 504472499,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yep this was silly of me, thanks for finding the bug!",
      "created_at": "2020-10-16T02:10:22Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r505984756",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/505984756"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2943,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/506003646",
      "pull_request_review_id": 509974648,
      "id": 506003646,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjAwMzY0Ng==",
      "diff_hunk": "@@ -2985,3 +2985,27 @@ uint64_t CConnman::CalculateKeyedNetGroup(const CAddress& ad) const\n \n     return GetDeterministicRandomizer(RANDOMIZER_ID_NETGROUP).Write(vchNetGroup.data(), vchNetGroup.size()).Finalize();\n }\n+\n+void CaptureMessage(const CAddress& addr, const std::string& msg_type, const Span<const unsigned char>& data, bool is_incoming)\n+{\n+    auto time = GetTime<std::chrono::microseconds>();\n+\n+    // Windows folder names can not include a colon\n+    std::string clean_addr = addr.ToString();\n+    std::replace(clean_addr.begin(), clean_addr.end(), ':', '_');\n+\n+    fs::path base_path = GetDataDir() / \"message_capture\" / clean_addr;\n+    fs::create_directories(base_path);\n+\n+    fs::path path = base_path / (is_incoming ? \"msgs_recv.dat\" : \"msgs_sent.dat\");\n+    CAutoFile f(fsbridge::fopen(path, \"ab\"), SER_DISK, CLIENT_VERSION);",
      "path": "src/net.cpp",
      "position": 54,
      "original_position": 17,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "2dd63707380ae5cdf79a2a8d98e0133f881f9381",
      "in_reply_to_id": 504685058,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm not sure that I see the disadvantage.  The alternative required using a greater number of file descriptors, which I thought was worse.",
      "created_at": "2020-10-16T02:44:28Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r506003646",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/506003646"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2952,
      "original_line": 2952,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/506402741",
      "pull_request_review_id": 510456205,
      "id": 506402741,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQwMjc0MQ==",
      "diff_hunk": "@@ -2985,3 +2985,27 @@ uint64_t CConnman::CalculateKeyedNetGroup(const CAddress& ad) const\n \n     return GetDeterministicRandomizer(RANDOMIZER_ID_NETGROUP).Write(vchNetGroup.data(), vchNetGroup.size()).Finalize();\n }\n+\n+void CaptureMessage(const CAddress& addr, const std::string& msg_type, const Span<const unsigned char>& data, bool is_incoming)\n+{\n+    auto time = GetTime<std::chrono::microseconds>();\n+\n+    // Windows folder names can not include a colon\n+    std::string clean_addr = addr.ToString();\n+    std::replace(clean_addr.begin(), clean_addr.end(), ':', '_');\n+\n+    fs::path base_path = GetDataDir() / \"message_capture\" / clean_addr;\n+    fs::create_directories(base_path);\n+\n+    fs::path path = base_path / (is_incoming ? \"msgs_recv.dat\" : \"msgs_sent.dat\");\n+    CAutoFile f(fsbridge::fopen(path, \"ab\"), SER_DISK, CLIENT_VERSION);",
      "path": "src/net.cpp",
      "position": 54,
      "original_position": 17,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "2dd63707380ae5cdf79a2a8d98e0133f881f9381",
      "in_reply_to_id": 504685058,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If measurements show that this ever becomes a problem in practice it can be tackled in a follow-up.\r\n\r\nTBH I'm much more worried about the possible file descriptor DoS vector that we would risk open up if the file descriptor were kept open.\r\n\r\nSecurity first! :)",
      "created_at": "2020-10-16T13:14:49Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r506402741",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/506402741"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2952,
      "original_line": 2952,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/523807168",
      "pull_request_review_id": 530830774,
      "id": 523807168,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzgwNzE2OA==",
      "diff_hunk": "@@ -0,0 +1,25 @@\n+# Per-Peer Message Capture\n+\n+## Purpose\n+\n+This feature allows for message capture on a per-peer basis.  It answers the simple question: \"Can I see what messages my node is sending and receiving?\"\n+\n+## Usage and Functionality\n+\n+* Run `bitcoind` with the `-capturemessage` option.\n+* Look in the `message_capture` folder in your datadir.\n+  * Typically this will be `~/.bitcoin/message_capture`.\n+  * See that there are many folders inside, one for each peer names with its IP address and port.\n+  * Inside each peer's folder there are two `.dat` files: one is for received messages (`msgs_recv.dat`) and the other is for sent messages (`msgs_sent.dat`).\n+* Run `contrib/message-capture/message-capture-parser.py` with the proper arguments.\n+  * See the `-h` option for help.\n+  * To see all messages, both sent and received, for all peers use:\n+    ```\n+    python contrib/message-capture/message-capture-parser.py -o out.json \\",
      "path": "contrib/message-capture/message-capture-docs.md",
      "position": null,
      "original_position": 18,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "2418ec658ccd2e8e033bced0f5b7c183946940ac",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: I'd just drop the `python` command part and call the script directly (also because on some systems, `python` symlinks to `python2`, not `python3`! See also https://www.python.org/dev/peps/pep-0394/), thanks to the she-bang on top of the file the right python interpreter will be called.\r\n",
      "created_at": "2020-11-15T20:10:48Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r523807168",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/523807168"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 18,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/523807480",
      "pull_request_review_id": 530830774,
      "id": 523807480,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzgwNzQ4MA==",
      "diff_hunk": "@@ -0,0 +1,25 @@\n+# Per-Peer Message Capture\n+\n+## Purpose\n+\n+This feature allows for message capture on a per-peer basis.  It answers the simple question: \"Can I see what messages my node is sending and receiving?\"\n+\n+## Usage and Functionality\n+\n+* Run `bitcoind` with the `-capturemessage` option.\n+* Look in the `message_capture` folder in your datadir.\n+  * Typically this will be `~/.bitcoin/message_capture`.\n+  * See that there are many folders inside, one for each peer names with its IP address and port.\n+  * Inside each peer's folder there are two `.dat` files: one is for received messages (`msgs_recv.dat`) and the other is for sent messages (`msgs_sent.dat`).\n+* Run `contrib/message-capture/message-capture-parser.py` with the proper arguments.\n+  * See the `-h` option for help.\n+  * To see all messages, both sent and received, for all peers use:\n+    ```\n+    python contrib/message-capture/message-capture-parser.py -o out.json \\\n+    ~/.bitcoin/message_capture/**/*.dat\n+    ```\n+  * Note:  The messages in the given `.dat` files will be interleaved in chronological order.  So, giving both received and sent `.dat` files (as above with `*.dat`) will result in all messages being interleaved in chronological order.\n+  * If an output file is not provided (i.e. the `-o` option is not used), then the output prints to `stdout`.\n+* View the resulting output.\n+  * The output file is `JSON` formatted.\n+  * Suggestion: use `jq` to view the output, with `cat out.json | jq`",
      "path": "contrib/message-capture/message-capture-docs.md",
      "position": null,
      "original_position": 25,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "2418ec658ccd2e8e033bced0f5b7c183946940ac",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: Could simply use `jq out.json` here (see also the \"The Useless Use of Cat Award\" http://porkmail.org/era/unix/award.html#cat)",
      "created_at": "2020-11-15T20:13:55Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r523807480",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/523807480"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/525552080",
      "pull_request_review_id": 532846982,
      "id": 525552080,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1MjA4MA==",
      "diff_hunk": "@@ -0,0 +1,25 @@\n+# Per-Peer Message Capture\n+\n+## Purpose\n+\n+This feature allows for message capture on a per-peer basis.  It answers the simple question: \"Can I see what messages my node is sending and receiving?\"\n+\n+## Usage and Functionality\n+\n+* Run `bitcoind` with the `-capturemessage` option.\n+* Look in the `message_capture` folder in your datadir.\n+  * Typically this will be `~/.bitcoin/message_capture`.\n+  * See that there are many folders inside, one for each peer names with its IP address and port.\n+  * Inside each peer's folder there are two `.dat` files: one is for received messages (`msgs_recv.dat`) and the other is for sent messages (`msgs_sent.dat`).\n+* Run `contrib/message-capture/message-capture-parser.py` with the proper arguments.\n+  * See the `-h` option for help.\n+  * To see all messages, both sent and received, for all peers use:\n+    ```\n+    python contrib/message-capture/message-capture-parser.py -o out.json \\\n+    ~/.bitcoin/message_capture/**/*.dat\n+    ```\n+  * Note:  The messages in the given `.dat` files will be interleaved in chronological order.  So, giving both received and sent `.dat` files (as above with `*.dat`) will result in all messages being interleaved in chronological order.\n+  * If an output file is not provided (i.e. the `-o` option is not used), then the output prints to `stdout`.\n+* View the resulting output.\n+  * The output file is `JSON` formatted.\n+  * Suggestion: use `jq` to view the output, with `cat out.json | jq`",
      "path": "contrib/message-capture/message-capture-docs.md",
      "position": null,
      "original_position": 25,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "2418ec658ccd2e8e033bced0f5b7c183946940ac",
      "in_reply_to_id": 523807480,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks for the link :)\r\n\r\n`cat foo.txt | less` is so common I once saw the suggestion to set a shell alias:\r\n`alias L='| less'`\r\nso that you can run `cat foo.txt L`!",
      "created_at": "2020-11-17T21:58:18Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r525552080",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/525552080"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/525559389",
      "pull_request_review_id": 532856303,
      "id": 525559389,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1OTM4OQ==",
      "diff_hunk": "@@ -0,0 +1,25 @@\n+# Per-Peer Message Capture\n+\n+## Purpose\n+\n+This feature allows for message capture on a per-peer basis.  It answers the simple question: \"Can I see what messages my node is sending and receiving?\"\n+\n+## Usage and Functionality\n+\n+* Run `bitcoind` with the `-capturemessage` option.\n+* Look in the `message_capture` folder in your datadir.\n+  * Typically this will be `~/.bitcoin/message_capture`.\n+  * See that there are many folders inside, one for each peer names with its IP address and port.\n+  * Inside each peer's folder there are two `.dat` files: one is for received messages (`msgs_recv.dat`) and the other is for sent messages (`msgs_sent.dat`).\n+* Run `contrib/message-capture/message-capture-parser.py` with the proper arguments.\n+  * See the `-h` option for help.\n+  * To see all messages, both sent and received, for all peers use:\n+    ```\n+    python contrib/message-capture/message-capture-parser.py -o out.json \\",
      "path": "contrib/message-capture/message-capture-docs.md",
      "position": null,
      "original_position": 18,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "2418ec658ccd2e8e033bced0f5b7c183946940ac",
      "in_reply_to_id": 523807168,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thank you again for the link.  I'm so used to having python environment problems that I've always tried to be as explicit as possible when running python scripts.  Since switching to conda I haven't had any problems, and I'm sure other people have things figured out as well (Either they only have one python install or they use an environment manager too).  I'll make this change.",
      "created_at": "2020-11-17T22:12:30Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r525559389",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/525559389"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 18,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/525840678",
      "pull_request_review_id": 533134376,
      "id": 525840678,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg0MDY3OA==",
      "diff_hunk": "@@ -0,0 +1,174 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Parse message capture binary files.  To be used in conjunction with -capturemessages.\"\"\"\n+\n+import argparse\n+import os\n+import shutil\n+import sys\n+from io import BytesIO\n+import json\n+from pathlib import Path\n+from typing import Any, List, Optional\n+\n+sys.path.append(os.path.join(os.path.dirname(__file__), '../../test/functional'))\n+\n+from test_framework.messages import ser_uint256     # noqa: E402\n+from test_framework.p2p import MESSAGEMAP           # noqa: E402\n+from test_framework.util import assert_equal        # noqa: E402",
      "path": "contrib/message-capture/message-capture-parser.py",
      "position": null,
      "original_position": 20,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "4690881fc52a2d5d8b17c7a1e4ae07d3e2d88e14",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "contrib/message-capture/message-capture-parser.py:20:1: F401 'test_framework.util.assert_equal' imported but unused",
      "created_at": "2020-11-18T06:24:34Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r525840678",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/525840678"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560507013",
      "pull_request_review_id": 571674570,
      "id": 560507013,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDUwNzAxMw==",
      "diff_hunk": "@@ -521,6 +521,7 @@ void SetupServerArgs(NodeContext& node)\n     argsman.AddArg(\"-limitdescendantcount=<n>\", strprintf(\"Do not accept transactions if any ancestor would have <n> or more in-mempool descendants (default: %u)\", DEFAULT_DESCENDANT_LIMIT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-addrmantest\", \"Allows to test address relay on localhost\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-capturemessages\", \"Capture all p2p messages to file\", ArgsManager::ALLOW_BOOL | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "d2e0f731c5c7a2e1c060beb1ed5b16e7632e5f9d",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: \"P2P\" is more commonly used.\r\n\r\n```\r\n$ git grep -E ' P2P ' | wc -l\r\n230\r\n$ git grep -E ' p2p ' | wc -l\r\n63\r\n```",
      "created_at": "2021-01-19T21:26:53Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r560507013",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560507013"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 524,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560511017",
      "pull_request_review_id": 571674570,
      "id": 560511017,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDUxMTAxNw==",
      "diff_hunk": "@@ -0,0 +1,25 @@\n+# Per-Peer Message Capture\n+\n+## Purpose\n+\n+This feature allows for message capture on a per-peer basis.  It answers the simple question: \"Can I see what messages my node is sending and receiving?\"\n+\n+## Usage and Functionality\n+\n+* Run `bitcoind` with the `-capturemessage` option.",
      "path": "contrib/message-capture/message-capture-docs.md",
      "position": null,
      "original_position": 9,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "d2e0f731c5c7a2e1c060beb1ed5b16e7632e5f9d",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This should be `-capturemessages` (with ending \"s\") :)",
      "created_at": "2021-01-19T21:34:02Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r560511017",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560511017"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 9,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560516632",
      "pull_request_review_id": 571686513,
      "id": 560516632,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDUxNjYzMg==",
      "diff_hunk": "@@ -521,6 +521,7 @@ void SetupServerArgs(NodeContext& node)\n     argsman.AddArg(\"-limitdescendantcount=<n>\", strprintf(\"Do not accept transactions if any ancestor would have <n> or more in-mempool descendants (default: %u)\", DEFAULT_DESCENDANT_LIMIT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-addrmantest\", \"Allows to test address relay on localhost\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-capturemessages\", \"Capture all p2p messages to file\", ArgsManager::ALLOW_BOOL | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "d2e0f731c5c7a2e1c060beb1ed5b16e7632e5f9d",
      "in_reply_to_id": 560507013,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sounds good, and Wikipedia agrees.  Fixed",
      "created_at": "2021-01-19T21:44:34Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r560516632",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560516632"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 524,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560516802",
      "pull_request_review_id": 571686766,
      "id": 560516802,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDUxNjgwMg==",
      "diff_hunk": "@@ -0,0 +1,25 @@\n+# Per-Peer Message Capture\n+\n+## Purpose\n+\n+This feature allows for message capture on a per-peer basis.  It answers the simple question: \"Can I see what messages my node is sending and receiving?\"\n+\n+## Usage and Functionality\n+\n+* Run `bitcoind` with the `-capturemessage` option.",
      "path": "contrib/message-capture/message-capture-docs.md",
      "position": null,
      "original_position": 9,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "d2e0f731c5c7a2e1c060beb1ed5b16e7632e5f9d",
      "in_reply_to_id": 560511017,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thank you!",
      "created_at": "2021-01-19T21:44:54Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r560516802",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560516802"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 9,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560878242",
      "pull_request_review_id": 572113296,
      "id": 560878242,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDg3ODI0Mg==",
      "diff_hunk": "@@ -2864,6 +2864,9 @@ void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n {\n     size_t nMessageSize = msg.data.size();\n     LogPrint(BCLog::NET, \"sending %s (%d bytes) peer=%d\\n\",  SanitizeString(msg.m_type), nMessageSize, pnode->GetId());\n+    if (gArgs.GetBoolArg(\"-capturemessages\", false)) {\n+        CaptureMessage(pnode->addr, msg.m_type, MakeSpan(msg.data), /* incoming */ false);",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "af8bcd1a6ecdfa15d7fb0f98256d47dec9b40f61",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "There's no need to explicitly convert to a span from a vector since #18468 was merged.\r\n\r\n```suggestion\r\n        CaptureMessage(pnode->addr, msg.m_type, msg.data, /* incoming */ false);\r\n```\r\n\r\nNo need to change this unless you touch the branch for another reason.",
      "created_at": "2021-01-20T11:10:17Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r560878242",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560878242"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2868,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560883409",
      "pull_request_review_id": 572113296,
      "id": 560883409,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDg4MzQwOQ==",
      "diff_hunk": "@@ -0,0 +1,188 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Parse message capture binary files.  To be used in conjunction with -capturemessages.\"\"\"\n+\n+import argparse\n+import os\n+import shutil\n+import sys\n+from io import BytesIO\n+import json\n+from pathlib import Path\n+from typing import Any, List, Optional\n+\n+sys.path.append(os.path.join(os.path.dirname(__file__), '../../test/functional'))\n+\n+from test_framework.messages import ser_uint256     # noqa: E402\n+from test_framework.p2p import MESSAGEMAP           # noqa: E402\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+MSGTYPE_SIZE = 12\n+\n+# The test framework classes stores hashes as large ints in many cases.\n+# These are variables of type uint256 in core.\n+# There isn't a way to distinguish between a large int and a large int that is actually a blob of bytes.\n+# As such, they are itemized here.\n+# Any variables with these names that are of type int are actually uint256 variables.\n+# (These can be easily found by looking for calls to deser_uint256, deser_uint256_vector, and uint256_from_str in messages.py)\n+HASH_INTS = [\n+    \"blockhash\",\n+    \"block_hash\",\n+    \"hash\",\n+    \"hashMerkleRoot\",\n+    \"hashPrevBlock\",\n+    \"hashstop\",\n+    \"prev_header\",\n+    \"sha256\",\n+    \"stop_hash\",\n+]\n+\n+HASH_INT_VECTORS = [\n+    \"hashes\",\n+    \"headers\",\n+    \"vHave\",\n+    \"vHash\",\n+]\n+\n+\n+class ProgressBar:\n+    def __init__(self, total: float):\n+        self.total = total\n+        self.running = 0\n+\n+    def set_progress(self, progress: float):\n+        cols = shutil.get_terminal_size()[0]\n+        if cols <= 12:\n+            return\n+        max_blocks = cols - 9\n+        num_blocks = int(max_blocks*progress)\n+        print('\\r[ {}{} ] {:3.0f}%'.format(\n+                '#'*num_blocks,\n+                ' '*(max_blocks - num_blocks),\n+                progress*100),\n+            end ='')\n+\n+    def update(self, more: float):\n+        self.running += more\n+        self.set_progress(self.running / self.total)\n+\n+\n+def to_jsonable(obj: Any) -> Any:\n+    if hasattr(obj, \"__dict__\"):\n+        return obj.__dict__\n+    elif hasattr(obj, \"__slots__\"):\n+        ret = {}    # type: Any\n+        for slot in obj.__slots__:\n+            val = getattr(obj, slot, None)\n+            if slot in HASH_INTS and isinstance(val, int):\n+                ret[slot] = ser_uint256(val).hex()\n+            elif slot in HASH_INT_VECTORS and isinstance(val[0], int):\n+                ret[slot] = [ser_uint256(a).hex() for a in val]\n+            else:\n+                ret[slot] = to_jsonable(val)\n+        return ret\n+    elif isinstance(obj, list):\n+        return [to_jsonable(a) for a in obj]\n+    elif isinstance(obj, bytes):\n+        return obj.hex()\n+    else:\n+        return obj\n+\n+\n+def process_file(path: str, messages: List[Any], recv: bool, progress_bar: Optional[ProgressBar]) -> None:\n+    with open(path, 'rb') as f_in:\n+        if progress_bar:\n+            bytes_read = 0\n+        while True:\n+            if progress_bar:\n+                # Update progress bar\n+                diff = f_in.tell() - bytes_read - 1\n+                progress_bar.update(diff)\n+                bytes_read = f_in.tell() - 1\n+            tmp_header_raw = f_in.read(TIME_SIZE + LENGTH_SIZE + MSGTYPE_SIZE)\n+            if not tmp_header_raw:\n+                break\n+            tmp_header = BytesIO(tmp_header_raw)\n+            time = int.from_bytes(tmp_header.read(TIME_SIZE), \"little\")      # type: int\n+            msgtype = tmp_header.read(MSGTYPE_SIZE).split(b'\\x00', 1)[0]     # type: bytes\n+            length = int.from_bytes(tmp_header.read(LENGTH_SIZE), \"little\")  # type: int\n+            if msgtype not in MESSAGEMAP:\n+                # For now just skip unrecognized messages\n+                f_in.seek(length, os.SEEK_CUR)\n+                print(f\"Skipping unrecognized message type {msgtype}\", file=sys.stderr)\n+                continue\n+            msg_ser = BytesIO(f_in.read(length))\n+            msg = MESSAGEMAP[msgtype]()\n+            try:\n+                msg.deserialize(msg_ser)\n+            except KeyboardInterrupt:\n+                raise\n+            except Exception:\n+                # Message was bad, skip the rest of the file\n+                print(f\"Found broken message, skipping remainder of file: {path}\", file=sys.stderr)\n+                break\n+            msg_dict = {}\n+            msg_dict[\"msgtype\"] = getattr(msg, \"msgtype\", None).decode()\n+            msg_dict[\"direction\"] = \"recv\" if recv else \"sent\"\n+            msg_dict[\"time\"] = time\n+            msg_dict[\"size\"] = length   # \"size\" is less readable here, but more readable in the output\n+            if length:\n+                msg_dict[\"body\"] = to_jsonable(msg)\n+            messages.append(msg_dict)\n+        if progress_bar:\n+            # Update the progress bar to the end of the current file\n+            # in case we exited the loop early\n+            f_in.seek(0, os.SEEK_END)   # Go to end of file\n+            diff = f_in.tell() - bytes_read - 1\n+            progress_bar.update(diff)\n+\n+\n+def main():\n+    \"\"\"Main\"\"\"\n+    parser = argparse.ArgumentParser(\n+        description=__doc__,\n+        epilog=\"EXAMPLE \\n\\t{0} -o out.json <data-dir>/message_capture/**/*.dat\".format(sys.argv[0]),\n+        formatter_class=argparse.RawTextHelpFormatter)\n+    parser.add_argument(\n+        \"capturepaths\",\n+        nargs='+',\n+        help=\"binary message capture files to parse.\")\n+    parser.add_argument(\n+        \"-o\", \"--output\",\n+        help=\"output file.  If unset print to stdout\")\n+    parser.add_argument(\n+        \"--no-progress-bar\",\n+        action='store_true',\n+        help=\"disable the progress bar.  Automatically set if the output is not a terminal\")\n+    args = parser.parse_args()\n+    capturepaths = [Path.cwd() / Path(capturepath) for capturepath in args.capturepaths]\n+    output = Path.cwd() / Path(args.output) if args.output else False\n+    use_progress_bar = (not args.no_progress_bar) and sys.stdout.isatty()\n+\n+    messages = []   # type: List[Any]\n+    if use_progress_bar:\n+        total_size = sum(capture.stat().st_size for capture in capturepaths)\n+        progress_bar = ProgressBar(total_size)\n+        for capture in capturepaths:\n+            process_file(str(capture), messages, \"recv\" in capture.stem, progress_bar)\n+    else:\n+        for capture in capturepaths:\n+            process_file(str(capture), messages, \"recv\" in capture.stem, None)",
      "path": "contrib/message-capture/message-capture-parser.py",
      "position": null,
      "original_position": 173,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "af8bcd1a6ecdfa15d7fb0f98256d47dec9b40f61",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No need to duplicate the process_file call:\r\n\r\n```suggestion\r\n    else:\r\n        progress_bar = None\r\n\r\n    for capture in capturepaths:\r\n        process_file(str(capture), messages, \"recv\" in capture.stem, progress_bar)\r\n```",
      "created_at": "2021-01-20T11:19:11Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r560883409",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560883409"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": 169,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 173,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560883958",
      "pull_request_review_id": 572113296,
      "id": 560883958,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDg4Mzk1OA==",
      "diff_hunk": "@@ -0,0 +1,188 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Parse message capture binary files.  To be used in conjunction with -capturemessages.\"\"\"\n+\n+import argparse\n+import os\n+import shutil\n+import sys\n+from io import BytesIO\n+import json\n+from pathlib import Path\n+from typing import Any, List, Optional\n+\n+sys.path.append(os.path.join(os.path.dirname(__file__), '../../test/functional'))\n+\n+from test_framework.messages import ser_uint256     # noqa: E402\n+from test_framework.p2p import MESSAGEMAP           # noqa: E402\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+MSGTYPE_SIZE = 12\n+\n+# The test framework classes stores hashes as large ints in many cases.\n+# These are variables of type uint256 in core.\n+# There isn't a way to distinguish between a large int and a large int that is actually a blob of bytes.\n+# As such, they are itemized here.\n+# Any variables with these names that are of type int are actually uint256 variables.\n+# (These can be easily found by looking for calls to deser_uint256, deser_uint256_vector, and uint256_from_str in messages.py)\n+HASH_INTS = [\n+    \"blockhash\",\n+    \"block_hash\",\n+    \"hash\",\n+    \"hashMerkleRoot\",\n+    \"hashPrevBlock\",\n+    \"hashstop\",\n+    \"prev_header\",\n+    \"sha256\",\n+    \"stop_hash\",\n+]\n+\n+HASH_INT_VECTORS = [\n+    \"hashes\",\n+    \"headers\",\n+    \"vHave\",\n+    \"vHash\",\n+]\n+\n+\n+class ProgressBar:\n+    def __init__(self, total: float):\n+        self.total = total\n+        self.running = 0\n+\n+    def set_progress(self, progress: float):\n+        cols = shutil.get_terminal_size()[0]\n+        if cols <= 12:\n+            return\n+        max_blocks = cols - 9\n+        num_blocks = int(max_blocks*progress)\n+        print('\\r[ {}{} ] {:3.0f}%'.format(\n+                '#'*num_blocks,\n+                ' '*(max_blocks - num_blocks),\n+                progress*100),\n+            end ='')\n+\n+    def update(self, more: float):\n+        self.running += more\n+        self.set_progress(self.running / self.total)\n+\n+\n+def to_jsonable(obj: Any) -> Any:\n+    if hasattr(obj, \"__dict__\"):\n+        return obj.__dict__\n+    elif hasattr(obj, \"__slots__\"):\n+        ret = {}    # type: Any\n+        for slot in obj.__slots__:\n+            val = getattr(obj, slot, None)\n+            if slot in HASH_INTS and isinstance(val, int):\n+                ret[slot] = ser_uint256(val).hex()\n+            elif slot in HASH_INT_VECTORS and isinstance(val[0], int):\n+                ret[slot] = [ser_uint256(a).hex() for a in val]\n+            else:\n+                ret[slot] = to_jsonable(val)\n+        return ret\n+    elif isinstance(obj, list):\n+        return [to_jsonable(a) for a in obj]\n+    elif isinstance(obj, bytes):\n+        return obj.hex()\n+    else:\n+        return obj\n+\n+\n+def process_file(path: str, messages: List[Any], recv: bool, progress_bar: Optional[ProgressBar]) -> None:\n+    with open(path, 'rb') as f_in:\n+        if progress_bar:\n+            bytes_read = 0\n+        while True:\n+            if progress_bar:\n+                # Update progress bar\n+                diff = f_in.tell() - bytes_read - 1\n+                progress_bar.update(diff)\n+                bytes_read = f_in.tell() - 1\n+            tmp_header_raw = f_in.read(TIME_SIZE + LENGTH_SIZE + MSGTYPE_SIZE)\n+            if not tmp_header_raw:\n+                break\n+            tmp_header = BytesIO(tmp_header_raw)\n+            time = int.from_bytes(tmp_header.read(TIME_SIZE), \"little\")      # type: int\n+            msgtype = tmp_header.read(MSGTYPE_SIZE).split(b'\\x00', 1)[0]     # type: bytes\n+            length = int.from_bytes(tmp_header.read(LENGTH_SIZE), \"little\")  # type: int\n+            if msgtype not in MESSAGEMAP:\n+                # For now just skip unrecognized messages\n+                f_in.seek(length, os.SEEK_CUR)\n+                print(f\"Skipping unrecognized message type {msgtype}\", file=sys.stderr)\n+                continue\n+            msg_ser = BytesIO(f_in.read(length))\n+            msg = MESSAGEMAP[msgtype]()\n+            try:\n+                msg.deserialize(msg_ser)\n+            except KeyboardInterrupt:\n+                raise\n+            except Exception:\n+                # Message was bad, skip the rest of the file\n+                print(f\"Found broken message, skipping remainder of file: {path}\", file=sys.stderr)\n+                break\n+            msg_dict = {}\n+            msg_dict[\"msgtype\"] = getattr(msg, \"msgtype\", None).decode()\n+            msg_dict[\"direction\"] = \"recv\" if recv else \"sent\"\n+            msg_dict[\"time\"] = time\n+            msg_dict[\"size\"] = length   # \"size\" is less readable here, but more readable in the output\n+            if length:\n+                msg_dict[\"body\"] = to_jsonable(msg)\n+            messages.append(msg_dict)\n+        if progress_bar:\n+            # Update the progress bar to the end of the current file\n+            # in case we exited the loop early\n+            f_in.seek(0, os.SEEK_END)   # Go to end of file\n+            diff = f_in.tell() - bytes_read - 1\n+            progress_bar.update(diff)\n+\n+\n+def main():\n+    \"\"\"Main\"\"\"\n+    parser = argparse.ArgumentParser(\n+        description=__doc__,\n+        epilog=\"EXAMPLE \\n\\t{0} -o out.json <data-dir>/message_capture/**/*.dat\".format(sys.argv[0]),\n+        formatter_class=argparse.RawTextHelpFormatter)\n+    parser.add_argument(\n+        \"capturepaths\",\n+        nargs='+',\n+        help=\"binary message capture files to parse.\")\n+    parser.add_argument(\n+        \"-o\", \"--output\",\n+        help=\"output file.  If unset print to stdout\")\n+    parser.add_argument(\n+        \"--no-progress-bar\",",
      "path": "contrib/message-capture/message-capture-parser.py",
      "position": null,
      "original_position": 157,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "af8bcd1a6ecdfa15d7fb0f98256d47dec9b40f61",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Can you add `-n` as a short argument here?",
      "created_at": "2021-01-20T11:20:13Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r560883958",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560883958"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 157,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560884968",
      "pull_request_review_id": 572113296,
      "id": 560884968,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDg4NDk2OA==",
      "diff_hunk": "@@ -0,0 +1,188 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Parse message capture binary files.  To be used in conjunction with -capturemessages.\"\"\"\n+\n+import argparse\n+import os\n+import shutil\n+import sys\n+from io import BytesIO\n+import json\n+from pathlib import Path\n+from typing import Any, List, Optional\n+\n+sys.path.append(os.path.join(os.path.dirname(__file__), '../../test/functional'))\n+\n+from test_framework.messages import ser_uint256     # noqa: E402\n+from test_framework.p2p import MESSAGEMAP           # noqa: E402\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+MSGTYPE_SIZE = 12\n+\n+# The test framework classes stores hashes as large ints in many cases.\n+# These are variables of type uint256 in core.\n+# There isn't a way to distinguish between a large int and a large int that is actually a blob of bytes.\n+# As such, they are itemized here.\n+# Any variables with these names that are of type int are actually uint256 variables.\n+# (These can be easily found by looking for calls to deser_uint256, deser_uint256_vector, and uint256_from_str in messages.py)\n+HASH_INTS = [\n+    \"blockhash\",\n+    \"block_hash\",\n+    \"hash\",\n+    \"hashMerkleRoot\",\n+    \"hashPrevBlock\",\n+    \"hashstop\",\n+    \"prev_header\",\n+    \"sha256\",\n+    \"stop_hash\",\n+]\n+\n+HASH_INT_VECTORS = [\n+    \"hashes\",\n+    \"headers\",\n+    \"vHave\",\n+    \"vHash\",\n+]\n+\n+\n+class ProgressBar:\n+    def __init__(self, total: float):\n+        self.total = total\n+        self.running = 0\n+\n+    def set_progress(self, progress: float):\n+        cols = shutil.get_terminal_size()[0]\n+        if cols <= 12:\n+            return\n+        max_blocks = cols - 9\n+        num_blocks = int(max_blocks*progress)\n+        print('\\r[ {}{} ] {:3.0f}%'.format(\n+                '#'*num_blocks,\n+                ' '*(max_blocks - num_blocks),\n+                progress*100),\n+            end ='')\n+\n+    def update(self, more: float):\n+        self.running += more\n+        self.set_progress(self.running / self.total)\n+\n+\n+def to_jsonable(obj: Any) -> Any:\n+    if hasattr(obj, \"__dict__\"):\n+        return obj.__dict__\n+    elif hasattr(obj, \"__slots__\"):\n+        ret = {}    # type: Any\n+        for slot in obj.__slots__:\n+            val = getattr(obj, slot, None)\n+            if slot in HASH_INTS and isinstance(val, int):\n+                ret[slot] = ser_uint256(val).hex()\n+            elif slot in HASH_INT_VECTORS and isinstance(val[0], int):\n+                ret[slot] = [ser_uint256(a).hex() for a in val]\n+            else:\n+                ret[slot] = to_jsonable(val)\n+        return ret\n+    elif isinstance(obj, list):\n+        return [to_jsonable(a) for a in obj]\n+    elif isinstance(obj, bytes):\n+        return obj.hex()\n+    else:\n+        return obj\n+\n+\n+def process_file(path: str, messages: List[Any], recv: bool, progress_bar: Optional[ProgressBar]) -> None:",
      "path": "contrib/message-capture/message-capture-parser.py",
      "position": 95,
      "original_position": 95,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "af8bcd1a6ecdfa15d7fb0f98256d47dec9b40f61",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This function is a bit of a wall of code. I'd suggest a few blank lines to split up different areas of functionality and make it a bit more readable.\r\n\r\nSomething like:\r\n\r\n```python\r\n        while True:\r\n            if progress_bar:\r\n                # Update progress bar\r\n                diff = f_in.tell() - bytes_read - 1\r\n                progress_bar.update(diff)\r\n                bytes_read = f_in.tell() - 1\r\n\r\n            # Read header\r\n            tmp_header_raw = f_in.read(TIME_SIZE + LENGTH_SIZE + MSGTYPE_SIZE)\r\n            if not tmp_header_raw:\r\n                break\r\n            tmp_header = BytesIO(tmp_header_raw)\r\n            time = int.from_bytes(tmp_header.read(TIME_SIZE), \"little\")      # type: int\r\n            msgtype = tmp_header.read(MSGTYPE_SIZE).split(b'\\x00', 1)[0]     # type: bytes\r\n            length = int.from_bytes(tmp_header.read(LENGTH_SIZE), \"little\")  # type: int\r\n\r\n            if msgtype not in MESSAGEMAP:\r\n                # For now just skip unrecognized messages\r\n                f_in.seek(length, os.SEEK_CUR)\r\n                print(f\"Skipping unrecognized message type {msgtype}\", file=sys.stderr)\r\n                continue\r\n\r\n            # Read body\r\n            msg_ser = BytesIO(f_in.read(length))\r\n            msg = MESSAGEMAP[msgtype]()\r\n            try:\r\n                msg.deserialize(msg_ser)\r\n            except KeyboardInterrupt:\r\n                raise\r\n            except Exception:\r\n                # Message was bad, skip the rest of the file\r\n                print(f\"Found broken message, skipping remainder of file: {path}\", file=sys.stderr)\r\n                break\r\n\r\n            # Construct msg_dict and insert into messages\r\n            msg_dict = {}\r\n            msg_dict[\"msgtype\"] = getattr(msg, \"msgtype\", None).decode()\r\n            msg_dict[\"direction\"] = \"recv\" if recv else \"sent\"\r\n            msg_dict[\"time\"] = time\r\n            msg_dict[\"size\"] = length   # \"size\" is less readable here, but more readable in the output\r\n            if length:\r\n                msg_dict[\"body\"] = to_jsonable(msg)\r\n            messages.append(msg_dict)\r\n\r\n        if progress_bar:\r\n            # Update the progress bar to the end of the current file\r\n            # in case we exited the loop early\r\n            f_in.seek(0, os.SEEK_END)   # Go to end of file\r\n            diff = f_in.tell() - bytes_read - 1\r\n            progress_bar.update(diff)\r\n```",
      "created_at": "2021-01-20T11:22:07Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r560884968",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560884968"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 95,
      "original_line": 95,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560888340",
      "pull_request_review_id": 572113296,
      "id": 560888340,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDg4ODM0MA==",
      "diff_hunk": "@@ -0,0 +1,188 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Parse message capture binary files.  To be used in conjunction with -capturemessages.\"\"\"\n+\n+import argparse\n+import os\n+import shutil\n+import sys\n+from io import BytesIO\n+import json\n+from pathlib import Path\n+from typing import Any, List, Optional\n+\n+sys.path.append(os.path.join(os.path.dirname(__file__), '../../test/functional'))\n+\n+from test_framework.messages import ser_uint256     # noqa: E402\n+from test_framework.p2p import MESSAGEMAP           # noqa: E402\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+MSGTYPE_SIZE = 12\n+\n+# The test framework classes stores hashes as large ints in many cases.\n+# These are variables of type uint256 in core.\n+# There isn't a way to distinguish between a large int and a large int that is actually a blob of bytes.\n+# As such, they are itemized here.\n+# Any variables with these names that are of type int are actually uint256 variables.\n+# (These can be easily found by looking for calls to deser_uint256, deser_uint256_vector, and uint256_from_str in messages.py)\n+HASH_INTS = [\n+    \"blockhash\",\n+    \"block_hash\",\n+    \"hash\",\n+    \"hashMerkleRoot\",\n+    \"hashPrevBlock\",\n+    \"hashstop\",\n+    \"prev_header\",\n+    \"sha256\",\n+    \"stop_hash\",\n+]\n+\n+HASH_INT_VECTORS = [\n+    \"hashes\",\n+    \"headers\",\n+    \"vHave\",\n+    \"vHash\",\n+]\n+\n+\n+class ProgressBar:\n+    def __init__(self, total: float):\n+        self.total = total\n+        self.running = 0\n+\n+    def set_progress(self, progress: float):\n+        cols = shutil.get_terminal_size()[0]\n+        if cols <= 12:\n+            return\n+        max_blocks = cols - 9\n+        num_blocks = int(max_blocks*progress)\n+        print('\\r[ {}{} ] {:3.0f}%'.format(\n+                '#'*num_blocks,\n+                ' '*(max_blocks - num_blocks),\n+                progress*100),\n+            end ='')",
      "path": "contrib/message-capture/message-capture-parser.py",
      "position": null,
      "original_position": 66,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "af8bcd1a6ecdfa15d7fb0f98256d47dec9b40f61",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "A few pep8 style suggestions:\r\n\r\n- surround arithmetic operators with spaces\r\n- no spaces around named argument parameters\r\n- align parameters with opening parens\r\n\r\n```suggestion\r\n        num_blocks = int(max_blocks * progress)\r\n        print('\\r[ {}{} ] {:3.0f}%'.format('#' * num_blocks,\r\n                                           ' ' * (max_blocks - num_blocks),\r\n                                           progress * 100),\r\n              end='')\r\n\r\n```",
      "created_at": "2021-01-20T11:27:41Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r560888340",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560888340"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": 61,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560895332",
      "pull_request_review_id": 572113296,
      "id": 560895332,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDg5NTMzMg==",
      "diff_hunk": "@@ -0,0 +1,70 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test per-peer message capture capability.\n+\n+Additionally, the output of contrib/message-capture/message-capture-parser.py should be verified manually.\n+\"\"\"\n+\n+import glob\n+from io import BytesIO\n+import os\n+\n+from test_framework.p2p import P2PDataStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+MSGTYPE_SIZE = 12\n+\n+def mini_parser(dat_file):\n+    \"\"\"Parse a data file created by CaptureMessage.\n+\n+    From the data file we'll only check the structure.\n+\n+    We won't care about things like:\n+    - Deserializing the payload of the message\n+        - This is managed by the deserialize methods in test_framework.messages\n+    - The order of the messages\n+        - There's no reason why we can't, say, change the order of the messages in the handshake\n+    - Message Type\n+        - We can add new message types\n+\n+    We're ignoring these because they're simply too brittle to test here.\n+    \"\"\"\n+    with open(dat_file, 'rb') as f_in:\n+        while True:\n+            tmp_header_raw = f_in.read(TIME_SIZE + LENGTH_SIZE + MSGTYPE_SIZE)\n+            if not tmp_header_raw:\n+                break\n+            tmp_header = BytesIO(tmp_header_raw)\n+            time = int.from_bytes(tmp_header.read(TIME_SIZE), \"little\")      # type: int\n+            assert(time >= 1231006505000000)   # genesis block timestamp",
      "path": "test/functional/p2p_message_capture.py",
      "position": null,
      "original_position": 44,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "af8bcd1a6ecdfa15d7fb0f98256d47dec9b40f61",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm not sure if we want this. You could imagine running this test inside some environment where the system time is not set correctly. That'd potentially cause this test to fail even though there's no problem with message capture.",
      "created_at": "2021-01-20T11:40:01Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r560895332",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560895332"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560895909",
      "pull_request_review_id": 572113296,
      "id": 560895909,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDg5NTkwOQ==",
      "diff_hunk": "@@ -0,0 +1,70 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test per-peer message capture capability.\n+\n+Additionally, the output of contrib/message-capture/message-capture-parser.py should be verified manually.\n+\"\"\"\n+\n+import glob\n+from io import BytesIO\n+import os\n+\n+from test_framework.p2p import P2PDataStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+MSGTYPE_SIZE = 12\n+\n+def mini_parser(dat_file):\n+    \"\"\"Parse a data file created by CaptureMessage.\n+\n+    From the data file we'll only check the structure.\n+\n+    We won't care about things like:\n+    - Deserializing the payload of the message\n+        - This is managed by the deserialize methods in test_framework.messages\n+    - The order of the messages\n+        - There's no reason why we can't, say, change the order of the messages in the handshake\n+    - Message Type\n+        - We can add new message types\n+\n+    We're ignoring these because they're simply too brittle to test here.\n+    \"\"\"\n+    with open(dat_file, 'rb') as f_in:\n+        while True:\n+            tmp_header_raw = f_in.read(TIME_SIZE + LENGTH_SIZE + MSGTYPE_SIZE)\n+            if not tmp_header_raw:\n+                break\n+            tmp_header = BytesIO(tmp_header_raw)\n+            time = int.from_bytes(tmp_header.read(TIME_SIZE), \"little\")      # type: int\n+            assert(time >= 1231006505000000)   # genesis block timestamp\n+            msgtype = tmp_header.read(MSGTYPE_SIZE).split(b'\\x00', 1)[0]     # type: bytes\n+            assert(len(msgtype) > 0)",
      "path": "test/functional/p2p_message_capture.py",
      "position": 49,
      "original_position": 46,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "af8bcd1a6ecdfa15d7fb0f98256d47dec9b40f61",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Perhaps also assert that there are no non-null characters after the first non-null character? i.e. the message type is a string of printable characters followed by just null characters.",
      "created_at": "2021-01-20T11:41:03Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r560895909",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560895909"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 49,
      "original_line": 49,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560900447",
      "pull_request_review_id": 572113296,
      "id": 560900447,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDkwMDQ0Nw==",
      "diff_hunk": "@@ -0,0 +1,70 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test per-peer message capture capability.\n+\n+Additionally, the output of contrib/message-capture/message-capture-parser.py should be verified manually.\n+\"\"\"\n+\n+import glob\n+from io import BytesIO\n+import os\n+\n+from test_framework.p2p import P2PDataStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+MSGTYPE_SIZE = 12\n+\n+def mini_parser(dat_file):\n+    \"\"\"Parse a data file created by CaptureMessage.\n+\n+    From the data file we'll only check the structure.\n+\n+    We won't care about things like:\n+    - Deserializing the payload of the message\n+        - This is managed by the deserialize methods in test_framework.messages\n+    - The order of the messages\n+        - There's no reason why we can't, say, change the order of the messages in the handshake\n+    - Message Type\n+        - We can add new message types\n+\n+    We're ignoring these because they're simply too brittle to test here.\n+    \"\"\"\n+    with open(dat_file, 'rb') as f_in:",
      "path": "test/functional/p2p_message_capture.py",
      "position": 37,
      "original_position": 37,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "af8bcd1a6ecdfa15d7fb0f98256d47dec9b40f61",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "We should also test that these files are non-empty. We may not know the exact sequence of messages, but there should be some messages during initial handshake, and we should capture them.",
      "created_at": "2021-01-20T11:49:07Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r560900447",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560900447"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 37,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560908669",
      "pull_request_review_id": 572113296,
      "id": 560908669,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDkwODY2OQ==",
      "diff_hunk": "@@ -1239,6 +1242,8 @@ inline std::chrono::microseconds PoissonNextSend(std::chrono::microseconds now,\n     return std::chrono::microseconds{PoissonNextSend(now.count(), average_interval.count())};\n }\n \n+void CaptureMessage(const CAddress& addr, const std::string& msg_type, const Span<const unsigned char>& data, bool is_incoming);",
      "path": "src/net.h",
      "position": 22,
      "original_position": 21,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "af8bcd1a6ecdfa15d7fb0f98256d47dec9b40f61",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "We don't have guidance on line length in the style guide, but anything over 100 columns is a bit long for my taste. Also consider adding a doxygen comment:\r\n\r\n```suggestion\r\n/** Dump timestamp and binary message to file */\r\nvoid CaptureMessage(const CAddress& addr, const std::string& msg_type,\r\n                    const Span<const unsigned char>& data, bool is_incoming);\r\n\r\n```",
      "created_at": "2021-01-20T12:03:42Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r560908669",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560908669"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1246,
      "original_line": 1246,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560908973",
      "pull_request_review_id": 572113296,
      "id": 560908973,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDkwODk3Mw==",
      "diff_hunk": "@@ -2933,3 +2932,27 @@ uint64_t CConnman::CalculateKeyedNetGroup(const CAddress& ad) const\n \n     return GetDeterministicRandomizer(RANDOMIZER_ID_NETGROUP).Write(vchNetGroup.data(), vchNetGroup.size()).Finalize();\n }\n+\n+void CaptureMessage(const CAddress& addr, const std::string& msg_type, const Span<const unsigned char>& data, bool is_incoming)\n+{\n+    auto time = GetTime<std::chrono::microseconds>();",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 40,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "af8bcd1a6ecdfa15d7fb0f98256d47dec9b40f61",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "maybe s/time/now/",
      "created_at": "2021-01-20T12:04:12Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r560908973",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560908973"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2938,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/561060570",
      "pull_request_review_id": 572350051,
      "id": 561060570,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTA2MDU3MA==",
      "diff_hunk": "@@ -0,0 +1,174 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Parse message capture binary files.  To be used in conjunction with -capturemessages.\"\"\"\n+\n+import argparse\n+import os\n+import shutil\n+import sys\n+from io import BytesIO\n+import json\n+from pathlib import Path\n+from typing import Any, List, Optional\n+\n+sys.path.append(os.path.join(os.path.dirname(__file__), '../../test/functional'))\n+\n+from test_framework.messages import ser_uint256     # noqa: E402\n+from test_framework.p2p import MESSAGEMAP           # noqa: E402\n+from test_framework.util import assert_equal        # noqa: E402",
      "path": "contrib/message-capture/message-capture-parser.py",
      "position": null,
      "original_position": 20,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "4690881fc52a2d5d8b17c7a1e4ae07d3e2d88e14",
      "in_reply_to_id": 525840678,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed",
      "created_at": "2021-01-20T15:36:49Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r561060570",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/561060570"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/561075800",
      "pull_request_review_id": 572370800,
      "id": 561075800,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTA3NTgwMA==",
      "diff_hunk": "@@ -0,0 +1,188 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Parse message capture binary files.  To be used in conjunction with -capturemessages.\"\"\"\n+\n+import argparse\n+import os\n+import shutil\n+import sys\n+from io import BytesIO\n+import json\n+from pathlib import Path\n+from typing import Any, List, Optional\n+\n+sys.path.append(os.path.join(os.path.dirname(__file__), '../../test/functional'))\n+\n+from test_framework.messages import ser_uint256     # noqa: E402\n+from test_framework.p2p import MESSAGEMAP           # noqa: E402\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+MSGTYPE_SIZE = 12\n+\n+# The test framework classes stores hashes as large ints in many cases.\n+# These are variables of type uint256 in core.\n+# There isn't a way to distinguish between a large int and a large int that is actually a blob of bytes.\n+# As such, they are itemized here.\n+# Any variables with these names that are of type int are actually uint256 variables.\n+# (These can be easily found by looking for calls to deser_uint256, deser_uint256_vector, and uint256_from_str in messages.py)\n+HASH_INTS = [\n+    \"blockhash\",\n+    \"block_hash\",\n+    \"hash\",\n+    \"hashMerkleRoot\",\n+    \"hashPrevBlock\",\n+    \"hashstop\",\n+    \"prev_header\",\n+    \"sha256\",\n+    \"stop_hash\",\n+]\n+\n+HASH_INT_VECTORS = [\n+    \"hashes\",\n+    \"headers\",\n+    \"vHave\",\n+    \"vHash\",\n+]\n+\n+\n+class ProgressBar:\n+    def __init__(self, total: float):\n+        self.total = total\n+        self.running = 0\n+\n+    def set_progress(self, progress: float):\n+        cols = shutil.get_terminal_size()[0]\n+        if cols <= 12:\n+            return\n+        max_blocks = cols - 9\n+        num_blocks = int(max_blocks*progress)\n+        print('\\r[ {}{} ] {:3.0f}%'.format(\n+                '#'*num_blocks,\n+                ' '*(max_blocks - num_blocks),\n+                progress*100),\n+            end ='')",
      "path": "contrib/message-capture/message-capture-parser.py",
      "position": null,
      "original_position": 66,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "af8bcd1a6ecdfa15d7fb0f98256d47dec9b40f61",
      "in_reply_to_id": 560888340,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Since this is new code: consider running `black` all new `.py` files added in this PR :)",
      "created_at": "2021-01-20T15:56:05Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r561075800",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/561075800"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": 61,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/561343199",
      "pull_request_review_id": 572696355,
      "id": 561343199,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTM0MzE5OQ==",
      "diff_hunk": "@@ -0,0 +1,188 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Parse message capture binary files.  To be used in conjunction with -capturemessages.\"\"\"\n+\n+import argparse\n+import os\n+import shutil\n+import sys\n+from io import BytesIO\n+import json\n+from pathlib import Path\n+from typing import Any, List, Optional\n+\n+sys.path.append(os.path.join(os.path.dirname(__file__), '../../test/functional'))\n+\n+from test_framework.messages import ser_uint256     # noqa: E402\n+from test_framework.p2p import MESSAGEMAP           # noqa: E402\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+MSGTYPE_SIZE = 12\n+\n+# The test framework classes stores hashes as large ints in many cases.\n+# These are variables of type uint256 in core.\n+# There isn't a way to distinguish between a large int and a large int that is actually a blob of bytes.\n+# As such, they are itemized here.\n+# Any variables with these names that are of type int are actually uint256 variables.\n+# (These can be easily found by looking for calls to deser_uint256, deser_uint256_vector, and uint256_from_str in messages.py)\n+HASH_INTS = [\n+    \"blockhash\",\n+    \"block_hash\",\n+    \"hash\",\n+    \"hashMerkleRoot\",\n+    \"hashPrevBlock\",\n+    \"hashstop\",\n+    \"prev_header\",\n+    \"sha256\",\n+    \"stop_hash\",\n+]\n+\n+HASH_INT_VECTORS = [\n+    \"hashes\",\n+    \"headers\",\n+    \"vHave\",\n+    \"vHash\",\n+]\n+\n+\n+class ProgressBar:\n+    def __init__(self, total: float):\n+        self.total = total\n+        self.running = 0\n+\n+    def set_progress(self, progress: float):\n+        cols = shutil.get_terminal_size()[0]\n+        if cols <= 12:\n+            return\n+        max_blocks = cols - 9\n+        num_blocks = int(max_blocks*progress)\n+        print('\\r[ {}{} ] {:3.0f}%'.format(\n+                '#'*num_blocks,\n+                ' '*(max_blocks - num_blocks),\n+                progress*100),\n+            end ='')",
      "path": "contrib/message-capture/message-capture-parser.py",
      "position": null,
      "original_position": 66,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "af8bcd1a6ecdfa15d7fb0f98256d47dec9b40f61",
      "in_reply_to_id": 560888340,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, this is much more readable now.  I've broken it up slightly differently than you.",
      "created_at": "2021-01-20T22:16:24Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r561343199",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/561343199"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": 61,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/561344484",
      "pull_request_review_id": 572697858,
      "id": 561344484,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTM0NDQ4NA==",
      "diff_hunk": "@@ -0,0 +1,70 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test per-peer message capture capability.\n+\n+Additionally, the output of contrib/message-capture/message-capture-parser.py should be verified manually.\n+\"\"\"\n+\n+import glob\n+from io import BytesIO\n+import os\n+\n+from test_framework.p2p import P2PDataStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+MSGTYPE_SIZE = 12\n+\n+def mini_parser(dat_file):\n+    \"\"\"Parse a data file created by CaptureMessage.\n+\n+    From the data file we'll only check the structure.\n+\n+    We won't care about things like:\n+    - Deserializing the payload of the message\n+        - This is managed by the deserialize methods in test_framework.messages\n+    - The order of the messages\n+        - There's no reason why we can't, say, change the order of the messages in the handshake\n+    - Message Type\n+        - We can add new message types\n+\n+    We're ignoring these because they're simply too brittle to test here.\n+    \"\"\"\n+    with open(dat_file, 'rb') as f_in:\n+        while True:\n+            tmp_header_raw = f_in.read(TIME_SIZE + LENGTH_SIZE + MSGTYPE_SIZE)\n+            if not tmp_header_raw:\n+                break\n+            tmp_header = BytesIO(tmp_header_raw)\n+            time = int.from_bytes(tmp_header.read(TIME_SIZE), \"little\")      # type: int\n+            assert(time >= 1231006505000000)   # genesis block timestamp",
      "path": "test/functional/p2p_message_capture.py",
      "position": null,
      "original_position": 44,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "af8bcd1a6ecdfa15d7fb0f98256d47dec9b40f61",
      "in_reply_to_id": 560895332,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm fine to remove this, especially given your other suggestions that add other pieces to this test.",
      "created_at": "2021-01-20T22:19:01Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r561344484",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/561344484"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562128298",
      "pull_request_review_id": 573648305,
      "id": 562128298,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjEyODI5OA==",
      "diff_hunk": "@@ -1239,6 +1242,8 @@ inline std::chrono::microseconds PoissonNextSend(std::chrono::microseconds now,\n     return std::chrono::microseconds{PoissonNextSend(now.count(), average_interval.count())};\n }\n \n+void CaptureMessage(const CAddress& addr, const std::string& msg_type, const Span<const unsigned char>& data, bool is_incoming);",
      "path": "src/net.h",
      "position": 22,
      "original_position": 21,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "af8bcd1a6ecdfa15d7fb0f98256d47dec9b40f61",
      "in_reply_to_id": 560908669,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added the doxygen comment, but I think I'll leave the long line as it is.  Looking through the rest of net.h, I see many declarations longer than 100 characters, and I don't see any that have been broken up the way you're suggesting.\r\n\r\nI agree with you that it's not great, but I'm going to appeal to consistency in this case.",
      "created_at": "2021-01-21T19:05:56Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r562128298",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562128298"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1246,
      "original_line": 1246,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562208110",
      "pull_request_review_id": 573749922,
      "id": 562208110,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjIwODExMA==",
      "diff_hunk": "@@ -0,0 +1,25 @@\n+# Per-Peer Message Capture\n+\n+## Purpose\n+\n+This feature allows for message capture on a per-peer basis.  It answers the simple question: \"Can I see what messages my node is sending and receiving?\"\n+\n+## Usage and Functionality\n+\n+* Run `bitcoind` with the `-capturemessages` option.\n+* Look in the `message_capture` folder in your datadir.\n+  * Typically this will be `~/.bitcoin/message_capture`.\n+  * See that there are many folders inside, one for each peer names with its IP address and port.\n+  * Inside each peer's folder there are two `.dat` files: one is for received messages (`msgs_recv.dat`) and the other is for sent messages (`msgs_sent.dat`).\n+* Run `contrib/message-capture/message-capture-parser.py` with the proper arguments.\n+  * See the `-h` option for help.\n+  * To see all messages, both sent and received, for all peers use:\n+    ```\n+    ./contrib/message-capture/message-capture-parser.py -o out.json \\\n+    ~/.bitcoin/message_capture/**/*.dat\n+    ```\n+  * Note:  The messages in the given `.dat` files will be interleaved in chronological order.  So, giving both received and sent `.dat` files (as above with `*.dat`) will result in all messages being interleaved in chronological order.\n+  * If an output file is not provided (i.e. the `-o` option is not used), then the output prints to `stdout`.\n+* View the resulting output.\n+  * The output file is `JSON` formatted.\n+  * Suggestion: use `jq` to view the output, with `jq out.json`",
      "path": "contrib/message-capture/message-capture-docs.md",
      "position": null,
      "original_position": 25,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "a17b2509e0d7e7e05fd5600d5387608bb706ac0e",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: sorry to be annoying with this command [again](https://github.com/bitcoin/bitcoin/pull/19509#discussion_r523807480), but I just found out that it's mandatory to add a filter as second parameter (e.g. the dot `.` for _all_), otherwise the command fails.\r\n```\r\n$ jq out.json\r\njq: error: out/0 is not defined at <top-level>, line 1:\r\nout.json\r\njq: 1 compile error\r\n\r\n$ jq . out.json\r\n[\r\n  {\r\n    \"msgtype\": \"version\",\r\n    \"direction\": \"sent\",\r\n..........\r\n```\r\n",
      "created_at": "2021-01-21T21:27:30Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r562208110",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562208110"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562209068",
      "pull_request_review_id": 573749922,
      "id": 562209068,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjIwOTA2OA==",
      "diff_hunk": "@@ -0,0 +1,198 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Parse message capture binary files.  To be used in conjunction with -capturemessages.\"\"\"\n+\n+import argparse\n+import os\n+import shutil\n+import sys\n+from io import BytesIO\n+import json\n+from pathlib import Path\n+from typing import Any, List, Optional\n+\n+sys.path.append(os.path.join(os.path.dirname(__file__), '../../test/functional'))\n+\n+from test_framework.messages import ser_uint256     # noqa: E402\n+from test_framework.p2p import MESSAGEMAP           # noqa: E402\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+MSGTYPE_SIZE = 12\n+\n+# The test framework classes stores hashes as large ints in many cases.\n+# These are variables of type uint256 in core.\n+# There isn't a way to distinguish between a large int and a large int that is actually a blob of bytes.\n+# As such, they are itemized here.\n+# Any variables with these names that are of type int are actually uint256 variables.\n+# (These can be easily found by looking for calls to deser_uint256, deser_uint256_vector, and uint256_from_str in messages.py)\n+HASH_INTS = [\n+    \"blockhash\",\n+    \"block_hash\",\n+    \"hash\",\n+    \"hashMerkleRoot\",\n+    \"hashPrevBlock\",\n+    \"hashstop\",\n+    \"prev_header\",\n+    \"sha256\",\n+    \"stop_hash\",\n+]\n+\n+HASH_INT_VECTORS = [\n+    \"hashes\",\n+    \"headers\",\n+    \"vHave\",\n+    \"vHash\",\n+]\n+\n+\n+class ProgressBar:\n+    def __init__(self, total: float):\n+        self.total = total\n+        self.running = 0\n+\n+    def set_progress(self, progress: float):\n+        cols = shutil.get_terminal_size()[0]\n+        if cols <= 12:\n+            return\n+        max_blocks = cols - 9\n+        num_blocks = int(max_blocks * progress)\n+        print('\\r[ {}{} ] {:3.0f}%'\n+              .format('#' * num_blocks,\n+                      ' ' * (max_blocks - num_blocks),\n+                      progress * 100),\n+              end ='')\n+\n+    def update(self, more: float):\n+        self.running += more\n+        self.set_progress(self.running / self.total)\n+\n+\n+def to_jsonable(obj: Any) -> Any:\n+    if hasattr(obj, \"__dict__\"):\n+        return obj.__dict__\n+    elif hasattr(obj, \"__slots__\"):\n+        ret = {}    # type: Any\n+        for slot in obj.__slots__:\n+            val = getattr(obj, slot, None)\n+            if slot in HASH_INTS and isinstance(val, int):\n+                ret[slot] = ser_uint256(val).hex()\n+            elif slot in HASH_INT_VECTORS and isinstance(val[0], int):\n+                ret[slot] = [ser_uint256(a).hex() for a in val]\n+            else:\n+                ret[slot] = to_jsonable(val)\n+        return ret\n+    elif isinstance(obj, list):\n+        return [to_jsonable(a) for a in obj]\n+    elif isinstance(obj, bytes):\n+        return obj.hex()\n+    else:\n+        return obj\n+\n+\n+def process_file(path: str, messages: List[Any], recv: bool, progress_bar: Optional[ProgressBar]) -> None:\n+    with open(path, 'rb') as f_in:\n+        if progress_bar:\n+            bytes_read = 0\n+\n+        while True:\n+            if progress_bar:\n+                # Update progress bar\n+                diff = f_in.tell() - bytes_read - 1\n+                progress_bar.update(diff)\n+                bytes_read = f_in.tell() - 1\n+            ",
      "path": "contrib/message-capture/message-capture-parser.py",
      "position": null,
      "original_position": 106,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "d3353b507fe2a2c26a690186a6cd7ff4cee42ba0",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "yocto-nit: git shows some trailing whitespace in this line",
      "created_at": "2021-01-21T21:29:08Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r562209068",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562209068"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 106,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562272863",
      "pull_request_review_id": 573829313,
      "id": 562272863,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjI3Mjg2Mw==",
      "diff_hunk": "@@ -521,6 +521,7 @@ void SetupServerArgs(NodeContext& node)\n     argsman.AddArg(\"-limitdescendantcount=<n>\", strprintf(\"Do not accept transactions if any ancestor would have <n> or more in-mempool descendants (default: %u)\", DEFAULT_DESCENDANT_LIMIT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-addrmantest\", \"Allows to test address relay on localhost\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-capturemessages\", \"Capture all P2P messages to file\", ArgsManager::ALLOW_BOOL | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "e2b6430dcb50a4e90f70a3dcea693a6dc8112634",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ultranit: \"to file\" is slightly confusing as it's not capturing all traffic into just a single file.",
      "created_at": "2021-01-21T23:50:31Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r562272863",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562272863"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 524,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562273457",
      "pull_request_review_id": 573829313,
      "id": 562273457,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjI3MzQ1Nw==",
      "diff_hunk": "@@ -4042,6 +4042,10 @@ bool PeerManagerImpl::ProcessMessages(CNode* pfrom, std::atomic<bool>& interrupt\n     }\n     CNetMessage& msg(msgs.front());\n \n+    if (gArgs.GetBoolArg(\"-capturemessages\", false)) {",
      "path": "src/net_processing.cpp",
      "position": 21,
      "original_position": 4,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "e2b6430dcb50a4e90f70a3dcea693a6dc8112634",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's a bit strange that this happens in net_processing while the capture of outgoing messages is in net.\r\n\r\nAny reason why this can't be in net as well? I'd expect CNode::ReceiveMsgBytes to work well.",
      "created_at": "2021-01-21T23:52:20Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r562273457",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562273457"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4045,
      "original_line": 4045,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562274872",
      "pull_request_review_id": 573829313,
      "id": 562274872,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjI3NDg3Mg==",
      "diff_hunk": "@@ -0,0 +1,198 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Parse message capture binary files.  To be used in conjunction with -capturemessages.\"\"\"\n+\n+import argparse\n+import os\n+import shutil\n+import sys\n+from io import BytesIO\n+import json\n+from pathlib import Path\n+from typing import Any, List, Optional\n+\n+sys.path.append(os.path.join(os.path.dirname(__file__), '../../test/functional'))\n+\n+from test_framework.messages import ser_uint256     # noqa: E402\n+from test_framework.p2p import MESSAGEMAP           # noqa: E402\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+MSGTYPE_SIZE = 12\n+\n+# The test framework classes stores hashes as large ints in many cases.\n+# These are variables of type uint256 in core.\n+# There isn't a way to distinguish between a large int and a large int that is actually a blob of bytes.\n+# As such, they are itemized here.\n+# Any variables with these names that are of type int are actually uint256 variables.\n+# (These can be easily found by looking for calls to deser_uint256, deser_uint256_vector, and uint256_from_str in messages.py)\n+HASH_INTS = [\n+    \"blockhash\",\n+    \"block_hash\",\n+    \"hash\",\n+    \"hashMerkleRoot\",\n+    \"hashPrevBlock\",\n+    \"hashstop\",\n+    \"prev_header\",\n+    \"sha256\",\n+    \"stop_hash\",\n+]\n+\n+HASH_INT_VECTORS = [\n+    \"hashes\",\n+    \"headers\",\n+    \"vHave\",\n+    \"vHash\",\n+]\n+\n+\n+class ProgressBar:\n+    def __init__(self, total: float):\n+        self.total = total\n+        self.running = 0\n+\n+    def set_progress(self, progress: float):\n+        cols = shutil.get_terminal_size()[0]\n+        if cols <= 12:\n+            return\n+        max_blocks = cols - 9\n+        num_blocks = int(max_blocks * progress)\n+        print('\\r[ {}{} ] {:3.0f}%'\n+              .format('#' * num_blocks,\n+                      ' ' * (max_blocks - num_blocks),\n+                      progress * 100),\n+              end ='')\n+\n+    def update(self, more: float):\n+        self.running += more\n+        self.set_progress(self.running / self.total)\n+\n+\n+def to_jsonable(obj: Any) -> Any:\n+    if hasattr(obj, \"__dict__\"):\n+        return obj.__dict__\n+    elif hasattr(obj, \"__slots__\"):\n+        ret = {}    # type: Any\n+        for slot in obj.__slots__:\n+            val = getattr(obj, slot, None)\n+            if slot in HASH_INTS and isinstance(val, int):\n+                ret[slot] = ser_uint256(val).hex()\n+            elif slot in HASH_INT_VECTORS and isinstance(val[0], int):\n+                ret[slot] = [ser_uint256(a).hex() for a in val]\n+            else:\n+                ret[slot] = to_jsonable(val)\n+        return ret\n+    elif isinstance(obj, list):\n+        return [to_jsonable(a) for a in obj]\n+    elif isinstance(obj, bytes):\n+        return obj.hex()\n+    else:\n+        return obj\n+\n+\n+def process_file(path: str, messages: List[Any], recv: bool, progress_bar: Optional[ProgressBar]) -> None:\n+    with open(path, 'rb') as f_in:\n+        if progress_bar:\n+            bytes_read = 0\n+\n+        while True:\n+            if progress_bar:\n+                # Update progress bar\n+                diff = f_in.tell() - bytes_read - 1\n+                progress_bar.update(diff)\n+                bytes_read = f_in.tell() - 1\n+            \n+            # Read the Header\n+            tmp_header_raw = f_in.read(TIME_SIZE + LENGTH_SIZE + MSGTYPE_SIZE)\n+            if not tmp_header_raw:\n+                break\n+            tmp_header = BytesIO(tmp_header_raw)\n+            time = int.from_bytes(tmp_header.read(TIME_SIZE), \"little\")      # type: int\n+            msgtype = tmp_header.read(MSGTYPE_SIZE).split(b'\\x00', 1)[0]     # type: bytes\n+            length = int.from_bytes(tmp_header.read(LENGTH_SIZE), \"little\")  # type: int\n+\n+            # Determine message type\n+            if msgtype not in MESSAGEMAP:\n+                # For now just skip unrecognized messages\n+                f_in.seek(length, os.SEEK_CUR)\n+                print(f\"Skipping unrecognized message type {msgtype}\", file=sys.stderr)\n+                continue\n+            msg_ser = BytesIO(f_in.read(length))\n+            msg = MESSAGEMAP[msgtype]()\n+\n+            # Deserialize the message\n+            try:\n+                msg.deserialize(msg_ser)\n+            except KeyboardInterrupt:\n+                raise\n+            except Exception:\n+                # Message was bad, skip the rest of the file\n+                print(f\"Found broken message, skipping remainder of file: {path}\", file=sys.stderr)\n+                break\n+\n+            # Convert message to dictionary and add it to the messages dict\n+            msg_dict = {}\n+            msg_dict[\"msgtype\"] = getattr(msg, \"msgtype\", None).decode()\n+            msg_dict[\"direction\"] = \"recv\" if recv else \"sent\"\n+            msg_dict[\"time\"] = time\n+            msg_dict[\"size\"] = length   # \"size\" is less readable here, but more readable in the output\n+            if length:\n+                msg_dict[\"body\"] = to_jsonable(msg)\n+            messages.append(msg_dict)\n+\n+        if progress_bar:\n+            # Update the progress bar to the end of the current file\n+            # in case we exited the loop early\n+            f_in.seek(0, os.SEEK_END)   # Go to end of file\n+            diff = f_in.tell() - bytes_read - 1\n+            progress_bar.update(diff)\n+\n+\n+def main():\n+    \"\"\"Main\"\"\"\n+    parser = argparse.ArgumentParser(\n+        description=__doc__,\n+        epilog=\"EXAMPLE \\n\\t{0} -o out.json <data-dir>/message_capture/**/*.dat\".format(sys.argv[0]),\n+        formatter_class=argparse.RawTextHelpFormatter)\n+    parser.add_argument(\n+        \"capturepaths\",\n+        nargs='+',\n+        help=\"binary message capture files to parse.\")\n+    parser.add_argument(\n+        \"-o\", \"--output\",\n+        help=\"output file.  If unset print to stdout\")\n+    parser.add_argument(\n+        \"-n\", \"--no-progress-bar\",\n+        action='store_true',\n+        help=\"disable the progress bar.  Automatically set if the output is not a terminal\")\n+    args = parser.parse_args()\n+    capturepaths = [Path.cwd() / Path(capturepath) for capturepath in args.capturepaths]\n+    output = Path.cwd() / Path(args.output) if args.output else False\n+    use_progress_bar = (not args.no_progress_bar) and sys.stdout.isatty()\n+\n+    messages = []   # type: List[Any]\n+    if use_progress_bar:\n+        total_size = sum(capture.stat().st_size for capture in capturepaths)\n+        progress_bar = ProgressBar(total_size)\n+    else:\n+        progress_bar = None\n+\n+    for capture in capturepaths:\n+        process_file(str(capture), messages, \"recv\" in capture.stem, progress_bar)\n+\n+    messages.sort(key=lambda msg: msg['time'])",
      "path": "contrib/message-capture/message-capture-parser.py",
      "position": 201,
      "original_position": 185,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "d3353b507fe2a2c26a690186a6cd7ff4cee42ba0",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "A suggestion (possibly for a future PR):\r\n\r\nIt's unnecessary to have this script load the entire dump of all files into memory and then sort them, as we know that every individual file is internally sorted.\r\n\r\nSo an approach is possible where you have a loop in which you read one message for each file, and then loop {pick the one with the smallest timestamp; print that one; read one message from that file; repeat}. This would be faster, lower memory (especially when analyzing lots of dumps), and support streaming.",
      "created_at": "2021-01-21T23:56:32Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r562274872",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562274872"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 201,
      "original_line": 201,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562277332",
      "pull_request_review_id": 573829313,
      "id": 562277332,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjI3NzMzMg==",
      "diff_hunk": "@@ -521,6 +521,7 @@ void SetupServerArgs(NodeContext& node)\n     argsman.AddArg(\"-limitdescendantcount=<n>\", strprintf(\"Do not accept transactions if any ancestor would have <n> or more in-mempool descendants (default: %u)\", DEFAULT_DESCENDANT_LIMIT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-addrmantest\", \"Allows to test address relay on localhost\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-capturemessages\", \"Capture all P2P messages to file\", ArgsManager::ALLOW_BOOL | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "e2b6430dcb50a4e90f70a3dcea693a6dc8112634",
      "in_reply_to_id": 562272863,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why make this DEBUG_ONLY? It's certainly not a feature for all users, but it's also not just a development debugging tool.",
      "created_at": "2021-01-22T00:03:22Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r562277332",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562277332"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 524,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562284378",
      "pull_request_review_id": 573842467,
      "id": 562284378,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjI4NDM3OA==",
      "diff_hunk": "@@ -0,0 +1,198 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Parse message capture binary files.  To be used in conjunction with -capturemessages.\"\"\"\n+\n+import argparse\n+import os\n+import shutil\n+import sys\n+from io import BytesIO\n+import json\n+from pathlib import Path\n+from typing import Any, List, Optional\n+\n+sys.path.append(os.path.join(os.path.dirname(__file__), '../../test/functional'))\n+\n+from test_framework.messages import ser_uint256     # noqa: E402\n+from test_framework.p2p import MESSAGEMAP           # noqa: E402\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+MSGTYPE_SIZE = 12\n+\n+# The test framework classes stores hashes as large ints in many cases.\n+# These are variables of type uint256 in core.\n+# There isn't a way to distinguish between a large int and a large int that is actually a blob of bytes.\n+# As such, they are itemized here.\n+# Any variables with these names that are of type int are actually uint256 variables.\n+# (These can be easily found by looking for calls to deser_uint256, deser_uint256_vector, and uint256_from_str in messages.py)\n+HASH_INTS = [\n+    \"blockhash\",\n+    \"block_hash\",\n+    \"hash\",\n+    \"hashMerkleRoot\",\n+    \"hashPrevBlock\",\n+    \"hashstop\",\n+    \"prev_header\",\n+    \"sha256\",\n+    \"stop_hash\",\n+]\n+\n+HASH_INT_VECTORS = [\n+    \"hashes\",\n+    \"headers\",\n+    \"vHave\",\n+    \"vHash\",\n+]\n+\n+\n+class ProgressBar:\n+    def __init__(self, total: float):\n+        self.total = total\n+        self.running = 0\n+\n+    def set_progress(self, progress: float):\n+        cols = shutil.get_terminal_size()[0]\n+        if cols <= 12:\n+            return\n+        max_blocks = cols - 9\n+        num_blocks = int(max_blocks * progress)\n+        print('\\r[ {}{} ] {:3.0f}%'\n+              .format('#' * num_blocks,\n+                      ' ' * (max_blocks - num_blocks),\n+                      progress * 100),\n+              end ='')\n+\n+    def update(self, more: float):\n+        self.running += more\n+        self.set_progress(self.running / self.total)\n+\n+\n+def to_jsonable(obj: Any) -> Any:\n+    if hasattr(obj, \"__dict__\"):\n+        return obj.__dict__\n+    elif hasattr(obj, \"__slots__\"):\n+        ret = {}    # type: Any\n+        for slot in obj.__slots__:\n+            val = getattr(obj, slot, None)\n+            if slot in HASH_INTS and isinstance(val, int):\n+                ret[slot] = ser_uint256(val).hex()\n+            elif slot in HASH_INT_VECTORS and isinstance(val[0], int):\n+                ret[slot] = [ser_uint256(a).hex() for a in val]\n+            else:\n+                ret[slot] = to_jsonable(val)\n+        return ret\n+    elif isinstance(obj, list):\n+        return [to_jsonable(a) for a in obj]\n+    elif isinstance(obj, bytes):\n+        return obj.hex()\n+    else:\n+        return obj\n+\n+\n+def process_file(path: str, messages: List[Any], recv: bool, progress_bar: Optional[ProgressBar]) -> None:\n+    with open(path, 'rb') as f_in:\n+        if progress_bar:\n+            bytes_read = 0\n+\n+        while True:\n+            if progress_bar:\n+                # Update progress bar\n+                diff = f_in.tell() - bytes_read - 1\n+                progress_bar.update(diff)\n+                bytes_read = f_in.tell() - 1\n+            \n+            # Read the Header\n+            tmp_header_raw = f_in.read(TIME_SIZE + LENGTH_SIZE + MSGTYPE_SIZE)\n+            if not tmp_header_raw:\n+                break\n+            tmp_header = BytesIO(tmp_header_raw)\n+            time = int.from_bytes(tmp_header.read(TIME_SIZE), \"little\")      # type: int\n+            msgtype = tmp_header.read(MSGTYPE_SIZE).split(b'\\x00', 1)[0]     # type: bytes\n+            length = int.from_bytes(tmp_header.read(LENGTH_SIZE), \"little\")  # type: int\n+\n+            # Determine message type\n+            if msgtype not in MESSAGEMAP:\n+                # For now just skip unrecognized messages\n+                f_in.seek(length, os.SEEK_CUR)\n+                print(f\"Skipping unrecognized message type {msgtype}\", file=sys.stderr)\n+                continue\n+            msg_ser = BytesIO(f_in.read(length))\n+            msg = MESSAGEMAP[msgtype]()\n+\n+            # Deserialize the message\n+            try:\n+                msg.deserialize(msg_ser)\n+            except KeyboardInterrupt:\n+                raise\n+            except Exception:\n+                # Message was bad, skip the rest of the file\n+                print(f\"Found broken message, skipping remainder of file: {path}\", file=sys.stderr)",
      "path": "contrib/message-capture/message-capture-parser.py",
      "position": null,
      "original_position": 132,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "a17b2509e0d7e7e05fd5600d5387608bb706ac0e",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not sure this is what you want to do when an unparsable message is encountered. As each record has an overall length field, there should be no problem with skipping it.",
      "created_at": "2021-01-22T00:23:01Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r562284378",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562284378"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 132,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562515326",
      "pull_request_review_id": 574106687,
      "id": 562515326,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjUxNTMyNg==",
      "diff_hunk": "@@ -4042,6 +4042,10 @@ bool PeerManagerImpl::ProcessMessages(CNode* pfrom, std::atomic<bool>& interrupt\n     }\n     CNetMessage& msg(msgs.front());\n \n+    if (gArgs.GetBoolArg(\"-capturemessages\", false)) {\n+        CaptureMessage(pfrom->addr, msg.m_command, MakeUCharSpan(msg.m_recv), /* incoming */ true);",
      "path": "src/net_processing.cpp",
      "position": 22,
      "original_position": 5,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "e2b6430dcb50a4e90f70a3dcea693a6dc8112634",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Note to myself: Remove `MakeUCharSpan` after #20464 ",
      "created_at": "2021-01-22T09:53:55Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r562515326",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562515326"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4046,
      "original_line": 4046,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562522841",
      "pull_request_review_id": 574106687,
      "id": 562522841,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjUyMjg0MQ==",
      "diff_hunk": "@@ -4042,6 +4042,10 @@ bool PeerManagerImpl::ProcessMessages(CNode* pfrom, std::atomic<bool>& interrupt\n     }\n     CNetMessage& msg(msgs.front());\n \n+    if (gArgs.GetBoolArg(\"-capturemessages\", false)) {",
      "path": "src/net_processing.cpp",
      "position": 21,
      "original_position": 4,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "e2b6430dcb50a4e90f70a3dcea693a6dc8112634",
      "in_reply_to_id": 562273457,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The difference would be that disconnected nodes may still have their messages captured and that the capture file will record a time closer to the receive time, as opposed to the process time of the message? No opinion on what to do, just asking about the difference.",
      "created_at": "2021-01-22T10:06:28Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r562522841",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562522841"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4045,
      "original_line": 4045,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562522979",
      "pull_request_review_id": 574116877,
      "id": 562522979,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjUyMjk3OQ==",
      "diff_hunk": "@@ -1239,6 +1242,8 @@ inline std::chrono::microseconds PoissonNextSend(std::chrono::microseconds now,\n     return std::chrono::microseconds{PoissonNextSend(now.count(), average_interval.count())};\n }\n \n+void CaptureMessage(const CAddress& addr, const std::string& msg_type, const Span<const unsigned char>& data, bool is_incoming);",
      "path": "src/net.h",
      "position": 22,
      "original_position": 21,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "af8bcd1a6ecdfa15d7fb0f98256d47dec9b40f61",
      "in_reply_to_id": 560908669,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That's fair!",
      "created_at": "2021-01-22T10:06:41Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r562522979",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562522979"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1246,
      "original_line": 1246,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562524979",
      "pull_request_review_id": 574106687,
      "id": 562524979,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjUyNDk3OQ==",
      "diff_hunk": "@@ -0,0 +1,198 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Parse message capture binary files.  To be used in conjunction with -capturemessages.\"\"\"\n+\n+import argparse\n+import os\n+import shutil\n+import sys\n+from io import BytesIO\n+import json\n+from pathlib import Path\n+from typing import Any, List, Optional\n+\n+sys.path.append(os.path.join(os.path.dirname(__file__), '../../test/functional'))\n+\n+from test_framework.messages import ser_uint256     # noqa: E402\n+from test_framework.p2p import MESSAGEMAP           # noqa: E402\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+MSGTYPE_SIZE = 12\n+\n+# The test framework classes stores hashes as large ints in many cases.\n+# These are variables of type uint256 in core.\n+# There isn't a way to distinguish between a large int and a large int that is actually a blob of bytes.\n+# As such, they are itemized here.\n+# Any variables with these names that are of type int are actually uint256 variables.\n+# (These can be easily found by looking for calls to deser_uint256, deser_uint256_vector, and uint256_from_str in messages.py)\n+HASH_INTS = [\n+    \"blockhash\",\n+    \"block_hash\",\n+    \"hash\",\n+    \"hashMerkleRoot\",\n+    \"hashPrevBlock\",\n+    \"hashstop\",\n+    \"prev_header\",\n+    \"sha256\",\n+    \"stop_hash\",\n+]\n+\n+HASH_INT_VECTORS = [\n+    \"hashes\",\n+    \"headers\",\n+    \"vHave\",\n+    \"vHash\",\n+]",
      "path": "contrib/message-capture/message-capture-parser.py",
      "position": 48,
      "original_position": 48,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "a17b2509e0d7e7e05fd5600d5387608bb706ac0e",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "completely unrelated, but this seems fragile. Would be good to remove those ints and only use uint256`s",
      "created_at": "2021-01-22T10:09:54Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r562524979",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562524979"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 48,
      "original_line": 48,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562531971",
      "pull_request_review_id": 574106687,
      "id": 562531971,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjUzMTk3MQ==",
      "diff_hunk": "@@ -0,0 +1,198 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Parse message capture binary files.  To be used in conjunction with -capturemessages.\"\"\"\n+\n+import argparse\n+import os\n+import shutil\n+import sys\n+from io import BytesIO\n+import json\n+from pathlib import Path\n+from typing import Any, List, Optional\n+\n+sys.path.append(os.path.join(os.path.dirname(__file__), '../../test/functional'))\n+\n+from test_framework.messages import ser_uint256     # noqa: E402\n+from test_framework.p2p import MESSAGEMAP           # noqa: E402\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+MSGTYPE_SIZE = 12\n+\n+# The test framework classes stores hashes as large ints in many cases.\n+# These are variables of type uint256 in core.\n+# There isn't a way to distinguish between a large int and a large int that is actually a blob of bytes.\n+# As such, they are itemized here.\n+# Any variables with these names that are of type int are actually uint256 variables.\n+# (These can be easily found by looking for calls to deser_uint256, deser_uint256_vector, and uint256_from_str in messages.py)\n+HASH_INTS = [\n+    \"blockhash\",\n+    \"block_hash\",\n+    \"hash\",\n+    \"hashMerkleRoot\",\n+    \"hashPrevBlock\",\n+    \"hashstop\",\n+    \"prev_header\",\n+    \"sha256\",\n+    \"stop_hash\",\n+]\n+\n+HASH_INT_VECTORS = [\n+    \"hashes\",\n+    \"headers\",\n+    \"vHave\",\n+    \"vHash\",\n+]\n+\n+\n+class ProgressBar:\n+    def __init__(self, total: float):\n+        self.total = total\n+        self.running = 0\n+\n+    def set_progress(self, progress: float):\n+        cols = shutil.get_terminal_size()[0]\n+        if cols <= 12:\n+            return\n+        max_blocks = cols - 9\n+        num_blocks = int(max_blocks * progress)\n+        print('\\r[ {}{} ] {:3.0f}%'\n+              .format('#' * num_blocks,\n+                      ' ' * (max_blocks - num_blocks),\n+                      progress * 100),\n+              end ='')\n+\n+    def update(self, more: float):\n+        self.running += more\n+        self.set_progress(self.running / self.total)\n+\n+\n+def to_jsonable(obj: Any) -> Any:\n+    if hasattr(obj, \"__dict__\"):\n+        return obj.__dict__\n+    elif hasattr(obj, \"__slots__\"):\n+        ret = {}    # type: Any\n+        for slot in obj.__slots__:\n+            val = getattr(obj, slot, None)\n+            if slot in HASH_INTS and isinstance(val, int):\n+                ret[slot] = ser_uint256(val).hex()\n+            elif slot in HASH_INT_VECTORS and isinstance(val[0], int):\n+                ret[slot] = [ser_uint256(a).hex() for a in val]\n+            else:\n+                ret[slot] = to_jsonable(val)\n+        return ret\n+    elif isinstance(obj, list):\n+        return [to_jsonable(a) for a in obj]\n+    elif isinstance(obj, bytes):\n+        return obj.hex()\n+    else:\n+        return obj\n+\n+\n+def process_file(path: str, messages: List[Any], recv: bool, progress_bar: Optional[ProgressBar]) -> None:\n+    with open(path, 'rb') as f_in:\n+        if progress_bar:\n+            bytes_read = 0\n+\n+        while True:\n+            if progress_bar:\n+                # Update progress bar\n+                diff = f_in.tell() - bytes_read - 1\n+                progress_bar.update(diff)\n+                bytes_read = f_in.tell() - 1\n+            \n+            # Read the Header\n+            tmp_header_raw = f_in.read(TIME_SIZE + LENGTH_SIZE + MSGTYPE_SIZE)\n+            if not tmp_header_raw:\n+                break\n+            tmp_header = BytesIO(tmp_header_raw)\n+            time = int.from_bytes(tmp_header.read(TIME_SIZE), \"little\")      # type: int\n+            msgtype = tmp_header.read(MSGTYPE_SIZE).split(b'\\x00', 1)[0]     # type: bytes\n+            length = int.from_bytes(tmp_header.read(LENGTH_SIZE), \"little\")  # type: int\n+\n+            # Determine message type\n+            if msgtype not in MESSAGEMAP:\n+                # For now just skip unrecognized messages\n+                f_in.seek(length, os.SEEK_CUR)\n+                print(f\"Skipping unrecognized message type {msgtype}\", file=sys.stderr)\n+                continue\n+            msg_ser = BytesIO(f_in.read(length))\n+            msg = MESSAGEMAP[msgtype]()\n+\n+            # Deserialize the message\n+            try:\n+                msg.deserialize(msg_ser)\n+            except KeyboardInterrupt:\n+                raise\n+            except Exception:\n+                # Message was bad, skip the rest of the file\n+                print(f\"Found broken message, skipping remainder of file: {path}\", file=sys.stderr)",
      "path": "contrib/message-capture/message-capture-parser.py",
      "position": null,
      "original_position": 132,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "a17b2509e0d7e7e05fd5600d5387608bb706ac0e",
      "in_reply_to_id": 562284378,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Tend to agree. The test framework can only deserialize a subset of messages than what Bitcoin Core can deserialize. This is expected to happen in practice, so should fail gracefully in some way. Probably like an unknown message type.",
      "created_at": "2021-01-22T10:21:16Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r562531971",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562531971"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 132,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562532549",
      "pull_request_review_id": 574129216,
      "id": 562532549,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjUzMjU0OQ==",
      "diff_hunk": "@@ -4042,6 +4042,10 @@ bool PeerManagerImpl::ProcessMessages(CNode* pfrom, std::atomic<bool>& interrupt\n     }\n     CNetMessage& msg(msgs.front());\n \n+    if (gArgs.GetBoolArg(\"-capturemessages\", false)) {",
      "path": "src/net_processing.cpp",
      "position": 21,
      "original_position": 4,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "e2b6430dcb50a4e90f70a3dcea693a6dc8112634",
      "in_reply_to_id": 562273457,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "There was some discussion of that here: https://github.com/bitcoin/bitcoin/pull/19509#discussion_r454190521.",
      "created_at": "2021-01-22T10:22:16Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r562532549",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562532549"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4045,
      "original_line": 4045,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562533570",
      "pull_request_review_id": 574130611,
      "id": 562533570,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjUzMzU3MA==",
      "diff_hunk": "@@ -521,6 +521,7 @@ void SetupServerArgs(NodeContext& node)\n     argsman.AddArg(\"-limitdescendantcount=<n>\", strprintf(\"Do not accept transactions if any ancestor would have <n> or more in-mempool descendants (default: %u)\", DEFAULT_DESCENDANT_LIMIT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-addrmantest\", \"Allows to test address relay on localhost\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-capturemessages\", \"Capture all P2P messages to file\", ArgsManager::ALLOW_BOOL | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "e2b6430dcb50a4e90f70a3dcea693a6dc8112634",
      "in_reply_to_id": 562272863,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Probably my suggestion as well. Making it DEBUG_ONLY allows this to be an experimental feature that we can alter/remove in future releases without disrupting users' workflow. We can always remove DEBUG_ONLY later if we're happy to make it more visible.",
      "created_at": "2021-01-22T10:24:05Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r562533570",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562533570"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 524,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562535085",
      "pull_request_review_id": 574132408,
      "id": 562535085,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjUzNTA4NQ==",
      "diff_hunk": "@@ -0,0 +1,198 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Parse message capture binary files.  To be used in conjunction with -capturemessages.\"\"\"\n+\n+import argparse\n+import os\n+import shutil\n+import sys\n+from io import BytesIO\n+import json\n+from pathlib import Path\n+from typing import Any, List, Optional\n+\n+sys.path.append(os.path.join(os.path.dirname(__file__), '../../test/functional'))\n+\n+from test_framework.messages import ser_uint256     # noqa: E402\n+from test_framework.p2p import MESSAGEMAP           # noqa: E402\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+MSGTYPE_SIZE = 12\n+\n+# The test framework classes stores hashes as large ints in many cases.\n+# These are variables of type uint256 in core.\n+# There isn't a way to distinguish between a large int and a large int that is actually a blob of bytes.\n+# As such, they are itemized here.\n+# Any variables with these names that are of type int are actually uint256 variables.\n+# (These can be easily found by looking for calls to deser_uint256, deser_uint256_vector, and uint256_from_str in messages.py)\n+HASH_INTS = [\n+    \"blockhash\",\n+    \"block_hash\",\n+    \"hash\",\n+    \"hashMerkleRoot\",\n+    \"hashPrevBlock\",\n+    \"hashstop\",\n+    \"prev_header\",\n+    \"sha256\",\n+    \"stop_hash\",\n+]\n+\n+HASH_INT_VECTORS = [\n+    \"hashes\",\n+    \"headers\",\n+    \"vHave\",\n+    \"vHash\",\n+]\n+\n+\n+class ProgressBar:\n+    def __init__(self, total: float):\n+        self.total = total\n+        self.running = 0\n+\n+    def set_progress(self, progress: float):\n+        cols = shutil.get_terminal_size()[0]\n+        if cols <= 12:\n+            return\n+        max_blocks = cols - 9\n+        num_blocks = int(max_blocks * progress)\n+        print('\\r[ {}{} ] {:3.0f}%'\n+              .format('#' * num_blocks,\n+                      ' ' * (max_blocks - num_blocks),\n+                      progress * 100),\n+              end ='')\n+\n+    def update(self, more: float):\n+        self.running += more\n+        self.set_progress(self.running / self.total)\n+\n+\n+def to_jsonable(obj: Any) -> Any:\n+    if hasattr(obj, \"__dict__\"):\n+        return obj.__dict__\n+    elif hasattr(obj, \"__slots__\"):\n+        ret = {}    # type: Any\n+        for slot in obj.__slots__:\n+            val = getattr(obj, slot, None)\n+            if slot in HASH_INTS and isinstance(val, int):\n+                ret[slot] = ser_uint256(val).hex()\n+            elif slot in HASH_INT_VECTORS and isinstance(val[0], int):\n+                ret[slot] = [ser_uint256(a).hex() for a in val]\n+            else:\n+                ret[slot] = to_jsonable(val)\n+        return ret\n+    elif isinstance(obj, list):\n+        return [to_jsonable(a) for a in obj]\n+    elif isinstance(obj, bytes):\n+        return obj.hex()\n+    else:\n+        return obj\n+\n+\n+def process_file(path: str, messages: List[Any], recv: bool, progress_bar: Optional[ProgressBar]) -> None:\n+    with open(path, 'rb') as f_in:\n+        if progress_bar:\n+            bytes_read = 0\n+\n+        while True:\n+            if progress_bar:\n+                # Update progress bar\n+                diff = f_in.tell() - bytes_read - 1\n+                progress_bar.update(diff)\n+                bytes_read = f_in.tell() - 1\n+            \n+            # Read the Header\n+            tmp_header_raw = f_in.read(TIME_SIZE + LENGTH_SIZE + MSGTYPE_SIZE)\n+            if not tmp_header_raw:\n+                break\n+            tmp_header = BytesIO(tmp_header_raw)\n+            time = int.from_bytes(tmp_header.read(TIME_SIZE), \"little\")      # type: int\n+            msgtype = tmp_header.read(MSGTYPE_SIZE).split(b'\\x00', 1)[0]     # type: bytes\n+            length = int.from_bytes(tmp_header.read(LENGTH_SIZE), \"little\")  # type: int\n+\n+            # Determine message type\n+            if msgtype not in MESSAGEMAP:\n+                # For now just skip unrecognized messages\n+                f_in.seek(length, os.SEEK_CUR)\n+                print(f\"Skipping unrecognized message type {msgtype}\", file=sys.stderr)\n+                continue\n+            msg_ser = BytesIO(f_in.read(length))\n+            msg = MESSAGEMAP[msgtype]()\n+\n+            # Deserialize the message\n+            try:\n+                msg.deserialize(msg_ser)\n+            except KeyboardInterrupt:\n+                raise\n+            except Exception:\n+                # Message was bad, skip the rest of the file\n+                print(f\"Found broken message, skipping remainder of file: {path}\", file=sys.stderr)\n+                break\n+\n+            # Convert message to dictionary and add it to the messages dict\n+            msg_dict = {}\n+            msg_dict[\"msgtype\"] = getattr(msg, \"msgtype\", None).decode()\n+            msg_dict[\"direction\"] = \"recv\" if recv else \"sent\"\n+            msg_dict[\"time\"] = time\n+            msg_dict[\"size\"] = length   # \"size\" is less readable here, but more readable in the output\n+            if length:\n+                msg_dict[\"body\"] = to_jsonable(msg)\n+            messages.append(msg_dict)\n+\n+        if progress_bar:\n+            # Update the progress bar to the end of the current file\n+            # in case we exited the loop early\n+            f_in.seek(0, os.SEEK_END)   # Go to end of file\n+            diff = f_in.tell() - bytes_read - 1\n+            progress_bar.update(diff)\n+\n+\n+def main():\n+    \"\"\"Main\"\"\"\n+    parser = argparse.ArgumentParser(\n+        description=__doc__,\n+        epilog=\"EXAMPLE \\n\\t{0} -o out.json <data-dir>/message_capture/**/*.dat\".format(sys.argv[0]),\n+        formatter_class=argparse.RawTextHelpFormatter)\n+    parser.add_argument(\n+        \"capturepaths\",\n+        nargs='+',\n+        help=\"binary message capture files to parse.\")\n+    parser.add_argument(\n+        \"-o\", \"--output\",\n+        help=\"output file.  If unset print to stdout\")\n+    parser.add_argument(\n+        \"-n\", \"--no-progress-bar\",\n+        action='store_true',\n+        help=\"disable the progress bar.  Automatically set if the output is not a terminal\")\n+    args = parser.parse_args()\n+    capturepaths = [Path.cwd() / Path(capturepath) for capturepath in args.capturepaths]\n+    output = Path.cwd() / Path(args.output) if args.output else False\n+    use_progress_bar = (not args.no_progress_bar) and sys.stdout.isatty()\n+\n+    messages = []   # type: List[Any]\n+    if use_progress_bar:\n+        total_size = sum(capture.stat().st_size for capture in capturepaths)\n+        progress_bar = ProgressBar(total_size)\n+    else:\n+        progress_bar = None\n+\n+    for capture in capturepaths:\n+        process_file(str(capture), messages, \"recv\" in capture.stem, progress_bar)\n+\n+    messages.sort(key=lambda msg: msg['time'])",
      "path": "contrib/message-capture/message-capture-parser.py",
      "position": 201,
      "original_position": 185,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "d3353b507fe2a2c26a690186a6cd7ff4cee42ba0",
      "in_reply_to_id": 562274872,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, definitely a good suggestion. I agree this can wait for a future PR.\r\n\r\nSee the use of `heapq.merge()` in `test/functional/combine_logs.py` for one way to do this (although I never enhanced that to support streaming since there wasn't an immediate need).",
      "created_at": "2021-01-22T10:26:28Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r562535085",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562535085"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 201,
      "original_line": 201,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562537965",
      "pull_request_review_id": 574106687,
      "id": 562537965,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjUzNzk2NQ==",
      "diff_hunk": "@@ -0,0 +1,198 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Parse message capture binary files.  To be used in conjunction with -capturemessages.\"\"\"\n+\n+import argparse\n+import os\n+import shutil\n+import sys\n+from io import BytesIO\n+import json\n+from pathlib import Path\n+from typing import Any, List, Optional\n+\n+sys.path.append(os.path.join(os.path.dirname(__file__), '../../test/functional'))\n+\n+from test_framework.messages import ser_uint256     # noqa: E402\n+from test_framework.p2p import MESSAGEMAP           # noqa: E402\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+MSGTYPE_SIZE = 12\n+\n+# The test framework classes stores hashes as large ints in many cases.\n+# These are variables of type uint256 in core.\n+# There isn't a way to distinguish between a large int and a large int that is actually a blob of bytes.\n+# As such, they are itemized here.\n+# Any variables with these names that are of type int are actually uint256 variables.\n+# (These can be easily found by looking for calls to deser_uint256, deser_uint256_vector, and uint256_from_str in messages.py)\n+HASH_INTS = [\n+    \"blockhash\",\n+    \"block_hash\",\n+    \"hash\",\n+    \"hashMerkleRoot\",\n+    \"hashPrevBlock\",\n+    \"hashstop\",\n+    \"prev_header\",\n+    \"sha256\",\n+    \"stop_hash\",\n+]\n+\n+HASH_INT_VECTORS = [\n+    \"hashes\",\n+    \"headers\",\n+    \"vHave\",\n+    \"vHash\",\n+]\n+\n+\n+class ProgressBar:\n+    def __init__(self, total: float):\n+        self.total = total\n+        self.running = 0\n+\n+    def set_progress(self, progress: float):\n+        cols = shutil.get_terminal_size()[0]\n+        if cols <= 12:\n+            return\n+        max_blocks = cols - 9\n+        num_blocks = int(max_blocks * progress)\n+        print('\\r[ {}{} ] {:3.0f}%'\n+              .format('#' * num_blocks,\n+                      ' ' * (max_blocks - num_blocks),\n+                      progress * 100),\n+              end ='')\n+\n+    def update(self, more: float):\n+        self.running += more\n+        self.set_progress(self.running / self.total)\n+\n+\n+def to_jsonable(obj: Any) -> Any:\n+    if hasattr(obj, \"__dict__\"):\n+        return obj.__dict__\n+    elif hasattr(obj, \"__slots__\"):\n+        ret = {}    # type: Any\n+        for slot in obj.__slots__:\n+            val = getattr(obj, slot, None)\n+            if slot in HASH_INTS and isinstance(val, int):\n+                ret[slot] = ser_uint256(val).hex()\n+            elif slot in HASH_INT_VECTORS and isinstance(val[0], int):\n+                ret[slot] = [ser_uint256(a).hex() for a in val]\n+            else:\n+                ret[slot] = to_jsonable(val)\n+        return ret\n+    elif isinstance(obj, list):\n+        return [to_jsonable(a) for a in obj]\n+    elif isinstance(obj, bytes):\n+        return obj.hex()\n+    else:\n+        return obj\n+\n+\n+def process_file(path: str, messages: List[Any], recv: bool, progress_bar: Optional[ProgressBar]) -> None:\n+    with open(path, 'rb') as f_in:\n+        if progress_bar:\n+            bytes_read = 0\n+\n+        while True:\n+            if progress_bar:\n+                # Update progress bar\n+                diff = f_in.tell() - bytes_read - 1\n+                progress_bar.update(diff)\n+                bytes_read = f_in.tell() - 1\n+            \n+            # Read the Header\n+            tmp_header_raw = f_in.read(TIME_SIZE + LENGTH_SIZE + MSGTYPE_SIZE)\n+            if not tmp_header_raw:\n+                break\n+            tmp_header = BytesIO(tmp_header_raw)\n+            time = int.from_bytes(tmp_header.read(TIME_SIZE), \"little\")      # type: int\n+            msgtype = tmp_header.read(MSGTYPE_SIZE).split(b'\\x00', 1)[0]     # type: bytes\n+            length = int.from_bytes(tmp_header.read(LENGTH_SIZE), \"little\")  # type: int\n+\n+            # Determine message type\n+            if msgtype not in MESSAGEMAP:\n+                # For now just skip unrecognized messages\n+                f_in.seek(length, os.SEEK_CUR)\n+                print(f\"Skipping unrecognized message type {msgtype}\", file=sys.stderr)\n+                continue\n+            msg_ser = BytesIO(f_in.read(length))\n+            msg = MESSAGEMAP[msgtype]()\n+\n+            # Deserialize the message\n+            try:\n+                msg.deserialize(msg_ser)\n+            except KeyboardInterrupt:\n+                raise\n+            except Exception:\n+                # Message was bad, skip the rest of the file\n+                print(f\"Found broken message, skipping remainder of file: {path}\", file=sys.stderr)\n+                break\n+\n+            # Convert message to dictionary and add it to the messages dict\n+            msg_dict = {}\n+            msg_dict[\"msgtype\"] = getattr(msg, \"msgtype\", None).decode()",
      "path": "contrib/message-capture/message-capture-parser.py",
      "position": null,
      "original_position": 137,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "a17b2509e0d7e7e05fd5600d5387608bb706ac0e",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit\r\n\r\n```suggestion\r\n            msg_dict[\"msgtype\"] = msg.msgtype.decode()\r\n```\r\nor\r\n```suggestion\r\n            msg_dict[\"msgtype\"] = msg_type.decode()\r\n```",
      "created_at": "2021-01-22T10:30:49Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r562537965",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562537965"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 137,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562539575",
      "pull_request_review_id": 574106687,
      "id": 562539575,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjUzOTU3NQ==",
      "diff_hunk": "@@ -0,0 +1,198 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Parse message capture binary files.  To be used in conjunction with -capturemessages.\"\"\"\n+\n+import argparse\n+import os\n+import shutil\n+import sys\n+from io import BytesIO\n+import json\n+from pathlib import Path\n+from typing import Any, List, Optional\n+\n+sys.path.append(os.path.join(os.path.dirname(__file__), '../../test/functional'))\n+\n+from test_framework.messages import ser_uint256     # noqa: E402\n+from test_framework.p2p import MESSAGEMAP           # noqa: E402\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+MSGTYPE_SIZE = 12\n+\n+# The test framework classes stores hashes as large ints in many cases.\n+# These are variables of type uint256 in core.\n+# There isn't a way to distinguish between a large int and a large int that is actually a blob of bytes.\n+# As such, they are itemized here.\n+# Any variables with these names that are of type int are actually uint256 variables.\n+# (These can be easily found by looking for calls to deser_uint256, deser_uint256_vector, and uint256_from_str in messages.py)\n+HASH_INTS = [\n+    \"blockhash\",\n+    \"block_hash\",\n+    \"hash\",\n+    \"hashMerkleRoot\",\n+    \"hashPrevBlock\",\n+    \"hashstop\",\n+    \"prev_header\",\n+    \"sha256\",\n+    \"stop_hash\",\n+]\n+\n+HASH_INT_VECTORS = [\n+    \"hashes\",\n+    \"headers\",\n+    \"vHave\",\n+    \"vHash\",\n+]\n+\n+\n+class ProgressBar:\n+    def __init__(self, total: float):\n+        self.total = total\n+        self.running = 0\n+\n+    def set_progress(self, progress: float):\n+        cols = shutil.get_terminal_size()[0]\n+        if cols <= 12:\n+            return\n+        max_blocks = cols - 9\n+        num_blocks = int(max_blocks * progress)\n+        print('\\r[ {}{} ] {:3.0f}%'\n+              .format('#' * num_blocks,\n+                      ' ' * (max_blocks - num_blocks),\n+                      progress * 100),\n+              end ='')\n+\n+    def update(self, more: float):\n+        self.running += more\n+        self.set_progress(self.running / self.total)\n+\n+\n+def to_jsonable(obj: Any) -> Any:\n+    if hasattr(obj, \"__dict__\"):\n+        return obj.__dict__\n+    elif hasattr(obj, \"__slots__\"):\n+        ret = {}    # type: Any\n+        for slot in obj.__slots__:\n+            val = getattr(obj, slot, None)\n+            if slot in HASH_INTS and isinstance(val, int):\n+                ret[slot] = ser_uint256(val).hex()\n+            elif slot in HASH_INT_VECTORS and isinstance(val[0], int):\n+                ret[slot] = [ser_uint256(a).hex() for a in val]\n+            else:\n+                ret[slot] = to_jsonable(val)\n+        return ret\n+    elif isinstance(obj, list):\n+        return [to_jsonable(a) for a in obj]\n+    elif isinstance(obj, bytes):\n+        return obj.hex()\n+    else:\n+        return obj\n+\n+\n+def process_file(path: str, messages: List[Any], recv: bool, progress_bar: Optional[ProgressBar]) -> None:\n+    with open(path, 'rb') as f_in:\n+        if progress_bar:\n+            bytes_read = 0\n+\n+        while True:\n+            if progress_bar:\n+                # Update progress bar\n+                diff = f_in.tell() - bytes_read - 1\n+                progress_bar.update(diff)\n+                bytes_read = f_in.tell() - 1\n+            \n+            # Read the Header\n+            tmp_header_raw = f_in.read(TIME_SIZE + LENGTH_SIZE + MSGTYPE_SIZE)\n+            if not tmp_header_raw:\n+                break\n+            tmp_header = BytesIO(tmp_header_raw)\n+            time = int.from_bytes(tmp_header.read(TIME_SIZE), \"little\")      # type: int\n+            msgtype = tmp_header.read(MSGTYPE_SIZE).split(b'\\x00', 1)[0]     # type: bytes\n+            length = int.from_bytes(tmp_header.read(LENGTH_SIZE), \"little\")  # type: int\n+\n+            # Determine message type\n+            if msgtype not in MESSAGEMAP:\n+                # For now just skip unrecognized messages\n+                f_in.seek(length, os.SEEK_CUR)\n+                print(f\"Skipping unrecognized message type {msgtype}\", file=sys.stderr)\n+                continue\n+            msg_ser = BytesIO(f_in.read(length))\n+            msg = MESSAGEMAP[msgtype]()\n+\n+            # Deserialize the message\n+            try:\n+                msg.deserialize(msg_ser)\n+            except KeyboardInterrupt:\n+                raise\n+            except Exception:\n+                # Message was bad, skip the rest of the file\n+                print(f\"Found broken message, skipping remainder of file: {path}\", file=sys.stderr)\n+                break\n+\n+            # Convert message to dictionary and add it to the messages dict\n+            msg_dict = {}\n+            msg_dict[\"msgtype\"] = getattr(msg, \"msgtype\", None).decode()\n+            msg_dict[\"direction\"] = \"recv\" if recv else \"sent\"\n+            msg_dict[\"time\"] = time\n+            msg_dict[\"size\"] = length   # \"size\" is less readable here, but more readable in the output\n+            if length:\n+                msg_dict[\"body\"] = to_jsonable(msg)\n+            messages.append(msg_dict)\n+\n+        if progress_bar:\n+            # Update the progress bar to the end of the current file\n+            # in case we exited the loop early\n+            f_in.seek(0, os.SEEK_END)   # Go to end of file\n+            diff = f_in.tell() - bytes_read - 1\n+            progress_bar.update(diff)\n+\n+\n+def main():\n+    \"\"\"Main\"\"\"",
      "path": "contrib/message-capture/message-capture-parser.py",
      "position": null,
      "original_position": 154,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "a17b2509e0d7e7e05fd5600d5387608bb706ac0e",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit\r\n\r\n```suggestion\r\n```",
      "created_at": "2021-01-22T10:33:34Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r562539575",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562539575"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562543791",
      "pull_request_review_id": 574106687,
      "id": 562543791,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjU0Mzc5MQ==",
      "diff_hunk": "@@ -0,0 +1,76 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test per-peer message capture capability.\n+\n+Additionally, the output of contrib/message-capture/message-capture-parser.py should be verified manually.\n+\"\"\"\n+\n+import glob\n+from io import BytesIO\n+import os\n+\n+from test_framework.p2p import P2PDataStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+MSGTYPE_SIZE = 12\n+\n+def mini_parser(dat_file):\n+    \"\"\"Parse a data file created by CaptureMessage.\n+\n+    From the data file we'll only check the structure.\n+\n+    We won't care about things like:\n+    - Deserializing the payload of the message\n+        - This is managed by the deserialize methods in test_framework.messages\n+    - The order of the messages\n+        - There's no reason why we can't, say, change the order of the messages in the handshake\n+    - Message Type\n+        - We can add new message types\n+\n+    We're ignoring these because they're simply too brittle to test here.\n+    \"\"\"\n+    with open(dat_file, 'rb') as f_in:\n+        # This should have at least one message in it\n+        assert(os.fstat(f_in.fileno()).st_size >= TIME_SIZE + LENGTH_SIZE + MSGTYPE_SIZE)\n+        while True:\n+            tmp_header_raw = f_in.read(TIME_SIZE + LENGTH_SIZE + MSGTYPE_SIZE)\n+            if not tmp_header_raw:\n+                break\n+            tmp_header = BytesIO(tmp_header_raw)\n+            _ = int.from_bytes(tmp_header.read(TIME_SIZE), \"little\")      # type: int\n+            raw_msgtype = tmp_header.read(MSGTYPE_SIZE)\n+            msgtype = raw_msgtype.split(b'\\x00', 1)[0]     # type: bytes\n+            remainder =  raw_msgtype.split(b'\\x00', 1)[1]\n+            assert(len(msgtype) > 0)\n+            assert(msgtype.decode().isprintable())",
      "path": "test/functional/p2p_message_capture.py",
      "position": null,
      "original_position": 50,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "a17b2509e0d7e7e05fd5600d5387608bb706ac0e",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Just check that the message type is in `MESSAGEMAP`? I think we wouldn't ever want to add a message type that is not in `MESSAGEMAP`.",
      "created_at": "2021-01-22T10:40:53Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r562543791",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562543791"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562545025",
      "pull_request_review_id": 574106687,
      "id": 562545025,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjU0NTAyNQ==",
      "diff_hunk": "@@ -0,0 +1,76 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test per-peer message capture capability.\n+\n+Additionally, the output of contrib/message-capture/message-capture-parser.py should be verified manually.\n+\"\"\"\n+\n+import glob\n+from io import BytesIO\n+import os\n+\n+from test_framework.p2p import P2PDataStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+MSGTYPE_SIZE = 12\n+\n+def mini_parser(dat_file):\n+    \"\"\"Parse a data file created by CaptureMessage.\n+\n+    From the data file we'll only check the structure.\n+\n+    We won't care about things like:\n+    - Deserializing the payload of the message\n+        - This is managed by the deserialize methods in test_framework.messages\n+    - The order of the messages\n+        - There's no reason why we can't, say, change the order of the messages in the handshake\n+    - Message Type\n+        - We can add new message types\n+\n+    We're ignoring these because they're simply too brittle to test here.\n+    \"\"\"\n+    with open(dat_file, 'rb') as f_in:\n+        # This should have at least one message in it\n+        assert(os.fstat(f_in.fileno()).st_size >= TIME_SIZE + LENGTH_SIZE + MSGTYPE_SIZE)\n+        while True:\n+            tmp_header_raw = f_in.read(TIME_SIZE + LENGTH_SIZE + MSGTYPE_SIZE)\n+            if not tmp_header_raw:\n+                break\n+            tmp_header = BytesIO(tmp_header_raw)\n+            _ = int.from_bytes(tmp_header.read(TIME_SIZE), \"little\")      # type: int\n+            raw_msgtype = tmp_header.read(MSGTYPE_SIZE)\n+            msgtype = raw_msgtype.split(b'\\x00', 1)[0]     # type: bytes\n+            remainder =  raw_msgtype.split(b'\\x00', 1)[1]\n+            assert(len(msgtype) > 0)\n+            assert(msgtype.decode().isprintable())\n+            assert(len(remainder) == 0 or not remainder.decode().isprintable())",
      "path": "test/functional/p2p_message_capture.py",
      "position": 51,
      "original_position": 51,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "a17b2509e0d7e7e05fd5600d5387608bb706ac0e",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That seems fragile. What if the payload happens to be printable? ",
      "created_at": "2021-01-22T10:43:13Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r562545025",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562545025"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 51,
      "original_line": 51,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562835751",
      "pull_request_review_id": 574525530,
      "id": 562835751,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjgzNTc1MQ==",
      "diff_hunk": "@@ -4042,6 +4042,10 @@ bool PeerManagerImpl::ProcessMessages(CNode* pfrom, std::atomic<bool>& interrupt\n     }\n     CNetMessage& msg(msgs.front());\n \n+    if (gArgs.GetBoolArg(\"-capturemessages\", false)) {",
      "path": "src/net_processing.cpp",
      "position": 21,
      "original_position": 4,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "e2b6430dcb50a4e90f70a3dcea693a6dc8112634",
      "in_reply_to_id": 562273457,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hmm, I don't think this functionality really belongs in the net_processing layer/thread in the first place. It's net that handles the connection and parsing/serializing of messages from/to a stream of bytes. So if that's the reason for having this weird split across modules, I'm not sure it's desirable.\r\n\r\nAnyway, no big deal - it just strikes me as ugly, but if it works, it works.",
      "created_at": "2021-01-22T18:45:14Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r562835751",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562835751"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4045,
      "original_line": 4045,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562901181",
      "pull_request_review_id": 574607684,
      "id": 562901181,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjkwMTE4MQ==",
      "diff_hunk": "@@ -0,0 +1,25 @@\n+# Per-Peer Message Capture\n+\n+## Purpose\n+\n+This feature allows for message capture on a per-peer basis.  It answers the simple question: \"Can I see what messages my node is sending and receiving?\"\n+\n+## Usage and Functionality\n+\n+* Run `bitcoind` with the `-capturemessages` option.\n+* Look in the `message_capture` folder in your datadir.\n+  * Typically this will be `~/.bitcoin/message_capture`.\n+  * See that there are many folders inside, one for each peer names with its IP address and port.\n+  * Inside each peer's folder there are two `.dat` files: one is for received messages (`msgs_recv.dat`) and the other is for sent messages (`msgs_sent.dat`).\n+* Run `contrib/message-capture/message-capture-parser.py` with the proper arguments.\n+  * See the `-h` option for help.\n+  * To see all messages, both sent and received, for all peers use:\n+    ```\n+    ./contrib/message-capture/message-capture-parser.py -o out.json \\\n+    ~/.bitcoin/message_capture/**/*.dat\n+    ```\n+  * Note:  The messages in the given `.dat` files will be interleaved in chronological order.  So, giving both received and sent `.dat` files (as above with `*.dat`) will result in all messages being interleaved in chronological order.\n+  * If an output file is not provided (i.e. the `-o` option is not used), then the output prints to `stdout`.\n+* View the resulting output.\n+  * The output file is `JSON` formatted.\n+  * Suggestion: use `jq` to view the output, with `jq out.json`",
      "path": "contrib/message-capture/message-capture-docs.md",
      "position": null,
      "original_position": 25,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "a17b2509e0d7e7e05fd5600d5387608bb706ac0e",
      "in_reply_to_id": 562208110,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah you caught me, I still do `cat out.json | jq` :)\r\n\r\nThanks for checking this, I'll fix it in the docs.",
      "created_at": "2021-01-22T20:45:42Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r562901181",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562901181"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562914700",
      "pull_request_review_id": 574625372,
      "id": 562914700,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjkxNDcwMA==",
      "diff_hunk": "@@ -521,6 +521,7 @@ void SetupServerArgs(NodeContext& node)\n     argsman.AddArg(\"-limitdescendantcount=<n>\", strprintf(\"Do not accept transactions if any ancestor would have <n> or more in-mempool descendants (default: %u)\", DEFAULT_DESCENDANT_LIMIT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-addrmantest\", \"Allows to test address relay on localhost\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-capturemessages\", \"Capture all P2P messages to file\", ArgsManager::ALLOW_BOOL | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "e2b6430dcb50a4e90f70a3dcea693a6dc8112634",
      "in_reply_to_id": 562272863,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "s/file/disk/",
      "created_at": "2021-01-22T21:15:02Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r562914700",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562914700"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 524,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562917209",
      "pull_request_review_id": 574629424,
      "id": 562917209,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjkxNzIwOQ==",
      "diff_hunk": "@@ -521,6 +521,7 @@ void SetupServerArgs(NodeContext& node)\n     argsman.AddArg(\"-limitdescendantcount=<n>\", strprintf(\"Do not accept transactions if any ancestor would have <n> or more in-mempool descendants (default: %u)\", DEFAULT_DESCENDANT_LIMIT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-addrmantest\", \"Allows to test address relay on localhost\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-capturemessages\", \"Capture all P2P messages to file\", ArgsManager::ALLOW_BOOL | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "e2b6430dcb50a4e90f70a3dcea693a6dc8112634",
      "in_reply_to_id": 562272863,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think I'll keep DEBUG_ONLY unless having it is harmful for some reason.  I agree that it's very easy to remove later, and very difficult to add back.",
      "created_at": "2021-01-22T21:20:21Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r562917209",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562917209"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 524,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562933835",
      "pull_request_review_id": 574647992,
      "id": 562933835,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjkzMzgzNQ==",
      "diff_hunk": "@@ -4042,6 +4042,10 @@ bool PeerManagerImpl::ProcessMessages(CNode* pfrom, std::atomic<bool>& interrupt\n     }\n     CNetMessage& msg(msgs.front());\n \n+    if (gArgs.GetBoolArg(\"-capturemessages\", false)) {",
      "path": "src/net_processing.cpp",
      "position": 21,
      "original_position": 4,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "e2b6430dcb50a4e90f70a3dcea693a6dc8112634",
      "in_reply_to_id": 562273457,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I see this message dumping as a net_processing layer thing. It should be agnostic to the connection layer (eg if we eventually use BIP 151 or similar scheme, then the messages delivered to and sent from the net_processing layer shouldn't change). If you need the actual bytes sent on the wire, then tcpdump or similar might be more appropriate.",
      "created_at": "2021-01-22T21:50:04Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r562933835",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562933835"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4045,
      "original_line": 4045,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562934956",
      "pull_request_review_id": 574649483,
      "id": 562934956,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjkzNDk1Ng==",
      "diff_hunk": "@@ -4042,6 +4042,10 @@ bool PeerManagerImpl::ProcessMessages(CNode* pfrom, std::atomic<bool>& interrupt\n     }\n     CNetMessage& msg(msgs.front());\n \n+    if (gArgs.GetBoolArg(\"-capturemessages\", false)) {",
      "path": "src/net_processing.cpp",
      "position": 21,
      "original_position": 4,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "e2b6430dcb50a4e90f70a3dcea693a6dc8112634",
      "in_reply_to_id": 562273457,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "As it stands, message capture always happens in the MessageHandler thread.  Unfortunately, functions in this thread span both net and net_processing.\r\n\r\nI've responded more fully below, https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-765704796",
      "created_at": "2021-01-22T21:52:51Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r562934956",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562934956"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4045,
      "original_line": 4045,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562945472",
      "pull_request_review_id": 574662790,
      "id": 562945472,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk0NTQ3Mg==",
      "diff_hunk": "@@ -0,0 +1,198 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Parse message capture binary files.  To be used in conjunction with -capturemessages.\"\"\"\n+\n+import argparse\n+import os\n+import shutil\n+import sys\n+from io import BytesIO\n+import json\n+from pathlib import Path\n+from typing import Any, List, Optional\n+\n+sys.path.append(os.path.join(os.path.dirname(__file__), '../../test/functional'))\n+\n+from test_framework.messages import ser_uint256     # noqa: E402\n+from test_framework.p2p import MESSAGEMAP           # noqa: E402\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+MSGTYPE_SIZE = 12\n+\n+# The test framework classes stores hashes as large ints in many cases.\n+# These are variables of type uint256 in core.\n+# There isn't a way to distinguish between a large int and a large int that is actually a blob of bytes.\n+# As such, they are itemized here.\n+# Any variables with these names that are of type int are actually uint256 variables.\n+# (These can be easily found by looking for calls to deser_uint256, deser_uint256_vector, and uint256_from_str in messages.py)\n+HASH_INTS = [\n+    \"blockhash\",\n+    \"block_hash\",\n+    \"hash\",\n+    \"hashMerkleRoot\",\n+    \"hashPrevBlock\",\n+    \"hashstop\",\n+    \"prev_header\",\n+    \"sha256\",\n+    \"stop_hash\",\n+]\n+\n+HASH_INT_VECTORS = [\n+    \"hashes\",\n+    \"headers\",\n+    \"vHave\",\n+    \"vHash\",\n+]\n+\n+\n+class ProgressBar:\n+    def __init__(self, total: float):\n+        self.total = total\n+        self.running = 0\n+\n+    def set_progress(self, progress: float):\n+        cols = shutil.get_terminal_size()[0]\n+        if cols <= 12:\n+            return\n+        max_blocks = cols - 9\n+        num_blocks = int(max_blocks * progress)\n+        print('\\r[ {}{} ] {:3.0f}%'\n+              .format('#' * num_blocks,\n+                      ' ' * (max_blocks - num_blocks),\n+                      progress * 100),\n+              end ='')\n+\n+    def update(self, more: float):\n+        self.running += more\n+        self.set_progress(self.running / self.total)\n+\n+\n+def to_jsonable(obj: Any) -> Any:\n+    if hasattr(obj, \"__dict__\"):\n+        return obj.__dict__\n+    elif hasattr(obj, \"__slots__\"):\n+        ret = {}    # type: Any\n+        for slot in obj.__slots__:\n+            val = getattr(obj, slot, None)\n+            if slot in HASH_INTS and isinstance(val, int):\n+                ret[slot] = ser_uint256(val).hex()\n+            elif slot in HASH_INT_VECTORS and isinstance(val[0], int):\n+                ret[slot] = [ser_uint256(a).hex() for a in val]\n+            else:\n+                ret[slot] = to_jsonable(val)\n+        return ret\n+    elif isinstance(obj, list):\n+        return [to_jsonable(a) for a in obj]\n+    elif isinstance(obj, bytes):\n+        return obj.hex()\n+    else:\n+        return obj\n+\n+\n+def process_file(path: str, messages: List[Any], recv: bool, progress_bar: Optional[ProgressBar]) -> None:\n+    with open(path, 'rb') as f_in:\n+        if progress_bar:\n+            bytes_read = 0\n+\n+        while True:\n+            if progress_bar:\n+                # Update progress bar\n+                diff = f_in.tell() - bytes_read - 1\n+                progress_bar.update(diff)\n+                bytes_read = f_in.tell() - 1\n+            \n+            # Read the Header\n+            tmp_header_raw = f_in.read(TIME_SIZE + LENGTH_SIZE + MSGTYPE_SIZE)\n+            if not tmp_header_raw:\n+                break\n+            tmp_header = BytesIO(tmp_header_raw)\n+            time = int.from_bytes(tmp_header.read(TIME_SIZE), \"little\")      # type: int\n+            msgtype = tmp_header.read(MSGTYPE_SIZE).split(b'\\x00', 1)[0]     # type: bytes\n+            length = int.from_bytes(tmp_header.read(LENGTH_SIZE), \"little\")  # type: int\n+\n+            # Determine message type\n+            if msgtype not in MESSAGEMAP:\n+                # For now just skip unrecognized messages\n+                f_in.seek(length, os.SEEK_CUR)\n+                print(f\"Skipping unrecognized message type {msgtype}\", file=sys.stderr)\n+                continue\n+            msg_ser = BytesIO(f_in.read(length))\n+            msg = MESSAGEMAP[msgtype]()\n+\n+            # Deserialize the message\n+            try:\n+                msg.deserialize(msg_ser)\n+            except KeyboardInterrupt:\n+                raise\n+            except Exception:\n+                # Message was bad, skip the rest of the file\n+                print(f\"Found broken message, skipping remainder of file: {path}\", file=sys.stderr)\n+                break\n+\n+            # Convert message to dictionary and add it to the messages dict\n+            msg_dict = {}\n+            msg_dict[\"msgtype\"] = getattr(msg, \"msgtype\", None).decode()\n+            msg_dict[\"direction\"] = \"recv\" if recv else \"sent\"\n+            msg_dict[\"time\"] = time\n+            msg_dict[\"size\"] = length   # \"size\" is less readable here, but more readable in the output\n+            if length:\n+                msg_dict[\"body\"] = to_jsonable(msg)\n+            messages.append(msg_dict)\n+\n+        if progress_bar:\n+            # Update the progress bar to the end of the current file\n+            # in case we exited the loop early\n+            f_in.seek(0, os.SEEK_END)   # Go to end of file\n+            diff = f_in.tell() - bytes_read - 1\n+            progress_bar.update(diff)\n+\n+\n+def main():\n+    \"\"\"Main\"\"\"\n+    parser = argparse.ArgumentParser(\n+        description=__doc__,\n+        epilog=\"EXAMPLE \\n\\t{0} -o out.json <data-dir>/message_capture/**/*.dat\".format(sys.argv[0]),\n+        formatter_class=argparse.RawTextHelpFormatter)\n+    parser.add_argument(\n+        \"capturepaths\",\n+        nargs='+',\n+        help=\"binary message capture files to parse.\")\n+    parser.add_argument(\n+        \"-o\", \"--output\",\n+        help=\"output file.  If unset print to stdout\")\n+    parser.add_argument(\n+        \"-n\", \"--no-progress-bar\",\n+        action='store_true',\n+        help=\"disable the progress bar.  Automatically set if the output is not a terminal\")\n+    args = parser.parse_args()\n+    capturepaths = [Path.cwd() / Path(capturepath) for capturepath in args.capturepaths]\n+    output = Path.cwd() / Path(args.output) if args.output else False\n+    use_progress_bar = (not args.no_progress_bar) and sys.stdout.isatty()\n+\n+    messages = []   # type: List[Any]\n+    if use_progress_bar:\n+        total_size = sum(capture.stat().st_size for capture in capturepaths)\n+        progress_bar = ProgressBar(total_size)\n+    else:\n+        progress_bar = None\n+\n+    for capture in capturepaths:\n+        process_file(str(capture), messages, \"recv\" in capture.stem, progress_bar)\n+\n+    messages.sort(key=lambda msg: msg['time'])",
      "path": "contrib/message-capture/message-capture-parser.py",
      "position": 201,
      "original_position": 185,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "d3353b507fe2a2c26a690186a6cd7ff4cee42ba0",
      "in_reply_to_id": 562274872,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I agree on all accounts: this is a naive solution but I'll leave an improvement for a future PR.",
      "created_at": "2021-01-22T22:19:04Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r562945472",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562945472"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 201,
      "original_line": 201,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562954055",
      "pull_request_review_id": 574674065,
      "id": 562954055,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk1NDA1NQ==",
      "diff_hunk": "@@ -0,0 +1,198 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Parse message capture binary files.  To be used in conjunction with -capturemessages.\"\"\"\n+\n+import argparse\n+import os\n+import shutil\n+import sys\n+from io import BytesIO\n+import json\n+from pathlib import Path\n+from typing import Any, List, Optional\n+\n+sys.path.append(os.path.join(os.path.dirname(__file__), '../../test/functional'))\n+\n+from test_framework.messages import ser_uint256     # noqa: E402\n+from test_framework.p2p import MESSAGEMAP           # noqa: E402\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+MSGTYPE_SIZE = 12\n+\n+# The test framework classes stores hashes as large ints in many cases.\n+# These are variables of type uint256 in core.\n+# There isn't a way to distinguish between a large int and a large int that is actually a blob of bytes.\n+# As such, they are itemized here.\n+# Any variables with these names that are of type int are actually uint256 variables.\n+# (These can be easily found by looking for calls to deser_uint256, deser_uint256_vector, and uint256_from_str in messages.py)\n+HASH_INTS = [\n+    \"blockhash\",\n+    \"block_hash\",\n+    \"hash\",\n+    \"hashMerkleRoot\",\n+    \"hashPrevBlock\",\n+    \"hashstop\",\n+    \"prev_header\",\n+    \"sha256\",\n+    \"stop_hash\",\n+]\n+\n+HASH_INT_VECTORS = [\n+    \"hashes\",\n+    \"headers\",\n+    \"vHave\",\n+    \"vHash\",\n+]\n+\n+\n+class ProgressBar:\n+    def __init__(self, total: float):\n+        self.total = total\n+        self.running = 0\n+\n+    def set_progress(self, progress: float):\n+        cols = shutil.get_terminal_size()[0]\n+        if cols <= 12:\n+            return\n+        max_blocks = cols - 9\n+        num_blocks = int(max_blocks * progress)\n+        print('\\r[ {}{} ] {:3.0f}%'\n+              .format('#' * num_blocks,\n+                      ' ' * (max_blocks - num_blocks),\n+                      progress * 100),\n+              end ='')\n+\n+    def update(self, more: float):\n+        self.running += more\n+        self.set_progress(self.running / self.total)\n+\n+\n+def to_jsonable(obj: Any) -> Any:\n+    if hasattr(obj, \"__dict__\"):\n+        return obj.__dict__\n+    elif hasattr(obj, \"__slots__\"):\n+        ret = {}    # type: Any\n+        for slot in obj.__slots__:\n+            val = getattr(obj, slot, None)\n+            if slot in HASH_INTS and isinstance(val, int):\n+                ret[slot] = ser_uint256(val).hex()\n+            elif slot in HASH_INT_VECTORS and isinstance(val[0], int):\n+                ret[slot] = [ser_uint256(a).hex() for a in val]\n+            else:\n+                ret[slot] = to_jsonable(val)\n+        return ret\n+    elif isinstance(obj, list):\n+        return [to_jsonable(a) for a in obj]\n+    elif isinstance(obj, bytes):\n+        return obj.hex()\n+    else:\n+        return obj\n+\n+\n+def process_file(path: str, messages: List[Any], recv: bool, progress_bar: Optional[ProgressBar]) -> None:\n+    with open(path, 'rb') as f_in:\n+        if progress_bar:\n+            bytes_read = 0\n+\n+        while True:\n+            if progress_bar:\n+                # Update progress bar\n+                diff = f_in.tell() - bytes_read - 1\n+                progress_bar.update(diff)\n+                bytes_read = f_in.tell() - 1\n+            \n+            # Read the Header\n+            tmp_header_raw = f_in.read(TIME_SIZE + LENGTH_SIZE + MSGTYPE_SIZE)\n+            if not tmp_header_raw:\n+                break\n+            tmp_header = BytesIO(tmp_header_raw)\n+            time = int.from_bytes(tmp_header.read(TIME_SIZE), \"little\")      # type: int\n+            msgtype = tmp_header.read(MSGTYPE_SIZE).split(b'\\x00', 1)[0]     # type: bytes\n+            length = int.from_bytes(tmp_header.read(LENGTH_SIZE), \"little\")  # type: int\n+\n+            # Determine message type\n+            if msgtype not in MESSAGEMAP:\n+                # For now just skip unrecognized messages\n+                f_in.seek(length, os.SEEK_CUR)\n+                print(f\"Skipping unrecognized message type {msgtype}\", file=sys.stderr)\n+                continue\n+            msg_ser = BytesIO(f_in.read(length))\n+            msg = MESSAGEMAP[msgtype]()\n+\n+            # Deserialize the message\n+            try:\n+                msg.deserialize(msg_ser)\n+            except KeyboardInterrupt:\n+                raise\n+            except Exception:\n+                # Message was bad, skip the rest of the file\n+                print(f\"Found broken message, skipping remainder of file: {path}\", file=sys.stderr)",
      "path": "contrib/message-capture/message-capture-parser.py",
      "position": null,
      "original_position": 132,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "a17b2509e0d7e7e05fd5600d5387608bb706ac0e",
      "in_reply_to_id": 562284378,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You're right.  Because of how the capture is done in net.cpp, the length field is guaranteed to be correct.  (We'll never have a misalignment)  I'll change this to just skip the single message, and I'll insert an informative placeholder into the JSON.",
      "created_at": "2021-01-22T22:38:26Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r562954055",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562954055"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 132,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562954574",
      "pull_request_review_id": 574674710,
      "id": 562954574,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk1NDU3NA==",
      "diff_hunk": "@@ -0,0 +1,198 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Parse message capture binary files.  To be used in conjunction with -capturemessages.\"\"\"\n+\n+import argparse\n+import os\n+import shutil\n+import sys\n+from io import BytesIO\n+import json\n+from pathlib import Path\n+from typing import Any, List, Optional\n+\n+sys.path.append(os.path.join(os.path.dirname(__file__), '../../test/functional'))\n+\n+from test_framework.messages import ser_uint256     # noqa: E402\n+from test_framework.p2p import MESSAGEMAP           # noqa: E402\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+MSGTYPE_SIZE = 12\n+\n+# The test framework classes stores hashes as large ints in many cases.\n+# These are variables of type uint256 in core.\n+# There isn't a way to distinguish between a large int and a large int that is actually a blob of bytes.\n+# As such, they are itemized here.\n+# Any variables with these names that are of type int are actually uint256 variables.\n+# (These can be easily found by looking for calls to deser_uint256, deser_uint256_vector, and uint256_from_str in messages.py)\n+HASH_INTS = [\n+    \"blockhash\",\n+    \"block_hash\",\n+    \"hash\",\n+    \"hashMerkleRoot\",\n+    \"hashPrevBlock\",\n+    \"hashstop\",\n+    \"prev_header\",\n+    \"sha256\",\n+    \"stop_hash\",\n+]\n+\n+HASH_INT_VECTORS = [\n+    \"hashes\",\n+    \"headers\",\n+    \"vHave\",\n+    \"vHash\",\n+]\n+\n+\n+class ProgressBar:\n+    def __init__(self, total: float):\n+        self.total = total\n+        self.running = 0\n+\n+    def set_progress(self, progress: float):\n+        cols = shutil.get_terminal_size()[0]\n+        if cols <= 12:\n+            return\n+        max_blocks = cols - 9\n+        num_blocks = int(max_blocks * progress)\n+        print('\\r[ {}{} ] {:3.0f}%'\n+              .format('#' * num_blocks,\n+                      ' ' * (max_blocks - num_blocks),\n+                      progress * 100),\n+              end ='')\n+\n+    def update(self, more: float):\n+        self.running += more\n+        self.set_progress(self.running / self.total)\n+\n+\n+def to_jsonable(obj: Any) -> Any:\n+    if hasattr(obj, \"__dict__\"):\n+        return obj.__dict__\n+    elif hasattr(obj, \"__slots__\"):\n+        ret = {}    # type: Any\n+        for slot in obj.__slots__:\n+            val = getattr(obj, slot, None)\n+            if slot in HASH_INTS and isinstance(val, int):\n+                ret[slot] = ser_uint256(val).hex()\n+            elif slot in HASH_INT_VECTORS and isinstance(val[0], int):\n+                ret[slot] = [ser_uint256(a).hex() for a in val]\n+            else:\n+                ret[slot] = to_jsonable(val)\n+        return ret\n+    elif isinstance(obj, list):\n+        return [to_jsonable(a) for a in obj]\n+    elif isinstance(obj, bytes):\n+        return obj.hex()\n+    else:\n+        return obj\n+\n+\n+def process_file(path: str, messages: List[Any], recv: bool, progress_bar: Optional[ProgressBar]) -> None:\n+    with open(path, 'rb') as f_in:\n+        if progress_bar:\n+            bytes_read = 0\n+\n+        while True:\n+            if progress_bar:\n+                # Update progress bar\n+                diff = f_in.tell() - bytes_read - 1\n+                progress_bar.update(diff)\n+                bytes_read = f_in.tell() - 1\n+            \n+            # Read the Header\n+            tmp_header_raw = f_in.read(TIME_SIZE + LENGTH_SIZE + MSGTYPE_SIZE)\n+            if not tmp_header_raw:\n+                break\n+            tmp_header = BytesIO(tmp_header_raw)\n+            time = int.from_bytes(tmp_header.read(TIME_SIZE), \"little\")      # type: int\n+            msgtype = tmp_header.read(MSGTYPE_SIZE).split(b'\\x00', 1)[0]     # type: bytes\n+            length = int.from_bytes(tmp_header.read(LENGTH_SIZE), \"little\")  # type: int\n+\n+            # Determine message type\n+            if msgtype not in MESSAGEMAP:\n+                # For now just skip unrecognized messages\n+                f_in.seek(length, os.SEEK_CUR)\n+                print(f\"Skipping unrecognized message type {msgtype}\", file=sys.stderr)\n+                continue\n+            msg_ser = BytesIO(f_in.read(length))\n+            msg = MESSAGEMAP[msgtype]()\n+\n+            # Deserialize the message\n+            try:\n+                msg.deserialize(msg_ser)\n+            except KeyboardInterrupt:\n+                raise\n+            except Exception:\n+                # Message was bad, skip the rest of the file\n+                print(f\"Found broken message, skipping remainder of file: {path}\", file=sys.stderr)",
      "path": "contrib/message-capture/message-capture-parser.py",
      "position": null,
      "original_position": 132,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "a17b2509e0d7e7e05fd5600d5387608bb706ac0e",
      "in_reply_to_id": 562284378,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You could still include the command name (if printable), and a hexdump of the payload.",
      "created_at": "2021-01-22T22:39:59Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r562954574",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562954574"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 132,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563025936",
      "pull_request_review_id": 574740233,
      "id": 563025936,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzAyNTkzNg==",
      "diff_hunk": "@@ -2933,3 +2932,27 @@ uint64_t CConnman::CalculateKeyedNetGroup(const CAddress& ad) const\n \n     return GetDeterministicRandomizer(RANDOMIZER_ID_NETGROUP).Write(vchNetGroup.data(), vchNetGroup.size()).Finalize();\n }\n+\n+void CaptureMessage(const CAddress& addr, const std::string& msg_type, const Span<const unsigned char>& data, bool is_incoming)\n+{\n+    auto now = GetTime<std::chrono::microseconds>();",
      "path": "src/net.cpp",
      "position": 44,
      "original_position": 40,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "a17b2509e0d7e7e05fd5600d5387608bb706ac0e",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: Maybe add a small comment here that this function captures the message at process time, not socket receive/send time. Nothing fancy, just a oneline comment to sum up https://github.com/bitcoin/bitcoin/pull/19509#issuecomment-765704796\r\n\r\nNot only to document the expected behavior, but also to avoid people to \"optimize\" away this call to `GetTime` with the rationale that it doesn't matter and the message receive time can be used. See also https://github.com/bitcoin/bitcoin/pull/19509#discussion_r457076718\r\n",
      "created_at": "2021-01-23T06:17:14Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r563025936",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563025936"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2942,
      "original_line": 2942,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563189778",
      "pull_request_review_id": 574870616,
      "id": 563189778,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzE4OTc3OA==",
      "diff_hunk": "@@ -0,0 +1,198 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Parse message capture binary files.  To be used in conjunction with -capturemessages.\"\"\"\n+\n+import argparse\n+import os\n+import shutil\n+import sys\n+from io import BytesIO\n+import json\n+from pathlib import Path\n+from typing import Any, List, Optional\n+\n+sys.path.append(os.path.join(os.path.dirname(__file__), '../../test/functional'))\n+\n+from test_framework.messages import ser_uint256     # noqa: E402\n+from test_framework.p2p import MESSAGEMAP           # noqa: E402\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+MSGTYPE_SIZE = 12\n+\n+# The test framework classes stores hashes as large ints in many cases.\n+# These are variables of type uint256 in core.\n+# There isn't a way to distinguish between a large int and a large int that is actually a blob of bytes.\n+# As such, they are itemized here.\n+# Any variables with these names that are of type int are actually uint256 variables.\n+# (These can be easily found by looking for calls to deser_uint256, deser_uint256_vector, and uint256_from_str in messages.py)\n+HASH_INTS = [\n+    \"blockhash\",\n+    \"block_hash\",\n+    \"hash\",\n+    \"hashMerkleRoot\",\n+    \"hashPrevBlock\",\n+    \"hashstop\",\n+    \"prev_header\",\n+    \"sha256\",\n+    \"stop_hash\",\n+]\n+\n+HASH_INT_VECTORS = [\n+    \"hashes\",\n+    \"headers\",\n+    \"vHave\",\n+    \"vHash\",\n+]",
      "path": "contrib/message-capture/message-capture-parser.py",
      "position": 48,
      "original_position": 48,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "a17b2509e0d7e7e05fd5600d5387608bb706ac0e",
      "in_reply_to_id": 562524979,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I agree that this is fragile, but I'm not sure exactly what you mean about removing them.  We don't really have a uint256 object in python.  Adding one would unfortunately mean rewriting a LOT of our testing framework...",
      "created_at": "2021-01-23T19:27:52Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r563189778",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563189778"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 48,
      "original_line": 48,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563190145",
      "pull_request_review_id": 574870881,
      "id": 563190145,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzE5MDE0NQ==",
      "diff_hunk": "@@ -0,0 +1,76 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test per-peer message capture capability.\n+\n+Additionally, the output of contrib/message-capture/message-capture-parser.py should be verified manually.\n+\"\"\"\n+\n+import glob\n+from io import BytesIO\n+import os\n+\n+from test_framework.p2p import P2PDataStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+MSGTYPE_SIZE = 12\n+\n+def mini_parser(dat_file):\n+    \"\"\"Parse a data file created by CaptureMessage.\n+\n+    From the data file we'll only check the structure.\n+\n+    We won't care about things like:\n+    - Deserializing the payload of the message\n+        - This is managed by the deserialize methods in test_framework.messages\n+    - The order of the messages\n+        - There's no reason why we can't, say, change the order of the messages in the handshake\n+    - Message Type\n+        - We can add new message types\n+\n+    We're ignoring these because they're simply too brittle to test here.\n+    \"\"\"\n+    with open(dat_file, 'rb') as f_in:\n+        # This should have at least one message in it\n+        assert(os.fstat(f_in.fileno()).st_size >= TIME_SIZE + LENGTH_SIZE + MSGTYPE_SIZE)\n+        while True:\n+            tmp_header_raw = f_in.read(TIME_SIZE + LENGTH_SIZE + MSGTYPE_SIZE)\n+            if not tmp_header_raw:\n+                break\n+            tmp_header = BytesIO(tmp_header_raw)\n+            _ = int.from_bytes(tmp_header.read(TIME_SIZE), \"little\")      # type: int\n+            raw_msgtype = tmp_header.read(MSGTYPE_SIZE)\n+            msgtype = raw_msgtype.split(b'\\x00', 1)[0]     # type: bytes\n+            remainder =  raw_msgtype.split(b'\\x00', 1)[1]\n+            assert(len(msgtype) > 0)\n+            assert(msgtype.decode().isprintable())\n+            assert(len(remainder) == 0 or not remainder.decode().isprintable())",
      "path": "test/functional/p2p_message_capture.py",
      "position": 51,
      "original_position": 51,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "a17b2509e0d7e7e05fd5600d5387608bb706ac0e",
      "in_reply_to_id": 562545025,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah, `remainder` is actually just the remainder of the 12 msgtype bytes after the first null.  In most cases it's just a few null bytes.  I added this in response to a suggestion to check that after the first null byte in the msgtype, all further bytes are null.\r\n\r\nEffectively these few lines should do the same job as CMessageHeader::IsCommandValid.",
      "created_at": "2021-01-23T19:32:04Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r563190145",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563190145"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 51,
      "original_line": 51,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563199123",
      "pull_request_review_id": 574876575,
      "id": 563199123,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzE5OTEyMw==",
      "diff_hunk": "@@ -0,0 +1,76 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test per-peer message capture capability.\n+\n+Additionally, the output of contrib/message-capture/message-capture-parser.py should be verified manually.\n+\"\"\"\n+\n+import glob\n+from io import BytesIO\n+import os\n+\n+from test_framework.p2p import P2PDataStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+MSGTYPE_SIZE = 12\n+\n+def mini_parser(dat_file):\n+    \"\"\"Parse a data file created by CaptureMessage.\n+\n+    From the data file we'll only check the structure.\n+\n+    We won't care about things like:\n+    - Deserializing the payload of the message\n+        - This is managed by the deserialize methods in test_framework.messages\n+    - The order of the messages\n+        - There's no reason why we can't, say, change the order of the messages in the handshake\n+    - Message Type\n+        - We can add new message types\n+\n+    We're ignoring these because they're simply too brittle to test here.\n+    \"\"\"\n+    with open(dat_file, 'rb') as f_in:\n+        # This should have at least one message in it\n+        assert(os.fstat(f_in.fileno()).st_size >= TIME_SIZE + LENGTH_SIZE + MSGTYPE_SIZE)\n+        while True:\n+            tmp_header_raw = f_in.read(TIME_SIZE + LENGTH_SIZE + MSGTYPE_SIZE)\n+            if not tmp_header_raw:\n+                break\n+            tmp_header = BytesIO(tmp_header_raw)\n+            _ = int.from_bytes(tmp_header.read(TIME_SIZE), \"little\")      # type: int\n+            raw_msgtype = tmp_header.read(MSGTYPE_SIZE)\n+            msgtype = raw_msgtype.split(b'\\x00', 1)[0]     # type: bytes\n+            remainder =  raw_msgtype.split(b'\\x00', 1)[1]\n+            assert(len(msgtype) > 0)\n+            assert(msgtype.decode().isprintable())",
      "path": "test/functional/p2p_message_capture.py",
      "position": null,
      "original_position": 50,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "a17b2509e0d7e7e05fd5600d5387608bb706ac0e",
      "in_reply_to_id": 562543791,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good idea, thanks",
      "created_at": "2021-01-23T21:02:55Z",
      "updated_at": "2021-01-23T21:16:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r563199123",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563199123"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568553627",
      "pull_request_review_id": 581279397,
      "id": 568553627,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODU1MzYyNw==",
      "diff_hunk": "@@ -0,0 +1,76 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test per-peer message capture capability.\n+\n+Additionally, the output of contrib/message-capture/message-capture-parser.py should be verified manually.\n+\"\"\"\n+\n+import glob\n+from io import BytesIO\n+import os\n+\n+from test_framework.p2p import P2PDataStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+MSGTYPE_SIZE = 12\n+\n+def mini_parser(dat_file):\n+    \"\"\"Parse a data file created by CaptureMessage.\n+\n+    From the data file we'll only check the structure.\n+\n+    We won't care about things like:\n+    - Deserializing the payload of the message\n+        - This is managed by the deserialize methods in test_framework.messages\n+    - The order of the messages\n+        - There's no reason why we can't, say, change the order of the messages in the handshake\n+    - Message Type\n+        - We can add new message types\n+\n+    We're ignoring these because they're simply too brittle to test here.\n+    \"\"\"\n+    with open(dat_file, 'rb') as f_in:\n+        # This should have at least one message in it\n+        assert(os.fstat(f_in.fileno()).st_size >= TIME_SIZE + LENGTH_SIZE + MSGTYPE_SIZE)\n+        while True:\n+            tmp_header_raw = f_in.read(TIME_SIZE + LENGTH_SIZE + MSGTYPE_SIZE)\n+            if not tmp_header_raw:\n+                break\n+            tmp_header = BytesIO(tmp_header_raw)\n+            _ = int.from_bytes(tmp_header.read(TIME_SIZE), \"little\")      # type: int\n+            raw_msgtype = tmp_header.read(MSGTYPE_SIZE)\n+            msgtype = raw_msgtype.split(b'\\x00', 1)[0]     # type: bytes\n+            remainder =  raw_msgtype.split(b'\\x00', 1)[1]\n+            assert(len(msgtype) > 0)\n+            assert(msgtype.decode().isprintable())\n+            assert(len(remainder) == 0 or not remainder.decode().isprintable())",
      "path": "test/functional/p2p_message_capture.py",
      "position": 51,
      "original_position": 51,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "a17b2509e0d7e7e05fd5600d5387608bb706ac0e",
      "in_reply_to_id": 562545025,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "should probably just check that all are zero",
      "created_at": "2021-02-02T12:12:58Z",
      "updated_at": "2021-02-02T12:12:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r568553627",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568553627"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 51,
      "original_line": 51,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571454691",
      "pull_request_review_id": 584895703,
      "id": 571454691,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTQ1NDY5MQ==",
      "diff_hunk": "@@ -0,0 +1,76 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test per-peer message capture capability.\n+\n+Additionally, the output of contrib/message-capture/message-capture-parser.py should be verified manually.\n+\"\"\"\n+\n+import glob\n+from io import BytesIO\n+import os\n+\n+from test_framework.p2p import P2PDataStore, MESSAGEMAP\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+MSGTYPE_SIZE = 12\n+\n+def mini_parser(dat_file):\n+    \"\"\"Parse a data file created by CaptureMessage.\n+\n+    From the data file we'll only check the structure.\n+\n+    We won't care about things like:\n+    - Deserializing the payload of the message\n+        - This is managed by the deserialize methods in test_framework.messages\n+    - The order of the messages\n+        - There's no reason why we can't, say, change the order of the messages in the handshake\n+    - Message Type\n+        - We can add new message types\n+\n+    We're ignoring these because they're simply too brittle to test here.\n+    \"\"\"\n+    with open(dat_file, 'rb') as f_in:\n+        # This should have at least one message in it\n+        assert(os.fstat(f_in.fileno()).st_size >= TIME_SIZE + LENGTH_SIZE + MSGTYPE_SIZE)\n+        while True:\n+            tmp_header_raw = f_in.read(TIME_SIZE + LENGTH_SIZE + MSGTYPE_SIZE)\n+            if not tmp_header_raw:\n+                break\n+            tmp_header = BytesIO(tmp_header_raw)\n+            int.from_bytes(tmp_header.read(TIME_SIZE), \"little\")      # type: int",
      "path": "test/functional/p2p_message_capture.py",
      "position": 45,
      "original_position": 45,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "in_reply_to_id": null,
      "user": {
        "login": "flack",
        "id": 425166,
        "node_id": "MDQ6VXNlcjQyNTE2Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/425166?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/flack",
        "html_url": "https://github.com/flack",
        "followers_url": "https://api.github.com/users/flack/followers",
        "following_url": "https://api.github.com/users/flack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/flack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/flack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/flack/subscriptions",
        "organizations_url": "https://api.github.com/users/flack/orgs",
        "repos_url": "https://api.github.com/users/flack/repos",
        "events_url": "https://api.github.com/users/flack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/flack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not sure if this is the right place to ask, but when I'm running `vulture` against this file, it complains:\r\n\r\n```\r\nbitcoin/test/functional/p2p_message_capture.py:45: invalid syntax at \"int.from_bytes(tmp_header.read(TIME_SIZE), \"little\")      # type: int\"\r\n```\r\n\r\nIs that a bug in `vulture` or a problem in the code? If I assign the return value of `from_bytes` to a variable, it passes",
      "created_at": "2021-02-06T16:26:49Z",
      "updated_at": "2021-02-06T16:26:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r571454691",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571454691"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 45,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571512679",
      "pull_request_review_id": 584931312,
      "id": 571512679,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTUxMjY3OQ==",
      "diff_hunk": "@@ -0,0 +1,76 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test per-peer message capture capability.\n+\n+Additionally, the output of contrib/message-capture/message-capture-parser.py should be verified manually.\n+\"\"\"\n+\n+import glob\n+from io import BytesIO\n+import os\n+\n+from test_framework.p2p import P2PDataStore, MESSAGEMAP\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+MSGTYPE_SIZE = 12\n+\n+def mini_parser(dat_file):\n+    \"\"\"Parse a data file created by CaptureMessage.\n+\n+    From the data file we'll only check the structure.\n+\n+    We won't care about things like:\n+    - Deserializing the payload of the message\n+        - This is managed by the deserialize methods in test_framework.messages\n+    - The order of the messages\n+        - There's no reason why we can't, say, change the order of the messages in the handshake\n+    - Message Type\n+        - We can add new message types\n+\n+    We're ignoring these because they're simply too brittle to test here.\n+    \"\"\"\n+    with open(dat_file, 'rb') as f_in:\n+        # This should have at least one message in it\n+        assert(os.fstat(f_in.fileno()).st_size >= TIME_SIZE + LENGTH_SIZE + MSGTYPE_SIZE)\n+        while True:\n+            tmp_header_raw = f_in.read(TIME_SIZE + LENGTH_SIZE + MSGTYPE_SIZE)\n+            if not tmp_header_raw:\n+                break\n+            tmp_header = BytesIO(tmp_header_raw)\n+            int.from_bytes(tmp_header.read(TIME_SIZE), \"little\")      # type: int",
      "path": "test/functional/p2p_message_capture.py",
      "position": 45,
      "original_position": 45,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "in_reply_to_id": 571454691,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think it is a problem in the code. The return value of `from_bytes` is not being used.",
      "created_at": "2021-02-07T01:19:40Z",
      "updated_at": "2021-02-07T01:19:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r571512679",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571512679"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 45,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571674446",
      "pull_request_review_id": 585059577,
      "id": 571674446,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTY3NDQ0Ng==",
      "diff_hunk": "@@ -0,0 +1,76 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test per-peer message capture capability.\n+\n+Additionally, the output of contrib/message-capture/message-capture-parser.py should be verified manually.\n+\"\"\"\n+\n+import glob\n+from io import BytesIO\n+import os\n+\n+from test_framework.p2p import P2PDataStore, MESSAGEMAP\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+MSGTYPE_SIZE = 12\n+\n+def mini_parser(dat_file):\n+    \"\"\"Parse a data file created by CaptureMessage.\n+\n+    From the data file we'll only check the structure.\n+\n+    We won't care about things like:\n+    - Deserializing the payload of the message\n+        - This is managed by the deserialize methods in test_framework.messages\n+    - The order of the messages\n+        - There's no reason why we can't, say, change the order of the messages in the handshake\n+    - Message Type\n+        - We can add new message types\n+\n+    We're ignoring these because they're simply too brittle to test here.\n+    \"\"\"\n+    with open(dat_file, 'rb') as f_in:\n+        # This should have at least one message in it\n+        assert(os.fstat(f_in.fileno()).st_size >= TIME_SIZE + LENGTH_SIZE + MSGTYPE_SIZE)\n+        while True:\n+            tmp_header_raw = f_in.read(TIME_SIZE + LENGTH_SIZE + MSGTYPE_SIZE)\n+            if not tmp_header_raw:\n+                break\n+            tmp_header = BytesIO(tmp_header_raw)\n+            int.from_bytes(tmp_header.read(TIME_SIZE), \"little\")      # type: int",
      "path": "test/functional/p2p_message_capture.py",
      "position": 45,
      "original_position": 45,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "in_reply_to_id": 571454691,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I guess the fix is:\r\n\r\n```diff\r\n-            int.from_bytes(tmp_header.read(TIME_SIZE), \"little\")      # type: int\r\n+            tmp_header.read(TIME_SIZE)  # skip over the timestamp field\r\n```\r\n",
      "created_at": "2021-02-07T19:25:52Z",
      "updated_at": "2021-02-07T19:25:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r571674446",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571674446"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 45,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571822986",
      "pull_request_review_id": 585210151,
      "id": 571822986,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTgyMjk4Ng==",
      "diff_hunk": "@@ -0,0 +1,76 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test per-peer message capture capability.\n+\n+Additionally, the output of contrib/message-capture/message-capture-parser.py should be verified manually.\n+\"\"\"\n+\n+import glob\n+from io import BytesIO\n+import os\n+\n+from test_framework.p2p import P2PDataStore, MESSAGEMAP\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+TIME_SIZE = 8\n+LENGTH_SIZE = 4\n+MSGTYPE_SIZE = 12\n+\n+def mini_parser(dat_file):\n+    \"\"\"Parse a data file created by CaptureMessage.\n+\n+    From the data file we'll only check the structure.\n+\n+    We won't care about things like:\n+    - Deserializing the payload of the message\n+        - This is managed by the deserialize methods in test_framework.messages\n+    - The order of the messages\n+        - There's no reason why we can't, say, change the order of the messages in the handshake\n+    - Message Type\n+        - We can add new message types\n+\n+    We're ignoring these because they're simply too brittle to test here.\n+    \"\"\"\n+    with open(dat_file, 'rb') as f_in:\n+        # This should have at least one message in it\n+        assert(os.fstat(f_in.fileno()).st_size >= TIME_SIZE + LENGTH_SIZE + MSGTYPE_SIZE)\n+        while True:\n+            tmp_header_raw = f_in.read(TIME_SIZE + LENGTH_SIZE + MSGTYPE_SIZE)\n+            if not tmp_header_raw:\n+                break\n+            tmp_header = BytesIO(tmp_header_raw)\n+            int.from_bytes(tmp_header.read(TIME_SIZE), \"little\")      # type: int",
      "path": "test/functional/p2p_message_capture.py",
      "position": 45,
      "original_position": 45,
      "commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "original_commit_id": "bff7c66e67aa2f18ef70139338643656a54444fe",
      "in_reply_to_id": 571454691,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "#21107 ",
      "created_at": "2021-02-08T07:17:22Z",
      "updated_at": "2021-02-08T07:17:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19509#discussion_r571822986",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571822986"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19509"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 45,
      "original_line": 45,
      "side": "RIGHT"
    }
  ]
}