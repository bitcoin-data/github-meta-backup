{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/1233",
    "id": 1314043,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MTMxNDA0Mw==",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/1233",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/1233.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/1233.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/1233",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/1233/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/1233/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/1233/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/1e2aff6a68b40a31d4833b256245bbbad0ad38c2",
    "number": 1233,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "Buffer block downloading and commit/check blocks in parallel",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This is based on cblockstore and commits blocks in a separate thread from downloading/initial checking (in CheckBlock).  It offers a nice performance gain over cblockstore alone.\n- pfrom->Misbehaving is now called in a callback instead of after EmitBlock as nDoS is not known until the block is committed.  This could give us a bit more work to do from a bad node's blocks, but should be pretty safe as the buffer is limited to 20 blocks by default (-blockbuffersize).\n- A setBlocksSeen is added which holds a set of blocks which have passed basic DOS checks (CheckBlock and the minwork computations), ie is the list of orphans + accepted blocks.  This allows us to avoid cs_main locking when doing the duplicate detection in the initial checking\n- FinishEmitBlock callbacks are done in series and, therefore, CBlockStore had to be changed to allow for InOrder callback threads.  Though FinishEmitBlock callbacks could be called out of order, this would result in a significant number of \"orphan\" blocks being committed before being merged into the main block tree, which is pretty ugly and inefficiency.  \n- GetLastCheckpoint now returns a cached value instead of scanning mapBlockIndex each time.  This is primarily to avoid a cs_main lock in the initial checking, but is also a micro-optimization.  \n",
    "labels": [],
    "active_lock_reason": "resolved",
    "created_at": "2012-05-09T06:28:29Z",
    "updated_at": "2022-02-15T11:02:33Z",
    "closed_at": "2012-07-05T20:15:42Z",
    "mergeable": false,
    "mergeable_state": "dirty",
    "merge_commit_sha": "1c3bd86ef24985fed30d5ce5a0c9530c3ea78464",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": false,
    "head": {
      "label": "TheBlueMatt:parallelcheck",
      "ref": "parallelcheck",
      "sha": "1e2aff6a68b40a31d4833b256245bbbad0ad38c2",
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 1443291,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNDQzMjkx",
        "name": "bitcoin",
        "full_name": "TheBlueMatt/bitcoin",
        "owner": {
          "login": "TheBlueMatt",
          "id": 649246,
          "node_id": "MDQ6VXNlcjY0OTI0Ng==",
          "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/TheBlueMatt",
          "html_url": "https://github.com/TheBlueMatt",
          "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
          "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
          "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
          "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
          "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/TheBlueMatt/bitcoin",
        "description": "Bitcoin (dont fork from here, fork from bitcoin/bitcoin)",
        "fork": true,
        "url": "https://api.github.com/repos/TheBlueMatt/bitcoin",
        "archive_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/events",
        "forks_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/TheBlueMatt/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:TheBlueMatt/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/TheBlueMatt/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/TheBlueMatt/bitcoin/hooks",
        "svn_url": "https://github.com/TheBlueMatt/bitcoin",
        "homepage": "http://www.bitcoin.org/",
        "language": "C++",
        "forks_count": 6,
        "stargazers_count": 19,
        "watchers_count": 19,
        "size": 171686,
        "default_branch": "master",
        "open_issues_count": 1,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T09:40:23Z",
        "created_at": "2011-03-05T14:14:49Z",
        "updated_at": "2022-12-15T18:21:13Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "e75acc006e8bc5c44d1d6e6c3b027fe28d8c743b",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34323,
        "stargazers_count": 69817,
        "watchers_count": 69817,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T19:05:23Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-06T18:57:56Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/1233"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 1301,
    "deletions": 560,
    "changed_files": 24,
    "commits": 37,
    "review_comments": 13,
    "comments": 10
  },
  "events": [
    {
      "event": "subscribed",
      "id": 15058287,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE1MDU4Mjg3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15058287",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2012-05-09T06:28:29Z"
    },
    {
      "event": "commented",
      "id": 5616222,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU2MTYyMjI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5616222",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2012-05-10T01:36:20Z",
      "updated_at": "2012-05-10T01:36:20Z",
      "author_association": "MEMBER",
      "body": "For the record, cblockstore's download times from local nodes comes in reliably under master, but only by a very tiny margin.  This, on the other hand, comes in around 20% lower on tmpfs chain sync.\n",
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/1233#issuecomment-5616222",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/1233"
    },
    {
      "event": "subscribed",
      "id": 15332783,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE1MzMyNzgz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15332783",
      "actor": {
        "login": "rebroad",
        "id": 1530283,
        "node_id": "MDQ6VXNlcjE1MzAyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rebroad",
        "html_url": "https://github.com/rebroad",
        "followers_url": "https://api.github.com/users/rebroad/followers",
        "following_url": "https://api.github.com/users/rebroad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rebroad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rebroad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
        "organizations_url": "https://api.github.com/users/rebroad/orgs",
        "repos_url": "https://api.github.com/users/rebroad/repos",
        "events_url": "https://api.github.com/users/rebroad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rebroad/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2012-05-12T14:18:56Z"
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNzExODc0MTp2Mg==",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "commented",
      "id": 5668865,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU2Njg4NjU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5668865",
      "actor": {
        "login": "rebroad",
        "id": 1530283,
        "node_id": "MDQ6VXNlcjE1MzAyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rebroad",
        "html_url": "https://github.com/rebroad",
        "followers_url": "https://api.github.com/users/rebroad/followers",
        "following_url": "https://api.github.com/users/rebroad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rebroad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rebroad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
        "organizations_url": "https://api.github.com/users/rebroad/orgs",
        "repos_url": "https://api.github.com/users/rebroad/repos",
        "events_url": "https://api.github.com/users/rebroad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rebroad/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2012-05-12T14:28:03Z",
      "updated_at": "2012-05-12T14:28:03Z",
      "author_association": "CONTRIBUTOR",
      "body": "can this pull request be done in such a way that there isn't so much of a diff output? Did so much code need to move from main.cpp to protocol.cpp, for example?\n",
      "user": {
        "login": "rebroad",
        "id": 1530283,
        "node_id": "MDQ6VXNlcjE1MzAyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rebroad",
        "html_url": "https://github.com/rebroad",
        "followers_url": "https://api.github.com/users/rebroad/followers",
        "following_url": "https://api.github.com/users/rebroad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rebroad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rebroad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
        "organizations_url": "https://api.github.com/users/rebroad/orgs",
        "repos_url": "https://api.github.com/users/rebroad/repos",
        "events_url": "https://api.github.com/users/rebroad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rebroad/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/1233#issuecomment-5668865",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/1233"
    },
    {
      "event": "commented",
      "id": 5669958,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU2Njk5NTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5669958",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2012-05-12T16:51:17Z",
      "updated_at": "2012-05-12T16:51:17Z",
      "author_association": "MEMBER",
      "body": "Note that this pull is based on #771, which has radically different design goals.  This pull is fairly small on its own.\nRe: the move from main -> protocol.  One of the primary design goals of #771 is to remove the number of globals we export from main, especially the block index/chain storage stuff.  As a part of this, the net code in main.cpp really no longer belongs there, and was moved to protocol.cpp.\n",
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/1233#issuecomment-5669958",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/1233"
    },
    {
      "event": "commented",
      "id": 5674672,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU2NzQ2NzI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5674672",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2012-05-13T07:58:14Z",
      "updated_at": "2012-05-13T07:58:14Z",
      "author_association": "MEMBER",
      "body": "I think those are very sensible design goals.\n\nThat said, in that case we should definitely pull #771 first, to prevent unrelated changes being merged into one pull request. Github seems to almost lock up when I try to view the diff.\n",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/1233#issuecomment-5674672",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/1233"
    },
    {
      "event": "subscribed",
      "id": 15351297,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE1MzUxMjk3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15351297",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2012-05-13T07:58:14Z"
    },
    {
      "event": "commented",
      "id": 5697411,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU2OTc0MTE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5697411",
      "actor": {
        "login": "rebroad",
        "id": 1530283,
        "node_id": "MDQ6VXNlcjE1MzAyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rebroad",
        "html_url": "https://github.com/rebroad",
        "followers_url": "https://api.github.com/users/rebroad/followers",
        "following_url": "https://api.github.com/users/rebroad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rebroad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rebroad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
        "organizations_url": "https://api.github.com/users/rebroad/orgs",
        "repos_url": "https://api.github.com/users/rebroad/repos",
        "events_url": "https://api.github.com/users/rebroad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rebroad/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2012-05-14T18:09:26Z",
      "updated_at": "2012-05-14T18:10:14Z",
      "author_association": "CONTRIBUTOR",
      "body": "Ah, ok. Well, I'd certainly find the diffs easier to view if they were kept small. Probably would be better therefore to base this commit from a post-#771 commit then, in order not to effectively include that commit in its entirety within this commit, then it can be reviewed without having to manually save the files and manually diff them.\n",
      "user": {
        "login": "rebroad",
        "id": 1530283,
        "node_id": "MDQ6VXNlcjE1MzAyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rebroad",
        "html_url": "https://github.com/rebroad",
        "followers_url": "https://api.github.com/users/rebroad/followers",
        "following_url": "https://api.github.com/users/rebroad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rebroad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rebroad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
        "organizations_url": "https://api.github.com/users/rebroad/orgs",
        "repos_url": "https://api.github.com/users/rebroad/repos",
        "events_url": "https://api.github.com/users/rebroad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rebroad/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/1233#issuecomment-5697411",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/1233"
    },
    {
      "event": "commented",
      "id": 5697644,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU2OTc2NDQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5697644",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2012-05-14T18:19:26Z",
      "updated_at": "2012-05-14T18:19:26Z",
      "author_association": "MEMBER",
      "body": "Github always shows total diffs from master, so the only reasonable way to do it is to just base on #711, pulling in its huge diff...however, you can always compare the commit list to #711 and view the diffs of individual commits.\n",
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/1233#issuecomment-5697644",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/1233"
    },
    {
      "event": "commented",
      "id": 5697689,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU2OTc2ODk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5697689",
      "actor": {
        "login": "rebroad",
        "id": 1530283,
        "node_id": "MDQ6VXNlcjE1MzAyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rebroad",
        "html_url": "https://github.com/rebroad",
        "followers_url": "https://api.github.com/users/rebroad/followers",
        "following_url": "https://api.github.com/users/rebroad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rebroad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rebroad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
        "organizations_url": "https://api.github.com/users/rebroad/orgs",
        "repos_url": "https://api.github.com/users/rebroad/repos",
        "events_url": "https://api.github.com/users/rebroad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rebroad/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2012-05-14T18:21:03Z",
      "updated_at": "2012-05-14T18:21:10Z",
      "author_association": "CONTRIBUTOR",
      "body": "@TheBlueMatt, do you mean within github? I'm not sure how to do that. Could you provide a URL, perhaps?\n",
      "user": {
        "login": "rebroad",
        "id": 1530283,
        "node_id": "MDQ6VXNlcjE1MzAyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rebroad",
        "html_url": "https://github.com/rebroad",
        "followers_url": "https://api.github.com/users/rebroad/followers",
        "following_url": "https://api.github.com/users/rebroad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rebroad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rebroad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
        "organizations_url": "https://api.github.com/users/rebroad/orgs",
        "repos_url": "https://api.github.com/users/rebroad/repos",
        "events_url": "https://api.github.com/users/rebroad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rebroad/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/1233#issuecomment-5697689",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/1233"
    },
    {
      "event": "mentioned",
      "id": 15432057,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTU0MzIwNTc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15432057",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2012-05-14T18:21:03Z"
    },
    {
      "event": "commented",
      "id": 5697960,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU2OTc5NjA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5697960",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2012-05-14T18:26:27Z",
      "updated_at": "2012-05-14T18:26:27Z",
      "author_association": "MEMBER",
      "body": "You have to manually compare the list of commits, and then you can just open each commit from the commits list in the pull...if you feel like doing some URL hacking, you will notice git style ...s in diff URLs which you can replace manually using any branch like:\nhttps://github.com/TheBlueMatt/bitcoin/compare/cblockstore...parallelcheck\n",
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/1233#issuecomment-5697960",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/1233"
    },
    {
      "event": "closed",
      "id": 16468513,
      "node_id": "MDExOkNsb3NlZEV2ZW50MTY0Njg1MTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16468513",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2012-05-29T14:51:39Z"
    },
    {
      "event": "reopened",
      "id": 17129879,
      "node_id": "MDEzOlJlb3BlbmVkRXZlbnQxNzEyOTg3OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17129879",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2012-06-06T23:57:30Z"
    },
    {
      "event": "commented",
      "id": 6165915,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYxNjU5MTU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6165915",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2012-06-06T23:57:40Z",
      "updated_at": "2012-06-06T23:57:40Z",
      "author_association": "MEMBER",
      "body": "Rebased onto #1429\n",
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/1233#issuecomment-6165915",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/1233"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NzdlM2FmOGJhYzc2YzAwYmMwNjA5NDM2NDlkZWJkYWI0MGUwMzQ0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/877e3af8bac76c00bc060943649debdab40e0344",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/877e3af8bac76c00bc060943649debdab40e0344",
      "tree": {
        "sha": "5749ad1ee14d33fcde07f1e3dcf573860cac57a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5749ad1ee14d33fcde07f1e3dcf573860cac57a4"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/883a310904b3d36c9d74b887d47c14a072ebae7d",
          "sha": "883a310904b3d36c9d74b887d47c14a072ebae7d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/883a310904b3d36c9d74b887d47c14a072ebae7d"
        }
      ],
      "message": "Add a CHub for communication from p2p/wallet to blockstore.\n\nThe goal is for p2p code/wallet to only get information/communicate\ninformation about the blockchain through CHub, giving Bitcoin a\nmuch more clearly-defined structure and allowing for the removal\nof a ton of the current global mess.",
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-10T20:20:42Z"
      },
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-05-29T15:15:38Z"
      },
      "sha": "877e3af8bac76c00bc060943649debdab40e0344"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNDJkMGYxNWEyZDdhZDc3NzkyODc2NDNjN2YwODdjYTU0NmUzYTI1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c42d0f15a2d7ad7779287643c7f087ca546e3a25",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c42d0f15a2d7ad7779287643c7f087ca546e3a25",
      "tree": {
        "sha": "fe4f1706adf29237bf3e418fc37451ac7074af7d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fe4f1706adf29237bf3e418fc37451ac7074af7d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/877e3af8bac76c00bc060943649debdab40e0344",
          "sha": "877e3af8bac76c00bc060943649debdab40e0344",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/877e3af8bac76c00bc060943649debdab40e0344"
        }
      ],
      "message": "Add a basic CHubListener that can be extended.",
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-10T20:20:42Z"
      },
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-01T15:47:30Z"
      },
      "sha": "c42d0f15a2d7ad7779287643c7f087ca546e3a25"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZDM1OTNjNTAwZjkzMWFhYjcyYWY1OTI5YTcyYmZjYzdjYTk5MzU1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dd3593c500f931aab72af5929a72bfcc7ca99355",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/dd3593c500f931aab72af5929a72bfcc7ca99355",
      "tree": {
        "sha": "8f6154598c7ea2d2bb82a600f61079be9c5c6f9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8f6154598c7ea2d2bb82a600f61079be9c5c6f9d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c42d0f15a2d7ad7779287643c7f087ca546e3a25",
          "sha": "c42d0f15a2d7ad7779287643c7f087ca546e3a25",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c42d0f15a2d7ad7779287643c7f087ca546e3a25"
        }
      ],
      "message": "Add EmitBlock/CommitBlock functionality to CHub.\n\nReplacing ProcessBlock with EmitBlock, and creating callbacks for\nCommitBlock.",
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-10T20:32:21Z"
      },
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-01T00:45:00Z"
      },
      "sha": "dd3593c500f931aab72af5929a72bfcc7ca99355"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNmQzOWE4ODczMDhmZDY1YjYyMDUxMzgwNDc3NTI4ZWY2ZjZiOWY2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e6d39a887308fd65b62051380477528ef6f6b9f6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/e6d39a887308fd65b62051380477528ef6f6b9f6",
      "tree": {
        "sha": "0b62a999a63e580caacf1058e9f6c4b07319c2d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b62a999a63e580caacf1058e9f6c4b07319c2d4"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dd3593c500f931aab72af5929a72bfcc7ca99355",
          "sha": "dd3593c500f931aab72af5929a72bfcc7ca99355",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/dd3593c500f931aab72af5929a72bfcc7ca99355"
        }
      ],
      "message": "Fix typo",
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-10T20:32:22Z"
      },
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-01T01:00:42Z"
      },
      "sha": "e6d39a887308fd65b62051380477528ef6f6b9f6"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNTljNTI4Y2VjNjg0OThkMjAyZjZmMTdkNTc4MjViZGNmODlkMGM1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/159c528cec68498d202f6f17d57825bdcf89d0c5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/159c528cec68498d202f6f17d57825bdcf89d0c5",
      "tree": {
        "sha": "0ef1ac35b26268a4fa934763f3b331f57a9a22ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0ef1ac35b26268a4fa934763f3b331f57a9a22ba"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e6d39a887308fd65b62051380477528ef6f6b9f6",
          "sha": "e6d39a887308fd65b62051380477528ef6f6b9f6",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/e6d39a887308fd65b62051380477528ef6f6b9f6"
        }
      ],
      "message": "Add HandleCommitBlock to net.cpp & move stuff from main.cpp to it",
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-10T20:32:23Z"
      },
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-01T01:21:59Z"
      },
      "sha": "159c528cec68498d202f6f17d57825bdcf89d0c5"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NGE0NDBhZTc5Y2Q4NjVlMjM1YjhjNTlhOGI0YWQ1OTc4MWNjNDJh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/94a440ae79cd865e235b8c59a8b4ad59781cc42a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/94a440ae79cd865e235b8c59a8b4ad59781cc42a",
      "tree": {
        "sha": "11508385e1ca31fed5a6b545d08d31d2cf2d153a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/11508385e1ca31fed5a6b545d08d31d2cf2d153a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/159c528cec68498d202f6f17d57825bdcf89d0c5",
          "sha": "159c528cec68498d202f6f17d57825bdcf89d0c5",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/159c528cec68498d202f6f17d57825bdcf89d0c5"
        }
      ],
      "message": "Remove uiInterface.NotifyBlocksChanged and replace with CommitBlock\n\nAlso rename NotifyBlocksChanged to NotifyNewBlock and remove from\nthe uiInterface signals list.\n\nThis removes some functionality, but NofiyBlocksChanged was not\nused anyway, so it shouldn't matter.  That said, if it is ever\nneeded, it would be fairly trivial to add a new callback for it\nin CHub.",
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-10T20:32:24Z"
      },
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-01T01:43:29Z"
      },
      "sha": "94a440ae79cd865e235b8c59a8b4ad59781cc42a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYWFkMmU5OWJiYzQ4YjAzMTk3ZDM4OWQ1OTI0M2E5ZWZjMWFkZDI5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1aad2e99bbc48b03197d389d59243a9efc1add29",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1aad2e99bbc48b03197d389d59243a9efc1add29",
      "tree": {
        "sha": "ca27ab024da3f0a52462195983dcc0ef17c7c207",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ca27ab024da3f0a52462195983dcc0ef17c7c207"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/94a440ae79cd865e235b8c59a8b4ad59781cc42a",
          "sha": "94a440ae79cd865e235b8c59a8b4ad59781cc42a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/94a440ae79cd865e235b8c59a8b4ad59781cc42a"
        }
      ],
      "message": "Add EmitAlert/CommitAlert functionality to CHub.\n\nReplace ProcessAlert with calls to EmitAlert and create callbacks\nfor CommitAlert.",
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-10T20:32:25Z"
      },
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-01T02:03:49Z"
      },
      "sha": "1aad2e99bbc48b03197d389d59243a9efc1add29"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MzY1ZWNhNzhjNDQ1OGZiYjg4ZWM1YzE2NDFkNjgyNmQ4MGQ4ZDY4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5365eca78c4458fbb88ec5c1641d6826d80d8d68",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/5365eca78c4458fbb88ec5c1641d6826d80d8d68",
      "tree": {
        "sha": "cc1a22f1111c64a35ba2e36ede92ad7940eda039",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cc1a22f1111c64a35ba2e36ede92ad7940eda039"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1aad2e99bbc48b03197d389d59243a9efc1add29",
          "sha": "1aad2e99bbc48b03197d389d59243a9efc1add29",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1aad2e99bbc48b03197d389d59243a9efc1add29"
        }
      ],
      "message": "Use CommitAlert in qt/clientmodel.cpp",
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-10T20:32:26Z"
      },
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-01T02:23:55Z"
      },
      "sha": "5365eca78c4458fbb88ec5c1641d6826d80d8d68"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZGEwYmVkMWYyOWJkM2MwNDAxMTkxZWE5YzhlYTc0OWZmZjQzNmNl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7da0bed1f29bd3c0401191ea9c8ea749fff436ce",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/7da0bed1f29bd3c0401191ea9c8ea749fff436ce",
      "tree": {
        "sha": "941c9cb687edff60a0ae5384bcd90710c38bf5c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/941c9cb687edff60a0ae5384bcd90710c38bf5c4"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5365eca78c4458fbb88ec5c1641d6826d80d8d68",
          "sha": "5365eca78c4458fbb88ec5c1641d6826d80d8d68",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/5365eca78c4458fbb88ec5c1641d6826d80d8d68"
        }
      ],
      "message": "Add RegisterRemoveAlert functionality to CHub.",
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-10T20:32:27Z"
      },
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-01T02:30:27Z"
      },
      "sha": "7da0bed1f29bd3c0401191ea9c8ea749fff436ce"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZjZjMjA2NTYxMzY1NjY4ZjMxYTc1YzhlZjQ2ZDZhY2IxZThkMmYz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8f6c206561365668f31a75c8ef46d6acb1e8d2f3",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/8f6c206561365668f31a75c8ef46d6acb1e8d2f3",
      "tree": {
        "sha": "150594ccdfac38e998b7e5d4cf4cb29ab1a71ac1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/150594ccdfac38e998b7e5d4cf4cb29ab1a71ac1"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7da0bed1f29bd3c0401191ea9c8ea749fff436ce",
          "sha": "7da0bed1f29bd3c0401191ea9c8ea749fff436ce",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/7da0bed1f29bd3c0401191ea9c8ea749fff436ce"
        }
      ],
      "message": "Replace NotifyAlertChanged with RegisterRemoveAlert.",
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-10T20:32:28Z"
      },
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-01T02:34:35Z"
      },
      "sha": "8f6c206561365668f31a75c8ef46d6acb1e8d2f3"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNmMzMGRjYTFhMzkxOGVhYzg1ZDQ1NTMwODgxN2ZiZDMzZWM3MzQ1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c6c30dca1a3918eac85d455308817fbd33ec7345",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c6c30dca1a3918eac85d455308817fbd33ec7345",
      "tree": {
        "sha": "a1cc950b9806fab1b272207290b1cfdc0c876486",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a1cc950b9806fab1b272207290b1cfdc0c876486"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8f6c206561365668f31a75c8ef46d6acb1e8d2f3",
          "sha": "8f6c206561365668f31a75c8ef46d6acb1e8d2f3",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/8f6c206561365668f31a75c8ef46d6acb1e8d2f3"
        }
      ],
      "message": "Convert Orphan Tx storage to CTransactions from CDataStreams.\n\nThere was no reason to use CDataStream as the transaction was\nalready being serialized/deserialized several times, with this\nchange, transactions coming in over network are deserialized once\nwhen received, and then only reserialized in the call to\nRelayMessage, which will be called in a callback thread, not\nblocking cs_main.",
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-10T20:32:30Z"
      },
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-01T23:12:27Z"
      },
      "sha": "c6c30dca1a3918eac85d455308817fbd33ec7345"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZGM4OTA2NmE4MDQyZTQyY2EwNGVkYTE5NTkzYjRmYjRlMjNmZTMx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9dc89066a8042e42ca04eda19593b4fb4e23fe31",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9dc89066a8042e42ca04eda19593b4fb4e23fe31",
      "tree": {
        "sha": "f8d080f263170faa60906c21150f23350d8733a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f8d080f263170faa60906c21150f23350d8733a2"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c6c30dca1a3918eac85d455308817fbd33ec7345",
          "sha": "c6c30dca1a3918eac85d455308817fbd33ec7345",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c6c30dca1a3918eac85d455308817fbd33ec7345"
        }
      ],
      "message": "Add a cs around mapAlreadyAskedFor.",
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-10T20:32:30Z"
      },
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-01T22:42:10Z"
      },
      "sha": "9dc89066a8042e42ca04eda19593b4fb4e23fe31"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYzMzZWVjYTJjMzhiYjkwMjQyM2U5OWJkMjZiZWY1MDlhOTkwYjU4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ac33eeca2c38bb902423e99bd26bef509a990b58",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ac33eeca2c38bb902423e99bd26bef509a990b58",
      "tree": {
        "sha": "642efb9af43dd459b8c98b9294b96a8838393c02",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/642efb9af43dd459b8c98b9294b96a8838393c02"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9dc89066a8042e42ca04eda19593b4fb4e23fe31",
          "sha": "9dc89066a8042e42ca04eda19593b4fb4e23fe31",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9dc89066a8042e42ca04eda19593b4fb4e23fe31"
        }
      ],
      "message": "Add basic EmitTransaction/CommitTransaction functionality to CHub.",
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-10T20:32:31Z"
      },
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-01T22:29:16Z"
      },
      "sha": "ac33eeca2c38bb902423e99bd26bef509a990b58"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYmZiNjBmNjRkYzY4ZDFlZTU1OGIxNWVhMzJmOWU0NjkwZDRlMjhk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3bfb60f64dc68d1ee558b15ea32f9e4690d4e28d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3bfb60f64dc68d1ee558b15ea32f9e4690d4e28d",
      "tree": {
        "sha": "6fbffaa7ac32254b8951c8ec3e2811747297ff26",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6fbffaa7ac32254b8951c8ec3e2811747297ff26"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ac33eeca2c38bb902423e99bd26bef509a990b58",
          "sha": "ac33eeca2c38bb902423e99bd26bef509a990b58",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ac33eeca2c38bb902423e99bd26bef509a990b58"
        }
      ],
      "message": "Use EmitTransaction instead of AcceptToMemoryPool in sendrawtx.",
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-11T17:30:26Z"
      },
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-01T23:47:53Z"
      },
      "sha": "3bfb60f64dc68d1ee558b15ea32f9e4690d4e28d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMjc3YzkzZjIzNTNhYmQ3MWQyNWMyNjMyODc3YmVkOWQxYmRhMWVm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c277c93f2353abd71d25c2632877bed9d1bda1ef",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c277c93f2353abd71d25c2632877bed9d1bda1ef",
      "tree": {
        "sha": "e0c9f603551548b39f27a88d3c85ef637dd85616",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e0c9f603551548b39f27a88d3c85ef637dd85616"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3bfb60f64dc68d1ee558b15ea32f9e4690d4e28d",
          "sha": "3bfb60f64dc68d1ee558b15ea32f9e4690d4e28d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/3bfb60f64dc68d1ee558b15ea32f9e4690d4e28d"
        }
      ],
      "message": "Add CWallet support for registering with a CHub.",
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-11T17:30:26Z"
      },
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-01T01:10:10Z"
      },
      "sha": "c277c93f2353abd71d25c2632877bed9d1bda1ef"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MTZmZmJmZTlkYmMxMWI5NTk3NzYyYjkyOGM1NWRiMzQ4MGNkYmQ5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/916ffbfe9dbc11b9597762b928c55db3480cdbd9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/916ffbfe9dbc11b9597762b928c55db3480cdbd9",
      "tree": {
        "sha": "4ab954173767aacc0e1e686d1d640d3916fb1a08",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4ab954173767aacc0e1e686d1d640d3916fb1a08"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c277c93f2353abd71d25c2632877bed9d1bda1ef",
          "sha": "c277c93f2353abd71d25c2632877bed9d1bda1ef",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c277c93f2353abd71d25c2632877bed9d1bda1ef"
        }
      ],
      "message": "Use HandleCommitTransactionToMemoryPool instead of SyncWithWallets.",
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-11T17:30:28Z"
      },
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-01T23:41:48Z"
      },
      "sha": "916ffbfe9dbc11b9597762b928c55db3480cdbd9"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNjAwODRjYWUzYWRkODVjNTQ4NzhiZDZmNjIwYjQxZjEwN2RjNjkx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e60084cae3add85c54878bd6f620b41f107dc691",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/e60084cae3add85c54878bd6f620b41f107dc691",
      "tree": {
        "sha": "e6d11d62fab89e707fd2837a807baa1d7deee44b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e6d11d62fab89e707fd2837a807baa1d7deee44b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/916ffbfe9dbc11b9597762b928c55db3480cdbd9",
          "sha": "916ffbfe9dbc11b9597762b928c55db3480cdbd9",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/916ffbfe9dbc11b9597762b928c55db3480cdbd9"
        }
      ],
      "message": "Remove AcceptToMemoryPool and replace with EmitTransaction.\n\n * This removes not only CTransaction::AcceptToMemoryPool, but\n    also CMerkleTx::AcceptToMemoryPool. It also moves\n    CWalletTx::AcceptWalletTransaction to wallet.cpp\n\n * This adds a fCheckInputs flag to EmitTransaction, which is\n    similar to the fCheckInputs flag to AcceptToMemoryPool,\n    however, it has stricter guidlines that it should only be set\n    \"when transaction is a supporting tx for one of our own.\"\n    Additionally, \"fCheckInputs is ignored (and set to true)\n    if !IsInitialBlockDownload() && !fClient\"\n\n    As a part of these guidelines,\n    CWalletTx::AcceptWalletTransaction calls EmitTransaction with\n    fCheckInputs set to true (the default) on the final\n    transaction, whereas it used to call with fCheckInputs set to\n    false. This has the important side-effect of allowing wallet-\n    generated transactions to end up getting AddOrphanTx'd.\n    However, if a supporting transaction to one of our own had\n    previously been AddOrphanTx'd, it would immediately be added\n    to memory pool as it is \"a supporting tx for one of our own\"\n    and thus is re-added with fCheckInputs=false.\n\n    Note that the possibility of a wallet transaction getting\n    AddOrphanTx'd is very low, and should only happen if\n    a) a transaction's input is a generate and we are missing that\n       block (note that no transactions should be generated with a\n       generation input if we don't have that block anyway).\n    b) We match the !IsInitialBlockDownload() && !fClient check,\n       are not caught up to the latest block, and an input is in a\n       block we do not yet have (possible after the last\n       checkpoint). This situation is temporary and should resolve\n       itself once we catch up (though AddOrphanTx'd transactions\n       may be permanently orphaned).\n\n    Largely, these guidelines are there because there is no reason\n    to add a transaction without checking its inputs, as we have\n    those inputs available, and checking them as any other\n    transaction would provides additional sanity-checks.\n\n * A second EmitTransaction was added with tx of type CMerkleTx.\n    This keeps behavior of CMerkleTx::AcceptToMemoryPool the same\n    in fClient mode. Note that new behavior was invented for\n    CHub::EmitTransaction(CTransaction&...) in fClient mode,\n    namely that ClientConnectInputs is only checked if\n    fCheckInputs is true. This was chosen to make emitting a\n    transaction possible in fClient mode even if its inputs are\n    not available, but could be changed if support for that is not\n    needed when fClient mode is actually implemented.",
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-11T17:30:28Z"
      },
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-02T01:16:48Z"
      },
      "sha": "e60084cae3add85c54878bd6f620b41f107dc691"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MWZmM2NmODE2OWM0NTM2NmU5M2VlMzQ3N2MzOWY5MzgwZjExNjc0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/41ff3cf8169c45366e93ee3477c39f9380f11674",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/41ff3cf8169c45366e93ee3477c39f9380f11674",
      "tree": {
        "sha": "d9e727713ba66b5258f46b3514e91116fcaf77ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d9e727713ba66b5258f46b3514e91116fcaf77ba"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e60084cae3add85c54878bd6f620b41f107dc691",
          "sha": "e60084cae3add85c54878bd6f620b41f107dc691",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/e60084cae3add85c54878bd6f620b41f107dc691"
        }
      ],
      "message": "Add a CBlockStore class to hold the blockstore.",
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-11T17:30:53Z"
      },
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-04T15:46:12Z"
      },
      "sha": "41ff3cf8169c45366e93ee3477c39f9380f11674"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YTI2OGY0MzdiMDQzMTdmMjAzNzQ1MGYyMmRkY2JiOGY0NWVmMTc4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9a268f437b04317f2037450f22ddcbb8f45ef178",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9a268f437b04317f2037450f22ddcbb8f45ef178",
      "tree": {
        "sha": "3606dce72d687f332573b47196f2105a2df94ef3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3606dce72d687f332573b47196f2105a2df94ef3"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/41ff3cf8169c45366e93ee3477c39f9380f11674",
          "sha": "41ff3cf8169c45366e93ee3477c39f9380f11674",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/41ff3cf8169c45366e93ee3477c39f9380f11674"
        }
      ],
      "message": "Add support for registering a CBlockStore with CHub.",
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-11T17:30:54Z"
      },
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-04T16:38:49Z"
      },
      "sha": "9a268f437b04317f2037450f22ddcbb8f45ef178"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MGJhNzY3YjNlMmZhNzY3ZmQ4YzgxZGIyMjM5YTA1Mjg1YTcyZGFi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/60ba767b3e2fa767fd8c81db2239a05285a72dab",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/60ba767b3e2fa767fd8c81db2239a05285a72dab",
      "tree": {
        "sha": "a28f7c0faa7c5c9f3024abd4d215b19670e17f8f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a28f7c0faa7c5c9f3024abd4d215b19670e17f8f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9a268f437b04317f2037450f22ddcbb8f45ef178",
          "sha": "9a268f437b04317f2037450f22ddcbb8f45ef178",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9a268f437b04317f2037450f22ddcbb8f45ef178"
        }
      ],
      "message": "Move EmitBlock handling from CHub to CBlockStore.",
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-11T17:30:55Z"
      },
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-04T16:53:00Z"
      },
      "sha": "60ba767b3e2fa767fd8c81db2239a05285a72dab"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YjkyNmM4ZDM0YTM4ZTFmZjliYmNiODY2YmYxMjY2YzI4NmIzZjY2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b926c8d34a38e1ff9bbcb866bf1266c286b3f66",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9b926c8d34a38e1ff9bbcb866bf1266c286b3f66",
      "tree": {
        "sha": "3bd84dc339c54a28acb85fb739b4d5d6c457af05",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3bd84dc339c54a28acb85fb739b4d5d6c457af05"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/60ba767b3e2fa767fd8c81db2239a05285a72dab",
          "sha": "60ba767b3e2fa767fd8c81db2239a05285a72dab",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/60ba767b3e2fa767fd8c81db2239a05285a72dab"
        }
      ],
      "message": "Move block checking from CTxDB::LoadBlockIndex->LoadBlockIndex.",
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-11T17:30:56Z"
      },
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-04T19:26:16Z"
      },
      "sha": "9b926c8d34a38e1ff9bbcb866bf1266c286b3f66"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YThjZDFkZTliMTlhN2UxNmI4MDI4ZWVlZWFjMzA5ODE2NzE0OGM2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9a8cd1de9b19a7e16b8028eeeeac3098167148c6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9a8cd1de9b19a7e16b8028eeeeac3098167148c6",
      "tree": {
        "sha": "029d6fb01b418ba4b98f4f12105bdf706288f61a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/029d6fb01b418ba4b98f4f12105bdf706288f61a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b926c8d34a38e1ff9bbcb866bf1266c286b3f66",
          "sha": "9b926c8d34a38e1ff9bbcb866bf1266c286b3f66",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9b926c8d34a38e1ff9bbcb866bf1266c286b3f66"
        }
      ],
      "message": "Add CWallet::HandleCommitBlock and move junk from main.cpp to it.\n\nNote that this changes the way the GUI shows coinbases of users:\nit now shows them only after the first non-orphan block based on\nthe generating block, instead of after the first block based on\nthe generating one period.",
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-11T17:30:57Z"
      },
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-04T20:59:45Z"
      },
      "sha": "9a8cd1de9b19a7e16b8028eeeeac3098167148c6"
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNzExODc0Njp2Mg==",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNzExODc0OTp2Mg==",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNzExODc1Mjp2Mg==",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "subscribed",
      "id": 17766319,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE3NzY2MzE5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17766319",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2012-06-14T23:31:57Z"
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNzExODc1Mzp2Mg==",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzowM2FhYTQ3NDg3ZjU2NmU1ZjAwMzA1ZTQ4ZDJhODIyMzI2MGVlYWQz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/03aaa47487f566e5f00305e48d2a8223260eead3",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/03aaa47487f566e5f00305e48d2a8223260eead3",
      "tree": {
        "sha": "83d794878be0d77890465ee05f52716cec132830",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/83d794878be0d77890465ee05f52716cec132830"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9a8cd1de9b19a7e16b8028eeeeac3098167148c6",
          "sha": "9a8cd1de9b19a7e16b8028eeeeac3098167148c6",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9a8cd1de9b19a7e16b8028eeeeac3098167148c6"
        }
      ],
      "message": "Add ability to post_all() in CSemaphore.",
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-27T01:29:23Z"
      },
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-25T19:18:42Z"
      },
      "sha": "03aaa47487f566e5f00305e48d2a8223260eead3"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNTQwNzJiZjY4ZGZmMDZlNDE4N2YyZjQyYTAyNmRjNTgzM2JmNDk0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c54072bf68dff06e4187f2f42a026dc5833bf494",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c54072bf68dff06e4187f2f42a026dc5833bf494",
      "tree": {
        "sha": "5155e385c092809f97e8c2af42971b581d34a85d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5155e385c092809f97e8c2af42971b581d34a85d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/03aaa47487f566e5f00305e48d2a8223260eead3",
          "sha": "03aaa47487f566e5f00305e48d2a8223260eead3",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/03aaa47487f566e5f00305e48d2a8223260eead3"
        }
      ],
      "message": "Move AlreadyHave to CHub::NeedInv",
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-27T01:29:23Z"
      },
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-25T15:54:15Z"
      },
      "sha": "c54072bf68dff06e4187f2f42a026dc5833bf494"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOGVlY2JlNjlkN2ZkNDExNWE0MmFlNzMyMWNkNGYzYzJiNTA5NDJh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b8eecbe69d7fd4115a42ae7321cd4f3c2b50942a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b8eecbe69d7fd4115a42ae7321cd4f3c2b50942a",
      "tree": {
        "sha": "1a68087fa2bd56c6bde68ee2430bfc5069d0ebff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1a68087fa2bd56c6bde68ee2430bfc5069d0ebff"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c54072bf68dff06e4187f2f42a026dc5833bf494",
          "sha": "c54072bf68dff06e4187f2f42a026dc5833bf494",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c54072bf68dff06e4187f2f42a026dc5833bf494"
        }
      ],
      "message": "Add a setBlocksSeen and use it for duplicate checks.",
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-27T13:16:10Z"
      },
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-05-07T07:39:38Z"
      },
      "sha": "b8eecbe69d7fd4115a42ae7321cd4f3c2b50942a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZjQ2YjlmYjBiNWNhYTMyZmZkY2JmMzFkMWM2MzI4ODg4NWQzOTRl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bf46b9fb0b5caa32ffdcbf31d1c63288885d394e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/bf46b9fb0b5caa32ffdcbf31d1c63288885d394e",
      "tree": {
        "sha": "f59fe851f4a10dfc61b2a183bd10d4b2c5a4a574",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f59fe851f4a10dfc61b2a183bd10d4b2c5a4a574"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b8eecbe69d7fd4115a42ae7321cd4f3c2b50942a",
          "sha": "b8eecbe69d7fd4115a42ae7321cd4f3c2b50942a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b8eecbe69d7fd4115a42ae7321cd4f3c2b50942a"
        }
      ],
      "message": "Add support for calling CNode->Misbehaving from CHub & CBlockStore.",
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-27T13:16:10Z"
      },
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-05-07T06:50:56Z"
      },
      "sha": "bf46b9fb0b5caa32ffdcbf31d1c63288885d394e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOTZmNjBkNTNmMmMxZGY1NmZiZmVmZGIwODdiZWViMDA4ZWE2YzJi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/296f60d53f2c1df56fbfefdb087beeb008ea6c2b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/296f60d53f2c1df56fbfefdb087beeb008ea6c2b",
      "tree": {
        "sha": "bc321e61fda622424850994d2569a766da550b81",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bc321e61fda622424850994d2569a766da550b81"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bf46b9fb0b5caa32ffdcbf31d1c63288885d394e",
          "sha": "bf46b9fb0b5caa32ffdcbf31d1c63288885d394e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/bf46b9fb0b5caa32ffdcbf31d1c63288885d394e"
        }
      ],
      "message": "Add support for emitting DoS callbacks from EmitBlock.",
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-27T13:16:10Z"
      },
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-04T01:25:42Z"
      },
      "sha": "296f60d53f2c1df56fbfefdb087beeb008ea6c2b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZDAwNmI2Yzc4MGRiZmE5MWUzZTQ1Yjc3MDFmZGNlMjc0Yzc4ZGFl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8d006b6c780dbfa91e3e45b7701fdce274c78dae",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/8d006b6c780dbfa91e3e45b7701fdce274c78dae",
      "tree": {
        "sha": "cc7e71222735de6d7b05b45bc2f515256ef2dfe0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cc7e71222735de6d7b05b45bc2f515256ef2dfe0"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/296f60d53f2c1df56fbfefdb087beeb008ea6c2b",
          "sha": "296f60d53f2c1df56fbfefdb087beeb008ea6c2b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/296f60d53f2c1df56fbfefdb087beeb008ea6c2b"
        }
      ],
      "message": "Lock cs_main in ProcessMessage instead of ProcessMessages.\n\nThis removes the locking of cs_main before calling Emit* and should\nallow multiple ProcessMessage calls at once.\n\nIt no doubt locks cs_main in places where it isnt neccessary, but\nto avoid complicated and unforseen interactions, cs_main is locked\nfor nearly every message in ProcessMessage.",
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-27T13:16:11Z"
      },
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-05T15:31:13Z"
      },
      "sha": "8d006b6c780dbfa91e3e45b7701fdce274c78dae"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMzVhMDI3N2NmZWJmNGRkNjVlNDAwNzBjMTNmODJhYzViNmViNmZm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/235a0277cfebf4dd65e40070c13f82ac5b6eb6ff",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/235a0277cfebf4dd65e40070c13f82ac5b6eb6ff",
      "tree": {
        "sha": "f81ab468180bed35d161938d576e28e766709e51",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f81ab468180bed35d161938d576e28e766709e51"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8d006b6c780dbfa91e3e45b7701fdce274c78dae",
          "sha": "8d006b6c780dbfa91e3e45b7701fdce274c78dae",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/8d006b6c780dbfa91e3e45b7701fdce274c78dae"
        }
      ],
      "message": "Add a CBlockStore::GetBlockIndex to encapsulate mapBlockIndex.\n\nIt has a fBlocking flag to wait for the block being requested to\nbe committed after having been emitted (for use in the\n\"force request\" block request in the \"inv\" message handler).\n\nThis fixes a potential segfault if -blockbuffersize is overly big.",
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-28T17:46:39Z"
      },
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-25T19:55:59Z"
      },
      "sha": "235a0277cfebf4dd65e40070c13f82ac5b6eb6ff"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNTE0MTUwZTY2ZjJjMjkwYzQ0NGUyMTBhYzViODkyNjdhYWE1ZWJk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2514150e66f2c290c444e210ac5b89267aaa5ebd",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2514150e66f2c290c444e210ac5b89267aaa5ebd",
      "tree": {
        "sha": "fbef9d0b3fa793ba55d0dc19cc6f1f06e84425d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fbef9d0b3fa793ba55d0dc19cc6f1f06e84425d2"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/235a0277cfebf4dd65e40070c13f82ac5b6eb6ff",
          "sha": "235a0277cfebf4dd65e40070c13f82ac5b6eb6ff",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/235a0277cfebf4dd65e40070c13f82ac5b6eb6ff"
        }
      ],
      "message": "Add support for EmitBlock concurrency.",
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-28T17:46:39Z"
      },
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-05T00:52:38Z"
      },
      "sha": "2514150e66f2c290c444e210ac5b89267aaa5ebd"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMzc4MjgzOGZjYTIzODk5ZGMzZjdiNTA5MDliNmJmYzY2OTZiNDY2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c3782838fca23899dc3f7b50909b6bfc6696b466",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c3782838fca23899dc3f7b50909b6bfc6696b466",
      "tree": {
        "sha": "de4c264b31b92ec44ac57c2528c618544b189894",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/de4c264b31b92ec44ac57c2528c618544b189894"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2514150e66f2c290c444e210ac5b89267aaa5ebd",
          "sha": "2514150e66f2c290c444e210ac5b89267aaa5ebd",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2514150e66f2c290c444e210ac5b89267aaa5ebd"
        }
      ],
      "message": "Use EmitBlock concurrency in ProcessMessage.",
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-28T17:46:39Z"
      },
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-05T01:59:43Z"
      },
      "sha": "c3782838fca23899dc3f7b50909b6bfc6696b466"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NTIyY2M4ZGMxNDU2ZGMyNGUxZDFhOTFlM2U5NGU4YWUxMTFmZmQx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7522cc8dc1456dc24e1d1a91e3e94e8ae111ffd1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/7522cc8dc1456dc24e1d1a91e3e94e8ae111ffd1",
      "tree": {
        "sha": "d9f5ad172e16735cee9891f7d1e47406309f6015",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d9f5ad172e16735cee9891f7d1e47406309f6015"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c3782838fca23899dc3f7b50909b6bfc6696b466",
          "sha": "c3782838fca23899dc3f7b50909b6bfc6696b466",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c3782838fca23899dc3f7b50909b6bfc6696b466"
        }
      ],
      "message": "Cache last checkpoint.",
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-28T17:46:39Z"
      },
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-05-09T05:18:41Z"
      },
      "sha": "7522cc8dc1456dc24e1d1a91e3e94e8ae111ffd1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYTZhYjE1NzcxZTE2MTNmMTNmNDk2YzlkM2FhNGYyOGU4ZTEyNDM1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0a6ab15771e1613f13f496c9d3aa4f28e8e12435",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/0a6ab15771e1613f13f496c9d3aa4f28e8e12435",
      "tree": {
        "sha": "9d714d20e9005c273d7d8a3a92d2c6f42d272097",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9d714d20e9005c273d7d8a3a92d2c6f42d272097"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7522cc8dc1456dc24e1d1a91e3e94e8ae111ffd1",
          "sha": "7522cc8dc1456dc24e1d1a91e3e94e8ae111ffd1",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/7522cc8dc1456dc24e1d1a91e3e94e8ae111ffd1"
        }
      ],
      "message": "Move getdata handling out of cs_main in SendMessages.\n\nThis resolves a bug where the block buffer is allowed to deplete\nbecause the getdata that is required to continue is not sent.",
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-28T17:46:39Z"
      },
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-06T00:51:52Z"
      },
      "sha": "0a6ab15771e1613f13f496c9d3aa4f28e8e12435"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYjIwNzEzNDk3YzVlN2ZjMDExZjk1MDBlNTBiMDIxYjU5YmUwMzcx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fb20713497c5e7fc011f9500e50b021b59be0371",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/fb20713497c5e7fc011f9500e50b021b59be0371",
      "tree": {
        "sha": "4ed752288c2fcf47bfe1999cab9d5c281488611f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4ed752288c2fcf47bfe1999cab9d5c281488611f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0a6ab15771e1613f13f496c9d3aa4f28e8e12435",
          "sha": "0a6ab15771e1613f13f496c9d3aa4f28e8e12435",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/0a6ab15771e1613f13f496c9d3aa4f28e8e12435"
        }
      ],
      "message": "Add -blockbuffersize, default 20.",
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-28T17:46:39Z"
      },
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-05-09T06:14:30Z"
      },
      "sha": "fb20713497c5e7fc011f9500e50b021b59be0371"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YzMzNjI1NTI0NzlkOTU1Njk4MTdkMTQ5YzI1M2E3MTdiZDY3YTI1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9c3362552479d95569817d149c253a717bd67a25",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9c3362552479d95569817d149c253a717bd67a25",
      "tree": {
        "sha": "59a6eadf392352d9293ccbcd33b26fb2f34efdc5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/59a6eadf392352d9293ccbcd33b26fb2f34efdc5"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fb20713497c5e7fc011f9500e50b021b59be0371",
          "sha": "fb20713497c5e7fc011f9500e50b021b59be0371",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/fb20713497c5e7fc011f9500e50b021b59be0371"
        }
      ],
      "message": "Call PushGetBlocks after last block, instead of just on orphans.\n\nThis keeps the block buffer from running out until the final\nblock's FinishEmitBlock is run.",
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-28T17:46:39Z"
      },
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-06T13:09:06Z"
      },
      "sha": "9c3362552479d95569817d149c253a717bd67a25"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MTc2MDU0ZDIzNmU3OTNmNjcwOGQ0OTI5YmMxZDAxZjgzNWYwNzU5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7176054d236e793f6708d4929bc1d01f835f0759",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/7176054d236e793f6708d4929bc1d01f835f0759",
      "tree": {
        "sha": "fed47417e6a4f0cbaa079e75691b84d89f3f7dbc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fed47417e6a4f0cbaa079e75691b84d89f3f7dbc"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9c3362552479d95569817d149c253a717bd67a25",
          "sha": "9c3362552479d95569817d149c253a717bd67a25",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9c3362552479d95569817d149c253a717bd67a25"
        }
      ],
      "message": "Use EmitBlock concurrency in LoadExternalBlockFile.",
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-28T17:46:39Z"
      },
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-05-09T21:36:58Z"
      },
      "sha": "7176054d236e793f6708d4929bc1d01f835f0759"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZTJhZmY2YTY4YjQwYTMxZDQ4MzNiMjU2MjQ1YmJiYWQwYWQzOGMy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1e2aff6a68b40a31d4833b256245bbbad0ad38c2",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1e2aff6a68b40a31d4833b256245bbbad0ad38c2",
      "tree": {
        "sha": "7cce16e872fff221f8be97240a593505d5583356",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7cce16e872fff221f8be97240a593505d5583356"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7176054d236e793f6708d4929bc1d01f835f0759",
          "sha": "7176054d236e793f6708d4929bc1d01f835f0759",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/7176054d236e793f6708d4929bc1d01f835f0759"
        }
      ],
      "message": "Fix improper use of STL Containers.",
      "committer": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-28T17:46:39Z"
      },
      "author": {
        "name": "Matt Corallo",
        "email": "matt@bluematt.me",
        "date": "2012-06-05T22:54:11Z"
      },
      "sha": "1e2aff6a68b40a31d4833b256245bbbad0ad38c2"
    },
    {
      "event": "commented",
      "id": 6789417,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3ODk0MTc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6789417",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2012-07-05T20:15:42Z",
      "updated_at": "2012-07-05T20:15:42Z",
      "author_association": "MEMBER",
      "body": "This needs rebasing, and Im not going to keep rebasing this stuff without any interest in eventually merging.  If it ever gets interest, I may reopen.\n",
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/1233#issuecomment-6789417",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/1233"
    },
    {
      "event": "closed",
      "id": 19425590,
      "node_id": "MDExOkNsb3NlZEV2ZW50MTk0MjU1OTA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19425590",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2012-07-05T20:15:44Z"
    },
    {
      "event": "referenced",
      "id": 2089789467,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDIwODk3ODk0Njc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2089789467",
      "actor": {
        "login": "lateminer",
        "id": 9951982,
        "node_id": "MDQ6VXNlcjk5NTE5ODI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9951982?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lateminer",
        "html_url": "https://github.com/lateminer",
        "followers_url": "https://api.github.com/users/lateminer/followers",
        "following_url": "https://api.github.com/users/lateminer/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/lateminer/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/lateminer/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/lateminer/subscriptions",
        "organizations_url": "https://api.github.com/users/lateminer/orgs",
        "repos_url": "https://api.github.com/users/lateminer/repos",
        "events_url": "https://api.github.com/users/lateminer/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/lateminer/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "dc27b03ad0f10f841a35671f0c351a8029cb7544",
      "commit_url": "https://api.github.com/repos/lateminer/bitcoin/commits/dc27b03ad0f10f841a35671f0c351a8029cb7544",
      "created_at": "2019-01-22T19:46:42Z"
    },
    {
      "event": "referenced",
      "id": 2938126298,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI5MzgxMjYyOTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2938126298",
      "actor": {
        "login": "lateminer",
        "id": 9951982,
        "node_id": "MDQ6VXNlcjk5NTE5ODI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9951982?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lateminer",
        "html_url": "https://github.com/lateminer",
        "followers_url": "https://api.github.com/users/lateminer/followers",
        "following_url": "https://api.github.com/users/lateminer/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/lateminer/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/lateminer/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/lateminer/subscriptions",
        "organizations_url": "https://api.github.com/users/lateminer/orgs",
        "repos_url": "https://api.github.com/users/lateminer/repos",
        "events_url": "https://api.github.com/users/lateminer/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/lateminer/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "2e4d9142fb8aa1c25e32252cd50868b8cd442d55",
      "commit_url": "https://api.github.com/repos/lateminer/bitcoin/commits/2e4d9142fb8aa1c25e32252cd50868b8cd442d55",
      "created_at": "2020-01-10T10:57:37Z"
    },
    {
      "event": "referenced",
      "id": 5133625373,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDUxMzM2MjUzNzM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5133625373",
      "actor": {
        "login": "dexX7",
        "id": 5836089,
        "node_id": "MDQ6VXNlcjU4MzYwODk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5836089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dexX7",
        "html_url": "https://github.com/dexX7",
        "followers_url": "https://api.github.com/users/dexX7/followers",
        "following_url": "https://api.github.com/users/dexX7/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dexX7/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dexX7/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dexX7/subscriptions",
        "organizations_url": "https://api.github.com/users/dexX7/orgs",
        "repos_url": "https://api.github.com/users/dexX7/repos",
        "events_url": "https://api.github.com/users/dexX7/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dexX7/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "1c0ae8ae01ed79ae3715a16124e8acb98cb67800",
      "commit_url": "https://api.github.com/repos/dexX7/bitcoin/commits/1c0ae8ae01ed79ae3715a16124e8acb98cb67800",
      "created_at": "2021-08-10T06:50:18Z"
    },
    {
      "event": "locked",
      "id": 6074002567,
      "node_id": "LOE_lADOABII584ARHg7zwAAAAFqCeyH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6074002567",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-15T11:02:33Z",
      "lock_reason": "resolved"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/812390",
      "pull_request_review_id": null,
      "id": 812390,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgxMjM5MA==",
      "diff_hunk": "@@ -463,8 +506,8 @@ bool AppInit2(int argc, char* argv[])\n     printf(\"Done loading\\n\");\n \n     //// debug print\n-    printf(\"mapBlockIndex.size() = %d\\n\",   mapBlockIndex.size());\n-    printf(\"nBestHeight = %d\\n\",            nBestHeight);\n+    //printf(\"mapBlockIndex.size() = %d\\n\",   mapBlockIndex.size());\n+    printf(\"BestBlockHeight = %d\\n\",        pblockstore->GetBestBlockIndex()->nHeight);",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 137,
      "commit_id": "1e2aff6a68b40a31d4833b256245bbbad0ad38c2",
      "original_commit_id": "c37ab81ce1480a0881be408e5bc94e0f68af55cb",
      "in_reply_to_id": null,
      "user": {
        "login": "rebroad",
        "id": 1530283,
        "node_id": "MDQ6VXNlcjE1MzAyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rebroad",
        "html_url": "https://github.com/rebroad",
        "followers_url": "https://api.github.com/users/rebroad/followers",
        "following_url": "https://api.github.com/users/rebroad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rebroad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rebroad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
        "organizations_url": "https://api.github.com/users/rebroad/orgs",
        "repos_url": "https://api.github.com/users/rebroad/repos",
        "events_url": "https://api.github.com/users/rebroad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rebroad/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Could comment out this line too, since the height is mentioned in debug.log just few lines before this line.\n",
      "created_at": "2012-05-12T14:22:28Z",
      "updated_at": "2012-06-28T17:47:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/1233#discussion_r812390",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/812390"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/1233"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989834",
      "pull_request_review_id": null,
      "id": 989834,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk4OTgzNA==",
      "diff_hunk": "@@ -1724,135 +1711,152 @@ bool CBlock::CheckBlock() const\n     return true;\n }\n \n-bool CBlock::AcceptBlock()\n+bool CBlockStore::AcceptBlock(CBlock& block)\n {\n     // Check for duplicate\n-    uint256 hash = GetHash();\n+    uint256 hash = block.GetHash();\n     if (mapBlockIndex.count(hash))\n         return error(\"AcceptBlock() : block already in mapBlockIndex\");\n \n     // Get prev block index\n-    map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hashPrevBlock);\n+    map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(block.hashPrevBlock);\n     if (mi == mapBlockIndex.end())\n-        return DoS(10, error(\"AcceptBlock() : prev block not found\"));\n+        return block.DoS(10, error(\"AcceptBlock() : prev block not found\"));\n     CBlockIndex* pindexPrev = (*mi).second;\n     int nHeight = pindexPrev->nHeight+1;\n \n     // Check proof of work\n-    if (nBits != GetNextWorkRequired(pindexPrev, this))\n-        return DoS(100, error(\"AcceptBlock() : incorrect proof of work\"));\n+    if (block.nBits != GetNextWorkRequired(pindexPrev, &block))\n+        return block.DoS(100, error(\"AcceptBlock() : incorrect proof of work\"));\n \n     // Check timestamp against prev\n-    if (GetBlockTime() <= pindexPrev->GetMedianTimePast())\n+    if (block.GetBlockTime() <= pindexPrev->GetMedianTimePast())\n         return error(\"AcceptBlock() : block's timestamp is too early\");\n \n     // Check that all transactions are finalized\n-    BOOST_FOREACH(const CTransaction& tx, vtx)\n-        if (!tx.IsFinal(nHeight, GetBlockTime()))\n-            return DoS(10, error(\"AcceptBlock() : contains a non-final transaction\"));\n+    BOOST_FOREACH(const CTransaction& tx, block.vtx)\n+        if (!tx.IsFinal(nHeight, block.GetBlockTime()))\n+            return block.DoS(10, error(\"AcceptBlock() : contains a non-final transaction\"));\n \n     // Check that the block chain matches the known block chain up to a checkpoint\n     if (!Checkpoints::CheckBlock(nHeight, hash))\n-        return DoS(100, error(\"AcceptBlock() : rejected by checkpoint lockin at %d\", nHeight));\n+        return block.DoS(100, error(\"AcceptBlock() : rejected by checkpoint lockin at %d\", nHeight));\n \n     // Write block to history file\n-    if (!CheckDiskSpace(::GetSerializeSize(*this, SER_DISK, CLIENT_VERSION)))\n+    if (!CheckDiskSpace(GetSerializeSize(block, SER_DISK, CLIENT_VERSION)))\n         return error(\"AcceptBlock() : out of disk space\");\n     unsigned int nFile = -1;\n     unsigned int nBlockPos = 0;\n-    if (!WriteToDisk(nFile, nBlockPos))\n+    if (!block.WriteToDisk(nFile, nBlockPos))\n         return error(\"AcceptBlock() : WriteToDisk failed\");\n-    if (!AddToBlockIndex(nFile, nBlockPos))\n+    if (!AddToBlockIndex(block, nFile, nBlockPos))\n         return error(\"AcceptBlock() : AddToBlockIndex failed\");\n \n-    // Relay inventory, but don't relay old inventory during initial block download\n-    int nBlockEstimate = Checkpoints::GetTotalBlocksEstimate();\n-    if (hashBestChain == hash)\n-    {\n-        LOCK(cs_vNodes);\n-        BOOST_FOREACH(CNode* pnode, vNodes)\n-            if (nBestHeight > (pnode->nStartingHeight != -1 ? pnode->nStartingHeight - 2000 : nBlockEstimate))\n-                pnode->PushInventory(CInv(MSG_BLOCK, hash));\n-    }\n-\n     return true;\n }\n \n-bool ProcessBlock(CNode* pfrom, CBlock* pblock)\n+bool CBlockStore::EmitBlock(CBlock& block, bool fBlocking, CNode* pNodeDoS)\n {\n     // Check for duplicate\n-    uint256 hash = pblock->GetHash();\n-    if (mapBlockIndex.count(hash))\n-        return error(\"ProcessBlock() : already have block %d %s\", mapBlockIndex[hash]->nHeight, hash.ToString().substr(0,20).c_str());\n-    if (mapOrphanBlocks.count(hash))\n-        return error(\"ProcessBlock() : already have block (orphan) %s\", hash.ToString().substr(0,20).c_str());\n+    uint256 hash = block.GetHash();\n+    {\n+        LOCK(cs_setBlocksSeen);\n+        if (setBlocksSeen.count(hash) > 0)\n+            return error(\"CHub::EmitBlock() : already seen block %s\", hash.ToString().substr(0,20).c_str());\n+    }\n \n     // Preliminary checks\n-    if (!pblock->CheckBlock())\n-        return error(\"ProcessBlock() : CheckBlock FAILED\");\n+    if (!block.CheckBlock())\n+    {\n+        if (block.nDoS && pNodeDoS)\n+            CallbackDoS(pNodeDoS, block.nDoS);\n+        return error(\"CBlockStore::EmitBlock() : CheckBlock FAILED\");\n+    }\n \n-    CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint(mapBlockIndex);\n-    if (pcheckpoint && pblock->hashPrevBlock != hashBestChain)\n+    const CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint();\n+    if (pcheckpoint && block.hashPrevBlock != hashBestChain)\n     {\n         // Extra checks to prevent \"fill up memory by spamming with bogus blocks\"\n-        int64 deltaTime = pblock->GetBlockTime() - pcheckpoint->nTime;\n+        int64 deltaTime = block.GetBlockTime() - pcheckpoint->nTime;\n         if (deltaTime < 0)\n         {\n-            if (pfrom)\n-                pfrom->Misbehaving(100);\n-            return error(\"ProcessBlock() : block with timestamp before last checkpoint\");\n+            if (pNodeDoS) CallbackDoS(pNodeDoS, 100);\n+            return block.DoS(100, error(\"CBlockStore::EmitBlock() : block with timestamp before last checkpoint\"));\n         }\n         CBigNum bnNewBlock;\n-        bnNewBlock.SetCompact(pblock->nBits);\n+        bnNewBlock.SetCompact(block.nBits);\n         CBigNum bnRequired;\n         bnRequired.SetCompact(ComputeMinWork(pcheckpoint->nBits, deltaTime));\n         if (bnNewBlock > bnRequired)\n         {\n-            if (pfrom)\n-                pfrom->Misbehaving(100);\n-            return error(\"ProcessBlock() : block with too little proof-of-work\");\n+            if (pNodeDoS) CallbackDoS(pNodeDoS, 100);\n+            return block.DoS(100, error(\"CBlockStore::EmitBlock() : block with too little proof-of-work\"));\n         }\n     }\n \n+    {\n+        LOCK(cs_setBlocksSeen);\n+        setBlocksSeen.insert(hash);\n+    }\n+\n+    if (fBlocking)\n+        return FinishEmitBlock(block, pNodeDoS);\n+    else\n+        SubmitCallbackFinishEmitBlock(block, pNodeDoS);\n+\n+    return true;\n+}\n+\n+bool CBlockStore::FinishEmitBlock(CBlock& block, CNode* pNodeDoS)\n+{\n+    uint256 hash = block.GetHash();\n+\n+    LOCK(cs_main);\n \n     // If don't already have its previous block, shunt it off to holding area until we get it\n-    if (!mapBlockIndex.count(pblock->hashPrevBlock))\n+    if (!mapBlockIndex.count(block.hashPrevBlock))\n     {\n-        printf(\"ProcessBlock: ORPHAN BLOCK, prev=%s\\n\", pblock->hashPrevBlock.ToString().substr(0,20).c_str());\n-        CBlock* pblock2 = new CBlock(*pblock);\n-        mapOrphanBlocks.insert(make_pair(hash, pblock2));\n-        mapOrphanBlocksByPrev.insert(make_pair(pblock2->hashPrevBlock, pblock2));\n+        printf(\"CBlockStore::FinishEmitBlock: ORPHAN BLOCK, prev=%s\\n\", block.hashPrevBlock.ToString().substr(0,20).c_str());",
      "path": "src/main.cpp",
      "position": 782,
      "original_position": 785,
      "commit_id": "1e2aff6a68b40a31d4833b256245bbbad0ad38c2",
      "original_commit_id": "669a5d4c9e49fb3027ec7110664faa42615698bc",
      "in_reply_to_id": null,
      "user": {
        "login": "rebroad",
        "id": 1530283,
        "node_id": "MDQ6VXNlcjE1MzAyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rebroad",
        "html_url": "https://github.com/rebroad",
        "followers_url": "https://api.github.com/users/rebroad/followers",
        "following_url": "https://api.github.com/users/rebroad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rebroad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rebroad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
        "organizations_url": "https://api.github.com/users/rebroad/orgs",
        "repos_url": "https://api.github.com/users/rebroad/repos",
        "events_url": "https://api.github.com/users/rebroad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rebroad/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why make this line longer than it already was?\n",
      "created_at": "2012-06-14T23:28:41Z",
      "updated_at": "2012-06-28T17:47:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/1233#discussion_r989834",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989834"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/1233"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1816,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989842",
      "pull_request_review_id": null,
      "id": 989842,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk4OTg0Mg==",
      "diff_hunk": "@@ -1724,135 +1711,152 @@ bool CBlock::CheckBlock() const\n     return true;\n }\n \n-bool CBlock::AcceptBlock()\n+bool CBlockStore::AcceptBlock(CBlock& block)\n {\n     // Check for duplicate\n-    uint256 hash = GetHash();\n+    uint256 hash = block.GetHash();\n     if (mapBlockIndex.count(hash))\n         return error(\"AcceptBlock() : block already in mapBlockIndex\");\n \n     // Get prev block index\n-    map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hashPrevBlock);\n+    map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(block.hashPrevBlock);\n     if (mi == mapBlockIndex.end())\n-        return DoS(10, error(\"AcceptBlock() : prev block not found\"));\n+        return block.DoS(10, error(\"AcceptBlock() : prev block not found\"));\n     CBlockIndex* pindexPrev = (*mi).second;\n     int nHeight = pindexPrev->nHeight+1;\n \n     // Check proof of work\n-    if (nBits != GetNextWorkRequired(pindexPrev, this))\n-        return DoS(100, error(\"AcceptBlock() : incorrect proof of work\"));\n+    if (block.nBits != GetNextWorkRequired(pindexPrev, &block))\n+        return block.DoS(100, error(\"AcceptBlock() : incorrect proof of work\"));\n \n     // Check timestamp against prev\n-    if (GetBlockTime() <= pindexPrev->GetMedianTimePast())\n+    if (block.GetBlockTime() <= pindexPrev->GetMedianTimePast())\n         return error(\"AcceptBlock() : block's timestamp is too early\");\n \n     // Check that all transactions are finalized\n-    BOOST_FOREACH(const CTransaction& tx, vtx)\n-        if (!tx.IsFinal(nHeight, GetBlockTime()))\n-            return DoS(10, error(\"AcceptBlock() : contains a non-final transaction\"));\n+    BOOST_FOREACH(const CTransaction& tx, block.vtx)\n+        if (!tx.IsFinal(nHeight, block.GetBlockTime()))\n+            return block.DoS(10, error(\"AcceptBlock() : contains a non-final transaction\"));\n \n     // Check that the block chain matches the known block chain up to a checkpoint\n     if (!Checkpoints::CheckBlock(nHeight, hash))\n-        return DoS(100, error(\"AcceptBlock() : rejected by checkpoint lockin at %d\", nHeight));\n+        return block.DoS(100, error(\"AcceptBlock() : rejected by checkpoint lockin at %d\", nHeight));\n \n     // Write block to history file\n-    if (!CheckDiskSpace(::GetSerializeSize(*this, SER_DISK, CLIENT_VERSION)))\n+    if (!CheckDiskSpace(GetSerializeSize(block, SER_DISK, CLIENT_VERSION)))\n         return error(\"AcceptBlock() : out of disk space\");\n     unsigned int nFile = -1;\n     unsigned int nBlockPos = 0;\n-    if (!WriteToDisk(nFile, nBlockPos))\n+    if (!block.WriteToDisk(nFile, nBlockPos))\n         return error(\"AcceptBlock() : WriteToDisk failed\");\n-    if (!AddToBlockIndex(nFile, nBlockPos))\n+    if (!AddToBlockIndex(block, nFile, nBlockPos))\n         return error(\"AcceptBlock() : AddToBlockIndex failed\");\n \n-    // Relay inventory, but don't relay old inventory during initial block download\n-    int nBlockEstimate = Checkpoints::GetTotalBlocksEstimate();\n-    if (hashBestChain == hash)\n-    {\n-        LOCK(cs_vNodes);\n-        BOOST_FOREACH(CNode* pnode, vNodes)\n-            if (nBestHeight > (pnode->nStartingHeight != -1 ? pnode->nStartingHeight - 2000 : nBlockEstimate))\n-                pnode->PushInventory(CInv(MSG_BLOCK, hash));\n-    }\n-\n     return true;\n }\n \n-bool ProcessBlock(CNode* pfrom, CBlock* pblock)\n+bool CBlockStore::EmitBlock(CBlock& block, bool fBlocking, CNode* pNodeDoS)\n {\n     // Check for duplicate\n-    uint256 hash = pblock->GetHash();\n-    if (mapBlockIndex.count(hash))\n-        return error(\"ProcessBlock() : already have block %d %s\", mapBlockIndex[hash]->nHeight, hash.ToString().substr(0,20).c_str());\n-    if (mapOrphanBlocks.count(hash))\n-        return error(\"ProcessBlock() : already have block (orphan) %s\", hash.ToString().substr(0,20).c_str());\n+    uint256 hash = block.GetHash();\n+    {\n+        LOCK(cs_setBlocksSeen);\n+        if (setBlocksSeen.count(hash) > 0)\n+            return error(\"CHub::EmitBlock() : already seen block %s\", hash.ToString().substr(0,20).c_str());\n+    }\n \n     // Preliminary checks\n-    if (!pblock->CheckBlock())\n-        return error(\"ProcessBlock() : CheckBlock FAILED\");\n+    if (!block.CheckBlock())\n+    {\n+        if (block.nDoS && pNodeDoS)\n+            CallbackDoS(pNodeDoS, block.nDoS);\n+        return error(\"CBlockStore::EmitBlock() : CheckBlock FAILED\");\n+    }\n \n-    CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint(mapBlockIndex);\n-    if (pcheckpoint && pblock->hashPrevBlock != hashBestChain)\n+    const CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint();\n+    if (pcheckpoint && block.hashPrevBlock != hashBestChain)\n     {\n         // Extra checks to prevent \"fill up memory by spamming with bogus blocks\"\n-        int64 deltaTime = pblock->GetBlockTime() - pcheckpoint->nTime;\n+        int64 deltaTime = block.GetBlockTime() - pcheckpoint->nTime;\n         if (deltaTime < 0)\n         {\n-            if (pfrom)\n-                pfrom->Misbehaving(100);\n-            return error(\"ProcessBlock() : block with timestamp before last checkpoint\");\n+            if (pNodeDoS) CallbackDoS(pNodeDoS, 100);\n+            return block.DoS(100, error(\"CBlockStore::EmitBlock() : block with timestamp before last checkpoint\"));\n         }\n         CBigNum bnNewBlock;\n-        bnNewBlock.SetCompact(pblock->nBits);\n+        bnNewBlock.SetCompact(block.nBits);\n         CBigNum bnRequired;\n         bnRequired.SetCompact(ComputeMinWork(pcheckpoint->nBits, deltaTime));\n         if (bnNewBlock > bnRequired)\n         {\n-            if (pfrom)\n-                pfrom->Misbehaving(100);\n-            return error(\"ProcessBlock() : block with too little proof-of-work\");\n+            if (pNodeDoS) CallbackDoS(pNodeDoS, 100);\n+            return block.DoS(100, error(\"CBlockStore::EmitBlock() : block with too little proof-of-work\"));\n         }\n     }\n \n+    {\n+        LOCK(cs_setBlocksSeen);\n+        setBlocksSeen.insert(hash);\n+    }\n+\n+    if (fBlocking)\n+        return FinishEmitBlock(block, pNodeDoS);\n+    else\n+        SubmitCallbackFinishEmitBlock(block, pNodeDoS);\n+\n+    return true;\n+}\n+\n+bool CBlockStore::FinishEmitBlock(CBlock& block, CNode* pNodeDoS)\n+{\n+    uint256 hash = block.GetHash();\n+\n+    LOCK(cs_main);\n \n     // If don't already have its previous block, shunt it off to holding area until we get it\n-    if (!mapBlockIndex.count(pblock->hashPrevBlock))\n+    if (!mapBlockIndex.count(block.hashPrevBlock))\n     {\n-        printf(\"ProcessBlock: ORPHAN BLOCK, prev=%s\\n\", pblock->hashPrevBlock.ToString().substr(0,20).c_str());\n-        CBlock* pblock2 = new CBlock(*pblock);\n-        mapOrphanBlocks.insert(make_pair(hash, pblock2));\n-        mapOrphanBlocksByPrev.insert(make_pair(pblock2->hashPrevBlock, pblock2));\n+        printf(\"CBlockStore::FinishEmitBlock: ORPHAN BLOCK, prev=%s\\n\", block.hashPrevBlock.ToString().substr(0,20).c_str());\n+        CBlock* pblock = new CBlock(block);\n+        mapOrphanBlocks.insert(make_pair(hash, pblock));\n+        mapOrphanBlocksByPrev.insert(make_pair(pblock->hashPrevBlock, pblock));\n \n         // Ask this guy to fill in what we're missing\n-        if (pfrom)\n-            pfrom->PushGetBlocks(pindexBest, GetOrphanRoot(pblock2));\n+        CallbackAskForBlocks(GetOrphanRoot(pblock), hash);\n         return true;\n     }\n \n     // Store to disk\n-    if (!pblock->AcceptBlock())\n-        return error(\"ProcessBlock() : AcceptBlock FAILED\");\n+    if (!AcceptBlock(block))\n+    {\n+        if (block.nDoS && pNodeDoS)\n+            CallbackDoS(pNodeDoS, block.nDoS);\n+        return error(\"CBlockStore::FinishEmitBlock() : AcceptBlock FAILED\");\n+    }\n \n     // Recursively process any orphan blocks that depended on this one\n-    vector<uint256> vWorkQueue;\n-    vWorkQueue.push_back(hash);\n-    for (unsigned int i = 0; i < vWorkQueue.size(); i++)\n+    queue<uint256> qWorkQueue;\n+    qWorkQueue.push(hash);\n+    while (!qWorkQueue.empty())\n     {\n-        uint256 hashPrev = vWorkQueue[i];\n+        uint256 hashPrev = qWorkQueue.front();\n+        qWorkQueue.pop();\n         for (multimap<uint256, CBlock*>::iterator mi = mapOrphanBlocksByPrev.lower_bound(hashPrev);\n              mi != mapOrphanBlocksByPrev.upper_bound(hashPrev);\n              ++mi)\n         {\n             CBlock* pblockOrphan = (*mi).second;\n-            if (pblockOrphan->AcceptBlock())\n-                vWorkQueue.push_back(pblockOrphan->GetHash());\n-            mapOrphanBlocks.erase(pblockOrphan->GetHash());\n+            uint256 hashOrphan = pblockOrphan->GetHash();\n+            if (AcceptBlock(*pblockOrphan))\n+                qWorkQueue.push(hashOrphan);\n+            mapOrphanBlocks.erase(hashOrphan);\n             delete pblockOrphan;\n         }\n         mapOrphanBlocksByPrev.erase(hashPrev);\n     }\n \n-    printf(\"ProcessBlock: ACCEPTED\\n\");\n+    printf(\"CBlockStore::FinishEmitBlock: ACCEPTED\\n\");",
      "path": "src/main.cpp",
      "position": 833,
      "original_position": 836,
      "commit_id": "1e2aff6a68b40a31d4833b256245bbbad0ad38c2",
      "original_commit_id": "669a5d4c9e49fb3027ec7110664faa42615698bc",
      "in_reply_to_id": null,
      "user": {
        "login": "rebroad",
        "id": 1530283,
        "node_id": "MDQ6VXNlcjE1MzAyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rebroad",
        "html_url": "https://github.com/rebroad",
        "followers_url": "https://api.github.com/users/rebroad/followers",
        "following_url": "https://api.github.com/users/rebroad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rebroad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rebroad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
        "organizations_url": "https://api.github.com/users/rebroad/orgs",
        "repos_url": "https://api.github.com/users/rebroad/repos",
        "events_url": "https://api.github.com/users/rebroad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rebroad/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not sure why this line is being changed....\n",
      "created_at": "2012-06-14T23:29:55Z",
      "updated_at": "2012-06-28T17:47:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/1233#discussion_r989842",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989842"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/1233"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1855,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989853",
      "pull_request_review_id": null,
      "id": 989853,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk4OTg1Mw==",
      "diff_hunk": "@@ -2551,6 +2696,13 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n                     printf(\"force request: %s\\n\", inv.ToString().c_str());\n             }\n \n+            if (inv.type == MSG_BLOCK)\n+                nBlockCount++;\n+\n+            // Don't set hashLastInvLastBlock if we are getting a hashContinue inv\n+            if (nInv == nLastBlock && nBlockCount > 5)",
      "path": "src/main.cpp",
      "position": 1297,
      "original_position": 1188,
      "commit_id": "1e2aff6a68b40a31d4833b256245bbbad0ad38c2",
      "original_commit_id": "669a5d4c9e49fb3027ec7110664faa42615698bc",
      "in_reply_to_id": null,
      "user": {
        "login": "rebroad",
        "id": 1530283,
        "node_id": "MDQ6VXNlcjE1MzAyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rebroad",
        "html_url": "https://github.com/rebroad",
        "followers_url": "https://api.github.com/users/rebroad/followers",
        "following_url": "https://api.github.com/users/rebroad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rebroad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rebroad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
        "organizations_url": "https://api.github.com/users/rebroad/orgs",
        "repos_url": "https://api.github.com/users/rebroad/repos",
        "events_url": "https://api.github.com/users/rebroad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rebroad/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "why 5?\n",
      "created_at": "2012-06-14T23:31:06Z",
      "updated_at": "2012-06-28T17:47:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/1233#discussion_r989853",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989853"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/1233"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2751,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989857",
      "pull_request_review_id": null,
      "id": 989857,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk4OTg1Nw==",
      "diff_hunk": "@@ -1724,135 +1711,152 @@ bool CBlock::CheckBlock() const\n     return true;\n }\n \n-bool CBlock::AcceptBlock()\n+bool CBlockStore::AcceptBlock(CBlock& block)\n {\n     // Check for duplicate\n-    uint256 hash = GetHash();\n+    uint256 hash = block.GetHash();\n     if (mapBlockIndex.count(hash))\n         return error(\"AcceptBlock() : block already in mapBlockIndex\");\n \n     // Get prev block index\n-    map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hashPrevBlock);\n+    map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(block.hashPrevBlock);\n     if (mi == mapBlockIndex.end())\n-        return DoS(10, error(\"AcceptBlock() : prev block not found\"));\n+        return block.DoS(10, error(\"AcceptBlock() : prev block not found\"));\n     CBlockIndex* pindexPrev = (*mi).second;\n     int nHeight = pindexPrev->nHeight+1;\n \n     // Check proof of work\n-    if (nBits != GetNextWorkRequired(pindexPrev, this))\n-        return DoS(100, error(\"AcceptBlock() : incorrect proof of work\"));\n+    if (block.nBits != GetNextWorkRequired(pindexPrev, &block))\n+        return block.DoS(100, error(\"AcceptBlock() : incorrect proof of work\"));\n \n     // Check timestamp against prev\n-    if (GetBlockTime() <= pindexPrev->GetMedianTimePast())\n+    if (block.GetBlockTime() <= pindexPrev->GetMedianTimePast())\n         return error(\"AcceptBlock() : block's timestamp is too early\");\n \n     // Check that all transactions are finalized\n-    BOOST_FOREACH(const CTransaction& tx, vtx)\n-        if (!tx.IsFinal(nHeight, GetBlockTime()))\n-            return DoS(10, error(\"AcceptBlock() : contains a non-final transaction\"));\n+    BOOST_FOREACH(const CTransaction& tx, block.vtx)\n+        if (!tx.IsFinal(nHeight, block.GetBlockTime()))\n+            return block.DoS(10, error(\"AcceptBlock() : contains a non-final transaction\"));\n \n     // Check that the block chain matches the known block chain up to a checkpoint\n     if (!Checkpoints::CheckBlock(nHeight, hash))\n-        return DoS(100, error(\"AcceptBlock() : rejected by checkpoint lockin at %d\", nHeight));\n+        return block.DoS(100, error(\"AcceptBlock() : rejected by checkpoint lockin at %d\", nHeight));\n \n     // Write block to history file\n-    if (!CheckDiskSpace(::GetSerializeSize(*this, SER_DISK, CLIENT_VERSION)))\n+    if (!CheckDiskSpace(GetSerializeSize(block, SER_DISK, CLIENT_VERSION)))\n         return error(\"AcceptBlock() : out of disk space\");\n     unsigned int nFile = -1;\n     unsigned int nBlockPos = 0;\n-    if (!WriteToDisk(nFile, nBlockPos))\n+    if (!block.WriteToDisk(nFile, nBlockPos))\n         return error(\"AcceptBlock() : WriteToDisk failed\");\n-    if (!AddToBlockIndex(nFile, nBlockPos))\n+    if (!AddToBlockIndex(block, nFile, nBlockPos))\n         return error(\"AcceptBlock() : AddToBlockIndex failed\");\n \n-    // Relay inventory, but don't relay old inventory during initial block download\n-    int nBlockEstimate = Checkpoints::GetTotalBlocksEstimate();\n-    if (hashBestChain == hash)\n-    {\n-        LOCK(cs_vNodes);\n-        BOOST_FOREACH(CNode* pnode, vNodes)\n-            if (nBestHeight > (pnode->nStartingHeight != -1 ? pnode->nStartingHeight - 2000 : nBlockEstimate))\n-                pnode->PushInventory(CInv(MSG_BLOCK, hash));\n-    }\n-\n     return true;\n }\n \n-bool ProcessBlock(CNode* pfrom, CBlock* pblock)\n+bool CBlockStore::EmitBlock(CBlock& block, bool fBlocking, CNode* pNodeDoS)\n {\n     // Check for duplicate\n-    uint256 hash = pblock->GetHash();\n-    if (mapBlockIndex.count(hash))\n-        return error(\"ProcessBlock() : already have block %d %s\", mapBlockIndex[hash]->nHeight, hash.ToString().substr(0,20).c_str());\n-    if (mapOrphanBlocks.count(hash))\n-        return error(\"ProcessBlock() : already have block (orphan) %s\", hash.ToString().substr(0,20).c_str());\n+    uint256 hash = block.GetHash();\n+    {\n+        LOCK(cs_setBlocksSeen);\n+        if (setBlocksSeen.count(hash) > 0)\n+            return error(\"CHub::EmitBlock() : already seen block %s\", hash.ToString().substr(0,20).c_str());\n+    }\n \n     // Preliminary checks\n-    if (!pblock->CheckBlock())\n-        return error(\"ProcessBlock() : CheckBlock FAILED\");\n+    if (!block.CheckBlock())\n+    {\n+        if (block.nDoS && pNodeDoS)\n+            CallbackDoS(pNodeDoS, block.nDoS);\n+        return error(\"CBlockStore::EmitBlock() : CheckBlock FAILED\");\n+    }\n \n-    CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint(mapBlockIndex);\n-    if (pcheckpoint && pblock->hashPrevBlock != hashBestChain)\n+    const CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint();\n+    if (pcheckpoint && block.hashPrevBlock != hashBestChain)\n     {\n         // Extra checks to prevent \"fill up memory by spamming with bogus blocks\"\n-        int64 deltaTime = pblock->GetBlockTime() - pcheckpoint->nTime;\n+        int64 deltaTime = block.GetBlockTime() - pcheckpoint->nTime;\n         if (deltaTime < 0)\n         {\n-            if (pfrom)\n-                pfrom->Misbehaving(100);\n-            return error(\"ProcessBlock() : block with timestamp before last checkpoint\");\n+            if (pNodeDoS) CallbackDoS(pNodeDoS, 100);\n+            return block.DoS(100, error(\"CBlockStore::EmitBlock() : block with timestamp before last checkpoint\"));\n         }\n         CBigNum bnNewBlock;\n-        bnNewBlock.SetCompact(pblock->nBits);\n+        bnNewBlock.SetCompact(block.nBits);\n         CBigNum bnRequired;\n         bnRequired.SetCompact(ComputeMinWork(pcheckpoint->nBits, deltaTime));\n         if (bnNewBlock > bnRequired)\n         {\n-            if (pfrom)\n-                pfrom->Misbehaving(100);\n-            return error(\"ProcessBlock() : block with too little proof-of-work\");\n+            if (pNodeDoS) CallbackDoS(pNodeDoS, 100);\n+            return block.DoS(100, error(\"CBlockStore::EmitBlock() : block with too little proof-of-work\"));\n         }\n     }\n \n+    {\n+        LOCK(cs_setBlocksSeen);\n+        setBlocksSeen.insert(hash);\n+    }\n+\n+    if (fBlocking)\n+        return FinishEmitBlock(block, pNodeDoS);\n+    else\n+        SubmitCallbackFinishEmitBlock(block, pNodeDoS);\n+\n+    return true;\n+}\n+\n+bool CBlockStore::FinishEmitBlock(CBlock& block, CNode* pNodeDoS)\n+{\n+    uint256 hash = block.GetHash();\n+\n+    LOCK(cs_main);\n \n     // If don't already have its previous block, shunt it off to holding area until we get it\n-    if (!mapBlockIndex.count(pblock->hashPrevBlock))\n+    if (!mapBlockIndex.count(block.hashPrevBlock))\n     {\n-        printf(\"ProcessBlock: ORPHAN BLOCK, prev=%s\\n\", pblock->hashPrevBlock.ToString().substr(0,20).c_str());\n-        CBlock* pblock2 = new CBlock(*pblock);\n-        mapOrphanBlocks.insert(make_pair(hash, pblock2));\n-        mapOrphanBlocksByPrev.insert(make_pair(pblock2->hashPrevBlock, pblock2));\n+        printf(\"CBlockStore::FinishEmitBlock: ORPHAN BLOCK, prev=%s\\n\", block.hashPrevBlock.ToString().substr(0,20).c_str());",
      "path": "src/main.cpp",
      "position": 782,
      "original_position": 785,
      "commit_id": "1e2aff6a68b40a31d4833b256245bbbad0ad38c2",
      "original_commit_id": "669a5d4c9e49fb3027ec7110664faa42615698bc",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Because the name of the function it is in, is being renamed.\n",
      "created_at": "2012-06-14T23:31:57Z",
      "updated_at": "2012-06-28T17:47:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/1233#discussion_r989857",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989857"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/1233"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1816,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989870",
      "pull_request_review_id": null,
      "id": 989870,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk4OTg3MA==",
      "diff_hunk": "@@ -2767,14 +2869,24 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         CInv inv(MSG_BLOCK, block.GetHash());\n         pfrom->AddInventoryKnown(inv);\n \n-        if (ProcessBlock(pfrom, &block))\n-            mapAlreadyAskedFor.erase(inv);\n-        if (block.nDoS) pfrom->Misbehaving(block.nDoS);\n+        phub->EmitBlock(block, false, pfrom);\n+\n+        // Though we request duplicates, Satoshi nodes will not return any,\n+        // thanks to setInventoryKnown, however they will still count them\n+        // towards the block size in the inv result, its still better to\n+        // request blocks now, but #973 will optimize this further.\n+        if (pfrom->hashLastInvLastBlock == block.GetHash())",
      "path": "src/main.cpp",
      "position": null,
      "original_position": 1305,
      "commit_id": "1e2aff6a68b40a31d4833b256245bbbad0ad38c2",
      "original_commit_id": "669a5d4c9e49fb3027ec7110664faa42615698bc",
      "in_reply_to_id": null,
      "user": {
        "login": "rebroad",
        "id": 1530283,
        "node_id": "MDQ6VXNlcjE1MzAyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rebroad",
        "html_url": "https://github.com/rebroad",
        "followers_url": "https://api.github.com/users/rebroad/followers",
        "following_url": "https://api.github.com/users/rebroad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rebroad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rebroad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
        "organizations_url": "https://api.github.com/users/rebroad/orgs",
        "repos_url": "https://api.github.com/users/rebroad/repos",
        "events_url": "https://api.github.com/users/rebroad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rebroad/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "won't inv.hash work here?\n",
      "created_at": "2012-06-14T23:33:58Z",
      "updated_at": "2012-06-28T17:47:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/1233#discussion_r989870",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989870"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/1233"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/990052",
      "pull_request_review_id": null,
      "id": 990052,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5MDA1Mg==",
      "diff_hunk": "@@ -1724,135 +1711,152 @@ bool CBlock::CheckBlock() const\n     return true;\n }\n \n-bool CBlock::AcceptBlock()\n+bool CBlockStore::AcceptBlock(CBlock& block)\n {\n     // Check for duplicate\n-    uint256 hash = GetHash();\n+    uint256 hash = block.GetHash();\n     if (mapBlockIndex.count(hash))\n         return error(\"AcceptBlock() : block already in mapBlockIndex\");\n \n     // Get prev block index\n-    map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hashPrevBlock);\n+    map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(block.hashPrevBlock);\n     if (mi == mapBlockIndex.end())\n-        return DoS(10, error(\"AcceptBlock() : prev block not found\"));\n+        return block.DoS(10, error(\"AcceptBlock() : prev block not found\"));\n     CBlockIndex* pindexPrev = (*mi).second;\n     int nHeight = pindexPrev->nHeight+1;\n \n     // Check proof of work\n-    if (nBits != GetNextWorkRequired(pindexPrev, this))\n-        return DoS(100, error(\"AcceptBlock() : incorrect proof of work\"));\n+    if (block.nBits != GetNextWorkRequired(pindexPrev, &block))\n+        return block.DoS(100, error(\"AcceptBlock() : incorrect proof of work\"));\n \n     // Check timestamp against prev\n-    if (GetBlockTime() <= pindexPrev->GetMedianTimePast())\n+    if (block.GetBlockTime() <= pindexPrev->GetMedianTimePast())\n         return error(\"AcceptBlock() : block's timestamp is too early\");\n \n     // Check that all transactions are finalized\n-    BOOST_FOREACH(const CTransaction& tx, vtx)\n-        if (!tx.IsFinal(nHeight, GetBlockTime()))\n-            return DoS(10, error(\"AcceptBlock() : contains a non-final transaction\"));\n+    BOOST_FOREACH(const CTransaction& tx, block.vtx)\n+        if (!tx.IsFinal(nHeight, block.GetBlockTime()))\n+            return block.DoS(10, error(\"AcceptBlock() : contains a non-final transaction\"));\n \n     // Check that the block chain matches the known block chain up to a checkpoint\n     if (!Checkpoints::CheckBlock(nHeight, hash))\n-        return DoS(100, error(\"AcceptBlock() : rejected by checkpoint lockin at %d\", nHeight));\n+        return block.DoS(100, error(\"AcceptBlock() : rejected by checkpoint lockin at %d\", nHeight));\n \n     // Write block to history file\n-    if (!CheckDiskSpace(::GetSerializeSize(*this, SER_DISK, CLIENT_VERSION)))\n+    if (!CheckDiskSpace(GetSerializeSize(block, SER_DISK, CLIENT_VERSION)))\n         return error(\"AcceptBlock() : out of disk space\");\n     unsigned int nFile = -1;\n     unsigned int nBlockPos = 0;\n-    if (!WriteToDisk(nFile, nBlockPos))\n+    if (!block.WriteToDisk(nFile, nBlockPos))\n         return error(\"AcceptBlock() : WriteToDisk failed\");\n-    if (!AddToBlockIndex(nFile, nBlockPos))\n+    if (!AddToBlockIndex(block, nFile, nBlockPos))\n         return error(\"AcceptBlock() : AddToBlockIndex failed\");\n \n-    // Relay inventory, but don't relay old inventory during initial block download\n-    int nBlockEstimate = Checkpoints::GetTotalBlocksEstimate();\n-    if (hashBestChain == hash)\n-    {\n-        LOCK(cs_vNodes);\n-        BOOST_FOREACH(CNode* pnode, vNodes)\n-            if (nBestHeight > (pnode->nStartingHeight != -1 ? pnode->nStartingHeight - 2000 : nBlockEstimate))\n-                pnode->PushInventory(CInv(MSG_BLOCK, hash));\n-    }\n-\n     return true;\n }\n \n-bool ProcessBlock(CNode* pfrom, CBlock* pblock)\n+bool CBlockStore::EmitBlock(CBlock& block, bool fBlocking, CNode* pNodeDoS)\n {\n     // Check for duplicate\n-    uint256 hash = pblock->GetHash();\n-    if (mapBlockIndex.count(hash))\n-        return error(\"ProcessBlock() : already have block %d %s\", mapBlockIndex[hash]->nHeight, hash.ToString().substr(0,20).c_str());\n-    if (mapOrphanBlocks.count(hash))\n-        return error(\"ProcessBlock() : already have block (orphan) %s\", hash.ToString().substr(0,20).c_str());\n+    uint256 hash = block.GetHash();\n+    {\n+        LOCK(cs_setBlocksSeen);\n+        if (setBlocksSeen.count(hash) > 0)\n+            return error(\"CHub::EmitBlock() : already seen block %s\", hash.ToString().substr(0,20).c_str());\n+    }\n \n     // Preliminary checks\n-    if (!pblock->CheckBlock())\n-        return error(\"ProcessBlock() : CheckBlock FAILED\");\n+    if (!block.CheckBlock())\n+    {\n+        if (block.nDoS && pNodeDoS)\n+            CallbackDoS(pNodeDoS, block.nDoS);\n+        return error(\"CBlockStore::EmitBlock() : CheckBlock FAILED\");\n+    }\n \n-    CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint(mapBlockIndex);\n-    if (pcheckpoint && pblock->hashPrevBlock != hashBestChain)\n+    const CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint();\n+    if (pcheckpoint && block.hashPrevBlock != hashBestChain)\n     {\n         // Extra checks to prevent \"fill up memory by spamming with bogus blocks\"\n-        int64 deltaTime = pblock->GetBlockTime() - pcheckpoint->nTime;\n+        int64 deltaTime = block.GetBlockTime() - pcheckpoint->nTime;\n         if (deltaTime < 0)\n         {\n-            if (pfrom)\n-                pfrom->Misbehaving(100);\n-            return error(\"ProcessBlock() : block with timestamp before last checkpoint\");\n+            if (pNodeDoS) CallbackDoS(pNodeDoS, 100);\n+            return block.DoS(100, error(\"CBlockStore::EmitBlock() : block with timestamp before last checkpoint\"));\n         }\n         CBigNum bnNewBlock;\n-        bnNewBlock.SetCompact(pblock->nBits);\n+        bnNewBlock.SetCompact(block.nBits);\n         CBigNum bnRequired;\n         bnRequired.SetCompact(ComputeMinWork(pcheckpoint->nBits, deltaTime));\n         if (bnNewBlock > bnRequired)\n         {\n-            if (pfrom)\n-                pfrom->Misbehaving(100);\n-            return error(\"ProcessBlock() : block with too little proof-of-work\");\n+            if (pNodeDoS) CallbackDoS(pNodeDoS, 100);\n+            return block.DoS(100, error(\"CBlockStore::EmitBlock() : block with too little proof-of-work\"));\n         }\n     }\n \n+    {\n+        LOCK(cs_setBlocksSeen);\n+        setBlocksSeen.insert(hash);\n+    }\n+\n+    if (fBlocking)\n+        return FinishEmitBlock(block, pNodeDoS);\n+    else\n+        SubmitCallbackFinishEmitBlock(block, pNodeDoS);\n+\n+    return true;\n+}\n+\n+bool CBlockStore::FinishEmitBlock(CBlock& block, CNode* pNodeDoS)\n+{\n+    uint256 hash = block.GetHash();\n+\n+    LOCK(cs_main);\n \n     // If don't already have its previous block, shunt it off to holding area until we get it\n-    if (!mapBlockIndex.count(pblock->hashPrevBlock))\n+    if (!mapBlockIndex.count(block.hashPrevBlock))\n     {\n-        printf(\"ProcessBlock: ORPHAN BLOCK, prev=%s\\n\", pblock->hashPrevBlock.ToString().substr(0,20).c_str());\n-        CBlock* pblock2 = new CBlock(*pblock);\n-        mapOrphanBlocks.insert(make_pair(hash, pblock2));\n-        mapOrphanBlocksByPrev.insert(make_pair(pblock2->hashPrevBlock, pblock2));\n+        printf(\"CBlockStore::FinishEmitBlock: ORPHAN BLOCK, prev=%s\\n\", block.hashPrevBlock.ToString().substr(0,20).c_str());\n+        CBlock* pblock = new CBlock(block);\n+        mapOrphanBlocks.insert(make_pair(hash, pblock));\n+        mapOrphanBlocksByPrev.insert(make_pair(pblock->hashPrevBlock, pblock));\n \n         // Ask this guy to fill in what we're missing\n-        if (pfrom)\n-            pfrom->PushGetBlocks(pindexBest, GetOrphanRoot(pblock2));\n+        CallbackAskForBlocks(GetOrphanRoot(pblock), hash);\n         return true;\n     }\n \n     // Store to disk\n-    if (!pblock->AcceptBlock())\n-        return error(\"ProcessBlock() : AcceptBlock FAILED\");\n+    if (!AcceptBlock(block))\n+    {\n+        if (block.nDoS && pNodeDoS)\n+            CallbackDoS(pNodeDoS, block.nDoS);\n+        return error(\"CBlockStore::FinishEmitBlock() : AcceptBlock FAILED\");\n+    }\n \n     // Recursively process any orphan blocks that depended on this one\n-    vector<uint256> vWorkQueue;\n-    vWorkQueue.push_back(hash);\n-    for (unsigned int i = 0; i < vWorkQueue.size(); i++)\n+    queue<uint256> qWorkQueue;\n+    qWorkQueue.push(hash);\n+    while (!qWorkQueue.empty())\n     {\n-        uint256 hashPrev = vWorkQueue[i];\n+        uint256 hashPrev = qWorkQueue.front();\n+        qWorkQueue.pop();\n         for (multimap<uint256, CBlock*>::iterator mi = mapOrphanBlocksByPrev.lower_bound(hashPrev);\n              mi != mapOrphanBlocksByPrev.upper_bound(hashPrev);\n              ++mi)\n         {\n             CBlock* pblockOrphan = (*mi).second;\n-            if (pblockOrphan->AcceptBlock())\n-                vWorkQueue.push_back(pblockOrphan->GetHash());\n-            mapOrphanBlocks.erase(pblockOrphan->GetHash());\n+            uint256 hashOrphan = pblockOrphan->GetHash();\n+            if (AcceptBlock(*pblockOrphan))\n+                qWorkQueue.push(hashOrphan);\n+            mapOrphanBlocks.erase(hashOrphan);\n             delete pblockOrphan;\n         }\n         mapOrphanBlocksByPrev.erase(hashPrev);\n     }\n \n-    printf(\"ProcessBlock: ACCEPTED\\n\");\n+    printf(\"CBlockStore::FinishEmitBlock: ACCEPTED\\n\");",
      "path": "src/main.cpp",
      "position": 833,
      "original_position": 836,
      "commit_id": "1e2aff6a68b40a31d4833b256245bbbad0ad38c2",
      "original_commit_id": "669a5d4c9e49fb3027ec7110664faa42615698bc",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Because the function name has changed.\n",
      "created_at": "2012-06-15T00:01:49Z",
      "updated_at": "2012-06-28T17:47:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/1233#discussion_r990052",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/990052"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/1233"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1855,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/990073",
      "pull_request_review_id": null,
      "id": 990073,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5MDA3Mw==",
      "diff_hunk": "@@ -2551,6 +2696,13 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n                     printf(\"force request: %s\\n\", inv.ToString().c_str());\n             }\n \n+            if (inv.type == MSG_BLOCK)\n+                nBlockCount++;\n+\n+            // Don't set hashLastInvLastBlock if we are getting a hashContinue inv\n+            if (nInv == nLastBlock && nBlockCount > 5)",
      "path": "src/main.cpp",
      "position": 1297,
      "original_position": 1188,
      "commit_id": "1e2aff6a68b40a31d4833b256245bbbad0ad38c2",
      "original_commit_id": "669a5d4c9e49fb3027ec7110664faa42615698bc",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Its to guess if we have another getblocks to go after this one. \nIts MAX_BLOCK_SIZE = 1000000 / default -maxsendbuffer = 10000000 = 10 / 2 = 5\nSee https://github.com/TheBlueMatt/bitcoin/blob/669a5d4c9e49fb3027ec7110664faa42615698bc/src/main.cpp#L2798\n",
      "created_at": "2012-06-15T00:05:22Z",
      "updated_at": "2012-06-28T17:47:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/1233#discussion_r990073",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/990073"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/1233"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2751,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/990080",
      "pull_request_review_id": null,
      "id": 990080,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk5MDA4MA==",
      "diff_hunk": "@@ -2767,14 +2869,24 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         CInv inv(MSG_BLOCK, block.GetHash());\n         pfrom->AddInventoryKnown(inv);\n \n-        if (ProcessBlock(pfrom, &block))\n-            mapAlreadyAskedFor.erase(inv);\n-        if (block.nDoS) pfrom->Misbehaving(block.nDoS);\n+        phub->EmitBlock(block, false, pfrom);\n+\n+        // Though we request duplicates, Satoshi nodes will not return any,\n+        // thanks to setInventoryKnown, however they will still count them\n+        // towards the block size in the inv result, its still better to\n+        // request blocks now, but #973 will optimize this further.\n+        if (pfrom->hashLastInvLastBlock == block.GetHash())",
      "path": "src/main.cpp",
      "position": null,
      "original_position": 1305,
      "commit_id": "1e2aff6a68b40a31d4833b256245bbbad0ad38c2",
      "original_commit_id": "669a5d4c9e49fb3027ec7110664faa42615698bc",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yep, changed.\n",
      "created_at": "2012-06-15T00:06:13Z",
      "updated_at": "2012-06-28T17:47:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/1233#discussion_r990080",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/990080"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/1233"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1087027",
      "pull_request_review_id": null,
      "id": 1087027,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODcwMjc=",
      "diff_hunk": "@@ -1724,135 +1711,152 @@ bool CBlock::CheckBlock() const\n     return true;\n }\n \n-bool CBlock::AcceptBlock()\n+bool CBlockStore::AcceptBlock(CBlock& block)\n {\n     // Check for duplicate\n-    uint256 hash = GetHash();\n+    uint256 hash = block.GetHash();\n     if (mapBlockIndex.count(hash))\n         return error(\"AcceptBlock() : block already in mapBlockIndex\");\n \n     // Get prev block index\n-    map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hashPrevBlock);\n+    map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(block.hashPrevBlock);\n     if (mi == mapBlockIndex.end())\n-        return DoS(10, error(\"AcceptBlock() : prev block not found\"));\n+        return block.DoS(10, error(\"AcceptBlock() : prev block not found\"));\n     CBlockIndex* pindexPrev = (*mi).second;\n     int nHeight = pindexPrev->nHeight+1;\n \n     // Check proof of work\n-    if (nBits != GetNextWorkRequired(pindexPrev, this))\n-        return DoS(100, error(\"AcceptBlock() : incorrect proof of work\"));\n+    if (block.nBits != GetNextWorkRequired(pindexPrev, &block))\n+        return block.DoS(100, error(\"AcceptBlock() : incorrect proof of work\"));\n \n     // Check timestamp against prev\n-    if (GetBlockTime() <= pindexPrev->GetMedianTimePast())\n+    if (block.GetBlockTime() <= pindexPrev->GetMedianTimePast())\n         return error(\"AcceptBlock() : block's timestamp is too early\");\n \n     // Check that all transactions are finalized\n-    BOOST_FOREACH(const CTransaction& tx, vtx)\n-        if (!tx.IsFinal(nHeight, GetBlockTime()))\n-            return DoS(10, error(\"AcceptBlock() : contains a non-final transaction\"));\n+    BOOST_FOREACH(const CTransaction& tx, block.vtx)\n+        if (!tx.IsFinal(nHeight, block.GetBlockTime()))\n+            return block.DoS(10, error(\"AcceptBlock() : contains a non-final transaction\"));\n \n     // Check that the block chain matches the known block chain up to a checkpoint\n     if (!Checkpoints::CheckBlock(nHeight, hash))\n-        return DoS(100, error(\"AcceptBlock() : rejected by checkpoint lockin at %d\", nHeight));\n+        return block.DoS(100, error(\"AcceptBlock() : rejected by checkpoint lockin at %d\", nHeight));\n \n     // Write block to history file\n-    if (!CheckDiskSpace(::GetSerializeSize(*this, SER_DISK, CLIENT_VERSION)))\n+    if (!CheckDiskSpace(GetSerializeSize(block, SER_DISK, CLIENT_VERSION)))\n         return error(\"AcceptBlock() : out of disk space\");\n     unsigned int nFile = -1;\n     unsigned int nBlockPos = 0;\n-    if (!WriteToDisk(nFile, nBlockPos))\n+    if (!block.WriteToDisk(nFile, nBlockPos))\n         return error(\"AcceptBlock() : WriteToDisk failed\");\n-    if (!AddToBlockIndex(nFile, nBlockPos))\n+    if (!AddToBlockIndex(block, nFile, nBlockPos))\n         return error(\"AcceptBlock() : AddToBlockIndex failed\");\n \n-    // Relay inventory, but don't relay old inventory during initial block download\n-    int nBlockEstimate = Checkpoints::GetTotalBlocksEstimate();\n-    if (hashBestChain == hash)\n-    {\n-        LOCK(cs_vNodes);\n-        BOOST_FOREACH(CNode* pnode, vNodes)\n-            if (nBestHeight > (pnode->nStartingHeight != -1 ? pnode->nStartingHeight - 2000 : nBlockEstimate))\n-                pnode->PushInventory(CInv(MSG_BLOCK, hash));\n-    }\n-\n     return true;\n }\n \n-bool ProcessBlock(CNode* pfrom, CBlock* pblock)\n+bool CBlockStore::EmitBlock(CBlock& block, bool fBlocking, CNode* pNodeDoS)\n {\n     // Check for duplicate\n-    uint256 hash = pblock->GetHash();\n-    if (mapBlockIndex.count(hash))\n-        return error(\"ProcessBlock() : already have block %d %s\", mapBlockIndex[hash]->nHeight, hash.ToString().substr(0,20).c_str());\n-    if (mapOrphanBlocks.count(hash))\n-        return error(\"ProcessBlock() : already have block (orphan) %s\", hash.ToString().substr(0,20).c_str());\n+    uint256 hash = block.GetHash();\n+    {\n+        LOCK(cs_setBlocksSeen);\n+        if (setBlocksSeen.count(hash) > 0)\n+            return error(\"CHub::EmitBlock() : already seen block %s\", hash.ToString().substr(0,20).c_str());\n+    }\n \n     // Preliminary checks\n-    if (!pblock->CheckBlock())\n-        return error(\"ProcessBlock() : CheckBlock FAILED\");\n+    if (!block.CheckBlock())\n+    {\n+        if (block.nDoS && pNodeDoS)\n+            CallbackDoS(pNodeDoS, block.nDoS);\n+        return error(\"CBlockStore::EmitBlock() : CheckBlock FAILED\");\n+    }\n \n-    CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint(mapBlockIndex);\n-    if (pcheckpoint && pblock->hashPrevBlock != hashBestChain)\n+    const CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint();\n+    if (pcheckpoint && block.hashPrevBlock != hashBestChain)\n     {\n         // Extra checks to prevent \"fill up memory by spamming with bogus blocks\"\n-        int64 deltaTime = pblock->GetBlockTime() - pcheckpoint->nTime;\n+        int64 deltaTime = block.GetBlockTime() - pcheckpoint->nTime;\n         if (deltaTime < 0)\n         {\n-            if (pfrom)\n-                pfrom->Misbehaving(100);\n-            return error(\"ProcessBlock() : block with timestamp before last checkpoint\");\n+            if (pNodeDoS) CallbackDoS(pNodeDoS, 100);\n+            return block.DoS(100, error(\"CBlockStore::EmitBlock() : block with timestamp before last checkpoint\"));\n         }\n         CBigNum bnNewBlock;\n-        bnNewBlock.SetCompact(pblock->nBits);\n+        bnNewBlock.SetCompact(block.nBits);\n         CBigNum bnRequired;\n         bnRequired.SetCompact(ComputeMinWork(pcheckpoint->nBits, deltaTime));\n         if (bnNewBlock > bnRequired)\n         {\n-            if (pfrom)\n-                pfrom->Misbehaving(100);\n-            return error(\"ProcessBlock() : block with too little proof-of-work\");\n+            if (pNodeDoS) CallbackDoS(pNodeDoS, 100);\n+            return block.DoS(100, error(\"CBlockStore::EmitBlock() : block with too little proof-of-work\"));\n         }\n     }\n \n+    {\n+        LOCK(cs_setBlocksSeen);\n+        setBlocksSeen.insert(hash);\n+    }\n+\n+    if (fBlocking)\n+        return FinishEmitBlock(block, pNodeDoS);\n+    else\n+        SubmitCallbackFinishEmitBlock(block, pNodeDoS);\n+\n+    return true;\n+}\n+\n+bool CBlockStore::FinishEmitBlock(CBlock& block, CNode* pNodeDoS)\n+{\n+    uint256 hash = block.GetHash();\n+\n+    LOCK(cs_main);\n \n     // If don't already have its previous block, shunt it off to holding area until we get it\n-    if (!mapBlockIndex.count(pblock->hashPrevBlock))\n+    if (!mapBlockIndex.count(block.hashPrevBlock))\n     {\n-        printf(\"ProcessBlock: ORPHAN BLOCK, prev=%s\\n\", pblock->hashPrevBlock.ToString().substr(0,20).c_str());\n-        CBlock* pblock2 = new CBlock(*pblock);\n-        mapOrphanBlocks.insert(make_pair(hash, pblock2));\n-        mapOrphanBlocksByPrev.insert(make_pair(pblock2->hashPrevBlock, pblock2));\n+        printf(\"CBlockStore::FinishEmitBlock: ORPHAN BLOCK, prev=%s\\n\", block.hashPrevBlock.ToString().substr(0,20).c_str());\n+        CBlock* pblock = new CBlock(block);\n+        mapOrphanBlocks.insert(make_pair(hash, pblock));\n+        mapOrphanBlocksByPrev.insert(make_pair(pblock->hashPrevBlock, pblock));\n \n         // Ask this guy to fill in what we're missing\n-        if (pfrom)\n-            pfrom->PushGetBlocks(pindexBest, GetOrphanRoot(pblock2));\n+        CallbackAskForBlocks(GetOrphanRoot(pblock), hash);\n         return true;\n     }\n \n     // Store to disk\n-    if (!pblock->AcceptBlock())\n-        return error(\"ProcessBlock() : AcceptBlock FAILED\");\n+    if (!AcceptBlock(block))\n+    {\n+        if (block.nDoS && pNodeDoS)\n+            CallbackDoS(pNodeDoS, block.nDoS);\n+        return error(\"CBlockStore::FinishEmitBlock() : AcceptBlock FAILED\");\n+    }\n \n     // Recursively process any orphan blocks that depended on this one\n-    vector<uint256> vWorkQueue;\n-    vWorkQueue.push_back(hash);\n-    for (unsigned int i = 0; i < vWorkQueue.size(); i++)\n+    queue<uint256> qWorkQueue;\n+    qWorkQueue.push(hash);\n+    while (!qWorkQueue.empty())\n     {\n-        uint256 hashPrev = vWorkQueue[i];\n+        uint256 hashPrev = qWorkQueue.front();\n+        qWorkQueue.pop();\n         for (multimap<uint256, CBlock*>::iterator mi = mapOrphanBlocksByPrev.lower_bound(hashPrev);\n              mi != mapOrphanBlocksByPrev.upper_bound(hashPrev);\n              ++mi)\n         {\n             CBlock* pblockOrphan = (*mi).second;\n-            if (pblockOrphan->AcceptBlock())\n-                vWorkQueue.push_back(pblockOrphan->GetHash());\n-            mapOrphanBlocks.erase(pblockOrphan->GetHash());\n+            uint256 hashOrphan = pblockOrphan->GetHash();\n+            if (AcceptBlock(*pblockOrphan))\n+                qWorkQueue.push(hashOrphan);\n+            mapOrphanBlocks.erase(hashOrphan);\n             delete pblockOrphan;\n         }\n         mapOrphanBlocksByPrev.erase(hashPrev);\n     }\n \n-    printf(\"ProcessBlock: ACCEPTED\\n\");\n+    printf(\"CBlockStore::FinishEmitBlock: ACCEPTED\\n\");",
      "path": "src/main.cpp",
      "position": 833,
      "original_position": 836,
      "commit_id": "1e2aff6a68b40a31d4833b256245bbbad0ad38c2",
      "original_commit_id": "669a5d4c9e49fb3027ec7110664faa42615698bc",
      "in_reply_to_id": null,
      "user": {
        "login": "rebroad",
        "id": 1530283,
        "node_id": "MDQ6VXNlcjE1MzAyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rebroad",
        "html_url": "https://github.com/rebroad",
        "followers_url": "https://api.github.com/users/rebroad/followers",
        "following_url": "https://api.github.com/users/rebroad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rebroad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rebroad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
        "organizations_url": "https://api.github.com/users/rebroad/orgs",
        "repos_url": "https://api.github.com/users/rebroad/repos",
        "events_url": "https://api.github.com/users/rebroad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rebroad/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ProcessBlock is more visually appealing IMHO.\n",
      "created_at": "2012-07-02T19:29:31Z",
      "updated_at": "2012-07-02T19:29:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/1233#discussion_r1087027",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1087027"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/1233"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1855,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1087043",
      "pull_request_review_id": null,
      "id": 1087043,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODcwNDM=",
      "diff_hunk": "@@ -1724,135 +1711,152 @@ bool CBlock::CheckBlock() const\n     return true;\n }\n \n-bool CBlock::AcceptBlock()\n+bool CBlockStore::AcceptBlock(CBlock& block)\n {\n     // Check for duplicate\n-    uint256 hash = GetHash();\n+    uint256 hash = block.GetHash();\n     if (mapBlockIndex.count(hash))\n         return error(\"AcceptBlock() : block already in mapBlockIndex\");\n \n     // Get prev block index\n-    map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hashPrevBlock);\n+    map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(block.hashPrevBlock);\n     if (mi == mapBlockIndex.end())\n-        return DoS(10, error(\"AcceptBlock() : prev block not found\"));\n+        return block.DoS(10, error(\"AcceptBlock() : prev block not found\"));\n     CBlockIndex* pindexPrev = (*mi).second;\n     int nHeight = pindexPrev->nHeight+1;\n \n     // Check proof of work\n-    if (nBits != GetNextWorkRequired(pindexPrev, this))\n-        return DoS(100, error(\"AcceptBlock() : incorrect proof of work\"));\n+    if (block.nBits != GetNextWorkRequired(pindexPrev, &block))\n+        return block.DoS(100, error(\"AcceptBlock() : incorrect proof of work\"));\n \n     // Check timestamp against prev\n-    if (GetBlockTime() <= pindexPrev->GetMedianTimePast())\n+    if (block.GetBlockTime() <= pindexPrev->GetMedianTimePast())\n         return error(\"AcceptBlock() : block's timestamp is too early\");\n \n     // Check that all transactions are finalized\n-    BOOST_FOREACH(const CTransaction& tx, vtx)\n-        if (!tx.IsFinal(nHeight, GetBlockTime()))\n-            return DoS(10, error(\"AcceptBlock() : contains a non-final transaction\"));\n+    BOOST_FOREACH(const CTransaction& tx, block.vtx)\n+        if (!tx.IsFinal(nHeight, block.GetBlockTime()))\n+            return block.DoS(10, error(\"AcceptBlock() : contains a non-final transaction\"));\n \n     // Check that the block chain matches the known block chain up to a checkpoint\n     if (!Checkpoints::CheckBlock(nHeight, hash))\n-        return DoS(100, error(\"AcceptBlock() : rejected by checkpoint lockin at %d\", nHeight));\n+        return block.DoS(100, error(\"AcceptBlock() : rejected by checkpoint lockin at %d\", nHeight));\n \n     // Write block to history file\n-    if (!CheckDiskSpace(::GetSerializeSize(*this, SER_DISK, CLIENT_VERSION)))\n+    if (!CheckDiskSpace(GetSerializeSize(block, SER_DISK, CLIENT_VERSION)))\n         return error(\"AcceptBlock() : out of disk space\");\n     unsigned int nFile = -1;\n     unsigned int nBlockPos = 0;\n-    if (!WriteToDisk(nFile, nBlockPos))\n+    if (!block.WriteToDisk(nFile, nBlockPos))\n         return error(\"AcceptBlock() : WriteToDisk failed\");\n-    if (!AddToBlockIndex(nFile, nBlockPos))\n+    if (!AddToBlockIndex(block, nFile, nBlockPos))\n         return error(\"AcceptBlock() : AddToBlockIndex failed\");\n \n-    // Relay inventory, but don't relay old inventory during initial block download\n-    int nBlockEstimate = Checkpoints::GetTotalBlocksEstimate();\n-    if (hashBestChain == hash)\n-    {\n-        LOCK(cs_vNodes);\n-        BOOST_FOREACH(CNode* pnode, vNodes)\n-            if (nBestHeight > (pnode->nStartingHeight != -1 ? pnode->nStartingHeight - 2000 : nBlockEstimate))\n-                pnode->PushInventory(CInv(MSG_BLOCK, hash));\n-    }\n-\n     return true;\n }\n \n-bool ProcessBlock(CNode* pfrom, CBlock* pblock)\n+bool CBlockStore::EmitBlock(CBlock& block, bool fBlocking, CNode* pNodeDoS)\n {\n     // Check for duplicate\n-    uint256 hash = pblock->GetHash();\n-    if (mapBlockIndex.count(hash))\n-        return error(\"ProcessBlock() : already have block %d %s\", mapBlockIndex[hash]->nHeight, hash.ToString().substr(0,20).c_str());\n-    if (mapOrphanBlocks.count(hash))\n-        return error(\"ProcessBlock() : already have block (orphan) %s\", hash.ToString().substr(0,20).c_str());\n+    uint256 hash = block.GetHash();\n+    {\n+        LOCK(cs_setBlocksSeen);\n+        if (setBlocksSeen.count(hash) > 0)\n+            return error(\"CHub::EmitBlock() : already seen block %s\", hash.ToString().substr(0,20).c_str());\n+    }\n \n     // Preliminary checks\n-    if (!pblock->CheckBlock())\n-        return error(\"ProcessBlock() : CheckBlock FAILED\");\n+    if (!block.CheckBlock())\n+    {\n+        if (block.nDoS && pNodeDoS)\n+            CallbackDoS(pNodeDoS, block.nDoS);\n+        return error(\"CBlockStore::EmitBlock() : CheckBlock FAILED\");\n+    }\n \n-    CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint(mapBlockIndex);\n-    if (pcheckpoint && pblock->hashPrevBlock != hashBestChain)\n+    const CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint();\n+    if (pcheckpoint && block.hashPrevBlock != hashBestChain)\n     {\n         // Extra checks to prevent \"fill up memory by spamming with bogus blocks\"\n-        int64 deltaTime = pblock->GetBlockTime() - pcheckpoint->nTime;\n+        int64 deltaTime = block.GetBlockTime() - pcheckpoint->nTime;\n         if (deltaTime < 0)\n         {\n-            if (pfrom)\n-                pfrom->Misbehaving(100);\n-            return error(\"ProcessBlock() : block with timestamp before last checkpoint\");\n+            if (pNodeDoS) CallbackDoS(pNodeDoS, 100);\n+            return block.DoS(100, error(\"CBlockStore::EmitBlock() : block with timestamp before last checkpoint\"));\n         }\n         CBigNum bnNewBlock;\n-        bnNewBlock.SetCompact(pblock->nBits);\n+        bnNewBlock.SetCompact(block.nBits);\n         CBigNum bnRequired;\n         bnRequired.SetCompact(ComputeMinWork(pcheckpoint->nBits, deltaTime));\n         if (bnNewBlock > bnRequired)\n         {\n-            if (pfrom)\n-                pfrom->Misbehaving(100);\n-            return error(\"ProcessBlock() : block with too little proof-of-work\");\n+            if (pNodeDoS) CallbackDoS(pNodeDoS, 100);\n+            return block.DoS(100, error(\"CBlockStore::EmitBlock() : block with too little proof-of-work\"));\n         }\n     }\n \n+    {\n+        LOCK(cs_setBlocksSeen);\n+        setBlocksSeen.insert(hash);\n+    }\n+\n+    if (fBlocking)\n+        return FinishEmitBlock(block, pNodeDoS);\n+    else\n+        SubmitCallbackFinishEmitBlock(block, pNodeDoS);\n+\n+    return true;\n+}\n+\n+bool CBlockStore::FinishEmitBlock(CBlock& block, CNode* pNodeDoS)\n+{\n+    uint256 hash = block.GetHash();\n+\n+    LOCK(cs_main);\n \n     // If don't already have its previous block, shunt it off to holding area until we get it\n-    if (!mapBlockIndex.count(pblock->hashPrevBlock))\n+    if (!mapBlockIndex.count(block.hashPrevBlock))\n     {\n-        printf(\"ProcessBlock: ORPHAN BLOCK, prev=%s\\n\", pblock->hashPrevBlock.ToString().substr(0,20).c_str());\n-        CBlock* pblock2 = new CBlock(*pblock);\n-        mapOrphanBlocks.insert(make_pair(hash, pblock2));\n-        mapOrphanBlocksByPrev.insert(make_pair(pblock2->hashPrevBlock, pblock2));\n+        printf(\"CBlockStore::FinishEmitBlock: ORPHAN BLOCK, prev=%s\\n\", block.hashPrevBlock.ToString().substr(0,20).c_str());\n+        CBlock* pblock = new CBlock(block);\n+        mapOrphanBlocks.insert(make_pair(hash, pblock));\n+        mapOrphanBlocksByPrev.insert(make_pair(pblock->hashPrevBlock, pblock));\n \n         // Ask this guy to fill in what we're missing\n-        if (pfrom)\n-            pfrom->PushGetBlocks(pindexBest, GetOrphanRoot(pblock2));\n+        CallbackAskForBlocks(GetOrphanRoot(pblock), hash);\n         return true;\n     }\n \n     // Store to disk\n-    if (!pblock->AcceptBlock())\n-        return error(\"ProcessBlock() : AcceptBlock FAILED\");\n+    if (!AcceptBlock(block))\n+    {\n+        if (block.nDoS && pNodeDoS)\n+            CallbackDoS(pNodeDoS, block.nDoS);\n+        return error(\"CBlockStore::FinishEmitBlock() : AcceptBlock FAILED\");\n+    }\n \n     // Recursively process any orphan blocks that depended on this one\n-    vector<uint256> vWorkQueue;\n-    vWorkQueue.push_back(hash);\n-    for (unsigned int i = 0; i < vWorkQueue.size(); i++)\n+    queue<uint256> qWorkQueue;\n+    qWorkQueue.push(hash);\n+    while (!qWorkQueue.empty())\n     {\n-        uint256 hashPrev = vWorkQueue[i];\n+        uint256 hashPrev = qWorkQueue.front();\n+        qWorkQueue.pop();\n         for (multimap<uint256, CBlock*>::iterator mi = mapOrphanBlocksByPrev.lower_bound(hashPrev);\n              mi != mapOrphanBlocksByPrev.upper_bound(hashPrev);\n              ++mi)\n         {\n             CBlock* pblockOrphan = (*mi).second;\n-            if (pblockOrphan->AcceptBlock())\n-                vWorkQueue.push_back(pblockOrphan->GetHash());\n-            mapOrphanBlocks.erase(pblockOrphan->GetHash());\n+            uint256 hashOrphan = pblockOrphan->GetHash();\n+            if (AcceptBlock(*pblockOrphan))\n+                qWorkQueue.push(hashOrphan);\n+            mapOrphanBlocks.erase(hashOrphan);\n             delete pblockOrphan;\n         }\n         mapOrphanBlocksByPrev.erase(hashPrev);\n     }\n \n-    printf(\"ProcessBlock: ACCEPTED\\n\");\n+    printf(\"CBlockStore::FinishEmitBlock: ACCEPTED\\n\");",
      "path": "src/main.cpp",
      "position": 833,
      "original_position": 836,
      "commit_id": "1e2aff6a68b40a31d4833b256245bbbad0ad38c2",
      "original_commit_id": "669a5d4c9e49fb3027ec7110664faa42615698bc",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "But if it were ProcessBlock, it would be unclear and searching to code for where the printf was called would be harder (which is the point of prefixing the print with the function that called it)\n",
      "created_at": "2012-07-02T19:31:32Z",
      "updated_at": "2012-07-02T19:31:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/1233#discussion_r1087043",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1087043"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/1233"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1855,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1087167",
      "pull_request_review_id": null,
      "id": 1087167,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODcxNjc=",
      "diff_hunk": "@@ -2551,6 +2696,13 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n                     printf(\"force request: %s\\n\", inv.ToString().c_str());\n             }\n \n+            if (inv.type == MSG_BLOCK)\n+                nBlockCount++;\n+\n+            // Don't set hashLastInvLastBlock if we are getting a hashContinue inv\n+            if (nInv == nLastBlock && nBlockCount > 5)",
      "path": "src/main.cpp",
      "position": 1297,
      "original_position": 1188,
      "commit_id": "1e2aff6a68b40a31d4833b256245bbbad0ad38c2",
      "original_commit_id": "669a5d4c9e49fb3027ec7110664faa42615698bc",
      "in_reply_to_id": null,
      "user": {
        "login": "rebroad",
        "id": 1530283,
        "node_id": "MDQ6VXNlcjE1MzAyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rebroad",
        "html_url": "https://github.com/rebroad",
        "followers_url": "https://api.github.com/users/rebroad/followers",
        "following_url": "https://api.github.com/users/rebroad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rebroad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rebroad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
        "organizations_url": "https://api.github.com/users/rebroad/orgs",
        "repos_url": "https://api.github.com/users/rebroad/repos",
        "events_url": "https://api.github.com/users/rebroad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rebroad/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm not sure what I'm looking at re the URL above. Why 5 rather than 4 or 6?\n",
      "created_at": "2012-07-02T19:43:21Z",
      "updated_at": "2012-07-02T19:43:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/1233#discussion_r1087167",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1087167"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/1233"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2751,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1087187",
      "pull_request_review_id": null,
      "id": 1087187,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODcxODc=",
      "diff_hunk": "@@ -2551,6 +2696,13 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n                     printf(\"force request: %s\\n\", inv.ToString().c_str());\n             }\n \n+            if (inv.type == MSG_BLOCK)\n+                nBlockCount++;\n+\n+            // Don't set hashLastInvLastBlock if we are getting a hashContinue inv\n+            if (nInv == nLastBlock && nBlockCount > 5)",
      "path": "src/main.cpp",
      "position": 1297,
      "original_position": 1188,
      "commit_id": "1e2aff6a68b40a31d4833b256245bbbad0ad38c2",
      "original_commit_id": "669a5d4c9e49fb3027ec7110664faa42615698bc",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "MAX_BLOCK_SIZE / (default -maxsendbuffer / 2)\nThe link simply explains why its maxsendbuffer/2.\n",
      "created_at": "2012-07-02T19:44:46Z",
      "updated_at": "2012-07-02T19:44:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/1233#discussion_r1087187",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1087187"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/1233"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2751,
      "original_line": null,
      "side": "RIGHT"
    }
  ]
}