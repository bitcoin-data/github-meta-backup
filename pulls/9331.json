{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9331",
    "id": 97577174,
    "node_id": "MDExOlB1bGxSZXF1ZXN0OTc1NzcxNzQ=",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/9331",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/9331.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/9331.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9331",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9331/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9331/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9331/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/d8c0b9f525250565abd5d430a5150e62bf449384",
    "number": 9331,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "[qa] Add test for rescan feature of wallet key import RPCs",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Test only change.\r\n\r\nNew test covers importaddress, importpubkey, importprivkey, and importmulti RPC's.\r\n\r\nThis was originally part of #9137, but I split it off because the test is useful on its own.",
    "labels": [
      {
        "id": 62963516,
        "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
        "name": "Tests",
        "color": "d4c5f9",
        "default": false
      }
    ],
    "active_lock_reason": "resolved",
    "created_at": "2016-12-12T15:48:36Z",
    "updated_at": "2021-09-08T11:42:18Z",
    "closed_at": "2016-12-15T16:07:17Z",
    "mergeable_state": "unknown",
    "merged_at": "2016-12-15T16:07:16Z",
    "merge_commit_sha": "d8c0b9f525250565abd5d430a5150e62bf449384",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "ryanofsky:pr/test-import-rescan",
      "ref": "pr/test-import-rescan",
      "sha": "d8c0b9f525250565abd5d430a5150e62bf449384",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 69901633,
        "node_id": "MDEwOlJlcG9zaXRvcnk2OTkwMTYzMw==",
        "name": "bitcoin",
        "full_name": "ryanofsky/bitcoin",
        "owner": {
          "login": "ryanofsky",
          "id": 7133040,
          "node_id": "MDQ6VXNlcjcxMzMwNDA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ryanofsky",
          "html_url": "https://github.com/ryanofsky",
          "followers_url": "https://api.github.com/users/ryanofsky/followers",
          "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
          "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
          "repos_url": "https://api.github.com/users/ryanofsky/repos",
          "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/ryanofsky/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/ryanofsky/bitcoin",
        "archive_url": "https://api.github.com/repos/ryanofsky/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/ryanofsky/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/ryanofsky/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/ryanofsky/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/ryanofsky/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/ryanofsky/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/ryanofsky/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/ryanofsky/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/ryanofsky/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/ryanofsky/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/ryanofsky/bitcoin/events",
        "forks_url": "https://api.github.com/repos/ryanofsky/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/ryanofsky/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/ryanofsky/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/ryanofsky/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/ryanofsky/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/ryanofsky/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/ryanofsky/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/ryanofsky/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/ryanofsky/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/ryanofsky/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/ryanofsky/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/ryanofsky/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/ryanofsky/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:ryanofsky/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/ryanofsky/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/ryanofsky/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/ryanofsky/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/ryanofsky/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/ryanofsky/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/ryanofsky/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/ryanofsky/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/ryanofsky/bitcoin/hooks",
        "svn_url": "https://github.com/ryanofsky/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 6,
        "stargazers_count": 8,
        "watchers_count": 8,
        "size": 229522,
        "default_branch": "master",
        "open_issues_count": 1,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T09:40:24Z",
        "created_at": "2016-10-03T19:05:43Z",
        "updated_at": "2023-05-05T12:10:19Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "b83264d9c7a8ddb79f64bd9540caddc8632ef31f",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69818,
        "watchers_count": 69818,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T22:42:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-06T22:16:48Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9331"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 156,
    "deletions": 0,
    "changed_files": 2,
    "commits": 1,
    "review_comments": 10,
    "comments": 1
  },
  "events": [
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOGMwYjlmNTI1MjUwNTY1YWJkNWQ0MzBhNTE1MGU2MmJmNDQ5Mzg0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d8c0b9f525250565abd5d430a5150e62bf449384",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d8c0b9f525250565abd5d430a5150e62bf449384",
      "tree": {
        "sha": "e762bff89f2b01931a5b5a5cafb06ccce9c7d7bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e762bff89f2b01931a5b5a5cafb06ccce9c7d7bc"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/76fcd9d5034143a5b041766552670d19f926097d",
          "sha": "76fcd9d5034143a5b041766552670d19f926097d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/76fcd9d5034143a5b041766552670d19f926097d"
        }
      ],
      "message": "[qa] Add test for rescan feature of wallet key import RPCs\n\nCovers importaddress, importpubkey, importprivkey, and importmulti RPCs.",
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2016-12-12T15:18:11Z"
      },
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2016-12-12T15:18:11Z"
      },
      "sha": "d8c0b9f525250565abd5d430a5150e62bf449384"
    },
    {
      "event": "labeled",
      "id": 891419622,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDg5MTQxOTYyMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/891419622",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-12-13T03:34:52Z",
      "label": {
        "name": "Tests",
        "color": "d4c5f9"
      }
    },
    {
      "event": "reviewed",
      "id": 12645206,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTI2NDUyMDY=",
      "url": null,
      "actor": null,
      "commit_id": "6bbbe2c52fa4ac31117fcfe051911420538d6c99",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9331#pullrequestreview-12645206",
      "submitted_at": "2016-12-13T10:27:30Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9331"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 891926682,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50ODkxOTI2Njgy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/891926682",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-12-13T12:29:12Z"
    },
    {
      "event": "reviewed",
      "id": 13119819,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTMxMTk4MTk=",
      "url": null,
      "actor": null,
      "commit_id": "7e1d6fd43659e7cbfce2efd5433d79ef0fe687ec",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "utACK 7e1d6fd43659e7cbfce2efd5433d79ef0fe687ec\r\n\r\n(Sorry for sending nits your way a second time, feel free to not fix them; They are mostly not mandatory for the test to function.)",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9331#pullrequestreview-13119819",
      "submitted_at": "2016-12-15T14:08:07Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9331"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 895370575,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50ODk1MzcwNTc1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/895370575",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-12-15T15:23:57Z"
    },
    {
      "event": "commented",
      "id": 267366118,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI2NzM2NjExOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/267366118",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-12-15T16:05:31Z",
      "updated_at": "2016-12-15T16:05:31Z",
      "author_association": "MEMBER",
      "body": "Thanks, LGTM \r\nutACK d8c0b9f",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9331#issuecomment-267366118",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9331"
    },
    {
      "event": "merged",
      "id": 895441854,
      "node_id": "MDExOk1lcmdlZEV2ZW50ODk1NDQxODU0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/895441854",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "d8c0b9f525250565abd5d430a5150e62bf449384",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8c0b9f525250565abd5d430a5150e62bf449384",
      "created_at": "2016-12-15T16:07:16Z"
    },
    {
      "event": "closed",
      "id": 895441855,
      "node_id": "MDExOkNsb3NlZEV2ZW50ODk1NDQxODU1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/895441855",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-12-15T16:07:17Z"
    },
    {
      "event": "referenced",
      "id": 895441880,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDg5NTQ0MTg4MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/895441880",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "c6fd923886a3eee01d9e226544b024940038c5e4",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6fd923886a3eee01d9e226544b024940038c5e4",
      "created_at": "2016-12-15T16:07:17Z"
    },
    {
      "event": "referenced",
      "id": 1429829548,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDE0Mjk4Mjk1NDg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1429829548",
      "actor": {
        "login": "codablock",
        "id": 1884269,
        "node_id": "MDQ6VXNlcjE4ODQyNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1884269?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/codablock",
        "html_url": "https://github.com/codablock",
        "followers_url": "https://api.github.com/users/codablock/followers",
        "following_url": "https://api.github.com/users/codablock/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/codablock/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/codablock/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/codablock/subscriptions",
        "organizations_url": "https://api.github.com/users/codablock/orgs",
        "repos_url": "https://api.github.com/users/codablock/repos",
        "events_url": "https://api.github.com/users/codablock/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/codablock/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "bf3cc9ff90731de97a81cc902e7dfd797706f635",
      "commit_url": "https://api.github.com/repos/codablock/dash/commits/bf3cc9ff90731de97a81cc902e7dfd797706f635",
      "created_at": "2018-01-18T07:37:38Z"
    },
    {
      "event": "referenced",
      "id": 2056235342,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDIwNTYyMzUzNDI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2056235342",
      "actor": {
        "login": "andvgal",
        "id": 6080632,
        "node_id": "MDQ6VXNlcjYwODA2MzI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6080632?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andvgal",
        "html_url": "https://github.com/andvgal",
        "followers_url": "https://api.github.com/users/andvgal/followers",
        "following_url": "https://api.github.com/users/andvgal/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andvgal/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andvgal/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andvgal/subscriptions",
        "organizations_url": "https://api.github.com/users/andvgal/orgs",
        "repos_url": "https://api.github.com/users/andvgal/repos",
        "events_url": "https://api.github.com/users/andvgal/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andvgal/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "d807b1283e09452a0724a527d51f43b5c3a0a266",
      "commit_url": "https://api.github.com/repos/energicryptocurrency/gen2-energi/commits/d807b1283e09452a0724a527d51f43b5c3a0a266",
      "created_at": "2019-01-06T10:40:16Z"
    },
    {
      "event": "referenced",
      "id": 2165033960,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDIxNjUwMzM5NjA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2165033960",
      "actor": {
        "login": "CryptoCentric",
        "id": 38781794,
        "node_id": "MDQ6VXNlcjM4NzgxNzk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/38781794?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/CryptoCentric",
        "html_url": "https://github.com/CryptoCentric",
        "followers_url": "https://api.github.com/users/CryptoCentric/followers",
        "following_url": "https://api.github.com/users/CryptoCentric/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/CryptoCentric/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/CryptoCentric/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/CryptoCentric/subscriptions",
        "organizations_url": "https://api.github.com/users/CryptoCentric/orgs",
        "repos_url": "https://api.github.com/users/CryptoCentric/repos",
        "events_url": "https://api.github.com/users/CryptoCentric/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/CryptoCentric/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "04fda4b670b7d1181b8c2cb2214b966a33751d8f",
      "commit_url": "https://api.github.com/repos/absolute-community/absolute/commits/04fda4b670b7d1181b8c2cb2214b966a33751d8f",
      "created_at": "2019-02-26T14:34:15Z"
    },
    {
      "event": "locked",
      "id": 5271745914,
      "node_id": "LOE_lADOABII584Ln5bkzwAAAAE6OHV6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5271745914",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-08T11:42:18Z",
      "lock_reason": "resolved"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92137093",
      "pull_request_review_id": 12645206,
      "id": 92137093,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkyMTM3MDkz",
      "diff_hunk": "@@ -0,0 +1,163 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *",
      "path": "qa/rpc-tests/import-rescan.py",
      "position": null,
      "original_position": 7,
      "commit_id": "d8c0b9f525250565abd5d430a5150e62bf449384",
      "original_commit_id": "6bbbe2c52fa4ac31117fcfe051911420538d6c99",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: no wildcard import here.",
      "created_at": "2016-12-13T10:20:26Z",
      "updated_at": "2016-12-15T15:23:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9331#discussion_r92137093",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92137093"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9331"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92158698",
      "pull_request_review_id": 12667404,
      "id": 92158698,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkyMTU4Njk4",
      "diff_hunk": "@@ -0,0 +1,163 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *",
      "path": "qa/rpc-tests/import-rescan.py",
      "position": null,
      "original_position": 7,
      "commit_id": "d8c0b9f525250565abd5d430a5150e62bf449384",
      "original_commit_id": "6bbbe2c52fa4ac31117fcfe051911420538d6c99",
      "in_reply_to_id": 92137093,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removed",
      "created_at": "2016-12-13T12:29:45Z",
      "updated_at": "2016-12-15T15:23:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9331#discussion_r92158698",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92158698"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9331"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92601633",
      "pull_request_review_id": 13119819,
      "id": 92601633,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkyNjAxNjMz",
      "diff_hunk": "@@ -0,0 +1,164 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (start_nodes, connect_nodes, sync_blocks,\n+                                 assert_equal, Decimal)",
      "path": "qa/rpc-tests/import-rescan.py",
      "position": null,
      "original_position": 8,
      "commit_id": "d8c0b9f525250565abd5d430a5150e62bf449384",
      "original_commit_id": "7e1d6fd43659e7cbfce2efd5433d79ef0fe687ec",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```py\r\nfrom decimal import Decimal\r\n```\r\n\r\nwould be cleaner",
      "created_at": "2016-12-15T12:43:05Z",
      "updated_at": "2016-12-15T15:23:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9331#discussion_r92601633",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92601633"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9331"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92611343",
      "pull_request_review_id": 13119819,
      "id": 92611343,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkyNjExMzQz",
      "diff_hunk": "@@ -0,0 +1,164 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (start_nodes, connect_nodes, sync_blocks,\n+                                 assert_equal, Decimal)\n+\n+import collections\n+import enum\n+import itertools\n+import functools\n+\n+Call = enum.Enum(\"Call\", \"single multi\")\n+Data = enum.Enum(\"Data\", \"address pub priv\")\n+ImportNode = collections.namedtuple(\"ImportNode\", \"rescan\")\n+\n+\n+def call_import_rpc(call, data, address, scriptPubKey, pubkey, key, label,\n+                    node, rescan):\n+    \"\"\"Helper that calls a wallet import RPC on a bitcoin node.\"\"\"\n+    watchonly = data != Data.priv\n+    if call == Call.single:\n+        if data == Data.address:\n+            response = node.importaddress(address, label, rescan)\n+        elif data == Data.pub:\n+            response = node.importpubkey(pubkey, label, rescan)\n+        elif data == Data.priv:\n+            response = node.importprivkey(key, label, rescan)\n+        assert_equal(response, None)\n+    elif call == Call.multi:\n+        response = node.importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": address\n+            },\n+            \"pubkeys\": [pubkey] if data == Data.pub else [],\n+            \"keys\": [key] if data == Data.priv else [],\n+            \"label\": label,\n+            \"watchonly\": watchonly\n+        }], {\"rescan\": rescan})\n+        assert_equal(response, [{\"success\": True}])\n+    return watchonly\n+\n+\n+# List of RPCs that import a wallet key or address in various ways.\n+IMPORT_RPCS = [\n+    functools.partial(call_import_rpc, call, data)\n+    for call, data in itertools.product(Call, Data)\n+]\n+\n+# List of bitcoind nodes that will import keys.\n+IMPORT_NODES = [\n+    ImportNode(rescan=True),\n+    ImportNode(rescan=False),\n+]\n+\n+\n+class ImportRescanTest(BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 1 + len(IMPORT_NODES)\n+\n+    def setup_network(self):\n+        extra_args = [[\"-debug=1\"] for _ in range(self.num_nodes)]\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir,\n+                                 extra_args)\n+        for i in range(1, self.num_nodes):\n+            connect_nodes(self.nodes[i], 0)\n+\n+    def run_test(self):\n+        # Create one transaction on node 0 with a unique amount and label for\n+        # each possible type of wallet import RPC.\n+        import_rpc_variants = []\n+        for i, import_rpc in enumerate(IMPORT_RPCS):\n+            label = \"label{}\".format(i)\n+            addr = self.nodes[0].validateaddress(self.nodes[0].getnewaddress(\n+                label))",
      "path": "qa/rpc-tests/import-rescan.py",
      "position": null,
      "original_position": 78,
      "commit_id": "d8c0b9f525250565abd5d430a5150e62bf449384",
      "original_commit_id": "7e1d6fd43659e7cbfce2efd5433d79ef0fe687ec",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You don't have to be too strict about not exceeding 80 chars. I think 120 is preferred, but there does not seem to be a strict rule, so meh.",
      "created_at": "2016-12-15T13:48:31Z",
      "updated_at": "2016-12-15T15:23:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9331#discussion_r92611343",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92611343"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9331"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92611767",
      "pull_request_review_id": 13119819,
      "id": 92611767,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkyNjExNzY3",
      "diff_hunk": "@@ -0,0 +1,164 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (start_nodes, connect_nodes, sync_blocks,\n+                                 assert_equal, Decimal)\n+\n+import collections\n+import enum\n+import itertools\n+import functools\n+\n+Call = enum.Enum(\"Call\", \"single multi\")\n+Data = enum.Enum(\"Data\", \"address pub priv\")\n+ImportNode = collections.namedtuple(\"ImportNode\", \"rescan\")\n+\n+\n+def call_import_rpc(call, data, address, scriptPubKey, pubkey, key, label,\n+                    node, rescan):\n+    \"\"\"Helper that calls a wallet import RPC on a bitcoin node.\"\"\"\n+    watchonly = data != Data.priv\n+    if call == Call.single:\n+        if data == Data.address:\n+            response = node.importaddress(address, label, rescan)\n+        elif data == Data.pub:\n+            response = node.importpubkey(pubkey, label, rescan)\n+        elif data == Data.priv:\n+            response = node.importprivkey(key, label, rescan)\n+        assert_equal(response, None)\n+    elif call == Call.multi:\n+        response = node.importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": address\n+            },\n+            \"pubkeys\": [pubkey] if data == Data.pub else [],\n+            \"keys\": [key] if data == Data.priv else [],\n+            \"label\": label,\n+            \"watchonly\": watchonly\n+        }], {\"rescan\": rescan})\n+        assert_equal(response, [{\"success\": True}])\n+    return watchonly\n+\n+\n+# List of RPCs that import a wallet key or address in various ways.\n+IMPORT_RPCS = [\n+    functools.partial(call_import_rpc, call, data)\n+    for call, data in itertools.product(Call, Data)\n+]\n+\n+# List of bitcoind nodes that will import keys.\n+IMPORT_NODES = [\n+    ImportNode(rescan=True),\n+    ImportNode(rescan=False),\n+]\n+\n+\n+class ImportRescanTest(BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 1 + len(IMPORT_NODES)\n+\n+    def setup_network(self):\n+        extra_args = [[\"-debug=1\"] for _ in range(self.num_nodes)]\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir,\n+                                 extra_args)\n+        for i in range(1, self.num_nodes):\n+            connect_nodes(self.nodes[i], 0)\n+\n+    def run_test(self):\n+        # Create one transaction on node 0 with a unique amount and label for\n+        # each possible type of wallet import RPC.\n+        import_rpc_variants = []\n+        for i, import_rpc in enumerate(IMPORT_RPCS):\n+            label = \"label{}\".format(i)\n+            addr = self.nodes[0].validateaddress(self.nodes[0].getnewaddress(\n+                label))\n+            key = self.nodes[0].dumpprivkey(addr[\"address\"])\n+            amount = 24.9375 - i * .0625\n+            txid = self.nodes[0].sendtoaddress(addr[\"address\"], amount)\n+            import_rpc = functools.partial(import_rpc, addr[\"address\"],\n+                                           addr[\"scriptPubKey\"],\n+                                           addr[\"pubkey\"], key, label)\n+            import_rpc_variants.append((import_rpc, label, amount, txid, addr))\n+\n+        self.nodes[0].generate(1)\n+        sync_blocks(self.nodes)\n+\n+        # For each importing node and variation of wallet import RPC, invoke\n+        # the RPC and check the results from getbalance and listtransactions.\n+        for node, import_node in zip(self.nodes[1:], IMPORT_NODES):\n+            for import_rpc, label, amount, txid, addr in import_rpc_variants:\n+                watchonly = import_rpc(node, import_node.rescan)\n+\n+                balance = node.getbalance(label, 0, True)\n+                if import_node.rescan:\n+                    assert_equal(balance, amount)\n+                else:\n+                    assert_equal(balance, 0)\n+\n+                txs = node.listtransactions(label, 10000, 0, True)\n+                if import_node.rescan:\n+                    assert_equal(len(txs), 1)\n+                    assert_equal(txs[0][\"account\"], label)\n+                    assert_equal(txs[0][\"address\"], addr[\"address\"])\n+                    assert_equal(txs[0][\"amount\"], amount)\n+                    assert_equal(txs[0][\"category\"], \"receive\")\n+                    assert_equal(txs[0][\"label\"], label)\n+                    assert_equal(txs[0][\"txid\"], txid)\n+                    assert_equal(txs[0][\"confirmations\"], 1)\n+                    assert_equal(\"trusted\" not in txs[0], True)\n+                    if watchonly:\n+                        assert_equal(txs[0][\"involvesWatchonly\"], True)\n+                    else:\n+                        assert_equal(\"involvesWatchonly\" not in txs[0], True)\n+                else:\n+                    assert_equal(len(txs), 0)\n+\n+        # Create spends for all the imported addresses.\n+        spend_txids = []\n+        for import_rpc, label, amount, txid, addr in import_rpc_variants:\n+            raw_tx = self.nodes[0].getrawtransaction(txid)\n+            decoded_tx = self.nodes[0].decoderawtransaction(raw_tx)\n+            input_vout = next(\n+                out[\"n\"] for out in decoded_tx[\"vout\"]\n+                if out[\"scriptPubKey\"][\"addresses\"] == [addr[\"address\"]])\n+            fee = self.nodes[0].getnetworkinfo()[\"relayfee\"]",
      "path": "qa/rpc-tests/import-rescan.py",
      "position": null,
      "original_position": 128,
      "commit_id": "d8c0b9f525250565abd5d430a5150e62bf449384",
      "original_commit_id": "7e1d6fd43659e7cbfce2efd5433d79ef0fe687ec",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This probably does not change during the loop, so maybe cache it?",
      "created_at": "2016-12-15T13:50:59Z",
      "updated_at": "2016-12-15T15:23:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9331#discussion_r92611767",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92611767"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9331"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92612226",
      "pull_request_review_id": 13119819,
      "id": 92612226,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkyNjEyMjI2",
      "diff_hunk": "@@ -0,0 +1,164 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (start_nodes, connect_nodes, sync_blocks,\n+                                 assert_equal, Decimal)\n+\n+import collections\n+import enum\n+import itertools\n+import functools\n+\n+Call = enum.Enum(\"Call\", \"single multi\")\n+Data = enum.Enum(\"Data\", \"address pub priv\")\n+ImportNode = collections.namedtuple(\"ImportNode\", \"rescan\")\n+\n+\n+def call_import_rpc(call, data, address, scriptPubKey, pubkey, key, label,\n+                    node, rescan):\n+    \"\"\"Helper that calls a wallet import RPC on a bitcoin node.\"\"\"\n+    watchonly = data != Data.priv\n+    if call == Call.single:\n+        if data == Data.address:\n+            response = node.importaddress(address, label, rescan)\n+        elif data == Data.pub:\n+            response = node.importpubkey(pubkey, label, rescan)\n+        elif data == Data.priv:\n+            response = node.importprivkey(key, label, rescan)\n+        assert_equal(response, None)\n+    elif call == Call.multi:\n+        response = node.importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": address\n+            },\n+            \"pubkeys\": [pubkey] if data == Data.pub else [],\n+            \"keys\": [key] if data == Data.priv else [],\n+            \"label\": label,\n+            \"watchonly\": watchonly\n+        }], {\"rescan\": rescan})\n+        assert_equal(response, [{\"success\": True}])\n+    return watchonly\n+\n+\n+# List of RPCs that import a wallet key or address in various ways.\n+IMPORT_RPCS = [\n+    functools.partial(call_import_rpc, call, data)\n+    for call, data in itertools.product(Call, Data)\n+]\n+\n+# List of bitcoind nodes that will import keys.\n+IMPORT_NODES = [\n+    ImportNode(rescan=True),\n+    ImportNode(rescan=False),\n+]\n+\n+\n+class ImportRescanTest(BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 1 + len(IMPORT_NODES)\n+\n+    def setup_network(self):\n+        extra_args = [[\"-debug=1\"] for _ in range(self.num_nodes)]\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir,\n+                                 extra_args)\n+        for i in range(1, self.num_nodes):\n+            connect_nodes(self.nodes[i], 0)\n+\n+    def run_test(self):\n+        # Create one transaction on node 0 with a unique amount and label for\n+        # each possible type of wallet import RPC.\n+        import_rpc_variants = []\n+        for i, import_rpc in enumerate(IMPORT_RPCS):\n+            label = \"label{}\".format(i)\n+            addr = self.nodes[0].validateaddress(self.nodes[0].getnewaddress(\n+                label))\n+            key = self.nodes[0].dumpprivkey(addr[\"address\"])\n+            amount = 24.9375 - i * .0625\n+            txid = self.nodes[0].sendtoaddress(addr[\"address\"], amount)\n+            import_rpc = functools.partial(import_rpc, addr[\"address\"],\n+                                           addr[\"scriptPubKey\"],\n+                                           addr[\"pubkey\"], key, label)\n+            import_rpc_variants.append((import_rpc, label, amount, txid, addr))\n+\n+        self.nodes[0].generate(1)\n+        sync_blocks(self.nodes)\n+\n+        # For each importing node and variation of wallet import RPC, invoke\n+        # the RPC and check the results from getbalance and listtransactions.\n+        for node, import_node in zip(self.nodes[1:], IMPORT_NODES):\n+            for import_rpc, label, amount, txid, addr in import_rpc_variants:\n+                watchonly = import_rpc(node, import_node.rescan)\n+\n+                balance = node.getbalance(label, 0, True)\n+                if import_node.rescan:\n+                    assert_equal(balance, amount)\n+                else:\n+                    assert_equal(balance, 0)\n+\n+                txs = node.listtransactions(label, 10000, 0, True)\n+                if import_node.rescan:\n+                    assert_equal(len(txs), 1)\n+                    assert_equal(txs[0][\"account\"], label)\n+                    assert_equal(txs[0][\"address\"], addr[\"address\"])\n+                    assert_equal(txs[0][\"amount\"], amount)\n+                    assert_equal(txs[0][\"category\"], \"receive\")\n+                    assert_equal(txs[0][\"label\"], label)\n+                    assert_equal(txs[0][\"txid\"], txid)\n+                    assert_equal(txs[0][\"confirmations\"], 1)\n+                    assert_equal(\"trusted\" not in txs[0], True)\n+                    if watchonly:\n+                        assert_equal(txs[0][\"involvesWatchonly\"], True)\n+                    else:\n+                        assert_equal(\"involvesWatchonly\" not in txs[0], True)\n+                else:\n+                    assert_equal(len(txs), 0)\n+\n+        # Create spends for all the imported addresses.\n+        spend_txids = []\n+        for import_rpc, label, amount, txid, addr in import_rpc_variants:\n+            raw_tx = self.nodes[0].getrawtransaction(txid)\n+            decoded_tx = self.nodes[0].decoderawtransaction(raw_tx)\n+            input_vout = next(\n+                out[\"n\"] for out in decoded_tx[\"vout\"]\n+                if out[\"scriptPubKey\"][\"addresses\"] == [addr[\"address\"]])\n+            fee = self.nodes[0].getnetworkinfo()[\"relayfee\"]\n+            inputs = [{\"txid\": txid, \"vout\": input_vout}]\n+            outputs = {self.nodes[0].getnewaddress(): Decimal(amount) - fee}\n+            raw_spend_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n+            signed_spend_tx = self.nodes[0].signrawtransaction(raw_spend_tx)\n+            spend_txid = self.nodes[0].sendrawtransaction(signed_spend_tx[\n+                \"hex\"])\n+            spend_txids.append(spend_txid)\n+\n+        self.nodes[0].generate(1)\n+        sync_blocks(self.nodes)",
      "path": "qa/rpc-tests/import-rescan.py",
      "position": null,
      "original_position": 138,
      "commit_id": "d8c0b9f525250565abd5d430a5150e62bf449384",
      "original_commit_id": "7e1d6fd43659e7cbfce2efd5433d79ef0fe687ec",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Assert that the transaction pool is empty, after each generate?",
      "created_at": "2016-12-15T13:53:45Z",
      "updated_at": "2016-12-15T15:23:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9331#discussion_r92612226",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92612226"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9331"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92630886",
      "pull_request_review_id": 13150369,
      "id": 92630886,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkyNjMwODg2",
      "diff_hunk": "@@ -0,0 +1,164 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (start_nodes, connect_nodes, sync_blocks,\n+                                 assert_equal, Decimal)",
      "path": "qa/rpc-tests/import-rescan.py",
      "position": null,
      "original_position": 8,
      "commit_id": "d8c0b9f525250565abd5d430a5150e62bf449384",
      "original_commit_id": "7e1d6fd43659e7cbfce2efd5433d79ef0fe687ec",
      "in_reply_to_id": 92601633,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2016-12-15T15:28:12Z",
      "updated_at": "2016-12-15T15:28:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9331#discussion_r92630886",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92630886"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9331"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92630896",
      "pull_request_review_id": 13150380,
      "id": 92630896,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkyNjMwODk2",
      "diff_hunk": "@@ -0,0 +1,164 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (start_nodes, connect_nodes, sync_blocks,\n+                                 assert_equal, Decimal)\n+\n+import collections\n+import enum\n+import itertools\n+import functools\n+\n+Call = enum.Enum(\"Call\", \"single multi\")\n+Data = enum.Enum(\"Data\", \"address pub priv\")\n+ImportNode = collections.namedtuple(\"ImportNode\", \"rescan\")\n+\n+\n+def call_import_rpc(call, data, address, scriptPubKey, pubkey, key, label,\n+                    node, rescan):\n+    \"\"\"Helper that calls a wallet import RPC on a bitcoin node.\"\"\"\n+    watchonly = data != Data.priv\n+    if call == Call.single:\n+        if data == Data.address:\n+            response = node.importaddress(address, label, rescan)\n+        elif data == Data.pub:\n+            response = node.importpubkey(pubkey, label, rescan)\n+        elif data == Data.priv:\n+            response = node.importprivkey(key, label, rescan)\n+        assert_equal(response, None)\n+    elif call == Call.multi:\n+        response = node.importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": address\n+            },\n+            \"pubkeys\": [pubkey] if data == Data.pub else [],\n+            \"keys\": [key] if data == Data.priv else [],\n+            \"label\": label,\n+            \"watchonly\": watchonly\n+        }], {\"rescan\": rescan})\n+        assert_equal(response, [{\"success\": True}])\n+    return watchonly\n+\n+\n+# List of RPCs that import a wallet key or address in various ways.\n+IMPORT_RPCS = [\n+    functools.partial(call_import_rpc, call, data)\n+    for call, data in itertools.product(Call, Data)\n+]\n+\n+# List of bitcoind nodes that will import keys.\n+IMPORT_NODES = [\n+    ImportNode(rescan=True),\n+    ImportNode(rescan=False),\n+]\n+\n+\n+class ImportRescanTest(BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 1 + len(IMPORT_NODES)\n+\n+    def setup_network(self):\n+        extra_args = [[\"-debug=1\"] for _ in range(self.num_nodes)]\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir,\n+                                 extra_args)\n+        for i in range(1, self.num_nodes):\n+            connect_nodes(self.nodes[i], 0)\n+\n+    def run_test(self):\n+        # Create one transaction on node 0 with a unique amount and label for\n+        # each possible type of wallet import RPC.\n+        import_rpc_variants = []\n+        for i, import_rpc in enumerate(IMPORT_RPCS):\n+            label = \"label{}\".format(i)\n+            addr = self.nodes[0].validateaddress(self.nodes[0].getnewaddress(\n+                label))",
      "path": "qa/rpc-tests/import-rescan.py",
      "position": null,
      "original_position": 78,
      "commit_id": "d8c0b9f525250565abd5d430a5150e62bf449384",
      "original_commit_id": "7e1d6fd43659e7cbfce2efd5433d79ef0fe687ec",
      "in_reply_to_id": 92611343,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, I was just using [yapf](https://github.com/google/yapf), but I increased the column width.",
      "created_at": "2016-12-15T15:28:15Z",
      "updated_at": "2016-12-15T15:28:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9331#discussion_r92630896",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92630896"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9331"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92630907",
      "pull_request_review_id": 13150393,
      "id": 92630907,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkyNjMwOTA3",
      "diff_hunk": "@@ -0,0 +1,164 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (start_nodes, connect_nodes, sync_blocks,\n+                                 assert_equal, Decimal)\n+\n+import collections\n+import enum\n+import itertools\n+import functools\n+\n+Call = enum.Enum(\"Call\", \"single multi\")\n+Data = enum.Enum(\"Data\", \"address pub priv\")\n+ImportNode = collections.namedtuple(\"ImportNode\", \"rescan\")\n+\n+\n+def call_import_rpc(call, data, address, scriptPubKey, pubkey, key, label,\n+                    node, rescan):\n+    \"\"\"Helper that calls a wallet import RPC on a bitcoin node.\"\"\"\n+    watchonly = data != Data.priv\n+    if call == Call.single:\n+        if data == Data.address:\n+            response = node.importaddress(address, label, rescan)\n+        elif data == Data.pub:\n+            response = node.importpubkey(pubkey, label, rescan)\n+        elif data == Data.priv:\n+            response = node.importprivkey(key, label, rescan)\n+        assert_equal(response, None)\n+    elif call == Call.multi:\n+        response = node.importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": address\n+            },\n+            \"pubkeys\": [pubkey] if data == Data.pub else [],\n+            \"keys\": [key] if data == Data.priv else [],\n+            \"label\": label,\n+            \"watchonly\": watchonly\n+        }], {\"rescan\": rescan})\n+        assert_equal(response, [{\"success\": True}])\n+    return watchonly\n+\n+\n+# List of RPCs that import a wallet key or address in various ways.\n+IMPORT_RPCS = [\n+    functools.partial(call_import_rpc, call, data)\n+    for call, data in itertools.product(Call, Data)\n+]\n+\n+# List of bitcoind nodes that will import keys.\n+IMPORT_NODES = [\n+    ImportNode(rescan=True),\n+    ImportNode(rescan=False),\n+]\n+\n+\n+class ImportRescanTest(BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 1 + len(IMPORT_NODES)\n+\n+    def setup_network(self):\n+        extra_args = [[\"-debug=1\"] for _ in range(self.num_nodes)]\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir,\n+                                 extra_args)\n+        for i in range(1, self.num_nodes):\n+            connect_nodes(self.nodes[i], 0)\n+\n+    def run_test(self):\n+        # Create one transaction on node 0 with a unique amount and label for\n+        # each possible type of wallet import RPC.\n+        import_rpc_variants = []\n+        for i, import_rpc in enumerate(IMPORT_RPCS):\n+            label = \"label{}\".format(i)\n+            addr = self.nodes[0].validateaddress(self.nodes[0].getnewaddress(\n+                label))\n+            key = self.nodes[0].dumpprivkey(addr[\"address\"])\n+            amount = 24.9375 - i * .0625\n+            txid = self.nodes[0].sendtoaddress(addr[\"address\"], amount)\n+            import_rpc = functools.partial(import_rpc, addr[\"address\"],\n+                                           addr[\"scriptPubKey\"],\n+                                           addr[\"pubkey\"], key, label)\n+            import_rpc_variants.append((import_rpc, label, amount, txid, addr))\n+\n+        self.nodes[0].generate(1)\n+        sync_blocks(self.nodes)\n+\n+        # For each importing node and variation of wallet import RPC, invoke\n+        # the RPC and check the results from getbalance and listtransactions.\n+        for node, import_node in zip(self.nodes[1:], IMPORT_NODES):\n+            for import_rpc, label, amount, txid, addr in import_rpc_variants:\n+                watchonly = import_rpc(node, import_node.rescan)\n+\n+                balance = node.getbalance(label, 0, True)\n+                if import_node.rescan:\n+                    assert_equal(balance, amount)\n+                else:\n+                    assert_equal(balance, 0)\n+\n+                txs = node.listtransactions(label, 10000, 0, True)\n+                if import_node.rescan:\n+                    assert_equal(len(txs), 1)\n+                    assert_equal(txs[0][\"account\"], label)\n+                    assert_equal(txs[0][\"address\"], addr[\"address\"])\n+                    assert_equal(txs[0][\"amount\"], amount)\n+                    assert_equal(txs[0][\"category\"], \"receive\")\n+                    assert_equal(txs[0][\"label\"], label)\n+                    assert_equal(txs[0][\"txid\"], txid)\n+                    assert_equal(txs[0][\"confirmations\"], 1)\n+                    assert_equal(\"trusted\" not in txs[0], True)\n+                    if watchonly:\n+                        assert_equal(txs[0][\"involvesWatchonly\"], True)\n+                    else:\n+                        assert_equal(\"involvesWatchonly\" not in txs[0], True)\n+                else:\n+                    assert_equal(len(txs), 0)\n+\n+        # Create spends for all the imported addresses.\n+        spend_txids = []\n+        for import_rpc, label, amount, txid, addr in import_rpc_variants:\n+            raw_tx = self.nodes[0].getrawtransaction(txid)\n+            decoded_tx = self.nodes[0].decoderawtransaction(raw_tx)\n+            input_vout = next(\n+                out[\"n\"] for out in decoded_tx[\"vout\"]\n+                if out[\"scriptPubKey\"][\"addresses\"] == [addr[\"address\"]])\n+            fee = self.nodes[0].getnetworkinfo()[\"relayfee\"]",
      "path": "qa/rpc-tests/import-rescan.py",
      "position": null,
      "original_position": 128,
      "commit_id": "d8c0b9f525250565abd5d430a5150e62bf449384",
      "original_commit_id": "7e1d6fd43659e7cbfce2efd5433d79ef0fe687ec",
      "in_reply_to_id": 92611767,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2016-12-15T15:28:17Z",
      "updated_at": "2016-12-15T15:28:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9331#discussion_r92630907",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92630907"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9331"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92630914",
      "pull_request_review_id": 13150400,
      "id": 92630914,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkyNjMwOTE0",
      "diff_hunk": "@@ -0,0 +1,164 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (start_nodes, connect_nodes, sync_blocks,\n+                                 assert_equal, Decimal)\n+\n+import collections\n+import enum\n+import itertools\n+import functools\n+\n+Call = enum.Enum(\"Call\", \"single multi\")\n+Data = enum.Enum(\"Data\", \"address pub priv\")\n+ImportNode = collections.namedtuple(\"ImportNode\", \"rescan\")\n+\n+\n+def call_import_rpc(call, data, address, scriptPubKey, pubkey, key, label,\n+                    node, rescan):\n+    \"\"\"Helper that calls a wallet import RPC on a bitcoin node.\"\"\"\n+    watchonly = data != Data.priv\n+    if call == Call.single:\n+        if data == Data.address:\n+            response = node.importaddress(address, label, rescan)\n+        elif data == Data.pub:\n+            response = node.importpubkey(pubkey, label, rescan)\n+        elif data == Data.priv:\n+            response = node.importprivkey(key, label, rescan)\n+        assert_equal(response, None)\n+    elif call == Call.multi:\n+        response = node.importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": address\n+            },\n+            \"pubkeys\": [pubkey] if data == Data.pub else [],\n+            \"keys\": [key] if data == Data.priv else [],\n+            \"label\": label,\n+            \"watchonly\": watchonly\n+        }], {\"rescan\": rescan})\n+        assert_equal(response, [{\"success\": True}])\n+    return watchonly\n+\n+\n+# List of RPCs that import a wallet key or address in various ways.\n+IMPORT_RPCS = [\n+    functools.partial(call_import_rpc, call, data)\n+    for call, data in itertools.product(Call, Data)\n+]\n+\n+# List of bitcoind nodes that will import keys.\n+IMPORT_NODES = [\n+    ImportNode(rescan=True),\n+    ImportNode(rescan=False),\n+]\n+\n+\n+class ImportRescanTest(BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 1 + len(IMPORT_NODES)\n+\n+    def setup_network(self):\n+        extra_args = [[\"-debug=1\"] for _ in range(self.num_nodes)]\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir,\n+                                 extra_args)\n+        for i in range(1, self.num_nodes):\n+            connect_nodes(self.nodes[i], 0)\n+\n+    def run_test(self):\n+        # Create one transaction on node 0 with a unique amount and label for\n+        # each possible type of wallet import RPC.\n+        import_rpc_variants = []\n+        for i, import_rpc in enumerate(IMPORT_RPCS):\n+            label = \"label{}\".format(i)\n+            addr = self.nodes[0].validateaddress(self.nodes[0].getnewaddress(\n+                label))\n+            key = self.nodes[0].dumpprivkey(addr[\"address\"])\n+            amount = 24.9375 - i * .0625\n+            txid = self.nodes[0].sendtoaddress(addr[\"address\"], amount)\n+            import_rpc = functools.partial(import_rpc, addr[\"address\"],\n+                                           addr[\"scriptPubKey\"],\n+                                           addr[\"pubkey\"], key, label)\n+            import_rpc_variants.append((import_rpc, label, amount, txid, addr))\n+\n+        self.nodes[0].generate(1)\n+        sync_blocks(self.nodes)\n+\n+        # For each importing node and variation of wallet import RPC, invoke\n+        # the RPC and check the results from getbalance and listtransactions.\n+        for node, import_node in zip(self.nodes[1:], IMPORT_NODES):\n+            for import_rpc, label, amount, txid, addr in import_rpc_variants:\n+                watchonly = import_rpc(node, import_node.rescan)\n+\n+                balance = node.getbalance(label, 0, True)\n+                if import_node.rescan:\n+                    assert_equal(balance, amount)\n+                else:\n+                    assert_equal(balance, 0)\n+\n+                txs = node.listtransactions(label, 10000, 0, True)\n+                if import_node.rescan:\n+                    assert_equal(len(txs), 1)\n+                    assert_equal(txs[0][\"account\"], label)\n+                    assert_equal(txs[0][\"address\"], addr[\"address\"])\n+                    assert_equal(txs[0][\"amount\"], amount)\n+                    assert_equal(txs[0][\"category\"], \"receive\")\n+                    assert_equal(txs[0][\"label\"], label)\n+                    assert_equal(txs[0][\"txid\"], txid)\n+                    assert_equal(txs[0][\"confirmations\"], 1)\n+                    assert_equal(\"trusted\" not in txs[0], True)\n+                    if watchonly:\n+                        assert_equal(txs[0][\"involvesWatchonly\"], True)\n+                    else:\n+                        assert_equal(\"involvesWatchonly\" not in txs[0], True)\n+                else:\n+                    assert_equal(len(txs), 0)\n+\n+        # Create spends for all the imported addresses.\n+        spend_txids = []\n+        for import_rpc, label, amount, txid, addr in import_rpc_variants:\n+            raw_tx = self.nodes[0].getrawtransaction(txid)\n+            decoded_tx = self.nodes[0].decoderawtransaction(raw_tx)\n+            input_vout = next(\n+                out[\"n\"] for out in decoded_tx[\"vout\"]\n+                if out[\"scriptPubKey\"][\"addresses\"] == [addr[\"address\"]])\n+            fee = self.nodes[0].getnetworkinfo()[\"relayfee\"]\n+            inputs = [{\"txid\": txid, \"vout\": input_vout}]\n+            outputs = {self.nodes[0].getnewaddress(): Decimal(amount) - fee}\n+            raw_spend_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n+            signed_spend_tx = self.nodes[0].signrawtransaction(raw_spend_tx)\n+            spend_txid = self.nodes[0].sendrawtransaction(signed_spend_tx[\n+                \"hex\"])\n+            spend_txids.append(spend_txid)\n+\n+        self.nodes[0].generate(1)\n+        sync_blocks(self.nodes)",
      "path": "qa/rpc-tests/import-rescan.py",
      "position": null,
      "original_position": 138,
      "commit_id": "d8c0b9f525250565abd5d430a5150e62bf449384",
      "original_commit_id": "7e1d6fd43659e7cbfce2efd5433d79ef0fe687ec",
      "in_reply_to_id": 92612226,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2016-12-15T15:28:19Z",
      "updated_at": "2016-12-15T15:28:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/9331#discussion_r92630914",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92630914"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9331"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    }
  ]
}