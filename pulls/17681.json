{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681",
    "id": 349663201,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzQ5NjYzMjAx",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17681",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/17681.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/17681.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17681",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17681/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
    "number": 17681,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "wallet: Keep inactive seeds after sethdseed and derive keys from them as needed",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Largely implements the suggestion from https://github.com/bitcoin/bitcoin/pull/17484#issuecomment-560845316.\r\n\r\nAfter `sethdseed` is called, the CHDChain for the old seed is kept in the wallet. It is kept on the file as a new `inactivehdseed` record and in memory in a map `m_inactive_hd_seeds`. In `LegacyScriptPubKeyMan::MarkUnusedAddresses` we check each used key's metadata for whether it was derived from an inactive seed. If it is, we then check to see how many keys after that key were derived from the inactive seed. If that number does not match the keypool parameter, we derive more keys from the inactive seed until it does match. This way we won't miss transactions belonging to keys outside of the range of the keypool initially.\r\n\r\nThe indexes and internal-ness of a key is gotten by checking it's key origin data.\r\n\r\nBecause of this change, we no longer need to wait for IBD to finish before `sethdseed` can work so that check is also removed.\r\n\r\nA test case for this is added as well which fails on master.",
    "labels": [
      {
        "id": 149424,
        "node_id": "MDU6TGFiZWwxNDk0MjQ=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
        "name": "Wallet",
        "color": "08a781",
        "default": false
      },
      {
        "id": 1648013533,
        "node_id": "MDU6TGFiZWwxNjQ4MDEzNTMz",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Review%20club",
        "name": "Review club",
        "description": "",
        "color": "0052cc",
        "default": false
      }
    ],
    "active_lock_reason": "resolved",
    "created_at": "2019-12-05T21:54:08Z",
    "updated_at": "2022-02-15T11:15:12Z",
    "closed_at": "2020-05-22T01:49:53Z",
    "mergeable_state": "unknown",
    "merged_at": "2020-05-22T01:49:52Z",
    "merge_commit_sha": "ccd85b57af60d7034db372b9501d059fbc5941e4",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "requested_teams": [],
    "head": {
      "label": "achow101:keep-inactive-seeds",
      "ref": "keep-inactive-seeds",
      "sha": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 45006379,
        "node_id": "MDEwOlJlcG9zaXRvcnk0NTAwNjM3OQ==",
        "name": "bitcoin",
        "full_name": "achow101/bitcoin",
        "owner": {
          "login": "achow101",
          "id": 3782274,
          "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
          "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/achow101",
          "html_url": "https://github.com/achow101",
          "followers_url": "https://api.github.com/users/achow101/followers",
          "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
          "organizations_url": "https://api.github.com/users/achow101/orgs",
          "repos_url": "https://api.github.com/users/achow101/repos",
          "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/achow101/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/achow101/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/achow101/bitcoin",
        "archive_url": "https://api.github.com/repos/achow101/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/achow101/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/achow101/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/achow101/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/achow101/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/achow101/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/achow101/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/achow101/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/achow101/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/achow101/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/achow101/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/achow101/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/achow101/bitcoin/events",
        "forks_url": "https://api.github.com/repos/achow101/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/achow101/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/achow101/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/achow101/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/achow101/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/achow101/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/achow101/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/achow101/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/achow101/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/achow101/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/achow101/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/achow101/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/achow101/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/achow101/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/achow101/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/achow101/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:achow101/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/achow101/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/achow101/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/achow101/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/achow101/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/achow101/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/achow101/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/achow101/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/achow101/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/achow101/bitcoin/hooks",
        "svn_url": "https://github.com/achow101/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 10,
        "stargazers_count": 34,
        "watchers_count": 34,
        "size": 238743,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-02T17:43:24Z",
        "created_at": "2015-10-27T00:20:28Z",
        "updated_at": "2023-05-16T00:18:41Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "951870807ea28e05cf074e364e1b55e985ab9f6d",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69817,
        "watchers_count": 69817,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T22:42:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T01:13:41Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 301,
    "deletions": 32,
    "changed_files": 6,
    "commits": 5,
    "review_comments": 141,
    "comments": 20
  },
  "events": [
    {
      "event": "labeled",
      "id": 2859460370,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI4NTk0NjAzNzA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2859460370",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-12-05T21:54:46Z",
      "label": {
        "name": "Wallet",
        "color": "08a781"
      }
    },
    {
      "event": "commented",
      "id": 562345098,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU2MjM0NTA5OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/562345098",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-12-05T22:21:41Z",
      "updated_at": "2020-05-20T01:59:22Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18923 (wallet: Never schedule MaybeCompactWalletDB when -flushwallet is off by MarcoFalke)\n* #18354 (Protect wallet by using shared pointers by bvbfan)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#issuecomment-562345098",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17681"
    },
    {
      "event": "review_requested",
      "id": 2862361283,
      "node_id": "MDIwOlJldmlld1JlcXVlc3RlZEV2ZW50Mjg2MjM2MTI4Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2862361283",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-12-06T18:31:40Z",
      "requested_reviewer": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "labeled",
      "id": 2862517794,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI4NjI1MTc3OTQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2862517794",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-12-06T19:30:38Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2862606880,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjg2MjYwNjg4MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2862606880",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-12-06T20:04:15Z"
    },
    {
      "event": "unlabeled",
      "id": 2862820095,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50Mjg2MjgyMDA5NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2862820095",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-12-06T21:34:54Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 328547913,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzI4NTQ3OTEz",
      "url": null,
      "actor": null,
      "commit_id": "c4ae01c81255c5e0e3b5ca3b979e60a1c531aed1",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "paymog",
        "id": 1986950,
        "node_id": "MDQ6VXNlcjE5ODY5NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1986950?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paymog",
        "html_url": "https://github.com/paymog",
        "followers_url": "https://api.github.com/users/paymog/followers",
        "following_url": "https://api.github.com/users/paymog/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paymog/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paymog/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paymog/subscriptions",
        "organizations_url": "https://api.github.com/users/paymog/orgs",
        "repos_url": "https://api.github.com/users/paymog/repos",
        "events_url": "https://api.github.com/users/paymog/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paymog/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#pullrequestreview-328547913",
      "submitted_at": "2019-12-08T09:12:39Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2864346362,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjg2NDM0NjM2Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2864346362",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-12-08T18:00:43Z"
    },
    {
      "event": "commented",
      "id": 562975226,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU2Mjk3NTIyNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/562975226",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-12-08T18:02:07Z",
      "updated_at": "2019-12-08T18:02:07Z",
      "author_association": "MEMBER",
      "body": "Found a few bugs where the wrong CHDChain was being used/updated/written. Should be fixed now.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#issuecomment-562975226",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17681"
    },
    {
      "event": "reviewed",
      "id": 329329202,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzI5MzI5MjAy",
      "url": null,
      "actor": null,
      "commit_id": "cf80607b12ecd4c6b07441557c81d986b6fb12d8",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK,\r\n\r\nI think new logic is robust enough, even if we set new seed during IBD, caching the inactive seeds and keep generating from them to keep a constant-size keypool. It should work also in case of loading a old backup where we may have handouts new keys since backup assuming we rescan the missing blocks.",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#pullrequestreview-329329202",
      "submitted_at": "2019-12-09T22:55:10Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2868228787,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjg2ODIyODc4Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2868228787",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-12-09T23:17:37Z"
    },
    {
      "event": "commented",
      "id": 563613452,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU2MzYxMzQ1Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/563613452",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-12-10T02:31:52Z",
      "updated_at": "2019-12-10T02:31:52Z",
      "author_association": "MEMBER",
      "body": "@achow101 after thoughts, I was thinking of the case where we have initial keypool=1000, we create a wallet backup B1 at block N, then we exhaust keypool until reaching index 1100, none of the address in the range 0 to 1000 are confirmed on chain, address index 1100 get confirmed at block N+10000. We restore wallet backup B1 and rescan from N until N+10000, wallet is not going to see address index 1100 because we only advance look-ahead key buffer when we detect an address in range 0 to 1000.\r\n\r\nThis scenario is really unlikely but it this current code behavior ? Just to be sure, if yes maybe comment of `CKeyPool` should be updated to avoid people setting to small `-keypool`.",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#issuecomment-563613452",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17681"
    },
    {
      "event": "mentioned",
      "id": 2868576794,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mjg2ODU3Njc5NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2868576794",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-12-10T02:31:53Z"
    },
    {
      "event": "subscribed",
      "id": 2868576796,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI4Njg1NzY3OTY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2868576796",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-12-10T02:31:53Z"
    },
    {
      "event": "commented",
      "id": 563636980,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU2MzYzNjk4MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/563636980",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-12-10T02:49:44Z",
      "updated_at": "2019-12-10T02:49:44Z",
      "author_association": "MEMBER",
      "body": "Yes, such a scenario is possible and is unavoidable. The only thing that you can do is to have a large enough keypool (or gap limit as other wallets call it) where this is unlikely to happen. This is why the default `-keypool` was raised to 1000 from 100.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#issuecomment-563636980",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17681"
    },
    {
      "event": "commented",
      "id": 564305888,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU2NDMwNTg4OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/564305888",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-12-10T23:24:58Z",
      "updated_at": "2019-12-10T23:24:58Z",
      "author_association": "MEMBER",
      "body": "Okay thanks for answer, added a commit on top of your branch (https://github.com/ariard/bitcoin/commit/3c25ab7f36319cbe38d1fb65a321b1234635648e) to clarify the risk of losing funds by lowering the default keypool value. With the default value, this scenario is really unlikely, but we should inform as best user to avoid one of them removing the footgun protection by mistake.\r\n\r\nWe could also go further and return error at wallet init if -keypool < 100.",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#issuecomment-564305888",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17681"
    },
    {
      "event": "commented",
      "id": 564340206,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU2NDM0MDIwNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/564340206",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-12-11T01:48:08Z",
      "updated_at": "2019-12-11T01:48:08Z",
      "author_association": "MEMBER",
      "body": "I think updating the docs about `-keypool` settings is out of scope for this PR.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#issuecomment-564340206",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17681"
    },
    {
      "event": "commented",
      "id": 564367899,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU2NDM2Nzg5OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/564367899",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-12-11T03:49:46Z",
      "updated_at": "2019-12-11T03:49:46Z",
      "author_association": "MEMBER",
      "body": "No worries I'll take it on its own. But on the raw idea, do you think it's pertinent to update the doc to inform user ?",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#issuecomment-564367899",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17681"
    },
    {
      "event": "commented",
      "id": 564368726,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU2NDM2ODcyNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/564368726",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-12-11T03:54:30Z",
      "updated_at": "2019-12-11T03:54:30Z",
      "author_association": "MEMBER",
      "body": "Yes, we should keep docs up to date with behavior.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#issuecomment-564368726",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17681"
    },
    {
      "event": "reviewed",
      "id": 336980010,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM2OTgwMDEw",
      "url": null,
      "actor": null,
      "commit_id": "fc7a5e4d5341f5a541a68e2717fefc5e0f4d4007",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK.",
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#pullrequestreview-336980010",
      "submitted_at": "2019-12-29T23:47:51Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2914758847,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjkxNDc1ODg0Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2914758847",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-12-30T21:57:48Z"
    },
    {
      "event": "commented",
      "id": 570663830,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU3MDY2MzgzMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/570663830",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-03T18:54:01Z",
      "updated_at": "2020-01-03T18:54:01Z",
      "author_association": "MEMBER",
      "body": "Concept ACK",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#issuecomment-570663830",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17681"
    },
    {
      "event": "reviewed",
      "id": 338374499,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4Mzc0NDk5",
      "url": null,
      "actor": null,
      "commit_id": "ff49e4db89f673b1e6fbb9ccaa92744d7c09b408",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "nit in commit fe7e9ae9ef897b37c8f84e55259df330adc7ff79, could rename `LegacyScriptPubKeyMan::hdChain` to `m_hd_chain` so it's clear there isn't invalid usage of `hdChain`.",
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#pullrequestreview-338374499",
      "submitted_at": "2020-01-04T23:43:32Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
    },
    {
      "event": "commented",
      "id": 571221110,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU3MTIyMTExMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/571221110",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-06T17:03:06Z",
      "updated_at": "2020-01-06T17:03:06Z",
      "author_association": "MEMBER",
      "body": "Renamed it.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#issuecomment-571221110",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17681"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2924876498,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjkyNDg3NjQ5OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2924876498",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-06T17:03:35Z"
    },
    {
      "event": "commented",
      "id": 572394058,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU3MjM5NDA1OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/572394058",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-09T05:26:43Z",
      "updated_at": "2020-01-09T05:26:43Z",
      "author_association": "CONTRIBUTOR",
      "body": "Nice work!\r\nConcept ACK.",
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#issuecomment-572394058",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17681"
    },
    {
      "event": "referenced",
      "id": 2990922000,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI5OTA5MjIwMDA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2990922000",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "aabec94541e23a67a9f30dc2c80dab3383a01737",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aabec94541e23a67a9f30dc2c80dab3383a01737",
      "created_at": "2020-01-29T20:10:31Z"
    },
    {
      "event": "labeled",
      "id": 2992089740,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI5OTIwODk3NDA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2992089740",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-30T06:07:36Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 580319326,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU4MDMxOTMyNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/580319326",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-30T15:54:51Z",
      "updated_at": "2020-01-30T15:54:51Z",
      "author_association": "MEMBER",
      "body": "Concept ACK",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#issuecomment-580319326",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17681"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2994133615,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjk5NDEzMzYxNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2994133615",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-30T16:56:20Z"
    },
    {
      "event": "unlabeled",
      "id": 2994465469,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50Mjk5NDQ2NTQ2OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2994465469",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-30T18:38:53Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "referenced",
      "id": 2999540684,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI5OTk1NDA2ODQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2999540684",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "7aec48ac806de5ea7673505290065b5902640ced",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/7aec48ac806de5ea7673505290065b5902640ced",
      "created_at": "2020-02-01T19:20:05Z"
    },
    {
      "event": "commented",
      "id": 588194193,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU4ODE5NDE5Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/588194193",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-19T12:14:26Z",
      "updated_at": "2020-02-19T12:15:11Z",
      "author_association": "MEMBER",
      "body": "Travis is tripping over some lock issue. As is macOS with `--enable-debug`:\r\n```\r\nwallet/walletdb.cpp:399:58: error: calling function 'AddInactiveHDChain' requires holding mutex 'pwallet->GetOrCreateLegacyScriptPubKeyMan().cs_KeyStore' exclusively [-Werror,-Wthread-safety-analysis]\r\n            pwallet->GetOrCreateLegacyScriptPubKeyMan()->AddInactiveHDChain(chain, true);\r\n```",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#issuecomment-588194193",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17681"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3053858822,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzA1Mzg1ODgyMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3053858822",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-19T23:55:04Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3053954971,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzA1Mzk1NDk3MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3053954971",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-02-20T00:44:36Z"
    },
    {
      "event": "reviewed",
      "id": 374818515,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0ODE4NTE1",
      "url": null,
      "actor": null,
      "commit_id": "d435512094ccd447ce0d582fa0e9ea85c46ebec3",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK d435512094ccd447ce0d582fa0e9ea85c46ebec3. Code review, built and tested on the branch and rebased on current master, verified the new test fails on master. A few non-blocking comments follow.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#pullrequestreview-374818515",
      "submitted_at": "2020-03-16T13:52:50Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3134305360,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzEzNDMwNTM2MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3134305360",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-16T17:44:06Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3134317201,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzEzNDMxNzIwMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3134317201",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-16T17:47:19Z"
    },
    {
      "event": "reviewed",
      "id": 375510813,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1NTEwODEz",
      "url": null,
      "actor": null,
      "commit_id": "0715613ce4b983b775e247f89aa033d2d2b822f5",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Code Review ACK 5fafe5e",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#pullrequestreview-375510813",
      "submitted_at": "2020-03-16T19:13:18Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
    },
    {
      "event": "commented",
      "id": 599763723,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU5OTc2MzcyMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/599763723",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-16T21:20:56Z",
      "updated_at": "2020-03-16T21:20:56Z",
      "author_association": "MEMBER",
      "body": "Re-ACK 5fafe5e reviewed changes since last review with `git diff d435512..5fafe5e`, rebased on master @ 25424cf57, built/ran tests/bitcoind",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#issuecomment-599763723",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17681"
    },
    {
      "event": "labeled",
      "id": 3165514399,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDMxNjU1MTQzOTk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3165514399",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-25T19:47:28Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3165855638,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzE2NTg1NTYzOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3165855638",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-25T21:35:02Z"
    },
    {
      "event": "unlabeled",
      "id": 3165904888,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MzE2NTkwNDg4OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3165904888",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-25T21:52:01Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 622211593,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjIxMTU5Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/622211593",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-01T01:58:07Z",
      "updated_at": "2020-05-01T01:58:07Z",
      "author_association": "MEMBER",
      "body": "Code review almost-ACK d27ced4eeaf59d093b4eedeed6c344f3f80082c1\r\n\r\nArrived here while reviewing #17484, and happy to see another really nicely implemented PR!  Clean changes and great code comments and tests. Only thing that I think is a problem (and easily addressed) is decision to read/write/rely on new \"inactivehdchain\" database rows. I guess there are two slightly different decisions I'm concerned about:\r\n\r\n1. Decision to rely on \"inactivehdchain\" rows being written to top up old seeds instead of always topping up old seeds.\r\n2. Decision to write \"inactivehdchain\" rows when sethdseed is called.\r\n\r\nI think (1) isn't good because it results in behavior that could be unnecessarily confusing and seem unreliable to users. Wallet loading code could just populate the `m_inactive_hd_chains` map from existing key origin data during loading, without requiring \"inactivehdchain\" database rows to have been written previously. A problem with requiring the rows to top up is that now instead of having two types of seeds in the wallet: _active_ and _inactive_, there are three kinds: _active_, _inactive and topped up_, _inactive and dormant_ which could be confusing to users who will see different behavior between the different inactive types, and not have control over what type they end up with without switching software versions. So it would be great to see `m_inactive_hd_chains` map and counters just populated automatically with origin data when wallet is loaded.\r\n\r\nDecision (2) to write \"inactivehdchain\" rows may be justified even if the rows aren't required for topping up, because maybe there is some useful metadata or history they provide, but it would be good to figure out if there is actually anything in there worth keeping when a new seed is set. Also, WalletBatch::WriteInactiveHDChain implemented in 40635251387758aac8a578b72e01b265dcc15d77, seems like it only writes a single row to the database with each new inactive chain overwriting the last, so I wonder if that behaves as intended in the current implementation.\r\n\r\nEverything else seems really good aside from this one point. Great to see this PR!",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#issuecomment-622211593",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17681"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNTliNDUwNGFiZjk2Y2VjODYwYmFkZmVkMmFjNzkzYWU1ZDQwY2Vk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b59b4504abf96cec860badfed2ac793ae5d40ced",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b59b4504abf96cec860badfed2ac793ae5d40ced",
      "tree": {
        "sha": "4d5d377b2cec515921f0bf263ba2f9edd9f1ad6b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4d5d377b2cec515921f0bf263ba2f9edd9f1ad6b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/844d2070a2c0106bb7a54be5cad7d4da4d9cd55e",
          "sha": "844d2070a2c0106bb7a54be5cad7d4da4d9cd55e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/844d2070a2c0106bb7a54be5cad7d4da4d9cd55e"
        }
      ],
      "message": "have GenerateNewKey and DeriveNewChildKey take a CHDChain as an argument",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-01T22:46:00Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-12-05T19:51:51Z"
      },
      "sha": "b59b4504abf96cec860badfed2ac793ae5d40ced"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3294895591,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzI5NDg5NTU5MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3294895591",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-02T02:02:44Z"
    },
    {
      "event": "commented",
      "id": 622653118,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjY1MzExOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/622653118",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-02T02:03:16Z",
      "updated_at": "2020-05-02T02:03:16Z",
      "author_association": "MEMBER",
      "body": "I've changed this to get rid of the `inactivehdseed` records and just interpret the `keymeta` records during loading.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#issuecomment-622653118",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17681"
    },
    {
      "event": "reviewed",
      "id": 407503207,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3NTAzMjA3",
      "url": null,
      "actor": null,
      "commit_id": "65dee3410cd9807bb4aa6b6677c2e0832e050ea2",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Code review almost-ACK 65dee3410cd9807bb4aa6b6677c2e0832e050ea2 with one or two small blocking comments below. Overall looks great!",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#pullrequestreview-407503207",
      "submitted_at": "2020-05-07T15:06:41Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3313573429,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzMxMzU3MzQyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3313573429",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-07T15:59:40Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3313659770,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzMxMzY1OTc3MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3313659770",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-07T16:20:20Z"
    },
    {
      "event": "reviewed",
      "id": 407678392,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3Njc4Mzky",
      "url": null,
      "actor": null,
      "commit_id": "daa9e347deceedb354aa0c73e34e34d50fafb5d5",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "b79e53fd78bab2a4541512d1d015c1ad3d8ee660 looks good except for one comment. Only changes since last review were implementing suggestions",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#pullrequestreview-407678392",
      "submitted_at": "2020-05-07T17:21:42Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3313917677,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzMxMzkxNzY3Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3313917677",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-07T17:28:08Z"
    },
    {
      "event": "reviewed",
      "id": 407687729,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3Njg3NzI5",
      "url": null,
      "actor": null,
      "commit_id": "01c65e3f3119108c904c19c18921efc2d934a3a3",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#pullrequestreview-407687729",
      "submitted_at": "2020-05-07T17:31:36Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3314262871,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzMxNDI2Mjg3MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3314262871",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-07T19:04:35Z"
    },
    {
      "event": "reviewed",
      "id": 407802175,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3ODAyMTc1",
      "url": null,
      "actor": null,
      "commit_id": "769b03a83c2aa2b97f344b58dc689be26c6e08e5",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Code review ACK 769b03a83c2aa2b97f344b58dc689be26c6e08e5\r\n\r\nMain change since last review is `internal = path[1] == (1 | 0x80000000)` fix fixing topup of inactive change keypools (would be nice if there's an easy way to tweak python test to cover this case). I think this was also broken in previous versions of the PR I acked. Other change was fixing detection of invalid paths\r\n\r\nIt would be good to get this merged to make the sethdseed implementation more flexible, and to have as a prerequisite to #17484. This PR could also be a good candidate for review club.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#pullrequestreview-407802175",
      "submitted_at": "2020-05-07T20:13:57Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
    },
    {
      "event": "commented",
      "id": 626885075,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYyNjg4NTA3NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/626885075",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-11T18:44:29Z",
      "updated_at": "2020-05-11T18:44:29Z",
      "author_association": "MEMBER",
      "body": "We're covering this in review club on May 13: https://bitcoincore.reviews/17681.html",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#issuecomment-626885075",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17681"
    },
    {
      "event": "labeled",
      "id": 3324286915,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDMzMjQyODY5MTU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3324286915",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-11T18:45:31Z",
      "label": {
        "name": "Review club",
        "color": "0052cc"
      }
    },
    {
      "event": "reviewed",
      "id": 409536553,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5NTM2NTUz",
      "url": null,
      "actor": null,
      "commit_id": "769b03a83c2aa2b97f344b58dc689be26c6e08e5",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Mostly looks good. I've left a bunch of nits and one question which confused me (about calling `AddKeypoolPubkeyWithDB()` in `TopUpInactiveHDChain()`). I haven't reviewed the tests yet.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#pullrequestreview-409536553",
      "submitted_at": "2020-05-11T22:27:16Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3325264739,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzMyNTI2NDczOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3325264739",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-12T00:25:48Z"
    },
    {
      "event": "reviewed",
      "id": 410144444,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMTQ0NDQ0",
      "url": null,
      "actor": null,
      "commit_id": "2feb5a2d0403edeb680c21e6f19c37c06a59d859",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#pullrequestreview-410144444",
      "submitted_at": "2020-05-12T15:11:08Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
    },
    {
      "event": "reviewed",
      "id": 410146052,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMTQ2MDUy",
      "url": null,
      "actor": null,
      "commit_id": "2feb5a2d0403edeb680c21e6f19c37c06a59d859",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#pullrequestreview-410146052",
      "submitted_at": "2020-05-12T15:12:48Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3328324367,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzMyODMyNDM2Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3328324367",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-12T16:28:46Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3328668725,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzMyODY2ODcyNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3328668725",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-12T17:58:23Z"
    },
    {
      "event": "reviewed",
      "id": 410256690,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMjU2Njkw",
      "url": null,
      "actor": null,
      "commit_id": "a5c3f3218be69ef2a7633bd9fa34963602d1c44f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK 218c4f6405df2b389411f8370057319bfdc59f48\r\n\r\nThis PR has improved since the last review. A few non-blocking comments follow; feel free to ignore.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#pullrequestreview-410256690",
      "submitted_at": "2020-05-12T19:59:25Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
    },
    {
      "event": "reviewed",
      "id": 410939980,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwOTM5OTgw",
      "url": null,
      "actor": null,
      "commit_id": "f5eaa90301a946b889a9708631da2a60cf365cdc",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "~~Code review ACK 218c4f6405df2b389411f8370057319bfdc59f48~~\r\n\r\nEDIT: need to withdraw because of the potential bug discovered by @ryanofsky in the or review club.",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#pullrequestreview-410939980",
      "submitted_at": "2020-05-13T14:35:06Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
    },
    {
      "event": "commented",
      "id": 628101843,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYyODEwMTg0Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/628101843",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-13T16:27:08Z",
      "updated_at": "2020-05-13T16:27:08Z",
      "author_association": "MEMBER",
      "body": "Concept ACK",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#issuecomment-628101843",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17681"
    },
    {
      "event": "reviewed",
      "id": 411102192,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTAyMTky",
      "url": null,
      "actor": null,
      "commit_id": "9e33fa1b9c1a8c3a20973d4e46a2797324013002",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK\r\n\r\n> Because of this change, we no longer need to wait for IBD to finish before sethdseed can work so that check is also removed\r\n\r\nCould you specify why in the relevant commit message?",
      "user": {
        "login": "jkczyz",
        "id": 4015903,
        "node_id": "MDQ6VXNlcjQwMTU5MDM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4015903?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jkczyz",
        "html_url": "https://github.com/jkczyz",
        "followers_url": "https://api.github.com/users/jkczyz/followers",
        "following_url": "https://api.github.com/users/jkczyz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jkczyz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jkczyz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jkczyz/subscriptions",
        "organizations_url": "https://api.github.com/users/jkczyz/orgs",
        "repos_url": "https://api.github.com/users/jkczyz/repos",
        "events_url": "https://api.github.com/users/jkczyz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jkczyz/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#pullrequestreview-411102192",
      "submitted_at": "2020-05-13T16:47:07Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
    },
    {
      "event": "reviewed",
      "id": 411183267,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTgzMjY3",
      "url": null,
      "actor": null,
      "commit_id": "218c4f6405df2b389411f8370057319bfdc59f48",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#pullrequestreview-411183267",
      "submitted_at": "2020-05-13T18:18:44Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
    },
    {
      "event": "commented",
      "id": 629280702,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTI4MDcwMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/629280702",
      "actor": {
        "login": "rajarshimaitra",
        "id": 36541669,
        "node_id": "MDQ6VXNlcjM2NTQxNjY5",
        "avatar_url": "https://avatars.githubusercontent.com/u/36541669?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rajarshimaitra",
        "html_url": "https://github.com/rajarshimaitra",
        "followers_url": "https://api.github.com/users/rajarshimaitra/followers",
        "following_url": "https://api.github.com/users/rajarshimaitra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rajarshimaitra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rajarshimaitra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rajarshimaitra/subscriptions",
        "organizations_url": "https://api.github.com/users/rajarshimaitra/orgs",
        "repos_url": "https://api.github.com/users/rajarshimaitra/repos",
        "events_url": "https://api.github.com/users/rajarshimaitra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rajarshimaitra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-15T14:56:35Z",
      "updated_at": "2020-05-15T14:56:35Z",
      "author_association": "CONTRIBUTOR",
      "body": "Code Review ACK. Verified test, verified test failing in master. Overall nice easy to understand PR. Agreed with the motivation. ",
      "user": {
        "login": "rajarshimaitra",
        "id": 36541669,
        "node_id": "MDQ6VXNlcjM2NTQxNjY5",
        "avatar_url": "https://avatars.githubusercontent.com/u/36541669?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rajarshimaitra",
        "html_url": "https://github.com/rajarshimaitra",
        "followers_url": "https://api.github.com/users/rajarshimaitra/followers",
        "following_url": "https://api.github.com/users/rajarshimaitra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rajarshimaitra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rajarshimaitra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rajarshimaitra/subscriptions",
        "organizations_url": "https://api.github.com/users/rajarshimaitra/orgs",
        "repos_url": "https://api.github.com/users/rajarshimaitra/repos",
        "events_url": "https://api.github.com/users/rajarshimaitra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rajarshimaitra/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#issuecomment-629280702",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17681"
    },
    {
      "event": "reviewed",
      "id": 412732619,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyNzMyNjE5",
      "url": null,
      "actor": null,
      "commit_id": "218c4f6405df2b389411f8370057319bfdc59f48",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "rajarshimaitra",
        "id": 36541669,
        "node_id": "MDQ6VXNlcjM2NTQxNjY5",
        "avatar_url": "https://avatars.githubusercontent.com/u/36541669?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rajarshimaitra",
        "html_url": "https://github.com/rajarshimaitra",
        "followers_url": "https://api.github.com/users/rajarshimaitra/followers",
        "following_url": "https://api.github.com/users/rajarshimaitra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rajarshimaitra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rajarshimaitra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rajarshimaitra/subscriptions",
        "organizations_url": "https://api.github.com/users/rajarshimaitra/orgs",
        "repos_url": "https://api.github.com/users/rajarshimaitra/repos",
        "events_url": "https://api.github.com/users/rajarshimaitra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rajarshimaitra/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#pullrequestreview-412732619",
      "submitted_at": "2020-05-15T15:08:23Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NWYyZjZhMGU4NTE0YTA0MzhhODc1NTQ0MDBiZjczY2JiOTA3MDdm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/45f2f6a0e8514a0438a87554400bf73cbb90707f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/45f2f6a0e8514a0438a87554400bf73cbb90707f",
      "tree": {
        "sha": "979ce45063a88655f050cb2b0f2a31e56b6cca38",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/979ce45063a88655f050cb2b0f2a31e56b6cca38"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b59b4504abf96cec860badfed2ac793ae5d40ced",
          "sha": "b59b4504abf96cec860badfed2ac793ae5d40ced",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b59b4504abf96cec860badfed2ac793ae5d40ced"
        }
      ],
      "message": "Determine inactive HD seeds from key metadata and track them in LegacyScriptPubKeyMan",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-15T22:00:04Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-12-05T20:23:05Z"
      },
      "sha": "45f2f6a0e8514a0438a87554400bf73cbb90707f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOTMwODJlY2U0MGIxYzcyZjA1YjNlMjA4NWMwMjJjMDllYWE0ZDY1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c93082ece40b1c72f05b3e2085c022c09eaa4d65",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c93082ece40b1c72f05b3e2085c022c09eaa4d65",
      "tree": {
        "sha": "2f0878258ebfa58bfbad40f3466c57ae6a34435b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2f0878258ebfa58bfbad40f3466c57ae6a34435b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/45f2f6a0e8514a0438a87554400bf73cbb90707f",
          "sha": "45f2f6a0e8514a0438a87554400bf73cbb90707f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/45f2f6a0e8514a0438a87554400bf73cbb90707f"
        }
      ],
      "message": "Generate new keys for inactive seeds after marking used\n\nWhen a key from an inactive seed is used, generate replacements\nto fill a keypool that would have been there.",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-15T22:00:10Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-12-05T20:55:49Z"
      },
      "sha": "c93082ece40b1c72f05b3e2085c022c09eaa4d65"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMTgxMGExNDVhNjAxYTgwNjRlNDA5NDM1MGNmYjZkZGFmYmRiNGQ4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b1810a145a601a8064e4094350cfb6ddafbdb4d8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b1810a145a601a8064e4094350cfb6ddafbdb4d8",
      "tree": {
        "sha": "3489c4b09987f16659ba2a011b37993c2fee7f12",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3489c4b09987f16659ba2a011b37993c2fee7f12"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c93082ece40b1c72f05b3e2085c022c09eaa4d65",
          "sha": "c93082ece40b1c72f05b3e2085c022c09eaa4d65",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c93082ece40b1c72f05b3e2085c022c09eaa4d65"
        }
      ],
      "message": "Test that keys from inactive seeds are generated",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-15T22:00:10Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-12-05T21:40:06Z"
      },
      "sha": "b1810a145a601a8064e4094350cfb6ddafbdb4d8"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZWQ1MmZiYjRkODFmN2I3NjM0ZmQ0ZmI2ZDFkMDBlMTQ3ODEyOWRj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "tree": {
        "sha": "81c7714f9a7f2f0d6afacd089c748e7549718746",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/81c7714f9a7f2f0d6afacd089c748e7549718746"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b1810a145a601a8064e4094350cfb6ddafbdb4d8",
          "sha": "b1810a145a601a8064e4094350cfb6ddafbdb4d8",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b1810a145a601a8064e4094350cfb6ddafbdb4d8"
        }
      ],
      "message": "Remove IBD check in sethdseed\n\nIt is no longer necessary to wait for IBD to be complete before setting\na HD seed. This check was originally to ensure that restoring an old\nseed on an out of sync node would scan the entire blockchain and thus\nnot miss transactions that involved keys that were not in the keypool.\nThis was necessary as once the seed was changed, no further keys would\nbe derived from the old seed(s).\n\nAs we are now topping up inactive seeds as we find those keys to be\nused, this check is no longer necessary. During IBD, each time we\nfind a used key belonging to an inactive hd seed, we will still generate\nmore keys from that inactive seed.",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-15T22:00:10Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-12-05T21:52:18Z"
      },
      "sha": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3342772645,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzM0Mjc3MjY0NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3342772645",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-15T22:00:22Z"
    },
    {
      "event": "reviewed",
      "id": 414805697,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0ODA1Njk3",
      "url": null,
      "actor": null,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Code review ACK 1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc. Changes since last review: various commit message, code comment, log message, error checking improvements, and fix for topping up inactive seeds if wallet isn't reloaded after calling sethdseed and test for this",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#pullrequestreview-414805697",
      "submitted_at": "2020-05-19T20:39:59Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
    },
    {
      "event": "reviewed",
      "id": 414824583,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0ODI0NTgz",
      "url": null,
      "actor": null,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#pullrequestreview-414824583",
      "submitted_at": "2020-05-19T22:57:35Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
    },
    {
      "event": "reviewed",
      "id": 414885119,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0ODg1MTE5",
      "url": null,
      "actor": null,
      "commit_id": "45f2f6a0e8514a0438a87554400bf73cbb90707f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Code Review ACK 1ed52fb\r\n\r\nI think comments could be made better but not going to hold on this.",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#pullrequestreview-414885119",
      "submitted_at": "2020-05-20T01:00:24Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
    },
    {
      "event": "reviewed",
      "id": 414988177,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0OTg4MTc3",
      "url": null,
      "actor": null,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK 1ed52fbb4d81f7 thanks for addressing the previous review feedback; would be happy to see the new review questions answered and feedback addressed and re-ack.\r\n\r\n<details><summary>changes since last review per <code>git diff 218c4f6 1ed52fb</code></summary><p>\r\n\r\n```diff\r\ndiff --git a/src/wallet/scriptpubkeyman.cpp b/src/wallet/scriptpubkeyman.cpp\r\nindex 7a62752b12..1bd33449fc 100644\r\n--- a/src/wallet/scriptpubkeyman.cpp\r\n+++ b/src/wallet/scriptpubkeyman.cpp\r\n@@ -307,20 +307,20 @@ bool LegacyScriptPubKeyMan::TopUpInactiveHDChain(const CKeyID seed_id, int64_t i\r\n     CHDChain& chain = it->second;\r\n \r\n     // Top up key pool\r\n-    int64_t target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\r\n+    int64_t target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 1);\r\n \r\n     // \"size\" of the keypools. Not really the size, actually the difference between index and the chain counter\r\n     // Since chain counter is 1 based and index is 0 based, one of them needs to be offset by 1.\r\n     int64_t kp_size = (internal ? chain.nInternalChainCounter : chain.nExternalChainCounter) - (index + 1);\r\n \r\n     // make sure the keypool fits the user-selected target (-keypool)\r\n-    int64_t missing = std::max(std::max((int64_t) target_size, (int64_t) 1) - kp_size, (int64_t) 0);\r\n+    int64_t missing = std::max(target_size - kp_size, (int64_t) 0);\r\n \r\n-    WalletBatch batch(m_storage.GetDatabase());\r\n-    for (int64_t i = missing; i > 0; --i) {\r\n-        GenerateNewKey(batch, chain, internal);\r\n-    }\r\n     if (missing > 0) {\r\n+        WalletBatch batch(m_storage.GetDatabase());\r\n+        for (int64_t i = missing; i > 0; --i) {\r\n+            GenerateNewKey(batch, chain, internal);\r\n+        }\r\n         if (internal) {\r\n             WalletLogPrintf(\"inactive seed with id %s added %d internal keys\\n\", HexStr(seed_id), missing);\r\n         } else {\r\n@@ -337,7 +337,7 @@ void LegacyScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\r\n     for (const auto& keyid : GetAffectedKeys(script, *this)) {\r\n         std::map<CKeyID, int64_t>::const_iterator mi = m_pool_key_to_index.find(keyid);\r\n         if (mi != m_pool_key_to_index.end()) {\r\n-            WalletLogPrintf(\"%s: Detected a used keypool key, mark all keypool key up to this key as used\\n\", __func__);\r\n+            WalletLogPrintf(\"%s: Detected a used keypool key, mark all keypool keys up to this key as used\\n\", __func__);\r\n             MarkReserveKeysAsUsed(mi->second);\r\n \r\n             if (!TopUp()) {\r\n@@ -345,6 +345,8 @@ void LegacyScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\r\n             }\r\n         }\r\n \r\n+        // Find the key's metadata and check if it's seed id (if it has one) is inactive, i.e. it is not the current m_hd_chain seed id.\r\n+        // If so, TopUp the inactive hd chain\r\n         auto it = mapKeyMetadata.find(keyid);\r\n         if (it != mapKeyMetadata.end()){\r\n             CKeyMetadata meta = it->second;\r\n@@ -892,8 +894,18 @@ bool LegacyScriptPubKeyMan::AddWatchOnly(const CScript& dest, int64_t nCreateTim\r\n void LegacyScriptPubKeyMan::SetHDChain(const CHDChain& chain, bool memonly)\r\n {\r\n     LOCK(cs_KeyStore);\r\n-    if (!memonly && !WalletBatch(m_storage.GetDatabase()).WriteHDChain(chain))\r\n-        throw std::runtime_error(std::string(__func__) + \": writing chain failed\");\r\n+    // memonly == true means we are loading the wallet file\r\n+    // memonly == false means that the chain is actually being changed\r\n+    if (!memonly) {\r\n+        // Store the new chain\r\n+        if (!WalletBatch(m_storage.GetDatabase()).WriteHDChain(chain)) {\r\n+            throw std::runtime_error(std::string(__func__) + \": writing chain failed\");\r\n+        }\r\n+        // When there's an old chain, add it as an inactive chain as we are now rotating hd chains\r\n+        if (!m_hd_chain.seed_id.IsNull()) {\r\n+            AddInactiveHDChain(m_hd_chain);\r\n+        }\r\n+    }\r\n \r\n     m_hd_chain = chain;\r\n }\r\ndiff --git a/src/wallet/scriptpubkeyman.h b/src/wallet/scriptpubkeyman.h\r\nindex 817bdceb87..5aaa17334c 100644\r\n--- a/src/wallet/scriptpubkeyman.h\r\n+++ b/src/wallet/scriptpubkeyman.h\r\n@@ -341,7 +341,7 @@ private:\r\n      * @param index the index to start generating keys from\r\n      * @param internal whether the internal chain should be used. true for internal chain, false for external chain.\r\n      *\r\n-     * @@return true if seed was found and keys were derived. false if unable to derive seeds\r\n+     * @return true if seed was found and keys were derived. false if unable to derive seeds\r\n      */\r\n     bool TopUpInactiveHDChain(const CKeyID seed_id, int64_t index, bool internal);\r\n \r\ndiff --git a/src/wallet/walletdb.cpp b/src/wallet/walletdb.cpp\r\nindex fe94ca59ba..49db7914e4 100644\r\n--- a/src/wallet/walletdb.cpp\r\n+++ b/src/wallet/walletdb.cpp\r\n@@ -436,11 +436,15 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\r\n                         return false;\r\n                     }\r\n                     if (path[0] != 0x80000000) {\r\n-                        strErr = \"Unexpected path index for the element at index 0\";\r\n+                        strErr = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000) for the element at index 0\", path[0]);\r\n                         return false;\r\n                     }\r\n-                    if (path[1] != 0x80000000 && path[1] != (1 | 0x80000000) && (path[2] & 0x80000000)) {\r\n-                        strErr = \"Unexpected path index for the element at index 1\";\r\n+                    if (path[1] != 0x80000000 && path[1] != (1 | 0x80000000)) {\r\n+                        strErr = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000 or 0x80000001) for the element at index 1\", path[1]);\r\n+                        return false;\r\n+                    }\r\n+                    if ((path[2] & 0x80000000) == 0) {\r\n+                        strErr = strprintf(\"Unexpected path index of 0x%08x (expected to be greater than or equal to 0x80000000)\", path[2]);\r\n                         return false;\r\n                     }\r\n                     internal = path[1] == (1 | 0x80000000);\r\n@@ -453,7 +457,6 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\r\n                 if (ins.second) {\r\n                     // For new chains, we want to default to VERSION_HD_BASE until we see an internal\r\n                     chain.nVersion = CHDChain::VERSION_HD_BASE;\r\n-                    // Set the seed id\r\n                     chain.seed_id = keyMeta.hd_seed_id;\r\n                 }\r\n                 if (internal) {\r\ndiff --git a/test/functional/wallet_hd.py b/test/functional/wallet_hd.py\r\nindex 6d0ca680e2..5b083a5398 100755\r\n--- a/test/functional/wallet_hd.py\r\n+++ b/test/functional/wallet_hd.py\r\n@@ -188,7 +188,12 @@ class WalletHDTest(BitcoinTestFramework):\r\n             restore_rpc.sethdseed(True, seed) # Set to be the same seed as origin_rpc\r\n             restore_rpc.sethdseed(True) # Rotate to a new seed, making original `seed` inactive\r\n \r\n-            # Check persistence of inactive seed\r\n+            self.nodes[1].createwallet(wallet_name='restore2', blank=True)\r\n+            restore2_rpc = self.nodes[1].get_wallet_rpc('restore2')\r\n+            restore2_rpc.sethdseed(True, seed) # Set to be the same seed as origin_rpc\r\n+            restore2_rpc.sethdseed(True) # Rotate to a new seed, making original `seed` inactive\r\n+\r\n+            # Check persistence of inactive seed by reloading restore. restore2 is still loaded to test the case where the wallet is not reloaded\r\n             restore_rpc.unloadwallet()\r\n             self.nodes[1].loadwallet('restore')\r\n             restore_rpc = self.nodes[1].get_wallet_rpc('restore')\r\n@@ -204,6 +209,10 @@ class WalletHDTest(BitcoinTestFramework):\r\n             assert_equal(info['ismine'], True)\r\n             info = restore_rpc.getaddressinfo(addr)\r\n             assert_equal(info['ismine'], False)\r\n+            info = restore2_rpc.getaddressinfo(last_addr)\r\n+            assert_equal(info['ismine'], True)\r\n+            info = restore2_rpc.getaddressinfo(addr)\r\n+            assert_equal(info['ismine'], False)\r\n             # Check that the origin seed has addr\r\n             info = origin_rpc.getaddressinfo(addr)\r\n             assert_equal(info['ismine'], True)\r\n@@ -226,6 +235,8 @@ class WalletHDTest(BitcoinTestFramework):\r\n             origin_rpc.gettransaction(txid)\r\n             restore_rpc.gettransaction(txid)\r\n             assert_raises_rpc_error(-5, 'Invalid or non-wallet transaction id', restore_rpc.gettransaction, out_of_kp_txid)\r\n+            restore2_rpc.gettransaction(txid)\r\n+            assert_raises_rpc_error(-5, 'Invalid or non-wallet transaction id', restore2_rpc.gettransaction, out_of_kp_txid)\r\n \r\n             # After rescanning, restore_rpc should now see out_of_kp_txid and generate an additional key.\r\n             # addr should now be part of restore_rpc and be ismine\r\n@@ -233,6 +244,10 @@ class WalletHDTest(BitcoinTestFramework):\r\n             restore_rpc.gettransaction(out_of_kp_txid)\r\n             info = restore_rpc.getaddressinfo(addr)\r\n             assert_equal(info['ismine'], True)\r\n+            restore2_rpc.rescanblockchain()\r\n+            restore2_rpc.gettransaction(out_of_kp_txid)\r\n+            info = restore2_rpc.getaddressinfo(addr)\r\n+            assert_equal(info['ismine'], True)\r\n \r\n             # Check again that 3 keys were derived.\r\n             # Empty keypool and get an address that is beyond the initial keypool\r\n@@ -246,6 +261,10 @@ class WalletHDTest(BitcoinTestFramework):\r\n             assert_equal(info['ismine'], True)\r\n             info = restore_rpc.getaddressinfo(addr)\r\n             assert_equal(info['ismine'], False)\r\n+            info = restore2_rpc.getaddressinfo(last_addr)\r\n+            assert_equal(info['ismine'], True)\r\n+            info = restore2_rpc.getaddressinfo(addr)\r\n+            assert_equal(info['ismine'], False)\r\n \r\n if __name__ == '__main__':\r\n     WalletHDTest().main ()\r\n```\r\n</p></details>\r\n\r\nChangeset review, gcc and clang builds with the works + ran tests and bitcoind. \r\n\r\nVerified that the new tests halt at lines 248 (\"Invalid or non-wallet transaction id\"), 249 (assertion false), and 262 (assertion false), if the new `AddInactiveHDChain` call in `LegacyScriptPubKeyMan::SetHDChain` is removed.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#pullrequestreview-414988177",
      "submitted_at": "2020-05-20T04:44:32Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
    },
    {
      "event": "commented",
      "id": 631654435,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzMTY1NDQzNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/631654435",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-20T18:42:03Z",
      "updated_at": "2020-05-20T18:42:03Z",
      "author_association": "MEMBER",
      "body": "With 3 ACKs now, I think the remaining comments can be done in follow up PRs.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#issuecomment-631654435",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17681"
    },
    {
      "event": "merged",
      "id": 3362928275,
      "node_id": "MDExOk1lcmdlZEV2ZW50MzM2MjkyODI3NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3362928275",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "ccd85b57af60d7034db372b9501d059fbc5941e4",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccd85b57af60d7034db372b9501d059fbc5941e4",
      "created_at": "2020-05-22T01:49:52Z"
    },
    {
      "event": "closed",
      "id": 3362928283,
      "node_id": "MDExOkNsb3NlZEV2ZW50MzM2MjkyODI4Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3362928283",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-22T01:49:53Z"
    },
    {
      "event": "referenced",
      "id": 3363325169,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMzNjMzMjUxNjk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3363325169",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "22b0c45607bd8a60f7705baa7b3a41d836b46eb2",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/22b0c45607bd8a60f7705baa7b3a41d836b46eb2",
      "created_at": "2020-05-22T05:44:32Z"
    },
    {
      "event": "referenced",
      "id": 3536206459,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM1MzYyMDY0NTk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3536206459",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "89899a344861c27ad31dc09334fa88ec9402dba4",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89899a344861c27ad31dc09334fa88ec9402dba4",
      "created_at": "2020-07-11T11:09:07Z"
    },
    {
      "event": "referenced",
      "id": 3536524485,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM1MzY1MjQ0ODU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3536524485",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "51b42c40d78c8a9ae389202ea441d4fe59485d37",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/51b42c40d78c8a9ae389202ea441d4fe59485d37",
      "created_at": "2020-07-11T19:11:11Z"
    },
    {
      "event": "referenced",
      "id": 3862327551,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM4NjIzMjc1NTE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3862327551",
      "actor": {
        "login": "jasonbcox",
        "id": 602513,
        "node_id": "MDQ6VXNlcjYwMjUxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/602513?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jasonbcox",
        "html_url": "https://github.com/jasonbcox",
        "followers_url": "https://api.github.com/users/jasonbcox/followers",
        "following_url": "https://api.github.com/users/jasonbcox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jasonbcox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jasonbcox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jasonbcox/subscriptions",
        "organizations_url": "https://api.github.com/users/jasonbcox/orgs",
        "repos_url": "https://api.github.com/users/jasonbcox/repos",
        "events_url": "https://api.github.com/users/jasonbcox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jasonbcox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "9df09227a2119075d0620bd753884a5b0af1f513",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/9df09227a2119075d0620bd753884a5b0af1f513",
      "created_at": "2020-10-10T03:44:26Z"
    },
    {
      "event": "referenced",
      "id": 3980858595,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM5ODA4NTg1OTU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3980858595",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "93a20c3437baeb095377db0d4234b9bd9aba0233",
      "commit_url": "https://api.github.com/repos/syscoin-core/syscoin/commits/93a20c3437baeb095377db0d4234b9bd9aba0233",
      "created_at": "2020-11-10T20:39:47Z"
    },
    {
      "event": "referenced",
      "id": 4316580923,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQzMTY1ODA5MjM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4316580923",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "3e3efbd77fa7d502a095ccbc4ca51670f77d8b66",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/3e3efbd77fa7d502a095ccbc4ca51670f77d8b66",
      "created_at": "2021-02-10T19:29:30Z"
    },
    {
      "event": "locked",
      "id": 6074087898,
      "node_id": "LOE_lADOABII584fzmfczwAAAAFqCzna",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6074087898",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-15T11:15:12Z",
      "lock_reason": "resolved"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355111113",
      "pull_request_review_id": 328547913,
      "id": 355111113,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NTExMTExMw==",
      "diff_hunk": "@@ -275,6 +275,48 @@ bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool i\n     return true;\n }\n \n+bool LegacyScriptPubKeyMan::FillInactiveChain(const CKeyID seed_id, int64_t index, bool internal)",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "c4ae01c81255c5e0e3b5ca3b979e60a1c531aed1",
      "in_reply_to_id": null,
      "user": {
        "login": "paymog",
        "id": 1986950,
        "node_id": "MDQ6VXNlcjE5ODY5NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1986950?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paymog",
        "html_url": "https://github.com/paymog",
        "followers_url": "https://api.github.com/users/paymog/followers",
        "following_url": "https://api.github.com/users/paymog/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paymog/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paymog/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paymog/subscriptions",
        "organizations_url": "https://api.github.com/users/paymog/orgs",
        "repos_url": "https://api.github.com/users/paymog/repos",
        "events_url": "https://api.github.com/users/paymog/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paymog/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "should `index` and `internal` be made `const` too? ",
      "created_at": "2019-12-07T09:22:41Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r355111113",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355111113"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 283,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355111471",
      "pull_request_review_id": 328547913,
      "id": 355111471,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NTExMTQ3MQ==",
      "diff_hunk": "@@ -275,6 +275,48 @@ bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool i\n     return true;\n }\n \n+bool LegacyScriptPubKeyMan::FillInactiveChain(const CKeyID seed_id, int64_t index, bool internal)",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "c4ae01c81255c5e0e3b5ca3b979e60a1c531aed1",
      "in_reply_to_id": null,
      "user": {
        "login": "paymog",
        "id": 1986950,
        "node_id": "MDQ6VXNlcjE5ODY5NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1986950?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paymog",
        "html_url": "https://github.com/paymog",
        "followers_url": "https://api.github.com/users/paymog/followers",
        "following_url": "https://api.github.com/users/paymog/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paymog/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paymog/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paymog/subscriptions",
        "organizations_url": "https://api.github.com/users/paymog/orgs",
        "repos_url": "https://api.github.com/users/paymog/repos",
        "events_url": "https://api.github.com/users/paymog/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paymog/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Documentation for the function would be nice, whether here or in the header file. What does this function do? What does the return value mean?",
      "created_at": "2019-12-07T09:29:58Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r355111471",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355111471"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 283,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355111542",
      "pull_request_review_id": 328547913,
      "id": 355111542,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NTExMTU0Mg==",
      "diff_hunk": "@@ -275,6 +275,48 @@ bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool i\n     return true;\n }\n \n+bool LegacyScriptPubKeyMan::FillInactiveChain(const CKeyID seed_id, int64_t index, bool internal)\n+{\n+    LOCK(cs_wallet);\n+\n+    if (m_storage.IsLocked()) return false;\n+\n+    auto it = m_inactive_hd_chains.find(seed_id);\n+    if (it == m_inactive_hd_chains.end()) {\n+        return false;\n+    }\n+\n+    CHDChain& chain = it->second;",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 25,
      "original_position": 15,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "c4ae01c81255c5e0e3b5ca3b979e60a1c531aed1",
      "in_reply_to_id": null,
      "user": {
        "login": "paymog",
        "id": 1986950,
        "node_id": "MDQ6VXNlcjE5ODY5NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1986950?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paymog",
        "html_url": "https://github.com/paymog",
        "followers_url": "https://api.github.com/users/paymog/followers",
        "following_url": "https://api.github.com/users/paymog/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paymog/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paymog/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paymog/subscriptions",
        "organizations_url": "https://api.github.com/users/paymog/orgs",
        "repos_url": "https://api.github.com/users/paymog/repos",
        "events_url": "https://api.github.com/users/paymog/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paymog/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`const`? Seems like this isn't be modified later in the function",
      "created_at": "2019-12-07T09:31:26Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r355111542",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355111542"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 307,
      "original_line": 307,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355112025",
      "pull_request_review_id": 328547913,
      "id": 355112025,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NTExMjAyNQ==",
      "diff_hunk": "@@ -275,6 +275,48 @@ bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool i\n     return true;\n }\n \n+bool LegacyScriptPubKeyMan::FillInactiveChain(const CKeyID seed_id, int64_t index, bool internal)\n+{\n+    LOCK(cs_wallet);\n+\n+    if (m_storage.IsLocked()) return false;\n+\n+    auto it = m_inactive_hd_chains.find(seed_id);\n+    if (it == m_inactive_hd_chains.end()) {\n+        return false;\n+    }\n+\n+    CHDChain& chain = it->second;\n+\n+    // Top up key pool\n+    unsigned int target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "c4ae01c81255c5e0e3b5ca3b979e60a1c531aed1",
      "in_reply_to_id": null,
      "user": {
        "login": "paymog",
        "id": 1986950,
        "node_id": "MDQ6VXNlcjE5ODY5NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1986950?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paymog",
        "html_url": "https://github.com/paymog",
        "followers_url": "https://api.github.com/users/paymog/followers",
        "following_url": "https://api.github.com/users/paymog/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paymog/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paymog/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paymog/subscriptions",
        "organizations_url": "https://api.github.com/users/paymog/orgs",
        "repos_url": "https://api.github.com/users/paymog/repos",
        "events_url": "https://api.github.com/users/paymog/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paymog/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "should the type on the left hand side be `int64_t`? It seems `GetArg` returns that type and you're casting `0` to that type too: https://github.com/bitcoin/bitcoin/blob/23cecd6cd56f952c757f469c46d7593c2ffaa419/src/util/system.h#L234",
      "created_at": "2019-12-07T09:40:37Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r355112025",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355112025"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 292,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355112076",
      "pull_request_review_id": 328547913,
      "id": 355112076,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NTExMjA3Ng==",
      "diff_hunk": "@@ -275,6 +275,48 @@ bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool i\n     return true;\n }\n \n+bool LegacyScriptPubKeyMan::FillInactiveChain(const CKeyID seed_id, int64_t index, bool internal)\n+{\n+    LOCK(cs_wallet);\n+\n+    if (m_storage.IsLocked()) return false;\n+\n+    auto it = m_inactive_hd_chains.find(seed_id);\n+    if (it == m_inactive_hd_chains.end()) {\n+        return false;\n+    }\n+\n+    CHDChain& chain = it->second;\n+\n+    // Top up key pool\n+    unsigned int target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n+\n+    // \"size\" of the keypools. Not really the size, actually the difference between index and the chain counter\n+    int64_t kp_size = (internal ? chain.nInternalChainCounter : chain.nExternalChainCounter) - index;\n+\n+    // count amount of available keys (internal, external)\n+    // make sure the keypool of external and internal keys fits the user selected target (-keypool)\n+    // available is determined based on the index given\n+    int64_t missing = std::max(std::max((int64_t) target_size, (int64_t) 1) - kp_size, (int64_t) 0);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 26,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "c4ae01c81255c5e0e3b5ca3b979e60a1c531aed1",
      "in_reply_to_id": null,
      "user": {
        "login": "paymog",
        "id": 1986950,
        "node_id": "MDQ6VXNlcjE5ODY5NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1986950?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paymog",
        "html_url": "https://github.com/paymog",
        "followers_url": "https://api.github.com/users/paymog/followers",
        "following_url": "https://api.github.com/users/paymog/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paymog/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paymog/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paymog/subscriptions",
        "organizations_url": "https://api.github.com/users/paymog/orgs",
        "repos_url": "https://api.github.com/users/paymog/repos",
        "events_url": "https://api.github.com/users/paymog/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paymog/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`(int64_t) 0` is used twice now, should it be made into a constant?",
      "created_at": "2019-12-07T09:42:06Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r355112076",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355112076"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 317,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355112156",
      "pull_request_review_id": 328547913,
      "id": 355112156,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NTExMjE1Ng==",
      "diff_hunk": "@@ -275,6 +275,48 @@ bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool i\n     return true;\n }\n \n+bool LegacyScriptPubKeyMan::FillInactiveChain(const CKeyID seed_id, int64_t index, bool internal)\n+{\n+    LOCK(cs_wallet);\n+\n+    if (m_storage.IsLocked()) return false;\n+\n+    auto it = m_inactive_hd_chains.find(seed_id);\n+    if (it == m_inactive_hd_chains.end()) {\n+        return false;\n+    }\n+\n+    CHDChain& chain = it->second;\n+\n+    // Top up key pool\n+    unsigned int target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n+\n+    // \"size\" of the keypools. Not really the size, actually the difference between index and the chain counter\n+    int64_t kp_size = (internal ? chain.nInternalChainCounter : chain.nExternalChainCounter) - index;\n+\n+    // count amount of available keys (internal, external)\n+    // make sure the keypool of external and internal keys fits the user selected target (-keypool)\n+    // available is determined based on the index given\n+    int64_t missing = std::max(std::max((int64_t) target_size, (int64_t) 1) - kp_size, (int64_t) 0);\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    for (int64_t i = missing; i--;)",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 29,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "c4ae01c81255c5e0e3b5ca3b979e60a1c531aed1",
      "in_reply_to_id": null,
      "user": {
        "login": "paymog",
        "id": 1986950,
        "node_id": "MDQ6VXNlcjE5ODY5NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1986950?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paymog",
        "html_url": "https://github.com/paymog",
        "followers_url": "https://api.github.com/users/paymog/followers",
        "following_url": "https://api.github.com/users/paymog/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paymog/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paymog/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paymog/subscriptions",
        "organizations_url": "https://api.github.com/users/paymog/orgs",
        "repos_url": "https://api.github.com/users/paymog/repos",
        "events_url": "https://api.github.com/users/paymog/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paymog/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "is this missing a termination condition?",
      "created_at": "2019-12-07T09:44:10Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r355112156",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355112156"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 303,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355170609",
      "pull_request_review_id": 328547913,
      "id": 355170609,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NTE3MDYwOQ==",
      "diff_hunk": "@@ -732,12 +787,27 @@ bool LegacyScriptPubKeyMan::AddWatchOnly(const CScript& dest, int64_t nCreateTim\n void LegacyScriptPubKeyMan::SetHDChain(const CHDChain& chain, bool memonly)\n {\n     LOCK(cs_wallet);\n-    if (!memonly && !WalletBatch(m_storage.GetDatabase()).WriteHDChain(chain))\n-        throw std::runtime_error(std::string(__func__) + \": writing chain failed\");\n+    if (!memonly) {\n+        if (!WalletBatch(m_storage.GetDatabase()).WriteHDChain(chain)) {\n+            throw std::runtime_error(std::string(__func__) + \": writing chain failed\");\n+        }\n+        if (!hdChain.seed_id.IsNull()) {\n+            AddInactiveHDChain(hdChain, false);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 80,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "c4ae01c81255c5e0e3b5ca3b979e60a1c531aed1",
      "in_reply_to_id": null,
      "user": {
        "login": "paymog",
        "id": 1986950,
        "node_id": "MDQ6VXNlcjE5ODY5NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1986950?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paymog",
        "html_url": "https://github.com/paymog",
        "followers_url": "https://api.github.com/users/paymog/followers",
        "following_url": "https://api.github.com/users/paymog/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paymog/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paymog/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paymog/subscriptions",
        "organizations_url": "https://api.github.com/users/paymog/orgs",
        "repos_url": "https://api.github.com/users/paymog/repos",
        "events_url": "https://api.github.com/users/paymog/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paymog/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "sanity check: should this be `hdChain` or `chain`?",
      "created_at": "2019-12-08T09:03:09Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r355170609",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355170609"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 796,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355170663",
      "pull_request_review_id": 328547913,
      "id": 355170663,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NTE3MDY2Mw==",
      "diff_hunk": "@@ -732,12 +787,27 @@ bool LegacyScriptPubKeyMan::AddWatchOnly(const CScript& dest, int64_t nCreateTim\n void LegacyScriptPubKeyMan::SetHDChain(const CHDChain& chain, bool memonly)\n {\n     LOCK(cs_wallet);\n-    if (!memonly && !WalletBatch(m_storage.GetDatabase()).WriteHDChain(chain))\n-        throw std::runtime_error(std::string(__func__) + \": writing chain failed\");\n+    if (!memonly) {\n+        if (!WalletBatch(m_storage.GetDatabase()).WriteHDChain(chain)) {\n+            throw std::runtime_error(std::string(__func__) + \": writing chain failed\");\n+        }\n+        if (!hdChain.seed_id.IsNull()) {\n+            AddInactiveHDChain(hdChain, false);\n+        }\n+    }\n \n     hdChain = chain;\n }\n \n+void LegacyScriptPubKeyMan::AddInactiveHDChain(const CHDChain& chain, bool memonly)\n+{\n+    LOCK(cs_wallet);\n+    if (!memonly && !WalletBatch(m_storage.GetDatabase()).WriteInactiveHDChain(chain))\n+        throw std::runtime_error(std::string(__func__) + \": writing inactive chain failed\");\n+\n+    m_inactive_hd_chains[chain.seed_id] = chain;",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 120,
      "original_position": 93,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "c4ae01c81255c5e0e3b5ca3b979e60a1c531aed1",
      "in_reply_to_id": null,
      "user": {
        "login": "paymog",
        "id": 1986950,
        "node_id": "MDQ6VXNlcjE5ODY5NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1986950?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paymog",
        "html_url": "https://github.com/paymog",
        "followers_url": "https://api.github.com/users/paymog/followers",
        "following_url": "https://api.github.com/users/paymog/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paymog/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paymog/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paymog/subscriptions",
        "organizations_url": "https://api.github.com/users/paymog/orgs",
        "repos_url": "https://api.github.com/users/paymog/repos",
        "events_url": "https://api.github.com/users/paymog/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paymog/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "should we check if `chain.seed_id` is null here? ",
      "created_at": "2019-12-08T09:04:15Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r355170663",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355170663"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 917,
      "original_line": 917,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355171237",
      "pull_request_review_id": 328547913,
      "id": 355171237,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NTE3MTIzNw==",
      "diff_hunk": "@@ -732,12 +787,27 @@ bool LegacyScriptPubKeyMan::AddWatchOnly(const CScript& dest, int64_t nCreateTim\n void LegacyScriptPubKeyMan::SetHDChain(const CHDChain& chain, bool memonly)\n {\n     LOCK(cs_wallet);\n-    if (!memonly && !WalletBatch(m_storage.GetDatabase()).WriteHDChain(chain))\n-        throw std::runtime_error(std::string(__func__) + \": writing chain failed\");\n+    if (!memonly) {\n+        if (!WalletBatch(m_storage.GetDatabase()).WriteHDChain(chain)) {",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 103,
      "original_position": 76,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "c4ae01c81255c5e0e3b5ca3b979e60a1c531aed1",
      "in_reply_to_id": null,
      "user": {
        "login": "paymog",
        "id": 1986950,
        "node_id": "MDQ6VXNlcjE5ODY5NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1986950?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/paymog",
        "html_url": "https://github.com/paymog",
        "followers_url": "https://api.github.com/users/paymog/followers",
        "following_url": "https://api.github.com/users/paymog/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/paymog/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/paymog/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/paymog/subscriptions",
        "organizations_url": "https://api.github.com/users/paymog/orgs",
        "repos_url": "https://api.github.com/users/paymog/repos",
        "events_url": "https://api.github.com/users/paymog/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/paymog/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm new to Bitcoin and I'm still learning the testing standards - should there be a test where this exception is expected to be thrown?",
      "created_at": "2019-12-08T09:12:33Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r355171237",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355171237"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 901,
      "original_line": 901,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355199686",
      "pull_request_review_id": 328620017,
      "id": 355199686,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NTE5OTY4Ng==",
      "diff_hunk": "@@ -732,12 +787,27 @@ bool LegacyScriptPubKeyMan::AddWatchOnly(const CScript& dest, int64_t nCreateTim\n void LegacyScriptPubKeyMan::SetHDChain(const CHDChain& chain, bool memonly)\n {\n     LOCK(cs_wallet);\n-    if (!memonly && !WalletBatch(m_storage.GetDatabase()).WriteHDChain(chain))\n-        throw std::runtime_error(std::string(__func__) + \": writing chain failed\");\n+    if (!memonly) {\n+        if (!WalletBatch(m_storage.GetDatabase()).WriteHDChain(chain)) {",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 103,
      "original_position": 76,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "c4ae01c81255c5e0e3b5ca3b979e60a1c531aed1",
      "in_reply_to_id": 355171237,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No. This is only expected to be thrown under corruption and/or hardware failure conditions.",
      "created_at": "2019-12-08T16:56:33Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r355199686",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355199686"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 901,
      "original_line": 901,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355199870",
      "pull_request_review_id": 328620165,
      "id": 355199870,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NTE5OTg3MA==",
      "diff_hunk": "@@ -275,6 +275,48 @@ bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool i\n     return true;\n }\n \n+bool LegacyScriptPubKeyMan::FillInactiveChain(const CKeyID seed_id, int64_t index, bool internal)",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "c4ae01c81255c5e0e3b5ca3b979e60a1c531aed1",
      "in_reply_to_id": 355111113,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think it really matters. They are not references and are primitives.",
      "created_at": "2019-12-08T16:59:21Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r355199870",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355199870"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 283,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355200192",
      "pull_request_review_id": 328620430,
      "id": 355200192,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NTIwMDE5Mg==",
      "diff_hunk": "@@ -275,6 +275,48 @@ bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool i\n     return true;\n }\n \n+bool LegacyScriptPubKeyMan::FillInactiveChain(const CKeyID seed_id, int64_t index, bool internal)\n+{\n+    LOCK(cs_wallet);\n+\n+    if (m_storage.IsLocked()) return false;\n+\n+    auto it = m_inactive_hd_chains.find(seed_id);\n+    if (it == m_inactive_hd_chains.end()) {\n+        return false;\n+    }\n+\n+    CHDChain& chain = it->second;",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 25,
      "original_position": 15,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "c4ae01c81255c5e0e3b5ca3b979e60a1c531aed1",
      "in_reply_to_id": 355111542,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`GenerateNewKey` modifies it.",
      "created_at": "2019-12-08T17:04:27Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r355200192",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355200192"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 307,
      "original_line": 307,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355200227",
      "pull_request_review_id": 328620464,
      "id": 355200227,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NTIwMDIyNw==",
      "diff_hunk": "@@ -275,6 +275,48 @@ bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool i\n     return true;\n }\n \n+bool LegacyScriptPubKeyMan::FillInactiveChain(const CKeyID seed_id, int64_t index, bool internal)\n+{\n+    LOCK(cs_wallet);\n+\n+    if (m_storage.IsLocked()) return false;\n+\n+    auto it = m_inactive_hd_chains.find(seed_id);\n+    if (it == m_inactive_hd_chains.end()) {\n+        return false;\n+    }\n+\n+    CHDChain& chain = it->second;\n+\n+    // Top up key pool\n+    unsigned int target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n+\n+    // \"size\" of the keypools. Not really the size, actually the difference between index and the chain counter\n+    int64_t kp_size = (internal ? chain.nInternalChainCounter : chain.nExternalChainCounter) - index;\n+\n+    // count amount of available keys (internal, external)\n+    // make sure the keypool of external and internal keys fits the user selected target (-keypool)\n+    // available is determined based on the index given\n+    int64_t missing = std::max(std::max((int64_t) target_size, (int64_t) 1) - kp_size, (int64_t) 0);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 26,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "c4ae01c81255c5e0e3b5ca3b979e60a1c531aed1",
      "in_reply_to_id": 355112076,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think it's worth it.",
      "created_at": "2019-12-08T17:05:01Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r355200227",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355200227"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 317,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355200722",
      "pull_request_review_id": 328620840,
      "id": 355200722,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NTIwMDcyMg==",
      "diff_hunk": "@@ -732,12 +787,27 @@ bool LegacyScriptPubKeyMan::AddWatchOnly(const CScript& dest, int64_t nCreateTim\n void LegacyScriptPubKeyMan::SetHDChain(const CHDChain& chain, bool memonly)\n {\n     LOCK(cs_wallet);\n-    if (!memonly && !WalletBatch(m_storage.GetDatabase()).WriteHDChain(chain))\n-        throw std::runtime_error(std::string(__func__) + \": writing chain failed\");\n+    if (!memonly) {\n+        if (!WalletBatch(m_storage.GetDatabase()).WriteHDChain(chain)) {\n+            throw std::runtime_error(std::string(__func__) + \": writing chain failed\");\n+        }\n+        if (!hdChain.seed_id.IsNull()) {\n+            AddInactiveHDChain(hdChain, false);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 80,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "c4ae01c81255c5e0e3b5ca3b979e60a1c531aed1",
      "in_reply_to_id": 355170609,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It is supposed to be `hdChain`.\r\n\r\n`SetHDChain` happens when we change `hdChain`. We want to store what is currently `hdChain` as an inactive seed before we switch it out for the new one. So this is correct, we add it as an inactive chain before it is set to the new `chain`.",
      "created_at": "2019-12-08T17:12:53Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r355200722",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355200722"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 796,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355203595",
      "pull_request_review_id": 328623013,
      "id": 355203595,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NTIwMzU5NQ==",
      "diff_hunk": "@@ -275,6 +275,48 @@ bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool i\n     return true;\n }\n \n+bool LegacyScriptPubKeyMan::FillInactiveChain(const CKeyID seed_id, int64_t index, bool internal)",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "c4ae01c81255c5e0e3b5ca3b979e60a1c531aed1",
      "in_reply_to_id": 355111471,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added a comment.",
      "created_at": "2019-12-08T18:00:50Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r355203595",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355203595"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 283,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355203600",
      "pull_request_review_id": 328623021,
      "id": 355203600,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NTIwMzYwMA==",
      "diff_hunk": "@@ -275,6 +275,48 @@ bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool i\n     return true;\n }\n \n+bool LegacyScriptPubKeyMan::FillInactiveChain(const CKeyID seed_id, int64_t index, bool internal)\n+{\n+    LOCK(cs_wallet);\n+\n+    if (m_storage.IsLocked()) return false;\n+\n+    auto it = m_inactive_hd_chains.find(seed_id);\n+    if (it == m_inactive_hd_chains.end()) {\n+        return false;\n+    }\n+\n+    CHDChain& chain = it->second;\n+\n+    // Top up key pool\n+    unsigned int target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "c4ae01c81255c5e0e3b5ca3b979e60a1c531aed1",
      "in_reply_to_id": 355112025,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2019-12-08T18:00:55Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r355203600",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355203600"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 292,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355203638",
      "pull_request_review_id": 328623064,
      "id": 355203638,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NTIwMzYzOA==",
      "diff_hunk": "@@ -275,6 +275,48 @@ bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool i\n     return true;\n }\n \n+bool LegacyScriptPubKeyMan::FillInactiveChain(const CKeyID seed_id, int64_t index, bool internal)\n+{\n+    LOCK(cs_wallet);\n+\n+    if (m_storage.IsLocked()) return false;\n+\n+    auto it = m_inactive_hd_chains.find(seed_id);\n+    if (it == m_inactive_hd_chains.end()) {\n+        return false;\n+    }\n+\n+    CHDChain& chain = it->second;\n+\n+    // Top up key pool\n+    unsigned int target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n+\n+    // \"size\" of the keypools. Not really the size, actually the difference between index and the chain counter\n+    int64_t kp_size = (internal ? chain.nInternalChainCounter : chain.nExternalChainCounter) - index;\n+\n+    // count amount of available keys (internal, external)\n+    // make sure the keypool of external and internal keys fits the user selected target (-keypool)\n+    // available is determined based on the index given\n+    int64_t missing = std::max(std::max((int64_t) target_size, (int64_t) 1) - kp_size, (int64_t) 0);\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    for (int64_t i = missing; i--;)",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 29,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "c4ae01c81255c5e0e3b5ca3b979e60a1c531aed1",
      "in_reply_to_id": 355112156,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I copied this out of TopUp and technically this is correct. But it's hard to read and reason about, so I've changed it to the standard way of doing for loops.",
      "created_at": "2019-12-08T18:01:18Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r355203638",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355203638"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 303,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355203648",
      "pull_request_review_id": 328623077,
      "id": 355203648,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NTIwMzY0OA==",
      "diff_hunk": "@@ -732,12 +787,27 @@ bool LegacyScriptPubKeyMan::AddWatchOnly(const CScript& dest, int64_t nCreateTim\n void LegacyScriptPubKeyMan::SetHDChain(const CHDChain& chain, bool memonly)\n {\n     LOCK(cs_wallet);\n-    if (!memonly && !WalletBatch(m_storage.GetDatabase()).WriteHDChain(chain))\n-        throw std::runtime_error(std::string(__func__) + \": writing chain failed\");\n+    if (!memonly) {\n+        if (!WalletBatch(m_storage.GetDatabase()).WriteHDChain(chain)) {\n+            throw std::runtime_error(std::string(__func__) + \": writing chain failed\");\n+        }\n+        if (!hdChain.seed_id.IsNull()) {\n+            AddInactiveHDChain(hdChain, false);\n+        }\n+    }\n \n     hdChain = chain;\n }\n \n+void LegacyScriptPubKeyMan::AddInactiveHDChain(const CHDChain& chain, bool memonly)\n+{\n+    LOCK(cs_wallet);\n+    if (!memonly && !WalletBatch(m_storage.GetDatabase()).WriteInactiveHDChain(chain))\n+        throw std::runtime_error(std::string(__func__) + \": writing inactive chain failed\");\n+\n+    m_inactive_hd_chains[chain.seed_id] = chain;",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 120,
      "original_position": 93,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "c4ae01c81255c5e0e3b5ca3b979e60a1c531aed1",
      "in_reply_to_id": 355170663,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It should never be null. I've added an assert to check that.",
      "created_at": "2019-12-08T18:01:35Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r355203648",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355203648"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 917,
      "original_line": 917,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355716017",
      "pull_request_review_id": 329329202,
      "id": 355716017,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NTcxNjAxNw==",
      "diff_hunk": "@@ -732,12 +732,28 @@ bool LegacyScriptPubKeyMan::AddWatchOnly(const CScript& dest, int64_t nCreateTim\n void LegacyScriptPubKeyMan::SetHDChain(const CHDChain& chain, bool memonly)\n {\n     LOCK(cs_wallet);\n-    if (!memonly && !WalletBatch(m_storage.GetDatabase()).WriteHDChain(chain))\n-        throw std::runtime_error(std::string(__func__) + \": writing chain failed\");\n+    if (!memonly) {\n+        if (!WalletBatch(m_storage.GetDatabase()).WriteHDChain(chain)) {\n+            throw std::runtime_error(std::string(__func__) + \": writing chain failed\");\n+        }\n+        if (!hdChain.seed_id.IsNull()) {\n+            AddInactiveHDChain(hdChain, false);\n+        }\n+    }\n \n     hdChain = chain;\n }\n \n+void LegacyScriptPubKeyMan::AddInactiveHDChain(const CHDChain& chain, bool memonly)\n+{\n+    LOCK(cs_wallet);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "cf80607b12ecd4c6b07441557c81d986b6fb12d8",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is needed to take lock again? Can't you `AssertLockHeld` and `EXCLUSIVE_LOCKREQUIRED` instead?",
      "created_at": "2019-12-09T22:17:38Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r355716017",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355716017"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 749,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355717884",
      "pull_request_review_id": 329329202,
      "id": 355717884,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NTcxNzg4NA==",
      "diff_hunk": "@@ -732,12 +732,28 @@ bool LegacyScriptPubKeyMan::AddWatchOnly(const CScript& dest, int64_t nCreateTim\n void LegacyScriptPubKeyMan::SetHDChain(const CHDChain& chain, bool memonly)\n {\n     LOCK(cs_wallet);\n-    if (!memonly && !WalletBatch(m_storage.GetDatabase()).WriteHDChain(chain))\n-        throw std::runtime_error(std::string(__func__) + \": writing chain failed\");\n+    if (!memonly) {\n+        if (!WalletBatch(m_storage.GetDatabase()).WriteHDChain(chain)) {\n+            throw std::runtime_error(std::string(__func__) + \": writing chain failed\");\n+        }\n+        if (!hdChain.seed_id.IsNull()) {\n+            AddInactiveHDChain(hdChain, false);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "cf80607b12ecd4c6b07441557c81d986b6fb12d8",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Pass `memonly`? (even if value is always `false` for now)",
      "created_at": "2019-12-09T22:22:02Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r355717884",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355717884"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 740,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355738392",
      "pull_request_review_id": 329432291,
      "id": 355738392,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NTczODM5Mg==",
      "diff_hunk": "@@ -732,12 +732,28 @@ bool LegacyScriptPubKeyMan::AddWatchOnly(const CScript& dest, int64_t nCreateTim\n void LegacyScriptPubKeyMan::SetHDChain(const CHDChain& chain, bool memonly)\n {\n     LOCK(cs_wallet);\n-    if (!memonly && !WalletBatch(m_storage.GetDatabase()).WriteHDChain(chain))\n-        throw std::runtime_error(std::string(__func__) + \": writing chain failed\");\n+    if (!memonly) {\n+        if (!WalletBatch(m_storage.GetDatabase()).WriteHDChain(chain)) {\n+            throw std::runtime_error(std::string(__func__) + \": writing chain failed\");\n+        }\n+        if (!hdChain.seed_id.IsNull()) {\n+            AddInactiveHDChain(hdChain, false);\n+        }\n+    }\n \n     hdChain = chain;\n }\n \n+void LegacyScriptPubKeyMan::AddInactiveHDChain(const CHDChain& chain, bool memonly)\n+{\n+    LOCK(cs_wallet);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "cf80607b12ecd4c6b07441557c81d986b6fb12d8",
      "in_reply_to_id": 355716017,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2019-12-09T23:17:31Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r355738392",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355738392"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 749,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355738422",
      "pull_request_review_id": 329432447,
      "id": 355738422,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NTczODQyMg==",
      "diff_hunk": "@@ -732,12 +732,28 @@ bool LegacyScriptPubKeyMan::AddWatchOnly(const CScript& dest, int64_t nCreateTim\n void LegacyScriptPubKeyMan::SetHDChain(const CHDChain& chain, bool memonly)\n {\n     LOCK(cs_wallet);\n-    if (!memonly && !WalletBatch(m_storage.GetDatabase()).WriteHDChain(chain))\n-        throw std::runtime_error(std::string(__func__) + \": writing chain failed\");\n+    if (!memonly) {\n+        if (!WalletBatch(m_storage.GetDatabase()).WriteHDChain(chain)) {\n+            throw std::runtime_error(std::string(__func__) + \": writing chain failed\");\n+        }\n+        if (!hdChain.seed_id.IsNull()) {\n+            AddInactiveHDChain(hdChain, false);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "cf80607b12ecd4c6b07441557c81d986b6fb12d8",
      "in_reply_to_id": 355717884,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2019-12-09T23:17:36Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r355738422",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355738422"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 740,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/361878437",
      "pull_request_review_id": 336980010,
      "id": 361878437,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MTg3ODQzNw==",
      "diff_hunk": "@@ -275,6 +275,49 @@ bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool i\n     return true;\n }\n \n+bool LegacyScriptPubKeyMan::FillInactiveChain(const CKeyID seed_id, int64_t index, bool internal)\n+{\n+    LOCK(cs_wallet);\n+\n+    if (m_storage.IsLocked()) return false;\n+\n+    auto it = m_inactive_hd_chains.find(seed_id);\n+    if (it == m_inactive_hd_chains.end()) {\n+        return false;\n+    }\n+\n+    CHDChain& chain = it->second;\n+\n+    // Top up key pool\n+    int64_t target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n+\n+    // \"size\" of the keypools. Not really the size, actually the difference between index and the chain counter\n+    // Since chain counter is 1 based and index is 0 based, one of them needs to be offset by 1.\n+    int64_t kp_size = (internal ? chain.nInternalChainCounter : chain.nExternalChainCounter) - (index + 1);\n+\n+    // count amount of available keys (internal, external)\n+    // make sure the keypool of external and internal keys fits the user selected target (-keypool)\n+    // available is determined based on the index given\n+    int64_t missing = std::max(std::max((int64_t) target_size, (int64_t) 1) - kp_size, (int64_t) 0);\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    for (int64_t i = missing; i > 0; --i)\n+    {",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "fc7a5e4d5341f5a541a68e2717fefc5e0f4d4007",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit, above.",
      "created_at": "2019-12-29T23:21:00Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r361878437",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/361878437"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 305,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/362106027",
      "pull_request_review_id": 337250492,
      "id": 362106027,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjEwNjAyNw==",
      "diff_hunk": "@@ -275,6 +275,49 @@ bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool i\n     return true;\n }\n \n+bool LegacyScriptPubKeyMan::FillInactiveChain(const CKeyID seed_id, int64_t index, bool internal)\n+{\n+    LOCK(cs_wallet);\n+\n+    if (m_storage.IsLocked()) return false;\n+\n+    auto it = m_inactive_hd_chains.find(seed_id);\n+    if (it == m_inactive_hd_chains.end()) {\n+        return false;\n+    }\n+\n+    CHDChain& chain = it->second;\n+\n+    // Top up key pool\n+    int64_t target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n+\n+    // \"size\" of the keypools. Not really the size, actually the difference between index and the chain counter\n+    // Since chain counter is 1 based and index is 0 based, one of them needs to be offset by 1.\n+    int64_t kp_size = (internal ? chain.nInternalChainCounter : chain.nExternalChainCounter) - (index + 1);\n+\n+    // count amount of available keys (internal, external)\n+    // make sure the keypool of external and internal keys fits the user selected target (-keypool)\n+    // available is determined based on the index given\n+    int64_t missing = std::max(std::max((int64_t) target_size, (int64_t) 1) - kp_size, (int64_t) 0);\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    for (int64_t i = missing; i > 0; --i)\n+    {",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "fc7a5e4d5341f5a541a68e2717fefc5e0f4d4007",
      "in_reply_to_id": 361878437,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed",
      "created_at": "2019-12-30T21:57:46Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r362106027",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/362106027"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 305,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392695102",
      "pull_request_review_id": 374818515,
      "id": 392695102,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY5NTEwMg==",
      "diff_hunk": "@@ -153,5 +153,74 @@ def run_test(self):\n         assert_raises_rpc_error(-5, \"Already have this key\", self.nodes[1].sethdseed, False, new_seed)\n         assert_raises_rpc_error(-5, \"Already have this key\", self.nodes[1].sethdseed, False, self.nodes[1].dumpprivkey(self.nodes[1].getnewaddress()))\n \n+        self.log.info('Test sethdseed restoring with keys outside of the intial keypool')",
      "path": "test/functional/wallet_hd.py",
      "position": null,
      "original_position": 4,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "d435512094ccd447ce0d582fa0e9ea85c46ebec3",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: initial",
      "created_at": "2020-03-15T17:34:20Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r392695102",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392695102"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 156,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392695347",
      "pull_request_review_id": 374818515,
      "id": 392695347,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY5NTM0Nw==",
      "diff_hunk": "@@ -153,5 +153,74 @@ def run_test(self):\n         assert_raises_rpc_error(-5, \"Already have this key\", self.nodes[1].sethdseed, False, new_seed)\n         assert_raises_rpc_error(-5, \"Already have this key\", self.nodes[1].sethdseed, False, self.nodes[1].dumpprivkey(self.nodes[1].getnewaddress()))\n \n+        self.log.info('Test sethdseed restoring with keys outside of the intial keypool')\n+        self.nodes[0].generate(10)\n+        # Restart node 1 with keypool of 5 and a different wallet",
      "path": "test/functional/wallet_hd.py",
      "position": null,
      "original_position": 6,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "d435512094ccd447ce0d582fa0e9ea85c46ebec3",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "keypool of 3",
      "created_at": "2020-03-15T17:37:10Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r392695347",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392695347"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 158,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392696785",
      "pull_request_review_id": 374818515,
      "id": 392696785,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY5Njc4NQ==",
      "diff_hunk": "@@ -153,5 +153,74 @@ def run_test(self):\n         assert_raises_rpc_error(-5, \"Already have this key\", self.nodes[1].sethdseed, False, new_seed)\n         assert_raises_rpc_error(-5, \"Already have this key\", self.nodes[1].sethdseed, False, self.nodes[1].dumpprivkey(self.nodes[1].getnewaddress()))\n \n+        self.log.info('Test sethdseed restoring with keys outside of the intial keypool')\n+        self.nodes[0].generate(10)\n+        # Restart node 1 with keypool of 5 and a different wallet\n+        self.nodes[1].createwallet(wallet_name='origin', blank=True)\n+        self.stop_node(1)\n+        self.start_node(1, extra_args=['-keypool=3', '-wallet=origin'])\n+        connect_nodes(self.nodes[0], 1)\n+\n+        # sethdseed restoring and seeing txs to addresses out of the keypool\n+        origin_rpc = self.nodes[1].get_wallet_rpc('origin')\n+        seed = self.nodes[0].dumpprivkey(self.nodes[0].getnewaddress())\n+        origin_rpc.sethdseed(True, seed)\n+\n+        self.nodes[1].createwallet(wallet_name='restore', blank=True)\n+        restore_rpc = self.nodes[1].get_wallet_rpc('restore')\n+        restore_rpc.sethdseed(True, seed)\n+        restore_rpc.sethdseed(True)\n+\n+        # Check persistence of inactive seed\n+        restore_rpc.unloadwallet()\n+        self.nodes[1].loadwallet('restore')\n+        restore_rpc = self.nodes[1].get_wallet_rpc('restore')\n+\n+        # Empty keypool and get an address that is beyond the initial keypool\n+        origin_rpc.getnewaddress()\n+        origin_rpc.getnewaddress()\n+        last_addr = origin_rpc.getnewaddress()\n+        addr = origin_rpc.getnewaddress()",
      "path": "test/functional/wallet_hd.py",
      "position": null,
      "original_position": 31,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "d435512094ccd447ce0d582fa0e9ea85c46ebec3",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "suggestion\r\n```diff\r\n-        # Empty keypool and get an address that is beyond the initial keypool\r\n+        # Empty the origin keypool and get an address that is beyond the initial keypool of 3\r\n         origin_rpc.getnewaddress()\r\n         origin_rpc.getnewaddress()\r\n-        last_addr = origin_rpc.getnewaddress()\r\n-        addr = origin_rpc.getnewaddress()\r\n+        last_addr = origin_rpc.getnewaddress() # last address of initial keypool\r\n+        addr = origin_rpc.getnewaddress() # address beyond initial keypool of 3\r\n```",
      "created_at": "2020-03-15T17:54:53Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r392696785",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392696785"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 183,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392698112",
      "pull_request_review_id": 374818515,
      "id": 392698112,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY5ODExMg==",
      "diff_hunk": "@@ -153,5 +153,74 @@ def run_test(self):\n         assert_raises_rpc_error(-5, \"Already have this key\", self.nodes[1].sethdseed, False, new_seed)\n         assert_raises_rpc_error(-5, \"Already have this key\", self.nodes[1].sethdseed, False, self.nodes[1].dumpprivkey(self.nodes[1].getnewaddress()))\n \n+        self.log.info('Test sethdseed restoring with keys outside of the intial keypool')\n+        self.nodes[0].generate(10)\n+        # Restart node 1 with keypool of 5 and a different wallet\n+        self.nodes[1].createwallet(wallet_name='origin', blank=True)\n+        self.stop_node(1)\n+        self.start_node(1, extra_args=['-keypool=3', '-wallet=origin'])\n+        connect_nodes(self.nodes[0], 1)\n+\n+        # sethdseed restoring and seeing txs to addresses out of the keypool\n+        origin_rpc = self.nodes[1].get_wallet_rpc('origin')\n+        seed = self.nodes[0].dumpprivkey(self.nodes[0].getnewaddress())\n+        origin_rpc.sethdseed(True, seed)\n+\n+        self.nodes[1].createwallet(wallet_name='restore', blank=True)\n+        restore_rpc = self.nodes[1].get_wallet_rpc('restore')\n+        restore_rpc.sethdseed(True, seed)\n+        restore_rpc.sethdseed(True)\n+\n+        # Check persistence of inactive seed\n+        restore_rpc.unloadwallet()\n+        self.nodes[1].loadwallet('restore')\n+        restore_rpc = self.nodes[1].get_wallet_rpc('restore')\n+\n+        # Empty keypool and get an address that is beyond the initial keypool\n+        origin_rpc.getnewaddress()\n+        origin_rpc.getnewaddress()\n+        last_addr = origin_rpc.getnewaddress()\n+        addr = origin_rpc.getnewaddress()\n+\n+        # Check that the restored seed does not have addr but does have last_addr\n+        info = restore_rpc.getaddressinfo(last_addr)\n+        assert_equal(info['ismine'], True)\n+        info = restore_rpc.getaddressinfo(addr)\n+        assert_equal(info['ismine'], False)\n+        info = origin_rpc.getaddressinfo(addr)\n+        assert_equal(info['ismine'], True)",
      "path": "test/functional/wallet_hd.py",
      "position": null,
      "original_position": 39,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "d435512094ccd447ce0d582fa0e9ea85c46ebec3",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "suggest mentioning in order of checks\r\n```diff\r\n-        # Check that the restored seed does not have addr but does have last_addr\r\n+        # Check that the restored seed has last_addr but does not have addr\r\n         info = restore_rpc.getaddressinfo(last_addr)\r\n         assert_equal(info['ismine'], True)\r\n         info = restore_rpc.getaddressinfo(addr)\r\n         assert_equal(info['ismine'], False)\r\n+        # Check that the origin seed does have addr\r\n         info = origin_rpc.getaddressinfo(addr)\r\n         assert_equal(info['ismine'], True)\r\n```",
      "created_at": "2020-03-15T18:10:19Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r392698112",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392698112"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 192,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392698529",
      "pull_request_review_id": 374818515,
      "id": 392698529,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY5ODUyOQ==",
      "diff_hunk": "@@ -153,5 +153,74 @@ def run_test(self):\n         assert_raises_rpc_error(-5, \"Already have this key\", self.nodes[1].sethdseed, False, new_seed)\n         assert_raises_rpc_error(-5, \"Already have this key\", self.nodes[1].sethdseed, False, self.nodes[1].dumpprivkey(self.nodes[1].getnewaddress()))\n \n+        self.log.info('Test sethdseed restoring with keys outside of the intial keypool')\n+        self.nodes[0].generate(10)\n+        # Restart node 1 with keypool of 5 and a different wallet\n+        self.nodes[1].createwallet(wallet_name='origin', blank=True)\n+        self.stop_node(1)\n+        self.start_node(1, extra_args=['-keypool=3', '-wallet=origin'])\n+        connect_nodes(self.nodes[0], 1)\n+\n+        # sethdseed restoring and seeing txs to addresses out of the keypool\n+        origin_rpc = self.nodes[1].get_wallet_rpc('origin')\n+        seed = self.nodes[0].dumpprivkey(self.nodes[0].getnewaddress())\n+        origin_rpc.sethdseed(True, seed)\n+\n+        self.nodes[1].createwallet(wallet_name='restore', blank=True)\n+        restore_rpc = self.nodes[1].get_wallet_rpc('restore')\n+        restore_rpc.sethdseed(True, seed)\n+        restore_rpc.sethdseed(True)",
      "path": "test/functional/wallet_hd.py",
      "position": null,
      "original_position": 20,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "d435512094ccd447ce0d582fa0e9ea85c46ebec3",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This line seems redundant?",
      "created_at": "2020-03-15T18:15:31Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r392698529",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392698529"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 172,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392700316",
      "pull_request_review_id": 374818515,
      "id": 392700316,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjcwMDMxNg==",
      "diff_hunk": "@@ -153,5 +153,74 @@ def run_test(self):\n         assert_raises_rpc_error(-5, \"Already have this key\", self.nodes[1].sethdseed, False, new_seed)\n         assert_raises_rpc_error(-5, \"Already have this key\", self.nodes[1].sethdseed, False, self.nodes[1].dumpprivkey(self.nodes[1].getnewaddress()))\n \n+        self.log.info('Test sethdseed restoring with keys outside of the intial keypool')\n+        self.nodes[0].generate(10)\n+        # Restart node 1 with keypool of 5 and a different wallet\n+        self.nodes[1].createwallet(wallet_name='origin', blank=True)\n+        self.stop_node(1)\n+        self.start_node(1, extra_args=['-keypool=3', '-wallet=origin'])\n+        connect_nodes(self.nodes[0], 1)\n+\n+        # sethdseed restoring and seeing txs to addresses out of the keypool\n+        origin_rpc = self.nodes[1].get_wallet_rpc('origin')\n+        seed = self.nodes[0].dumpprivkey(self.nodes[0].getnewaddress())\n+        origin_rpc.sethdseed(True, seed)\n+\n+        self.nodes[1].createwallet(wallet_name='restore', blank=True)\n+        restore_rpc = self.nodes[1].get_wallet_rpc('restore')\n+        restore_rpc.sethdseed(True, seed)\n+        restore_rpc.sethdseed(True)\n+\n+        # Check persistence of inactive seed\n+        restore_rpc.unloadwallet()\n+        self.nodes[1].loadwallet('restore')\n+        restore_rpc = self.nodes[1].get_wallet_rpc('restore')\n+\n+        # Empty keypool and get an address that is beyond the initial keypool\n+        origin_rpc.getnewaddress()\n+        origin_rpc.getnewaddress()\n+        last_addr = origin_rpc.getnewaddress()\n+        addr = origin_rpc.getnewaddress()\n+\n+        # Check that the restored seed does not have addr but does have last_addr\n+        info = restore_rpc.getaddressinfo(last_addr)\n+        assert_equal(info['ismine'], True)\n+        info = restore_rpc.getaddressinfo(addr)\n+        assert_equal(info['ismine'], False)\n+        info = origin_rpc.getaddressinfo(addr)\n+        assert_equal(info['ismine'], True)\n+\n+        txid = self.nodes[0].sendtoaddress(addr, 1)\n+        origin_rpc.sendrawtransaction(self.nodes[0].gettransaction(txid)['hex'])\n+        self.nodes[0].generate(1)\n+        origin_rpc.gettransaction(txid)\n+        assert_raises_rpc_error(-5, 'Invalid or non-wallet transaction id', restore_rpc.gettransaction, txid)\n+        out_of_kp_txid = txid\n+\n+        txid = self.nodes[0].sendtoaddress(last_addr, 1)\n+        origin_rpc.sendrawtransaction(self.nodes[0].gettransaction(txid)['hex'])\n+        self.nodes[0].generate(1)\n+        origin_rpc.gettransaction(txid)\n+        restore_rpc.gettransaction(txid)\n+        assert_raises_rpc_error(-5, 'Invalid or non-wallet transaction id', restore_rpc.gettransaction, out_of_kp_txid)\n+\n+        restore_rpc.rescanblockchain()\n+        restore_rpc.gettransaction(out_of_kp_txid)\n+        info = restore_rpc.getaddressinfo(addr)\n+        assert_equal(info['ismine'], True)\n+\n+        # Check again that 3 keys were derived.\n+        # Empty keypool and get an address that is beyond the initial keypool\n+        origin_rpc.getnewaddress()\n+        origin_rpc.getnewaddress()\n+        last_addr = origin_rpc.getnewaddress()\n+        addr = origin_rpc.getnewaddress()\n+\n+        # Check that the restored seed does not have addr but does have last_addr",
      "path": "test/functional/wallet_hd.py",
      "position": null,
      "original_position": 67,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "d435512094ccd447ce0d582fa0e9ea85c46ebec3",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "suggest mentioning in order of checks\r\n```diff\r\n-        # Check that the restored seed does not have addr but does have last_addr\r\n+        # Check that the restored seed has last_addr but does not have addr\r\n```\r\n",
      "created_at": "2020-03-15T18:37:10Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r392700316",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392700316"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 219,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392700402",
      "pull_request_review_id": 374818515,
      "id": 392700402,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjcwMDQwMg==",
      "diff_hunk": "@@ -153,5 +153,74 @@ def run_test(self):\n         assert_raises_rpc_error(-5, \"Already have this key\", self.nodes[1].sethdseed, False, new_seed)\n         assert_raises_rpc_error(-5, \"Already have this key\", self.nodes[1].sethdseed, False, self.nodes[1].dumpprivkey(self.nodes[1].getnewaddress()))\n \n+        self.log.info('Test sethdseed restoring with keys outside of the intial keypool')\n+        self.nodes[0].generate(10)\n+        # Restart node 1 with keypool of 5 and a different wallet\n+        self.nodes[1].createwallet(wallet_name='origin', blank=True)\n+        self.stop_node(1)\n+        self.start_node(1, extra_args=['-keypool=3', '-wallet=origin'])\n+        connect_nodes(self.nodes[0], 1)\n+\n+        # sethdseed restoring and seeing txs to addresses out of the keypool\n+        origin_rpc = self.nodes[1].get_wallet_rpc('origin')\n+        seed = self.nodes[0].dumpprivkey(self.nodes[0].getnewaddress())\n+        origin_rpc.sethdseed(True, seed)\n+\n+        self.nodes[1].createwallet(wallet_name='restore', blank=True)\n+        restore_rpc = self.nodes[1].get_wallet_rpc('restore')\n+        restore_rpc.sethdseed(True, seed)\n+        restore_rpc.sethdseed(True)\n+\n+        # Check persistence of inactive seed\n+        restore_rpc.unloadwallet()\n+        self.nodes[1].loadwallet('restore')\n+        restore_rpc = self.nodes[1].get_wallet_rpc('restore')\n+\n+        # Empty keypool and get an address that is beyond the initial keypool\n+        origin_rpc.getnewaddress()\n+        origin_rpc.getnewaddress()\n+        last_addr = origin_rpc.getnewaddress()\n+        addr = origin_rpc.getnewaddress()\n+\n+        # Check that the restored seed does not have addr but does have last_addr\n+        info = restore_rpc.getaddressinfo(last_addr)\n+        assert_equal(info['ismine'], True)\n+        info = restore_rpc.getaddressinfo(addr)\n+        assert_equal(info['ismine'], False)\n+        info = origin_rpc.getaddressinfo(addr)\n+        assert_equal(info['ismine'], True)\n+\n+        txid = self.nodes[0].sendtoaddress(addr, 1)\n+        origin_rpc.sendrawtransaction(self.nodes[0].gettransaction(txid)['hex'])\n+        self.nodes[0].generate(1)\n+        origin_rpc.gettransaction(txid)\n+        assert_raises_rpc_error(-5, 'Invalid or non-wallet transaction id', restore_rpc.gettransaction, txid)\n+        out_of_kp_txid = txid\n+\n+        txid = self.nodes[0].sendtoaddress(last_addr, 1)\n+        origin_rpc.sendrawtransaction(self.nodes[0].gettransaction(txid)['hex'])\n+        self.nodes[0].generate(1)\n+        origin_rpc.gettransaction(txid)\n+        restore_rpc.gettransaction(txid)\n+        assert_raises_rpc_error(-5, 'Invalid or non-wallet transaction id', restore_rpc.gettransaction, out_of_kp_txid)\n+\n+        restore_rpc.rescanblockchain()\n+        restore_rpc.gettransaction(out_of_kp_txid)\n+        info = restore_rpc.getaddressinfo(addr)\n+        assert_equal(info['ismine'], True)",
      "path": "test/functional/wallet_hd.py",
      "position": null,
      "original_position": 58,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "d435512094ccd447ce0d582fa0e9ea85c46ebec3",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Could you add comments for the 3 sections above? ",
      "created_at": "2020-03-15T18:38:09Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r392700402",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392700402"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 218,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392936080",
      "pull_request_review_id": 374818515,
      "id": 392936080,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkzNjA4MA==",
      "diff_hunk": "@@ -918,30 +987,35 @@ void LegacyScriptPubKeyMan::DeriveNewChildKey(WalletBatch &batch, CKeyMetadata&\n         // childIndex | BIP32_HARDENED_KEY_LIMIT = derive childIndex in hardened child-index-range\n         // example: 1 | BIP32_HARDENED_KEY_LIMIT == 0x80000001 == 2147483649\n         if (internal) {\n-            chainChildKey.Derive(childKey, hdChain.nInternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n-            metadata.hdKeypath = \"m/0'/1'/\" + std::to_string(hdChain.nInternalChainCounter) + \"'\";\n+            chainChildKey.Derive(childKey, hd_chain.nInternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n+            metadata.hdKeypath = \"m/0'/1'/\" + std::to_string(hd_chain.nInternalChainCounter) + \"'\";\n             metadata.key_origin.path.push_back(0 | BIP32_HARDENED_KEY_LIMIT);\n             metadata.key_origin.path.push_back(1 | BIP32_HARDENED_KEY_LIMIT);\n-            metadata.key_origin.path.push_back(hdChain.nInternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n-            hdChain.nInternalChainCounter++;\n+            metadata.key_origin.path.push_back(hd_chain.nInternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n+            hd_chain.nInternalChainCounter++;\n         }\n         else {\n-            chainChildKey.Derive(childKey, hdChain.nExternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n-            metadata.hdKeypath = \"m/0'/0'/\" + std::to_string(hdChain.nExternalChainCounter) + \"'\";\n+            chainChildKey.Derive(childKey, hd_chain.nExternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n+            metadata.hdKeypath = \"m/0'/0'/\" + std::to_string(hd_chain.nExternalChainCounter) + \"'\";\n             metadata.key_origin.path.push_back(0 | BIP32_HARDENED_KEY_LIMIT);\n             metadata.key_origin.path.push_back(0 | BIP32_HARDENED_KEY_LIMIT);\n-            metadata.key_origin.path.push_back(hdChain.nExternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n-            hdChain.nExternalChainCounter++;\n+            metadata.key_origin.path.push_back(hd_chain.nExternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n+            hd_chain.nExternalChainCounter++;\n         }\n     } while (HaveKey(childKey.key.GetPubKey().GetID()));\n     secret = childKey.key;\n-    metadata.hd_seed_id = hdChain.seed_id;\n+    metadata.hd_seed_id = hd_chain.seed_id;\n     CKeyID master_id = masterKey.key.GetPubKey().GetID();\n     std::copy(master_id.begin(), master_id.begin() + 4, metadata.key_origin.fingerprint);\n     metadata.has_key_origin = true;\n     // update the chain model in the database\n-    if (!batch.WriteHDChain(hdChain))\n-        throw std::runtime_error(std::string(__func__) + \": Writing HD chain model failed\");\n+    if (hd_chain.seed_id == m_hd_chain.seed_id) {\n+        if (!batch.WriteHDChain(hd_chain))\n+            throw std::runtime_error(std::string(__func__) + \": Writing HD chain model failed\");\n+    } else {\n+        if (!batch.WriteInactiveHDChain(hd_chain))\n+            throw std::runtime_error(std::string(__func__) + \": Writing HD chain model failed\");",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 188,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "d435512094ccd447ce0d582fa0e9ea85c46ebec3",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit suggestion here and line 1014 just above: git grepping indicates these are lowercased elsewhere, except when the message begins with a class name\r\n```diff\r\n- throw std::runtime_error(std::string(__func__) + \": Writing HD chain model failed\");\r\n+ throw std::runtime_error(std::string(__func__) + \": writing HD chain model failed\");\r\n```",
      "created_at": "2020-03-16T10:57:00Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r392936080",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392936080"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1017,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392951184",
      "pull_request_review_id": 374818515,
      "id": 392951184,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk1MTE4NA==",
      "diff_hunk": "@@ -110,6 +110,11 @@ class CHDChain\n         nInternalChainCounter = 0;\n         seed_id.SetNull();\n     }\n+\n+    bool operator==(const CHDChain& chain) const\n+    {\n+        return seed_id == chain.seed_id;\n+    }",
      "path": "src/wallet/walletdb.h",
      "position": 8,
      "original_position": 8,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "d435512094ccd447ce0d582fa0e9ea85c46ebec3",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "should also define `bool operator!=`...?",
      "created_at": "2020-03-16T11:29:52Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r392951184",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392951184"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 123,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392953786",
      "pull_request_review_id": 374818515,
      "id": 392953786,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk1Mzc4Ng==",
      "diff_hunk": "@@ -306,6 +320,18 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n      */\n     bool ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fRequestedInternal);\n \n+    /**\n+     * Like TopUp() but adds keys for inactive HD chains.\n+     * Ensures that there are at least -keypoolsize number of keys derived after the given index.",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 47,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "d435512094ccd447ce0d582fa0e9ea85c46ebec3",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "-keypool (keypoolsize)",
      "created_at": "2020-03-16T11:34:57Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r392953786",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392953786"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 325,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392954955",
      "pull_request_review_id": 374818515,
      "id": 392954955,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk1NDk1NQ==",
      "diff_hunk": "@@ -280,6 +280,48 @@ bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool i\n     return true;\n }\n \n+bool LegacyScriptPubKeyMan::FillInactiveChain(const CKeyID seed_id, int64_t index, bool internal)\n+{\n+    LOCK(cs_KeyStore);\n+\n+    if (m_storage.IsLocked()) return false;\n+\n+    auto it = m_inactive_hd_chains.find(seed_id);\n+    if (it == m_inactive_hd_chains.end()) {\n+        return false;\n+    }\n+\n+    CHDChain& chain = it->second;\n+\n+    // Top up key pool\n+    int64_t target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n+\n+    // \"size\" of the keypools. Not really the size, actually the difference between index and the chain counter\n+    // Since chain counter is 1 based and index is 0 based, one of them needs to be offset by 1.\n+    int64_t kp_size = (internal ? chain.nInternalChainCounter : chain.nExternalChainCounter) - (index + 1);\n+\n+    // count amount of available keys (internal, external)\n+    // make sure the keypool of external and internal keys fits the user selected target (-keypool)",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "d435512094ccd447ce0d582fa0e9ea85c46ebec3",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: s/user selected/user-selected/",
      "created_at": "2020-03-16T11:37:06Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r392954955",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392954955"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 304,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392955591",
      "pull_request_review_id": 374818515,
      "id": 392955591,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk1NTU5MQ==",
      "diff_hunk": "@@ -275,6 +275,48 @@ bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool i\n     return true;\n }\n \n+bool LegacyScriptPubKeyMan::FillInactiveChain(const CKeyID seed_id, int64_t index, bool internal)",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "c4ae01c81255c5e0e3b5ca3b979e60a1c531aed1",
      "in_reply_to_id": 355111113,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "agree with @achow101, see https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#f16-for-in-parameters-pass-cheaply-copied-types-by-value-and-others-by-reference-to-const",
      "created_at": "2020-03-16T11:38:23Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r392955591",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392955591"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 283,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392976340",
      "pull_request_review_id": 374818515,
      "id": 392976340,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk3NjM0MA==",
      "diff_hunk": "@@ -280,6 +280,48 @@ bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool i\n     return true;\n }\n \n+bool LegacyScriptPubKeyMan::FillInactiveChain(const CKeyID seed_id, int64_t index, bool internal)\n+{\n+    LOCK(cs_KeyStore);\n+\n+    if (m_storage.IsLocked()) return false;\n+\n+    auto it = m_inactive_hd_chains.find(seed_id);\n+    if (it == m_inactive_hd_chains.end()) {\n+        return false;\n+    }\n+\n+    CHDChain& chain = it->second;\n+\n+    // Top up key pool\n+    int64_t target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n+\n+    // \"size\" of the keypools. Not really the size, actually the difference between index and the chain counter\n+    // Since chain counter is 1 based and index is 0 based, one of them needs to be offset by 1.\n+    int64_t kp_size = (internal ? chain.nInternalChainCounter : chain.nExternalChainCounter) - (index + 1);\n+\n+    // count amount of available keys (internal, external)\n+    // make sure the keypool of external and internal keys fits the user selected target (-keypool)\n+    // available is determined based on the index given\n+    int64_t missing = std::max(std::max((int64_t) target_size, (int64_t) 1) - kp_size, (int64_t) 0);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "d435512094ccd447ce0d582fa0e9ea85c46ebec3",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "naming/documentation: both here in `FillInactiveChain()` and in `TopUp()`, \"available\" and `missing` seem like opposites",
      "created_at": "2020-03-16T12:20:06Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r392976340",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392976340"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 317,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392980170",
      "pull_request_review_id": 374818515,
      "id": 392980170,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk4MDE3MA==",
      "diff_hunk": "@@ -280,6 +280,48 @@ bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool i\n     return true;\n }\n \n+bool LegacyScriptPubKeyMan::FillInactiveChain(const CKeyID seed_id, int64_t index, bool internal)",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "d435512094ccd447ce0d582fa0e9ea85c46ebec3",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "musing on naming here: consider naming the function `FillUpInactiveHDChain` or `TopUpInactiveHDChain`:\r\n- to say it's an HD chain (which shows why no need to check `!CanGenerateKeys()` here IIUC)\r\n- naming similar to `AddInactiveHDChain` and `WriteInActiveHDChain`\r\n- best to avoid \"I\" next to \"ll\"\r\n- and if desired, show similarity to `TopUp` as the functions are similar, unless you don't want grepping for TopUp to return both",
      "created_at": "2020-03-16T12:25:29Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r392980170",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/392980170"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 283,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393019229",
      "pull_request_review_id": 374818515,
      "id": 393019229,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAxOTIyOQ==",
      "diff_hunk": "@@ -153,5 +153,74 @@ def run_test(self):\n         assert_raises_rpc_error(-5, \"Already have this key\", self.nodes[1].sethdseed, False, new_seed)\n         assert_raises_rpc_error(-5, \"Already have this key\", self.nodes[1].sethdseed, False, self.nodes[1].dumpprivkey(self.nodes[1].getnewaddress()))\n \n+        self.log.info('Test sethdseed restoring with keys outside of the intial keypool')\n+        self.nodes[0].generate(10)\n+        # Restart node 1 with keypool of 5 and a different wallet\n+        self.nodes[1].createwallet(wallet_name='origin', blank=True)\n+        self.stop_node(1)\n+        self.start_node(1, extra_args=['-keypool=3', '-wallet=origin'])\n+        connect_nodes(self.nodes[0], 1)\n+\n+        # sethdseed restoring and seeing txs to addresses out of the keypool\n+        origin_rpc = self.nodes[1].get_wallet_rpc('origin')\n+        seed = self.nodes[0].dumpprivkey(self.nodes[0].getnewaddress())\n+        origin_rpc.sethdseed(True, seed)\n+\n+        self.nodes[1].createwallet(wallet_name='restore', blank=True)\n+        restore_rpc = self.nodes[1].get_wallet_rpc('restore')\n+        restore_rpc.sethdseed(True, seed)\n+        restore_rpc.sethdseed(True)\n+\n+        # Check persistence of inactive seed\n+        restore_rpc.unloadwallet()\n+        self.nodes[1].loadwallet('restore')\n+        restore_rpc = self.nodes[1].get_wallet_rpc('restore')\n+\n+        # Empty keypool and get an address that is beyond the initial keypool\n+        origin_rpc.getnewaddress()\n+        origin_rpc.getnewaddress()\n+        last_addr = origin_rpc.getnewaddress()\n+        addr = origin_rpc.getnewaddress()\n+\n+        # Check that the restored seed does not have addr but does have last_addr\n+        info = restore_rpc.getaddressinfo(last_addr)\n+        assert_equal(info['ismine'], True)\n+        info = restore_rpc.getaddressinfo(addr)\n+        assert_equal(info['ismine'], False)\n+        info = origin_rpc.getaddressinfo(addr)\n+        assert_equal(info['ismine'], True)\n+\n+        txid = self.nodes[0].sendtoaddress(addr, 1)\n+        origin_rpc.sendrawtransaction(self.nodes[0].gettransaction(txid)['hex'])\n+        self.nodes[0].generate(1)\n+        origin_rpc.gettransaction(txid)\n+        assert_raises_rpc_error(-5, 'Invalid or non-wallet transaction id', restore_rpc.gettransaction, txid)\n+        out_of_kp_txid = txid\n+\n+        txid = self.nodes[0].sendtoaddress(last_addr, 1)\n+        origin_rpc.sendrawtransaction(self.nodes[0].gettransaction(txid)['hex'])\n+        self.nodes[0].generate(1)\n+        origin_rpc.gettransaction(txid)\n+        restore_rpc.gettransaction(txid)\n+        assert_raises_rpc_error(-5, 'Invalid or non-wallet transaction id', restore_rpc.gettransaction, out_of_kp_txid)\n+\n+        restore_rpc.rescanblockchain()\n+        restore_rpc.gettransaction(out_of_kp_txid)\n+        info = restore_rpc.getaddressinfo(addr)\n+        assert_equal(info['ismine'], True)\n+\n+        # Check again that 3 keys were derived.\n+        # Empty keypool and get an address that is beyond the initial keypool\n+        origin_rpc.getnewaddress()\n+        origin_rpc.getnewaddress()\n+        last_addr = origin_rpc.getnewaddress()\n+        addr = origin_rpc.getnewaddress()\n+\n+        # Check that the restored seed does not have addr but does have last_addr\n+        info = restore_rpc.getaddressinfo(last_addr)\n+        assert_equal(info['ismine'], True)\n+        info = restore_rpc.getaddressinfo(addr)\n+        assert_equal(info['ismine'], False)\n+",
      "path": "test/functional/wallet_hd.py",
      "position": 99,
      "original_position": 72,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "d435512094ccd447ce0d582fa0e9ea85c46ebec3",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "for info I appended these checks after the rescan so that all checks before the rescan are also repeated after it, and all still pass\r\n```diff\r\n         assert_equal(info['ismine'], False)\r\n+        info = origin_rpc.getaddressinfo(addr)\r\n+        assert_equal(info['ismine'], True)\r\n+\r\n+        txid = self.nodes[0].sendtoaddress(addr, 1)\r\n+        origin_rpc.sendrawtransaction(self.nodes[0].gettransaction(txid)['hex'])\r\n+        self.nodes[0].generate(1)\r\n+        origin_rpc.gettransaction(txid)\r\n+        assert_raises_rpc_error(-5, 'Invalid or non-wallet transaction id', restore_rpc.gettransaction, txid)\r\n+        out_of_kp_txid = txid\r\n+\r\n+        txid = self.nodes[0].sendtoaddress(last_addr, 1)\r\n+        origin_rpc.sendrawtransaction(self.nodes[0].gettransaction(txid)['hex'])\r\n+        self.nodes[0].generate(1)\r\n+        origin_rpc.gettransaction(txid)\r\n+        restore_rpc.gettransaction(txid)\r\n+        assert_raises_rpc_error(-5, 'Invalid or non-wallet transaction id', restore_rpc.gettransaction, out_of_kp_txid)\r\n+\r\n+        restore_rpc.rescanblockchain()\r\n+        restore_rpc.gettransaction(out_of_kp_txid)\r\n+        info = restore_rpc.getaddressinfo(addr)\r\n+        assert_equal(info['ismine'], True)\r\n \r\n if __name__ == '__main__':\r\n     WalletHDTest().main ()\r\n```",
      "created_at": "2020-03-16T13:24:30Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r393019229",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393019229"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 268,
      "original_line": 268,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393029747",
      "pull_request_review_id": 374818515,
      "id": 393029747,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAyOTc0Nw==",
      "diff_hunk": "@@ -153,5 +153,74 @@ def run_test(self):\n         assert_raises_rpc_error(-5, \"Already have this key\", self.nodes[1].sethdseed, False, new_seed)\n         assert_raises_rpc_error(-5, \"Already have this key\", self.nodes[1].sethdseed, False, self.nodes[1].dumpprivkey(self.nodes[1].getnewaddress()))\n \n+        self.log.info('Test sethdseed restoring with keys outside of the intial keypool')\n+        self.nodes[0].generate(10)\n+        # Restart node 1 with keypool of 5 and a different wallet\n+        self.nodes[1].createwallet(wallet_name='origin', blank=True)\n+        self.stop_node(1)\n+        self.start_node(1, extra_args=['-keypool=3', '-wallet=origin'])\n+        connect_nodes(self.nodes[0], 1)\n+\n+        # sethdseed restoring and seeing txs to addresses out of the keypool\n+        origin_rpc = self.nodes[1].get_wallet_rpc('origin')\n+        seed = self.nodes[0].dumpprivkey(self.nodes[0].getnewaddress())\n+        origin_rpc.sethdseed(True, seed)\n+\n+        self.nodes[1].createwallet(wallet_name='restore', blank=True)\n+        restore_rpc = self.nodes[1].get_wallet_rpc('restore')\n+        restore_rpc.sethdseed(True, seed)\n+        restore_rpc.sethdseed(True)\n+\n+        # Check persistence of inactive seed\n+        restore_rpc.unloadwallet()\n+        self.nodes[1].loadwallet('restore')\n+        restore_rpc = self.nodes[1].get_wallet_rpc('restore')\n+\n+        # Empty keypool and get an address that is beyond the initial keypool\n+        origin_rpc.getnewaddress()\n+        origin_rpc.getnewaddress()\n+        last_addr = origin_rpc.getnewaddress()\n+        addr = origin_rpc.getnewaddress()\n+\n+        # Check that the restored seed does not have addr but does have last_addr\n+        info = restore_rpc.getaddressinfo(last_addr)\n+        assert_equal(info['ismine'], True)\n+        info = restore_rpc.getaddressinfo(addr)\n+        assert_equal(info['ismine'], False)\n+        info = origin_rpc.getaddressinfo(addr)\n+        assert_equal(info['ismine'], True)\n+\n+        txid = self.nodes[0].sendtoaddress(addr, 1)\n+        origin_rpc.sendrawtransaction(self.nodes[0].gettransaction(txid)['hex'])\n+        self.nodes[0].generate(1)\n+        origin_rpc.gettransaction(txid)\n+        assert_raises_rpc_error(-5, 'Invalid or non-wallet transaction id', restore_rpc.gettransaction, txid)\n+        out_of_kp_txid = txid\n+\n+        txid = self.nodes[0].sendtoaddress(last_addr, 1)\n+        origin_rpc.sendrawtransaction(self.nodes[0].gettransaction(txid)['hex'])\n+        self.nodes[0].generate(1)\n+        origin_rpc.gettransaction(txid)\n+        restore_rpc.gettransaction(txid)\n+        assert_raises_rpc_error(-5, 'Invalid or non-wallet transaction id', restore_rpc.gettransaction, out_of_kp_txid)\n+\n+        restore_rpc.rescanblockchain()\n+        restore_rpc.gettransaction(out_of_kp_txid)",
      "path": "test/functional/wallet_hd.py",
      "position": null,
      "original_position": 56,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "d435512094ccd447ce0d582fa0e9ea85c46ebec3",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "On current master d402c1e4d, the new test fails here after the rescan with `Invalid or non-wallet transaction id (-5)`, is this where it fails for you, and should it not fail on one of the assertions?",
      "created_at": "2020-03-16T13:41:15Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r393029747",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393029747"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 216,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393151113",
      "pull_request_review_id": 375380020,
      "id": 393151113,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1MTExMw==",
      "diff_hunk": "@@ -153,5 +153,74 @@ def run_test(self):\n         assert_raises_rpc_error(-5, \"Already have this key\", self.nodes[1].sethdseed, False, new_seed)\n         assert_raises_rpc_error(-5, \"Already have this key\", self.nodes[1].sethdseed, False, self.nodes[1].dumpprivkey(self.nodes[1].getnewaddress()))\n \n+        self.log.info('Test sethdseed restoring with keys outside of the intial keypool')\n+        self.nodes[0].generate(10)\n+        # Restart node 1 with keypool of 5 and a different wallet\n+        self.nodes[1].createwallet(wallet_name='origin', blank=True)\n+        self.stop_node(1)\n+        self.start_node(1, extra_args=['-keypool=3', '-wallet=origin'])\n+        connect_nodes(self.nodes[0], 1)\n+\n+        # sethdseed restoring and seeing txs to addresses out of the keypool\n+        origin_rpc = self.nodes[1].get_wallet_rpc('origin')\n+        seed = self.nodes[0].dumpprivkey(self.nodes[0].getnewaddress())\n+        origin_rpc.sethdseed(True, seed)\n+\n+        self.nodes[1].createwallet(wallet_name='restore', blank=True)\n+        restore_rpc = self.nodes[1].get_wallet_rpc('restore')\n+        restore_rpc.sethdseed(True, seed)\n+        restore_rpc.sethdseed(True)\n+\n+        # Check persistence of inactive seed\n+        restore_rpc.unloadwallet()\n+        self.nodes[1].loadwallet('restore')\n+        restore_rpc = self.nodes[1].get_wallet_rpc('restore')\n+\n+        # Empty keypool and get an address that is beyond the initial keypool\n+        origin_rpc.getnewaddress()\n+        origin_rpc.getnewaddress()\n+        last_addr = origin_rpc.getnewaddress()\n+        addr = origin_rpc.getnewaddress()\n+\n+        # Check that the restored seed does not have addr but does have last_addr\n+        info = restore_rpc.getaddressinfo(last_addr)\n+        assert_equal(info['ismine'], True)\n+        info = restore_rpc.getaddressinfo(addr)\n+        assert_equal(info['ismine'], False)\n+        info = origin_rpc.getaddressinfo(addr)\n+        assert_equal(info['ismine'], True)\n+\n+        txid = self.nodes[0].sendtoaddress(addr, 1)\n+        origin_rpc.sendrawtransaction(self.nodes[0].gettransaction(txid)['hex'])\n+        self.nodes[0].generate(1)\n+        origin_rpc.gettransaction(txid)\n+        assert_raises_rpc_error(-5, 'Invalid or non-wallet transaction id', restore_rpc.gettransaction, txid)\n+        out_of_kp_txid = txid\n+\n+        txid = self.nodes[0].sendtoaddress(last_addr, 1)\n+        origin_rpc.sendrawtransaction(self.nodes[0].gettransaction(txid)['hex'])\n+        self.nodes[0].generate(1)\n+        origin_rpc.gettransaction(txid)\n+        restore_rpc.gettransaction(txid)\n+        assert_raises_rpc_error(-5, 'Invalid or non-wallet transaction id', restore_rpc.gettransaction, out_of_kp_txid)\n+\n+        restore_rpc.rescanblockchain()\n+        restore_rpc.gettransaction(out_of_kp_txid)",
      "path": "test/functional/wallet_hd.py",
      "position": null,
      "original_position": 56,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "d435512094ccd447ce0d582fa0e9ea85c46ebec3",
      "in_reply_to_id": 393029747,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No, this is the correct place for it to fail. The asserts above should pass because on mater, we still have the keypool of 3 so all the things existing/not existing is the same. The difference is that the `out_of_kp_txid` is not seen by master because it uses a key that is out of the original keypool. Since master does not continue to extend the original keypool, it fails to detect `out_of_kp_txid` so it is supposed to fail here.",
      "created_at": "2020-03-16T16:27:39Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r393151113",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393151113"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 216,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393152055",
      "pull_request_review_id": 375381245,
      "id": 393152055,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1MjA1NQ==",
      "diff_hunk": "@@ -153,5 +153,74 @@ def run_test(self):\n         assert_raises_rpc_error(-5, \"Already have this key\", self.nodes[1].sethdseed, False, new_seed)\n         assert_raises_rpc_error(-5, \"Already have this key\", self.nodes[1].sethdseed, False, self.nodes[1].dumpprivkey(self.nodes[1].getnewaddress()))\n \n+        self.log.info('Test sethdseed restoring with keys outside of the intial keypool')\n+        self.nodes[0].generate(10)\n+        # Restart node 1 with keypool of 5 and a different wallet\n+        self.nodes[1].createwallet(wallet_name='origin', blank=True)\n+        self.stop_node(1)\n+        self.start_node(1, extra_args=['-keypool=3', '-wallet=origin'])\n+        connect_nodes(self.nodes[0], 1)\n+\n+        # sethdseed restoring and seeing txs to addresses out of the keypool\n+        origin_rpc = self.nodes[1].get_wallet_rpc('origin')\n+        seed = self.nodes[0].dumpprivkey(self.nodes[0].getnewaddress())\n+        origin_rpc.sethdseed(True, seed)\n+\n+        self.nodes[1].createwallet(wallet_name='restore', blank=True)\n+        restore_rpc = self.nodes[1].get_wallet_rpc('restore')\n+        restore_rpc.sethdseed(True, seed)\n+        restore_rpc.sethdseed(True)",
      "path": "test/functional/wallet_hd.py",
      "position": null,
      "original_position": 20,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "d435512094ccd447ce0d582fa0e9ea85c46ebec3",
      "in_reply_to_id": 392698529,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It is not. We are first setting the original seed (we set it to make sure it is shared), then setting a new seed to simulate a seed rotation.",
      "created_at": "2020-03-16T16:29:06Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r393152055",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393152055"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 172,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393187069",
      "pull_request_review_id": 375425890,
      "id": 393187069,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE4NzA2OQ==",
      "diff_hunk": "@@ -153,5 +153,74 @@ def run_test(self):\n         assert_raises_rpc_error(-5, \"Already have this key\", self.nodes[1].sethdseed, False, new_seed)\n         assert_raises_rpc_error(-5, \"Already have this key\", self.nodes[1].sethdseed, False, self.nodes[1].dumpprivkey(self.nodes[1].getnewaddress()))\n \n+        self.log.info('Test sethdseed restoring with keys outside of the intial keypool')\n+        self.nodes[0].generate(10)\n+        # Restart node 1 with keypool of 5 and a different wallet\n+        self.nodes[1].createwallet(wallet_name='origin', blank=True)\n+        self.stop_node(1)\n+        self.start_node(1, extra_args=['-keypool=3', '-wallet=origin'])\n+        connect_nodes(self.nodes[0], 1)\n+\n+        # sethdseed restoring and seeing txs to addresses out of the keypool\n+        origin_rpc = self.nodes[1].get_wallet_rpc('origin')\n+        seed = self.nodes[0].dumpprivkey(self.nodes[0].getnewaddress())\n+        origin_rpc.sethdseed(True, seed)\n+\n+        self.nodes[1].createwallet(wallet_name='restore', blank=True)\n+        restore_rpc = self.nodes[1].get_wallet_rpc('restore')\n+        restore_rpc.sethdseed(True, seed)\n+        restore_rpc.sethdseed(True)",
      "path": "test/functional/wallet_hd.py",
      "position": null,
      "original_position": 20,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "d435512094ccd447ce0d582fa0e9ea85c46ebec3",
      "in_reply_to_id": 392698529,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oh, right -- reading the cli help again, both calls are flushing; the first call sets the seed with the passed `seed` value and the second call sets a random seed. Maybe add a comment to explain the intention or simulation.",
      "created_at": "2020-03-16T17:17:32Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r393187069",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393187069"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 172,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393189292",
      "pull_request_review_id": 375428818,
      "id": 393189292,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE4OTI5Mg==",
      "diff_hunk": "@@ -153,5 +153,74 @@ def run_test(self):\n         assert_raises_rpc_error(-5, \"Already have this key\", self.nodes[1].sethdseed, False, new_seed)\n         assert_raises_rpc_error(-5, \"Already have this key\", self.nodes[1].sethdseed, False, self.nodes[1].dumpprivkey(self.nodes[1].getnewaddress()))\n \n+        self.log.info('Test sethdseed restoring with keys outside of the intial keypool')\n+        self.nodes[0].generate(10)\n+        # Restart node 1 with keypool of 5 and a different wallet\n+        self.nodes[1].createwallet(wallet_name='origin', blank=True)\n+        self.stop_node(1)\n+        self.start_node(1, extra_args=['-keypool=3', '-wallet=origin'])\n+        connect_nodes(self.nodes[0], 1)\n+\n+        # sethdseed restoring and seeing txs to addresses out of the keypool\n+        origin_rpc = self.nodes[1].get_wallet_rpc('origin')\n+        seed = self.nodes[0].dumpprivkey(self.nodes[0].getnewaddress())\n+        origin_rpc.sethdseed(True, seed)\n+\n+        self.nodes[1].createwallet(wallet_name='restore', blank=True)\n+        restore_rpc = self.nodes[1].get_wallet_rpc('restore')\n+        restore_rpc.sethdseed(True, seed)\n+        restore_rpc.sethdseed(True)\n+\n+        # Check persistence of inactive seed\n+        restore_rpc.unloadwallet()\n+        self.nodes[1].loadwallet('restore')\n+        restore_rpc = self.nodes[1].get_wallet_rpc('restore')\n+\n+        # Empty keypool and get an address that is beyond the initial keypool\n+        origin_rpc.getnewaddress()\n+        origin_rpc.getnewaddress()\n+        last_addr = origin_rpc.getnewaddress()\n+        addr = origin_rpc.getnewaddress()\n+\n+        # Check that the restored seed does not have addr but does have last_addr\n+        info = restore_rpc.getaddressinfo(last_addr)\n+        assert_equal(info['ismine'], True)\n+        info = restore_rpc.getaddressinfo(addr)\n+        assert_equal(info['ismine'], False)\n+        info = origin_rpc.getaddressinfo(addr)\n+        assert_equal(info['ismine'], True)\n+\n+        txid = self.nodes[0].sendtoaddress(addr, 1)\n+        origin_rpc.sendrawtransaction(self.nodes[0].gettransaction(txid)['hex'])\n+        self.nodes[0].generate(1)\n+        origin_rpc.gettransaction(txid)\n+        assert_raises_rpc_error(-5, 'Invalid or non-wallet transaction id', restore_rpc.gettransaction, txid)\n+        out_of_kp_txid = txid\n+\n+        txid = self.nodes[0].sendtoaddress(last_addr, 1)\n+        origin_rpc.sendrawtransaction(self.nodes[0].gettransaction(txid)['hex'])\n+        self.nodes[0].generate(1)\n+        origin_rpc.gettransaction(txid)\n+        restore_rpc.gettransaction(txid)\n+        assert_raises_rpc_error(-5, 'Invalid or non-wallet transaction id', restore_rpc.gettransaction, out_of_kp_txid)\n+\n+        restore_rpc.rescanblockchain()\n+        restore_rpc.gettransaction(out_of_kp_txid)",
      "path": "test/functional/wallet_hd.py",
      "position": null,
      "original_position": 56,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "d435512094ccd447ce0d582fa0e9ea85c46ebec3",
      "in_reply_to_id": 393029747,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ok thanks. Upgraded the Concept ACK to an ACK with non-blocking comments.",
      "created_at": "2020-03-16T17:21:22Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r393189292",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393189292"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 216,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393202958",
      "pull_request_review_id": 375446101,
      "id": 393202958,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIwMjk1OA==",
      "diff_hunk": "@@ -153,5 +153,74 @@ def run_test(self):\n         assert_raises_rpc_error(-5, \"Already have this key\", self.nodes[1].sethdseed, False, new_seed)\n         assert_raises_rpc_error(-5, \"Already have this key\", self.nodes[1].sethdseed, False, self.nodes[1].dumpprivkey(self.nodes[1].getnewaddress()))\n \n+        self.log.info('Test sethdseed restoring with keys outside of the intial keypool')",
      "path": "test/functional/wallet_hd.py",
      "position": null,
      "original_position": 4,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "d435512094ccd447ce0d582fa0e9ea85c46ebec3",
      "in_reply_to_id": 392695102,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-03-16T17:44:20Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r393202958",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393202958"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 156,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393202998",
      "pull_request_review_id": 375446162,
      "id": 393202998,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIwMjk5OA==",
      "diff_hunk": "@@ -153,5 +153,74 @@ def run_test(self):\n         assert_raises_rpc_error(-5, \"Already have this key\", self.nodes[1].sethdseed, False, new_seed)\n         assert_raises_rpc_error(-5, \"Already have this key\", self.nodes[1].sethdseed, False, self.nodes[1].dumpprivkey(self.nodes[1].getnewaddress()))\n \n+        self.log.info('Test sethdseed restoring with keys outside of the intial keypool')\n+        self.nodes[0].generate(10)\n+        # Restart node 1 with keypool of 5 and a different wallet",
      "path": "test/functional/wallet_hd.py",
      "position": null,
      "original_position": 6,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "d435512094ccd447ce0d582fa0e9ea85c46ebec3",
      "in_reply_to_id": 392695347,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-03-16T17:44:25Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r393202998",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393202998"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 158,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393203066",
      "pull_request_review_id": 375446238,
      "id": 393203066,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIwMzA2Ng==",
      "diff_hunk": "@@ -153,5 +153,74 @@ def run_test(self):\n         assert_raises_rpc_error(-5, \"Already have this key\", self.nodes[1].sethdseed, False, new_seed)\n         assert_raises_rpc_error(-5, \"Already have this key\", self.nodes[1].sethdseed, False, self.nodes[1].dumpprivkey(self.nodes[1].getnewaddress()))\n \n+        self.log.info('Test sethdseed restoring with keys outside of the intial keypool')\n+        self.nodes[0].generate(10)\n+        # Restart node 1 with keypool of 5 and a different wallet\n+        self.nodes[1].createwallet(wallet_name='origin', blank=True)\n+        self.stop_node(1)\n+        self.start_node(1, extra_args=['-keypool=3', '-wallet=origin'])\n+        connect_nodes(self.nodes[0], 1)\n+\n+        # sethdseed restoring and seeing txs to addresses out of the keypool\n+        origin_rpc = self.nodes[1].get_wallet_rpc('origin')\n+        seed = self.nodes[0].dumpprivkey(self.nodes[0].getnewaddress())\n+        origin_rpc.sethdseed(True, seed)\n+\n+        self.nodes[1].createwallet(wallet_name='restore', blank=True)\n+        restore_rpc = self.nodes[1].get_wallet_rpc('restore')\n+        restore_rpc.sethdseed(True, seed)\n+        restore_rpc.sethdseed(True)\n+\n+        # Check persistence of inactive seed\n+        restore_rpc.unloadwallet()\n+        self.nodes[1].loadwallet('restore')\n+        restore_rpc = self.nodes[1].get_wallet_rpc('restore')\n+\n+        # Empty keypool and get an address that is beyond the initial keypool\n+        origin_rpc.getnewaddress()\n+        origin_rpc.getnewaddress()\n+        last_addr = origin_rpc.getnewaddress()\n+        addr = origin_rpc.getnewaddress()",
      "path": "test/functional/wallet_hd.py",
      "position": null,
      "original_position": 31,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "d435512094ccd447ce0d582fa0e9ea85c46ebec3",
      "in_reply_to_id": 392696785,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-03-16T17:44:30Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r393203066",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393203066"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 183,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393203131",
      "pull_request_review_id": 375446331,
      "id": 393203131,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIwMzEzMQ==",
      "diff_hunk": "@@ -153,5 +153,74 @@ def run_test(self):\n         assert_raises_rpc_error(-5, \"Already have this key\", self.nodes[1].sethdseed, False, new_seed)\n         assert_raises_rpc_error(-5, \"Already have this key\", self.nodes[1].sethdseed, False, self.nodes[1].dumpprivkey(self.nodes[1].getnewaddress()))\n \n+        self.log.info('Test sethdseed restoring with keys outside of the intial keypool')\n+        self.nodes[0].generate(10)\n+        # Restart node 1 with keypool of 5 and a different wallet\n+        self.nodes[1].createwallet(wallet_name='origin', blank=True)\n+        self.stop_node(1)\n+        self.start_node(1, extra_args=['-keypool=3', '-wallet=origin'])\n+        connect_nodes(self.nodes[0], 1)\n+\n+        # sethdseed restoring and seeing txs to addresses out of the keypool\n+        origin_rpc = self.nodes[1].get_wallet_rpc('origin')\n+        seed = self.nodes[0].dumpprivkey(self.nodes[0].getnewaddress())\n+        origin_rpc.sethdseed(True, seed)\n+\n+        self.nodes[1].createwallet(wallet_name='restore', blank=True)\n+        restore_rpc = self.nodes[1].get_wallet_rpc('restore')\n+        restore_rpc.sethdseed(True, seed)\n+        restore_rpc.sethdseed(True)\n+\n+        # Check persistence of inactive seed\n+        restore_rpc.unloadwallet()\n+        self.nodes[1].loadwallet('restore')\n+        restore_rpc = self.nodes[1].get_wallet_rpc('restore')\n+\n+        # Empty keypool and get an address that is beyond the initial keypool\n+        origin_rpc.getnewaddress()\n+        origin_rpc.getnewaddress()\n+        last_addr = origin_rpc.getnewaddress()\n+        addr = origin_rpc.getnewaddress()\n+\n+        # Check that the restored seed does not have addr but does have last_addr\n+        info = restore_rpc.getaddressinfo(last_addr)\n+        assert_equal(info['ismine'], True)\n+        info = restore_rpc.getaddressinfo(addr)\n+        assert_equal(info['ismine'], False)\n+        info = origin_rpc.getaddressinfo(addr)\n+        assert_equal(info['ismine'], True)",
      "path": "test/functional/wallet_hd.py",
      "position": null,
      "original_position": 39,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "d435512094ccd447ce0d582fa0e9ea85c46ebec3",
      "in_reply_to_id": 392698112,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-03-16T17:44:37Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r393203131",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393203131"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 192,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393203207",
      "pull_request_review_id": 375446420,
      "id": 393203207,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIwMzIwNw==",
      "diff_hunk": "@@ -153,5 +153,74 @@ def run_test(self):\n         assert_raises_rpc_error(-5, \"Already have this key\", self.nodes[1].sethdseed, False, new_seed)\n         assert_raises_rpc_error(-5, \"Already have this key\", self.nodes[1].sethdseed, False, self.nodes[1].dumpprivkey(self.nodes[1].getnewaddress()))\n \n+        self.log.info('Test sethdseed restoring with keys outside of the intial keypool')\n+        self.nodes[0].generate(10)\n+        # Restart node 1 with keypool of 5 and a different wallet\n+        self.nodes[1].createwallet(wallet_name='origin', blank=True)\n+        self.stop_node(1)\n+        self.start_node(1, extra_args=['-keypool=3', '-wallet=origin'])\n+        connect_nodes(self.nodes[0], 1)\n+\n+        # sethdseed restoring and seeing txs to addresses out of the keypool\n+        origin_rpc = self.nodes[1].get_wallet_rpc('origin')\n+        seed = self.nodes[0].dumpprivkey(self.nodes[0].getnewaddress())\n+        origin_rpc.sethdseed(True, seed)\n+\n+        self.nodes[1].createwallet(wallet_name='restore', blank=True)\n+        restore_rpc = self.nodes[1].get_wallet_rpc('restore')\n+        restore_rpc.sethdseed(True, seed)\n+        restore_rpc.sethdseed(True)\n+\n+        # Check persistence of inactive seed\n+        restore_rpc.unloadwallet()\n+        self.nodes[1].loadwallet('restore')\n+        restore_rpc = self.nodes[1].get_wallet_rpc('restore')\n+\n+        # Empty keypool and get an address that is beyond the initial keypool\n+        origin_rpc.getnewaddress()\n+        origin_rpc.getnewaddress()\n+        last_addr = origin_rpc.getnewaddress()\n+        addr = origin_rpc.getnewaddress()\n+\n+        # Check that the restored seed does not have addr but does have last_addr\n+        info = restore_rpc.getaddressinfo(last_addr)\n+        assert_equal(info['ismine'], True)\n+        info = restore_rpc.getaddressinfo(addr)\n+        assert_equal(info['ismine'], False)\n+        info = origin_rpc.getaddressinfo(addr)\n+        assert_equal(info['ismine'], True)\n+\n+        txid = self.nodes[0].sendtoaddress(addr, 1)\n+        origin_rpc.sendrawtransaction(self.nodes[0].gettransaction(txid)['hex'])\n+        self.nodes[0].generate(1)\n+        origin_rpc.gettransaction(txid)\n+        assert_raises_rpc_error(-5, 'Invalid or non-wallet transaction id', restore_rpc.gettransaction, txid)\n+        out_of_kp_txid = txid\n+\n+        txid = self.nodes[0].sendtoaddress(last_addr, 1)\n+        origin_rpc.sendrawtransaction(self.nodes[0].gettransaction(txid)['hex'])\n+        self.nodes[0].generate(1)\n+        origin_rpc.gettransaction(txid)\n+        restore_rpc.gettransaction(txid)\n+        assert_raises_rpc_error(-5, 'Invalid or non-wallet transaction id', restore_rpc.gettransaction, out_of_kp_txid)\n+\n+        restore_rpc.rescanblockchain()\n+        restore_rpc.gettransaction(out_of_kp_txid)\n+        info = restore_rpc.getaddressinfo(addr)\n+        assert_equal(info['ismine'], True)\n+\n+        # Check again that 3 keys were derived.\n+        # Empty keypool and get an address that is beyond the initial keypool\n+        origin_rpc.getnewaddress()\n+        origin_rpc.getnewaddress()\n+        last_addr = origin_rpc.getnewaddress()\n+        addr = origin_rpc.getnewaddress()\n+\n+        # Check that the restored seed does not have addr but does have last_addr",
      "path": "test/functional/wallet_hd.py",
      "position": null,
      "original_position": 67,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "d435512094ccd447ce0d582fa0e9ea85c46ebec3",
      "in_reply_to_id": 392700316,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-03-16T17:44:44Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r393203207",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393203207"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 219,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393203250",
      "pull_request_review_id": 375446461,
      "id": 393203250,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIwMzI1MA==",
      "diff_hunk": "@@ -153,5 +153,74 @@ def run_test(self):\n         assert_raises_rpc_error(-5, \"Already have this key\", self.nodes[1].sethdseed, False, new_seed)\n         assert_raises_rpc_error(-5, \"Already have this key\", self.nodes[1].sethdseed, False, self.nodes[1].dumpprivkey(self.nodes[1].getnewaddress()))\n \n+        self.log.info('Test sethdseed restoring with keys outside of the intial keypool')\n+        self.nodes[0].generate(10)\n+        # Restart node 1 with keypool of 5 and a different wallet\n+        self.nodes[1].createwallet(wallet_name='origin', blank=True)\n+        self.stop_node(1)\n+        self.start_node(1, extra_args=['-keypool=3', '-wallet=origin'])\n+        connect_nodes(self.nodes[0], 1)\n+\n+        # sethdseed restoring and seeing txs to addresses out of the keypool\n+        origin_rpc = self.nodes[1].get_wallet_rpc('origin')\n+        seed = self.nodes[0].dumpprivkey(self.nodes[0].getnewaddress())\n+        origin_rpc.sethdseed(True, seed)\n+\n+        self.nodes[1].createwallet(wallet_name='restore', blank=True)\n+        restore_rpc = self.nodes[1].get_wallet_rpc('restore')\n+        restore_rpc.sethdseed(True, seed)\n+        restore_rpc.sethdseed(True)\n+\n+        # Check persistence of inactive seed\n+        restore_rpc.unloadwallet()\n+        self.nodes[1].loadwallet('restore')\n+        restore_rpc = self.nodes[1].get_wallet_rpc('restore')\n+\n+        # Empty keypool and get an address that is beyond the initial keypool\n+        origin_rpc.getnewaddress()\n+        origin_rpc.getnewaddress()\n+        last_addr = origin_rpc.getnewaddress()\n+        addr = origin_rpc.getnewaddress()\n+\n+        # Check that the restored seed does not have addr but does have last_addr\n+        info = restore_rpc.getaddressinfo(last_addr)\n+        assert_equal(info['ismine'], True)\n+        info = restore_rpc.getaddressinfo(addr)\n+        assert_equal(info['ismine'], False)\n+        info = origin_rpc.getaddressinfo(addr)\n+        assert_equal(info['ismine'], True)\n+\n+        txid = self.nodes[0].sendtoaddress(addr, 1)\n+        origin_rpc.sendrawtransaction(self.nodes[0].gettransaction(txid)['hex'])\n+        self.nodes[0].generate(1)\n+        origin_rpc.gettransaction(txid)\n+        assert_raises_rpc_error(-5, 'Invalid or non-wallet transaction id', restore_rpc.gettransaction, txid)\n+        out_of_kp_txid = txid\n+\n+        txid = self.nodes[0].sendtoaddress(last_addr, 1)\n+        origin_rpc.sendrawtransaction(self.nodes[0].gettransaction(txid)['hex'])\n+        self.nodes[0].generate(1)\n+        origin_rpc.gettransaction(txid)\n+        restore_rpc.gettransaction(txid)\n+        assert_raises_rpc_error(-5, 'Invalid or non-wallet transaction id', restore_rpc.gettransaction, out_of_kp_txid)\n+\n+        restore_rpc.rescanblockchain()\n+        restore_rpc.gettransaction(out_of_kp_txid)\n+        info = restore_rpc.getaddressinfo(addr)\n+        assert_equal(info['ismine'], True)",
      "path": "test/functional/wallet_hd.py",
      "position": null,
      "original_position": 58,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "d435512094ccd447ce0d582fa0e9ea85c46ebec3",
      "in_reply_to_id": 392700402,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-03-16T17:44:47Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r393203250",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393203250"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 218,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393203317",
      "pull_request_review_id": 375446534,
      "id": 393203317,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIwMzMxNw==",
      "diff_hunk": "@@ -918,30 +987,35 @@ void LegacyScriptPubKeyMan::DeriveNewChildKey(WalletBatch &batch, CKeyMetadata&\n         // childIndex | BIP32_HARDENED_KEY_LIMIT = derive childIndex in hardened child-index-range\n         // example: 1 | BIP32_HARDENED_KEY_LIMIT == 0x80000001 == 2147483649\n         if (internal) {\n-            chainChildKey.Derive(childKey, hdChain.nInternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n-            metadata.hdKeypath = \"m/0'/1'/\" + std::to_string(hdChain.nInternalChainCounter) + \"'\";\n+            chainChildKey.Derive(childKey, hd_chain.nInternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n+            metadata.hdKeypath = \"m/0'/1'/\" + std::to_string(hd_chain.nInternalChainCounter) + \"'\";\n             metadata.key_origin.path.push_back(0 | BIP32_HARDENED_KEY_LIMIT);\n             metadata.key_origin.path.push_back(1 | BIP32_HARDENED_KEY_LIMIT);\n-            metadata.key_origin.path.push_back(hdChain.nInternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n-            hdChain.nInternalChainCounter++;\n+            metadata.key_origin.path.push_back(hd_chain.nInternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n+            hd_chain.nInternalChainCounter++;\n         }\n         else {\n-            chainChildKey.Derive(childKey, hdChain.nExternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n-            metadata.hdKeypath = \"m/0'/0'/\" + std::to_string(hdChain.nExternalChainCounter) + \"'\";\n+            chainChildKey.Derive(childKey, hd_chain.nExternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n+            metadata.hdKeypath = \"m/0'/0'/\" + std::to_string(hd_chain.nExternalChainCounter) + \"'\";\n             metadata.key_origin.path.push_back(0 | BIP32_HARDENED_KEY_LIMIT);\n             metadata.key_origin.path.push_back(0 | BIP32_HARDENED_KEY_LIMIT);\n-            metadata.key_origin.path.push_back(hdChain.nExternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n-            hdChain.nExternalChainCounter++;\n+            metadata.key_origin.path.push_back(hd_chain.nExternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n+            hd_chain.nExternalChainCounter++;\n         }\n     } while (HaveKey(childKey.key.GetPubKey().GetID()));\n     secret = childKey.key;\n-    metadata.hd_seed_id = hdChain.seed_id;\n+    metadata.hd_seed_id = hd_chain.seed_id;\n     CKeyID master_id = masterKey.key.GetPubKey().GetID();\n     std::copy(master_id.begin(), master_id.begin() + 4, metadata.key_origin.fingerprint);\n     metadata.has_key_origin = true;\n     // update the chain model in the database\n-    if (!batch.WriteHDChain(hdChain))\n-        throw std::runtime_error(std::string(__func__) + \": Writing HD chain model failed\");\n+    if (hd_chain.seed_id == m_hd_chain.seed_id) {\n+        if (!batch.WriteHDChain(hd_chain))\n+            throw std::runtime_error(std::string(__func__) + \": Writing HD chain model failed\");\n+    } else {\n+        if (!batch.WriteInactiveHDChain(hd_chain))\n+            throw std::runtime_error(std::string(__func__) + \": Writing HD chain model failed\");",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 188,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "d435512094ccd447ce0d582fa0e9ea85c46ebec3",
      "in_reply_to_id": 392936080,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-03-16T17:44:52Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r393203317",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393203317"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1017,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393203508",
      "pull_request_review_id": 375446771,
      "id": 393203508,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIwMzUwOA==",
      "diff_hunk": "@@ -110,6 +110,11 @@ class CHDChain\n         nInternalChainCounter = 0;\n         seed_id.SetNull();\n     }\n+\n+    bool operator==(const CHDChain& chain) const\n+    {\n+        return seed_id == chain.seed_id;\n+    }",
      "path": "src/wallet/walletdb.h",
      "position": 8,
      "original_position": 8,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "d435512094ccd447ce0d582fa0e9ea85c46ebec3",
      "in_reply_to_id": 392951184,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It should be implicitly defined.",
      "created_at": "2020-03-16T17:45:11Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r393203508",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393203508"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 123,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393203548",
      "pull_request_review_id": 375446818,
      "id": 393203548,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIwMzU0OA==",
      "diff_hunk": "@@ -306,6 +320,18 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n      */\n     bool ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fRequestedInternal);\n \n+    /**\n+     * Like TopUp() but adds keys for inactive HD chains.\n+     * Ensures that there are at least -keypoolsize number of keys derived after the given index.",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 47,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "d435512094ccd447ce0d582fa0e9ea85c46ebec3",
      "in_reply_to_id": 392953786,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-03-16T17:45:14Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r393203548",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393203548"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 325,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393203587",
      "pull_request_review_id": 375446869,
      "id": 393203587,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIwMzU4Nw==",
      "diff_hunk": "@@ -280,6 +280,48 @@ bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool i\n     return true;\n }\n \n+bool LegacyScriptPubKeyMan::FillInactiveChain(const CKeyID seed_id, int64_t index, bool internal)\n+{\n+    LOCK(cs_KeyStore);\n+\n+    if (m_storage.IsLocked()) return false;\n+\n+    auto it = m_inactive_hd_chains.find(seed_id);\n+    if (it == m_inactive_hd_chains.end()) {\n+        return false;\n+    }\n+\n+    CHDChain& chain = it->second;\n+\n+    // Top up key pool\n+    int64_t target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n+\n+    // \"size\" of the keypools. Not really the size, actually the difference between index and the chain counter\n+    // Since chain counter is 1 based and index is 0 based, one of them needs to be offset by 1.\n+    int64_t kp_size = (internal ? chain.nInternalChainCounter : chain.nExternalChainCounter) - (index + 1);\n+\n+    // count amount of available keys (internal, external)\n+    // make sure the keypool of external and internal keys fits the user selected target (-keypool)",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "d435512094ccd447ce0d582fa0e9ea85c46ebec3",
      "in_reply_to_id": 392954955,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-03-16T17:45:19Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r393203587",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393203587"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 304,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393203638",
      "pull_request_review_id": 375446926,
      "id": 393203638,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIwMzYzOA==",
      "diff_hunk": "@@ -280,6 +280,48 @@ bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool i\n     return true;\n }\n \n+bool LegacyScriptPubKeyMan::FillInactiveChain(const CKeyID seed_id, int64_t index, bool internal)\n+{\n+    LOCK(cs_KeyStore);\n+\n+    if (m_storage.IsLocked()) return false;\n+\n+    auto it = m_inactive_hd_chains.find(seed_id);\n+    if (it == m_inactive_hd_chains.end()) {\n+        return false;\n+    }\n+\n+    CHDChain& chain = it->second;\n+\n+    // Top up key pool\n+    int64_t target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n+\n+    // \"size\" of the keypools. Not really the size, actually the difference between index and the chain counter\n+    // Since chain counter is 1 based and index is 0 based, one of them needs to be offset by 1.\n+    int64_t kp_size = (internal ? chain.nInternalChainCounter : chain.nExternalChainCounter) - (index + 1);\n+\n+    // count amount of available keys (internal, external)\n+    // make sure the keypool of external and internal keys fits the user selected target (-keypool)\n+    // available is determined based on the index given\n+    int64_t missing = std::max(std::max((int64_t) target_size, (int64_t) 1) - kp_size, (int64_t) 0);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "d435512094ccd447ce0d582fa0e9ea85c46ebec3",
      "in_reply_to_id": 392976340,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-03-16T17:45:23Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r393203638",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393203638"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 317,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393203756",
      "pull_request_review_id": 375447068,
      "id": 393203756,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIwMzc1Ng==",
      "diff_hunk": "@@ -280,6 +280,48 @@ bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool i\n     return true;\n }\n \n+bool LegacyScriptPubKeyMan::FillInactiveChain(const CKeyID seed_id, int64_t index, bool internal)",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "d435512094ccd447ce0d582fa0e9ea85c46ebec3",
      "in_reply_to_id": 392980170,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Renamed to `TopUpInactiveHDChain`",
      "created_at": "2020-03-16T17:45:35Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r393203756",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393203756"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 283,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393204677",
      "pull_request_review_id": 375448232,
      "id": 393204677,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIwNDY3Nw==",
      "diff_hunk": "@@ -153,5 +153,74 @@ def run_test(self):\n         assert_raises_rpc_error(-5, \"Already have this key\", self.nodes[1].sethdseed, False, new_seed)\n         assert_raises_rpc_error(-5, \"Already have this key\", self.nodes[1].sethdseed, False, self.nodes[1].dumpprivkey(self.nodes[1].getnewaddress()))\n \n+        self.log.info('Test sethdseed restoring with keys outside of the intial keypool')\n+        self.nodes[0].generate(10)\n+        # Restart node 1 with keypool of 5 and a different wallet\n+        self.nodes[1].createwallet(wallet_name='origin', blank=True)\n+        self.stop_node(1)\n+        self.start_node(1, extra_args=['-keypool=3', '-wallet=origin'])\n+        connect_nodes(self.nodes[0], 1)\n+\n+        # sethdseed restoring and seeing txs to addresses out of the keypool\n+        origin_rpc = self.nodes[1].get_wallet_rpc('origin')\n+        seed = self.nodes[0].dumpprivkey(self.nodes[0].getnewaddress())\n+        origin_rpc.sethdseed(True, seed)\n+\n+        self.nodes[1].createwallet(wallet_name='restore', blank=True)\n+        restore_rpc = self.nodes[1].get_wallet_rpc('restore')\n+        restore_rpc.sethdseed(True, seed)\n+        restore_rpc.sethdseed(True)",
      "path": "test/functional/wallet_hd.py",
      "position": null,
      "original_position": 20,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "d435512094ccd447ce0d582fa0e9ea85c46ebec3",
      "in_reply_to_id": 392698529,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added a comment.",
      "created_at": "2020-03-16T17:47:10Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r393204677",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393204677"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 172,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393216391",
      "pull_request_review_id": 375465363,
      "id": 393216391,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIxNjM5MQ==",
      "diff_hunk": "@@ -110,6 +110,11 @@ class CHDChain\n         nInternalChainCounter = 0;\n         seed_id.SetNull();\n     }\n+\n+    bool operator==(const CHDChain& chain) const\n+    {\n+        return seed_id == chain.seed_id;\n+    }",
      "path": "src/wallet/walletdb.h",
      "position": 8,
      "original_position": 8,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "d435512094ccd447ce0d582fa0e9ea85c46ebec3",
      "in_reply_to_id": 392951184,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Default comparison operators are only being added in C++20. That said, if nothing needs !=, no need to define it.",
      "created_at": "2020-03-16T18:05:36Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r393216391",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393216391"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 123,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393253681",
      "pull_request_review_id": 375510813,
      "id": 393253681,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI1MzY4MQ==",
      "diff_hunk": "@@ -280,6 +280,47 @@ bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool i\n     return true;\n }\n \n+bool LegacyScriptPubKeyMan::TopUpInactiveHDChain(const CKeyID seed_id, int64_t index, bool internal)\n+{\n+    LOCK(cs_KeyStore);\n+\n+    if (m_storage.IsLocked()) return false;\n+\n+    auto it = m_inactive_hd_chains.find(seed_id);\n+    if (it == m_inactive_hd_chains.end()) {\n+        return false;\n+    }\n+\n+    CHDChain& chain = it->second;\n+\n+    // Top up key pool\n+    int64_t target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "0715613ce4b983b775e247f89aa033d2d2b822f5",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "0715613\r\n\r\nIf you switch `-keypool` arg after switching seed to a smaller one, you may end up with less look-ahead protection for a seed which may be used for higher amounts or different funds policy. That's already an issue today without seed rotation, but I would be okay to make it a static parameter part of `m_inactive_hd_chains`.",
      "created_at": "2020-03-16T19:09:35Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r393253681",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393253681"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 310,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393255004",
      "pull_request_review_id": 375510813,
      "id": 393255004,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI1NTAwNA==",
      "diff_hunk": "@@ -280,6 +280,47 @@ bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool i\n     return true;\n }\n \n+bool LegacyScriptPubKeyMan::TopUpInactiveHDChain(const CKeyID seed_id, int64_t index, bool internal)",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 14,
      "original_position": 4,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "0715613ce4b983b775e247f89aa033d2d2b822f5",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "0715613\r\n\r\nToo much work for parameterizing `TopUp` with `seed_id` or other reasons?",
      "created_at": "2020-03-16T19:12:12Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r393255004",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393255004"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 296,
      "original_line": 296,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393260572",
      "pull_request_review_id": 375519633,
      "id": 393260572,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI2MDU3Mg==",
      "diff_hunk": "@@ -280,6 +280,47 @@ bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool i\n     return true;\n }\n \n+bool LegacyScriptPubKeyMan::TopUpInactiveHDChain(const CKeyID seed_id, int64_t index, bool internal)\n+{\n+    LOCK(cs_KeyStore);\n+\n+    if (m_storage.IsLocked()) return false;\n+\n+    auto it = m_inactive_hd_chains.find(seed_id);\n+    if (it == m_inactive_hd_chains.end()) {\n+        return false;\n+    }\n+\n+    CHDChain& chain = it->second;\n+\n+    // Top up key pool\n+    int64_t target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "0715613ce4b983b775e247f89aa033d2d2b822f5",
      "in_reply_to_id": 393253681,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think that's necessary. Since `sethdseed`'s purpose is seed rotation, it doesn't really make sense that there would be different funds policies.",
      "created_at": "2020-03-16T19:23:48Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r393260572",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393260572"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 310,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393261919",
      "pull_request_review_id": 375521318,
      "id": 393261919,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI2MTkxOQ==",
      "diff_hunk": "@@ -280,6 +280,47 @@ bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool i\n     return true;\n }\n \n+bool LegacyScriptPubKeyMan::TopUpInactiveHDChain(const CKeyID seed_id, int64_t index, bool internal)",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 14,
      "original_position": 4,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "0715613ce4b983b775e247f89aa033d2d2b822f5",
      "in_reply_to_id": 393255004,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Needing `index` makes it harder to parameterize.",
      "created_at": "2020-03-16T19:26:31Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r393261919",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393261919"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 296,
      "original_line": 296,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421528878",
      "pull_request_review_id": 407503207,
      "id": 421528878,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUyODg3OA==",
      "diff_hunk": "@@ -83,6 +83,7 @@ def run_test(self):\n         shutil.rmtree(os.path.join(self.nodes[1].datadir, self.chain, \"blocks\"))\n         shutil.rmtree(os.path.join(self.nodes[1].datadir, self.chain, \"chainstate\"))\n         shutil.copyfile(os.path.join(self.nodes[1].datadir, \"hd.bak\"), os.path.join(self.nodes[1].datadir, self.chain, 'wallets', \"wallet.dat\"))\n+        return",
      "path": "test/functional/wallet_hd.py",
      "position": null,
      "original_position": 4,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "65dee3410cd9807bb4aa6b6677c2e0832e050ea2",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"fixup! Determine inactive HD seeds from key metadata and track them in LegacyScriptPubKeyMan\" (65dee3410cd9807bb4aa6b6677c2e0832e050ea2)\r\n\r\nShould fix: probably need to drop this performance optimization",
      "created_at": "2020-05-07T14:02:47Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r421528878",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421528878"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421530343",
      "pull_request_review_id": 407503207,
      "id": 421530343,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUzMDM0Mw==",
      "diff_hunk": "@@ -685,7 +686,7 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n                 if (IsKeyType(strType) || strType == DBKeys::DEFAULTKEY) {\n                     result = DBErrors::CORRUPT;\n                 } else if (strType == DBKeys::FLAGS) {\n-                    // reading the wallet flags can only fail if unknown flags are present\n+                    // reading the wallet flags only fail if unknown flags are present",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 51,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "65dee3410cd9807bb4aa6b6677c2e0832e050ea2",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"fixup! Determine inactive HD seeds from key metadata and track them in LegacyScriptPubKeyMan\" (65dee3410cd9807bb4aa6b6677c2e0832e050ea2)\r\n\r\nNote: looks like unintended comment change here",
      "created_at": "2020-05-07T14:04:47Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r421530343",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421530343"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 689,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421539430",
      "pull_request_review_id": 407503207,
      "id": 421539430,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUzOTQzMA==",
      "diff_hunk": "@@ -405,6 +407,56 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             ssValue >> keyMeta;\n             wss.nKeyMeta++;\n             pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n+\n+            // Extract some CHDChain info from this metadata if it has any\n+            if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA) {\n+                // Get the path from the key origin or from the path string\n+                // Not applicable when path is \"s\" as that indicates a seed\n+                bool internal = false;\n+                uint32_t index = 0;\n+                if (keyMeta.hdKeypath != \"s\") {\n+                    std::vector<uint32_t> path;\n+                    if (keyMeta.has_key_origin) {\n+                        // We have a key origin, so pull it from it's path vector\n+                        if (keyMeta.key_origin.path.size() != 3) {\n+                            strErr = \"Error reading wallet database: keymeta found with unexpected path\";\n+                            return false;",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 33,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "22361d241b4d236b2b8f84b59094c296172db0ff",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Determine inactive HD seeds from key metadata and track them in LegacyScriptPubKeyMan\" (22361d241b4d236b2b8f84b59094c296172db0ff)\r\n\r\nNote: I initially questioned this, but it does seems reasonable to treat unexpected paths as errors. Triggering an error instead of ignoring these keys means we may need to be a little more careful about backwards compatibility in the future, and store possible paths with different lengths in a new field, but this seems like a reasonable tradeoff for getting better error checking now",
      "created_at": "2020-05-07T14:16:51Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r421539430",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421539430"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 423,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421540545",
      "pull_request_review_id": 407503207,
      "id": 421540545,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU0MDU0NQ==",
      "diff_hunk": "@@ -418,15 +418,10 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n                     std::vector<uint32_t> path;\n                     if (keyMeta.has_key_origin) {\n                         // We have a key origin, so pull it from it's path vector\n-                        if (keyMeta.key_origin.path.size() != 3) {\n-                            strErr = \"Error reading wallet database: keymeta found with unexpected path\";\n-                            return false;\n-                        }\n                         path = keyMeta.key_origin.path;\n-                    } else if (keyMeta.hdKeypath != \"s\") {\n+                    } else {\n                         // No key origin, have to parse the string\n                         // \"s\" is for a seed, no path info to parse so we skip those",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 21,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "65dee3410cd9807bb4aa6b6677c2e0832e050ea2",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"fixup! Determine inactive HD seeds from key metadata and track them in LegacyScriptPubKeyMan\" (65dee3410cd9807bb4aa6b6677c2e0832e050ea2)\r\n\r\nNote: Could drop the comment about \"s\" here since it's now noted and handled above",
      "created_at": "2020-05-07T14:18:22Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r421540545",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421540545"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 424,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421550317",
      "pull_request_review_id": 407503207,
      "id": 421550317,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU1MDMxNw==",
      "diff_hunk": "@@ -405,6 +407,56 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             ssValue >> keyMeta;\n             wss.nKeyMeta++;\n             pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n+\n+            // Extract some CHDChain info from this metadata if it has any\n+            if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA) {\n+                // Get the path from the key origin or from the path string\n+                // Not applicable when path is \"s\" as that indicates a seed\n+                bool internal = false;\n+                uint32_t index = 0;\n+                if (keyMeta.hdKeypath != \"s\") {\n+                    std::vector<uint32_t> path;\n+                    if (keyMeta.has_key_origin) {\n+                        // We have a key origin, so pull it from it's path vector\n+                        if (keyMeta.key_origin.path.size() != 3) {\n+                            strErr = \"Error reading wallet database: keymeta found with unexpected path\";\n+                            return false;\n+                        }\n+                        path = keyMeta.key_origin.path;\n+                    } else if (keyMeta.hdKeypath != \"s\") {\n+                        // No key origin, have to parse the string\n+                        // \"s\" is for a seed, no path info to parse so we skip those\n+                        std::vector<uint32_t> path;\n+                        if (!ParseHDKeypath(keyMeta.hdKeypath, path)) {\n+                            strErr = \"Error reading wallet database: keymeta with invalid HD keypath\";\n+                            return false;\n+                        }\n+                    }\n+\n+                    // Extract the index and internal from the path\n+                    // Path string is m/0'/k'/i'\n+                    // Path vector is [0', k', i'] (but as ints OR'd with the hardened bit\n+                    // k == 0 for external, 1 for internal. i is the index\n+                    internal = path[1] == 1;",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 50,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "22361d241b4d236b2b8f84b59094c296172db0ff",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Determine inactive HD seeds from key metadata and track them in LegacyScriptPubKeyMan\" (22361d241b4d236b2b8f84b59094c296172db0ff)\r\n\r\nShould fix: It would probably be good to skip keys or error if path[1] is not `0` or `1` or path[0] is not `0`",
      "created_at": "2020-05-07T14:30:19Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r421550317",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421550317"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 440,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421554491",
      "pull_request_review_id": 407503207,
      "id": 421554491,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU1NDQ5MQ==",
      "diff_hunk": "@@ -290,6 +290,47 @@ bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool i\n     return true;\n }\n \n+bool LegacyScriptPubKeyMan::TopUpInactiveHDChain(const CKeyID seed_id, int64_t index, bool internal)\n+{\n+    LOCK(cs_KeyStore);\n+\n+    if (m_storage.IsLocked()) return false;\n+\n+    auto it = m_inactive_hd_chains.find(seed_id);\n+    if (it == m_inactive_hd_chains.end()) {\n+        return false;\n+    }\n+\n+    CHDChain& chain = it->second;\n+\n+    // Top up key pool\n+    int64_t target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n+\n+    // \"size\" of the keypools. Not really the size, actually the difference between index and the chain counter\n+    // Since chain counter is 1 based and index is 0 based, one of them needs to be offset by 1.\n+    int64_t kp_size = (internal ? chain.nInternalChainCounter : chain.nExternalChainCounter) - (index + 1);\n+\n+    // count number of missing keys (internal, external)\n+    // make sure the keypool of external and internal keys fits the user-selected target (-keypool)\n+    int64_t missing = std::max(std::max((int64_t) target_size, (int64_t) 1) - kp_size, (int64_t) 0);\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    for (int64_t i = missing; i > 0; --i) {\n+        CPubKey pubkey(GenerateNewKey(batch, chain, internal));\n+        AddKeypoolPubkeyWithDB(pubkey, internal, batch);\n+    }\n+    if (missing > 0) {\n+        if (internal) {\n+            WalletLogPrintf(\"inactive seed added %d internal keys\\n\", missing);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 35,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "8b8f982973a83ea77b5159235b282f20bd430677",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Generate new keys for inactive seeds after marking used\" (8b8f982973a83ea77b5159235b282f20bd430677)\r\n\r\nNote: Maybe would be good to include seed id in log message",
      "created_at": "2020-05-07T14:35:14Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r421554491",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421554491"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 324,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421567397",
      "pull_request_review_id": 407503207,
      "id": 421567397,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU2NzM5Nw==",
      "diff_hunk": "@@ -170,5 +170,82 @@ def run_test(self):\n             assert_raises_rpc_error(-5, \"Already have this key\", self.nodes[1].sethdseed, False, new_seed)\n             assert_raises_rpc_error(-5, \"Already have this key\", self.nodes[1].sethdseed, False, self.nodes[1].dumpprivkey(self.nodes[1].getnewaddress()))\n \n+            self.log.info('Test sethdseed restoring with keys outside of the initial keypool')\n+            self.nodes[0].generate(10)\n+            # Restart node 1 with keypool of 3 and a different wallet\n+            self.nodes[1].createwallet(wallet_name='origin', blank=True)\n+            self.stop_node(1)\n+            self.start_node(1, extra_args=['-keypool=3', '-wallet=origin'])\n+            connect_nodes(self.nodes[0], 1)\n+\n+            # sethdseed restoring and seeing txs to addresses out of the keypool\n+            origin_rpc = self.nodes[1].get_wallet_rpc('origin')\n+            seed = self.nodes[0].dumpprivkey(self.nodes[0].getnewaddress())\n+            origin_rpc.sethdseed(True, seed)\n+\n+            self.nodes[1].createwallet(wallet_name='restore', blank=True)\n+            restore_rpc = self.nodes[1].get_wallet_rpc('restore')\n+            restore_rpc.sethdseed(True, seed) # Set to be the same seed as origin_rpc\n+            restore_rpc.sethdseed(True) # Rotate to a new seed, making original `seed` inactive\n+\n+            # Check persistence of inactive seed\n+            restore_rpc.unloadwallet()\n+            self.nodes[1].loadwallet('restore')\n+            restore_rpc = self.nodes[1].get_wallet_rpc('restore')\n+\n+            # Empty origin keypool and get an address that is beyond the initial keypool\n+            origin_rpc.getnewaddress()\n+            origin_rpc.getnewaddress()\n+            last_addr = origin_rpc.getnewaddress() # Last address of initial keypool\n+            addr = origin_rpc.getnewaddress() # First address beyond initial keypool\n+\n+            # Check that the restored seed has last_addr but does not have addr\n+            info = restore_rpc.getaddressinfo(last_addr)\n+            assert_equal(info['ismine'], True)\n+            info = restore_rpc.getaddressinfo(addr)\n+            assert_equal(info['ismine'], False)\n+            # Check that the origin seed has addr\n+            info = origin_rpc.getaddressinfo(addr)\n+            assert_equal(info['ismine'], True)\n+\n+            # Send a transaction to addr, which is out of the initial keypool.\n+            # The wallet that has set a new seed (restore_rpc) should not detect this transaction.\n+            txid = self.nodes[0].sendtoaddress(addr, 1)\n+            origin_rpc.sendrawtransaction(self.nodes[0].gettransaction(txid)['hex'])\n+            self.nodes[0].generate(1)\n+            origin_rpc.gettransaction(txid)\n+            assert_raises_rpc_error(-5, 'Invalid or non-wallet transaction id', restore_rpc.gettransaction, txid)\n+            out_of_kp_txid = txid\n+\n+            # Send a transaction to last_addr, which is in the initial keypool.\n+            # The wallet that has set a new seed (restore_rpc) should detect this transaction and generate 3 new keys from the initial seed.\n+            # The previous transaction (out_of_kp_txid) should still not be detected as a rescan is required.\n+            txid = self.nodes[0].sendtoaddress(last_addr, 1)\n+            origin_rpc.sendrawtransaction(self.nodes[0].gettransaction(txid)['hex'])\n+            self.nodes[0].generate(1)\n+            origin_rpc.gettransaction(txid)\n+            restore_rpc.gettransaction(txid)\n+            assert_raises_rpc_error(-5, 'Invalid or non-wallet transaction id', restore_rpc.gettransaction, out_of_kp_txid)\n+\n+            # After rescanning, restore_rpc should now see out_of_kp_txid and generate an additional key.",
      "path": "test/functional/wallet_hd.py",
      "position": 72,
      "original_position": 61,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "5932c00fef5054207bd133daa1aea9857d9c3611",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Test that keys from inactive seeds are generated\" (5932c00fef5054207bd133daa1aea9857d9c3611)\r\n\r\nClever test! Nice way to ensure the inactive pool wasn't topped up while still active",
      "created_at": "2020-05-07T14:51:35Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r421567397",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421567397"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 241,
      "original_line": 241,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421571988",
      "pull_request_review_id": 407503207,
      "id": 421571988,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU3MTk4OA==",
      "diff_hunk": "@@ -153,5 +153,74 @@ def run_test(self):\n         assert_raises_rpc_error(-5, \"Already have this key\", self.nodes[1].sethdseed, False, new_seed)\n         assert_raises_rpc_error(-5, \"Already have this key\", self.nodes[1].sethdseed, False, self.nodes[1].dumpprivkey(self.nodes[1].getnewaddress()))\n \n+        self.log.info('Test sethdseed restoring with keys outside of the intial keypool')\n+        self.nodes[0].generate(10)\n+        # Restart node 1 with keypool of 5 and a different wallet\n+        self.nodes[1].createwallet(wallet_name='origin', blank=True)\n+        self.stop_node(1)\n+        self.start_node(1, extra_args=['-keypool=3', '-wallet=origin'])\n+        connect_nodes(self.nodes[0], 1)\n+\n+        # sethdseed restoring and seeing txs to addresses out of the keypool\n+        origin_rpc = self.nodes[1].get_wallet_rpc('origin')\n+        seed = self.nodes[0].dumpprivkey(self.nodes[0].getnewaddress())\n+        origin_rpc.sethdseed(True, seed)\n+\n+        self.nodes[1].createwallet(wallet_name='restore', blank=True)\n+        restore_rpc = self.nodes[1].get_wallet_rpc('restore')\n+        restore_rpc.sethdseed(True, seed)\n+        restore_rpc.sethdseed(True)\n+\n+        # Check persistence of inactive seed\n+        restore_rpc.unloadwallet()\n+        self.nodes[1].loadwallet('restore')\n+        restore_rpc = self.nodes[1].get_wallet_rpc('restore')\n+\n+        # Empty keypool and get an address that is beyond the initial keypool\n+        origin_rpc.getnewaddress()\n+        origin_rpc.getnewaddress()\n+        last_addr = origin_rpc.getnewaddress()\n+        addr = origin_rpc.getnewaddress()\n+\n+        # Check that the restored seed does not have addr but does have last_addr\n+        info = restore_rpc.getaddressinfo(last_addr)\n+        assert_equal(info['ismine'], True)\n+        info = restore_rpc.getaddressinfo(addr)\n+        assert_equal(info['ismine'], False)\n+        info = origin_rpc.getaddressinfo(addr)\n+        assert_equal(info['ismine'], True)\n+\n+        txid = self.nodes[0].sendtoaddress(addr, 1)\n+        origin_rpc.sendrawtransaction(self.nodes[0].gettransaction(txid)['hex'])\n+        self.nodes[0].generate(1)\n+        origin_rpc.gettransaction(txid)\n+        assert_raises_rpc_error(-5, 'Invalid or non-wallet transaction id', restore_rpc.gettransaction, txid)\n+        out_of_kp_txid = txid\n+\n+        txid = self.nodes[0].sendtoaddress(last_addr, 1)\n+        origin_rpc.sendrawtransaction(self.nodes[0].gettransaction(txid)['hex'])\n+        self.nodes[0].generate(1)\n+        origin_rpc.gettransaction(txid)\n+        restore_rpc.gettransaction(txid)\n+        assert_raises_rpc_error(-5, 'Invalid or non-wallet transaction id', restore_rpc.gettransaction, out_of_kp_txid)\n+\n+        restore_rpc.rescanblockchain()\n+        restore_rpc.gettransaction(out_of_kp_txid)\n+        info = restore_rpc.getaddressinfo(addr)\n+        assert_equal(info['ismine'], True)\n+\n+        # Check again that 3 keys were derived.\n+        # Empty keypool and get an address that is beyond the initial keypool\n+        origin_rpc.getnewaddress()\n+        origin_rpc.getnewaddress()\n+        last_addr = origin_rpc.getnewaddress()\n+        addr = origin_rpc.getnewaddress()\n+\n+        # Check that the restored seed does not have addr but does have last_addr\n+        info = restore_rpc.getaddressinfo(last_addr)\n+        assert_equal(info['ismine'], True)\n+        info = restore_rpc.getaddressinfo(addr)\n+        assert_equal(info['ismine'], False)\n+",
      "path": "test/functional/wallet_hd.py",
      "position": 99,
      "original_position": 72,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "d435512094ccd447ce0d582fa0e9ea85c46ebec3",
      "in_reply_to_id": 393019229,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Test that keys from inactive seeds are generated\" (5932c00fef5054207bd133daa1aea9857d9c3611)\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/17681#discussion_r393019229\r\n\r\n> for info I appended these checks after the rescan so that all checks before the rescan are also repeated after it, and all still pass\r\n\r\nNot sure if this review comment was made based on an older version of the test, but while these checks do good as a sanity check for rescan, I think adding them here would muddle the purpose of this test, and wouldn't be great to add here unless preceded by an explanatory comment, or pulled into a function to keep the test readble",
      "created_at": "2020-05-07T14:57:41Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r421571988",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421571988"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 268,
      "original_line": 268,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421616902",
      "pull_request_review_id": 407615641,
      "id": 421616902,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYxNjkwMg==",
      "diff_hunk": "@@ -83,6 +83,7 @@ def run_test(self):\n         shutil.rmtree(os.path.join(self.nodes[1].datadir, self.chain, \"blocks\"))\n         shutil.rmtree(os.path.join(self.nodes[1].datadir, self.chain, \"chainstate\"))\n         shutil.copyfile(os.path.join(self.nodes[1].datadir, \"hd.bak\"), os.path.join(self.nodes[1].datadir, self.chain, 'wallets', \"wallet.dat\"))\n+        return",
      "path": "test/functional/wallet_hd.py",
      "position": null,
      "original_position": 4,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "65dee3410cd9807bb4aa6b6677c2e0832e050ea2",
      "in_reply_to_id": 421528878,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Whoops. Fixed",
      "created_at": "2020-05-07T15:59:43Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r421616902",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421616902"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421616981",
      "pull_request_review_id": 407615751,
      "id": 421616981,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYxNjk4MQ==",
      "diff_hunk": "@@ -685,7 +686,7 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n                 if (IsKeyType(strType) || strType == DBKeys::DEFAULTKEY) {\n                     result = DBErrors::CORRUPT;\n                 } else if (strType == DBKeys::FLAGS) {\n-                    // reading the wallet flags can only fail if unknown flags are present\n+                    // reading the wallet flags only fail if unknown flags are present",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 51,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "65dee3410cd9807bb4aa6b6677c2e0832e050ea2",
      "in_reply_to_id": 421530343,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed",
      "created_at": "2020-05-07T15:59:50Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r421616981",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421616981"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 689,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421617076",
      "pull_request_review_id": 407615877,
      "id": 421617076,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYxNzA3Ng==",
      "diff_hunk": "@@ -418,15 +418,10 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n                     std::vector<uint32_t> path;\n                     if (keyMeta.has_key_origin) {\n                         // We have a key origin, so pull it from it's path vector\n-                        if (keyMeta.key_origin.path.size() != 3) {\n-                            strErr = \"Error reading wallet database: keymeta found with unexpected path\";\n-                            return false;\n-                        }\n                         path = keyMeta.key_origin.path;\n-                    } else if (keyMeta.hdKeypath != \"s\") {\n+                    } else {\n                         // No key origin, have to parse the string\n                         // \"s\" is for a seed, no path info to parse so we skip those",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 21,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "65dee3410cd9807bb4aa6b6677c2e0832e050ea2",
      "in_reply_to_id": 421540545,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-05-07T15:59:58Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r421617076",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421617076"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 424,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421617266",
      "pull_request_review_id": 407616128,
      "id": 421617266,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYxNzI2Ng==",
      "diff_hunk": "@@ -405,6 +407,56 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             ssValue >> keyMeta;\n             wss.nKeyMeta++;\n             pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n+\n+            // Extract some CHDChain info from this metadata if it has any\n+            if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA) {\n+                // Get the path from the key origin or from the path string\n+                // Not applicable when path is \"s\" as that indicates a seed\n+                bool internal = false;\n+                uint32_t index = 0;\n+                if (keyMeta.hdKeypath != \"s\") {\n+                    std::vector<uint32_t> path;\n+                    if (keyMeta.has_key_origin) {\n+                        // We have a key origin, so pull it from it's path vector\n+                        if (keyMeta.key_origin.path.size() != 3) {\n+                            strErr = \"Error reading wallet database: keymeta found with unexpected path\";\n+                            return false;\n+                        }\n+                        path = keyMeta.key_origin.path;\n+                    } else if (keyMeta.hdKeypath != \"s\") {\n+                        // No key origin, have to parse the string\n+                        // \"s\" is for a seed, no path info to parse so we skip those\n+                        std::vector<uint32_t> path;\n+                        if (!ParseHDKeypath(keyMeta.hdKeypath, path)) {\n+                            strErr = \"Error reading wallet database: keymeta with invalid HD keypath\";\n+                            return false;\n+                        }\n+                    }\n+\n+                    // Extract the index and internal from the path\n+                    // Path string is m/0'/k'/i'\n+                    // Path vector is [0', k', i'] (but as ints OR'd with the hardened bit\n+                    // k == 0 for external, 1 for internal. i is the index\n+                    internal = path[1] == 1;",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 50,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "22361d241b4d236b2b8f84b59094c296172db0ff",
      "in_reply_to_id": 421550317,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-05-07T16:00:16Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r421617266",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421617266"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 440,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421666484",
      "pull_request_review_id": 407678392,
      "id": 421666484,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY2NjQ4NA==",
      "diff_hunk": "@@ -405,6 +407,62 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             ssValue >> keyMeta;\n             wss.nKeyMeta++;\n             pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n+\n+            // Extract some CHDChain info from this metadata if it has any\n+            if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA && !keyMeta.hd_seed_id.IsNull() && keyMeta.hdKeypath.size() > 0) {\n+                // Get the path from the key origin or from the path string\n+                // Not applicable when path is \"s\" as that indicates a seed\n+                bool internal = false;\n+                uint32_t index = 0;\n+                if (keyMeta.hdKeypath != \"s\") {\n+                    std::vector<uint32_t> path;\n+                    if (keyMeta.has_key_origin) {\n+                        // We have a key origin, so pull it from it's path vector\n+                        path = keyMeta.key_origin.path;\n+                    } else {\n+                        // No key origin, have to parse the string\n+                        if (!ParseHDKeypath(keyMeta.hdKeypath, path)) {\n+                            strErr = \"Error reading wallet database: keymeta with invalid HD keypath\";\n+                            return false;\n+                        }\n+                    }\n+\n+                    // Extract the index and internal from the path\n+                    // Path string is m/0'/k'/i'\n+                    // Path vector is [0', k', i'] (but as ints OR'd with the hardened bit\n+                    // k == 0 for external, 1 for internal. i is the index\n+                    if (path.size() != 3) {\n+                        strErr = \"Error reading wallet database: keymeta found with unexpected path\";\n+                        return false;\n+                    }\n+                    if (path[0] != (0 & 0x80000000)) {\n+                        strErr = \"Unexpected path index for the element at index 0\";\n+                    }\n+                    if (path[1] != (0 & 0x80000000) && path[1] != (1 & 0x80000000)) {",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 51,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "daa9e347deceedb354aa0c73e34e34d50fafb5d5",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Determine inactive HD seeds from key metadata and track them in LegacyScriptPubKeyMan\" (daa9e347deceedb354aa0c73e34e34d50fafb5d5)\r\n\r\nDoesn't & need to be | here (and above) (and below)? I'm actually not sure how the test seems to pass with this",
      "created_at": "2020-05-07T17:19:14Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r421666484",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421666484"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 441,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421670272",
      "pull_request_review_id": 407683189,
      "id": 421670272,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3MDI3Mg==",
      "diff_hunk": "@@ -405,6 +407,62 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             ssValue >> keyMeta;\n             wss.nKeyMeta++;\n             pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n+\n+            // Extract some CHDChain info from this metadata if it has any\n+            if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA && !keyMeta.hd_seed_id.IsNull() && keyMeta.hdKeypath.size() > 0) {\n+                // Get the path from the key origin or from the path string\n+                // Not applicable when path is \"s\" as that indicates a seed\n+                bool internal = false;\n+                uint32_t index = 0;\n+                if (keyMeta.hdKeypath != \"s\") {\n+                    std::vector<uint32_t> path;\n+                    if (keyMeta.has_key_origin) {\n+                        // We have a key origin, so pull it from it's path vector\n+                        path = keyMeta.key_origin.path;\n+                    } else {\n+                        // No key origin, have to parse the string\n+                        if (!ParseHDKeypath(keyMeta.hdKeypath, path)) {\n+                            strErr = \"Error reading wallet database: keymeta with invalid HD keypath\";\n+                            return false;\n+                        }\n+                    }\n+\n+                    // Extract the index and internal from the path\n+                    // Path string is m/0'/k'/i'\n+                    // Path vector is [0', k', i'] (but as ints OR'd with the hardened bit\n+                    // k == 0 for external, 1 for internal. i is the index\n+                    if (path.size() != 3) {\n+                        strErr = \"Error reading wallet database: keymeta found with unexpected path\";\n+                        return false;\n+                    }\n+                    if (path[0] != (0 & 0x80000000)) {\n+                        strErr = \"Unexpected path index for the element at index 0\";\n+                    }\n+                    if (path[1] != (0 & 0x80000000) && path[1] != (1 & 0x80000000)) {",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 51,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "daa9e347deceedb354aa0c73e34e34d50fafb5d5",
      "in_reply_to_id": 421666484,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> I'm actually not sure how the test seems to pass with this\r\n\r\nOh, there actually are \"Unexpected path index\" errors in the wallet_hd.py debug logs. I guess these errors don't prevent the wallet from being loaded like I initially thought https://github.com/bitcoin/bitcoin/pull/17681#discussion_r421539430, or these checks should be returning false",
      "created_at": "2020-05-07T17:25:44Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r421670272",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421670272"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 441,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421671889",
      "pull_request_review_id": 407685291,
      "id": 421671889,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3MTg4OQ==",
      "diff_hunk": "@@ -405,6 +407,62 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             ssValue >> keyMeta;\n             wss.nKeyMeta++;\n             pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n+\n+            // Extract some CHDChain info from this metadata if it has any\n+            if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA && !keyMeta.hd_seed_id.IsNull() && keyMeta.hdKeypath.size() > 0) {\n+                // Get the path from the key origin or from the path string\n+                // Not applicable when path is \"s\" as that indicates a seed\n+                bool internal = false;\n+                uint32_t index = 0;\n+                if (keyMeta.hdKeypath != \"s\") {\n+                    std::vector<uint32_t> path;\n+                    if (keyMeta.has_key_origin) {\n+                        // We have a key origin, so pull it from it's path vector\n+                        path = keyMeta.key_origin.path;\n+                    } else {\n+                        // No key origin, have to parse the string\n+                        if (!ParseHDKeypath(keyMeta.hdKeypath, path)) {\n+                            strErr = \"Error reading wallet database: keymeta with invalid HD keypath\";\n+                            return false;\n+                        }\n+                    }\n+\n+                    // Extract the index and internal from the path\n+                    // Path string is m/0'/k'/i'\n+                    // Path vector is [0', k', i'] (but as ints OR'd with the hardened bit\n+                    // k == 0 for external, 1 for internal. i is the index\n+                    if (path.size() != 3) {\n+                        strErr = \"Error reading wallet database: keymeta found with unexpected path\";\n+                        return false;\n+                    }\n+                    if (path[0] != (0 & 0x80000000)) {\n+                        strErr = \"Unexpected path index for the element at index 0\";\n+                    }\n+                    if (path[1] != (0 & 0x80000000) && path[1] != (1 & 0x80000000)) {",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 51,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "daa9e347deceedb354aa0c73e34e34d50fafb5d5",
      "in_reply_to_id": 421666484,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No, you are correct, they should be `|`. The lack of failure is because I forgot to `return false`.",
      "created_at": "2020-05-07T17:28:21Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r421671889",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421671889"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 441,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421673924",
      "pull_request_review_id": 407687729,
      "id": 421673924,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3MzkyNA==",
      "diff_hunk": "@@ -405,6 +407,64 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             ssValue >> keyMeta;\n             wss.nKeyMeta++;\n             pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n+\n+            // Extract some CHDChain info from this metadata if it has any\n+            if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA && !keyMeta.hd_seed_id.IsNull() && keyMeta.hdKeypath.size() > 0) {\n+                // Get the path from the key origin or from the path string\n+                // Not applicable when path is \"s\" as that indicates a seed\n+                bool internal = false;\n+                uint32_t index = 0;\n+                if (keyMeta.hdKeypath != \"s\") {\n+                    std::vector<uint32_t> path;\n+                    if (keyMeta.has_key_origin) {\n+                        // We have a key origin, so pull it from it's path vector\n+                        path = keyMeta.key_origin.path;\n+                    } else {\n+                        // No key origin, have to parse the string\n+                        if (!ParseHDKeypath(keyMeta.hdKeypath, path)) {\n+                            strErr = \"Error reading wallet database: keymeta with invalid HD keypath\";\n+                            return false;\n+                        }\n+                    }\n+\n+                    // Extract the index and internal from the path\n+                    // Path string is m/0'/k'/i'\n+                    // Path vector is [0', k', i'] (but as ints OR'd with the hardened bit\n+                    // k == 0 for external, 1 for internal. i is the index\n+                    if (path.size() != 3) {\n+                        strErr = \"Error reading wallet database: keymeta found with unexpected path\";\n+                        return false;\n+                    }\n+                    if (path[0] != (0 | 0x80000000)) {\n+                        strErr = \"Unexpected path index for the element at index 0\";\n+                        return false;\n+                    }\n+                    if (path[1] != (0 | 0x80000000) && path[1] != (1 | 0x80000000)) {\n+                        strErr = \"Unexpected path index for the element at index 1\";\n+                        return false;\n+                    }\n+                    internal = path[1] == (1 & 0x80000000);",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 56,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "01c65e3f3119108c904c19c18921efc2d934a3a3",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Determine inactive HD seeds from key metadata and track them in LegacyScriptPubKeyMan\" (01c65e3f3119108c904c19c18921efc2d934a3a3)\r\n\r\n& should be | here too",
      "created_at": "2020-05-07T17:31:35Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r421673924",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421673924"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 446,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421729110",
      "pull_request_review_id": 407756125,
      "id": 421729110,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcyOTExMA==",
      "diff_hunk": "@@ -405,6 +407,64 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             ssValue >> keyMeta;\n             wss.nKeyMeta++;\n             pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n+\n+            // Extract some CHDChain info from this metadata if it has any\n+            if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA && !keyMeta.hd_seed_id.IsNull() && keyMeta.hdKeypath.size() > 0) {\n+                // Get the path from the key origin or from the path string\n+                // Not applicable when path is \"s\" as that indicates a seed\n+                bool internal = false;\n+                uint32_t index = 0;\n+                if (keyMeta.hdKeypath != \"s\") {\n+                    std::vector<uint32_t> path;\n+                    if (keyMeta.has_key_origin) {\n+                        // We have a key origin, so pull it from it's path vector\n+                        path = keyMeta.key_origin.path;\n+                    } else {\n+                        // No key origin, have to parse the string\n+                        if (!ParseHDKeypath(keyMeta.hdKeypath, path)) {\n+                            strErr = \"Error reading wallet database: keymeta with invalid HD keypath\";\n+                            return false;\n+                        }\n+                    }\n+\n+                    // Extract the index and internal from the path\n+                    // Path string is m/0'/k'/i'\n+                    // Path vector is [0', k', i'] (but as ints OR'd with the hardened bit\n+                    // k == 0 for external, 1 for internal. i is the index\n+                    if (path.size() != 3) {\n+                        strErr = \"Error reading wallet database: keymeta found with unexpected path\";\n+                        return false;\n+                    }\n+                    if (path[0] != (0 | 0x80000000)) {\n+                        strErr = \"Unexpected path index for the element at index 0\";\n+                        return false;\n+                    }\n+                    if (path[1] != (0 | 0x80000000) && path[1] != (1 | 0x80000000)) {\n+                        strErr = \"Unexpected path index for the element at index 1\";\n+                        return false;\n+                    }\n+                    internal = path[1] == (1 & 0x80000000);",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 56,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "01c65e3f3119108c904c19c18921efc2d934a3a3",
      "in_reply_to_id": 421673924,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed",
      "created_at": "2020-05-07T19:05:35Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r421729110",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421729110"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 446,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/423324234",
      "pull_request_review_id": 409536553,
      "id": 423324234,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyNDIzNA==",
      "diff_hunk": "@@ -290,6 +290,47 @@ bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool i\n     return true;\n }\n \n+bool LegacyScriptPubKeyMan::TopUpInactiveHDChain(const CKeyID seed_id, int64_t index, bool internal)\n+{\n+    LOCK(cs_KeyStore);\n+\n+    if (m_storage.IsLocked()) return false;\n+\n+    auto it = m_inactive_hd_chains.find(seed_id);\n+    if (it == m_inactive_hd_chains.end()) {\n+        return false;\n+    }\n+\n+    CHDChain& chain = it->second;\n+\n+    // Top up key pool\n+    int64_t target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n+\n+    // \"size\" of the keypools. Not really the size, actually the difference between index and the chain counter\n+    // Since chain counter is 1 based and index is 0 based, one of them needs to be offset by 1.\n+    int64_t kp_size = (internal ? chain.nInternalChainCounter : chain.nExternalChainCounter) - (index + 1);\n+\n+    // count number of missing keys (internal, external)\n+    // make sure the keypool of external and internal keys fits the user-selected target (-keypool)\n+    int64_t missing = std::max(std::max((int64_t) target_size, (int64_t) 1) - kp_size, (int64_t) 0);\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    for (int64_t i = missing; i > 0; --i) {\n+        CPubKey pubkey(GenerateNewKey(batch, chain, internal));\n+        AddKeypoolPubkeyWithDB(pubkey, internal, batch);\n+    }\n+    if (missing > 0) {\n+        if (internal) {\n+            WalletLogPrintf(\"inactive seed with id %s added %d internal keys\\n\", HexStr(seed_id), missing);\n+        } else {\n+            WalletLogPrintf(\"inactive seed with id %s added %d keys\\n\", HexStr(seed_id), missing);\n+        }\n+    }\n+    return true;\n+}\n+\n+const uint32_t BIP32_HARDENED_KEY_LIMIT = 0x80000000;",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 43,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "769b03a83c2aa2b97f344b58dc689be26c6e08e5",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: since you're moving this anyway, the normal convention is to declare constants at the top of the file. Perhaps also add a doxygen comment?",
      "created_at": "2020-05-11T21:15:23Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r423324234",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/423324234"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 332,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/423328009",
      "pull_request_review_id": 409536553,
      "id": 423328009,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyODAwOQ==",
      "diff_hunk": "@@ -405,6 +407,64 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             ssValue >> keyMeta;\n             wss.nKeyMeta++;\n             pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n+\n+            // Extract some CHDChain info from this metadata if it has any\n+            if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA && !keyMeta.hd_seed_id.IsNull() && keyMeta.hdKeypath.size() > 0) {\n+                // Get the path from the key origin or from the path string\n+                // Not applicable when path is \"s\" as that indicates a seed\n+                bool internal = false;\n+                uint32_t index = 0;\n+                if (keyMeta.hdKeypath != \"s\") {\n+                    std::vector<uint32_t> path;\n+                    if (keyMeta.has_key_origin) {\n+                        // We have a key origin, so pull it from it's path vector",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 30,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "769b03a83c2aa2b97f344b58dc689be26c6e08e5",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "grammar nit: s/it's/its/",
      "created_at": "2020-05-11T21:22:55Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r423328009",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/423328009"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 420,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/423333801",
      "pull_request_review_id": 409536553,
      "id": 423333801,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMzMzgwMQ==",
      "diff_hunk": "@@ -405,6 +407,64 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             ssValue >> keyMeta;\n             wss.nKeyMeta++;\n             pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n+\n+            // Extract some CHDChain info from this metadata if it has any\n+            if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA && !keyMeta.hd_seed_id.IsNull() && keyMeta.hdKeypath.size() > 0) {\n+                // Get the path from the key origin or from the path string\n+                // Not applicable when path is \"s\" as that indicates a seed\n+                bool internal = false;\n+                uint32_t index = 0;\n+                if (keyMeta.hdKeypath != \"s\") {\n+                    std::vector<uint32_t> path;\n+                    if (keyMeta.has_key_origin) {\n+                        // We have a key origin, so pull it from it's path vector\n+                        path = keyMeta.key_origin.path;\n+                    } else {\n+                        // No key origin, have to parse the string\n+                        if (!ParseHDKeypath(keyMeta.hdKeypath, path)) {\n+                            strErr = \"Error reading wallet database: keymeta with invalid HD keypath\";\n+                            return false;\n+                        }\n+                    }\n+\n+                    // Extract the index and internal from the path\n+                    // Path string is m/0'/k'/i'\n+                    // Path vector is [0', k', i'] (but as ints OR'd with the hardened bit\n+                    // k == 0 for external, 1 for internal. i is the index\n+                    if (path.size() != 3) {\n+                        strErr = \"Error reading wallet database: keymeta found with unexpected path\";\n+                        return false;\n+                    }\n+                    if (path[0] != (0 | 0x80000000)) {",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 48,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "769b03a83c2aa2b97f344b58dc689be26c6e08e5",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Personally, I think this would be clearer as `(path[0] != (0x80000000))` (remove the `0 |`), or even better, define a constant for BIP_32_HARDENED_BIT.\r\n\r\nSame for check below.",
      "created_at": "2020-05-11T21:35:23Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r423333801",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/423333801"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 438,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/423334301",
      "pull_request_review_id": 409536553,
      "id": 423334301,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMzNDMwMQ==",
      "diff_hunk": "@@ -405,6 +407,64 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             ssValue >> keyMeta;\n             wss.nKeyMeta++;\n             pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n+\n+            // Extract some CHDChain info from this metadata if it has any\n+            if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA && !keyMeta.hd_seed_id.IsNull() && keyMeta.hdKeypath.size() > 0) {\n+                // Get the path from the key origin or from the path string\n+                // Not applicable when path is \"s\" as that indicates a seed\n+                bool internal = false;\n+                uint32_t index = 0;\n+                if (keyMeta.hdKeypath != \"s\") {\n+                    std::vector<uint32_t> path;\n+                    if (keyMeta.has_key_origin) {\n+                        // We have a key origin, so pull it from it's path vector\n+                        path = keyMeta.key_origin.path;\n+                    } else {\n+                        // No key origin, have to parse the string\n+                        if (!ParseHDKeypath(keyMeta.hdKeypath, path)) {\n+                            strErr = \"Error reading wallet database: keymeta with invalid HD keypath\";\n+                            return false;\n+                        }\n+                    }\n+\n+                    // Extract the index and internal from the path\n+                    // Path string is m/0'/k'/i'\n+                    // Path vector is [0', k', i'] (but as ints OR'd with the hardened bit\n+                    // k == 0 for external, 1 for internal. i is the index\n+                    if (path.size() != 3) {\n+                        strErr = \"Error reading wallet database: keymeta found with unexpected path\";\n+                        return false;\n+                    }\n+                    if (path[0] != (0 | 0x80000000)) {\n+                        strErr = \"Unexpected path index for the element at index 0\";\n+                        return false;\n+                    }\n+                    if (path[1] != (0 | 0x80000000) && path[1] != (1 | 0x80000000)) {\n+                        strErr = \"Unexpected path index for the element at index 1\";\n+                        return false;\n+                    }",
      "path": "src/wallet/walletdb.cpp",
      "position": 59,
      "original_position": 55,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "769b03a83c2aa2b97f344b58dc689be26c6e08e5",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "add a check that `path[2] & 0x80000000 == 0x80000000`?",
      "created_at": "2020-05-11T21:36:31Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r423334301",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/423334301"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 449,
      "original_line": 449,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/423338993",
      "pull_request_review_id": 409536553,
      "id": 423338993,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMzODk5Mw==",
      "diff_hunk": "@@ -405,6 +407,64 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             ssValue >> keyMeta;\n             wss.nKeyMeta++;\n             pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n+\n+            // Extract some CHDChain info from this metadata if it has any\n+            if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA && !keyMeta.hd_seed_id.IsNull() && keyMeta.hdKeypath.size() > 0) {\n+                // Get the path from the key origin or from the path string\n+                // Not applicable when path is \"s\" as that indicates a seed\n+                bool internal = false;\n+                uint32_t index = 0;\n+                if (keyMeta.hdKeypath != \"s\") {\n+                    std::vector<uint32_t> path;\n+                    if (keyMeta.has_key_origin) {\n+                        // We have a key origin, so pull it from it's path vector\n+                        path = keyMeta.key_origin.path;\n+                    } else {\n+                        // No key origin, have to parse the string\n+                        if (!ParseHDKeypath(keyMeta.hdKeypath, path)) {\n+                            strErr = \"Error reading wallet database: keymeta with invalid HD keypath\";\n+                            return false;\n+                        }\n+                    }\n+\n+                    // Extract the index and internal from the path\n+                    // Path string is m/0'/k'/i'\n+                    // Path vector is [0', k', i'] (but as ints OR'd with the hardened bit\n+                    // k == 0 for external, 1 for internal. i is the index\n+                    if (path.size() != 3) {\n+                        strErr = \"Error reading wallet database: keymeta found with unexpected path\";\n+                        return false;\n+                    }\n+                    if (path[0] != (0 | 0x80000000)) {\n+                        strErr = \"Unexpected path index for the element at index 0\";\n+                        return false;\n+                    }\n+                    if (path[1] != (0 | 0x80000000) && path[1] != (1 | 0x80000000)) {\n+                        strErr = \"Unexpected path index for the element at index 1\";\n+                        return false;\n+                    }\n+                    internal = path[1] == (1 | 0x80000000);\n+                    index = path[2] & ~0x80000000;\n+                }\n+\n+                // Insert a new CHDChain, or get the one that already exists\n+                auto ins = wss.m_hd_chains.emplace(keyMeta.hd_seed_id, CHDChain());\n+                CHDChain& chain = ins.first->second;\n+                if (ins.second) {\n+                    // For new chains, we want to default to VERSION_HD_BASE until we see an internal\n+                    chain.nVersion = CHDChain::VERSION_HD_BASE;\n+                    // Set the seed id\n+                    chain.seed_id = keyMeta.hd_seed_id;\n+                }\n+                if (internal) {\n+                    if (chain.nVersion < CHDChain::VERSION_HD_CHAIN_SPLIT) {",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 70,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "769b03a83c2aa2b97f344b58dc689be26c6e08e5",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: Is this `if` statement required? Can't you just set `chain.nVersion` to `CHDChain::VERSION_HD_CHAIN_SPLIT` every time you're in the `internal` branch? If not, the following seems preferable:\r\n\r\n```\r\nchain.nVersion = std::max(chain.nVersion, CHDChain::VERSION_HD_CHAIN_SPLIT);\r\n```\r\n\r\nto match the formatting below.",
      "created_at": "2020-05-11T21:46:58Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r423338993",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/423338993"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 460,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/423345205",
      "pull_request_review_id": 409536553,
      "id": 423345205,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM0NTIwNQ==",
      "diff_hunk": "@@ -304,6 +345,19 @@ void LegacyScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n                 WalletLogPrintf(\"%s: Topping up keypool failed (locked wallet)\\n\", __func__);\n             }\n         }\n+\n+        auto it = mapKeyMetadata.find(keyid);\n+        if (it != mapKeyMetadata.end()){\n+            CKeyMetadata meta = it->second;\n+            if (!meta.hd_seed_id.IsNull() && meta.hd_seed_id != m_hd_chain.seed_id) {\n+                bool internal = meta.key_origin.path[1] - BIP32_HARDENED_KEY_LIMIT != 0;",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 57,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "769b03a83c2aa2b97f344b58dc689be26c6e08e5",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: it seems slightly inconsistent that we're sometimes using BIP32_HARDENED_KEY_LIMIT as a value for arithmetic operations and sometimes as a bit for bitwise operations. Functionally it's fine, but It seems slightly clearer to me to do:\r\n\r\n```\r\nbool internal = meta.key_origin.path[1] & ~BIP32_HARDENED_KEY_LIMIT != 0;\r\n```\r\n\r\nand the same below for `index`",
      "created_at": "2020-05-11T22:01:18Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r423345205",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/423345205"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 353,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/423350654",
      "pull_request_review_id": 409536553,
      "id": 423350654,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM1MDY1NA==",
      "diff_hunk": "@@ -304,6 +345,19 @@ void LegacyScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n                 WalletLogPrintf(\"%s: Topping up keypool failed (locked wallet)\\n\", __func__);\n             }\n         }\n+\n+        auto it = mapKeyMetadata.find(keyid);\n+        if (it != mapKeyMetadata.end()){\n+            CKeyMetadata meta = it->second;\n+            if (!meta.hd_seed_id.IsNull() && meta.hd_seed_id != m_hd_chain.seed_id) {\n+                bool internal = meta.key_origin.path[1] - BIP32_HARDENED_KEY_LIMIT != 0;\n+                int64_t index = meta.key_origin.path[2] - BIP32_HARDENED_KEY_LIMIT;\n+\n+                if (!TopUpInactiveHDChain(meta.hd_seed_id, index, internal)) {\n+                    WalletLogPrintf(\"%s: Adding inactive seed keys failed (locked wallet)\\n\", __func__);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 61,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "769b03a83c2aa2b97f344b58dc689be26c6e08e5",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Remove \"(locked wallet)\". `TopUpInactiveHDChain()` can return false for multiple reasons.",
      "created_at": "2020-05-11T22:14:37Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r423350654",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/423350654"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 357,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/423353444",
      "pull_request_review_id": 409536553,
      "id": 423353444,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM1MzQ0NA==",
      "diff_hunk": "@@ -290,6 +290,47 @@ bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool i\n     return true;\n }\n \n+bool LegacyScriptPubKeyMan::TopUpInactiveHDChain(const CKeyID seed_id, int64_t index, bool internal)\n+{\n+    LOCK(cs_KeyStore);\n+\n+    if (m_storage.IsLocked()) return false;\n+\n+    auto it = m_inactive_hd_chains.find(seed_id);\n+    if (it == m_inactive_hd_chains.end()) {\n+        return false;\n+    }\n+\n+    CHDChain& chain = it->second;\n+\n+    // Top up key pool\n+    int64_t target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n+\n+    // \"size\" of the keypools. Not really the size, actually the difference between index and the chain counter\n+    // Since chain counter is 1 based and index is 0 based, one of them needs to be offset by 1.\n+    int64_t kp_size = (internal ? chain.nInternalChainCounter : chain.nExternalChainCounter) - (index + 1);\n+\n+    // count number of missing keys (internal, external)",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "769b03a83c2aa2b97f344b58dc689be26c6e08e5",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You've copied this comment from `TopUp()`, but it doesn't make sense in this context, because you're not topping up both internal and external keypools here.",
      "created_at": "2020-05-11T22:21:46Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r423353444",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/423353444"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 313,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/423355017",
      "pull_request_review_id": 409536553,
      "id": 423355017,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM1NTAxNw==",
      "diff_hunk": "@@ -290,6 +290,47 @@ bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool i\n     return true;\n }\n \n+bool LegacyScriptPubKeyMan::TopUpInactiveHDChain(const CKeyID seed_id, int64_t index, bool internal)\n+{\n+    LOCK(cs_KeyStore);\n+\n+    if (m_storage.IsLocked()) return false;\n+\n+    auto it = m_inactive_hd_chains.find(seed_id);\n+    if (it == m_inactive_hd_chains.end()) {\n+        return false;\n+    }\n+\n+    CHDChain& chain = it->second;\n+\n+    // Top up key pool\n+    int64_t target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n+\n+    // \"size\" of the keypools. Not really the size, actually the difference between index and the chain counter\n+    // Since chain counter is 1 based and index is 0 based, one of them needs to be offset by 1.\n+    int64_t kp_size = (internal ? chain.nInternalChainCounter : chain.nExternalChainCounter) - (index + 1);\n+\n+    // count number of missing keys (internal, external)\n+    // make sure the keypool of external and internal keys fits the user-selected target (-keypool)\n+    int64_t missing = std::max(std::max((int64_t) target_size, (int64_t) 1) - kp_size, (int64_t) 0);\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    for (int64_t i = missing; i > 0; --i) {\n+        CPubKey pubkey(GenerateNewKey(batch, chain, internal));\n+        AddKeypoolPubkeyWithDB(pubkey, internal, batch);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "769b03a83c2aa2b97f344b58dc689be26c6e08e5",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This doesn't seem right. It adds the key to setInternalKeyPool or setExternalKeyPool, but I don't think we want to do that?",
      "created_at": "2020-05-11T22:25:40Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r423355017",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/423355017"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 320,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/423393936",
      "pull_request_review_id": 409619426,
      "id": 423393936,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM5MzkzNg==",
      "diff_hunk": "@@ -290,6 +290,47 @@ bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool i\n     return true;\n }\n \n+bool LegacyScriptPubKeyMan::TopUpInactiveHDChain(const CKeyID seed_id, int64_t index, bool internal)\n+{\n+    LOCK(cs_KeyStore);\n+\n+    if (m_storage.IsLocked()) return false;\n+\n+    auto it = m_inactive_hd_chains.find(seed_id);\n+    if (it == m_inactive_hd_chains.end()) {\n+        return false;\n+    }\n+\n+    CHDChain& chain = it->second;\n+\n+    // Top up key pool\n+    int64_t target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n+\n+    // \"size\" of the keypools. Not really the size, actually the difference between index and the chain counter\n+    // Since chain counter is 1 based and index is 0 based, one of them needs to be offset by 1.\n+    int64_t kp_size = (internal ? chain.nInternalChainCounter : chain.nExternalChainCounter) - (index + 1);\n+\n+    // count number of missing keys (internal, external)\n+    // make sure the keypool of external and internal keys fits the user-selected target (-keypool)\n+    int64_t missing = std::max(std::max((int64_t) target_size, (int64_t) 1) - kp_size, (int64_t) 0);\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    for (int64_t i = missing; i > 0; --i) {\n+        CPubKey pubkey(GenerateNewKey(batch, chain, internal));\n+        AddKeypoolPubkeyWithDB(pubkey, internal, batch);\n+    }\n+    if (missing > 0) {\n+        if (internal) {\n+            WalletLogPrintf(\"inactive seed with id %s added %d internal keys\\n\", HexStr(seed_id), missing);\n+        } else {\n+            WalletLogPrintf(\"inactive seed with id %s added %d keys\\n\", HexStr(seed_id), missing);\n+        }\n+    }\n+    return true;\n+}\n+\n+const uint32_t BIP32_HARDENED_KEY_LIMIT = 0x80000000;",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 43,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "769b03a83c2aa2b97f344b58dc689be26c6e08e5",
      "in_reply_to_id": 423324234,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-05-12T00:25:47Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r423393936",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/423393936"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 332,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/423393972",
      "pull_request_review_id": 409619451,
      "id": 423393972,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM5Mzk3Mg==",
      "diff_hunk": "@@ -405,6 +407,64 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             ssValue >> keyMeta;\n             wss.nKeyMeta++;\n             pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n+\n+            // Extract some CHDChain info from this metadata if it has any\n+            if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA && !keyMeta.hd_seed_id.IsNull() && keyMeta.hdKeypath.size() > 0) {\n+                // Get the path from the key origin or from the path string\n+                // Not applicable when path is \"s\" as that indicates a seed\n+                bool internal = false;\n+                uint32_t index = 0;\n+                if (keyMeta.hdKeypath != \"s\") {\n+                    std::vector<uint32_t> path;\n+                    if (keyMeta.has_key_origin) {\n+                        // We have a key origin, so pull it from it's path vector",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 30,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "769b03a83c2aa2b97f344b58dc689be26c6e08e5",
      "in_reply_to_id": 423328009,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-05-12T00:25:50Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r423393972",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/423393972"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 420,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/423394002",
      "pull_request_review_id": 409619473,
      "id": 423394002,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM5NDAwMg==",
      "diff_hunk": "@@ -405,6 +407,64 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             ssValue >> keyMeta;\n             wss.nKeyMeta++;\n             pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n+\n+            // Extract some CHDChain info from this metadata if it has any\n+            if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA && !keyMeta.hd_seed_id.IsNull() && keyMeta.hdKeypath.size() > 0) {\n+                // Get the path from the key origin or from the path string\n+                // Not applicable when path is \"s\" as that indicates a seed\n+                bool internal = false;\n+                uint32_t index = 0;\n+                if (keyMeta.hdKeypath != \"s\") {\n+                    std::vector<uint32_t> path;\n+                    if (keyMeta.has_key_origin) {\n+                        // We have a key origin, so pull it from it's path vector\n+                        path = keyMeta.key_origin.path;\n+                    } else {\n+                        // No key origin, have to parse the string\n+                        if (!ParseHDKeypath(keyMeta.hdKeypath, path)) {\n+                            strErr = \"Error reading wallet database: keymeta with invalid HD keypath\";\n+                            return false;\n+                        }\n+                    }\n+\n+                    // Extract the index and internal from the path\n+                    // Path string is m/0'/k'/i'\n+                    // Path vector is [0', k', i'] (but as ints OR'd with the hardened bit\n+                    // k == 0 for external, 1 for internal. i is the index\n+                    if (path.size() != 3) {\n+                        strErr = \"Error reading wallet database: keymeta found with unexpected path\";\n+                        return false;\n+                    }\n+                    if (path[0] != (0 | 0x80000000)) {",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 48,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "769b03a83c2aa2b97f344b58dc689be26c6e08e5",
      "in_reply_to_id": 423333801,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-05-12T00:25:55Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r423394002",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/423394002"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 438,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/423394015",
      "pull_request_review_id": 409619491,
      "id": 423394015,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM5NDAxNQ==",
      "diff_hunk": "@@ -405,6 +407,64 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             ssValue >> keyMeta;\n             wss.nKeyMeta++;\n             pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n+\n+            // Extract some CHDChain info from this metadata if it has any\n+            if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA && !keyMeta.hd_seed_id.IsNull() && keyMeta.hdKeypath.size() > 0) {\n+                // Get the path from the key origin or from the path string\n+                // Not applicable when path is \"s\" as that indicates a seed\n+                bool internal = false;\n+                uint32_t index = 0;\n+                if (keyMeta.hdKeypath != \"s\") {\n+                    std::vector<uint32_t> path;\n+                    if (keyMeta.has_key_origin) {\n+                        // We have a key origin, so pull it from it's path vector\n+                        path = keyMeta.key_origin.path;\n+                    } else {\n+                        // No key origin, have to parse the string\n+                        if (!ParseHDKeypath(keyMeta.hdKeypath, path)) {\n+                            strErr = \"Error reading wallet database: keymeta with invalid HD keypath\";\n+                            return false;\n+                        }\n+                    }\n+\n+                    // Extract the index and internal from the path\n+                    // Path string is m/0'/k'/i'\n+                    // Path vector is [0', k', i'] (but as ints OR'd with the hardened bit\n+                    // k == 0 for external, 1 for internal. i is the index\n+                    if (path.size() != 3) {\n+                        strErr = \"Error reading wallet database: keymeta found with unexpected path\";\n+                        return false;\n+                    }\n+                    if (path[0] != (0 | 0x80000000)) {\n+                        strErr = \"Unexpected path index for the element at index 0\";\n+                        return false;\n+                    }\n+                    if (path[1] != (0 | 0x80000000) && path[1] != (1 | 0x80000000)) {\n+                        strErr = \"Unexpected path index for the element at index 1\";\n+                        return false;\n+                    }",
      "path": "src/wallet/walletdb.cpp",
      "position": 59,
      "original_position": 55,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "769b03a83c2aa2b97f344b58dc689be26c6e08e5",
      "in_reply_to_id": 423334301,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-05-12T00:25:59Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r423394015",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/423394015"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 449,
      "original_line": 449,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/423394070",
      "pull_request_review_id": 409619565,
      "id": 423394070,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM5NDA3MA==",
      "diff_hunk": "@@ -405,6 +407,64 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             ssValue >> keyMeta;\n             wss.nKeyMeta++;\n             pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n+\n+            // Extract some CHDChain info from this metadata if it has any\n+            if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA && !keyMeta.hd_seed_id.IsNull() && keyMeta.hdKeypath.size() > 0) {\n+                // Get the path from the key origin or from the path string\n+                // Not applicable when path is \"s\" as that indicates a seed\n+                bool internal = false;\n+                uint32_t index = 0;\n+                if (keyMeta.hdKeypath != \"s\") {\n+                    std::vector<uint32_t> path;\n+                    if (keyMeta.has_key_origin) {\n+                        // We have a key origin, so pull it from it's path vector\n+                        path = keyMeta.key_origin.path;\n+                    } else {\n+                        // No key origin, have to parse the string\n+                        if (!ParseHDKeypath(keyMeta.hdKeypath, path)) {\n+                            strErr = \"Error reading wallet database: keymeta with invalid HD keypath\";\n+                            return false;\n+                        }\n+                    }\n+\n+                    // Extract the index and internal from the path\n+                    // Path string is m/0'/k'/i'\n+                    // Path vector is [0', k', i'] (but as ints OR'd with the hardened bit\n+                    // k == 0 for external, 1 for internal. i is the index\n+                    if (path.size() != 3) {\n+                        strErr = \"Error reading wallet database: keymeta found with unexpected path\";\n+                        return false;\n+                    }\n+                    if (path[0] != (0 | 0x80000000)) {\n+                        strErr = \"Unexpected path index for the element at index 0\";\n+                        return false;\n+                    }\n+                    if (path[1] != (0 | 0x80000000) && path[1] != (1 | 0x80000000)) {\n+                        strErr = \"Unexpected path index for the element at index 1\";\n+                        return false;\n+                    }\n+                    internal = path[1] == (1 | 0x80000000);\n+                    index = path[2] & ~0x80000000;\n+                }\n+\n+                // Insert a new CHDChain, or get the one that already exists\n+                auto ins = wss.m_hd_chains.emplace(keyMeta.hd_seed_id, CHDChain());\n+                CHDChain& chain = ins.first->second;\n+                if (ins.second) {\n+                    // For new chains, we want to default to VERSION_HD_BASE until we see an internal\n+                    chain.nVersion = CHDChain::VERSION_HD_BASE;\n+                    // Set the seed id\n+                    chain.seed_id = keyMeta.hd_seed_id;\n+                }\n+                if (internal) {\n+                    if (chain.nVersion < CHDChain::VERSION_HD_CHAIN_SPLIT) {",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 70,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "769b03a83c2aa2b97f344b58dc689be26c6e08e5",
      "in_reply_to_id": 423338993,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I suppose the `if` isn't required. Removed it.",
      "created_at": "2020-05-12T00:26:11Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r423394070",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/423394070"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 460,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/423394088",
      "pull_request_review_id": 409619586,
      "id": 423394088,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM5NDA4OA==",
      "diff_hunk": "@@ -304,6 +345,19 @@ void LegacyScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n                 WalletLogPrintf(\"%s: Topping up keypool failed (locked wallet)\\n\", __func__);\n             }\n         }\n+\n+        auto it = mapKeyMetadata.find(keyid);\n+        if (it != mapKeyMetadata.end()){\n+            CKeyMetadata meta = it->second;\n+            if (!meta.hd_seed_id.IsNull() && meta.hd_seed_id != m_hd_chain.seed_id) {\n+                bool internal = meta.key_origin.path[1] - BIP32_HARDENED_KEY_LIMIT != 0;",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 57,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "769b03a83c2aa2b97f344b58dc689be26c6e08e5",
      "in_reply_to_id": 423345205,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-05-12T00:26:15Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r423394088",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/423394088"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 353,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/423394110",
      "pull_request_review_id": 409619601,
      "id": 423394110,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM5NDExMA==",
      "diff_hunk": "@@ -304,6 +345,19 @@ void LegacyScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n                 WalletLogPrintf(\"%s: Topping up keypool failed (locked wallet)\\n\", __func__);\n             }\n         }\n+\n+        auto it = mapKeyMetadata.find(keyid);\n+        if (it != mapKeyMetadata.end()){\n+            CKeyMetadata meta = it->second;\n+            if (!meta.hd_seed_id.IsNull() && meta.hd_seed_id != m_hd_chain.seed_id) {\n+                bool internal = meta.key_origin.path[1] - BIP32_HARDENED_KEY_LIMIT != 0;\n+                int64_t index = meta.key_origin.path[2] - BIP32_HARDENED_KEY_LIMIT;\n+\n+                if (!TopUpInactiveHDChain(meta.hd_seed_id, index, internal)) {\n+                    WalletLogPrintf(\"%s: Adding inactive seed keys failed (locked wallet)\\n\", __func__);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 61,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "769b03a83c2aa2b97f344b58dc689be26c6e08e5",
      "in_reply_to_id": 423350654,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-05-12T00:26:19Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r423394110",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/423394110"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 357,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/423394134",
      "pull_request_review_id": 409619631,
      "id": 423394134,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM5NDEzNA==",
      "diff_hunk": "@@ -290,6 +290,47 @@ bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool i\n     return true;\n }\n \n+bool LegacyScriptPubKeyMan::TopUpInactiveHDChain(const CKeyID seed_id, int64_t index, bool internal)\n+{\n+    LOCK(cs_KeyStore);\n+\n+    if (m_storage.IsLocked()) return false;\n+\n+    auto it = m_inactive_hd_chains.find(seed_id);\n+    if (it == m_inactive_hd_chains.end()) {\n+        return false;\n+    }\n+\n+    CHDChain& chain = it->second;\n+\n+    // Top up key pool\n+    int64_t target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n+\n+    // \"size\" of the keypools. Not really the size, actually the difference between index and the chain counter\n+    // Since chain counter is 1 based and index is 0 based, one of them needs to be offset by 1.\n+    int64_t kp_size = (internal ? chain.nInternalChainCounter : chain.nExternalChainCounter) - (index + 1);\n+\n+    // count number of missing keys (internal, external)",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "769b03a83c2aa2b97f344b58dc689be26c6e08e5",
      "in_reply_to_id": 423353444,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removed",
      "created_at": "2020-05-12T00:26:24Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r423394134",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/423394134"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 313,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/423394171",
      "pull_request_review_id": 409619687,
      "id": 423394171,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM5NDE3MQ==",
      "diff_hunk": "@@ -290,6 +290,47 @@ bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool i\n     return true;\n }\n \n+bool LegacyScriptPubKeyMan::TopUpInactiveHDChain(const CKeyID seed_id, int64_t index, bool internal)\n+{\n+    LOCK(cs_KeyStore);\n+\n+    if (m_storage.IsLocked()) return false;\n+\n+    auto it = m_inactive_hd_chains.find(seed_id);\n+    if (it == m_inactive_hd_chains.end()) {\n+        return false;\n+    }\n+\n+    CHDChain& chain = it->second;\n+\n+    // Top up key pool\n+    int64_t target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n+\n+    // \"size\" of the keypools. Not really the size, actually the difference between index and the chain counter\n+    // Since chain counter is 1 based and index is 0 based, one of them needs to be offset by 1.\n+    int64_t kp_size = (internal ? chain.nInternalChainCounter : chain.nExternalChainCounter) - (index + 1);\n+\n+    // count number of missing keys (internal, external)\n+    // make sure the keypool of external and internal keys fits the user-selected target (-keypool)\n+    int64_t missing = std::max(std::max((int64_t) target_size, (int64_t) 1) - kp_size, (int64_t) 0);\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    for (int64_t i = missing; i > 0; --i) {\n+        CPubKey pubkey(GenerateNewKey(batch, chain, internal));\n+        AddKeypoolPubkeyWithDB(pubkey, internal, batch);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "769b03a83c2aa2b97f344b58dc689be26c6e08e5",
      "in_reply_to_id": 423355017,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removed.",
      "created_at": "2020-05-12T00:26:31Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r423394171",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/423394171"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 320,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/423813368",
      "pull_request_review_id": 410144444,
      "id": 423813368,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgxMzM2OA==",
      "diff_hunk": "@@ -304,6 +344,19 @@ void LegacyScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n                 WalletLogPrintf(\"%s: Topping up keypool failed (locked wallet)\\n\", __func__);\n             }\n         }\n+\n+        auto it = mapKeyMetadata.find(keyid);\n+        if (it != mapKeyMetadata.end()){\n+            CKeyMetadata meta = it->second;\n+            if (!meta.hd_seed_id.IsNull() && meta.hd_seed_id != m_hd_chain.seed_id) {\n+                bool internal = meta.key_origin.path[1] & ~BIP32_HARDENED_KEY_LIMIT != 0;",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 63,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "2feb5a2d0403edeb680c21e6f19c37c06a59d859",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This line is causing a -Wparentheses build warning `suggest parentheses around comparison in operand of ‘&’`",
      "created_at": "2020-05-12T15:11:08Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r423813368",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/423813368"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 352,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/423814573",
      "pull_request_review_id": 410146052,
      "id": 423814573,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgxNDU3Mw==",
      "diff_hunk": "@@ -728,6 +786,20 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n         result = DBErrors::CORRUPT;\n     }\n \n+    // Set the inactive chain\n+    if (wss.m_hd_chains.size() > 0) {\n+        LegacyScriptPubKeyMan* legacy_spkm = pwallet->GetLegacyScriptPubKeyMan();\n+        if (!legacy_spkm) {\n+            pwallet->WalletLogPrintf(\"Inactive HD Chains found but no Legacy ScriptPubKeyMan\");",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 87,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "2feb5a2d0403edeb680c21e6f19c37c06a59d859",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This line is making `test/lint/lint-logs.sh` unhappy, appeased with:\r\n```diff\r\n-            pwallet->WalletLogPrintf(\"Inactive HD Chains found but no Legacy ScriptPubKeyMan\");\r\n+            pwallet->WalletLogPrintf(\"Inactive HD Chains found but no Legacy ScriptPubKeyMan\\n\");\r\n```",
      "created_at": "2020-05-12T15:12:48Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r423814573",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/423814573"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 793,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/423870476",
      "pull_request_review_id": 410216791,
      "id": 423870476,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg3MDQ3Ng==",
      "diff_hunk": "@@ -304,6 +344,19 @@ void LegacyScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n                 WalletLogPrintf(\"%s: Topping up keypool failed (locked wallet)\\n\", __func__);\n             }\n         }\n+\n+        auto it = mapKeyMetadata.find(keyid);\n+        if (it != mapKeyMetadata.end()){\n+            CKeyMetadata meta = it->second;\n+            if (!meta.hd_seed_id.IsNull() && meta.hd_seed_id != m_hd_chain.seed_id) {\n+                bool internal = meta.key_origin.path[1] & ~BIP32_HARDENED_KEY_LIMIT != 0;",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 63,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "2feb5a2d0403edeb680c21e6f19c37c06a59d859",
      "in_reply_to_id": 423813368,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-05-12T16:28:37Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r423870476",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/423870476"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 352,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/423870527",
      "pull_request_review_id": 410216854,
      "id": 423870527,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg3MDUyNw==",
      "diff_hunk": "@@ -728,6 +786,20 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n         result = DBErrors::CORRUPT;\n     }\n \n+    // Set the inactive chain\n+    if (wss.m_hd_chains.size() > 0) {\n+        LegacyScriptPubKeyMan* legacy_spkm = pwallet->GetLegacyScriptPubKeyMan();\n+        if (!legacy_spkm) {\n+            pwallet->WalletLogPrintf(\"Inactive HD Chains found but no Legacy ScriptPubKeyMan\");",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 87,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "2feb5a2d0403edeb680c21e6f19c37c06a59d859",
      "in_reply_to_id": 423814573,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-05-12T16:28:40Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r423870527",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/423870527"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 793,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/423901460",
      "pull_request_review_id": 410256690,
      "id": 423901460,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkwMTQ2MA==",
      "diff_hunk": "@@ -290,6 +293,43 @@ bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool i\n     return true;\n }\n \n+bool LegacyScriptPubKeyMan::TopUpInactiveHDChain(const CKeyID seed_id, int64_t index, bool internal)\n+{\n+    LOCK(cs_KeyStore);\n+\n+    if (m_storage.IsLocked()) return false;\n+\n+    auto it = m_inactive_hd_chains.find(seed_id);\n+    if (it == m_inactive_hd_chains.end()) {\n+        return false;\n+    }\n+\n+    CHDChain& chain = it->second;\n+\n+    // Top up key pool\n+    int64_t target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n+\n+    // \"size\" of the keypools. Not really the size, actually the difference between index and the chain counter\n+    // Since chain counter is 1 based and index is 0 based, one of them needs to be offset by 1.\n+    int64_t kp_size = (internal ? chain.nInternalChainCounter : chain.nExternalChainCounter) - (index + 1);\n+\n+    // make sure the keypool fits the user-selected target (-keypool)\n+    int64_t missing = std::max(std::max((int64_t) target_size, (int64_t) 1) - kp_size, (int64_t) 0);\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    for (int64_t i = missing; i > 0; --i) {\n+        CPubKey pubkey(GenerateNewKey(batch, chain, internal));\n+    }\n+    if (missing > 0) {",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 37,
      "original_position": 41,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "a5c3f3218be69ef2a7633bd9fa34963602d1c44f",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "f5eaa903 I think we can tuck this object and loop inside the conditional, to skip it if `missing` is zero.\r\n```diff\r\n-    WalletBatch batch(m_storage.GetDatabase());\r\n-    for (int64_t i = missing; i > 0; --i) {\r\n-        GenerateNewKey(batch, chain, internal);\r\n-    }\r\n     if (missing > 0) {\r\n+        WalletBatch batch(m_storage.GetDatabase());\r\n+        for (int64_t i = missing; i > 0; --i) {\r\n+            GenerateNewKey(batch, chain, internal);\r\n+        }\r\n         if (internal) {\r\n             WalletLogPrintf(\"inactive seed with id %s added %d internal keys\\n\", HexStr(seed_id), missing);\r\n         } else {\r\n```",
      "created_at": "2020-05-12T17:16:38Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r423901460",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/423901460"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 319,
      "original_line": 319,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/423969969",
      "pull_request_review_id": 410256690,
      "id": 423969969,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk2OTk2OQ==",
      "diff_hunk": "@@ -319,6 +333,18 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n      */\n     bool ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fRequestedInternal);\n \n+    /**\n+     * Like TopUp() but adds keys for inactive HD chains.\n+     * Ensures that there are at least -keypool number of keys derived after the given index.\n+     *\n+     * @param seed_id the CKeyID for the HD seed.\n+     * @param index the index to start generating keys from\n+     * @param internal whether the internal chain should be used. true for internal chain, false for external chain.\n+     *\n+     * @@return true if seed was found and keys were derived. false if unable to derive seeds",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 53,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "218c4f6405df2b389411f8370057319bfdc59f48",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "f5eaa903 s/@@return/@return/",
      "created_at": "2020-05-12T19:10:11Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r423969969",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/423969969"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 344,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/423983309",
      "pull_request_review_id": 410256690,
      "id": 423983309,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk4MzMwOQ==",
      "diff_hunk": "@@ -290,6 +293,43 @@ bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool i\n     return true;\n }\n \n+bool LegacyScriptPubKeyMan::TopUpInactiveHDChain(const CKeyID seed_id, int64_t index, bool internal)\n+{\n+    LOCK(cs_KeyStore);\n+\n+    if (m_storage.IsLocked()) return false;\n+\n+    auto it = m_inactive_hd_chains.find(seed_id);\n+    if (it == m_inactive_hd_chains.end()) {\n+        return false;\n+    }\n+\n+    CHDChain& chain = it->second;\n+\n+    // Top up key pool\n+    int64_t target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n+\n+    // \"size\" of the keypools. Not really the size, actually the difference between index and the chain counter\n+    // Since chain counter is 1 based and index is 0 based, one of them needs to be offset by 1.\n+    int64_t kp_size = (internal ? chain.nInternalChainCounter : chain.nExternalChainCounter) - (index + 1);\n+\n+    // make sure the keypool fits the user-selected target (-keypool)\n+    int64_t missing = std::max(std::max((int64_t) target_size, (int64_t) 1) - kp_size, (int64_t) 0);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 35,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "218c4f6405df2b389411f8370057319bfdc59f48",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "f5eaa90 suggestion:\r\n```diff\r\n@@ -307,14 +307,14 @@ bool LegacyScriptPubKeyMan::TopUpInactiveHDChain(const CKeyID seed_id, int64_t i\r\n     CHDChain& chain = it->second;\r\n \r\n     // Top up key pool\r\n-    int64_t target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\r\n+    int64_t target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 1);\r\n \r\n     // \"size\" of the keypools. Not really the size, actually the difference between index and the chain counter\r\n     // Since chain counter is 1 based and index is 0 based, one of them needs to be offset by 1.\r\n     int64_t kp_size = (internal ? chain.nInternalChainCounter : chain.nExternalChainCounter) - (index + 1);\r\n \r\n     // make sure the keypool fits the user-selected target (-keypool)\r\n-    int64_t missing = std::max(std::max((int64_t) target_size, (int64_t) 1) - kp_size, (int64_t) 0);\r\n+    int64_t missing = std::max(target_size - kp_size, (int64_t) 0);\r\n```",
      "created_at": "2020-05-12T19:33:59Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r423983309",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/423983309"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 317,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/423986044",
      "pull_request_review_id": 410256690,
      "id": 423986044,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk4NjA0NA==",
      "diff_hunk": "@@ -304,6 +344,19 @@ void LegacyScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n                 WalletLogPrintf(\"%s: Topping up keypool failed (locked wallet)\\n\", __func__);\n             }\n         }\n+",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 66,
      "original_position": 58,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "218c4f6405df2b389411f8370057319bfdc59f48",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "f5eaa90 nit line 341 if you feel like touching it up:\r\n```diff\r\n-            WalletLogPrintf(\"%s: Detected a used keypool key, mark all keypool key up to this key as used\\n\", __func__);\r\n+            WalletLogPrintf(\"%s: Detected a used keypool key, mark all keypool keys up to this key as used\\n\", __func__);\r\n```",
      "created_at": "2020-05-12T19:38:00Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r423986044",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/423986044"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 347,
      "original_line": 347,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/423988278",
      "pull_request_review_id": 410256690,
      "id": 423988278,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk4ODI3OA==",
      "diff_hunk": "@@ -304,6 +344,19 @@ void LegacyScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n                 WalletLogPrintf(\"%s: Topping up keypool failed (locked wallet)\\n\", __func__);\n             }\n         }\n+\n+        auto it = mapKeyMetadata.find(keyid);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 69,
      "original_position": 59,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "218c4f6405df2b389411f8370057319bfdc59f48",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "f5eaa90 nit: I reckon this new code section could use a comment.",
      "created_at": "2020-05-12T19:42:05Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r423988278",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/423988278"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 350,
      "original_line": 350,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/423990239",
      "pull_request_review_id": 410256690,
      "id": 423990239,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk5MDIzOQ==",
      "diff_hunk": "@@ -405,6 +407,62 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             ssValue >> keyMeta;\n             wss.nKeyMeta++;\n             pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n+\n+            // Extract some CHDChain info from this metadata if it has any\n+            if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA && !keyMeta.hd_seed_id.IsNull() && keyMeta.hdKeypath.size() > 0) {\n+                // Get the path from the key origin or from the path string\n+                // Not applicable when path is \"s\" as that indicates a seed\n+                bool internal = false;\n+                uint32_t index = 0;\n+                if (keyMeta.hdKeypath != \"s\") {\n+                    std::vector<uint32_t> path;\n+                    if (keyMeta.has_key_origin) {\n+                        // We have a key origin, so pull it from its path vector\n+                        path = keyMeta.key_origin.path;\n+                    } else {\n+                        // No key origin, have to parse the string\n+                        if (!ParseHDKeypath(keyMeta.hdKeypath, path)) {\n+                            strErr = \"Error reading wallet database: keymeta with invalid HD keypath\";\n+                            return false;\n+                        }\n+                    }\n+\n+                    // Extract the index and internal from the path\n+                    // Path string is m/0'/k'/i'\n+                    // Path vector is [0', k', i'] (but as ints OR'd with the hardened bit\n+                    // k == 0 for external, 1 for internal. i is the index\n+                    if (path.size() != 3) {\n+                        strErr = \"Error reading wallet database: keymeta found with unexpected path\";\n+                        return false;\n+                    }\n+                    if (path[0] != 0x80000000) {\n+                        strErr = \"Unexpected path index for the element at index 0\";\n+                        return false;\n+                    }\n+                    if (path[1] != 0x80000000 && path[1] != (1 | 0x80000000) && (path[2] & 0x80000000)) {\n+                        strErr = \"Unexpected path index for the element at index 1\";\n+                        return false;\n+                    }\n+                    internal = path[1] == (1 | 0x80000000);\n+                    index = path[2] & ~0x80000000;",
      "path": "src/wallet/walletdb.cpp",
      "position": 61,
      "original_position": 57,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "218c4f6405df2b389411f8370057319bfdc59f48",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "f5eaa90 now that `BIP32_HARDENED_KEY_LIMIT` has been added, perhaps replace the 6 instances of `0x80000000` here with it (can be done as a follow-up, as there may be others in the codebase that can use this constant)",
      "created_at": "2020-05-12T19:46:02Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r423990239",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/423990239"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 451,
      "original_line": 451,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/424449934",
      "pull_request_review_id": 410939980,
      "id": 424449934,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0OTkzNA==",
      "diff_hunk": "@@ -290,6 +293,43 @@ bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool i\n     return true;\n }\n \n+bool LegacyScriptPubKeyMan::TopUpInactiveHDChain(const CKeyID seed_id, int64_t index, bool internal)\n+{\n+    LOCK(cs_KeyStore);\n+\n+    if (m_storage.IsLocked()) return false;\n+\n+    auto it = m_inactive_hd_chains.find(seed_id);\n+    if (it == m_inactive_hd_chains.end()) {\n+        return false;\n+    }\n+\n+    CHDChain& chain = it->second;\n+\n+    // Top up key pool\n+    int64_t target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "f5eaa90301a946b889a9708631da2a60cf365cdc",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think `target_size` can fall back to 1 here so it doesn't have to be done below.\r\n```suggestion\r\n    int64_t target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 1);\r\n```",
      "created_at": "2020-05-13T13:45:49Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r424449934",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/424449934"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 310,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/424450844",
      "pull_request_review_id": 410939980,
      "id": 424450844,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ1MDg0NA==",
      "diff_hunk": "@@ -290,6 +293,43 @@ bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool i\n     return true;\n }\n \n+bool LegacyScriptPubKeyMan::TopUpInactiveHDChain(const CKeyID seed_id, int64_t index, bool internal)\n+{\n+    LOCK(cs_KeyStore);\n+\n+    if (m_storage.IsLocked()) return false;\n+\n+    auto it = m_inactive_hd_chains.find(seed_id);\n+    if (it == m_inactive_hd_chains.end()) {\n+        return false;\n+    }\n+\n+    CHDChain& chain = it->second;\n+\n+    // Top up key pool\n+    int64_t target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n+\n+    // \"size\" of the keypools. Not really the size, actually the difference between index and the chain counter\n+    // Since chain counter is 1 based and index is 0 based, one of them needs to be offset by 1.\n+    int64_t kp_size = (internal ? chain.nInternalChainCounter : chain.nExternalChainCounter) - (index + 1);\n+\n+    // make sure the keypool fits the user-selected target (-keypool)\n+    int64_t missing = std::max(std::max((int64_t) target_size, (int64_t) 1) - kp_size, (int64_t) 0);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 35,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "218c4f6405df2b389411f8370057319bfdc59f48",
      "in_reply_to_id": 423983309,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fallback to 1 can be done where `target_size` is defined initially so it can just be removed in this line.",
      "created_at": "2020-05-13T13:47:00Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r424450844",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/424450844"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 317,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/424565904",
      "pull_request_review_id": 411090035,
      "id": 424565904,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU2NTkwNA==",
      "diff_hunk": "@@ -290,6 +290,47 @@ bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool i\n     return true;\n }\n \n+bool LegacyScriptPubKeyMan::TopUpInactiveHDChain(const CKeyID seed_id, int64_t index, bool internal)\n+{\n+    LOCK(cs_KeyStore);\n+\n+    if (m_storage.IsLocked()) return false;\n+\n+    auto it = m_inactive_hd_chains.find(seed_id);\n+    if (it == m_inactive_hd_chains.end()) {\n+        return false;\n+    }\n+\n+    CHDChain& chain = it->second;\n+\n+    // Top up key pool\n+    int64_t target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n+\n+    // \"size\" of the keypools. Not really the size, actually the difference between index and the chain counter\n+    // Since chain counter is 1 based and index is 0 based, one of them needs to be offset by 1.\n+    int64_t kp_size = (internal ? chain.nInternalChainCounter : chain.nExternalChainCounter) - (index + 1);\n+\n+    // count number of missing keys (internal, external)\n+    // make sure the keypool of external and internal keys fits the user-selected target (-keypool)\n+    int64_t missing = std::max(std::max((int64_t) target_size, (int64_t) 1) - kp_size, (int64_t) 0);\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    for (int64_t i = missing; i > 0; --i) {\n+        CPubKey pubkey(GenerateNewKey(batch, chain, internal));\n+        AddKeypoolPubkeyWithDB(pubkey, internal, batch);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "769b03a83c2aa2b97f344b58dc689be26c6e08e5",
      "in_reply_to_id": 423355017,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> This doesn't seem right. It adds the key to setInternalKeyPool or setExternalKeyPool, but I don't think we want to do that?\r\n\r\nTo clarify, this wasn't just wasteful, but also a potentially dangerous bug right? LIke it could have caused new wallet addresses to be generated with the previous hd seed, and possibly stolen funds if money was sent to those addresses and the previous seed was unencrypted or shared with another wallet?",
      "created_at": "2020-05-13T16:19:16Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r424565904",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/424565904"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 320,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/424575480",
      "pull_request_review_id": 411102192,
      "id": 424575480,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU3NTQ4MA==",
      "diff_hunk": "@@ -405,6 +407,62 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             ssValue >> keyMeta;\n             wss.nKeyMeta++;\n             pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n+\n+            // Extract some CHDChain info from this metadata if it has any\n+            if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA && !keyMeta.hd_seed_id.IsNull() && keyMeta.hdKeypath.size() > 0) {\n+                // Get the path from the key origin or from the path string\n+                // Not applicable when path is \"s\" as that indicates a seed\n+                bool internal = false;\n+                uint32_t index = 0;\n+                if (keyMeta.hdKeypath != \"s\") {\n+                    std::vector<uint32_t> path;\n+                    if (keyMeta.has_key_origin) {\n+                        // We have a key origin, so pull it from its path vector\n+                        path = keyMeta.key_origin.path;\n+                    } else {\n+                        // No key origin, have to parse the string\n+                        if (!ParseHDKeypath(keyMeta.hdKeypath, path)) {\n+                            strErr = \"Error reading wallet database: keymeta with invalid HD keypath\";\n+                            return false;\n+                        }\n+                    }\n+\n+                    // Extract the index and internal from the path\n+                    // Path string is m/0'/k'/i'\n+                    // Path vector is [0', k', i'] (but as ints OR'd with the hardened bit\n+                    // k == 0 for external, 1 for internal. i is the index\n+                    if (path.size() != 3) {\n+                        strErr = \"Error reading wallet database: keymeta found with unexpected path\";\n+                        return false;\n+                    }\n+                    if (path[0] != 0x80000000) {\n+                        strErr = \"Unexpected path index for the element at index 0\";\n+                        return false;\n+                    }\n+                    if (path[1] != 0x80000000 && path[1] != (1 | 0x80000000) && (path[2] & 0x80000000)) {\n+                        strErr = \"Unexpected path index for the element at index 1\";\n+                        return false;\n+                    }",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 55,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "9e33fa1b9c1a8c3a20973d4e46a2797324013002",
      "in_reply_to_id": null,
      "user": {
        "login": "jkczyz",
        "id": 4015903,
        "node_id": "MDQ6VXNlcjQwMTU5MDM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4015903?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jkczyz",
        "html_url": "https://github.com/jkczyz",
        "followers_url": "https://api.github.com/users/jkczyz/followers",
        "following_url": "https://api.github.com/users/jkczyz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jkczyz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jkczyz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jkczyz/subscriptions",
        "organizations_url": "https://api.github.com/users/jkczyz/orgs",
        "repos_url": "https://api.github.com/users/jkczyz/repos",
        "events_url": "https://api.github.com/users/jkczyz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jkczyz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Would it be useful to include the unexpected path in `strErr`?",
      "created_at": "2020-05-13T16:33:52Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r424575480",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/424575480"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": 424,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 449,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/424577883",
      "pull_request_review_id": 411102192,
      "id": 424577883,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU3Nzg4Mw==",
      "diff_hunk": "@@ -405,6 +407,62 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             ssValue >> keyMeta;\n             wss.nKeyMeta++;\n             pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n+\n+            // Extract some CHDChain info from this metadata if it has any\n+            if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA && !keyMeta.hd_seed_id.IsNull() && keyMeta.hdKeypath.size() > 0) {\n+                // Get the path from the key origin or from the path string\n+                // Not applicable when path is \"s\" as that indicates a seed\n+                bool internal = false;\n+                uint32_t index = 0;\n+                if (keyMeta.hdKeypath != \"s\") {\n+                    std::vector<uint32_t> path;\n+                    if (keyMeta.has_key_origin) {\n+                        // We have a key origin, so pull it from its path vector\n+                        path = keyMeta.key_origin.path;\n+                    } else {\n+                        // No key origin, have to parse the string\n+                        if (!ParseHDKeypath(keyMeta.hdKeypath, path)) {\n+                            strErr = \"Error reading wallet database: keymeta with invalid HD keypath\";\n+                            return false;\n+                        }\n+                    }\n+\n+                    // Extract the index and internal from the path\n+                    // Path string is m/0'/k'/i'\n+                    // Path vector is [0', k', i'] (but as ints OR'd with the hardened bit\n+                    // k == 0 for external, 1 for internal. i is the index\n+                    if (path.size() != 3) {\n+                        strErr = \"Error reading wallet database: keymeta found with unexpected path\";\n+                        return false;\n+                    }\n+                    if (path[0] != 0x80000000) {\n+                        strErr = \"Unexpected path index for the element at index 0\";\n+                        return false;\n+                    }\n+                    if (path[1] != 0x80000000 && path[1] != (1 | 0x80000000) && (path[2] & 0x80000000)) {\n+                        strErr = \"Unexpected path index for the element at index 1\";\n+                        return false;\n+                    }\n+                    internal = path[1] == (1 | 0x80000000);\n+                    index = path[2] & ~0x80000000;\n+                }\n+\n+                // Insert a new CHDChain, or get the one that already exists\n+                auto ins = wss.m_hd_chains.emplace(keyMeta.hd_seed_id, CHDChain());\n+                CHDChain& chain = ins.first->second;\n+                if (ins.second) {\n+                    // For new chains, we want to default to VERSION_HD_BASE until we see an internal\n+                    chain.nVersion = CHDChain::VERSION_HD_BASE;\n+                    // Set the seed id",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 66,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "9e33fa1b9c1a8c3a20973d4e46a2797324013002",
      "in_reply_to_id": null,
      "user": {
        "login": "jkczyz",
        "id": 4015903,
        "node_id": "MDQ6VXNlcjQwMTU5MDM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4015903?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jkczyz",
        "html_url": "https://github.com/jkczyz",
        "followers_url": "https://api.github.com/users/jkczyz/followers",
        "following_url": "https://api.github.com/users/jkczyz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jkczyz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jkczyz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jkczyz/subscriptions",
        "organizations_url": "https://api.github.com/users/jkczyz/orgs",
        "repos_url": "https://api.github.com/users/jkczyz/repos",
        "events_url": "https://api.github.com/users/jkczyz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jkczyz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This comment doesn't seem to add any value. Remove?",
      "created_at": "2020-05-13T16:37:27Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r424577883",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/424577883"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 456,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/424586338",
      "pull_request_review_id": 411115819,
      "id": 424586338,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4NjMzOA==",
      "diff_hunk": "@@ -290,6 +293,43 @@ bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool i\n     return true;\n }\n \n+bool LegacyScriptPubKeyMan::TopUpInactiveHDChain(const CKeyID seed_id, int64_t index, bool internal)\n+{\n+    LOCK(cs_KeyStore);\n+\n+    if (m_storage.IsLocked()) return false;\n+\n+    auto it = m_inactive_hd_chains.find(seed_id);\n+    if (it == m_inactive_hd_chains.end()) {\n+        return false;\n+    }\n+\n+    CHDChain& chain = it->second;\n+\n+    // Top up key pool\n+    int64_t target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n+\n+    // \"size\" of the keypools. Not really the size, actually the difference between index and the chain counter\n+    // Since chain counter is 1 based and index is 0 based, one of them needs to be offset by 1.\n+    int64_t kp_size = (internal ? chain.nInternalChainCounter : chain.nExternalChainCounter) - (index + 1);\n+\n+    // make sure the keypool fits the user-selected target (-keypool)\n+    int64_t missing = std::max(std::max((int64_t) target_size, (int64_t) 1) - kp_size, (int64_t) 0);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 35,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "218c4f6405df2b389411f8370057319bfdc59f48",
      "in_reply_to_id": 423983309,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Agreed; updated the suggestion.",
      "created_at": "2020-05-13T16:50:44Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r424586338",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/424586338"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 317,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/424639586",
      "pull_request_review_id": 411183267,
      "id": 424639586,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzOTU4Ng==",
      "diff_hunk": "@@ -842,7 +895,14 @@ void LegacyScriptPubKeyMan::SetHDChain(const CHDChain& chain, bool memonly)\n     if (!memonly && !WalletBatch(m_storage.GetDatabase()).WriteHDChain(chain))\n         throw std::runtime_error(std::string(__func__) + \": writing chain failed\");\n \n-    hdChain = chain;\n+    m_hd_chain = chain;\n+}\n+\n+void LegacyScriptPubKeyMan::AddInactiveHDChain(const CHDChain& chain)",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 116,
      "original_position": 91,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "218c4f6405df2b389411f8370057319bfdc59f48",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Per today's review club session, should `AddInactiveHDChain` be called not only from `LoadWallet` but also from sethdseed (or elsewhere), and tests updated to check for that case.",
      "created_at": "2020-05-13T18:18:44Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r424639586",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/424639586"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 913,
      "original_line": 913,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425866177",
      "pull_request_review_id": 412732619,
      "id": 425866177,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg2NjE3Nw==",
      "diff_hunk": "@@ -842,7 +895,14 @@ void LegacyScriptPubKeyMan::SetHDChain(const CHDChain& chain, bool memonly)\n     if (!memonly && !WalletBatch(m_storage.GetDatabase()).WriteHDChain(chain))",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 84,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "218c4f6405df2b389411f8370057319bfdc59f48",
      "in_reply_to_id": null,
      "user": {
        "login": "rajarshimaitra",
        "id": 36541669,
        "node_id": "MDQ6VXNlcjM2NTQxNjY5",
        "avatar_url": "https://avatars.githubusercontent.com/u/36541669?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rajarshimaitra",
        "html_url": "https://github.com/rajarshimaitra",
        "followers_url": "https://api.github.com/users/rajarshimaitra/followers",
        "following_url": "https://api.github.com/users/rajarshimaitra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rajarshimaitra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rajarshimaitra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rajarshimaitra/subscriptions",
        "organizations_url": "https://api.github.com/users/rajarshimaitra/orgs",
        "repos_url": "https://api.github.com/users/rajarshimaitra/repos",
        "events_url": "https://api.github.com/users/rajarshimaitra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rajarshimaitra/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "As per the review club discussion, the intended behavior is only effective when the wallet is reloaded. As `SetHdChain` is writing the chains to the disk, `CWalletScanState` can only observe the presence of the old chains if it reads back from the disk. This means after setting the seed user must reload the wallet to track inactive chains which might not be readily obvious. could `SetHdChain` detect that a previous chain is being replaced and correspondingly call  `AddInactiveHDChain` before writing the new one to the disk? ",
      "created_at": "2020-05-15T15:07:49Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r425866177",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425866177"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 895,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426050282",
      "pull_request_review_id": 412972378,
      "id": 426050282,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA1MDI4Mg==",
      "diff_hunk": "@@ -405,6 +407,62 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             ssValue >> keyMeta;\n             wss.nKeyMeta++;\n             pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n+\n+            // Extract some CHDChain info from this metadata if it has any\n+            if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA && !keyMeta.hd_seed_id.IsNull() && keyMeta.hdKeypath.size() > 0) {\n+                // Get the path from the key origin or from the path string\n+                // Not applicable when path is \"s\" as that indicates a seed\n+                bool internal = false;\n+                uint32_t index = 0;\n+                if (keyMeta.hdKeypath != \"s\") {\n+                    std::vector<uint32_t> path;\n+                    if (keyMeta.has_key_origin) {\n+                        // We have a key origin, so pull it from its path vector\n+                        path = keyMeta.key_origin.path;\n+                    } else {\n+                        // No key origin, have to parse the string\n+                        if (!ParseHDKeypath(keyMeta.hdKeypath, path)) {\n+                            strErr = \"Error reading wallet database: keymeta with invalid HD keypath\";\n+                            return false;\n+                        }\n+                    }\n+\n+                    // Extract the index and internal from the path\n+                    // Path string is m/0'/k'/i'\n+                    // Path vector is [0', k', i'] (but as ints OR'd with the hardened bit\n+                    // k == 0 for external, 1 for internal. i is the index\n+                    if (path.size() != 3) {\n+                        strErr = \"Error reading wallet database: keymeta found with unexpected path\";\n+                        return false;\n+                    }\n+                    if (path[0] != 0x80000000) {\n+                        strErr = \"Unexpected path index for the element at index 0\";\n+                        return false;\n+                    }\n+                    if (path[1] != 0x80000000 && path[1] != (1 | 0x80000000) && (path[2] & 0x80000000)) {\n+                        strErr = \"Unexpected path index for the element at index 1\";\n+                        return false;\n+                    }\n+                    internal = path[1] == (1 | 0x80000000);\n+                    index = path[2] & ~0x80000000;",
      "path": "src/wallet/walletdb.cpp",
      "position": 61,
      "original_position": 57,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "218c4f6405df2b389411f8370057319bfdc59f48",
      "in_reply_to_id": 423990239,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I tried but ran into far too many linker errors than I cared to try to fix. The logical places to define this constant aren't necessarily included by or linked with the places that actually use it.",
      "created_at": "2020-05-15T21:14:49Z",
      "updated_at": "2020-05-15T22:00:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r426050282",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426050282"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 451,
      "original_line": 451,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426065688",
      "pull_request_review_id": 412991594,
      "id": 426065688,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA2NTY4OA==",
      "diff_hunk": "@@ -290,6 +293,43 @@ bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool i\n     return true;\n }\n \n+bool LegacyScriptPubKeyMan::TopUpInactiveHDChain(const CKeyID seed_id, int64_t index, bool internal)\n+{\n+    LOCK(cs_KeyStore);\n+\n+    if (m_storage.IsLocked()) return false;\n+\n+    auto it = m_inactive_hd_chains.find(seed_id);\n+    if (it == m_inactive_hd_chains.end()) {\n+        return false;\n+    }\n+\n+    CHDChain& chain = it->second;\n+\n+    // Top up key pool\n+    int64_t target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n+\n+    // \"size\" of the keypools. Not really the size, actually the difference between index and the chain counter\n+    // Since chain counter is 1 based and index is 0 based, one of them needs to be offset by 1.\n+    int64_t kp_size = (internal ? chain.nInternalChainCounter : chain.nExternalChainCounter) - (index + 1);\n+\n+    // make sure the keypool fits the user-selected target (-keypool)\n+    int64_t missing = std::max(std::max((int64_t) target_size, (int64_t) 1) - kp_size, (int64_t) 0);\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    for (int64_t i = missing; i > 0; --i) {\n+        CPubKey pubkey(GenerateNewKey(batch, chain, internal));\n+    }\n+    if (missing > 0) {",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 37,
      "original_position": 41,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "a5c3f3218be69ef2a7633bd9fa34963602d1c44f",
      "in_reply_to_id": 423901460,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-05-15T22:00:24Z",
      "updated_at": "2020-05-15T22:00:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r426065688",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426065688"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 319,
      "original_line": 319,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426065717",
      "pull_request_review_id": 412991631,
      "id": 426065717,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA2NTcxNw==",
      "diff_hunk": "@@ -319,6 +333,18 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n      */\n     bool ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fRequestedInternal);\n \n+    /**\n+     * Like TopUp() but adds keys for inactive HD chains.\n+     * Ensures that there are at least -keypool number of keys derived after the given index.\n+     *\n+     * @param seed_id the CKeyID for the HD seed.\n+     * @param index the index to start generating keys from\n+     * @param internal whether the internal chain should be used. true for internal chain, false for external chain.\n+     *\n+     * @@return true if seed was found and keys were derived. false if unable to derive seeds",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 53,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "218c4f6405df2b389411f8370057319bfdc59f48",
      "in_reply_to_id": 423969969,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-05-15T22:00:28Z",
      "updated_at": "2020-05-15T22:00:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r426065717",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426065717"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 344,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426065738",
      "pull_request_review_id": 412991661,
      "id": 426065738,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA2NTczOA==",
      "diff_hunk": "@@ -290,6 +293,43 @@ bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool i\n     return true;\n }\n \n+bool LegacyScriptPubKeyMan::TopUpInactiveHDChain(const CKeyID seed_id, int64_t index, bool internal)\n+{\n+    LOCK(cs_KeyStore);\n+\n+    if (m_storage.IsLocked()) return false;\n+\n+    auto it = m_inactive_hd_chains.find(seed_id);\n+    if (it == m_inactive_hd_chains.end()) {\n+        return false;\n+    }\n+\n+    CHDChain& chain = it->second;\n+\n+    // Top up key pool\n+    int64_t target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n+\n+    // \"size\" of the keypools. Not really the size, actually the difference between index and the chain counter\n+    // Since chain counter is 1 based and index is 0 based, one of them needs to be offset by 1.\n+    int64_t kp_size = (internal ? chain.nInternalChainCounter : chain.nExternalChainCounter) - (index + 1);\n+\n+    // make sure the keypool fits the user-selected target (-keypool)\n+    int64_t missing = std::max(std::max((int64_t) target_size, (int64_t) 1) - kp_size, (int64_t) 0);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 35,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "218c4f6405df2b389411f8370057319bfdc59f48",
      "in_reply_to_id": 423983309,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-05-15T22:00:33Z",
      "updated_at": "2020-05-15T22:00:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r426065738",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426065738"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 317,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426065764",
      "pull_request_review_id": 412991688,
      "id": 426065764,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA2NTc2NA==",
      "diff_hunk": "@@ -304,6 +344,19 @@ void LegacyScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n                 WalletLogPrintf(\"%s: Topping up keypool failed (locked wallet)\\n\", __func__);\n             }\n         }\n+",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 66,
      "original_position": 58,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "218c4f6405df2b389411f8370057319bfdc59f48",
      "in_reply_to_id": 423986044,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-05-15T22:00:38Z",
      "updated_at": "2020-05-15T22:00:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r426065764",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426065764"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 347,
      "original_line": 347,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426065789",
      "pull_request_review_id": 412991720,
      "id": 426065789,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA2NTc4OQ==",
      "diff_hunk": "@@ -304,6 +344,19 @@ void LegacyScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n                 WalletLogPrintf(\"%s: Topping up keypool failed (locked wallet)\\n\", __func__);\n             }\n         }\n+\n+        auto it = mapKeyMetadata.find(keyid);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 69,
      "original_position": 59,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "218c4f6405df2b389411f8370057319bfdc59f48",
      "in_reply_to_id": 423988278,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-05-15T22:00:43Z",
      "updated_at": "2020-05-15T22:00:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r426065789",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426065789"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 350,
      "original_line": 350,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426065841",
      "pull_request_review_id": 412991773,
      "id": 426065841,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA2NTg0MQ==",
      "diff_hunk": "@@ -290,6 +293,43 @@ bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool i\n     return true;\n }\n \n+bool LegacyScriptPubKeyMan::TopUpInactiveHDChain(const CKeyID seed_id, int64_t index, bool internal)\n+{\n+    LOCK(cs_KeyStore);\n+\n+    if (m_storage.IsLocked()) return false;\n+\n+    auto it = m_inactive_hd_chains.find(seed_id);\n+    if (it == m_inactive_hd_chains.end()) {\n+        return false;\n+    }\n+\n+    CHDChain& chain = it->second;\n+\n+    // Top up key pool\n+    int64_t target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "f5eaa90301a946b889a9708631da2a60cf365cdc",
      "in_reply_to_id": 424449934,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-05-15T22:00:52Z",
      "updated_at": "2020-05-15T22:00:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r426065841",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426065841"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 310,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426065877",
      "pull_request_review_id": 412991826,
      "id": 426065877,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA2NTg3Nw==",
      "diff_hunk": "@@ -405,6 +407,62 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             ssValue >> keyMeta;\n             wss.nKeyMeta++;\n             pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n+\n+            // Extract some CHDChain info from this metadata if it has any\n+            if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA && !keyMeta.hd_seed_id.IsNull() && keyMeta.hdKeypath.size() > 0) {\n+                // Get the path from the key origin or from the path string\n+                // Not applicable when path is \"s\" as that indicates a seed\n+                bool internal = false;\n+                uint32_t index = 0;\n+                if (keyMeta.hdKeypath != \"s\") {\n+                    std::vector<uint32_t> path;\n+                    if (keyMeta.has_key_origin) {\n+                        // We have a key origin, so pull it from its path vector\n+                        path = keyMeta.key_origin.path;\n+                    } else {\n+                        // No key origin, have to parse the string\n+                        if (!ParseHDKeypath(keyMeta.hdKeypath, path)) {\n+                            strErr = \"Error reading wallet database: keymeta with invalid HD keypath\";\n+                            return false;\n+                        }\n+                    }\n+\n+                    // Extract the index and internal from the path\n+                    // Path string is m/0'/k'/i'\n+                    // Path vector is [0', k', i'] (but as ints OR'd with the hardened bit\n+                    // k == 0 for external, 1 for internal. i is the index\n+                    if (path.size() != 3) {\n+                        strErr = \"Error reading wallet database: keymeta found with unexpected path\";\n+                        return false;\n+                    }\n+                    if (path[0] != 0x80000000) {\n+                        strErr = \"Unexpected path index for the element at index 0\";\n+                        return false;\n+                    }\n+                    if (path[1] != 0x80000000 && path[1] != (1 | 0x80000000) && (path[2] & 0x80000000)) {\n+                        strErr = \"Unexpected path index for the element at index 1\";\n+                        return false;\n+                    }",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 55,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "9e33fa1b9c1a8c3a20973d4e46a2797324013002",
      "in_reply_to_id": 424575480,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-05-15T22:01:00Z",
      "updated_at": "2020-05-15T22:01:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r426065877",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426065877"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": 424,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 449,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426065902",
      "pull_request_review_id": 412991853,
      "id": 426065902,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA2NTkwMg==",
      "diff_hunk": "@@ -405,6 +407,62 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             ssValue >> keyMeta;\n             wss.nKeyMeta++;\n             pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n+\n+            // Extract some CHDChain info from this metadata if it has any\n+            if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA && !keyMeta.hd_seed_id.IsNull() && keyMeta.hdKeypath.size() > 0) {\n+                // Get the path from the key origin or from the path string\n+                // Not applicable when path is \"s\" as that indicates a seed\n+                bool internal = false;\n+                uint32_t index = 0;\n+                if (keyMeta.hdKeypath != \"s\") {\n+                    std::vector<uint32_t> path;\n+                    if (keyMeta.has_key_origin) {\n+                        // We have a key origin, so pull it from its path vector\n+                        path = keyMeta.key_origin.path;\n+                    } else {\n+                        // No key origin, have to parse the string\n+                        if (!ParseHDKeypath(keyMeta.hdKeypath, path)) {\n+                            strErr = \"Error reading wallet database: keymeta with invalid HD keypath\";\n+                            return false;\n+                        }\n+                    }\n+\n+                    // Extract the index and internal from the path\n+                    // Path string is m/0'/k'/i'\n+                    // Path vector is [0', k', i'] (but as ints OR'd with the hardened bit\n+                    // k == 0 for external, 1 for internal. i is the index\n+                    if (path.size() != 3) {\n+                        strErr = \"Error reading wallet database: keymeta found with unexpected path\";\n+                        return false;\n+                    }\n+                    if (path[0] != 0x80000000) {\n+                        strErr = \"Unexpected path index for the element at index 0\";\n+                        return false;\n+                    }\n+                    if (path[1] != 0x80000000 && path[1] != (1 | 0x80000000) && (path[2] & 0x80000000)) {\n+                        strErr = \"Unexpected path index for the element at index 1\";\n+                        return false;\n+                    }\n+                    internal = path[1] == (1 | 0x80000000);\n+                    index = path[2] & ~0x80000000;\n+                }\n+\n+                // Insert a new CHDChain, or get the one that already exists\n+                auto ins = wss.m_hd_chains.emplace(keyMeta.hd_seed_id, CHDChain());\n+                CHDChain& chain = ins.first->second;\n+                if (ins.second) {\n+                    // For new chains, we want to default to VERSION_HD_BASE until we see an internal\n+                    chain.nVersion = CHDChain::VERSION_HD_BASE;\n+                    // Set the seed id",
      "path": "src/wallet/walletdb.cpp",
      "position": null,
      "original_position": 66,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "9e33fa1b9c1a8c3a20973d4e46a2797324013002",
      "in_reply_to_id": 424577883,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-05-15T22:01:06Z",
      "updated_at": "2020-05-15T22:01:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r426065902",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426065902"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 456,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426066015",
      "pull_request_review_id": 412992009,
      "id": 426066015,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA2NjAxNQ==",
      "diff_hunk": "@@ -842,7 +895,14 @@ void LegacyScriptPubKeyMan::SetHDChain(const CHDChain& chain, bool memonly)\n     if (!memonly && !WalletBatch(m_storage.GetDatabase()).WriteHDChain(chain))\n         throw std::runtime_error(std::string(__func__) + \": writing chain failed\");\n \n-    hdChain = chain;\n+    m_hd_chain = chain;\n+}\n+\n+void LegacyScriptPubKeyMan::AddInactiveHDChain(const CHDChain& chain)",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 116,
      "original_position": 91,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "218c4f6405df2b389411f8370057319bfdc59f48",
      "in_reply_to_id": 424639586,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added a call to `AddInactiveHDChain` to `SetHDCHain` which is where chain rotation occurs.\r\n\r\nAlso updated the tests with a third wallet (`restore2`) which is not reloaded. The things that are checked with `restore` are also checked in `restore2`. I've checked that this test fails without the fix.",
      "created_at": "2020-05-15T22:01:33Z",
      "updated_at": "2020-05-15T22:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r426066015",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426066015"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 913,
      "original_line": 913,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426066136",
      "pull_request_review_id": 412992159,
      "id": 426066136,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA2NjEzNg==",
      "diff_hunk": "@@ -842,7 +895,14 @@ void LegacyScriptPubKeyMan::SetHDChain(const CHDChain& chain, bool memonly)\n     if (!memonly && !WalletBatch(m_storage.GetDatabase()).WriteHDChain(chain))",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 84,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "218c4f6405df2b389411f8370057319bfdc59f48",
      "in_reply_to_id": 425866177,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "See https://github.com/bitcoin/bitcoin/pull/17681#discussion_r426066015",
      "created_at": "2020-05-15T22:01:56Z",
      "updated_at": "2020-05-15T22:01:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r426066136",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426066136"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 895,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427600966",
      "pull_request_review_id": 414824583,
      "id": 427600966,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYwMDk2Ng==",
      "diff_hunk": "@@ -116,6 +116,11 @@ class CHDChain\n         nInternalChainCounter = 0;\n         seed_id.SetNull();\n     }\n+\n+    bool operator==(const CHDChain& chain) const",
      "path": "src/wallet/walletdb.h",
      "position": 5,
      "original_position": 5,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This doesn't seem to be used (I can comment it out and the branch still compiles).\r\n\r\nYou're comparing equality of `seed_id`s directly here: https://github.com/bitcoin/bitcoin/pull/17681/files#diff-5462ceb8a760a507152ab8b76bd48774R1084. I suggest you either change that to compare equality of the `CHDChain` objects, or remove this operator overload.",
      "created_at": "2020-05-19T21:08:31Z",
      "updated_at": "2020-05-19T22:57:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r427600966",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427600966"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 120,
      "original_line": 120,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427629797",
      "pull_request_review_id": 414824583,
      "id": 427629797,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYyOTc5Nw==",
      "diff_hunk": "@@ -989,30 +1059,30 @@ void LegacyScriptPubKeyMan::DeriveNewChildKey(WalletBatch &batch, CKeyMetadata&\n         // childIndex | BIP32_HARDENED_KEY_LIMIT = derive childIndex in hardened child-index-range\n         // example: 1 | BIP32_HARDENED_KEY_LIMIT == 0x80000001 == 2147483649\n         if (internal) {\n-            chainChildKey.Derive(childKey, hdChain.nInternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n-            metadata.hdKeypath = \"m/0'/1'/\" + ToString(hdChain.nInternalChainCounter) + \"'\";\n+            chainChildKey.Derive(childKey, hd_chain.nInternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n+            metadata.hdKeypath = \"m/0'/1'/\" + ToString(hd_chain.nInternalChainCounter) + \"'\";\n             metadata.key_origin.path.push_back(0 | BIP32_HARDENED_KEY_LIMIT);\n             metadata.key_origin.path.push_back(1 | BIP32_HARDENED_KEY_LIMIT);\n-            metadata.key_origin.path.push_back(hdChain.nInternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n-            hdChain.nInternalChainCounter++;\n+            metadata.key_origin.path.push_back(hd_chain.nInternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n+            hd_chain.nInternalChainCounter++;\n         }\n         else {\n-            chainChildKey.Derive(childKey, hdChain.nExternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n-            metadata.hdKeypath = \"m/0'/0'/\" + ToString(hdChain.nExternalChainCounter) + \"'\";\n+            chainChildKey.Derive(childKey, hd_chain.nExternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n+            metadata.hdKeypath = \"m/0'/0'/\" + ToString(hd_chain.nExternalChainCounter) + \"'\";\n             metadata.key_origin.path.push_back(0 | BIP32_HARDENED_KEY_LIMIT);\n             metadata.key_origin.path.push_back(0 | BIP32_HARDENED_KEY_LIMIT);\n-            metadata.key_origin.path.push_back(hdChain.nExternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n-            hdChain.nExternalChainCounter++;\n+            metadata.key_origin.path.push_back(hd_chain.nExternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n+            hd_chain.nExternalChainCounter++;\n         }\n     } while (HaveKey(childKey.key.GetPubKey().GetID()));\n     secret = childKey.key;\n-    metadata.hd_seed_id = hdChain.seed_id;\n+    metadata.hd_seed_id = hd_chain.seed_id;\n     CKeyID master_id = masterKey.key.GetPubKey().GetID();\n     std::copy(master_id.begin(), master_id.begin() + 4, metadata.key_origin.fingerprint);\n     metadata.has_key_origin = true;\n     // update the chain model in the database",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 196,
      "original_position": 196,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: this could be updated to say \"If this is the active HDChain, then update the chain model in the database\"",
      "created_at": "2020-05-19T22:10:54Z",
      "updated_at": "2020-05-19T22:57:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r427629797",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427629797"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1083,
      "original_line": 1083,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427633081",
      "pull_request_review_id": 414824583,
      "id": 427633081,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYzMzA4MQ==",
      "diff_hunk": "@@ -839,10 +894,27 @@ bool LegacyScriptPubKeyMan::AddWatchOnly(const CScript& dest, int64_t nCreateTim\n void LegacyScriptPubKeyMan::SetHDChain(const CHDChain& chain, bool memonly)\n {\n     LOCK(cs_KeyStore);\n-    if (!memonly && !WalletBatch(m_storage.GetDatabase()).WriteHDChain(chain))\n-        throw std::runtime_error(std::string(__func__) + \": writing chain failed\");\n+    // memonly == true means we are loading the wallet file",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 99,
      "original_position": 99,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is really crying out to be cleaned up:\r\n\r\n- there's a bool flag that substantially changes the logic of this function\r\n- the function is called in two places only, once with `true` and once with `false`\r\n- the argument name is confusing enough that it requires an inline comment that explains where the function is being called from.\r\n\r\nIt seems to me that this function should be split into a `WriteHDChain()` and `SetHDChain()` functions.",
      "created_at": "2020-05-19T22:19:11Z",
      "updated_at": "2020-05-19T22:57:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r427633081",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427633081"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 897,
      "original_line": 897,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427634413",
      "pull_request_review_id": 414824583,
      "id": 427634413,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYzNDQxMw==",
      "diff_hunk": "@@ -290,20 +293,72 @@ bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool i\n     return true;\n }\n \n+bool LegacyScriptPubKeyMan::TopUpInactiveHDChain(const CKeyID seed_id, int64_t index, bool internal)\n+{\n+    LOCK(cs_KeyStore);\n+\n+    if (m_storage.IsLocked()) return false;\n+\n+    auto it = m_inactive_hd_chains.find(seed_id);\n+    if (it == m_inactive_hd_chains.end()) {\n+        return false;\n+    }\n+\n+    CHDChain& chain = it->second;\n+\n+    // Top up key pool\n+    int64_t target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 1);\n+\n+    // \"size\" of the keypools. Not really the size, actually the difference between index and the chain counter\n+    // Since chain counter is 1 based and index is 0 based, one of them needs to be offset by 1.\n+    int64_t kp_size = (internal ? chain.nInternalChainCounter : chain.nExternalChainCounter) - (index + 1);\n+\n+    // make sure the keypool fits the user-selected target (-keypool)\n+    int64_t missing = std::max(target_size - kp_size, (int64_t) 0);\n+\n+    if (missing > 0) {\n+        WalletBatch batch(m_storage.GetDatabase());\n+        for (int64_t i = missing; i > 0; --i) {\n+            GenerateNewKey(batch, chain, internal);\n+        }\n+        if (internal) {\n+            WalletLogPrintf(\"inactive seed with id %s added %d internal keys\\n\", HexStr(seed_id), missing);\n+        } else {\n+            WalletLogPrintf(\"inactive seed with id %s added %d keys\\n\", HexStr(seed_id), missing);\n+        }\n+    }\n+    return true;\n+}\n+\n void LegacyScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n {\n     LOCK(cs_KeyStore);\n     // extract addresses and check if they match with an unused keypool key\n     for (const auto& keyid : GetAffectedKeys(script, *this)) {\n         std::map<CKeyID, int64_t>::const_iterator mi = m_pool_key_to_index.find(keyid);\n         if (mi != m_pool_key_to_index.end()) {\n-            WalletLogPrintf(\"%s: Detected a used keypool key, mark all keypool key up to this key as used\\n\", __func__);\n+            WalletLogPrintf(\"%s: Detected a used keypool key, mark all keypool keys up to this key as used\\n\", __func__);\n             MarkReserveKeysAsUsed(mi->second);\n \n             if (!TopUp()) {\n                 WalletLogPrintf(\"%s: Topping up keypool failed (locked wallet)\\n\", __func__);\n             }\n         }\n+\n+        // Find the key's metadata and check if it's seed id (if it has one) is inactive, i.e. it is not the current m_hd_chain seed id.",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 67,
      "original_position": 67,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "grammar nit: s/it's/its/ :slightly_smiling_face: ",
      "created_at": "2020-05-19T22:22:44Z",
      "updated_at": "2020-05-19T22:57:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r427634413",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427634413"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 348,
      "original_line": 348,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427640400",
      "pull_request_review_id": 414824583,
      "id": 427640400,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY0MDQwMA==",
      "diff_hunk": "@@ -290,20 +293,72 @@ bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool i\n     return true;\n }\n \n+bool LegacyScriptPubKeyMan::TopUpInactiveHDChain(const CKeyID seed_id, int64_t index, bool internal)\n+{\n+    LOCK(cs_KeyStore);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 16,
      "original_position": 16,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is only called from within `MarkUnusedAddresses()`, which has already taken this lock. Rather than taking the lock recursively, I think it makes more sense to add an `EXCLUSIVE_LOCKS_REQUIRED` annotation.",
      "created_at": "2020-05-19T22:39:46Z",
      "updated_at": "2020-05-19T22:57:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r427640400",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427640400"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 298,
      "original_line": 298,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427646231",
      "pull_request_review_id": 414824583,
      "id": 427646231,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY0NjIzMQ==",
      "diff_hunk": "@@ -143,6 +145,17 @@ class CKeyPool\n     }\n };\n \n+class KeyIDHasher\n+{\n+public:\n+    KeyIDHasher() {}\n+\n+    size_t operator()(const CKeyID& id) const\n+    {\n+        return id.GetUint64(0);\n+    }\n+};\n+",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": 23,
      "original_position": 23,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "A few suggestions:\r\n\r\n- drop the default constructor. The implicitly-defined default ctor will do exactly the same (ie nothing since this struct has no data members).\r\n- make it a `struct` so you can drop the `public:` access specifier\r\n- put the `operator()` definition on one line:\r\n\r\n```suggestion\r\nstruct KeyIDHasher\r\n{\r\n    size_t operator()(const CKeyID& id) const { return id.GetUint64(0);}\r\n};\r\n```",
      "created_at": "2020-05-19T22:56:51Z",
      "updated_at": "2020-05-19T22:57:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r427646231",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427646231"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": 148,
      "original_start_line": 148,
      "start_side": "RIGHT",
      "line": 158,
      "original_line": 158,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427650867",
      "pull_request_review_id": 414885119,
      "id": 427650867,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY1MDg2Nw==",
      "diff_hunk": "@@ -839,12 +839,29 @@ bool LegacyScriptPubKeyMan::AddWatchOnly(const CScript& dest, int64_t nCreateTim\n void LegacyScriptPubKeyMan::SetHDChain(const CHDChain& chain, bool memonly)\n {\n     LOCK(cs_KeyStore);\n-    if (!memonly && !WalletBatch(m_storage.GetDatabase()).WriteHDChain(chain))\n-        throw std::runtime_error(std::string(__func__) + \": writing chain failed\");\n+    // memonly == true means we are loading the wallet file\n+    // memonly == false means that the chain is actually being changed",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 100,
      "original_position": 7,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "45f2f6a0e8514a0438a87554400bf73cbb90707f",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "45f2f6a\r\n\r\nInstead of commenting parameters inside function it could be on its top comment and name changed to `loading` or `rotating`. IMO function is a bit blurred it sets a chain but also writes it down to DB, and now does also rotation.",
      "created_at": "2020-05-19T23:10:38Z",
      "updated_at": "2020-05-20T01:00:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r427650867",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427650867"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 898,
      "original_line": 843,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427658889",
      "pull_request_review_id": 414894667,
      "id": 427658889,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY1ODg4OQ==",
      "diff_hunk": "@@ -839,10 +894,27 @@ bool LegacyScriptPubKeyMan::AddWatchOnly(const CScript& dest, int64_t nCreateTim\n void LegacyScriptPubKeyMan::SetHDChain(const CHDChain& chain, bool memonly)\n {\n     LOCK(cs_KeyStore);\n-    if (!memonly && !WalletBatch(m_storage.GetDatabase()).WriteHDChain(chain))\n-        throw std::runtime_error(std::string(__func__) + \": writing chain failed\");\n+    // memonly == true means we are loading the wallet file",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 99,
      "original_position": 99,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "in_reply_to_id": 427633081,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/17681#discussion_r427633081\r\n\r\n> This is really crying out to be cleaned up:\r\n\r\nAgree with this, but my immediate reaction here (without looking too deeply) is that the changes suggested here are only tangentially related to this PR and should be made in a separate PR before or after this one. There's already a lot going on here and it seems like you could make similar comments about a lot of the other wallet functions this PR touches.\r\n\r\n> It seems to me that this function should be split into a `WriteHDChain()` and `SetHDChain()` functions.\r\n\r\nAgain didn't look too closely, but a current convention is to have CWallet and KeyMan LoadXXX and AddXXX methods",
      "created_at": "2020-05-19T23:35:38Z",
      "updated_at": "2020-05-19T23:35:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r427658889",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427658889"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 897,
      "original_line": 897,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427668785",
      "pull_request_review_id": 414885119,
      "id": 427668785,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY2ODc4NQ==",
      "diff_hunk": "@@ -405,6 +407,65 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             ssValue >> keyMeta;\n             wss.nKeyMeta++;\n             pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n+\n+            // Extract some CHDChain info from this metadata if it has any\n+            if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA && !keyMeta.hd_seed_id.IsNull() && keyMeta.hdKeypath.size() > 0) {\n+                // Get the path from the key origin or from the path string\n+                // Not applicable when path is \"s\" as that indicates a seed\n+                bool internal = false;\n+                uint32_t index = 0;\n+                if (keyMeta.hdKeypath != \"s\") {\n+                    std::vector<uint32_t> path;\n+                    if (keyMeta.has_key_origin) {\n+                        // We have a key origin, so pull it from its path vector\n+                        path = keyMeta.key_origin.path;\n+                    } else {\n+                        // No key origin, have to parse the string\n+                        if (!ParseHDKeypath(keyMeta.hdKeypath, path)) {\n+                            strErr = \"Error reading wallet database: keymeta with invalid HD keypath\";\n+                            return false;\n+                        }\n+                    }\n+\n+                    // Extract the index and internal from the path\n+                    // Path string is m/0'/k'/i'\n+                    // Path vector is [0', k', i'] (but as ints OR'd with the hardened bit\n+                    // k == 0 for external, 1 for internal. i is the index",
      "path": "src/wallet/walletdb.cpp",
      "position": 43,
      "original_position": 43,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "45f2f6a0e8514a0438a87554400bf73cbb90707f",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "45f2f6a\r\n\r\nWhy internal is OR'd with the hardened bit  ? Isn't the hardening implied by `0x80000000` ?",
      "created_at": "2020-05-20T00:06:31Z",
      "updated_at": "2020-05-20T01:00:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r427668785",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427668785"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 433,
      "original_line": 433,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427675389",
      "pull_request_review_id": 414913886,
      "id": 427675389,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY3NTM4OQ==",
      "diff_hunk": "@@ -839,10 +894,27 @@ bool LegacyScriptPubKeyMan::AddWatchOnly(const CScript& dest, int64_t nCreateTim\n void LegacyScriptPubKeyMan::SetHDChain(const CHDChain& chain, bool memonly)\n {\n     LOCK(cs_KeyStore);\n-    if (!memonly && !WalletBatch(m_storage.GetDatabase()).WriteHDChain(chain))\n-        throw std::runtime_error(std::string(__func__) + \": writing chain failed\");\n+    // memonly == true means we are loading the wallet file",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 99,
      "original_position": 99,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "in_reply_to_id": 427633081,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": ">  the changes suggested here are only tangentially related to this PR\r\n\r\nPrior to this PR, the `memonly` flag only controlled whether the new seed was written to the database. This PR changes things so the majority of the function is in an `if` block that depends on the flag, so I'd argue it's not tangential.\r\n\r\nI think it's fine to do this in a follow-up, but if this PR gets retouched, no problem doing it here either.",
      "created_at": "2020-05-20T00:29:43Z",
      "updated_at": "2020-05-20T00:29:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r427675389",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427675389"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 897,
      "original_line": 897,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427682625",
      "pull_request_review_id": 414885119,
      "id": 427682625,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY4MjYyNQ==",
      "diff_hunk": "@@ -290,20 +293,72 @@ bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool i\n     return true;\n }\n \n+bool LegacyScriptPubKeyMan::TopUpInactiveHDChain(const CKeyID seed_id, int64_t index, bool internal)\n+{\n+    LOCK(cs_KeyStore);\n+\n+    if (m_storage.IsLocked()) return false;\n+\n+    auto it = m_inactive_hd_chains.find(seed_id);\n+    if (it == m_inactive_hd_chains.end()) {\n+        return false;\n+    }\n+\n+    CHDChain& chain = it->second;\n+\n+    // Top up key pool\n+    int64_t target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 1);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 28,
      "original_position": 28,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "c93082ece40b1c72f05b3e2085c022c09eaa4d65",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "c93082e\r\n\r\nI think this is right but code could be made more intuitive IMO with better naming.\r\n\r\nAFAICT `target_size` is the size of keypool we want to keep constant. To do so you need to add new keys it after detecting onchain a key to which `index` is passed. We compute the \"detected_diff\" or \"consumed_diff\" based on chain counter tip. And `missing` is a bit deluding, these keys doesn't \"miss\", we just want to achieve constant-size ahead safety buffer.\r\n\r\n```\r\n// We detect that the keypool has been consumed onchain until index. Increase counter by the diff to keep it constant\r\nint64_t keypool_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 1);\r\nint64_t to_extend = keypool_size + (index + 1) - (internal ? chain.nInternalChainCounter : chain.nExternalChainCounter);\r\n```\r\n\r\nFeel free to ignore, it's really IMO.",
      "created_at": "2020-05-20T00:56:39Z",
      "updated_at": "2020-05-20T01:00:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r427682625",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427682625"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 310,
      "original_line": 310,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427683281",
      "pull_request_review_id": 414885119,
      "id": 427683281,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY4MzI4MQ==",
      "diff_hunk": "@@ -333,6 +333,18 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n      */\n     bool ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fRequestedInternal);\n \n+    /**\n+     * Like TopUp() but adds keys for inactive HD chains.\n+     * Ensures that there are at least -keypool number of keys derived after the given index.\n+     *\n+     * @param seed_id the CKeyID for the HD seed.\n+     * @param index the index to start generating keys from\n+     * @param internal whether the internal chain should be used. true for internal chain, false for external chain.\n+     *\n+     * @return true if seed was found and keys were derived. false if unable to derive seeds",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": 53,
      "original_position": 12,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "c93082ece40b1c72f05b3e2085c022c09eaa4d65",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "c93082e\r\n\r\nI think a better param name for `internal` could be `layout` and comment `which layout chain should be used, either true for internal or false for external\".\r\n\r\nAlso `unable to derive _keys_` or `unable to find HD-chain` ?",
      "created_at": "2020-05-20T00:59:21Z",
      "updated_at": "2020-05-20T01:00:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r427683281",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/427683281"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 344,
      "original_line": 344,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/428219655",
      "pull_request_review_id": 415603642,
      "id": 428219655,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIxOTY1NQ==",
      "diff_hunk": "@@ -839,10 +894,27 @@ bool LegacyScriptPubKeyMan::AddWatchOnly(const CScript& dest, int64_t nCreateTim\n void LegacyScriptPubKeyMan::SetHDChain(const CHDChain& chain, bool memonly)\n {\n     LOCK(cs_KeyStore);\n-    if (!memonly && !WalletBatch(m_storage.GetDatabase()).WriteHDChain(chain))\n-        throw std::runtime_error(std::string(__func__) + \": writing chain failed\");\n+    // memonly == true means we are loading the wallet file",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 99,
      "original_position": 99,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "in_reply_to_id": 427633081,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I agree that this should be cleaned up. There are a few other functions that follow this same pattern, so I think it would be better to change them all at the same time in a followup PR.",
      "created_at": "2020-05-20T18:26:54Z",
      "updated_at": "2020-05-20T18:26:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r428219655",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/428219655"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 897,
      "original_line": 897,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/428219871",
      "pull_request_review_id": 415604235,
      "id": 428219871,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIxOTg3MQ==",
      "diff_hunk": "@@ -839,12 +839,29 @@ bool LegacyScriptPubKeyMan::AddWatchOnly(const CScript& dest, int64_t nCreateTim\n void LegacyScriptPubKeyMan::SetHDChain(const CHDChain& chain, bool memonly)\n {\n     LOCK(cs_KeyStore);\n-    if (!memonly && !WalletBatch(m_storage.GetDatabase()).WriteHDChain(chain))\n-        throw std::runtime_error(std::string(__func__) + \": writing chain failed\");\n+    // memonly == true means we are loading the wallet file\n+    // memonly == false means that the chain is actually being changed",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 100,
      "original_position": 7,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "45f2f6a0e8514a0438a87554400bf73cbb90707f",
      "in_reply_to_id": 427650867,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "see https://github.com/bitcoin/bitcoin/pull/17681#discussion_r427633081",
      "created_at": "2020-05-20T18:27:19Z",
      "updated_at": "2020-05-20T18:27:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r428219871",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/428219871"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 898,
      "original_line": 843,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/428220934",
      "pull_request_review_id": 415606904,
      "id": 428220934,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIyMDkzNA==",
      "diff_hunk": "@@ -405,6 +407,65 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             ssValue >> keyMeta;\n             wss.nKeyMeta++;\n             pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n+\n+            // Extract some CHDChain info from this metadata if it has any\n+            if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA && !keyMeta.hd_seed_id.IsNull() && keyMeta.hdKeypath.size() > 0) {\n+                // Get the path from the key origin or from the path string\n+                // Not applicable when path is \"s\" as that indicates a seed\n+                bool internal = false;\n+                uint32_t index = 0;\n+                if (keyMeta.hdKeypath != \"s\") {\n+                    std::vector<uint32_t> path;\n+                    if (keyMeta.has_key_origin) {\n+                        // We have a key origin, so pull it from its path vector\n+                        path = keyMeta.key_origin.path;\n+                    } else {\n+                        // No key origin, have to parse the string\n+                        if (!ParseHDKeypath(keyMeta.hdKeypath, path)) {\n+                            strErr = \"Error reading wallet database: keymeta with invalid HD keypath\";\n+                            return false;\n+                        }\n+                    }\n+\n+                    // Extract the index and internal from the path\n+                    // Path string is m/0'/k'/i'\n+                    // Path vector is [0', k', i'] (but as ints OR'd with the hardened bit\n+                    // k == 0 for external, 1 for internal. i is the index",
      "path": "src/wallet/walletdb.cpp",
      "position": 43,
      "original_position": 43,
      "commit_id": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "original_commit_id": "45f2f6a0e8514a0438a87554400bf73cbb90707f",
      "in_reply_to_id": 427668785,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The meaning is supposed to be that the path vector contains ints that correspond to `0`, `k`, and `i` with those ints being OR'd with the hardened bitmask. I guess it's not very clear and that sentence could probably be dropped.",
      "created_at": "2020-05-20T18:29:10Z",
      "updated_at": "2020-05-20T18:29:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/17681#discussion_r428220934",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/428220934"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17681"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 433,
      "original_line": 433,
      "side": "RIGHT"
    }
  ]
}