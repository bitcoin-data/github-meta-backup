{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261",
    "id": 383837066,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzgzODM3MDY2",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18261",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/18261.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/18261.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18261",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18261/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/c5389c20b8f4278351c42ff9b6cd7f723c906603",
    "number": 18261,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "Erlay: bandwidth-efficient transaction relay protocol",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This is an implementation of [Erlay](https://arxiv.org/abs/1905.10518), using primitives in the BIP-330 (see the updated spec [here](https://github.com/naumenkogs/bips/blob/bip_0330_updates/bip-0330.mediawiki)). Please refer to these two to understand the design. My talk on the topic is [here](https://youtu.be/YxsjdIl0034?t=670).\r\n\r\nErlay uses both flooding (announcing using INV messages to all peers) and reconciliation to announce transactions. Flooding is expensive, so Erlay seeks to use it sparingly and in strategic locations - only well-connected publicly reachable nodes flood transactions to other publicly reachable nodes via outbound connections. Since every unreachable node is directly connected to several reachable nodes, this policy ensures that a transaction is quickly propagated to be within one hop from most of the nodes in the network.\r\n\r\nAll transactions not propagated through flooding are propagated through efficient set reconciliation. To do this, every node keeps a reconciliation set for each peer, in which transactions are placed which would have been announced using INV messages absent this protocol. Every 2 seconds every node chooses a peer from its outbound connections in a predetermined order to reconcile with, resulting in both sides learning the transactions known to the other side. After every reconciliation round, the corresponding reconciliation set is cleared.\r\n\r\nI think both paper and the BIP motives the changes, but I'll mention them briefly once again here:\r\n- save 40% of the bandwidth consumed by a node\r\n- increase network connectivity for almost no bandwidth or latency cost\r\n- improves privacy as a side-effect\r\n\r\nObviously looking for review, let's try to start with a high-level concerns, and keep nits for later.\r\n\r\nP.S.\r\nPlease don't be scared of 8,000 LOC added. 7,000 of them is minisketch added as a subtree.\r\n\r\nP.P.S.\r\nMy experiments of running this code live (slightly outdated) with a script to replicate the experiment: [here1](https://github.com/bitcoin/bitcoin/pull/18261#issuecomment-599241490) and [here2](https://github.com/bitcoin/bitcoin/pull/18261#issuecomment-600388543).\r\n",
    "labels": [
      {
        "id": 98298007,
        "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
        "name": "P2P",
        "color": "006b75",
        "default": false
      },
      {
        "id": 955867938,
        "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
        "name": "Needs rebase",
        "description": "",
        "color": "cccccc",
        "default": false
      }
    ],
    "active_lock_reason": "resolved",
    "created_at": "2020-03-04T20:01:31Z",
    "updated_at": "2022-08-16T17:22:24Z",
    "closed_at": "2021-03-23T22:51:05Z",
    "mergeable": false,
    "mergeable_state": "dirty",
    "merge_commit_sha": "91dadffbb5537237fd0f63b929b5d42a9eaf89d8",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": false,
    "head": {
      "label": "naumenkogs:erlay",
      "ref": "erlay",
      "sha": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 115054139,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTUwNTQxMzk=",
        "name": "bitcoin",
        "full_name": "naumenkogs/bitcoin",
        "owner": {
          "login": "naumenkogs",
          "id": 7975071,
          "node_id": "MDQ6VXNlcjc5NzUwNzE=",
          "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/naumenkogs",
          "html_url": "https://github.com/naumenkogs",
          "followers_url": "https://api.github.com/users/naumenkogs/followers",
          "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
          "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
          "repos_url": "https://api.github.com/users/naumenkogs/repos",
          "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/naumenkogs/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/naumenkogs/bitcoin",
        "archive_url": "https://api.github.com/repos/naumenkogs/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/naumenkogs/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/naumenkogs/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/naumenkogs/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/naumenkogs/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/naumenkogs/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/naumenkogs/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/naumenkogs/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/naumenkogs/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/naumenkogs/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/naumenkogs/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/naumenkogs/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/naumenkogs/bitcoin/events",
        "forks_url": "https://api.github.com/repos/naumenkogs/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/naumenkogs/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/naumenkogs/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/naumenkogs/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/naumenkogs/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/naumenkogs/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/naumenkogs/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/naumenkogs/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/naumenkogs/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/naumenkogs/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/naumenkogs/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/naumenkogs/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/naumenkogs/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/naumenkogs/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/naumenkogs/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/naumenkogs/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:naumenkogs/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/naumenkogs/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/naumenkogs/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/naumenkogs/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/naumenkogs/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/naumenkogs/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/naumenkogs/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/naumenkogs/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/naumenkogs/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/naumenkogs/bitcoin/hooks",
        "svn_url": "https://github.com/naumenkogs/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 2,
        "stargazers_count": 1,
        "watchers_count": 1,
        "size": 213338,
        "default_branch": "master",
        "open_issues_count": 1,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-02-23T10:57:41Z",
        "created_at": "2017-12-21T22:52:17Z",
        "updated_at": "2021-03-02T13:21:27Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "bf3189eda65d269fee6a70681ab390bd7cebf7d7",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69817,
        "watchers_count": 69817,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T22:42:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T01:13:41Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
      }
    },
    "author_association": "MEMBER",
    "draft": true,
    "additions": 8225,
    "deletions": 59,
    "changed_files": 83,
    "commits": 28,
    "review_comments": 159,
    "comments": 38
  },
  "events": [
    {
      "event": "commented",
      "id": 594803706,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU5NDgwMzcwNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/594803706",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-04T20:04:21Z",
      "updated_at": "2020-03-04T20:04:21Z",
      "author_association": "MEMBER",
      "body": "How does it react to diverse network policies?",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#issuecomment-594803706",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18261"
    },
    {
      "event": "commented",
      "id": 594810354,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU5NDgxMDM1NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/594810354",
      "actor": {
        "login": "Empact",
        "id": 5470,
        "node_id": "MDQ6VXNlcjU0NzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Empact",
        "html_url": "https://github.com/Empact",
        "followers_url": "https://api.github.com/users/Empact/followers",
        "following_url": "https://api.github.com/users/Empact/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Empact/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Empact/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
        "organizations_url": "https://api.github.com/users/Empact/orgs",
        "repos_url": "https://api.github.com/users/Empact/repos",
        "events_url": "https://api.github.com/users/Empact/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Empact/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-04T20:13:31Z",
      "updated_at": "2020-03-04T20:13:31Z",
      "author_association": "MEMBER",
      "body": "Concept ACK",
      "user": {
        "login": "Empact",
        "id": 5470,
        "node_id": "MDQ6VXNlcjU0NzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Empact",
        "html_url": "https://github.com/Empact",
        "followers_url": "https://api.github.com/users/Empact/followers",
        "following_url": "https://api.github.com/users/Empact/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Empact/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Empact/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
        "organizations_url": "https://api.github.com/users/Empact/orgs",
        "repos_url": "https://api.github.com/users/Empact/repos",
        "events_url": "https://api.github.com/users/Empact/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Empact/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#issuecomment-594810354",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18261"
    },
    {
      "event": "labeled",
      "id": 3098430856,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDMwOTg0MzA4NTY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3098430856",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-04T20:40:48Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 369111380,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5MTExMzgw",
      "url": null,
      "actor": null,
      "commit_id": "b93eb384cdaeaceaab89f855753bae6231a8ce77",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK\r\n\r\nThanks for doing this! Excellent work!",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#pullrequestreview-369111380",
      "submitted_at": "2020-03-04T20:57:27Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
    },
    {
      "event": "labeled",
      "id": 3098773411,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDMwOTg3NzM0MTE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3098773411",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-04T22:09:06Z",
      "label": {
        "name": "P2P",
        "color": "006b75"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3103135255,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzEwMzEzNTI1NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3103135255",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-05T22:29:54Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3105668871,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzEwNTY2ODg3MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3105668871",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-06T14:56:32Z"
    },
    {
      "event": "commented",
      "id": 596129273,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU5NjEyOTI3Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/596129273",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-07T19:23:20Z",
      "updated_at": "2020-03-07T19:23:20Z",
      "author_association": "MEMBER",
      "body": "@luke-jr \r\n\r\nWhen it comes to network policies, I'm using the same code originally used by regular gossip (\"Determine transactions to relay\" in net_processing.cpp). So nothing should be lost or sent wastefully as a result of policy discrepancies.",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#issuecomment-596129273",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18261"
    },
    {
      "event": "mentioned",
      "id": 3107931572,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzEwNzkzMTU3Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3107931572",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-07T19:23:20Z"
    },
    {
      "event": "subscribed",
      "id": 3107931573,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMxMDc5MzE1NzM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3107931573",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-07T19:23:20Z"
    },
    {
      "event": "commented",
      "id": 596262994,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU5NjI2Mjk5NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/596262994",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-08T22:57:38Z",
      "updated_at": "2020-03-08T22:57:38Z",
      "author_association": "CONTRIBUTOR",
      "body": "@luke-jr  I'm understanding your question as being inspired by earlier 'mempool sync' ideas that would bleed bandwidth if there was a long lasting mempool discrepancy.\r\n\r\nErlay isn't a mempool sync. It's uses a way of communicating lists of things you want to relay which only takes bandwidth proportional to the difference rather than the total size.  So there is no on-going bandwidth usage due to differences in *mempool* content. Bandwidth is used is roughly  A*ntx_relayed + B*peers*(difference_in_tx_relayed) + C*peers.  for some constants A,B,C. \r\n\r\nIf a peer has a radically different relay policy than you, it works fine and continues to save bandwidth below what usage would be without erlay even though the erlay savings itself comes largely from eliminating data that both sides would send.\r\n\r\nDoes that answer your question?",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#issuecomment-596262994",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18261"
    },
    {
      "event": "mentioned",
      "id": 3108779252,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzEwODc3OTI1Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3108779252",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-08T22:57:38Z"
    },
    {
      "event": "subscribed",
      "id": 3108779255,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMxMDg3NzkyNTU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3108779255",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-08T22:57:38Z"
    },
    {
      "event": "commented",
      "id": 596749292,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU5Njc0OTI5Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/596749292",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-09T19:57:19Z",
      "updated_at": "2020-03-09T20:03:50Z",
      "author_association": "CONTRIBUTOR",
      "body": "@naumenkogs When trying out this PR I ran in to two small testing issues:\r\n\r\n* The suffix of the functional test `p2p_erlay` is `.p2p` (`p2p_erlay.p2p`) instead of the expected `.py` (`p2p_erlay.py`) :)\r\n* It seems like `make check` runs the `minisketch` binaries `test-exhaust` and `test-exhaust-verify`. The running times of these are quite substantial - is there some way to do a quick sanity check as part of `make check` instead of exhaustive testing? :)\r\n",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#issuecomment-596749292",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18261"
    },
    {
      "event": "mentioned",
      "id": 3112187500,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzExMjE4NzUwMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3112187500",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-09T19:57:19Z"
    },
    {
      "event": "subscribed",
      "id": 3112187503,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMxMTIxODc1MDM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3112187503",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-09T19:57:19Z"
    },
    {
      "event": "commented",
      "id": 596771889,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU5Njc3MTg4OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/596771889",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-09T20:48:48Z",
      "updated_at": "2020-03-09T20:48:48Z",
      "author_association": "MEMBER",
      "body": "@practicalswift The unit test minisketch binaries actually run forever. I need to fix that.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#issuecomment-596771889",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18261"
    },
    {
      "event": "mentioned",
      "id": 3112354271,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzExMjM1NDI3MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3112354271",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-09T20:48:48Z"
    },
    {
      "event": "subscribed",
      "id": 3112354275,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMxMTIzNTQyNzU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3112354275",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-09T20:48:48Z"
    },
    {
      "event": "commented",
      "id": 596803815,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU5NjgwMzgxNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/596803815",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-09T22:10:51Z",
      "updated_at": "2020-03-09T22:10:51Z",
      "author_association": "CONTRIBUTOR",
      "body": "@naumenkogs \r\n\r\nI did some robustness testing of this code by pulling in PRs #17989 (`ProcessMessage(…)` fuzzer). and #18288 (MemorySanitizer) and found an use of uninitialized memory (UUM) that is remotely triggerable.\r\n\r\nYou can reproduce the issue by pulling in the commits from those PR:s and simply run:\r\n\r\n```\r\n$ src/test/fuzz/process_message\r\n…\r\n```\r\n\r\nThe issue will be hit within a few seconds: `libFuzzer` is amazing :)\r\n\r\nNotice also how `libFuzzer` will automatically find the newly added message names (`wtxidrelay`, `sendrecon`, `reqrecon`, `sketch`, `reqbisec` and `reconcildiff`) and probe using them all! The fuzzer harness does not need to be teached about the existence of those :)\r\n\r\nPerhaps this UUM is the reason of the intermittent test failure you're seeing?\r\n\r\nI encourage everybody to review (or at least Concept ACK :)) #17989 (`ProcessMessage(…)` fuzzer). and #18288 (MemorySanitizer): having them merged would be great for robustness/security.",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#issuecomment-596803815",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18261"
    },
    {
      "event": "mentioned",
      "id": 3112576160,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzExMjU3NjE2MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3112576160",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-09T22:10:51Z"
    },
    {
      "event": "subscribed",
      "id": 3112576162,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMxMTI1NzYxNjI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3112576162",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-09T22:10:51Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3116322293,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzExNjMyMjI5Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3116322293",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-10T20:25:49Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3119625147,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzExOTYyNTE0Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3119625147",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-11T16:38:55Z"
    },
    {
      "event": "commented",
      "id": 597743053,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU5Nzc0MzA1Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/597743053",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-11T16:45:53Z",
      "updated_at": "2020-03-11T16:45:53Z",
      "author_association": "CONTRIBUTOR",
      "body": "Needs rebase :)",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#issuecomment-597743053",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18261"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3120208097,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzEyMDIwODA5Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3120208097",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-11T19:24:32Z"
    },
    {
      "event": "commented",
      "id": 597823928,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU5NzgyMzkyOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/597823928",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-11T19:26:21Z",
      "updated_at": "2020-03-11T19:26:21Z",
      "author_association": "MEMBER",
      "body": "I made some latest changes to make sure it can be plugged into a real network.\r\nPlease help with testing this by running a couple inter-connected Erlay nodes, and observing bandwidth (and ideally tx relay latency).\r\n\r\n@practicalswift I was planning to rebase once #18044 is merged.",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#issuecomment-597823928",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18261"
    },
    {
      "event": "mentioned",
      "id": 3120213854,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzEyMDIxMzg1NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3120213854",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-11T19:26:21Z"
    },
    {
      "event": "subscribed",
      "id": 3120213857,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMxMjAyMTM4NTc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3120213857",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-11T19:26:21Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3128749722,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzEyODc0OTcyMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3128749722",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-14T00:45:42Z"
    },
    {
      "event": "commented",
      "id": 599241490,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU5OTI0MTQ5MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/599241490",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-15T17:41:16Z",
      "updated_at": "2020-03-18T02:07:53Z",
      "author_association": "MEMBER",
      "body": "I ran 2 non-reachable nodes for around 24 hours, one is regular [wtxid-node](https://github.com/bitcoin/bitcoin/pull/18044) connected to legacy nodes, one is Erlay node connected to reconciliation-supporting nodes on the same host.\r\n\r\nBandwidth breakdown (in megabytes):\r\n\r\n|  | Legacy (sent) | Erlay (sent) | Legacy (received) | Erlay (received) |\r\n|----------------------------------|---------------|--------------|-------------------|------------------|\r\n| inv | 38 | 0.4 | 22 | 5.3 |\r\n| getdata | 6 | 5.7 | 1 | 0 |\r\n| sketch | - | - | - | 1.2 |\r\n| reqrecon, reqbisec, reconcildiff | - | 0.7 | - | - |\r\n| tx, blocktxn | 3 | 0.3 | 75 | 75 |\r\n| total (incl. other) | 48 |  7.1 | 103 | 84 |\r\n\r\nNotice overall 40% bandwidth saving.\r\nPlease help by running similar experiments and sharing bandwidth results :)\r\nHere's the [script](https://gist.github.com/naumenkogs/9bee7178dbe582e47d8db16f1019ddee) I hacked together for bandwidth analysis (run nodes with debug=1)\r\nPlease sanitize your results before publishing: sometimes there's noisy bandwidth like extra blocks due to some reasons I'm not aware of. ",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#issuecomment-599241490",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18261"
    },
    {
      "event": "commented",
      "id": 600388543,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwMDM4ODU0Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/600388543",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-18T02:12:12Z",
      "updated_at": "2020-03-18T02:39:28Z",
      "author_association": "MEMBER",
      "body": "More experiments: now I ran the same 2 nodes for 24 hours, but connected to 16 instead of 8 nodes (yeah, all 16 peers of Erlay node support reconciliation).\r\n\r\nLegacy wtxid-relay node spent 150 megabytes for announcements, while Erlay node spent 24 megabytes. Since these 2 days might have had different activity, it makes sense to compare the growth.. Legacy grew 2.23x (I guess due to more INVs in total), Erlay grew 1.8x. So, as expected, not only it's decent savings comparing to legacy, it also grows slower with connectivity.\r\n\r\nBased on the following facts I also make a guess that there's no point in tweaking Erlay forward for better performance:\r\n- only 0.0016 reconciliation failed (fully or partially) — meaning we don't underestimate much\r\n- only 15% of the announcement bandwidth is sketches — meaning we don't overestimate much\r\n- only 15% of the announcement bandwidth is *outbound* invs (which are much more likely to still be a little wasteful, because those peers are better connected than us and likely don't need those announemens)\r\n\r\nFinally, I measured delay in receiving transactions. I take the earliest time I received a transaction, and take latency from there, comparing to:\r\n- an average receiving time at all legacy nodes: 0.92s \r\n- at the Erlay node: 1.47s\r\n\r\nI think this is expected and fine, as we talk in the paper, but let me know if you think differently.",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#issuecomment-600388543",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18261"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3147660838,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzE0NzY2MDgzOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3147660838",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-19T23:56:37Z"
    },
    {
      "event": "unlabeled",
      "id": 3147715029,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MzE0NzcxNTAyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3147715029",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-20T00:29:33Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 601483568,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwMTQ4MzU2OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/601483568",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-20T01:01:20Z",
      "updated_at": "2021-02-16T11:41:59Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21148 (Split orphan handling from net_processing into txorphanage by ajtowns)\n* #21015 (Make all of net_processing (and some of net) use std::chrono types by dhruv)\n* #20892 (tests: Run both descriptor and legacy tests within a single test invocation by achow101)\n* #20758 (net-processing refactoring -- lose globals, move implementation details from .h to .cpp by ajtowns)\n* #20726 (p2p: Add DISABLETX message for negotiating block-relay-only connections by sdaftuar)\n* #20721 (Net: Move ping data to net_processing by jnewbery)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#issuecomment-601483568",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18261"
    },
    {
      "event": "labeled",
      "id": 3180373299,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDMxODAzNzMyOTk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3180373299",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-30T20:31:03Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 396059052,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2MDU5MDUy",
      "url": null,
      "actor": null,
      "commit_id": "ab3ef981bb0139538bca407ed52c410048d1c1a1",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Several existing functional tests are failing for me while synchronizing mempools via Erlay. I looked at the log of `wallet_backup.py` which has a rather simple setup of some nodes creating txes and then expecting all nodes to synchronize: \r\n\r\nIn my run, one node would behave strangely during reconciliations, sending GETDATA for a transaction with a wtxid `000000003f946000000000003f947ae147ae147b000000000000000100000000`  even though  its peer had created a tx with a different (and actually random) wtxid. As a result, NOTFOUND is sent and the synchronization never happens. \r\nI haven't been able to dig in deep enough yet to understand the cause, but there still seems to be a bug somewhere. ",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#pullrequestreview-396059052",
      "submitted_at": "2020-04-19T20:32:19Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
    },
    {
      "event": "commented",
      "id": 616229738,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYxNjIyOTczOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/616229738",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-19T21:42:12Z",
      "updated_at": "2020-04-19T21:42:12Z",
      "author_association": "MEMBER",
      "body": "@mzumsande thank you for taking a look! I'll do my best to find the cause.\r\n\r\nSome external eyes looking at the code would definitely help to both confirm the approach and troubleshoot issues like this :)",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#issuecomment-616229738",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18261"
    },
    {
      "event": "mentioned",
      "id": 3249510180,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzI0OTUxMDE4MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3249510180",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-19T21:42:12Z"
    },
    {
      "event": "subscribed",
      "id": 3249510182,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMyNDk1MTAxODI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3249510182",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-19T21:42:12Z"
    },
    {
      "event": "reviewed",
      "id": 397465590,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3NDY1NTkw",
      "url": null,
      "actor": null,
      "commit_id": "1b695eabc2083384596e146ff3da5846be3058e0",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#pullrequestreview-397465590",
      "submitted_at": "2020-04-21T16:20:30Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3257257894,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzI1NzI1Nzg5NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3257257894",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-21T17:59:16Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3257530114,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzI1NzUzMDExNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3257530114",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-21T19:15:55Z"
    },
    {
      "event": "unlabeled",
      "id": 3257554599,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MzI1NzU1NDU5OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3257554599",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-21T19:23:03Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3257583002,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzI1NzU4MzAwMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3257583002",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-21T19:31:17Z"
    },
    {
      "event": "commented",
      "id": 617398513,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYxNzM5ODUxMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/617398513",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-21T20:31:17Z",
      "updated_at": "2020-04-21T20:31:17Z",
      "author_association": "MEMBER",
      "body": "Alright, all the tests should be passing now, also rebased.\r\n\r\nThere's one last test that fails consistently: p2p_segwit.py.\r\nI'll take a look at that, and upgrade the code for recent minisketch (with reconciliation capacity checksum thing) soon.\r\n\r\nOne good idea for the future: test that legacy nodes talk OK alright to erlay nodes (I checked it only manually).\r\n",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#issuecomment-617398513",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18261"
    },
    {
      "event": "commented",
      "id": 617402629,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYxNzQwMjYyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/617402629",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-21T20:40:26Z",
      "updated_at": "2020-04-21T20:40:26Z",
      "author_association": "MEMBER",
      "body": "@naumenkogs Please have a look at this: https://github.com/sipa/minisketch/pull/23",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#issuecomment-617402629",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18261"
    },
    {
      "event": "mentioned",
      "id": 3257819506,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzI1NzgxOTUwNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3257819506",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-21T20:40:27Z"
    },
    {
      "event": "subscribed",
      "id": 3257819510,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMyNTc4MTk1MTA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3257819510",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-21T20:40:27Z"
    },
    {
      "event": "reviewed",
      "id": 397767143,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3NzY3MTQz",
      "url": null,
      "actor": null,
      "commit_id": "0a262c092f6fe29d6964fe6fd1f1d98d08db44dd",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#pullrequestreview-397767143",
      "submitted_at": "2020-04-22T00:39:24Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
    },
    {
      "event": "labeled",
      "id": 3271906577,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDMyNzE5MDY1Nzc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3271906577",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-25T13:10:07Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3276756500,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzI3Njc1NjUwMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3276756500",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-27T17:08:07Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3276907936,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzI3NjkwNzkzNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3276907936",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-27T17:46:41Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3276921427,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzI3NjkyMTQyNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3276921427",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-27T17:50:13Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3277066005,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzI3NzA2NjAwNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3277066005",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-27T18:29:52Z"
    },
    {
      "event": "unlabeled",
      "id": 3277233555,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MzI3NzIzMzU1NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3277233555",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-27T19:16:52Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3277325172,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzI3NzMyNTE3Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3277325172",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-27T19:42:03Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3277690056,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzI3NzY5MDA1Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3277690056",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-27T21:30:42Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3278159371,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzI3ODE1OTM3MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3278159371",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-28T01:04:48Z"
    },
    {
      "event": "labeled",
      "id": 3283600421,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDMyODM2MDA0MjE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3283600421",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-04-29T08:46:00Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 625282154,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYyNTI4MjE1NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625282154",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-07T14:15:34Z",
      "updated_at": "2020-05-07T14:15:34Z",
      "author_association": "MEMBER",
      "body": "This should be in reviewable state now: I split commits more, fixed all the tests, made it more stable, addressed feedback by @mzumsande, updated with new helpers from minisketch.\r\n\r\nTravis failed last time because of the little issue with minisketch release build, but it should work just fine for local testing and experiments!\r\nWill rebase again when #18044 is rebased to not create much discrepancy there.",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#issuecomment-625282154",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18261"
    },
    {
      "event": "mentioned",
      "id": 3313106384,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzMxMzEwNjM4NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3313106384",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-07T14:15:34Z"
    },
    {
      "event": "subscribed",
      "id": 3313106387,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMzMTMxMDYzODc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3313106387",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-07T14:15:34Z"
    },
    {
      "event": "referenced",
      "id": 3414346976,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM0MTQzNDY5NzY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3414346976",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "311c085cab2929754c79dd6e330bf888ec000e73",
      "commit_url": "https://api.github.com/repos/bitcoin/bips/commits/311c085cab2929754c79dd6e330bf888ec000e73",
      "created_at": "2020-06-06T07:49:36Z"
    },
    {
      "event": "reviewed",
      "id": 425762827,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NzYyODI3",
      "url": null,
      "actor": null,
      "commit_id": "5f81325bf1d2a32f6dcfb9a9b8c5106af6289b9f",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "ysangkok",
        "id": 284023,
        "node_id": "MDQ6VXNlcjI4NDAyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/284023?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ysangkok",
        "html_url": "https://github.com/ysangkok",
        "followers_url": "https://api.github.com/users/ysangkok/followers",
        "following_url": "https://api.github.com/users/ysangkok/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ysangkok/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ysangkok/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ysangkok/subscriptions",
        "organizations_url": "https://api.github.com/users/ysangkok/orgs",
        "repos_url": "https://api.github.com/users/ysangkok/repos",
        "events_url": "https://api.github.com/users/ysangkok/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ysangkok/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#pullrequestreview-425762827",
      "submitted_at": "2020-06-06T19:20:37Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
    },
    {
      "event": "reviewed",
      "id": 425762847,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NzYyODQ3",
      "url": null,
      "actor": null,
      "commit_id": "5f81325bf1d2a32f6dcfb9a9b8c5106af6289b9f",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "ysangkok",
        "id": 284023,
        "node_id": "MDQ6VXNlcjI4NDAyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/284023?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ysangkok",
        "html_url": "https://github.com/ysangkok",
        "followers_url": "https://api.github.com/users/ysangkok/followers",
        "following_url": "https://api.github.com/users/ysangkok/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ysangkok/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ysangkok/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ysangkok/subscriptions",
        "organizations_url": "https://api.github.com/users/ysangkok/orgs",
        "repos_url": "https://api.github.com/users/ysangkok/repos",
        "events_url": "https://api.github.com/users/ysangkok/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ysangkok/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#pullrequestreview-425762847",
      "submitted_at": "2020-06-06T19:20:59Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
    },
    {
      "event": "reviewed",
      "id": 425763015,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NzYzMDE1",
      "url": null,
      "actor": null,
      "commit_id": "5f81325bf1d2a32f6dcfb9a9b8c5106af6289b9f",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "ysangkok",
        "id": 284023,
        "node_id": "MDQ6VXNlcjI4NDAyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/284023?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ysangkok",
        "html_url": "https://github.com/ysangkok",
        "followers_url": "https://api.github.com/users/ysangkok/followers",
        "following_url": "https://api.github.com/users/ysangkok/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ysangkok/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ysangkok/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ysangkok/subscriptions",
        "organizations_url": "https://api.github.com/users/ysangkok/orgs",
        "repos_url": "https://api.github.com/users/ysangkok/repos",
        "events_url": "https://api.github.com/users/ysangkok/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ysangkok/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#pullrequestreview-425763015",
      "submitted_at": "2020-06-06T19:23:41Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3583870826,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzU4Mzg3MDgyNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3583870826",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-24T13:05:56Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3583886631,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzU4Mzg4NjYzMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3583886631",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-24T13:10:35Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3583914628,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzU4MzkxNDYyOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3583914628",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-24T13:18:24Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3583950919,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzU4Mzk1MDkxOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3583950919",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-24T13:28:40Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3583968329,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzU4Mzk2ODMyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3583968329",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-24T13:33:26Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3584109007,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzU4NDEwOTAwNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3584109007",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-24T14:10:28Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3584157301,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzU4NDE1NzMwMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3584157301",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-24T14:22:51Z"
    },
    {
      "event": "unlabeled",
      "id": 3587316454,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MzU4NzMxNjQ1NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3587316454",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-26T18:48:48Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 664831828,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDgzMTgyOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/664831828",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-28T07:35:47Z",
      "updated_at": "2020-07-28T07:36:22Z",
      "author_association": "MEMBER",
      "body": "Rebased on #18044, but we will probably get #19184 before Erlay first, so please review that first.\r\nAlthough this PR is in a reviewable state right now!\r\n\r\nThis PR currently doesn't pass travis tests because of the minisketch build issue after the recent patch. Should work locally and shouldn't stop people from reviewing this work :)",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#issuecomment-664831828",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18261"
    },
    {
      "event": "labeled",
      "id": 3604151797,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM2MDQxNTE3OTc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3604151797",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-30T14:30:05Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3698149822,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzY5ODE0OTgyMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3698149822",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-27T07:30:46Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3698175186,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzY5ODE3NTE4Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3698175186",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-27T07:38:10Z"
    },
    {
      "event": "unlabeled",
      "id": 3698268633,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MzY5ODI2ODYzMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3698268633",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-27T08:03:01Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 3719481599,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM3MTk0ODE1OTk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3719481599",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-02T12:19:27Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 702616037,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwMjYxNjAzNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/702616037",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-02T09:08:37Z",
      "updated_at": "2020-10-02T09:08:37Z",
      "author_association": "CONTRIBUTOR",
      "body": "It seems like the tests are failing and that a rebase is needed.\r\n\r\nI'm super excited about Erlay! :) What is the plan ahead?",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#issuecomment-702616037",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18261"
    },
    {
      "event": "commented",
      "id": 702679529,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwMjY3OTUyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/702679529",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-02T11:26:33Z",
      "updated_at": "2020-10-02T11:26:33Z",
      "author_association": "MEMBER",
      "body": "@practicalswift we kinda agreed that #19988 is a prerequisite, I hope Erlay becomes a priority right after :)",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#issuecomment-702679529",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18261"
    },
    {
      "event": "mentioned",
      "id": 3833544240,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzgzMzU0NDI0MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3833544240",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-02T11:26:33Z"
    },
    {
      "event": "subscribed",
      "id": 3833544243,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM4MzM1NDQyNDM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3833544243",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-02T11:26:33Z"
    },
    {
      "event": "convert_to_draft",
      "id": 3839033485,
      "node_id": "MDE5OkNvbnZlcnRUb0RyYWZ0RXZlbnQzODM5MDMzNDg1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3839033485",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-05T07:51:46Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3999170076,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzk5OTE3MDA3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3999170076",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-16T09:05:51Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3999293843,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzk5OTI5Mzg0Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3999293843",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-16T09:33:56Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3999724826,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzk5OTcyNDgyNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3999724826",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-16T11:13:56Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3999816990,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzk5OTgxNjk5MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3999816990",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-16T11:38:56Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3999911075,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzk5OTkxMTA3NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3999911075",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-16T12:05:01Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4004263029,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDAwNDI2MzAyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4004263029",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-17T08:47:13Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4005388827,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDAwNTM4ODgyNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4005388827",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-17T13:14:48Z"
    },
    {
      "event": "ready_for_review",
      "id": 4005471465,
      "node_id": "MDE5OlJlYWR5Rm9yUmV2aWV3RXZlbnQ0MDA1NDcxNDY1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4005471465",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-17T13:33:30Z"
    },
    {
      "event": "commented",
      "id": 728930036,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcyODkzMDAzNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/728930036",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-17T13:34:12Z",
      "updated_at": "2020-11-17T13:34:12Z",
      "author_association": "MEMBER",
      "body": "Rebased, added a bunch of comments and restructured commits for better review.\r\n\r\nMarking it as reviewable now, although my fight with Travis builds is not over yet :)",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#issuecomment-728930036",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18261"
    },
    {
      "event": "unlabeled",
      "id": 4005619540,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDAwNTYxOTU0MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4005619540",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-17T14:04:14Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4010613953,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDAxMDYxMzk1Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4010613953",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-18T13:17:02Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4014860261,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDAxNDg2MDI2MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4014860261",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-19T09:39:03Z"
    },
    {
      "event": "labeled",
      "id": 4015563741,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQwMTU1NjM3NDE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4015563741",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-19T12:21:30Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 730536171,
      "node_id": "MDEyOklzc3VlQ29tbWVudDczMDUzNjE3MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/730536171",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-19T17:49:00Z",
      "updated_at": "2020-11-19T17:49:00Z",
      "author_association": "MEMBER",
      "body": "Me and @sipa decided to switch to \"extension sketches\": instead of requesting a bisection, someone who failed to decode the difference from the initial sketch, may ask for an extension of the initial sketch.\r\nA responder then have to send syndromes of higher order only.\r\n\r\nThe main motivation is it seems like bisection adds a lot of complexity (see b5c92a41e4cc0599504cf838d20212f1a403e573).\r\nExtensions have all the same properties after all, but they're more CPU-costly. We think it's fine for sketches of small capacity (what we expect to have here) to ignore this disadvantage.\r\n\r\nSo, for now, please review up to a30e861c9cada8fbc400d07255516839480d9e9d (but also feel free to review further if you're curious).\r\n\r\nI will replace bisection with extensions and update the BIP soon.",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#issuecomment-730536171",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18261"
    },
    {
      "event": "mentioned",
      "id": 4017151355,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDAxNzE1MTM1NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4017151355",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-19T17:49:00Z"
    },
    {
      "event": "subscribed",
      "id": 4017151360,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQwMTcxNTEzNjA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4017151360",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-19T17:49:00Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4018253702,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDAxODI1MzcwMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4018253702",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-19T22:46:27Z"
    },
    {
      "event": "unlabeled",
      "id": 4018278774,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDAxODI3ODc3NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4018278774",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-19T22:55:23Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 4021522498,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQwMjE1MjI0OTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4021522498",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-20T15:49:49Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 731640683,
      "node_id": "MDEyOklzc3VlQ29tbWVudDczMTY0MDY4Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/731640683",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-21T21:39:09Z",
      "updated_at": "2020-11-21T21:39:09Z",
      "author_association": "MEMBER",
      "body": "Okay, now the [BIP PR](https://github.com/bitcoin/bitcoin/pull/18261#issuecomment-600388543) is up-to-date with this code, and this stuff is ready for full review again.",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#issuecomment-731640683",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18261"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4024231737,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDAyNDIzMTczNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4024231737",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-21T21:41:02Z"
    },
    {
      "event": "unlabeled",
      "id": 4024287391,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDAyNDI4NzM5MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4024287391",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-21T23:09:40Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 4036974584,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQwMzY5NzQ1ODQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4036974584",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-25T09:04:19Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4037831507,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDAzNzgzMTUwNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4037831507",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-25T12:24:59Z"
    },
    {
      "event": "unlabeled",
      "id": 4038027362,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDAzODAyNzM2Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4038027362",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-25T13:15:29Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4051463269,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDA1MTQ2MzI2OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4051463269",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-30T11:31:05Z"
    },
    {
      "event": "commented",
      "id": 736558694,
      "node_id": "MDEyOklzc3VlQ29tbWVudDczNjU1ODY5NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/736558694",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-01T13:41:48Z",
      "updated_at": "2020-12-01T13:41:48Z",
      "author_association": "MEMBER",
      "body": "Starting the review by digging into the BIP :)\r\n\r\nFew remarks :\r\n1) \"improves privacy as a side-effect\", it would be great to explain and document this claim, maybe add a section in Rationale ?\r\n2) \"truncated transaction IDs\",  AFAIU, Erlay introduces new shortened transaction identifiers for regular tx-relay, maybe it could be better to call them \"truncated WTXID\" ? If BIP 330 implies BIP 339, it could be better to remove references to transaction ID or at least when it's ambiguous\r\n3) You mentioned switching to extension sketch and mentioned the updated BIP was ready for review, I think you need to update the \"intented protocol flow\" schema, remove `reqbisec` and update Rationale ?\r\n4) You might swap the \"Local State\" section before messages, it could be easier to explain q-coefficient before using them in New messages\r\n",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#issuecomment-736558694",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18261"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4057643093,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDA1NzY0MzA5Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4057643093",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-01T14:58:28Z"
    },
    {
      "event": "labeled",
      "id": 4062294666,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQwNjIyOTQ2NjY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4062294666",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-02T13:16:47Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4070756619,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDA3MDc1NjYxOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4070756619",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-04T02:57:17Z"
    },
    {
      "event": "unlabeled",
      "id": 4070783137,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDA3MDc4MzEzNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4070783137",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-04T03:09:33Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 4079531029,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQwNzk1MzEwMjk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4079531029",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-07T13:05:30Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 549563941,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5NTYzOTQx",
      "url": null,
      "actor": null,
      "commit_id": "a6f979194ac31f19cdc46f01b40f48ec889910a9",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK on Erlay -- thanks for working on this.\r\n\r\nMy review approach is to focus on the non-minisketch portions of this PR for now.  I've read through the BIP draft and gone through the first 5 commits.  As this is a big PR I think it'll take me a while to go through the rest, so I'm leaving these comments for now and will come back to this later when I have time for additional review.",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#pullrequestreview-549563941",
      "submitted_at": "2020-12-10T21:14:06Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4100012129,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDEwMDAxMjEyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4100012129",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-11T11:53:10Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4101558974,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDEwMTU1ODk3NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4101558974",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-11T17:42:27Z"
    },
    {
      "event": "reviewed",
      "id": 550089271,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwMDg5Mjcx",
      "url": null,
      "actor": null,
      "commit_id": "e8fd1cb590161e88b64b2e20d3113310390e68a5",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#pullrequestreview-550089271",
      "submitted_at": "2020-12-11T18:50:10Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4124136627,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDEyNDEzNjYyNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4124136627",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-17T09:30:44Z"
    },
    {
      "event": "reviewed",
      "id": 555851251,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1ODUxMjUx",
      "url": null,
      "actor": null,
      "commit_id": "9da045b6f563fb5ba2bf369613ab388b0cc8ce73",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "First set of comments.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#pullrequestreview-555851251",
      "submitted_at": "2020-12-20T01:46:16Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4135630719,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDEzNTYzMDcxOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4135630719",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-21T11:49:05Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4139387061,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDEzOTM4NzA2MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4139387061",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-22T09:43:24Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4139394767,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDEzOTM5NDc2Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4139394767",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-22T09:45:27Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4139588223,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDEzOTU4ODIyMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4139588223",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-22T10:38:07Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4141707736,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDE0MTcwNzczNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4141707736",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-22T20:45:32Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4144445554,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDE0NDQ0NTU1NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4144445554",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-23T14:41:09Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4147923630,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDE0NzkyMzYzMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4147923630",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-24T18:49:18Z"
    },
    {
      "event": "unlabeled",
      "id": 4148026618,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDE0ODAyNjYxOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4148026618",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-24T20:52:44Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4150239347,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDE1MDIzOTM0Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4150239347",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-27T12:08:26Z"
    },
    {
      "event": "labeled",
      "id": 4161707598,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQxNjE3MDc1OTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4161707598",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-02T13:34:31Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4187255910,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDE4NzI1NTkxMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4187255910",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-09T17:02:09Z"
    },
    {
      "event": "unlabeled",
      "id": 4187271364,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDE4NzI3MTM2NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4187271364",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-09T17:22:26Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4187756891,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDE4Nzc1Njg5MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4187756891",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-10T07:06:52Z"
    },
    {
      "event": "labeled",
      "id": 4192904867,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQxOTI5MDQ4Njc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4192904867",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-11T21:34:06Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 758239282,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc1ODIzOTI4Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/758239282",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-11T21:34:07Z",
      "updated_at": "2021-01-11T21:34:07Z",
      "author_association": "MEMBER",
      "body": "<!--cf906140f33d8803c4a75a2196329ecb-->\n🐙 This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#issuecomment-758239282",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18261"
    },
    {
      "event": "reviewed",
      "id": 570100861,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcwMTAwODYx",
      "url": null,
      "actor": null,
      "commit_id": "f472f3077e6860f2ec6b1ecb3d4b47fc929bccb3",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Just some style comments so far. A couple of high-level points:\r\n\r\n1. I agree with the comment here https://github.com/bitcoin/bitcoin/pull/18261#discussion_r541049259 that we should aim to separate this from the rest of net_processing. This PR currently has about 850 LOC change in net_processing.{cpp|h}, out of a total of around 5700 lines. That means ~15% of net_processing is erlay code after this PR (and over half of net_processing.h is erlay specific). Would it be possible to split the erlay logic into its own subcomponent? One immediate benefit for you is that there would be far fewer disruptive rebases if you did that.\r\n2. Could the minisketch code and tests be split into their own PR? It seems like there is pretty wide support for incorporating erlay. Reviewing and merging minisketch first would make this PR a lot smaller and more focused on just the p2p changes.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#pullrequestreview-570100861",
      "submitted_at": "2021-01-17T22:53:52Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4223335430,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDIyMzMzNTQzMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4223335430",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-19T16:04:44Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4233883998,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDIzMzg4Mzk5OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4233883998",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-21T14:51:39Z"
    },
    {
      "event": "reviewed",
      "id": 575183702,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc1MTgzNzAy",
      "url": null,
      "actor": null,
      "commit_id": "c452e5dbd6808a76e1f616b1269e5394b8b86cd1",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#pullrequestreview-575183702",
      "submitted_at": "2021-01-25T09:21:42Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
    },
    {
      "event": "reviewed",
      "id": 584688731,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTg0Njg4NzMx",
      "url": null,
      "actor": null,
      "commit_id": "ce83d3fbcc0f09808d15a7d2155223430fa45735",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#pullrequestreview-584688731",
      "submitted_at": "2021-02-05T20:50:11Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
    },
    {
      "event": "reviewed",
      "id": 586724683,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTg2NzI0Njgz",
      "url": null,
      "actor": null,
      "commit_id": "094c4ed8cb8558c8fdb99b26a2d41d435a4d28bc",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Still doing a first parse of the PR, some comments are really minors but I think few more substantial.\r\n\r\nAt first sight, I think this PR could benefit from better code organization (e.g split requester/responder state in different struct, encapsulate processing of new messages, ...) but need to finish the high-level review before to propose.",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#pullrequestreview-586724683",
      "submitted_at": "2021-02-09T18:06:09Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
    },
    {
      "event": "reviewed",
      "id": 586937542,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTg2OTM3NTQy",
      "url": null,
      "actor": null,
      "commit_id": "7e5d826532ff541266377eb89dc62e1b5f8747cc",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK on Erlay - Reducing bandwidth usage and increasing connectivity is great! The slightly increased transaction propagation times are an OK tradeoff IMO.",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#pullrequestreview-586937542",
      "submitted_at": "2021-02-09T20:11:49Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
    },
    {
      "event": "reviewed",
      "id": 587168578,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTg3MTY4NTc4",
      "url": null,
      "actor": null,
      "commit_id": "c452e5dbd6808a76e1f616b1269e5394b8b86cd1",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "unseddd",
        "id": 64070857,
        "node_id": "MDQ6VXNlcjY0MDcwODU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/64070857?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/unseddd",
        "html_url": "https://github.com/unseddd",
        "followers_url": "https://api.github.com/users/unseddd/followers",
        "following_url": "https://api.github.com/users/unseddd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/unseddd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/unseddd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/unseddd/subscriptions",
        "organizations_url": "https://api.github.com/users/unseddd/orgs",
        "repos_url": "https://api.github.com/users/unseddd/repos",
        "events_url": "https://api.github.com/users/unseddd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/unseddd/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#pullrequestreview-587168578",
      "submitted_at": "2021-02-10T01:23:08Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
    },
    {
      "event": "reviewed",
      "id": 587200668,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTg3MjAwNjY4",
      "url": null,
      "actor": null,
      "commit_id": "c452e5dbd6808a76e1f616b1269e5394b8b86cd1",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "unseddd",
        "id": 64070857,
        "node_id": "MDQ6VXNlcjY0MDcwODU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/64070857?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/unseddd",
        "html_url": "https://github.com/unseddd",
        "followers_url": "https://api.github.com/users/unseddd/followers",
        "following_url": "https://api.github.com/users/unseddd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/unseddd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/unseddd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/unseddd/subscriptions",
        "organizations_url": "https://api.github.com/users/unseddd/orgs",
        "repos_url": "https://api.github.com/users/unseddd/repos",
        "events_url": "https://api.github.com/users/unseddd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/unseddd/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#pullrequestreview-587200668",
      "submitted_at": "2021-02-10T02:24:04Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
    },
    {
      "event": "commented",
      "id": 776429091,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc3NjQyOTA5MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/776429091",
      "actor": {
        "login": "unseddd",
        "id": 64070857,
        "node_id": "MDQ6VXNlcjY0MDcwODU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/64070857?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/unseddd",
        "html_url": "https://github.com/unseddd",
        "followers_url": "https://api.github.com/users/unseddd/followers",
        "following_url": "https://api.github.com/users/unseddd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/unseddd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/unseddd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/unseddd/subscriptions",
        "organizations_url": "https://api.github.com/users/unseddd/orgs",
        "repos_url": "https://api.github.com/users/unseddd/repos",
        "events_url": "https://api.github.com/users/unseddd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/unseddd/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-10T04:21:25Z",
      "updated_at": "2021-02-10T04:21:25Z",
      "author_association": "NONE",
      "body": "Added a couple fuzz harnesses in my [erlay](https://github.com/unseddd/bitcoin/tree/erlay) branch, if you want them.\r\n\r\nAlso contains some other minor fixups, like a change for [src/test/fuzz/net.cpp](https://github.com/bitcoin/bitcoin/blob/master/src/test/fuzz/net.cpp#L89) (for the `flood` param):\r\n\r\n```diff\r\ndiff --git a/src/test/fuzz/net.cpp b/src/test/fuzz/net.cpp\r\nindex 31b99600e..7d48a7ec3 100644\r\n--- a/src/test/fuzz/net.cpp\r\n+++ b/src/test/fuzz/net.cpp\r\n@@ -86,7 +86,8 @@ FUZZ_TARGET_INIT(net, initialize_net)\r\n                 node.AddKnownTx(inv_opt->hash);\r\n             },\r\n             [&] {\r\n-                node.PushTxInventory(ConsumeUInt256(fuzzed_data_provider));\r\n+                node.PushTxInventory(ConsumeUInt256(fuzzed_data_provider), false);\r\n+                node.PushTxInventory(ConsumeUInt256(fuzzed_data_provider), true);\r\n             },\r\n             [&] {\r\n                 const std::optional<CService> service_opt = ConsumeDeserializable<CService>(fuzzed_data_provider);\r\n```",
      "user": {
        "login": "unseddd",
        "id": 64070857,
        "node_id": "MDQ6VXNlcjY0MDcwODU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/64070857?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/unseddd",
        "html_url": "https://github.com/unseddd",
        "followers_url": "https://api.github.com/users/unseddd/followers",
        "following_url": "https://api.github.com/users/unseddd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/unseddd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/unseddd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/unseddd/subscriptions",
        "organizations_url": "https://api.github.com/users/unseddd/orgs",
        "repos_url": "https://api.github.com/users/unseddd/repos",
        "events_url": "https://api.github.com/users/unseddd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/unseddd/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#issuecomment-776429091",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18261"
    },
    {
      "event": "commented",
      "id": 776431981,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc3NjQzMTk4MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/776431981",
      "actor": {
        "login": "unseddd",
        "id": 64070857,
        "node_id": "MDQ6VXNlcjY0MDcwODU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/64070857?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/unseddd",
        "html_url": "https://github.com/unseddd",
        "followers_url": "https://api.github.com/users/unseddd/followers",
        "following_url": "https://api.github.com/users/unseddd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/unseddd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/unseddd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/unseddd/subscriptions",
        "organizations_url": "https://api.github.com/users/unseddd/orgs",
        "repos_url": "https://api.github.com/users/unseddd/repos",
        "events_url": "https://api.github.com/users/unseddd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/unseddd/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-10T04:31:31Z",
      "updated_at": "2021-02-10T04:35:28Z",
      "author_association": "NONE",
      "body": "Concept ACK\r\n\r\nI understand that the requestor being the one to compute the sketches protects public nodes against potential DoS. Are there any protections for requestor(s)?\r\n\r\nThinking about the scenario where one public node requests a sketch from a malicious public node who returns parameters for high diff sketches as a DoS.",
      "user": {
        "login": "unseddd",
        "id": 64070857,
        "node_id": "MDQ6VXNlcjY0MDcwODU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/64070857?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/unseddd",
        "html_url": "https://github.com/unseddd",
        "followers_url": "https://api.github.com/users/unseddd/followers",
        "following_url": "https://api.github.com/users/unseddd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/unseddd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/unseddd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/unseddd/subscriptions",
        "organizations_url": "https://api.github.com/users/unseddd/orgs",
        "repos_url": "https://api.github.com/users/unseddd/repos",
        "events_url": "https://api.github.com/users/unseddd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/unseddd/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#issuecomment-776431981",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18261"
    },
    {
      "event": "commented",
      "id": 776608307,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc3NjYwODMwNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/776608307",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-10T10:27:15Z",
      "updated_at": "2021-02-10T10:27:15Z",
      "author_association": "MEMBER",
      "body": "I think the approach needs rethinking for the reasons stated here: https://github.com/bitcoin/bitcoin/pull/18261#pullrequestreview-570100861. The Erlay logic in this PR is spread across many functions in net_processing.cpp and reconcilliation.h, which means that it's impossible to test that logic in isolation. I suppose that's why there aren't any unit tests included in this PR.\r\n\r\nI think it would be much cleaner to have a fully separate module, similar to how txrequest was separated from the rest of net_processing. That module maintains its own private state and exposes a limited number of interface methods to net_processing. That means that it's possible to very thoroughly unit test and fuzz test that module in isolation.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#issuecomment-776608307",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18261"
    },
    {
      "event": "commented",
      "id": 776618414,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc3NjYxODQxNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/776618414",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-10T10:43:38Z",
      "updated_at": "2021-02-10T15:14:43Z",
      "author_association": "MEMBER",
      "body": "Needs rebase.\r\n\r\nEdit: This has 166 hidden comments, so apologies if I missed something, but are there any special build steps or flags to pass? With gcc 10.2.1 I'm seeing 16 occurrences of the same build warning (see comment below) and the functional tests are all failing for me with `detected inconsistent lock order for 'peer->m_recon_state_mutex' in net_processing.cpp:4936 (in thread 'msghand')`. Trying with clang now.\r\n\r\nEdit: no warnings with clang 9 but the functional tests fail for the same reason. \r\n\r\nEdit: updated, rebooted, cleared build cache, made distclean, rinse, repeat...same result.\r\n\r\nEdit: the unit tests also hang for me at `Entering directory '/home/jon/projects/bitcoin/bitcoin/src/minisketch'`\r\n\r\nEdit: if the minisketch unit tests run indefinitely, it may be good to not include them in `make check` (or a bounded run time version)",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#issuecomment-776618414",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18261"
    },
    {
      "event": "reviewed",
      "id": 587476349,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTg3NDc2MzQ5",
      "url": null,
      "actor": null,
      "commit_id": "c452e5dbd6808a76e1f616b1269e5394b8b86cd1",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#pullrequestreview-587476349",
      "submitted_at": "2021-02-10T10:49:03Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
    },
    {
      "event": "reviewed",
      "id": 587528209,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTg3NTI4MjA5",
      "url": null,
      "actor": null,
      "commit_id": "c452e5dbd6808a76e1f616b1269e5394b8b86cd1",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#pullrequestreview-587528209",
      "submitted_at": "2021-02-10T11:54:37Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
    },
    {
      "event": "commented",
      "id": 776779899,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc3Njc3OTg5OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/776779899",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-10T15:19:29Z",
      "updated_at": "2021-02-10T15:28:12Z",
      "author_association": "MEMBER",
      "body": "Update: With a  `make clean`, branch compiled fine. Sorry Gleb!\r\n\r\nI had issues compiling this branch as well. Full error: https://pastebin.com/6mc9eRed\r\n\r\nMostly errors like this:\r\n```\r\n  CXXLD    libbitcoinconsensus.la\r\n\r\nUndefined symbols for architecture x86_64:\r\n  \"ChaCha20::ChaCha20(unsigned char const*, unsigned long)\", referenced from:\r\n```\r\n\r\nCommand: ` ./autogen.sh && ./configure && make && make check` \r\n\r\nI didn't git clean or anything, probably had another PR branch up in my local repo before attempting to compile, looked good up until  `libbitcoinconsensus.la`\r\n\r\nSystem info:\r\n\r\n```\r\n--> uname -a\r\nDarwin   18.7.0 Darwin Kernel Version 18.7.0: Tue Aug 20 16:57:14 PDT 2019; root:xnu-4903.271.2~2/RELEASE_X86_64 x86_64\r\n--> gcc -v\r\nConfigured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/usr/include/c++/4.2.1\r\nApple clang version 11.0.0 (clang-1100.0.33.8)\r\nTarget: x86_64-apple-darwin18.7.0\r\nThread model: posix\r\nInstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin\r\n```",
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#issuecomment-776779899",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18261"
    },
    {
      "event": "commented",
      "id": 776813912,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc3NjgxMzkxMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/776813912",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-10T15:59:46Z",
      "updated_at": "2021-02-10T15:59:46Z",
      "author_association": "MEMBER",
      "body": "@naumenkogs the new test I think has the wrong permissions:\r\n\r\n```\r\n-rwxr-xr-x    1 matthewzipkin  staff    5718 Feb  3 10:10 p2p_disconnect_ban.py\r\n-rwxr-xr-x    1 matthewzipkin  staff    3833 Dec  3 15:09 p2p_dos_header_tree.py\r\n-rw-r--r--    1 matthewzipkin  staff   28920 Feb 10 09:34 p2p_erlay.py\r\n-rwxr-xr-x    1 matthewzipkin  staff    5741 Feb  3 10:10 p2p_eviction.py\r\n-rwxr-xr-x    1 matthewzipkin  staff    5185 Feb  3 10:10 p2p_feefilter.py\r\n```\r\n\r\n```\r\n$ test/functional/p2p_erlay.py\r\n-bash: test/functional/p2p_erlay.py: Permission denied\r\n```",
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#issuecomment-776813912",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18261"
    },
    {
      "event": "mentioned",
      "id": 4315581229,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDMxNTU4MTIyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4315581229",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-10T15:59:46Z"
    },
    {
      "event": "subscribed",
      "id": 4315581233,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQzMTU1ODEyMzM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4315581233",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-10T15:59:46Z"
    },
    {
      "event": "reviewed",
      "id": 587627896,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTg3NjI3ODk2",
      "url": null,
      "actor": null,
      "commit_id": "34a485e0f1c9511fbd18cc6c0d60b6ca8929ccd9",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Thanks for working on this, the scope of topics covered is really wide and interesting : privacy attacks, \r\nnetwork resources usage, latency, ...\r\n\r\nWhat I'm still not able to reason on easily is the selection of the tx-announcement protocol,\r\nwhich AFAIU is function of both the peer types (strategic outbound, non-strategic outbound, inbound),\r\nthe transaction origin considered (initial-broadcast, relay-from-flooding, relay-from-initiated-reconciliation,\r\nrelay-from-accepted-reconciliation) and lastly the sketch processing limits.\r\n\r\nI think it's more a work of tightening better the bip/paper to the implementation comments, and\r\nmark the divergences from them if they are some. \r\n\r\nW.r.t to encapsulation, it could be at least to move new messages handlers in their own methods the\r\nsame way it has been done for BIP157 (`ProcessReconcilDiff`, `ProcessSketch`, ...).",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#pullrequestreview-587627896",
      "submitted_at": "2021-02-10T16:29:06Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
    },
    {
      "event": "commented",
      "id": 777122712,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc3NzEyMjcxMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/777122712",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-11T00:02:35Z",
      "updated_at": "2021-02-11T00:02:35Z",
      "author_association": "MEMBER",
      "body": "> @naumenkogs the new test I think has the wrong permissions:\r\n> -bash: test/functional/p2p_erlay.py: Permission denied\r\n\r\nConfirming @pinheadmz' comment, I needed to run `chmod 755 test/functional/p2p_erlay.py` on the file. The test then fails with `Assertion failed: detected inconsistent lock order for 'cs_main' in net_processing.cpp:2933 (in thread 'msghand')`\r\n\r\n<details><summary>traceback</summary><p>\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/jon/projects/bitcoin/bitcoin/test/functional/p2p_erlay.py\", line 583, in <module>\r\n    ReconciliationTest().main()\r\n  File \"/home/jon/projects/bitcoin/bitcoin/test/functional/test_framework/test_framework.py\", line 149, in main\r\n    exit_code = self.shutdown()\r\n  File \"/home/jon/projects/bitcoin/bitcoin/test/functional/test_framework/test_framework.py\", line 278, in shutdown\r\n    self.stop_nodes()\r\n  File \"/home/jon/projects/bitcoin/bitcoin/test/functional/test_framework/test_framework.py\", line 525, in stop_nodes\r\n    node.stop_node(wait=wait, wait_until_stopped=False)\r\n  File \"/home/jon/projects/bitcoin/bitcoin/test/functional/test_framework/test_node.py\", line 334, in stop_node\r\n    raise AssertionError(\"Unexpected stderr {} != {}\".format(stderr, expected_stderr))\r\nAssertionError: Unexpected stderr Assertion failed: detected inconsistent lock order for 'cs_main' in net_processing.cpp:2933 (in thread 'msghand'), details in debug log. != \r\n[node 0] Cleaning up leftover process\r\n```\r\n</p></details>\r\n",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#issuecomment-777122712",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18261"
    },
    {
      "event": "mentioned",
      "id": 4317564238,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDMxNzU2NDIzOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4317564238",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-11T00:02:35Z"
    },
    {
      "event": "subscribed",
      "id": 4317564242,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQzMTc1NjQyNDI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4317564242",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-11T00:02:36Z"
    },
    {
      "event": "mentioned",
      "id": 4317564247,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDMxNzU2NDI0Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4317564247",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-11T00:02:36Z"
    },
    {
      "event": "subscribed",
      "id": 4317564250,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQzMTc1NjQyNTA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4317564250",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-11T00:02:36Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWU3ODczMGQ5YTIzNzhiNzU4MjA4MzE4NDE1MmVlYWE0NDU0ZDNk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fae78730d9a2378b7582083184152eeaa4454d3d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/fae78730d9a2378b7582083184152eeaa4454d3d",
      "tree": {
        "sha": "827683d9303a49da8ec332517c5c1c327f5ff546",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/827683d9303a49da8ec332517c5c1c327f5ff546"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b69eab9025678654acd0dda1861152c239f07699",
          "sha": "b69eab9025678654acd0dda1861152c239f07699",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b69eab9025678654acd0dda1861152c239f07699"
        }
      ],
      "message": "Add minisketch dependency",
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2021-02-11T08:13:41Z"
      },
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2020-02-18T22:45:02Z"
      },
      "sha": "fae78730d9a2378b7582083184152eeaa4454d3d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNTYwMDRhZjgwYzIwZjA5NjdhYzg2N2NhOTAwMDg2YmNjMTdkMzdm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/156004af80c20f0967ac867ca900086bcc17d37f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/156004af80c20f0967ac867ca900086bcc17d37f",
      "tree": {
        "sha": "e9a61df2650917c7042163dc41703220b207c002",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e9a61df2650917c7042163dc41703220b207c002"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [],
      "message": "Squashed 'src/minisketch/' content from commit a570de261\n\ngit-subtree-dir: src/minisketch\ngit-subtree-split: a570de26152a0ec224c38f8157f796030cb0bd20",
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2021-02-11T08:14:22Z"
      },
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2021-02-11T08:14:22Z"
      },
      "sha": "156004af80c20f0967ac867ca900086bcc17d37f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1Y2FmYmJjZDMwOGQ5ZDM2ZmFlMDQzMmVhODM4NGQzMjRkNGE3YmU2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5cafbbcd308d9d36fae0432ea8384d324d4a7be6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/5cafbbcd308d9d36fae0432ea8384d324d4a7be6",
      "tree": {
        "sha": "214f5e79789c0d8deeb24afed59bf433e391490e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/214f5e79789c0d8deeb24afed59bf433e391490e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fae78730d9a2378b7582083184152eeaa4454d3d",
          "sha": "fae78730d9a2378b7582083184152eeaa4454d3d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/fae78730d9a2378b7582083184152eeaa4454d3d"
        },
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/156004af80c20f0967ac867ca900086bcc17d37f",
          "sha": "156004af80c20f0967ac867ca900086bcc17d37f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/156004af80c20f0967ac867ca900086bcc17d37f"
        }
      ],
      "message": "Merge commit '156004af80c20f0967ac867ca900086bcc17d37f' as 'src/minisketch'",
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2021-02-11T08:14:22Z"
      },
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2021-02-11T08:14:22Z"
      },
      "sha": "5cafbbcd308d9d36fae0432ea8384d324d4a7be6"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMWJmN2VlM2QyNjNiZTA5OWJhNTNmYjlmNjYzNWE5Nzc1ZTQ1ZDg4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/01bf7ee3d263be099ba53fb9f6635a9775e45d88",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/01bf7ee3d263be099ba53fb9f6635a9775e45d88",
      "tree": {
        "sha": "b9209b957b2a5e9866e3030579b5a0eeced881c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b9209b957b2a5e9866e3030579b5a0eeced881c8"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5cafbbcd308d9d36fae0432ea8384d324d4a7be6",
          "sha": "5cafbbcd308d9d36fae0432ea8384d324d4a7be6",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/5cafbbcd308d9d36fae0432ea8384d324d4a7be6"
        }
      ],
      "message": "Announce reconciliation support\n\nIf a peer supports wtxid our node should notify them\nthat we are willing to participate in tx reconciliation.\nAt this point we generate a salt for computing\nshort tx IDs for reconciliations over this connection.",
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2021-02-11T08:14:58Z"
      },
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2020-11-12T07:18:46Z"
      },
      "sha": "01bf7ee3d263be099ba53fb9f6635a9775e45d88"
    },
    {
      "event": "convert_to_draft",
      "id": 4319208525,
      "node_id": "MDE5OkNvbnZlcnRUb0RyYWZ0RXZlbnQ0MzE5MjA4NTI1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4319208525",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-11T10:58:08Z"
    },
    {
      "event": "commented",
      "id": 777493335,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc3NzQ5MzMzNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/777493335",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-11T14:20:17Z",
      "updated_at": "2021-02-11T14:20:17Z",
      "author_association": "MEMBER",
      "body": "@jonasnick I `chmod a+x` and the test ran and passed.",
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#issuecomment-777493335",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18261"
    },
    {
      "event": "mentioned",
      "id": 4320093357,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDMyMDA5MzM1Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4320093357",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-11T14:20:17Z"
    },
    {
      "event": "subscribed",
      "id": 4320093367,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQzMjAwOTMzNjc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4320093367",
      "actor": {
        "login": "jonasnick",
        "id": 2582071,
        "node_id": "MDQ6VXNlcjI1ODIwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasnick",
        "html_url": "https://github.com/jonasnick",
        "followers_url": "https://api.github.com/users/jonasnick/followers",
        "following_url": "https://api.github.com/users/jonasnick/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasnick/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasnick/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasnick/orgs",
        "repos_url": "https://api.github.com/users/jonasnick/repos",
        "events_url": "https://api.github.com/users/jonasnick/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasnick/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-11T14:20:17Z"
    },
    {
      "event": "commented",
      "id": 777537174,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc3NzUzNzE3NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/777537174",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-11T14:58:57Z",
      "updated_at": "2021-02-11T14:58:57Z",
      "author_association": "MEMBER",
      "body": "> the test ran and passed.\r\n\r\nBuilding with `--enable-debug`? The lock order errors seem pertinent to these changes. I even rebuilt again a few hours later yesterday after updating my depends; same thing. It's odd if no one else is seeing them.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#issuecomment-777537174",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18261"
    },
    {
      "event": "commented",
      "id": 777541288,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc3NzU0MTI4OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/777541288",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-11T15:00:57Z",
      "updated_at": "2021-02-11T15:00:57Z",
      "author_association": "MEMBER",
      "body": "I suppose if no one is seeing the issues, I'll wait until the next push here and look at what the CI says.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#issuecomment-777541288",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18261"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYjBkMjU3NWJmYjU3N2U2YzY2Y2E5MGEzMjM0NGY2Zjc0ZmY2NDBh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fb0d2575bfb577e6c66ca90a32344f6f74ff640a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/fb0d2575bfb577e6c66ca90a32344f6f74ff640a",
      "tree": {
        "sha": "13338ae387bf7ed543ee63e5b94a240e6ca8695e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/13338ae387bf7ed543ee63e5b94a240e6ca8695e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/01bf7ee3d263be099ba53fb9f6635a9775e45d88",
          "sha": "01bf7ee3d263be099ba53fb9f6635a9775e45d88",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/01bf7ee3d263be099ba53fb9f6635a9775e45d88"
        }
      ],
      "message": "Handle reconciliation support announcement\n\nOnce we receive a message from a peer signalling\nreconciliation support, we initialize the data structures\nrequired to perform reconciliations. If we are planning to\ninitiate reconciliations with this peer (if it's an outbound connection),\nadd this peer to the reconciliation queue.",
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2021-02-11T16:59:09Z"
      },
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2020-11-12T07:25:56Z"
      },
      "sha": "fb0d2575bfb577e6c66ca90a32344f6f74ff640a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NmVlM2M2MjM1ODQyZWZiMjNkZDUyZWY1OWQzZWZiZjQ5MWJlNmIy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/86ee3c6235842efb23dd52ef59d3efbf491be6b2",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/86ee3c6235842efb23dd52ef59d3efbf491be6b2",
      "tree": {
        "sha": "7e0bfae107b69ff6c3ab2d7074cea9e0724dea87",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7e0bfae107b69ff6c3ab2d7074cea9e0724dea87"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fb0d2575bfb577e6c66ca90a32344f6f74ff640a",
          "sha": "fb0d2575bfb577e6c66ca90a32344f6f74ff640a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/fb0d2575bfb577e6c66ca90a32344f6f74ff640a"
        }
      ],
      "message": "Limit transaction flooding\n\nSee how many flooding and how many reconciling\noutbound peers we have, which is useful to see whether our new\npeer should be using flooding or reconciliation.\n\nIt helps to save bandwidth and presumably reduces privacy leak.",
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2021-02-11T17:01:29Z"
      },
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2020-11-09T08:22:23Z"
      },
      "sha": "86ee3c6235842efb23dd52ef59d3efbf491be6b2"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZmE0ZjM1OWRjZDAxM2I2YTEzZDk1MTE0NmFmNDk4N2MyZjdiOGMy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9fa4f359dcd013b6a13d951146af4987c2f7b8c2",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9fa4f359dcd013b6a13d951146af4987c2f7b8c2",
      "tree": {
        "sha": "d20b17c4f208efd3a532d125ea036f97a456884f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d20b17c4f208efd3a532d125ea036f97a456884f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/86ee3c6235842efb23dd52ef59d3efbf491be6b2",
          "sha": "86ee3c6235842efb23dd52ef59d3efbf491be6b2",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/86ee3c6235842efb23dd52ef59d3efbf491be6b2"
        }
      ],
      "message": "Remove node from reconciliation queue when disconnecting",
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2021-02-11T17:01:31Z"
      },
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2020-04-27T01:28:16Z"
      },
      "sha": "9fa4f359dcd013b6a13d951146af4987c2f7b8c2"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxM2Y5NTNhNzI5ZWZkZmM5NjdmYmI3Zjg5Zjc2NDkxYWU5OWY4ZTFl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/13f953a729efdfc967fbb7f89f76491ae99f8e1e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/13f953a729efdfc967fbb7f89f76491ae99f8e1e",
      "tree": {
        "sha": "4c74c15621cb362c6c8e812aa617d3cd7de167a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4c74c15621cb362c6c8e812aa617d3cd7de167a1"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9fa4f359dcd013b6a13d951146af4987c2f7b8c2",
          "sha": "9fa4f359dcd013b6a13d951146af4987c2f7b8c2",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9fa4f359dcd013b6a13d951146af4987c2f7b8c2"
        }
      ],
      "message": "Add a function to announce transactions after reconciliation\n\nHave a separate function to announce transactions to a peer (via INVs)\nconsidering INV message limitations.",
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2021-02-11T17:02:08Z"
      },
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2020-11-09T11:24:57Z"
      },
      "sha": "13f953a729efdfc967fbb7f89f76491ae99f8e1e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMDNkZmFkYWE0NjFmNTA1OWVjYWNiYTg4ZTIwZjNjODQxNDAyM2Ji",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f03dfadaa461f5059ecacba88e20f3c8414023bb",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f03dfadaa461f5059ecacba88e20f3c8414023bb",
      "tree": {
        "sha": "3dea7d8ad7300dfd4e16121bdf2b86a773a8e5e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3dea7d8ad7300dfd4e16121bdf2b86a773a8e5e7"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/13f953a729efdfc967fbb7f89f76491ae99f8e1e",
          "sha": "13f953a729efdfc967fbb7f89f76491ae99f8e1e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/13f953a729efdfc967fbb7f89f76491ae99f8e1e"
        }
      ],
      "message": "Prepare to distinguish transactions to flood and to reconcile\n\nWe need assign and keep track of the way we're going to relay a transaction\nbased on the connection type the transaction arrived from, to\nenable transaction reconciliation protocol.",
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2021-02-11T17:05:46Z"
      },
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2021-01-19T10:13:15Z"
      },
      "sha": "f03dfadaa461f5059ecacba88e20f3c8414023bb"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4327796215,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDMyNzc5NjIxNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4327796215",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-13T13:54:26Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOGViNzczNzIwMjAzZWY1ZDdlNmZhOTJmY2FjYWJkODUyMWM2YjMw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f8eb773720203ef5d7e6fa92fcacabd8521c6b30",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f8eb773720203ef5d7e6fa92fcacabd8521c6b30",
      "tree": {
        "sha": "07b70cdab1076fe67bab4d19cba83a0ddd96ecfe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/07b70cdab1076fe67bab4d19cba83a0ddd96ecfe"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f03dfadaa461f5059ecacba88e20f3c8414023bb",
          "sha": "f03dfadaa461f5059ecacba88e20f3c8414023bb",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f03dfadaa461f5059ecacba88e20f3c8414023bb"
        }
      ],
      "message": "Distinguish transactions to flood and to reconcile\n\nFlooding and reconciliation are two different ways to announce\ntransactions to the peers.\nFor transactions received from inbound links, use flooding to enable\na rapid relay across the reachable nodes.\n\nUse reconciliation (add transactions to the reconciliation sets) for\nall transactions which were received from outbound links to enable\nan slower but more efficient relay to unreachable nodes.",
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2021-02-13T14:11:58Z"
      },
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2020-11-09T12:43:05Z"
      },
      "sha": "f8eb773720203ef5d7e6fa92fcacabd8521c6b30"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYmI3NzFiMzNiM2RiMDI5ZDZkNDZjZGI4YWMzNmU5YTE5OGZhODdi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bbb771b33b3db029d6d46cdb8ac36e9a198fa87b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/bbb771b33b3db029d6d46cdb8ac36e9a198fa87b",
      "tree": {
        "sha": "bc7ed1341621ec45c8dca855b2014eb3f8239a17",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bc7ed1341621ec45c8dca855b2014eb3f8239a17"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f8eb773720203ef5d7e6fa92fcacabd8521c6b30",
          "sha": "f8eb773720203ef5d7e6fa92fcacabd8521c6b30",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f8eb773720203ef5d7e6fa92fcacabd8521c6b30"
        }
      ],
      "message": "Reduce tx broadcast interval\n\nSince reconciliation is naturally slower than flooding, and also\nsince we limit the flooding aspect, we should reduce the intervals\nbetween broadcasts (flooding out or adding to reconciliation sets).\nOtherwise, transaction relay will be too slow\n(and probably less inefficient).\n\nNote that for privacy reasons the ratio between inbound and outbound\ndelays matter much more than the actual delays. That ratio is preserved\nhere, so it is not a privacy degradation.",
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2021-02-13T14:11:59Z"
      },
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2020-11-13T08:18:15Z"
      },
      "sha": "bbb771b33b3db029d6d46cdb8ac36e9a198fa87b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ODc3NjNlMzg0YzIzMTY0OWRlN2E3MmFkNTVmNjc1NDM1ZDI1ZmIx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/787763e384c231649de7a72ad55f675435d25fb1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/787763e384c231649de7a72ad55f675435d25fb1",
      "tree": {
        "sha": "85ab1744f9416100bc3cce0dbccc67300aea88d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/85ab1744f9416100bc3cce0dbccc67300aea88d5"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bbb771b33b3db029d6d46cdb8ac36e9a198fa87b",
          "sha": "bbb771b33b3db029d6d46cdb8ac36e9a198fa87b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/bbb771b33b3db029d6d46cdb8ac36e9a198fa87b"
        }
      ],
      "message": "Request tx reconciliation as scheduled\n\nIf the peer is next in the queue for reconciliation,\nand enough time is passed from the previous\nreconciliation, consider a peer for reconciliation.\n\nIf there is no pending reconciliation request to the peer,\nsend one, otherwise just move to the end of queue and\nupdate global next reconciliation request time.",
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2021-02-13T14:11:59Z"
      },
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2021-01-21T11:07:54Z"
      },
      "sha": "787763e384c231649de7a72ad55f675435d25fb1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOGU4Yzc3MjgxNjJkYzY5Mjk3ZTQ2ODE3MTZmMjdmYzkwNTRmOTQy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/28e8c7728162dc69297e4681716f27fc9054f942",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/28e8c7728162dc69297e4681716f27fc9054f942",
      "tree": {
        "sha": "f774c448e39fa004d95cc62c182aa812d573fb0d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f774c448e39fa004d95cc62c182aa812d573fb0d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/787763e384c231649de7a72ad55f675435d25fb1",
          "sha": "787763e384c231649de7a72ad55f675435d25fb1",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/787763e384c231649de7a72ad55f675435d25fb1"
        }
      ],
      "message": "Process incoming reconciliation request\n\nUpon receiving a reconciliation request, a node stores\nit and schedules a response.\nDo not respond to a request right away as it would enable\na DoS attack and allow monitoring of transaction a node has.\nInstead, respond to all reconciliation requests at a same time\nafter a small delay.",
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2021-02-13T14:11:59Z"
      },
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2021-02-12T17:04:28Z"
      },
      "sha": "28e8c7728162dc69297e4681716f27fc9054f942"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYTM4YTZmMTY5YWMyNTU5YjFmYjM2OTBhNmI1MDQzYjZhNWZkMjFh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/da38a6f169ac2559b1fb3690a6b5043b6a5fd21a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/da38a6f169ac2559b1fb3690a6b5043b6a5fd21a",
      "tree": {
        "sha": "1be0d19ed94f8d6da26d77b2b48092f12257da4a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1be0d19ed94f8d6da26d77b2b48092f12257da4a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/28e8c7728162dc69297e4681716f27fc9054f942",
          "sha": "28e8c7728162dc69297e4681716f27fc9054f942",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/28e8c7728162dc69297e4681716f27fc9054f942"
        }
      ],
      "message": "Add helper to compute reconciliation tx short id\n\nShort ids are used to compute reconciliation sketches.",
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2021-02-13T14:11:59Z"
      },
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2021-02-12T17:04:41Z"
      },
      "sha": "da38a6f169ac2559b1fb3690a6b5043b6a5fd21a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMThjOTllMzg3YWU1OTg0NTQ4MzlkMGMwMDlmMmZiYjgxMDYzM2Vh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/218c99e387ae598454839d0c009f2fbb810633ea",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/218c99e387ae598454839d0c009f2fbb810633ea",
      "tree": {
        "sha": "429dc8fee7ef1c3c60272436e76e411c5fba8b71",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/429dc8fee7ef1c3c60272436e76e411c5fba8b71"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/da38a6f169ac2559b1fb3690a6b5043b6a5fd21a",
          "sha": "da38a6f169ac2559b1fb3690a6b5043b6a5fd21a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/da38a6f169ac2559b1fb3690a6b5043b6a5fd21a"
        }
      ],
      "message": "Add helper to compute sketches for tx reconciliation\n\nSketch is a representation of list of transaction IDs,\nwhich enables reconciliation (an efficient sync of lists\nbetween peers).",
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2021-02-13T14:11:59Z"
      },
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2020-11-14T11:00:41Z"
      },
      "sha": "218c99e387ae598454839d0c009f2fbb810633ea"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYzkyYzE0YWU3YjFiOGM2YjU2MTY1ZWRlMmJmNWQ1NmUwNjYxZTNl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2c92c14ae7b1b8c6b56165ede2bf5d56e0661e3e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2c92c14ae7b1b8c6b56165ede2bf5d56e0661e3e",
      "tree": {
        "sha": "1c7dfb9166ab3918a8ac892a59d57defc4f81f69",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1c7dfb9166ab3918a8ac892a59d57defc4f81f69"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/218c99e387ae598454839d0c009f2fbb810633ea",
          "sha": "218c99e387ae598454839d0c009f2fbb810633ea",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/218c99e387ae598454839d0c009f2fbb810633ea"
        }
      ],
      "message": "Respond to a reconciliation request\n\nWhen the time comes, a node computes a sketch of the\nlocal transactions based on the parameters sent\nin the reconciliation request, and sends that sketch\nto the requestor. Clear local state.",
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2021-02-13T14:11:59Z"
      },
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2020-11-14T13:53:25Z"
      },
      "sha": "2c92c14ae7b1b8c6b56165ede2bf5d56e0661e3e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZGRlY2QzMTJjOTJmYjEyMTY5MmM0NGE2OTY2MzhmNWZhNTAxMDhj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3ddecd312c92fb121692c44a696638f5fa50108c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3ddecd312c92fb121692c44a696638f5fa50108c",
      "tree": {
        "sha": "882e48191843ce8f7d99b6c707b2024e045b1418",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/882e48191843ce8f7d99b6c707b2024e045b1418"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2c92c14ae7b1b8c6b56165ede2bf5d56e0661e3e",
          "sha": "2c92c14ae7b1b8c6b56165ede2bf5d56e0661e3e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2c92c14ae7b1b8c6b56165ede2bf5d56e0661e3e"
        }
      ],
      "message": "Add a finalize reconciliation function\n\nThis currently unused function is supposed to be used once\na reconciliation round is done. It cleans the state corresponding\nto the passed reconciliation.",
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2021-02-13T14:11:59Z"
      },
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2020-11-14T14:04:01Z"
      },
      "sha": "3ddecd312c92fb121692c44a696638f5fa50108c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMDVlZDNmNTFmZjc1MzNjYjg3NDBmOWY2OWQxMTUxNTY4ZTg5MTk5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b05ed3f51ff7533cb8740f9f69d1151568e89199",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b05ed3f51ff7533cb8740f9f69d1151568e89199",
      "tree": {
        "sha": "dfd877dcb034068b195287fcb9f13496c7604f2b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dfd877dcb034068b195287fcb9f13496c7604f2b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3ddecd312c92fb121692c44a696638f5fa50108c",
          "sha": "3ddecd312c92fb121692c44a696638f5fa50108c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/3ddecd312c92fb121692c44a696638f5fa50108c"
        }
      ],
      "message": "Add a function to identify local/remote missing txs\n\nWhen the sketches from both sides are combined successfully,\nthe diff is produced. Then this diff can (together with the local txs)\nbe used to identified which transactions are missing locally and remotely.",
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2021-02-13T14:11:59Z"
      },
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2020-11-09T11:16:41Z"
      },
      "sha": "b05ed3f51ff7533cb8740f9f69d1151568e89199"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYjVmODJmNzljMTM2NjEzMDliNWQ4ZDQzMGUwZGEwYWUyNjk1ZWYy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1b5f82f79c13661309b5d8d430e0da0ae2695ef2",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1b5f82f79c13661309b5d8d430e0da0ae2695ef2",
      "tree": {
        "sha": "14fb4cbd51e5642fd5d0134468fab4c7f3862fc4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/14fb4cbd51e5642fd5d0134468fab4c7f3862fc4"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b05ed3f51ff7533cb8740f9f69d1151568e89199",
          "sha": "b05ed3f51ff7533cb8740f9f69d1151568e89199",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b05ed3f51ff7533cb8740f9f69d1151568e89199"
        }
      ],
      "message": "Handle reconciliation sketch and successful decoding\n\nSend/request missing transactions, clear the state,\nand send a finalization message.",
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2021-02-13T14:11:59Z"
      },
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2020-11-19T22:10:41Z"
      },
      "sha": "1b5f82f79c13661309b5d8d430e0da0ae2695ef2"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMmRlZjJlOGRhMTkyNjhjZGUxMWI5YzU2MjJiMmNkNGE1NTRkOGIw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f2def2e8da19268cde11b9c5622b2cd4a554d8b0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f2def2e8da19268cde11b9c5622b2cd4a554d8b0",
      "tree": {
        "sha": "e1d9bcf00b39f0651499004afdb23871d25529fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e1d9bcf00b39f0651499004afdb23871d25529fa"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1b5f82f79c13661309b5d8d430e0da0ae2695ef2",
          "sha": "1b5f82f79c13661309b5d8d430e0da0ae2695ef2",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1b5f82f79c13661309b5d8d430e0da0ae2695ef2"
        }
      ],
      "message": "Request extension if decoding failed\n\nIf after decoding a reconciliation sketch it turned out\nto be insufficient to find set difference, request extension.\nStore the initial sketches so that we are able to process\nextension sketch.",
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2021-02-13T14:12:00Z"
      },
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2020-11-19T22:25:23Z"
      },
      "sha": "f2def2e8da19268cde11b9c5622b2cd4a554d8b0"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ODE2MDlhNTA4YTIzYzc0YTM1ZmI2YzFiM2VkYjYwM2RkNTJmOThk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/681609a508a23c74a35fb6c1b3edb603dd52f98d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/681609a508a23c74a35fb6c1b3edb603dd52f98d",
      "tree": {
        "sha": "589e74e5241a1b7a7a0170cc431b6e1ad01c0557",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/589e74e5241a1b7a7a0170cc431b6e1ad01c0557"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f2def2e8da19268cde11b9c5622b2cd4a554d8b0",
          "sha": "f2def2e8da19268cde11b9c5622b2cd4a554d8b0",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f2def2e8da19268cde11b9c5622b2cd4a554d8b0"
        }
      ],
      "message": "Handle reconciliation extension request\n\nIf peer failed to reconcile based on our initial response sketch,\nthey will ask us for a sketch extension. Store this request to respond later.",
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2021-02-13T14:12:00Z"
      },
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2020-11-14T14:59:39Z"
      },
      "sha": "681609a508a23c74a35fb6c1b3edb603dd52f98d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkN2VlODg5NjhmYWQzMDFhM2QwOWI0NjNkN2EyMzMxNjA2YjNhODQ3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d7ee88968fad301a3d09b463d7a2331606b3a847",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d7ee88968fad301a3d09b463d7a2331606b3a847",
      "tree": {
        "sha": "0cf7c4a35a6032abc382ea66ff4831dd33d71df4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0cf7c4a35a6032abc382ea66ff4831dd33d71df4"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/681609a508a23c74a35fb6c1b3edb603dd52f98d",
          "sha": "681609a508a23c74a35fb6c1b3edb603dd52f98d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/681609a508a23c74a35fb6c1b3edb603dd52f98d"
        }
      ],
      "message": "Prepare to responding to extension requests\n\nAdd 2 variables tracking reconciliation state:\n(1) recon set snapshot and (2) capacity snapshot.\n(1) is used to store transactions arrived after we sent out\nan initial sketch, but before the reconciliation is over, since\nthese transactions should not go into a sketch extension.\n(2) is used to set the capacity of the extended sketch because\nit provides good estimation (efficiency/failure tradeoff).",
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2021-02-13T14:12:00Z"
      },
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2020-11-14T20:41:23Z"
      },
      "sha": "d7ee88968fad301a3d09b463d7a2331606b3a847"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZGY5OTVlNmQwMzRlZTdiNmVjNWJkMWJiNzYzMzk2Nzg0NjU4ZTJl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3df995e6d034ee7b6ec5bd1bb763396784658e2e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3df995e6d034ee7b6ec5bd1bb763396784658e2e",
      "tree": {
        "sha": "9df1c99220f075aab6e6103bfad1023fd10073ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9df1c99220f075aab6e6103bfad1023fd10073ec"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d7ee88968fad301a3d09b463d7a2331606b3a847",
          "sha": "d7ee88968fad301a3d09b463d7a2331606b3a847",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d7ee88968fad301a3d09b463d7a2331606b3a847"
        }
      ],
      "message": "Respond to an extension request\n\nCompute a sketch with extra capacity and send\nthose extra syndromes to the peer.\nIt is safe to respond to an extension request without a delay\nbecause these requests are already limited by initial requests.",
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2021-02-13T14:12:00Z"
      },
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2020-11-19T12:36:52Z"
      },
      "sha": "3df995e6d034ee7b6ec5bd1bb763396784658e2e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NGJjNDMwMmNhZDJkZjczNmI3N2M0MTg3Zjc0MGI0ZjY2MWUxNDM2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/54bc4302cad2df736b77c4187f740b4f661e1436",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/54bc4302cad2df736b77c4187f740b4f661e1436",
      "tree": {
        "sha": "be4a65721f8644d770a0f0299514bfa1b627c743",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/be4a65721f8644d770a0f0299514bfa1b627c743"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3df995e6d034ee7b6ec5bd1bb763396784658e2e",
          "sha": "3df995e6d034ee7b6ec5bd1bb763396784658e2e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/3df995e6d034ee7b6ec5bd1bb763396784658e2e"
        }
      ],
      "message": "Handle extension sketch\n\nIf a peer responded to our request with a sketch extension,\nattempt to decode it to find missing transactions by combining\nit with the initial sketch.\nIf success, share/request missing transactions.\nIf failure, send all the transactions we had for the peer.",
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2021-02-13T14:12:00Z"
      },
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2020-11-14T10:51:09Z"
      },
      "sha": "54bc4302cad2df736b77c4187f740b4f661e1436"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOTBiYTcwYjY5ZTBjOGU3MGRiNzgwNzgzYTc3MzMyNWQ3N2Q3YmUw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c90ba70b69e0c8e70db780783a773325d77d7be0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c90ba70b69e0c8e70db780783a773325d77d7be0",
      "tree": {
        "sha": "eeb4510f9c359c32d298483012835a65e7d74515",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eeb4510f9c359c32d298483012835a65e7d74515"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/54bc4302cad2df736b77c4187f740b4f661e1436",
          "sha": "54bc4302cad2df736b77c4187f740b4f661e1436",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/54bc4302cad2df736b77c4187f740b4f661e1436"
        }
      ],
      "message": "Add a function to get wtxids by shortids\n\nAt the end of a reconciliation round, a peer may ask us\nfor transactions by their short id. Add a function for a local\nlookup short_id->wtxid.",
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2021-02-13T14:12:00Z"
      },
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2021-01-21T08:23:04Z"
      },
      "sha": "c90ba70b69e0c8e70db780783a773325d77d7be0"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MzY1NjhmOWQzM2M0MjBkNTNjNGY5MDRkZWUwZDc4NWE1Nzg1YzEz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/836568f9d33c420d53c4f904dee0d785a5785c13",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/836568f9d33c420d53c4f904dee0d785a5785c13",
      "tree": {
        "sha": "8bf9ad4f478e701ab1382a174a4135858a1a041f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8bf9ad4f478e701ab1382a174a4135858a1a041f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c90ba70b69e0c8e70db780783a773325d77d7be0",
          "sha": "c90ba70b69e0c8e70db780783a773325d77d7be0",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c90ba70b69e0c8e70db780783a773325d77d7be0"
        }
      ],
      "message": "Handle reconciliation finalization message\n\nOnce a peer tells us reconciliation is done, we should behave as follows:\n- if it was successful, just respond them with the transactions they asked\n  by short ID.\n- if it was a full failure, respond with all local transactions from the reconciliation\n  set snapshot\n- if it was a partial failure (only low or high part was failed after a bisection),\n  respond with all transactions which were asked for by short id,\n  and announce local txs which belong to the failed chunk.",
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2021-02-13T14:12:00Z"
      },
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2020-11-09T11:43:48Z"
      },
      "sha": "836568f9d33c420d53c4f904dee0d785a5785c13"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNjI3YTA2MjAwYjFkYmUzMmNiOTljNzBiOTZjMDI0MWY4NjBkN2I1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3627a06200b1dbe32cb99c70b96c0241f860d7b5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3627a06200b1dbe32cb99c70b96c0241f860d7b5",
      "tree": {
        "sha": "4b9b471dda429a3fb6ffb574f9354a9a15fb387a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4b9b471dda429a3fb6ffb574f9354a9a15fb387a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/836568f9d33c420d53c4f904dee0d785a5785c13",
          "sha": "836568f9d33c420d53c4f904dee0d785a5785c13",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/836568f9d33c420d53c4f904dee0d785a5785c13"
        }
      ],
      "message": "tests: support (inbound) connecting to mininode",
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2021-02-13T14:12:00Z"
      },
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2020-07-24T13:16:48Z"
      },
      "sha": "3627a06200b1dbe32cb99c70b96c0241f860d7b5"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNTM4OWMyMGI4ZjQyNzgzNTFjNDJmZjliNmNkN2Y3MjNjOTA2NjAz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "tree": {
        "sha": "17147a95084418b1ed324d3fed35feca0ce03a94",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/17147a95084418b1ed324d3fed35feca0ce03a94"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3627a06200b1dbe32cb99c70b96c0241f860d7b5",
          "sha": "3627a06200b1dbe32cb99c70b96c0241f860d7b5",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/3627a06200b1dbe32cb99c70b96c0241f860d7b5"
        }
      ],
      "message": "Add tests for set reconciliation",
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2021-02-13T14:12:00Z"
      },
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2020-03-05T21:19:37Z"
      },
      "sha": "c5389c20b8f4278351c42ff9b6cd7f723c906603"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4327814431,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDMyNzgxNDQzMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4327814431",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-13T14:19:06Z"
    },
    {
      "event": "reviewed",
      "id": 590017307,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkwMDE3MzA3",
      "url": null,
      "actor": null,
      "commit_id": "01bf7ee3d263be099ba53fb9f6635a9775e45d88",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "making my way through the first couple commits ",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#pullrequestreview-590017307",
      "submitted_at": "2021-02-14T06:43:16Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
    },
    {
      "event": "commented",
      "id": 788906220,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc4ODkwNjIyMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/788906220",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-02T13:24:42Z",
      "updated_at": "2021-03-02T13:24:42Z",
      "author_association": "MEMBER",
      "body": "An update here.\r\nBased on some suggestions, I moved reconciliation to a separate module.\r\nI suggest doing some initial review of that in [the PR in my repo](https://github.com/naumenkogs/bitcoin/pull/2). Could you folks help to evaluate my new approach? @jnewbery @amitiuttarwar @sipa @jonatack (everyone else is welcome too)\r\n\r\nThis way we could save the review efforts of those contributors who are less concerned about the modularity? First do that, then proceed to other questions.\r\n\r\nOnce that is done, I'll get back here and welcome full review again.",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#issuecomment-788906220",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18261"
    },
    {
      "event": "mentioned",
      "id": 4395812816,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDM5NTgxMjgxNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4395812816",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-02T13:24:42Z"
    },
    {
      "event": "subscribed",
      "id": 4395812822,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQzOTU4MTI4MjI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4395812822",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-02T13:24:42Z"
    },
    {
      "event": "mentioned",
      "id": 4395812831,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDM5NTgxMjgzMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4395812831",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-02T13:24:42Z"
    },
    {
      "event": "subscribed",
      "id": 4395812839,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQzOTU4MTI4Mzk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4395812839",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-02T13:24:42Z"
    },
    {
      "event": "mentioned",
      "id": 4395812848,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDM5NTgxMjg0OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4395812848",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-02T13:24:42Z"
    },
    {
      "event": "subscribed",
      "id": 4395812853,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQzOTU4MTI4NTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4395812853",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-02T13:24:42Z"
    },
    {
      "event": "mentioned",
      "id": 4395812865,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDM5NTgxMjg2NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4395812865",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-02T13:24:42Z"
    },
    {
      "event": "subscribed",
      "id": 4395812869,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQzOTU4MTI4Njk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4395812869",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-02T13:24:42Z"
    },
    {
      "event": "commented",
      "id": 793022594,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc5MzAyMjU5NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/793022594",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-08T19:42:15Z",
      "updated_at": "2021-03-08T19:42:15Z",
      "author_association": "CONTRIBUTOR",
      "body": "@naumenkogs I took a first look and I see that most of the comments I've left here are still applicable. I'm happy to do a deeper dive on the branch one you've addressed the outstanding comments.",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#issuecomment-793022594",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18261"
    },
    {
      "event": "mentioned",
      "id": 4423210890,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDQyMzIxMDg5MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4423210890",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-08T19:42:15Z"
    },
    {
      "event": "subscribed",
      "id": 4423210891,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ0MjMyMTA4OTE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4423210891",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-08T19:42:15Z"
    },
    {
      "event": "reviewed",
      "id": 610360092,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjEwMzYwMDky",
      "url": null,
      "actor": null,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#pullrequestreview-610360092",
      "submitted_at": "2021-03-12T00:39:58Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
    },
    {
      "event": "commented",
      "id": 805256489,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgwNTI1NjQ4OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/805256489",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-23T21:00:28Z",
      "updated_at": "2021-03-23T21:00:28Z",
      "author_association": "MEMBER",
      "body": "Closing in favor of #21515. I believe I addressed most of the comments from here.",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#issuecomment-805256489",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18261"
    },
    {
      "event": "closed",
      "id": 4498901885,
      "node_id": "MDExOkNsb3NlZEV2ZW50NDQ5ODkwMTg4NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4498901885",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-23T22:51:05Z"
    },
    {
      "event": "commented",
      "id": 808863278,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgwODg2MzI3OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/808863278",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-28T08:08:45Z",
      "updated_at": "2021-03-28T08:08:45Z",
      "author_association": "MEMBER",
      "body": "#21515 is ready for review now",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#issuecomment-808863278",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18261"
    },
    {
      "event": "locked",
      "id": 7199133092,
      "node_id": "LOE_lADOABII584iUOUdzwAAAAGtGg2k",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7199133092",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-16T17:22:24Z",
      "lock_reason": "resolved"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/387925726",
      "pull_request_review_id": 369111380,
      "id": 387925726,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkyNTcyNg==",
      "diff_hunk": "@@ -3258,6 +3403,331 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         return true;\n     }\n \n+    // Received from an inbound peer planning to reconcilie transactions with us, or\n+    // from an outgoing peer demonstrating readiness to do reconciliations.\n+    // If received from outgoing, adds the peer to the reconciliation queue.\n+    if (strCommand == NetMsgType::SENDRECON) {\n+        if (!pfrom->m_tx_relay) return true;\n+        if(pfrom->m_recon_state != nullptr) return true; // Do not support reconciliation salt/version updates.\n+\n+        bool recon_sender, recon_responder;\n+        uint64_t remote_salt;\n+        uint32_t recon_version;\n+        vRecv >> recon_sender >> recon_responder >> recon_version >> remote_salt;\n+        if (recon_version != 1) return true;\n+\n+        // According to current erlay spec.\n+        if (recon_sender == recon_responder) return true;\n+\n+        if (pfrom->fInbound) {\n+            if (!recon_sender) return true;\n+            // Do not flood through inbound connections which support reconciliation to save bandwidth.\n+            pfrom->m_flood_to = false;\n+        } else {\n+            if (!recon_responder) return true;\n+            uint64_t outbound_flooding = connman->GetOutboundCountByTxRelayType(true);\n+            if (outbound_flooding > MAX_OUTBOUND_FLOOD_TO)\n+                pfrom->m_flood_to = false;\n+        }\n+\n+        pfrom->m_recon_state = MakeUnique<CNode::ReconState>();\n+        pfrom->m_recon_state->sender = recon_sender;\n+        pfrom->m_recon_state->responder = recon_responder;\n+        pfrom->m_recon_state->local_q = DEFAULT_RECON_Q;\n+\n+        uint64_t local_salt = connman->m_local_recon_salt;\n+\n+        std::string salt1, salt2;\n+        if (remote_salt < local_salt) {\n+            salt1 = std::to_string(remote_salt);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 529,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "b93eb384cdaeaceaab89f855753bae6231a8ce77",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm afraid `std::to_string` is locale dependent.\r\n\r\n---\r\n\r\nFor those interested in permanently killing the locale dependency bug class, consider reviewing:\r\n* #18124 – init: Clarify C and C++ locale assumptions. Add locale sanity checks to verify assumptions at run-time\r\n* #18126 – tests: Add fuzzing harness testing the locale independence of the `strencodings.h` functions\r\n* #18147 – qt: Kill the locale dependency bug class by not allowing Qt to mess with `LC_NUMERIC`\r\n",
      "created_at": "2020-03-04T20:49:13Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r387925726",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/387925726"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3440,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/412301986",
      "pull_request_review_id": 397465590,
      "id": 412301986,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMwMTk4Ng==",
      "diff_hunk": "@@ -628,6 +628,135 @@ int CNode::GetSendVersion() const\n     return nSendVersion;\n }\n \n+void CNode::FinalizeReconciliation(bool clear_local_set, LocalQAction action, uint8_t actual_local_missing, uint8_t actual_remote_missing)\n+{\n+    // According to the erlay spec, reconciliation is initiated by inbound peers.\n+    if (m_recon_state->sender) {\n+        assert(m_recon_state->incoming_recon != CNode::ReconPhase::NONE);\n+        m_recon_state->incoming_recon = CNode::ReconPhase::NONE;\n+    } else {\n+        // When reconciliation initialized by us is done, update local q for future reconciliations.\n+        if (action == LocalQAction::Q_RECOMPUTE) {\n+            assert(m_recon_state->outgoing_recon != CNode::ReconPhase::NONE);\n+            uint8_t local_set_size;\n+            if (m_recon_state->outgoing_recon == CNode::ReconPhase::BISEC_REQUESTED) {\n+                local_set_size = m_recon_state->local_set_snapshot.size();\n+            } else {\n+                local_set_size = m_recon_state->local_set.size();\n+            }\n+            uint8_t remote_set_size = local_set_size + actual_local_missing - actual_remote_missing;\n+            uint8_t set_size_diff = std::abs(local_set_size - remote_set_size);\n+            uint8_t min_size = std::min(local_set_size, remote_set_size);\n+            uint8_t actual_difference = actual_local_missing + actual_remote_missing;\n+            if (min_size != 0)\n+                m_recon_state->local_q = double(actual_difference - set_size_diff) / min_size;\n+        } else if (action == LocalQAction::Q_INCREASE) {\n+            m_recon_state->local_q *= 1.1;\n+        } else if (action == LocalQAction::Q_SET_DEFAULT) {\n+            m_recon_state->local_q = DEFAULT_RECON_Q;\n+        }\n+        m_recon_state->outgoing_recon = CNode::ReconPhase::NONE;\n+    }\n+    if (clear_local_set) m_recon_state->local_set.clear();\n+\n+    m_recon_state->local_short_id_mapping.clear();\n+    // This is currently belt-and-suspenders, as the code should work even without these calls.\n+    m_recon_state->local_set_snapshot.clear();\n+    m_recon_state->capacity_snapshot = 0;\n+    m_recon_state->remote_sketch_snapshot = nullptr;\n+    m_recon_state->local_sketch_snapshot = nullptr;\n+}\n+\n+uint32_t CNode::ComputeShortID(uint256 wtxid)\n+{\n+    uint64_t k0 = m_recon_state->salt.GetUint64(0);\n+    uint64_t k1 = m_recon_state->salt.GetUint64(1);\n+    uint64_t s = SipHashUint256(k0, k1, wtxid);\n+    uint32_t short_txid = 1 + (s & 0xFFFFFFFF);\n+    m_recon_state->local_short_id_mapping.insert(std::pair<uint32_t, uint256>(short_txid, wtxid));\n+    return short_txid;\n+}\n+\n+minisketch* CNode::ComputeSketch(bool use_own_q, BisectionChunk bisection_chunk, uint16_t capacity)\n+{\n+    std::vector<uint32_t> short_ids;\n+    if (m_recon_state->incoming_recon == ReconPhase::BISEC_REQUESTED || m_recon_state->outgoing_recon == ReconPhase::BISEC_REQUESTED) {\n+        // During bisection, all the relevant transactions are stored in the snapshot.\n+        // Original set is used to not miss transactions received during the reconciliation elsewhere.\n+        if (m_recon_state->local_set_snapshot.size() == 0) {\n+            return nullptr;\n+        }\n+        for (uint256 wtxid : m_recon_state->local_set_snapshot) {\n+            short_ids.push_back(ComputeShortID(wtxid));\n+        }\n+\n+        std::vector<uint32_t> bisec_short_ids;\n+        for (uint32_t short_id : short_ids) {\n+            if (bisection_chunk == BISECTION_LOW) {\n+                if (short_id <= BISECTION_MEDIAN) {\n+                    bisec_short_ids.push_back(short_id);\n+                }\n+            } else {\n+                if (short_id > BISECTION_MEDIAN) {\n+                    bisec_short_ids.push_back(short_id);\n+                }\n+            }\n+        }\n+        short_ids = bisec_short_ids;\n+        // For bisection, use capacity used in the initial reconciliation.\n+        capacity = m_recon_state->capacity_snapshot;\n+    } else {\n+        for (uint256 wtxid : m_recon_state->local_set) {\n+            short_ids.push_back(ComputeShortID(wtxid));\n+        }\n+\n+        if (capacity == 0) {\n+            // Estimate locally, as requested by the calling function.\n+            int set_size_diff = m_recon_state->local_set.size() - m_recon_state->remote_set_size;\n+            double q = use_own_q ? m_recon_state->local_q : m_recon_state->remote_q;\n+            capacity = 1 + q * fmin(m_recon_state->local_set.size(), m_recon_state->remote_set_size) +\n+                       abs(set_size_diff);\n+        }\n+        capacity = std::min(capacity, MAX_SKETCH_CAPACITY);\n+        // If bisection is required, we will use this capacity from the initial reconciliation.\n+        m_recon_state->capacity_snapshot = capacity;\n+    }\n+    if (short_ids.size() == 0) return nullptr;\n+    minisketch* sketch = minisketch_create(RECON_FIELD_SIZE, 0, capacity);\n+    for (uint32_t short_id : short_ids) {\n+        minisketch_add_uint64(sketch, short_id);\n+    }\n+    return sketch;\n+}\n+\n+std::vector<uint256> CNode::GetRelevantIDsFromShortIDs(uint64_t diff[], uint8_t diff_size, std::vector<uint32_t>& local_missing, CConnman* connman)\n+{\n+    std::vector<uint256> remote_missing;\n+    for (int i = 0; i < diff_size; ++i) {\n+        auto local_tx = m_recon_state->local_short_id_mapping.find(diff[i]);\n+        if (local_tx != m_recon_state->local_short_id_mapping.end()) {\n+            remote_missing.push_back(local_tx->second);\n+        } else {\n+            local_missing.push_back(diff[i]);\n+        }\n+    }\n+    return remote_missing;\n+}\n+\n+std::vector<uint256> CNode::GetWTXIDsFromShortIDs(const std::vector<uint32_t> remote_missing_short_ids, CConnman* connman)\n+{\n+    std::vector<uint256> remote_missing;\n+    for (size_t i = 0; i < remote_missing_short_ids.size(); ++i) {\n+        auto local_tx = m_recon_state->local_short_id_mapping.find(remote_missing_short_ids[i]);\n+        if (local_tx == m_recon_state->local_short_id_mapping.end()) {\n+            LogPrint(BCLog::NET, \"Unknown transaction requested by short id=%d by peer=%d\\n\", remote_missing_short_ids[i], GetId());\n+        }\n+        remote_missing.push_back(local_tx->second);",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 127,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "1b695eabc2083384596e146ff3da5846be3058e0",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think that this is UB (if no wtxid for a shortid is found, there is a LogPrint, but the item is still dereferenced).\r\nWhile this should explain the strange wtxids with lots of 0s, it doesn't explain the why no mapping is found to begin with.",
      "created_at": "2020-04-21T16:19:22Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r412301986",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/412301986"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 760,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/412342381",
      "pull_request_review_id": 397511447,
      "id": 412342381,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM0MjM4MQ==",
      "diff_hunk": "@@ -628,6 +628,135 @@ int CNode::GetSendVersion() const\n     return nSendVersion;\n }\n \n+void CNode::FinalizeReconciliation(bool clear_local_set, LocalQAction action, uint8_t actual_local_missing, uint8_t actual_remote_missing)\n+{\n+    // According to the erlay spec, reconciliation is initiated by inbound peers.\n+    if (m_recon_state->sender) {\n+        assert(m_recon_state->incoming_recon != CNode::ReconPhase::NONE);\n+        m_recon_state->incoming_recon = CNode::ReconPhase::NONE;\n+    } else {\n+        // When reconciliation initialized by us is done, update local q for future reconciliations.\n+        if (action == LocalQAction::Q_RECOMPUTE) {\n+            assert(m_recon_state->outgoing_recon != CNode::ReconPhase::NONE);\n+            uint8_t local_set_size;\n+            if (m_recon_state->outgoing_recon == CNode::ReconPhase::BISEC_REQUESTED) {\n+                local_set_size = m_recon_state->local_set_snapshot.size();\n+            } else {\n+                local_set_size = m_recon_state->local_set.size();\n+            }\n+            uint8_t remote_set_size = local_set_size + actual_local_missing - actual_remote_missing;\n+            uint8_t set_size_diff = std::abs(local_set_size - remote_set_size);\n+            uint8_t min_size = std::min(local_set_size, remote_set_size);\n+            uint8_t actual_difference = actual_local_missing + actual_remote_missing;\n+            if (min_size != 0)\n+                m_recon_state->local_q = double(actual_difference - set_size_diff) / min_size;\n+        } else if (action == LocalQAction::Q_INCREASE) {\n+            m_recon_state->local_q *= 1.1;\n+        } else if (action == LocalQAction::Q_SET_DEFAULT) {\n+            m_recon_state->local_q = DEFAULT_RECON_Q;\n+        }\n+        m_recon_state->outgoing_recon = CNode::ReconPhase::NONE;\n+    }\n+    if (clear_local_set) m_recon_state->local_set.clear();\n+\n+    m_recon_state->local_short_id_mapping.clear();\n+    // This is currently belt-and-suspenders, as the code should work even without these calls.\n+    m_recon_state->local_set_snapshot.clear();\n+    m_recon_state->capacity_snapshot = 0;\n+    m_recon_state->remote_sketch_snapshot = nullptr;\n+    m_recon_state->local_sketch_snapshot = nullptr;\n+}\n+\n+uint32_t CNode::ComputeShortID(uint256 wtxid)\n+{\n+    uint64_t k0 = m_recon_state->salt.GetUint64(0);\n+    uint64_t k1 = m_recon_state->salt.GetUint64(1);\n+    uint64_t s = SipHashUint256(k0, k1, wtxid);\n+    uint32_t short_txid = 1 + (s & 0xFFFFFFFF);\n+    m_recon_state->local_short_id_mapping.insert(std::pair<uint32_t, uint256>(short_txid, wtxid));\n+    return short_txid;\n+}\n+\n+minisketch* CNode::ComputeSketch(bool use_own_q, BisectionChunk bisection_chunk, uint16_t capacity)\n+{\n+    std::vector<uint32_t> short_ids;\n+    if (m_recon_state->incoming_recon == ReconPhase::BISEC_REQUESTED || m_recon_state->outgoing_recon == ReconPhase::BISEC_REQUESTED) {\n+        // During bisection, all the relevant transactions are stored in the snapshot.\n+        // Original set is used to not miss transactions received during the reconciliation elsewhere.\n+        if (m_recon_state->local_set_snapshot.size() == 0) {\n+            return nullptr;\n+        }\n+        for (uint256 wtxid : m_recon_state->local_set_snapshot) {\n+            short_ids.push_back(ComputeShortID(wtxid));\n+        }\n+\n+        std::vector<uint32_t> bisec_short_ids;\n+        for (uint32_t short_id : short_ids) {\n+            if (bisection_chunk == BISECTION_LOW) {\n+                if (short_id <= BISECTION_MEDIAN) {\n+                    bisec_short_ids.push_back(short_id);\n+                }\n+            } else {\n+                if (short_id > BISECTION_MEDIAN) {\n+                    bisec_short_ids.push_back(short_id);\n+                }\n+            }\n+        }\n+        short_ids = bisec_short_ids;\n+        // For bisection, use capacity used in the initial reconciliation.\n+        capacity = m_recon_state->capacity_snapshot;\n+    } else {\n+        for (uint256 wtxid : m_recon_state->local_set) {\n+            short_ids.push_back(ComputeShortID(wtxid));\n+        }\n+\n+        if (capacity == 0) {\n+            // Estimate locally, as requested by the calling function.\n+            int set_size_diff = m_recon_state->local_set.size() - m_recon_state->remote_set_size;\n+            double q = use_own_q ? m_recon_state->local_q : m_recon_state->remote_q;\n+            capacity = 1 + q * fmin(m_recon_state->local_set.size(), m_recon_state->remote_set_size) +\n+                       abs(set_size_diff);\n+        }\n+        capacity = std::min(capacity, MAX_SKETCH_CAPACITY);\n+        // If bisection is required, we will use this capacity from the initial reconciliation.\n+        m_recon_state->capacity_snapshot = capacity;\n+    }\n+    if (short_ids.size() == 0) return nullptr;\n+    minisketch* sketch = minisketch_create(RECON_FIELD_SIZE, 0, capacity);\n+    for (uint32_t short_id : short_ids) {\n+        minisketch_add_uint64(sketch, short_id);\n+    }\n+    return sketch;\n+}\n+\n+std::vector<uint256> CNode::GetRelevantIDsFromShortIDs(uint64_t diff[], uint8_t diff_size, std::vector<uint32_t>& local_missing, CConnman* connman)\n+{\n+    std::vector<uint256> remote_missing;\n+    for (int i = 0; i < diff_size; ++i) {\n+        auto local_tx = m_recon_state->local_short_id_mapping.find(diff[i]);\n+        if (local_tx != m_recon_state->local_short_id_mapping.end()) {\n+            remote_missing.push_back(local_tx->second);\n+        } else {\n+            local_missing.push_back(diff[i]);\n+        }\n+    }\n+    return remote_missing;\n+}\n+\n+std::vector<uint256> CNode::GetWTXIDsFromShortIDs(const std::vector<uint32_t> remote_missing_short_ids, CConnman* connman)\n+{\n+    std::vector<uint256> remote_missing;\n+    for (size_t i = 0; i < remote_missing_short_ids.size(); ++i) {\n+        auto local_tx = m_recon_state->local_short_id_mapping.find(remote_missing_short_ids[i]);\n+        if (local_tx == m_recon_state->local_short_id_mapping.end()) {\n+            LogPrint(BCLog::NET, \"Unknown transaction requested by short id=%d by peer=%d\\n\", remote_missing_short_ids[i], GetId());\n+        }\n+        remote_missing.push_back(local_tx->second);",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 127,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "1b695eabc2083384596e146ff3da5846be3058e0",
      "in_reply_to_id": 412301986,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I found an issue, will commit the fix later today!\r\nBasically, sometimes reconcil. difference finding gives a false positive: it looks like a success, but some difference elements are missing.\r\nThis is just a natural property of math in minisketch. I'll submit a workaround.",
      "created_at": "2020-04-21T17:17:13Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r412342381",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/412342381"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 760,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/412382710",
      "pull_request_review_id": 397555862,
      "id": 412382710,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM4MjcxMA==",
      "diff_hunk": "@@ -628,6 +628,135 @@ int CNode::GetSendVersion() const\n     return nSendVersion;\n }\n \n+void CNode::FinalizeReconciliation(bool clear_local_set, LocalQAction action, uint8_t actual_local_missing, uint8_t actual_remote_missing)\n+{\n+    // According to the erlay spec, reconciliation is initiated by inbound peers.\n+    if (m_recon_state->sender) {\n+        assert(m_recon_state->incoming_recon != CNode::ReconPhase::NONE);\n+        m_recon_state->incoming_recon = CNode::ReconPhase::NONE;\n+    } else {\n+        // When reconciliation initialized by us is done, update local q for future reconciliations.\n+        if (action == LocalQAction::Q_RECOMPUTE) {\n+            assert(m_recon_state->outgoing_recon != CNode::ReconPhase::NONE);\n+            uint8_t local_set_size;\n+            if (m_recon_state->outgoing_recon == CNode::ReconPhase::BISEC_REQUESTED) {\n+                local_set_size = m_recon_state->local_set_snapshot.size();\n+            } else {\n+                local_set_size = m_recon_state->local_set.size();\n+            }\n+            uint8_t remote_set_size = local_set_size + actual_local_missing - actual_remote_missing;\n+            uint8_t set_size_diff = std::abs(local_set_size - remote_set_size);\n+            uint8_t min_size = std::min(local_set_size, remote_set_size);\n+            uint8_t actual_difference = actual_local_missing + actual_remote_missing;\n+            if (min_size != 0)\n+                m_recon_state->local_q = double(actual_difference - set_size_diff) / min_size;\n+        } else if (action == LocalQAction::Q_INCREASE) {\n+            m_recon_state->local_q *= 1.1;\n+        } else if (action == LocalQAction::Q_SET_DEFAULT) {\n+            m_recon_state->local_q = DEFAULT_RECON_Q;\n+        }\n+        m_recon_state->outgoing_recon = CNode::ReconPhase::NONE;\n+    }\n+    if (clear_local_set) m_recon_state->local_set.clear();\n+\n+    m_recon_state->local_short_id_mapping.clear();\n+    // This is currently belt-and-suspenders, as the code should work even without these calls.\n+    m_recon_state->local_set_snapshot.clear();\n+    m_recon_state->capacity_snapshot = 0;\n+    m_recon_state->remote_sketch_snapshot = nullptr;\n+    m_recon_state->local_sketch_snapshot = nullptr;\n+}\n+\n+uint32_t CNode::ComputeShortID(uint256 wtxid)\n+{\n+    uint64_t k0 = m_recon_state->salt.GetUint64(0);\n+    uint64_t k1 = m_recon_state->salt.GetUint64(1);\n+    uint64_t s = SipHashUint256(k0, k1, wtxid);\n+    uint32_t short_txid = 1 + (s & 0xFFFFFFFF);\n+    m_recon_state->local_short_id_mapping.insert(std::pair<uint32_t, uint256>(short_txid, wtxid));\n+    return short_txid;\n+}\n+\n+minisketch* CNode::ComputeSketch(bool use_own_q, BisectionChunk bisection_chunk, uint16_t capacity)\n+{\n+    std::vector<uint32_t> short_ids;\n+    if (m_recon_state->incoming_recon == ReconPhase::BISEC_REQUESTED || m_recon_state->outgoing_recon == ReconPhase::BISEC_REQUESTED) {\n+        // During bisection, all the relevant transactions are stored in the snapshot.\n+        // Original set is used to not miss transactions received during the reconciliation elsewhere.\n+        if (m_recon_state->local_set_snapshot.size() == 0) {\n+            return nullptr;\n+        }\n+        for (uint256 wtxid : m_recon_state->local_set_snapshot) {\n+            short_ids.push_back(ComputeShortID(wtxid));\n+        }\n+\n+        std::vector<uint32_t> bisec_short_ids;\n+        for (uint32_t short_id : short_ids) {\n+            if (bisection_chunk == BISECTION_LOW) {\n+                if (short_id <= BISECTION_MEDIAN) {\n+                    bisec_short_ids.push_back(short_id);\n+                }\n+            } else {\n+                if (short_id > BISECTION_MEDIAN) {\n+                    bisec_short_ids.push_back(short_id);\n+                }\n+            }\n+        }\n+        short_ids = bisec_short_ids;\n+        // For bisection, use capacity used in the initial reconciliation.\n+        capacity = m_recon_state->capacity_snapshot;\n+    } else {\n+        for (uint256 wtxid : m_recon_state->local_set) {\n+            short_ids.push_back(ComputeShortID(wtxid));\n+        }\n+\n+        if (capacity == 0) {\n+            // Estimate locally, as requested by the calling function.\n+            int set_size_diff = m_recon_state->local_set.size() - m_recon_state->remote_set_size;\n+            double q = use_own_q ? m_recon_state->local_q : m_recon_state->remote_q;\n+            capacity = 1 + q * fmin(m_recon_state->local_set.size(), m_recon_state->remote_set_size) +\n+                       abs(set_size_diff);\n+        }\n+        capacity = std::min(capacity, MAX_SKETCH_CAPACITY);\n+        // If bisection is required, we will use this capacity from the initial reconciliation.\n+        m_recon_state->capacity_snapshot = capacity;\n+    }\n+    if (short_ids.size() == 0) return nullptr;\n+    minisketch* sketch = minisketch_create(RECON_FIELD_SIZE, 0, capacity);\n+    for (uint32_t short_id : short_ids) {\n+        minisketch_add_uint64(sketch, short_id);\n+    }\n+    return sketch;\n+}\n+\n+std::vector<uint256> CNode::GetRelevantIDsFromShortIDs(uint64_t diff[], uint8_t diff_size, std::vector<uint32_t>& local_missing, CConnman* connman)\n+{\n+    std::vector<uint256> remote_missing;\n+    for (int i = 0; i < diff_size; ++i) {\n+        auto local_tx = m_recon_state->local_short_id_mapping.find(diff[i]);\n+        if (local_tx != m_recon_state->local_short_id_mapping.end()) {\n+            remote_missing.push_back(local_tx->second);\n+        } else {\n+            local_missing.push_back(diff[i]);\n+        }\n+    }\n+    return remote_missing;\n+}\n+\n+std::vector<uint256> CNode::GetWTXIDsFromShortIDs(const std::vector<uint32_t> remote_missing_short_ids, CConnman* connman)\n+{\n+    std::vector<uint256> remote_missing;\n+    for (size_t i = 0; i < remote_missing_short_ids.size(); ++i) {\n+        auto local_tx = m_recon_state->local_short_id_mapping.find(remote_missing_short_ids[i]);\n+        if (local_tx == m_recon_state->local_short_id_mapping.end()) {\n+            LogPrint(BCLog::NET, \"Unknown transaction requested by short id=%d by peer=%d\\n\", remote_missing_short_ids[i], GetId());\n+        }\n+        remote_missing.push_back(local_tx->second);",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 127,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "1b695eabc2083384596e146ff3da5846be3058e0",
      "in_reply_to_id": 412301986,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Still not sure why it would be UB here? It just accesses the existing array element..",
      "created_at": "2020-04-21T18:13:33Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r412382710",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/412382710"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 760,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/412384640",
      "pull_request_review_id": 397557979,
      "id": 412384640,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM4NDY0MA==",
      "diff_hunk": "@@ -628,6 +628,135 @@ int CNode::GetSendVersion() const\n     return nSendVersion;\n }\n \n+void CNode::FinalizeReconciliation(bool clear_local_set, LocalQAction action, uint8_t actual_local_missing, uint8_t actual_remote_missing)\n+{\n+    // According to the erlay spec, reconciliation is initiated by inbound peers.\n+    if (m_recon_state->sender) {\n+        assert(m_recon_state->incoming_recon != CNode::ReconPhase::NONE);\n+        m_recon_state->incoming_recon = CNode::ReconPhase::NONE;\n+    } else {\n+        // When reconciliation initialized by us is done, update local q for future reconciliations.\n+        if (action == LocalQAction::Q_RECOMPUTE) {\n+            assert(m_recon_state->outgoing_recon != CNode::ReconPhase::NONE);\n+            uint8_t local_set_size;\n+            if (m_recon_state->outgoing_recon == CNode::ReconPhase::BISEC_REQUESTED) {\n+                local_set_size = m_recon_state->local_set_snapshot.size();\n+            } else {\n+                local_set_size = m_recon_state->local_set.size();\n+            }\n+            uint8_t remote_set_size = local_set_size + actual_local_missing - actual_remote_missing;\n+            uint8_t set_size_diff = std::abs(local_set_size - remote_set_size);\n+            uint8_t min_size = std::min(local_set_size, remote_set_size);\n+            uint8_t actual_difference = actual_local_missing + actual_remote_missing;\n+            if (min_size != 0)\n+                m_recon_state->local_q = double(actual_difference - set_size_diff) / min_size;\n+        } else if (action == LocalQAction::Q_INCREASE) {\n+            m_recon_state->local_q *= 1.1;\n+        } else if (action == LocalQAction::Q_SET_DEFAULT) {\n+            m_recon_state->local_q = DEFAULT_RECON_Q;\n+        }\n+        m_recon_state->outgoing_recon = CNode::ReconPhase::NONE;\n+    }\n+    if (clear_local_set) m_recon_state->local_set.clear();\n+\n+    m_recon_state->local_short_id_mapping.clear();\n+    // This is currently belt-and-suspenders, as the code should work even without these calls.\n+    m_recon_state->local_set_snapshot.clear();\n+    m_recon_state->capacity_snapshot = 0;\n+    m_recon_state->remote_sketch_snapshot = nullptr;\n+    m_recon_state->local_sketch_snapshot = nullptr;\n+}\n+\n+uint32_t CNode::ComputeShortID(uint256 wtxid)\n+{\n+    uint64_t k0 = m_recon_state->salt.GetUint64(0);\n+    uint64_t k1 = m_recon_state->salt.GetUint64(1);\n+    uint64_t s = SipHashUint256(k0, k1, wtxid);\n+    uint32_t short_txid = 1 + (s & 0xFFFFFFFF);\n+    m_recon_state->local_short_id_mapping.insert(std::pair<uint32_t, uint256>(short_txid, wtxid));\n+    return short_txid;\n+}\n+\n+minisketch* CNode::ComputeSketch(bool use_own_q, BisectionChunk bisection_chunk, uint16_t capacity)\n+{\n+    std::vector<uint32_t> short_ids;\n+    if (m_recon_state->incoming_recon == ReconPhase::BISEC_REQUESTED || m_recon_state->outgoing_recon == ReconPhase::BISEC_REQUESTED) {\n+        // During bisection, all the relevant transactions are stored in the snapshot.\n+        // Original set is used to not miss transactions received during the reconciliation elsewhere.\n+        if (m_recon_state->local_set_snapshot.size() == 0) {\n+            return nullptr;\n+        }\n+        for (uint256 wtxid : m_recon_state->local_set_snapshot) {\n+            short_ids.push_back(ComputeShortID(wtxid));\n+        }\n+\n+        std::vector<uint32_t> bisec_short_ids;\n+        for (uint32_t short_id : short_ids) {\n+            if (bisection_chunk == BISECTION_LOW) {\n+                if (short_id <= BISECTION_MEDIAN) {\n+                    bisec_short_ids.push_back(short_id);\n+                }\n+            } else {\n+                if (short_id > BISECTION_MEDIAN) {\n+                    bisec_short_ids.push_back(short_id);\n+                }\n+            }\n+        }\n+        short_ids = bisec_short_ids;\n+        // For bisection, use capacity used in the initial reconciliation.\n+        capacity = m_recon_state->capacity_snapshot;\n+    } else {\n+        for (uint256 wtxid : m_recon_state->local_set) {\n+            short_ids.push_back(ComputeShortID(wtxid));\n+        }\n+\n+        if (capacity == 0) {\n+            // Estimate locally, as requested by the calling function.\n+            int set_size_diff = m_recon_state->local_set.size() - m_recon_state->remote_set_size;\n+            double q = use_own_q ? m_recon_state->local_q : m_recon_state->remote_q;\n+            capacity = 1 + q * fmin(m_recon_state->local_set.size(), m_recon_state->remote_set_size) +\n+                       abs(set_size_diff);\n+        }\n+        capacity = std::min(capacity, MAX_SKETCH_CAPACITY);\n+        // If bisection is required, we will use this capacity from the initial reconciliation.\n+        m_recon_state->capacity_snapshot = capacity;\n+    }\n+    if (short_ids.size() == 0) return nullptr;\n+    minisketch* sketch = minisketch_create(RECON_FIELD_SIZE, 0, capacity);\n+    for (uint32_t short_id : short_ids) {\n+        minisketch_add_uint64(sketch, short_id);\n+    }\n+    return sketch;\n+}\n+\n+std::vector<uint256> CNode::GetRelevantIDsFromShortIDs(uint64_t diff[], uint8_t diff_size, std::vector<uint32_t>& local_missing, CConnman* connman)\n+{\n+    std::vector<uint256> remote_missing;\n+    for (int i = 0; i < diff_size; ++i) {\n+        auto local_tx = m_recon_state->local_short_id_mapping.find(diff[i]);\n+        if (local_tx != m_recon_state->local_short_id_mapping.end()) {\n+            remote_missing.push_back(local_tx->second);\n+        } else {\n+            local_missing.push_back(diff[i]);\n+        }\n+    }\n+    return remote_missing;\n+}\n+\n+std::vector<uint256> CNode::GetWTXIDsFromShortIDs(const std::vector<uint32_t> remote_missing_short_ids, CConnman* connman)\n+{\n+    std::vector<uint256> remote_missing;\n+    for (size_t i = 0; i < remote_missing_short_ids.size(); ++i) {\n+        auto local_tx = m_recon_state->local_short_id_mapping.find(remote_missing_short_ids[i]);\n+        if (local_tx == m_recon_state->local_short_id_mapping.end()) {\n+            LogPrint(BCLog::NET, \"Unknown transaction requested by short id=%d by peer=%d\\n\", remote_missing_short_ids[i], GetId());\n+        }\n+        remote_missing.push_back(local_tx->second);",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 127,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "1b695eabc2083384596e146ff3da5846be3058e0",
      "in_reply_to_id": 412301986,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You can't dereference local_tx when it is .end().",
      "created_at": "2020-04-21T18:16:16Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r412384640",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/412384640"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 760,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/412389472",
      "pull_request_review_id": 397563221,
      "id": 412389472,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM4OTQ3Mg==",
      "diff_hunk": "@@ -628,6 +628,135 @@ int CNode::GetSendVersion() const\n     return nSendVersion;\n }\n \n+void CNode::FinalizeReconciliation(bool clear_local_set, LocalQAction action, uint8_t actual_local_missing, uint8_t actual_remote_missing)\n+{\n+    // According to the erlay spec, reconciliation is initiated by inbound peers.\n+    if (m_recon_state->sender) {\n+        assert(m_recon_state->incoming_recon != CNode::ReconPhase::NONE);\n+        m_recon_state->incoming_recon = CNode::ReconPhase::NONE;\n+    } else {\n+        // When reconciliation initialized by us is done, update local q for future reconciliations.\n+        if (action == LocalQAction::Q_RECOMPUTE) {\n+            assert(m_recon_state->outgoing_recon != CNode::ReconPhase::NONE);\n+            uint8_t local_set_size;\n+            if (m_recon_state->outgoing_recon == CNode::ReconPhase::BISEC_REQUESTED) {\n+                local_set_size = m_recon_state->local_set_snapshot.size();\n+            } else {\n+                local_set_size = m_recon_state->local_set.size();\n+            }\n+            uint8_t remote_set_size = local_set_size + actual_local_missing - actual_remote_missing;\n+            uint8_t set_size_diff = std::abs(local_set_size - remote_set_size);\n+            uint8_t min_size = std::min(local_set_size, remote_set_size);\n+            uint8_t actual_difference = actual_local_missing + actual_remote_missing;\n+            if (min_size != 0)\n+                m_recon_state->local_q = double(actual_difference - set_size_diff) / min_size;\n+        } else if (action == LocalQAction::Q_INCREASE) {\n+            m_recon_state->local_q *= 1.1;\n+        } else if (action == LocalQAction::Q_SET_DEFAULT) {\n+            m_recon_state->local_q = DEFAULT_RECON_Q;\n+        }\n+        m_recon_state->outgoing_recon = CNode::ReconPhase::NONE;\n+    }\n+    if (clear_local_set) m_recon_state->local_set.clear();\n+\n+    m_recon_state->local_short_id_mapping.clear();\n+    // This is currently belt-and-suspenders, as the code should work even without these calls.\n+    m_recon_state->local_set_snapshot.clear();\n+    m_recon_state->capacity_snapshot = 0;\n+    m_recon_state->remote_sketch_snapshot = nullptr;\n+    m_recon_state->local_sketch_snapshot = nullptr;\n+}\n+\n+uint32_t CNode::ComputeShortID(uint256 wtxid)\n+{\n+    uint64_t k0 = m_recon_state->salt.GetUint64(0);\n+    uint64_t k1 = m_recon_state->salt.GetUint64(1);\n+    uint64_t s = SipHashUint256(k0, k1, wtxid);\n+    uint32_t short_txid = 1 + (s & 0xFFFFFFFF);\n+    m_recon_state->local_short_id_mapping.insert(std::pair<uint32_t, uint256>(short_txid, wtxid));\n+    return short_txid;\n+}\n+\n+minisketch* CNode::ComputeSketch(bool use_own_q, BisectionChunk bisection_chunk, uint16_t capacity)\n+{\n+    std::vector<uint32_t> short_ids;\n+    if (m_recon_state->incoming_recon == ReconPhase::BISEC_REQUESTED || m_recon_state->outgoing_recon == ReconPhase::BISEC_REQUESTED) {\n+        // During bisection, all the relevant transactions are stored in the snapshot.\n+        // Original set is used to not miss transactions received during the reconciliation elsewhere.\n+        if (m_recon_state->local_set_snapshot.size() == 0) {\n+            return nullptr;\n+        }\n+        for (uint256 wtxid : m_recon_state->local_set_snapshot) {\n+            short_ids.push_back(ComputeShortID(wtxid));\n+        }\n+\n+        std::vector<uint32_t> bisec_short_ids;\n+        for (uint32_t short_id : short_ids) {\n+            if (bisection_chunk == BISECTION_LOW) {\n+                if (short_id <= BISECTION_MEDIAN) {\n+                    bisec_short_ids.push_back(short_id);\n+                }\n+            } else {\n+                if (short_id > BISECTION_MEDIAN) {\n+                    bisec_short_ids.push_back(short_id);\n+                }\n+            }\n+        }\n+        short_ids = bisec_short_ids;\n+        // For bisection, use capacity used in the initial reconciliation.\n+        capacity = m_recon_state->capacity_snapshot;\n+    } else {\n+        for (uint256 wtxid : m_recon_state->local_set) {\n+            short_ids.push_back(ComputeShortID(wtxid));\n+        }\n+\n+        if (capacity == 0) {\n+            // Estimate locally, as requested by the calling function.\n+            int set_size_diff = m_recon_state->local_set.size() - m_recon_state->remote_set_size;\n+            double q = use_own_q ? m_recon_state->local_q : m_recon_state->remote_q;\n+            capacity = 1 + q * fmin(m_recon_state->local_set.size(), m_recon_state->remote_set_size) +\n+                       abs(set_size_diff);\n+        }\n+        capacity = std::min(capacity, MAX_SKETCH_CAPACITY);\n+        // If bisection is required, we will use this capacity from the initial reconciliation.\n+        m_recon_state->capacity_snapshot = capacity;\n+    }\n+    if (short_ids.size() == 0) return nullptr;\n+    minisketch* sketch = minisketch_create(RECON_FIELD_SIZE, 0, capacity);\n+    for (uint32_t short_id : short_ids) {\n+        minisketch_add_uint64(sketch, short_id);\n+    }\n+    return sketch;\n+}\n+\n+std::vector<uint256> CNode::GetRelevantIDsFromShortIDs(uint64_t diff[], uint8_t diff_size, std::vector<uint32_t>& local_missing, CConnman* connman)\n+{\n+    std::vector<uint256> remote_missing;\n+    for (int i = 0; i < diff_size; ++i) {\n+        auto local_tx = m_recon_state->local_short_id_mapping.find(diff[i]);\n+        if (local_tx != m_recon_state->local_short_id_mapping.end()) {\n+            remote_missing.push_back(local_tx->second);\n+        } else {\n+            local_missing.push_back(diff[i]);\n+        }\n+    }\n+    return remote_missing;\n+}\n+\n+std::vector<uint256> CNode::GetWTXIDsFromShortIDs(const std::vector<uint32_t> remote_missing_short_ids, CConnman* connman)\n+{\n+    std::vector<uint256> remote_missing;\n+    for (size_t i = 0; i < remote_missing_short_ids.size(); ++i) {\n+        auto local_tx = m_recon_state->local_short_id_mapping.find(remote_missing_short_ids[i]);\n+        if (local_tx == m_recon_state->local_short_id_mapping.end()) {\n+            LogPrint(BCLog::NET, \"Unknown transaction requested by short id=%d by peer=%d\\n\", remote_missing_short_ids[i], GetId());\n+        }\n+        remote_missing.push_back(local_tx->second);",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 127,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "1b695eabc2083384596e146ff3da5846be3058e0",
      "in_reply_to_id": 412301986,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I may be off, but if `local_tx == m_recon_state->local_short_id_mapping.end()`, `local_tx->second` is still accessed after the LogPrint - isn't that illegal? ",
      "created_at": "2020-04-21T18:23:20Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r412389472",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/412389472"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 760,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/412404625",
      "pull_request_review_id": 397579849,
      "id": 412404625,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQwNDYyNQ==",
      "diff_hunk": "@@ -628,6 +628,135 @@ int CNode::GetSendVersion() const\n     return nSendVersion;\n }\n \n+void CNode::FinalizeReconciliation(bool clear_local_set, LocalQAction action, uint8_t actual_local_missing, uint8_t actual_remote_missing)\n+{\n+    // According to the erlay spec, reconciliation is initiated by inbound peers.\n+    if (m_recon_state->sender) {\n+        assert(m_recon_state->incoming_recon != CNode::ReconPhase::NONE);\n+        m_recon_state->incoming_recon = CNode::ReconPhase::NONE;\n+    } else {\n+        // When reconciliation initialized by us is done, update local q for future reconciliations.\n+        if (action == LocalQAction::Q_RECOMPUTE) {\n+            assert(m_recon_state->outgoing_recon != CNode::ReconPhase::NONE);\n+            uint8_t local_set_size;\n+            if (m_recon_state->outgoing_recon == CNode::ReconPhase::BISEC_REQUESTED) {\n+                local_set_size = m_recon_state->local_set_snapshot.size();\n+            } else {\n+                local_set_size = m_recon_state->local_set.size();\n+            }\n+            uint8_t remote_set_size = local_set_size + actual_local_missing - actual_remote_missing;\n+            uint8_t set_size_diff = std::abs(local_set_size - remote_set_size);\n+            uint8_t min_size = std::min(local_set_size, remote_set_size);\n+            uint8_t actual_difference = actual_local_missing + actual_remote_missing;\n+            if (min_size != 0)\n+                m_recon_state->local_q = double(actual_difference - set_size_diff) / min_size;\n+        } else if (action == LocalQAction::Q_INCREASE) {\n+            m_recon_state->local_q *= 1.1;\n+        } else if (action == LocalQAction::Q_SET_DEFAULT) {\n+            m_recon_state->local_q = DEFAULT_RECON_Q;\n+        }\n+        m_recon_state->outgoing_recon = CNode::ReconPhase::NONE;\n+    }\n+    if (clear_local_set) m_recon_state->local_set.clear();\n+\n+    m_recon_state->local_short_id_mapping.clear();\n+    // This is currently belt-and-suspenders, as the code should work even without these calls.\n+    m_recon_state->local_set_snapshot.clear();\n+    m_recon_state->capacity_snapshot = 0;\n+    m_recon_state->remote_sketch_snapshot = nullptr;\n+    m_recon_state->local_sketch_snapshot = nullptr;\n+}\n+\n+uint32_t CNode::ComputeShortID(uint256 wtxid)\n+{\n+    uint64_t k0 = m_recon_state->salt.GetUint64(0);\n+    uint64_t k1 = m_recon_state->salt.GetUint64(1);\n+    uint64_t s = SipHashUint256(k0, k1, wtxid);\n+    uint32_t short_txid = 1 + (s & 0xFFFFFFFF);\n+    m_recon_state->local_short_id_mapping.insert(std::pair<uint32_t, uint256>(short_txid, wtxid));\n+    return short_txid;\n+}\n+\n+minisketch* CNode::ComputeSketch(bool use_own_q, BisectionChunk bisection_chunk, uint16_t capacity)\n+{\n+    std::vector<uint32_t> short_ids;\n+    if (m_recon_state->incoming_recon == ReconPhase::BISEC_REQUESTED || m_recon_state->outgoing_recon == ReconPhase::BISEC_REQUESTED) {\n+        // During bisection, all the relevant transactions are stored in the snapshot.\n+        // Original set is used to not miss transactions received during the reconciliation elsewhere.\n+        if (m_recon_state->local_set_snapshot.size() == 0) {\n+            return nullptr;\n+        }\n+        for (uint256 wtxid : m_recon_state->local_set_snapshot) {\n+            short_ids.push_back(ComputeShortID(wtxid));\n+        }\n+\n+        std::vector<uint32_t> bisec_short_ids;\n+        for (uint32_t short_id : short_ids) {\n+            if (bisection_chunk == BISECTION_LOW) {\n+                if (short_id <= BISECTION_MEDIAN) {\n+                    bisec_short_ids.push_back(short_id);\n+                }\n+            } else {\n+                if (short_id > BISECTION_MEDIAN) {\n+                    bisec_short_ids.push_back(short_id);\n+                }\n+            }\n+        }\n+        short_ids = bisec_short_ids;\n+        // For bisection, use capacity used in the initial reconciliation.\n+        capacity = m_recon_state->capacity_snapshot;\n+    } else {\n+        for (uint256 wtxid : m_recon_state->local_set) {\n+            short_ids.push_back(ComputeShortID(wtxid));\n+        }\n+\n+        if (capacity == 0) {\n+            // Estimate locally, as requested by the calling function.\n+            int set_size_diff = m_recon_state->local_set.size() - m_recon_state->remote_set_size;\n+            double q = use_own_q ? m_recon_state->local_q : m_recon_state->remote_q;\n+            capacity = 1 + q * fmin(m_recon_state->local_set.size(), m_recon_state->remote_set_size) +\n+                       abs(set_size_diff);\n+        }\n+        capacity = std::min(capacity, MAX_SKETCH_CAPACITY);\n+        // If bisection is required, we will use this capacity from the initial reconciliation.\n+        m_recon_state->capacity_snapshot = capacity;\n+    }\n+    if (short_ids.size() == 0) return nullptr;\n+    minisketch* sketch = minisketch_create(RECON_FIELD_SIZE, 0, capacity);\n+    for (uint32_t short_id : short_ids) {\n+        minisketch_add_uint64(sketch, short_id);\n+    }\n+    return sketch;\n+}\n+\n+std::vector<uint256> CNode::GetRelevantIDsFromShortIDs(uint64_t diff[], uint8_t diff_size, std::vector<uint32_t>& local_missing, CConnman* connman)\n+{\n+    std::vector<uint256> remote_missing;\n+    for (int i = 0; i < diff_size; ++i) {\n+        auto local_tx = m_recon_state->local_short_id_mapping.find(diff[i]);\n+        if (local_tx != m_recon_state->local_short_id_mapping.end()) {\n+            remote_missing.push_back(local_tx->second);\n+        } else {\n+            local_missing.push_back(diff[i]);\n+        }\n+    }\n+    return remote_missing;\n+}\n+\n+std::vector<uint256> CNode::GetWTXIDsFromShortIDs(const std::vector<uint32_t> remote_missing_short_ids, CConnman* connman)\n+{\n+    std::vector<uint256> remote_missing;\n+    for (size_t i = 0; i < remote_missing_short_ids.size(); ++i) {\n+        auto local_tx = m_recon_state->local_short_id_mapping.find(remote_missing_short_ids[i]);\n+        if (local_tx == m_recon_state->local_short_id_mapping.end()) {\n+            LogPrint(BCLog::NET, \"Unknown transaction requested by short id=%d by peer=%d\\n\", remote_missing_short_ids[i], GetId());\n+        }\n+        remote_missing.push_back(local_tx->second);",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 127,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "1b695eabc2083384596e146ff3da5846be3058e0",
      "in_reply_to_id": 412301986,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oh, i see you are definitely right, it's a bug!",
      "created_at": "2020-04-21T18:46:18Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r412404625",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/412404625"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 760,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/412586167",
      "pull_request_review_id": 397767143,
      "id": 412586167,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU4NjE2Nw==",
      "diff_hunk": "@@ -3417,6 +3447,274 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n         return true;\n     }\n \n+    std::chrono::microseconds current_time = GetTime<std::chrono::microseconds>();\n+\n+    // Record an (expected) reconciliation request with parameters to respond when time comes.\n+    // All initial reconciliation responses will be done at the same time to prevent tx-related privacy leaks.\n+    if (strCommand == NetMsgType::REQRECON) {\n+        if (!pfrom->m_recon_state->sender) return true;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 69,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "0a262c092f6fe29d6964fe6fd1f1d98d08db44dd",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "One more potential issue: If I understand it correctly, `m_recon_state` is null if our peer does not signal Erlay support. So we should check if `m_recon_state` is non-null before accessing its members here.\r\n\r\nOtherwise an attacker could not signal Erlay but then send Erlay-specific messages to crash our node. Same applies for the other new messages `NetMsgType::SKETCH` etc. below.",
      "created_at": "2020-04-22T00:39:24Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r412586167",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/412586167"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3492,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/412589714",
      "pull_request_review_id": 397770157,
      "id": 412589714,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU4OTcxNA==",
      "diff_hunk": "@@ -3417,6 +3447,274 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n         return true;\n     }\n \n+    std::chrono::microseconds current_time = GetTime<std::chrono::microseconds>();\n+\n+    // Record an (expected) reconciliation request with parameters to respond when time comes.\n+    // All initial reconciliation responses will be done at the same time to prevent tx-related privacy leaks.\n+    if (strCommand == NetMsgType::REQRECON) {\n+        if (!pfrom->m_recon_state->sender) return true;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 69,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "0a262c092f6fe29d6964fe6fd1f1d98d08db44dd",
      "in_reply_to_id": 412586167,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Definitely an issue, will address!\r\nI had asserts all over, and then was replacing them with returns, but this one requires 2 checks for m_recon_state and for sender :)",
      "created_at": "2020-04-22T00:50:10Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r412589714",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/412589714"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3492,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/436293837",
      "pull_request_review_id": 425762827,
      "id": 436293837,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5MzgzNw==",
      "diff_hunk": "@@ -362,12 +402,13 @@ const uint32_t MSG_TYPE_MASK    = 0xffffffff >> 2;\n  * These numbers are defined by the protocol. When adding a new value, be sure\n  * to mention it in the respective BIP.\n  */\n-enum GetDataMsg\n+enum GetDataMsg : uint32_t\n {\n     UNDEFINED = 0,\n     MSG_TX = 1,\n     MSG_BLOCK = 2,\n-    // The following can only occur in getdata. Invs always use TX or BLOCK.\n+    MSG_WTX = 5, // Defined in BIP XXX",
      "path": "src/protocol.h",
      "position": null,
      "original_position": 58,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "5f81325bf1d2a32f6dcfb9a9b8c5106af6289b9f",
      "in_reply_to_id": null,
      "user": {
        "login": "ysangkok",
        "id": 284023,
        "node_id": "MDQ6VXNlcjI4NDAyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/284023?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ysangkok",
        "html_url": "https://github.com/ysangkok",
        "followers_url": "https://api.github.com/users/ysangkok/followers",
        "following_url": "https://api.github.com/users/ysangkok/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ysangkok/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ysangkok/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ysangkok/subscriptions",
        "organizations_url": "https://api.github.com/users/ysangkok/orgs",
        "repos_url": "https://api.github.com/users/ysangkok/repos",
        "events_url": "https://api.github.com/users/ysangkok/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ysangkok/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "this could say BIP 330",
      "created_at": "2020-06-06T19:20:37Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r436293837",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/436293837"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 410,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/436293867",
      "pull_request_review_id": 425762847,
      "id": 436293867,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5Mzg2Nw==",
      "diff_hunk": "@@ -234,6 +234,46 @@ extern const char *GETBLOCKTXN;\n  * @since protocol version 70014 as described by BIP 152\n  */\n extern const char *BLOCKTXN;\n+/**\n+ * Indicates that a node prefers to relay transactions via wtxid, rather than\n+ * txid.\n+ * @since protocol version 70016 as described by BIP XXX.",
      "path": "src/protocol.h",
      "position": null,
      "original_position": 7,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "5f81325bf1d2a32f6dcfb9a9b8c5106af6289b9f",
      "in_reply_to_id": null,
      "user": {
        "login": "ysangkok",
        "id": 284023,
        "node_id": "MDQ6VXNlcjI4NDAyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/284023?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ysangkok",
        "html_url": "https://github.com/ysangkok",
        "followers_url": "https://api.github.com/users/ysangkok/followers",
        "following_url": "https://api.github.com/users/ysangkok/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ysangkok/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ysangkok/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ysangkok/subscriptions",
        "organizations_url": "https://api.github.com/users/ysangkok/orgs",
        "repos_url": "https://api.github.com/users/ysangkok/repos",
        "events_url": "https://api.github.com/users/ysangkok/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ysangkok/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "also, could say BIP 330",
      "created_at": "2020-06-06T19:20:59Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r436293867",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/436293867"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 240,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/436294048",
      "pull_request_review_id": 425763015,
      "id": 436294048,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5NDA0OA==",
      "diff_hunk": "@@ -0,0 +1,231 @@\n+/**********************************************************************\n+ * Copyright (c) 2018 Pieter Wuille, Greg Maxwell, Gleb Naumenko      *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file LICENSE or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#include \"../include/minisketch.h\"\n+#include <string.h>\n+#include <memory>\n+#include <vector>\n+#include <algorithm>\n+#include <random>\n+#include <iostream>\n+#include <thread>\n+#include \"util.h\"\n+\n+uint64_t Combination(uint64_t n, uint64_t k) {\n+    if (n - k < k) k = n - k;\n+    uint64_t ret = 1;\n+    for (uint64_t i = 1; i <= k; ++i) {\n+        ret = (ret * n) / i;\n+        --n;\n+    }\n+    return ret;\n+}\n+\n+void TestAll(int bits, int impl, int count, uint32_t threadid, uint32_t threads, std::vector<uint64_t>& ret) {\n+    minisketch* state = minisketch_create(bits, impl, count);\n+    if (!state) return;\n+\n+    // Iterate over all (bits)-bit sketches with (count) syndromes.\n+    for (uint64_t x = threadid; (x >> (bits * count)) == 0; x += threads) {\n+        // Construct the serialization and load it.\n+        unsigned char ser[8];\n+        ser[0] = x;\n+        ser[1] = x >> 8;\n+        ser[2] = x >> 16;\n+        ser[3] = x >> 24;\n+        ser[4] = x >> 32;\n+        ser[5] = x >> 40;\n+        ser[6] = x >> 48;\n+        ser[7] = x >> 56;\n+\n+        minisketch_deserialize(state, ser);\n+\n+        // Compute all the solutions.\n+        uint64_t roots[64];\n+        int num_roots = minisketch_decode(state, 64, roots);\n+\n+        // If there are solutions:\n+        if (num_roots >= 0) {\n+            // Asking for one root less should fail.\n+            CHECK(num_roots < 1 || minisketch_decode(state, num_roots - 1, roots) == -1);\n+            // Reconstruct the sketch from the solutions.\n+            minisketch* state2 = minisketch_create(bits, 0, count);\n+            for (int i = 0; i < num_roots; ++i) {\n+                minisketch_add_uint64(state2, roots[i]);\n+            }\n+            // Serialize it.\n+            unsigned char nser[8] = {0};\n+            minisketch_serialize(state2, nser);\n+            // Compare it to the original.\n+            CHECK(memcmp(ser, nser, 8) == 0);\n+            // Count it.\n+            if (num_roots +1 >= (int)ret.size()) ret.resize(num_roots + 2);\n+            ret[num_roots + 1]++;\n+            minisketch_destroy(state2);\n+        } else {\n+            if (ret.size() == 0) ret.resize(1);\n+            ret[0]++;\n+        }\n+    }\n+    minisketch_destroy(state);\n+}\n+\n+std::vector<uint64_t> TestAll(int bits, int impl, int count, uint32_t threads) {\n+    std::vector<std::vector<uint64_t>> outputs;\n+    std::vector<std::thread> thread_list;\n+    thread_list.reserve(threads);\n+    outputs.resize(threads);\n+    for (uint32_t i = 0; i < threads; ++i) {\n+        thread_list.emplace_back([=,&outputs](){ TestAll(bits, impl, count, i, threads, outputs[i]); });\n+    }\n+    std::vector<uint64_t> ret;\n+    for (uint32_t i = 0; i < threads; ++i) {\n+        thread_list[i].join();\n+        if (ret.size() < outputs[i].size()) ret.resize(outputs[i].size());\n+        for (size_t j = 0; j < outputs[i].size(); ++j) {\n+            ret[j] += outputs[i][j];\n+        }\n+    }\n+    if (ret.size()) {\n+        for (int i = 1; i <= count + 1; ++i) {\n+            CHECK(ret[i] == Combination((uint64_t(1) << bits) - 1, i - 1));\n+        }\n+    }\n+    return ret;\n+}\n+\n+void TestRand(int bits, int impl, int count, int iter) {\n+    std::vector<uint64_t> elems(count);\n+    std::vector<uint64_t> roots(count + 1);\n+    std::random_device rnd;\n+    std::uniform_int_distribution<uint64_t> dist(1, bits == 64 ? -1 : ((uint64_t(1) << bits) - 1));\n+\n+    for (int i = 0; i < iter; ++i) {\n+        bool overfill = iter & 1; // Test some cases with overfull sketches that may not decode.\n+        minisketch* state = minisketch_create(bits, impl, count);\n+        if (!state) return;\n+        minisketch* basestate = minisketch_create(bits, 0, count);\n+        for (int j = 0; j < count + 3*overfill; ++j) {\n+            uint64_t r = dist(rnd);\n+            if (!overfill) elems[j] = r;\n+            minisketch_add_uint64(state, r);\n+            minisketch_add_uint64(basestate, r);\n+        }\n+        roots.assign(count + 1, 0);\n+        std::vector<unsigned char> data, basedata;\n+        basedata.resize(((count + 1) * bits + 7) / 8);\n+        data.resize(((count + 1) * bits + 7) / 8);\n+        minisketch_serialize(basestate, basedata.data());\n+        minisketch_serialize(state, data.data());\n+        CHECK(data == basedata);\n+        minisketch_deserialize(state, basedata.data());\n+        int num_roots = minisketch_decode(state, count + 1, roots.data());\n+        CHECK(overfill || num_roots >= 0);\n+        CHECK(num_roots < 1 || minisketch_decode(state, num_roots - 1, roots.data()) == -1); // Decoding with a too-low maximum should fail.\n+        if (!overfill) {\n+            std::sort(roots.begin(), roots.begin() + num_roots);\n+//            fprintf(stderr, \"Solut: \");",
      "path": "src/minisketch/src/test-exhaust.cpp",
      "position": 132,
      "original_position": 130,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "5f81325bf1d2a32f6dcfb9a9b8c5106af6289b9f",
      "in_reply_to_id": null,
      "user": {
        "login": "ysangkok",
        "id": 284023,
        "node_id": "MDQ6VXNlcjI4NDAyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/284023?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ysangkok",
        "html_url": "https://github.com/ysangkok",
        "followers_url": "https://api.github.com/users/ysangkok/followers",
        "following_url": "https://api.github.com/users/ysangkok/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ysangkok/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ysangkok/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ysangkok/subscriptions",
        "organizations_url": "https://api.github.com/users/ysangkok/orgs",
        "repos_url": "https://api.github.com/users/ysangkok/repos",
        "events_url": "https://api.github.com/users/ysangkok/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ysangkok/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "wouldn't it be better to have this guarded by an ifdef?",
      "created_at": "2020-06-06T19:23:41Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r436294048",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/436294048"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 132,
      "original_line": 132,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/436297436",
      "pull_request_review_id": 425765935,
      "id": 436297436,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5NzQzNg==",
      "diff_hunk": "@@ -0,0 +1,231 @@\n+/**********************************************************************\n+ * Copyright (c) 2018 Pieter Wuille, Greg Maxwell, Gleb Naumenko      *\n+ * Distributed under the MIT software license, see the accompanying   *\n+ * file LICENSE or http://www.opensource.org/licenses/mit-license.php.*\n+ **********************************************************************/\n+\n+#include \"../include/minisketch.h\"\n+#include <string.h>\n+#include <memory>\n+#include <vector>\n+#include <algorithm>\n+#include <random>\n+#include <iostream>\n+#include <thread>\n+#include \"util.h\"\n+\n+uint64_t Combination(uint64_t n, uint64_t k) {\n+    if (n - k < k) k = n - k;\n+    uint64_t ret = 1;\n+    for (uint64_t i = 1; i <= k; ++i) {\n+        ret = (ret * n) / i;\n+        --n;\n+    }\n+    return ret;\n+}\n+\n+void TestAll(int bits, int impl, int count, uint32_t threadid, uint32_t threads, std::vector<uint64_t>& ret) {\n+    minisketch* state = minisketch_create(bits, impl, count);\n+    if (!state) return;\n+\n+    // Iterate over all (bits)-bit sketches with (count) syndromes.\n+    for (uint64_t x = threadid; (x >> (bits * count)) == 0; x += threads) {\n+        // Construct the serialization and load it.\n+        unsigned char ser[8];\n+        ser[0] = x;\n+        ser[1] = x >> 8;\n+        ser[2] = x >> 16;\n+        ser[3] = x >> 24;\n+        ser[4] = x >> 32;\n+        ser[5] = x >> 40;\n+        ser[6] = x >> 48;\n+        ser[7] = x >> 56;\n+\n+        minisketch_deserialize(state, ser);\n+\n+        // Compute all the solutions.\n+        uint64_t roots[64];\n+        int num_roots = minisketch_decode(state, 64, roots);\n+\n+        // If there are solutions:\n+        if (num_roots >= 0) {\n+            // Asking for one root less should fail.\n+            CHECK(num_roots < 1 || minisketch_decode(state, num_roots - 1, roots) == -1);\n+            // Reconstruct the sketch from the solutions.\n+            minisketch* state2 = minisketch_create(bits, 0, count);\n+            for (int i = 0; i < num_roots; ++i) {\n+                minisketch_add_uint64(state2, roots[i]);\n+            }\n+            // Serialize it.\n+            unsigned char nser[8] = {0};\n+            minisketch_serialize(state2, nser);\n+            // Compare it to the original.\n+            CHECK(memcmp(ser, nser, 8) == 0);\n+            // Count it.\n+            if (num_roots +1 >= (int)ret.size()) ret.resize(num_roots + 2);\n+            ret[num_roots + 1]++;\n+            minisketch_destroy(state2);\n+        } else {\n+            if (ret.size() == 0) ret.resize(1);\n+            ret[0]++;\n+        }\n+    }\n+    minisketch_destroy(state);\n+}\n+\n+std::vector<uint64_t> TestAll(int bits, int impl, int count, uint32_t threads) {\n+    std::vector<std::vector<uint64_t>> outputs;\n+    std::vector<std::thread> thread_list;\n+    thread_list.reserve(threads);\n+    outputs.resize(threads);\n+    for (uint32_t i = 0; i < threads; ++i) {\n+        thread_list.emplace_back([=,&outputs](){ TestAll(bits, impl, count, i, threads, outputs[i]); });\n+    }\n+    std::vector<uint64_t> ret;\n+    for (uint32_t i = 0; i < threads; ++i) {\n+        thread_list[i].join();\n+        if (ret.size() < outputs[i].size()) ret.resize(outputs[i].size());\n+        for (size_t j = 0; j < outputs[i].size(); ++j) {\n+            ret[j] += outputs[i][j];\n+        }\n+    }\n+    if (ret.size()) {\n+        for (int i = 1; i <= count + 1; ++i) {\n+            CHECK(ret[i] == Combination((uint64_t(1) << bits) - 1, i - 1));\n+        }\n+    }\n+    return ret;\n+}\n+\n+void TestRand(int bits, int impl, int count, int iter) {\n+    std::vector<uint64_t> elems(count);\n+    std::vector<uint64_t> roots(count + 1);\n+    std::random_device rnd;\n+    std::uniform_int_distribution<uint64_t> dist(1, bits == 64 ? -1 : ((uint64_t(1) << bits) - 1));\n+\n+    for (int i = 0; i < iter; ++i) {\n+        bool overfill = iter & 1; // Test some cases with overfull sketches that may not decode.\n+        minisketch* state = minisketch_create(bits, impl, count);\n+        if (!state) return;\n+        minisketch* basestate = minisketch_create(bits, 0, count);\n+        for (int j = 0; j < count + 3*overfill; ++j) {\n+            uint64_t r = dist(rnd);\n+            if (!overfill) elems[j] = r;\n+            minisketch_add_uint64(state, r);\n+            minisketch_add_uint64(basestate, r);\n+        }\n+        roots.assign(count + 1, 0);\n+        std::vector<unsigned char> data, basedata;\n+        basedata.resize(((count + 1) * bits + 7) / 8);\n+        data.resize(((count + 1) * bits + 7) / 8);\n+        minisketch_serialize(basestate, basedata.data());\n+        minisketch_serialize(state, data.data());\n+        CHECK(data == basedata);\n+        minisketch_deserialize(state, basedata.data());\n+        int num_roots = minisketch_decode(state, count + 1, roots.data());\n+        CHECK(overfill || num_roots >= 0);\n+        CHECK(num_roots < 1 || minisketch_decode(state, num_roots - 1, roots.data()) == -1); // Decoding with a too-low maximum should fail.\n+        if (!overfill) {\n+            std::sort(roots.begin(), roots.begin() + num_roots);\n+//            fprintf(stderr, \"Solut: \");",
      "path": "src/minisketch/src/test-exhaust.cpp",
      "position": 132,
      "original_position": 130,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "5f81325bf1d2a32f6dcfb9a9b8c5106af6289b9f",
      "in_reply_to_id": 436294048,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think https://github.com/sipa/minisketch master branch is a better place for these comments :)",
      "created_at": "2020-06-06T20:14:23Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r436297436",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/436297436"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 132,
      "original_line": 132,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540464964",
      "pull_request_review_id": 549563941,
      "id": 540464964,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ2NDk2NA==",
      "diff_hunk": "@@ -2360,6 +2369,21 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n \n         if (greatest_common_version >= WTXID_RELAY_VERSION) {\n             m_connman.PushMessage(&pfrom, msg_maker.Make(NetMsgType::WTXIDRELAY));\n+\n+            // Reconciliation is supported only when wtxid relay is supported.\n+            bool be_recon_requestor, be_recon_responder;\n+            // Currently reconciliation requests flow only in one direction inbound->outbound.\n+            if (pfrom.IsFullOutboundConn()) {\n+                be_recon_requestor = true;\n+                be_recon_responder = false;\n+            } else {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "a6f979194ac31f19cdc46f01b40f48ec889910a9",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "We should probably not send a `sendrecon` message to block-relay only peers?  Here we should just check to see if it's an inbound peer, right?",
      "created_at": "2020-12-10T20:12:07Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r540464964",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540464964"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2379,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540466709",
      "pull_request_review_id": 549563941,
      "id": 540466709,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ2NjcwOQ==",
      "diff_hunk": "@@ -260,6 +260,14 @@ extern const char* CFCHECKPT;\n  * @since protocol version 70016 as described by BIP 339.\n  */\n extern const char* WTXIDRELAY;\n+/**\n+ * Contains 2 1-byte bools, a 4-byte version number and an 8-byte salt.\n+ * Indicates that a node is willing to participate in transaction reconciliation,\n+ * either as a sender or a receiver.\n+ * The salt is used to compute short txids needed for efficient reconciliation.\n+ * @since protocol version 80001 as described by BIP 330",
      "path": "src/protocol.h",
      "position": null,
      "original_position": 9,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "a6f979194ac31f19cdc46f01b40f48ec889910a9",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I believe BIP 330 doesn't reference protocol version 80001, and the code in this commit seems to send it as long as the peer has version 70016 or higher.",
      "created_at": "2020-12-10T20:15:00Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r540466709",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540466709"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 268,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540467865",
      "pull_request_review_id": 549563941,
      "id": 540467865,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ2Nzg2NQ==",
      "diff_hunk": "@@ -146,6 +146,10 @@ static constexpr uint32_t MAX_GETCFILTERS_SIZE = 1000;\n static constexpr uint32_t MAX_GETCFHEADERS_SIZE = 2000;\n /** the maximum percentage of addresses from our addrman to return in response to a getaddr message. */\n static constexpr size_t MAX_PCT_ADDR_TO_SEND = 23;\n+/** Static component of the salt used to compute short txids for transaction reconciliation. */\n+static const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+/** Default coefficient used to estimate set difference for tx reconciliation. */\n+static constexpr double DEFAULT_RECON_Q = 0.02;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "2ac6f49703abd3293f5d14f20d1eda357b093a6a",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Just a note, I think the BIP draft refers to a default value of q=0.1. Perhaps if we end up leaving our default at 0.02, then we could update the BIP to have the same default value suggestion.",
      "created_at": "2020-12-10T20:17:01Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r540467865",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540467865"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 162,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540469261",
      "pull_request_review_id": 549563941,
      "id": 540469261,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ2OTI2MQ==",
      "diff_hunk": "@@ -2559,6 +2617,62 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n         return;\n     }\n \n+    // Received from an inbound peer planning to reconcilie transactions with us, or",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 76,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "2ac6f49703abd3293f5d14f20d1eda357b093a6a",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "spelling nit: should say \"reconcile\"",
      "created_at": "2020-12-10T20:19:25Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r540469261",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540469261"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2620,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540470196",
      "pull_request_review_id": 549563941,
      "id": 540470196,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ3MDE5Ng==",
      "diff_hunk": "@@ -2559,6 +2617,62 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n         return;\n     }\n \n+    // Received from an inbound peer planning to reconcilie transactions with us, or\n+    // from an outgoing peer demonstrating readiness to do reconciliations.\n+    // If received from outgoing, adds the peer to the reconciliation queue.\n+    // Feature negotiation of tx reconciliation should happen between VERSION and\n+    // VERACK, to avoid relay problems from switching after a connection is up.\n+    if (msg_type == NetMsgType::SENDRECON) {\n+        if (!pfrom.m_tx_relay) return;\n+        if (peer->m_recon_state != nullptr) return; // Do not support reconciliation salt/version updates.",
      "path": "src/net_processing.cpp",
      "position": 303,
      "original_position": 83,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "2ac6f49703abd3293f5d14f20d1eda357b093a6a",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should we only consider negotiation to have succeeded if we've already received a `wtxidrelay` message from this peer?  If so, I think we need to specify the order in which `wtxidrelay` and `sendrecon` get sent during handshaking in the BIP.",
      "created_at": "2020-12-10T20:21:01Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r540470196",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540470196"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2944,
      "original_line": 2944,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540472620",
      "pull_request_review_id": 549563941,
      "id": 540472620,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ3MjYyMA==",
      "diff_hunk": "@@ -2559,6 +2617,62 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n         return;\n     }\n \n+    // Received from an inbound peer planning to reconcilie transactions with us, or\n+    // from an outgoing peer demonstrating readiness to do reconciliations.\n+    // If received from outgoing, adds the peer to the reconciliation queue.\n+    // Feature negotiation of tx reconciliation should happen between VERSION and\n+    // VERACK, to avoid relay problems from switching after a connection is up.\n+    if (msg_type == NetMsgType::SENDRECON) {\n+        if (!pfrom.m_tx_relay) return;\n+        if (peer->m_recon_state != nullptr) return; // Do not support reconciliation salt/version updates.\n+\n+        bool recon_sender, recon_responder;\n+        uint64_t remote_salt;\n+        uint32_t recon_version;\n+        vRecv >> recon_sender >> recon_responder >> recon_version >> remote_salt;\n+        if (recon_version != 1) return;\n+\n+         // Do not flood through inbound connections which support reconciliation to save bandwidth.\n+         bool flood_to = false;\n+         if (pfrom.IsInboundConn()) {\n+             if (!recon_sender) return;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 94,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "2ac6f49703abd3293f5d14f20d1eda357b093a6a",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "A comment here explaining this setup for an inbound peer that sends us a SENDRECON with `sender=false` would be helpful.  Here, it seems that we don't set up any reconciliation to occur with an inbound peer that doesn't want to reconcile with us, because we only send reconciliations to our outbound peers, and require that inbounds who want to reconcile be the requestor.\r\n\r\nPerhaps a comment that reminds the reader that if we give up on setting up reconciliation with a peer, that we default to flooding to that peer?",
      "created_at": "2020-12-10T20:25:01Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r540472620",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540472620"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2987,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540481711",
      "pull_request_review_id": 549563941,
      "id": 540481711,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ4MTcxMQ==",
      "diff_hunk": "@@ -2559,6 +2617,62 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n         return;\n     }\n \n+    // Received from an inbound peer planning to reconcilie transactions with us, or\n+    // from an outgoing peer demonstrating readiness to do reconciliations.\n+    // If received from outgoing, adds the peer to the reconciliation queue.\n+    // Feature negotiation of tx reconciliation should happen between VERSION and\n+    // VERACK, to avoid relay problems from switching after a connection is up.\n+    if (msg_type == NetMsgType::SENDRECON) {\n+        if (!pfrom.m_tx_relay) return;\n+        if (peer->m_recon_state != nullptr) return; // Do not support reconciliation salt/version updates.\n+\n+        bool recon_sender, recon_responder;\n+        uint64_t remote_salt;\n+        uint32_t recon_version;\n+        vRecv >> recon_sender >> recon_responder >> recon_version >> remote_salt;\n+        if (recon_version != 1) return;\n+\n+         // Do not flood through inbound connections which support reconciliation to save bandwidth.\n+         bool flood_to = false;\n+         if (pfrom.IsInboundConn()) {\n+             if (!recon_sender) return;\n+         } else {\n+             if (!recon_responder) return;\n+             // TODO: Flood only through a limited number of outbound connections.\n+            flood_to = true;\n+         }\n+\n+        peer->m_recon_state = MakeUnique<Peer::ReconState>();\n+        peer->m_recon_state->m_flood_to = flood_to;\n+        peer->m_recon_state->m_sender = recon_sender;\n+        peer->m_recon_state->m_responder = recon_responder;\n+        peer->m_recon_state->m_local_q = DEFAULT_RECON_Q;\n+\n+        uint64_t local_salt = peer->m_local_recon_salt;\n+\n+        std::string salt1, salt2;\n+        if (remote_salt < local_salt) {\n+            salt1 = ToString(remote_salt);\n+            salt2 = ToString(local_salt);\n+        } else {\n+            salt1 = ToString(local_salt);\n+            salt2 = ToString(remote_salt);\n+        }\n+        uint256 full_salt;\n+        CSHA256().Write((unsigned char*)RECON_STATIC_SALT.data(), RECON_STATIC_SALT.size()).\n+            Write((unsigned char*)salt1.data(), salt1.size()).\n+            Write((unsigned char*)salt2.data(), salt2.size()).\n+            Finalize(full_salt.begin());\n+        peer->m_recon_state->m_salt = full_salt;\n+\n+        // Reconcile with all outbound peers supporting reconciliation (even if we flood to them),\n+        // to not miss transactions they have for us but won't flood.\n+        if (peer->m_recon_state->m_responder) {\n+            m_recon_queue.push_back(&pfrom);",
      "path": "src/net_processing.cpp",
      "position": 349,
      "original_position": 127,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "2ac6f49703abd3293f5d14f20d1eda357b093a6a",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think if an inbound peer advertised support for both requesting sketches and responding to sketch requests, that we would then add them to our recon queue, but the comment here says that we are only doing this for outbound peers. Can you clarify the correct behavior in that situation?",
      "created_at": "2020-12-10T20:40:43Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r540481711",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540481711"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2990,
      "original_line": 2990,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540487984",
      "pull_request_review_id": 549563941,
      "id": 540487984,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ4Nzk4NA==",
      "diff_hunk": "@@ -827,6 +833,30 @@ static void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vec\n \n } // namespace\n \n+size_t PeerManager::GetTxRelayOutboundCountByRelayType(bool flooding) const",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "5db8069b5690905b2588ad3fe77548cdb2d1681e",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If I read correctly, even in the final version of this PR this function is only invoked with flooding=true.  Can we simplify this function a bit to reflect that?",
      "created_at": "2020-12-10T20:51:43Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r540487984",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540487984"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 836,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540488569",
      "pull_request_review_id": 549563941,
      "id": 540488569,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ4ODU2OQ==",
      "diff_hunk": "@@ -827,6 +833,30 @@ static void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vec\n \n } // namespace\n \n+size_t PeerManager::GetTxRelayOutboundCountByRelayType(bool flooding) const\n+{\n+    size_t result = 0;\n+    m_connman.ForEachNode([flooding, &result](CNode* pnode) {\n+        if (!pnode->m_tx_relay)",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 21,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "5db8069b5690905b2588ad3fe77548cdb2d1681e",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Style comment: I've noticed in a few places that you have one-line `if` statements; our style guide requires that if the body of the `if` isn't on the same line, then we must use curly braces.  So that's something to fix up throughout the new code.",
      "created_at": "2020-12-10T20:52:44Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r540488569",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540488569"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 840,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540490244",
      "pull_request_review_id": 549563941,
      "id": 540490244,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ5MDI0NA==",
      "diff_hunk": "@@ -827,6 +833,30 @@ static void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vec\n \n } // namespace\n \n+size_t PeerManager::GetTxRelayOutboundCountByRelayType(bool flooding) const\n+{\n+    size_t result = 0;\n+    m_connman.ForEachNode([flooding, &result](CNode* pnode) {\n+        if (!pnode->m_tx_relay)\n+            return;\n+        if (!pnode->IsFullOutboundConn() && !pnode->IsManualConn())\n+            return;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "5db8069b5690905b2588ad3fe77548cdb2d1681e",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I haven't quite thought through exactly how flooding works in Erlay, but I believe this logic is written so that if we configure a node to have 8 manual outbound peers in addition to the 8 full outbound relay peers, and the 8 manual peers are all assigned to be the flood peers, and then they all go offline, we would be left with 0 flood peers?  Is it a problem if we are using fewer than our 8 flood peers? \r\n\r\nIf it is, perhaps we should be considering whether to enabling flooding on a connection after an existing flood-peer disconnects?",
      "created_at": "2020-12-10T20:55:39Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r540490244",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540490244"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 843,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540493276",
      "pull_request_review_id": 549563941,
      "id": 540493276,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ5MzI3Ng==",
      "diff_hunk": "@@ -2370,6 +2370,28 @@ static void ProcessGetCFCheckPt(CNode& peer, CDataStream& vRecv, const CChainPar\n     connman.PushMessage(&peer, std::move(msg));\n }\n \n+/**\n+ * Announce transactions a peer is missing after reconciliation is done.\n+ * No need to add transactions to peer's filter or do checks\n+ * because it was already done when adding to the reconciliation set.\n+ */\n+void static AnnounceTxs(std::vector<uint256> remote_missing_wtxids, CNode* pto, CNetMsgMaker msgMaker, CConnman* connman)",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 9,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "9347a73f01c13a0187b7a70d5315052726ad65ac",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I assume you could pass this vector by (const) reference?  (And maybe all the other stuff can be passed by reference too...). ",
      "created_at": "2020-12-10T21:00:58Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r540493276",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540493276"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2378,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540498519",
      "pull_request_review_id": 549563941,
      "id": 540498519,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ5ODUxOQ==",
      "diff_hunk": "@@ -2370,6 +2370,28 @@ static void ProcessGetCFCheckPt(CNode& peer, CDataStream& vRecv, const CChainPar\n     connman.PushMessage(&peer, std::move(msg));\n }\n \n+/**\n+ * Announce transactions a peer is missing after reconciliation is done.\n+ * No need to add transactions to peer's filter or do checks\n+ * because it was already done when adding to the reconciliation set.\n+ */\n+void static AnnounceTxs(std::vector<uint256> remote_missing_wtxids, CNode* pto, CNetMsgMaker msgMaker, CConnman* connman)\n+{\n+    if (remote_missing_wtxids.size() != 0) {\n+        std::vector<CInv> remote_missing_invs;\n+        for (uint256 wtxid: remote_missing_wtxids) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "9347a73f01c13a0187b7a70d5315052726ad65ac",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: Here and in many of the loops in this PR, I think you could make these `const uint256& wtxid : ...`, to save a copy.  Won't point it out in every spot but probably could be cleaned up throughout the PR at some point.",
      "created_at": "2020-12-10T21:10:03Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r540498519",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540498519"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2694,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540772961",
      "pull_request_review_id": 549890220,
      "id": 540772961,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc3Mjk2MQ==",
      "diff_hunk": "@@ -827,6 +833,30 @@ static void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vec\n \n } // namespace\n \n+size_t PeerManager::GetTxRelayOutboundCountByRelayType(bool flooding) const\n+{\n+    size_t result = 0;\n+    m_connman.ForEachNode([flooding, &result](CNode* pnode) {\n+        if (!pnode->m_tx_relay)\n+            return;\n+        if (!pnode->IsFullOutboundConn() && !pnode->IsManualConn())\n+            return;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "5db8069b5690905b2588ad3fe77548cdb2d1681e",
      "in_reply_to_id": 540490244,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Haha, I was planning to bring this up later in the review cycle. I didn't expect someone to find it that fast :)\r\nYeah, what you describing is possible.\r\nPerhaps we should have a loop checking that we have enough (8) flood outbound peers, and then if not, switch some existing recon peers to flooding.\r\n\r\nWill add a commit for this.",
      "created_at": "2020-12-11T08:29:36Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r540772961",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540772961"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 843,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540940436",
      "pull_request_review_id": 550089271,
      "id": 540940436,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk0MDQzNg==",
      "diff_hunk": "@@ -917,7 +935,7 @@ void PeerManager::ReattemptInitialBroadcast(CScheduler& scheduler) const\n \n         if (tx != nullptr) {\n             LOCK(cs_main);\n-            RelayTransaction(txid, tx->GetWitnessHash(), m_connman);\n+            RelayTransaction(txid, tx->GetWitnessHash(), m_connman, false);",
      "path": "src/net_processing.cpp",
      "position": 188,
      "original_position": 37,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "e8fd1cb590161e88b64b2e20d3113310390e68a5",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think a comment here explaining why we don't flood these transactions would be helpful.",
      "created_at": "2020-12-11T13:18:30Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r540940436",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540940436"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1064,
      "original_line": 1064,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540945952",
      "pull_request_review_id": 550089271,
      "id": 540945952,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk0NTk1Mg==",
      "diff_hunk": "@@ -1525,17 +1543,17 @@ bool static AlreadyHaveBlock(const uint256& block_hash) EXCLUSIVE_LOCKS_REQUIRED\n     return LookupBlockIndex(block_hash) != nullptr;\n }\n \n-void RelayTransaction(const uint256& txid, const uint256& wtxid, const CConnman& connman)\n+void RelayTransaction(const uint256& txid, const uint256& wtxid, const CConnman& connman, bool flood)\n {\n-    connman.ForEachNode([&txid, &wtxid](CNode* pnode) EXCLUSIVE_LOCKS_REQUIRED(::cs_main) {\n+    connman.ForEachNode([&txid, &wtxid, flood](CNode* pnode) EXCLUSIVE_LOCKS_REQUIRED(::cs_main) {\n         AssertLockHeld(::cs_main);\n \n         CNodeState* state = State(pnode->GetId());\n         if (state == nullptr) return;\n         if (state->m_wtxid_relay) {\n-            pnode->PushTxInventory(wtxid);\n+            pnode->PushTxInventory(wtxid, flood);\n         } else {\n-            pnode->PushTxInventory(txid);\n+            pnode->PushTxInventory(txid, flood);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 59,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "e8fd1cb590161e88b64b2e20d3113310390e68a5",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Here, if a peer doesn't support reconciliation, then the `flood` bool doesn't matter, we'll always flood -- right?  If that's correct, perhaps we could either set flood=true for all non-reconciliation peers, or leave a comment that explains that the parameter doesn't matter in this case.\r\n",
      "created_at": "2020-12-11T13:27:50Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r540945952",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540945952"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1830,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540947160",
      "pull_request_review_id": 550089271,
      "id": 540947160,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk0NzE2MA==",
      "diff_hunk": "@@ -2087,7 +2105,7 @@ void PeerManager::ProcessOrphanTx(std::set<uint256>& orphan_work_set)\n \n         if (AcceptToMemoryPool(m_mempool, state, porphanTx, &removed_txn, false /* bypass_limits */)) {\n             LogPrint(BCLog::MEMPOOL, \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n-            RelayTransaction(orphanHash, porphanTx->GetWitnessHash(), m_connman);\n+            RelayTransaction(orphanHash, porphanTx->GetWitnessHash(), m_connman, true);",
      "path": "src/net_processing.cpp",
      "position": 233,
      "original_position": 68,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "e8fd1cb590161e88b64b2e20d3113310390e68a5",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "We track where we got the orphan from; should we use that to determine whether to flood (rather than setting `flood=true` for all orphans)?",
      "created_at": "2020-12-11T13:29:49Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r540947160",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540947160"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2298,
      "original_line": 2298,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540951635",
      "pull_request_review_id": 550089271,
      "id": 540951635,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk1MTYzNQ==",
      "diff_hunk": "@@ -452,6 +452,15 @@ struct Peer {\n     std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n \n     explicit Peer(NodeId id) : m_id(id) {}\n+\n+    /**\n+     * Salt used to compute short IDs during transaction reconciliation.\n+     * Salt is generated randomly per-connection to prevent linking of\n+     * connections belonging to the same physical node.\n+     * Also, salts should be different per-connection to prevent halting\n+     * of relay of particular transactions due to collisions in short IDs.\n+     */\n+    uint64_t m_local_recon_salt;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "ed736b0c3892c50ba0697cad8d8b031b468fe3fd",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Can we make this const and just always initialize it when a `Peer` object is created?  Then we could avoid having to worry about locking issues with this (right now it seems like there should be some kind of lock that guards it).",
      "created_at": "2020-12-11T13:37:13Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r540951635",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540951635"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 523,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540953528",
      "pull_request_review_id": 550089271,
      "id": 540953528,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk1MzUyOA==",
      "diff_hunk": "@@ -461,6 +465,60 @@ struct Peer {\n      * of relay of particular transactions due to collisions in short IDs.\n      */\n     uint64_t m_local_recon_salt;\n+\n+    /**\n+     * This struct is used to keep track of the reconciliations with a given peer.\n+     * Transaction reconciliation means an efficient synchronization of the known\n+     * transactions between a pair of peers.\n+     * One reconciliation round consists of a sequence of messages. The sequence is\n+     * asymmetrical, there is always a requestor and a responder. At the end of the\n+     * sequence, nodes are supposed to exchange transactions, so that both of them\n+     * have all relevant transactions. For more protocol details, refer to BIP-0330.\n+     */\n+    struct ReconState {\n+        ReconState(){};\n+\n+        /// Whether this peer will send reconciliation requests.\n+        bool m_sender;\n+\n+        /// Whether this peer will respond to reconciliation requests.\n+        bool m_responder;\n+\n+        /**\n+         * Whether we should flood transactions to the peer.\n+         * Reconciliation between two nodes does not prevent these nodes\n+         * from flooding transactions to each other.\n+         * Selective flooding of transactions to only specific peers makes\n+         * transaction relay significantly faster.\n+         */\n+        bool m_flood_to;\n+\n+        /**\n+         * Reconciliation involves computing and transmitting sketches,\n+         * which is a bandwidth-efficient representation of transaction IDs.\n+         * Since computing sketches over full txID is too CPU-expensive,\n+         * they will be computed over shortened IDs instead.\n+         * These short IDs will be salted so that they are not the same\n+         * across all pairs of peers, because otherwise it would enable network-wide\n+         * collisions which may (intentionally or not) halt relay of certain transactions.\n+         * Both of the peers contribute to the salt.\n+         */\n+        uint256 m_salt;\n+\n+        /**\n+         * Computing a set reconciliation sketch involves estimating the difference\n+         * between sets of transactions on two sides of the connection. More specifically,\n+         * a sketch capacity is computed as\n+         * |set_size - local_set_size| + q * (set_size + local_set_size) + c,\n+         * where c is a small constant, and q is a node+connection-specific coefficient.\n+         * This coefficient is recomputed by every node based on its previous reconciliations,\n+         * to better predict future set size differences.\n+         */\n+        double m_local_q;\n+    };\n+\n+    /// nullptr if we're not reconciling (neither passively nor actively) with this peer.\n+    std::unique_ptr<ReconState> m_recon_state;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 68,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "489c98c0778e424ff359dd587ef20fa820e246f4",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this probably should have a lock that protects access to this object?",
      "created_at": "2020-12-11T13:40:10Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r540953528",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540953528"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 806,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540954946",
      "pull_request_review_id": 550089271,
      "id": 540954946,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk1NDk0Ng==",
      "diff_hunk": "@@ -461,6 +465,60 @@ struct Peer {\n      * of relay of particular transactions due to collisions in short IDs.\n      */\n     uint64_t m_local_recon_salt;\n+\n+    /**\n+     * This struct is used to keep track of the reconciliations with a given peer.\n+     * Transaction reconciliation means an efficient synchronization of the known\n+     * transactions between a pair of peers.\n+     * One reconciliation round consists of a sequence of messages. The sequence is\n+     * asymmetrical, there is always a requestor and a responder. At the end of the\n+     * sequence, nodes are supposed to exchange transactions, so that both of them\n+     * have all relevant transactions. For more protocol details, refer to BIP-0330.\n+     */\n+    struct ReconState {\n+        ReconState(){};",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 26,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "489c98c0778e424ff359dd587ef20fa820e246f4",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: perhaps the constructor can take initial values for all the members, so there's no risk that the members go uninitialized?  It looks like the way you are currently using this is to instantiate the object and immediately set everything, so I think this would be an easy change.",
      "created_at": "2020-12-11T13:42:26Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r540954946",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540954946"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 535,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540955695",
      "pull_request_review_id": 550089271,
      "id": 540955695,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk1NTY5NQ==",
      "diff_hunk": "@@ -143,6 +143,14 @@ class PeerManager final : public CValidationInterface, public NetEventsInterface\n     TxRequestTracker m_txrequest GUARDED_BY(::cs_main);\n \n     int64_t m_stale_tip_check_time; //!< Next time to check for stale tip\n+\n+    /**\n+     * Transaction reconciliation should happen with peers in the same order,\n+     * because the efficiency gain is the highest when reconciliation set difference\n+     * is predictable. This queue is used to maintain the order of\n+     * peers chosen for reconciliation.\n+     */\n+    std::deque<CNode*> m_recon_queue;",
      "path": "src/net_processing.h",
      "position": null,
      "original_position": 11,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "489c98c0778e424ff359dd587ef20fa820e246f4",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this probably needs a lock to synchronize access to this?",
      "created_at": "2020-12-11T13:43:36Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r540955695",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540955695"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 162,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/541017754",
      "pull_request_review_id": 550089271,
      "id": 541017754,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAxNzc1NA==",
      "diff_hunk": "@@ -4504,11 +4528,11 @@ bool PeerManager::SendMessages(CNode* pto)\n                 bool fSendTrickle = pto->HasPermission(PF_NOBAN);\n                 if (pto->m_tx_relay->nNextInvSend < current_time) {\n                     fSendTrickle = true;\n-                    if (pto->IsInboundConn()) {\n-                        pto->m_tx_relay->nNextInvSend = std::chrono::microseconds{m_connman.PoissonNextSendInbound(count_microseconds(current_time), INVENTORY_BROADCAST_INTERVAL)};\n-                    } else {\n-                        // Use half the delay for outbound peers, as there is less privacy concern for them.\n+                    if (peer->m_recon_state || !pto->IsInboundConn()) {",
      "path": "src/net_processing.cpp",
      "position": 560,
      "original_position": 125,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "e8fd1cb590161e88b64b2e20d3113310390e68a5",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "So inbound peers that are reconciling with us effectively get their own poisson timer -- can you explain why this is an ok change?  \r\n\r\nIt seems like an inbound peer that constantly tries to reconcile with us could be a more effective spy than before this change, but maybe I'm missing something.",
      "created_at": "2020-12-11T15:14:13Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r541017754",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/541017754"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4948,
      "original_line": 4948,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/541019792",
      "pull_request_review_id": 550089271,
      "id": 541019792,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAxOTc5Mg==",
      "diff_hunk": "@@ -4504,11 +4528,11 @@ bool PeerManager::SendMessages(CNode* pto)\n                 bool fSendTrickle = pto->HasPermission(PF_NOBAN);\n                 if (pto->m_tx_relay->nNextInvSend < current_time) {\n                     fSendTrickle = true;\n-                    if (pto->IsInboundConn()) {\n-                        pto->m_tx_relay->nNextInvSend = std::chrono::microseconds{m_connman.PoissonNextSendInbound(count_microseconds(current_time), INVENTORY_BROADCAST_INTERVAL)};\n-                    } else {\n-                        // Use half the delay for outbound peers, as there is less privacy concern for them.\n+                    if (peer->m_recon_state || !pto->IsInboundConn()) {",
      "path": "src/net_processing.cpp",
      "position": 560,
      "original_position": 125,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "e8fd1cb590161e88b64b2e20d3113310390e68a5",
      "in_reply_to_id": 541017754,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Also, it might be helpful for code readers if the way we check to see if we're reconciling with a peer is to call a function that explains that better (`peer->ReconEnabled()` or something), than checking to see if the `m_recon_state` object is a nullptr or not. But that's just a style nit, you can take it or leave it.",
      "created_at": "2020-12-11T15:17:04Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r541019792",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/541019792"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4948,
      "original_line": 4948,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/541025191",
      "pull_request_review_id": 550089271,
      "id": 541025191,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAyNTE5MQ==",
      "diff_hunk": "@@ -4598,9 +4623,17 @@ bool PeerManager::SendMessages(CNode* pto)\n                             continue;\n                         }\n                         if (pto->m_tx_relay->pfilter && !pto->m_tx_relay->pfilter->IsRelevantAndUpdate(*txinfo.tx)) continue;\n-                        // Send\n+\n+                        bool flood_tx = it->second;\n+                        if (!peer->m_recon_state || (peer->m_recon_state->m_flood_to && flood_tx))\n+                            // Always flood to non-reconciliation nodes supporting tx relay.\n+                            // For reconciliation nodes, flood if flood_to is set up and transaction is meant for flooding.\n+                            vInv.push_back(inv);\n+                        else {\n+                            // Storing to populate the reconciliation set.\n+                            txs_to_reconcile.push_back(txinfo.tx->GetWitnessHash());",
      "path": "src/net_processing.cpp",
      "position": 628,
      "original_position": 171,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "e8fd1cb590161e88b64b2e20d3113310390e68a5",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If we're reconciling with a peer, does it make sense to limit this loop to `INVENTORY_BROADCAST_MAX` transactions?  That is primarily a bandwidth throttling behavior, not a privacy behavior -- and since reconciliation is already bandwidth reducing itself, it might be beneficial to throw more things into the sketch sooner? \r\n\r\nOn the other hand, maybe it works out just fine if both parties are throttling like this and will have similarly sized sketches anyway...  Depends a bit on how much variation there might be between the number of times each side's poisson timer could fire in the window between reconciliations?",
      "created_at": "2020-12-11T15:24:37Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r541025191",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/541025191"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5043,
      "original_line": 5043,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/541028803",
      "pull_request_review_id": 550089271,
      "id": 541028803,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAyODgwMw==",
      "diff_hunk": "@@ -4634,6 +4667,28 @@ bool PeerManager::SendMessages(CNode* pto)\n                             pto->m_tx_relay->filterInventoryKnown.insert(txid);\n                         }\n                     }\n+\n+                    // Populating local reconciliation set.\n+                    if (peer->m_recon_state && txs_to_reconcile.size() != 0) {\n+                        assert(peer->m_recon_state->m_sender || peer->m_recon_state->m_responder);\n+                        int64_t recon_set_overflow = peer->m_recon_state->m_local_set.size() + txs_to_reconcile.size() - MAX_RECON_SET;\n+                        if (recon_set_overflow > 0) {\n+                            LogPrint(BCLog::NET, \"Reconciliation set for the peer=%d is at capacity, not adding new transactions. \\n\", pto->GetId());\n+                            // Since we reconcile frequently, it either means:\n+                            // (1) a peer for some reason does not request reconciliations from us for a long while, or\n+                            // (2) really a lot of valid fee-paying transactions were dumped on us at once.\n+                            // We don't care about a laggy peer (1) because we probably can't help them even if we flood transactions.\n+                            // However, exploiting (2) should not prevent us from relaying certain transactions.\n+                            // Since computing a sketch over too many elements is too expensive, we will just flood some transactions here.\n+                            std::vector<uint256> txs_to_flood = std::vector<uint256>(txs_to_reconcile.end() - recon_set_overflow, txs_to_reconcile.end());\n+                            txs_to_reconcile.resize(txs_to_reconcile.size() - recon_set_overflow);\n+                            AnnounceTxs(txs_to_flood, *pto, msgMaker, m_connman);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 197,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "e8fd1cb590161e88b64b2e20d3113310390e68a5",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Would it make more sense perhaps to announce the earliest transactions in the queue, rather than the most recent ones?  \r\n\r\nIt's possible this logic is fairly optimal, but here is what I was concerned about:\r\n- an inbound adversary could negotiate erlay support but then never send a reconciliation request, and so this queue fills up until we start just inv'ing them everything new anyway. Since we reduce the poisson timer for peers we think we're reconciling with, this could be a way to game a quicker INV time to be a better spy node.\r\n  * this doesn't seem to actually work because they'd have to wait for 2 poisson timers to go off before getting the prior batch of announcements, which is approximately the same (other than integer division) as the same inv timer that inbound peers normally get. Though perhaps this would get them their own poisson timer, rather than having to use the bucket that all inbounds share?  That seems not great -- an adversary could use multiple inbound connections this way to effectively get a small poisson timer (on average).\r\n\r\n- Countervailing idea is that if the peer is just held up for some reason, the older transactions are more likely to reconcile successfully than the newest ones, so it's probably bandwidth minimizing in the honest case to hang on to the older ones in the reconciliation set.",
      "created_at": "2020-12-11T15:29:37Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r541028803",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/541028803"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4880,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/541031015",
      "pull_request_review_id": 550089271,
      "id": 541031015,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAzMTAxNQ==",
      "diff_hunk": "@@ -123,12 +123,12 @@ static constexpr std::chrono::hours AVG_LOCAL_ADDRESS_BROADCAST_INTERVAL{24};\n static constexpr std::chrono::seconds AVG_ADDRESS_BROADCAST_INTERVAL{30};\n /** Average delay between trickled inventory transmissions in seconds.\n  *  Blocks and peers with noban permission bypass this, outbound peers get half this delay. */\n-static const unsigned int INVENTORY_BROADCAST_INTERVAL = 5;\n+static const unsigned int INVENTORY_BROADCAST_INTERVAL = 2;",
      "path": "src/net_processing.cpp",
      "position": 29,
      "original_position": 5,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "9832017da275614664e30532d9ac7882d30f1bb6",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "FYI, I believe that because this number used to be odd, the ratio of announcement delay to inbound versus outbound peers will change from 2.5 in the old code to 2 in the new code.  Not sure if that is cause for any concern though.",
      "created_at": "2020-12-11T15:32:44Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r541031015",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/541031015"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 135,
      "original_line": 135,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/541032397",
      "pull_request_review_id": 550089271,
      "id": 541032397,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAzMjM5Nw==",
      "diff_hunk": "@@ -123,12 +123,12 @@ static constexpr std::chrono::hours AVG_LOCAL_ADDRESS_BROADCAST_INTERVAL{24};\n static constexpr std::chrono::seconds AVG_ADDRESS_BROADCAST_INTERVAL{30};\n /** Average delay between trickled inventory transmissions in seconds.\n  *  Blocks and peers with noban permission bypass this, outbound peers get half this delay. */\n-static const unsigned int INVENTORY_BROADCAST_INTERVAL = 5;\n+static const unsigned int INVENTORY_BROADCAST_INTERVAL = 2;\n /** Maximum rate of inventory items to send per second.\n  *  Limits the impact of low-fee transaction floods. */\n static constexpr unsigned int INVENTORY_BROADCAST_PER_SECOND = 7;\n /** Maximum number of inventory items to send per transmission. */\n-static constexpr unsigned int INVENTORY_BROADCAST_MAX = INVENTORY_BROADCAST_PER_SECOND * INVENTORY_BROADCAST_INTERVAL;\n+static constexpr unsigned int INVENTORY_BROADCAST_MAX = INVENTORY_BROADCAST_PER_SECOND * INVENTORY_BROADCAST_INTERVAL * 4;",
      "path": "src/net_processing.cpp",
      "position": 35,
      "original_position": 11,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "9832017da275614664e30532d9ac7882d30f1bb6",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Can you explain why this needs to change, and how you arrived at multiplying by 4?",
      "created_at": "2020-12-11T15:34:34Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r541032397",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/541032397"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 140,
      "original_line": 140,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/541041135",
      "pull_request_review_id": 550089271,
      "id": 541041135,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0MTEzNQ==",
      "diff_hunk": "@@ -176,6 +176,12 @@ static const unsigned int MAX_RECON_SET = 10000;\n  * Less frequent reconciliations would introduce high transaction relay latency.\n  */\n static constexpr std::chrono::microseconds RECON_REQUEST_INTERVAL{std::chrono::seconds{16}};\n+/**\n+ * Interval between responding to peers' reconciliation requests.\n+ * We don't respond to reconciliation requests right away because that would enable monitoring\n+ * when we receive transactions (privacy leak).",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "3fc23c90edec1faaf61714272cc04c69fda811ca",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah, I didn't realize we respond to these asynchronously. If this isn't already in the BIP, perhaps it would be helpful to specify there that reconciliation responses are not guaranteed to be sent out in sync with other messages peers might send (such as pings, getdata, etc)?",
      "created_at": "2020-12-11T15:46:24Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r541041135",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/541041135"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 177,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/541044473",
      "pull_request_review_id": 550089271,
      "id": 541044473,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0NDQ3Mw==",
      "diff_hunk": "@@ -3993,6 +4028,22 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n         return;\n     }\n \n+    std::chrono::microseconds current_time = GetTime<std::chrono::microseconds>();\n+\n+    // Record an (expected) reconciliation request with parameters to respond when time comes.\n+    // All initial reconciliation responses will be done at the same time to prevent tx-related privacy leaks.\n+    if (msg_type == NetMsgType::REQRECON) {\n+        if (peer->m_recon_state == nullptr) return;\n+        if (!peer->m_recon_state->m_sender) return;\n+        if (peer->m_recon_state->m_incoming_recon != Peer::ReconState::ReconPhase::NONE) return;\n+        uint16_t peer_recon_set_size, peer_q;\n+        vRecv >> peer_recon_set_size >> peer_q;\n+        peer->m_recon_state->m_incoming_recon = Peer::ReconState::ReconPhase::INIT_REQUESTED;\n+        peer->m_recon_state->m_remote_set_size = peer_recon_set_size;\n+        peer->m_recon_state->m_remote_q = double(peer_q / Q_PRECISION);\n+        peer->m_recon_state->m_next_recon_respond = NextReconRespond(current_time);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 80,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "3fc23c90edec1faaf61714272cc04c69fda811ca",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should we snapshot our reconciliation set as of when we receive this request?  If we have a fixed delay and no snapshot, then I'm not sure how much privacy we gain by the 2 second delay (other than from throttling reconciliation requests from a single peer).",
      "created_at": "2020-12-11T15:51:09Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r541044473",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/541044473"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4181,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/541049259",
      "pull_request_review_id": 550089271,
      "id": 541049259,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0OTI1OQ==",
      "diff_hunk": "@@ -182,6 +183,20 @@ static constexpr std::chrono::microseconds RECON_REQUEST_INTERVAL{std::chrono::s\n  * when we receive transactions (privacy leak).\n  */\n static constexpr std::chrono::microseconds RECON_RESPONSE_INTERVAL{std::chrono::seconds{2}};\n+/** The size of the field, used to compute sketches to reconcile transactions (see BIP-330). */\n+static constexpr unsigned int RECON_FIELD_SIZE = 32;\n+static_assert(RECON_FIELD_SIZE % 8 == 0, \"Field size should be divisible by 8\");\n+static constexpr unsigned int BYTES_PER_SKETCH_CAPACITY = RECON_FIELD_SIZE / 8;\n+static constexpr uint16_t MAX_SKETCH_CAPACITY = 2 << 12;\n+/**\n+* It is possible that if sketch encodes more elements than the capacity, or\n+* if it is constructed of random bytes, sketch decoding may \"succeed\",\n+* but the result will be nonsense (false-positive decoding).\n+* Given this coef, a false positive probability will be of 1 in 2**coef.\n+*/\n+static constexpr unsigned int RECON_FALSE_POSITIVE_COEF = 16;\n+static_assert(RECON_FALSE_POSITIVE_COEF <= 256,\n+    \"Reducing reconciliation false positives beyond 1 in 2**256 is not supported\");",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "43f06991b5c2794a81b8f7cca25bf49c1573078c",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "We should try to figure out a better way to organize all these constants and the complexity of the logic away from the rest of `net_processing` -- not sure yet what to suggest but wanted to flag that this is now quite a lot of esoteric stuff we're adding to the top of this file.",
      "created_at": "2020-12-11T15:57:55Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r541049259",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/541049259"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 197,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/541059908",
      "pull_request_review_id": 550089271,
      "id": 541059908,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA1OTkwOA==",
      "diff_hunk": "@@ -4869,6 +4869,32 @@ bool PeerManager::SendMessages(CNode* pto)\n             }\n         }\n \n+        //\n+        // Message: reconciliation response\n+        //\n+        if (peer->m_recon_state) {\n+            // Respond to a requested reconciliation to enable efficient transaction exchange.\n+            // Respond only periodically to a) limit CPU usage for sketch computation,\n+            // and, b) limit transaction posesssion privacy leak.",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 10,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "516251924950287d2bc1ae8d880ac11db077526b",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "spelling nit: possession ",
      "created_at": "2020-12-11T16:14:00Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r541059908",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/541059908"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/541061891",
      "pull_request_review_id": 550089271,
      "id": 541061891,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA2MTg5MQ==",
      "diff_hunk": "@@ -4869,6 +4869,32 @@ bool PeerManager::SendMessages(CNode* pto)\n             }\n         }\n \n+        //\n+        // Message: reconciliation response\n+        //\n+        if (peer->m_recon_state) {\n+            // Respond to a requested reconciliation to enable efficient transaction exchange.\n+            // Respond only periodically to a) limit CPU usage for sketch computation,\n+            // and, b) limit transaction posesssion privacy leak.\n+            if (peer->m_recon_state->m_incoming_recon == Peer::ReconState::ReconPhase::INIT_REQUESTED && current_time > peer->m_recon_state->m_next_recon_respond) {\n+                std::vector<uint8_t> response_skdata;\n+                uint16_t sketch_capacity = peer->m_recon_state->EstimateSketchCapacity();\n+                minisketch* response_sketch = peer->m_recon_state->ComputeSketch(peer->m_recon_state->m_local_set, sketch_capacity);\n+                if (response_sketch != nullptr) {\n+                    // It is possible to create a sketch if we had at least one transaction to send to the peer.\n+                    size_t ser_size = minisketch_serialized_size(response_sketch);\n+                    uint8_t skdata[MAX_SKETCH_CAPACITY * BYTES_PER_SKETCH_CAPACITY];\n+                    minisketch_serialize(response_sketch, skdata);\n+                    response_skdata.resize(ser_size);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "516251924950287d2bc1ae8d880ac11db077526b",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Do we need to invoke `minisketch_destroy` on the `response_sketch` to avoid leaking memory?\r\n\r\nI'm also confused about why we need to serialize the sketch into a temporary array and then move it into another vector before sending our response.",
      "created_at": "2020-12-11T16:16:53Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r541061891",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/541061891"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4888,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/541063971",
      "pull_request_review_id": 550089271,
      "id": 541063971,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA2Mzk3MQ==",
      "diff_hunk": "@@ -4869,6 +4869,32 @@ bool PeerManager::SendMessages(CNode* pto)\n             }\n         }\n \n+        //\n+        // Message: reconciliation response\n+        //\n+        if (peer->m_recon_state) {\n+            // Respond to a requested reconciliation to enable efficient transaction exchange.\n+            // Respond only periodically to a) limit CPU usage for sketch computation,\n+            // and, b) limit transaction posesssion privacy leak.\n+            if (peer->m_recon_state->m_incoming_recon == Peer::ReconState::ReconPhase::INIT_REQUESTED && current_time > peer->m_recon_state->m_next_recon_respond) {\n+                std::vector<uint8_t> response_skdata;\n+                uint16_t sketch_capacity = peer->m_recon_state->EstimateSketchCapacity();\n+                minisketch* response_sketch = peer->m_recon_state->ComputeSketch(peer->m_recon_state->m_local_set, sketch_capacity);\n+                if (response_sketch != nullptr) {\n+                    // It is possible to create a sketch if we had at least one transaction to send to the peer.\n+                    size_t ser_size = minisketch_serialized_size(response_sketch);\n+                    uint8_t skdata[MAX_SKETCH_CAPACITY * BYTES_PER_SKETCH_CAPACITY];\n+                    minisketch_serialize(response_sketch, skdata);\n+                    response_skdata.resize(ser_size);\n+                    std::copy(skdata, skdata + ser_size, response_skdata.begin());\n+                }\n+                m_connman.PushMessage(pto, msgMaker.Make(NetMsgType::SKETCH, response_skdata));\n+\n+                peer->m_recon_state->m_incoming_recon = Peer::ReconState::ReconPhase::INIT_RESPONDED;\n+                peer->m_recon_state->m_local_set.clear();",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 26,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "516251924950287d2bc1ae8d880ac11db077526b",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I thought we needed to hang on to a snapshot of this in order to respond to sketch-extension requests?\r\n\r\nEDIT: Ah, this happens in a later commit.",
      "created_at": "2020-12-11T16:20:03Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r541063971",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/541063971"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4894,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/541097407",
      "pull_request_review_id": 550306249,
      "id": 541097407,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA5NzQwNw==",
      "diff_hunk": "@@ -827,6 +833,30 @@ static void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vec\n \n } // namespace\n \n+size_t PeerManager::GetTxRelayOutboundCountByRelayType(bool flooding) const\n+{\n+    size_t result = 0;\n+    m_connman.ForEachNode([flooding, &result](CNode* pnode) {\n+        if (!pnode->m_tx_relay)",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 21,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "5db8069b5690905b2588ad3fe77548cdb2d1681e",
      "in_reply_to_id": 540488569,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed this in the first batch of commits, will also fix for the rest.",
      "created_at": "2020-12-11T17:10:12Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r541097407",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/541097407"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 840,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/541103154",
      "pull_request_review_id": 550319793,
      "id": 541103154,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEwMzE1NA==",
      "diff_hunk": "@@ -2559,6 +2617,62 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n         return;\n     }\n \n+    // Received from an inbound peer planning to reconcilie transactions with us, or\n+    // from an outgoing peer demonstrating readiness to do reconciliations.\n+    // If received from outgoing, adds the peer to the reconciliation queue.\n+    // Feature negotiation of tx reconciliation should happen between VERSION and\n+    // VERACK, to avoid relay problems from switching after a connection is up.\n+    if (msg_type == NetMsgType::SENDRECON) {\n+        if (!pfrom.m_tx_relay) return;\n+        if (peer->m_recon_state != nullptr) return; // Do not support reconciliation salt/version updates.\n+\n+        bool recon_sender, recon_responder;\n+        uint64_t remote_salt;\n+        uint32_t recon_version;\n+        vRecv >> recon_sender >> recon_responder >> recon_version >> remote_salt;\n+        if (recon_version != 1) return;\n+\n+         // Do not flood through inbound connections which support reconciliation to save bandwidth.\n+         bool flood_to = false;\n+         if (pfrom.IsInboundConn()) {\n+             if (!recon_sender) return;\n+         } else {\n+             if (!recon_responder) return;\n+             // TODO: Flood only through a limited number of outbound connections.\n+            flood_to = true;\n+         }\n+\n+        peer->m_recon_state = MakeUnique<Peer::ReconState>();\n+        peer->m_recon_state->m_flood_to = flood_to;\n+        peer->m_recon_state->m_sender = recon_sender;\n+        peer->m_recon_state->m_responder = recon_responder;\n+        peer->m_recon_state->m_local_q = DEFAULT_RECON_Q;\n+\n+        uint64_t local_salt = peer->m_local_recon_salt;\n+\n+        std::string salt1, salt2;\n+        if (remote_salt < local_salt) {\n+            salt1 = ToString(remote_salt);\n+            salt2 = ToString(local_salt);\n+        } else {\n+            salt1 = ToString(local_salt);\n+            salt2 = ToString(remote_salt);\n+        }\n+        uint256 full_salt;\n+        CSHA256().Write((unsigned char*)RECON_STATIC_SALT.data(), RECON_STATIC_SALT.size()).\n+            Write((unsigned char*)salt1.data(), salt1.size()).\n+            Write((unsigned char*)salt2.data(), salt2.size()).\n+            Finalize(full_salt.begin());\n+        peer->m_recon_state->m_salt = full_salt;\n+\n+        // Reconcile with all outbound peers supporting reconciliation (even if we flood to them),\n+        // to not miss transactions they have for us but won't flood.\n+        if (peer->m_recon_state->m_responder) {\n+            m_recon_queue.push_back(&pfrom);",
      "path": "src/net_processing.cpp",
      "position": 349,
      "original_position": 127,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "2ac6f49703abd3293f5d14f20d1eda357b093a6a",
      "in_reply_to_id": 540481711,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Probably gonna be restrictive for now.",
      "created_at": "2020-12-11T17:19:36Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r541103154",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/541103154"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2990,
      "original_line": 2990,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/541103641",
      "pull_request_review_id": 550321029,
      "id": 541103641,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEwMzY0MQ==",
      "diff_hunk": "@@ -2559,6 +2617,62 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n         return;\n     }\n \n+    // Received from an inbound peer planning to reconcilie transactions with us, or\n+    // from an outgoing peer demonstrating readiness to do reconciliations.\n+    // If received from outgoing, adds the peer to the reconciliation queue.\n+    // Feature negotiation of tx reconciliation should happen between VERSION and\n+    // VERACK, to avoid relay problems from switching after a connection is up.\n+    if (msg_type == NetMsgType::SENDRECON) {\n+        if (!pfrom.m_tx_relay) return;\n+        if (peer->m_recon_state != nullptr) return; // Do not support reconciliation salt/version updates.\n+\n+        bool recon_sender, recon_responder;\n+        uint64_t remote_salt;\n+        uint32_t recon_version;\n+        vRecv >> recon_sender >> recon_responder >> recon_version >> remote_salt;\n+        if (recon_version != 1) return;\n+\n+         // Do not flood through inbound connections which support reconciliation to save bandwidth.\n+         bool flood_to = false;\n+         if (pfrom.IsInboundConn()) {\n+             if (!recon_sender) return;\n+         } else {\n+             if (!recon_responder) return;\n+             // TODO: Flood only through a limited number of outbound connections.\n+            flood_to = true;\n+         }\n+\n+        peer->m_recon_state = MakeUnique<Peer::ReconState>();\n+        peer->m_recon_state->m_flood_to = flood_to;\n+        peer->m_recon_state->m_sender = recon_sender;\n+        peer->m_recon_state->m_responder = recon_responder;\n+        peer->m_recon_state->m_local_q = DEFAULT_RECON_Q;\n+\n+        uint64_t local_salt = peer->m_local_recon_salt;\n+\n+        std::string salt1, salt2;\n+        if (remote_salt < local_salt) {\n+            salt1 = ToString(remote_salt);\n+            salt2 = ToString(local_salt);\n+        } else {\n+            salt1 = ToString(local_salt);\n+            salt2 = ToString(remote_salt);\n+        }\n+        uint256 full_salt;\n+        CSHA256().Write((unsigned char*)RECON_STATIC_SALT.data(), RECON_STATIC_SALT.size()).\n+            Write((unsigned char*)salt1.data(), salt1.size()).\n+            Write((unsigned char*)salt2.data(), salt2.size()).\n+            Finalize(full_salt.begin());\n+        peer->m_recon_state->m_salt = full_salt;\n+\n+        // Reconcile with all outbound peers supporting reconciliation (even if we flood to them),\n+        // to not miss transactions they have for us but won't flood.\n+        if (peer->m_recon_state->m_responder) {\n+            m_recon_queue.push_back(&pfrom);",
      "path": "src/net_processing.cpp",
      "position": 349,
      "original_position": 127,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "2ac6f49703abd3293f5d14f20d1eda357b093a6a",
      "in_reply_to_id": 540481711,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Updating the code and the BIP",
      "created_at": "2020-12-11T17:20:29Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r541103641",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/541103641"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2990,
      "original_line": 2990,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/541116815",
      "pull_request_review_id": 550089271,
      "id": 541116815,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTExNjgxNQ==",
      "diff_hunk": "@@ -661,6 +661,58 @@ struct Peer {\n             }\n             return sketch;\n         }\n+\n+        /**\n+         * After a reconciliation round is over, the local q coefficient may be adjusted to enable\n+         * better accuracy of future set difference estimations.\n+         * Recompute q in case of full reconciliation success (both initially or after extension).\n+         * In case reconciliation completely failed (initial and extension), fallback to the default q,\n+         * set to cause an overestimation, but should converge to the reasonable q in the next round.\n+         * Note that accurate recompute in case of complete failure is difficult, because it requires waiting for GETDATA/INV\n+         * the peer would send to us, and find the actual difference from there (also may be inaccurate due to the latencies).\n+         */\n+        enum LocalQAction {\n+            Q_KEEP,\n+            Q_RECOMPUTE,\n+            Q_SET_DEFAULT\n+        };\n+\n+        /**\n+         * Clears the state of the peer when the reconciliation is done.\n+         * If this is a extension finalization, keep the reconciliation set to track\n+         * the transactions received from other peers during the reconciliation.\n+         * Also keep the set if this if finalizing initial incoming reconciliation, because\n+         * there was a time frame when we sent out an initial sketch until peer responded.\n+         * If we're finalizing initial outgoing reconciliation, it is safe to clear the set,\n+         * because we do not use the snapshot, but sketch the original set (which might have received\n+         * few new transactions), and finalize the reconciliation immediately.\n+         */\n+        void FinalizeReconciliation(bool clear_local_set, LocalQAction action, size_t actual_local_missing, size_t actual_remote_missing)\n+        {\n+            // According to the erlay spec, reconciliation is initiated by inbound peers.\n+            if (m_sender) {\n+                assert(m_incoming_recon != ReconPhase::NONE);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 34,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "e0627a74733bd24f23e506d1e33589155d96c2c0",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This assert worried me a bit, since I figured that the `FinalizeReconciliation` could be triggered by a peer with a `reconcildiff` message without having sent a previous `reqreconcil`.  It looks like there is a guard to prevent that from happening, but it's not clear to me that `assert()` is what we want here.",
      "created_at": "2020-12-11T17:42:01Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r541116815",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/541116815"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 742,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/541120337",
      "pull_request_review_id": 550089271,
      "id": 541120337,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEyMDMzNw==",
      "diff_hunk": "@@ -2562,6 +2620,74 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n         return;\n     }\n \n+    // Received from an inbound peer planning to reconcile transactions with us, or\n+    // from an outgoing peer demonstrating readiness to do reconciliations.\n+    // If received from outgoing, adds the peer to the reconciliation queue.\n+    // Feature negotiation of tx reconciliation should happen between VERSION and\n+    // VERACK, to avoid relay problems from switching after a connection is up.\n+    if (msg_type == NetMsgType::SENDRECON) {\n+        if (!pfrom.m_tx_relay) return;\n+        if (peer->m_recon_state != nullptr) return; // Do not support reconciliation salt/version updates.\n+        LOCK(cs_main);\n+        if (!State(pfrom.GetId())->m_wtxid_relay) return; // SENDRECON is allowed only after WTXIDRELAY.\n+\n+        bool recon_sender, recon_responder;\n+        uint64_t remote_salt;\n+        uint32_t recon_version;\n+        vRecv >> recon_sender >> recon_responder >> recon_version >> remote_salt;\n+        if (recon_version != 1) return;\n+\n+        // Do not flood through inbound connections which support reconciliation to save bandwidth.\n+        bool flood_to = false;\n+        if (pfrom.IsInboundConn()) {\n+            // We currently don't support reconciliations with inbound peers which\n+            // don't want to be reconciliation senders (request our sketches),\n+            // or want to be reconciliation responders (send us their sketches).\n+            // Just ignore SENDRECON and use normal flooding for transaction relay with them.\n+            if (!recon_sender) return;\n+            if (recon_responder) return;\n+        } else {\n+            // We currently don't support reconciliations with outbound peers which\n+            // don't want to be reconciliation responders (send us their sketches),\n+            // or want to be reconciliation senders (request our sketches).\n+            // Just ignore SENDRECON and use normal flooding for transaction relay with them.\n+            if (recon_sender) return;\n+            if (!recon_responder) return;",
      "path": "src/net_processing.cpp",
      "position": 329,
      "original_position": 108,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "60a723ee676ce4259e0b3177d2fd1b5013dca649",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "So -- this logic means that we won't do any reconciliation with peers if their sender/responder settings don't match exactly what we expect inbound and outbound peers to do.  Should we add some sort of acknowledgement message so that both sides know whether reconciliation is enabled on the link?\r\n\r\nOur own logic seems to change based on whether we *think* we're reconciling with a peer; if some other implementation turns on both sending and responding (for instance) and then we silently ignore all their reconciliation requests, that seems suboptimal for everyone.  Likewise, if we think we've enabled reconciliation with a peer but it has a different policy, it would be better for our software to know that reconciliation isn't going to actually happen.",
      "created_at": "2020-12-11T17:47:40Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r541120337",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/541120337"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2970,
      "original_line": 2970,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/541134079",
      "pull_request_review_id": 550089271,
      "id": 541134079,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEzNDA3OQ==",
      "diff_hunk": "@@ -899,6 +926,14 @@ void PeerManager::UpdateNextReconRequest(std::chrono::microseconds now)\n     m_next_recon_request = now + RECON_REQUEST_INTERVAL / m_recon_queue.size();\n }\n \n+std::chrono::microseconds PeerManager::NextReconRespond(std::chrono::microseconds now)\n+{\n+    if (m_next_recon_respond < now) {\n+        m_next_recon_respond = now + RECON_RESPONSE_INTERVAL;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 55,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "95a6ab5d2dea0bd4ea4d07fbbeae8ffaa7e53835",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm wondering if this might be better as a poisson-timer, but I don't quite understand the implications of all this yet to reach a conclusion.  Intuition: with a fixed delay like this, an adversary with 2 inbound connections can use set reconciliation to measure the set difference between the node's transactions-to-announce in known and arbitrarily precise time slices.",
      "created_at": "2020-12-11T18:11:19Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r541134079",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/541134079"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 779,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/541136948",
      "pull_request_review_id": 550089271,
      "id": 541136948,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEzNjk0OA==",
      "diff_hunk": "@@ -610,6 +625,42 @@ struct Peer {\n             uint32_t short_txid = 1 + (s & 0xFFFFFFFF);\n             return short_txid;\n         }\n+\n+        /**\n+         * Estimate a capacity of a sketch we will send or use locally (to find set difference)\n+         * based on the local set size.\n+         */\n+        uint16_t EstimateSketchCapacity() {\n+            uint16_t set_size_diff = std::abs(uint16_t(m_local_set.size()) - m_remote_set_size);\n+            uint16_t min_size = std::min(uint16_t(m_local_set.size()), m_remote_set_size);\n+            uint16_t weighted_min_size = m_remote_q * min_size;\n+            uint16_t estimated_diff = 1 + weighted_min_size + set_size_diff;\n+            return minisketch_compute_capacity(RECON_FIELD_SIZE, estimated_diff, RECON_FALSE_POSITIVE_COEF);\n+        }\n+\n+        /**\n+         * Reconciliation involves computing a space-efficient representation of transaction identifiers (a sketch).\n+         * A sketch has a capacity meaning it allows reconciling at most a certain number of elements. (see BIP-330).\n+         * Considering whether we are going to send a sketch to a peer or use locally, we estimate the set difference.\n+         */\n+        minisketch* ComputeSketch(const std::set<uint256> local_set, uint16_t& capacity)\n+        {\n+            std::vector<uint32_t> short_ids;\n+            for (uint256 wtxid: local_set) {\n+                uint32_t short_txid = ComputeShortID(wtxid);\n+                short_ids.push_back(short_txid);\n+                m_local_short_id_mapping.insert(std::pair<uint32_t, uint256>(short_txid, wtxid));",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 57,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "bcade239e25f10ea6e1ac5f1553b5f26ea123282",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should the `m_local_short_id_mapping` be cleared out in this function?",
      "created_at": "2020-12-11T18:16:09Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r541136948",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/541136948"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 688,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/541138509",
      "pull_request_review_id": 550089271,
      "id": 541138509,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEzODUwOQ==",
      "diff_hunk": "@@ -4200,6 +4209,53 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n         peer->m_recon_state->m_next_recon_respond = NextReconRespond(current_time);\n         return;\n     }\n+\n+    // Received a response to the reconciliation request.\n+    // May leak tx-related privacy if we announce local transactions right away, if a peer is strategic about sending\n+    // sketches to us via different connections (requires attacker to occupy multiple outgoing connections).\n+    if (msg_type == NetMsgType::SKETCH) {\n+        if (peer->m_recon_state == nullptr) return;\n+        if (peer->m_recon_state->m_outgoing_recon != Peer::ReconState::ReconPhase::INIT_REQUESTED) return;\n+\n+        std::vector<uint8_t> skdata;\n+        vRecv >> skdata;\n+\n+        // Attempt to decode the received sketch with a local sketch.\n+        if (skdata.size() / BYTES_PER_SKETCH_CAPACITY > MAX_SKETCH_CAPACITY) return;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 39,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "19065cb401be011fd4f172658b5f84467abbe085",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this is a protocol violation and leaves the link in a permanently broken reconciliation state, since a reconcildiff would never be sent. Perhaps we should disconnect the peer if this happens?",
      "created_at": "2020-12-11T18:19:04Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r541138509",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/541138509"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3987,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/541139881",
      "pull_request_review_id": 550089271,
      "id": 541139881,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEzOTg4MQ==",
      "diff_hunk": "@@ -4200,6 +4209,53 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n         peer->m_recon_state->m_next_recon_respond = NextReconRespond(current_time);\n         return;\n     }\n+\n+    // Received a response to the reconciliation request.\n+    // May leak tx-related privacy if we announce local transactions right away, if a peer is strategic about sending\n+    // sketches to us via different connections (requires attacker to occupy multiple outgoing connections).\n+    if (msg_type == NetMsgType::SKETCH) {\n+        if (peer->m_recon_state == nullptr) return;\n+        if (peer->m_recon_state->m_outgoing_recon != Peer::ReconState::ReconPhase::INIT_REQUESTED) return;\n+\n+        std::vector<uint8_t> skdata;\n+        vRecv >> skdata;\n+\n+        // Attempt to decode the received sketch with a local sketch.\n+        if (skdata.size() / BYTES_PER_SKETCH_CAPACITY > MAX_SKETCH_CAPACITY) return;\n+        uint16_t remote_sketch_capacity = uint16_t(skdata.size() / BYTES_PER_SKETCH_CAPACITY);\n+        minisketch* remote_sketch = minisketch_create(RECON_FIELD_SIZE, 0, remote_sketch_capacity);\n+        uint8_t remote_sketch_serialized[MAX_SKETCH_CAPACITY * BYTES_PER_SKETCH_CAPACITY];\n+        std::copy(skdata.begin(), skdata.end(), remote_sketch_serialized);\n+        minisketch_deserialize(remote_sketch, remote_sketch_serialized);\n+\n+        minisketch* working_sketch; // Contains sketch of the set difference\n+        minisketch* local_sketch = peer->m_recon_state->ComputeSketch(peer->m_recon_state->m_local_set, remote_sketch_capacity);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 47,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "19065cb401be011fd4f172658b5f84467abbe085",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think we need to call `minisketch_destroy` on these somewhere to avoid a memory leak right?",
      "created_at": "2020-12-11T18:21:30Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r541139881",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/541139881"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4232,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/541149185",
      "pull_request_review_id": 550089271,
      "id": 541149185,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0OTE4NQ==",
      "diff_hunk": "@@ -4252,6 +4262,16 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n             AnnounceTxs(remote_missing, pfrom, msgMaker, m_connman);\n             m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::RECONCILDIFF, uint8_t(RECON_SUCCESS), local_missing));\n             peer->m_recon_state->FinalizeReconciliation(true, Peer::ReconState::LocalQAction::Q_RECOMPUTE, local_missing.size(), remote_missing.size());\n+        } else {\n+            // Initial reconciliation failed.\n+            // Store the received sketch and the local sketch, request extension.\n+\n+            assert(remote_sketch != nullptr);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 39,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "c14e819d5f0f0b4869bef62ff0314f8d9538915f",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is it possible for the peer to send us a message that causes `remote_sketch` to be nullptr here?",
      "created_at": "2020-12-11T18:37:33Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r541149185",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/541149185"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4269,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544266303",
      "pull_request_review_id": 553647191,
      "id": 544266303,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI2NjMwMw==",
      "diff_hunk": "@@ -2087,7 +2105,7 @@ void PeerManager::ProcessOrphanTx(std::set<uint256>& orphan_work_set)\n \n         if (AcceptToMemoryPool(m_mempool, state, porphanTx, &removed_txn, false /* bypass_limits */)) {\n             LogPrint(BCLog::MEMPOOL, \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n-            RelayTransaction(orphanHash, porphanTx->GetWitnessHash(), m_connman);\n+            RelayTransaction(orphanHash, porphanTx->GetWitnessHash(), m_connman, true);",
      "path": "src/net_processing.cpp",
      "position": 233,
      "original_position": 68,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "e8fd1cb590161e88b64b2e20d3113310390e68a5",
      "in_reply_to_id": 540947160,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think you're right, although we should be extra careful to make sure no privacy leak is introduced w.r.t topology.",
      "created_at": "2020-12-16T12:40:06Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r544266303",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544266303"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2298,
      "original_line": 2298,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544308769",
      "pull_request_review_id": 553697591,
      "id": 544308769,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDMwODc2OQ==",
      "diff_hunk": "@@ -123,12 +123,12 @@ static constexpr std::chrono::hours AVG_LOCAL_ADDRESS_BROADCAST_INTERVAL{24};\n static constexpr std::chrono::seconds AVG_ADDRESS_BROADCAST_INTERVAL{30};\n /** Average delay between trickled inventory transmissions in seconds.\n  *  Blocks and peers with noban permission bypass this, outbound peers get half this delay. */\n-static const unsigned int INVENTORY_BROADCAST_INTERVAL = 5;\n+static const unsigned int INVENTORY_BROADCAST_INTERVAL = 2;",
      "path": "src/net_processing.cpp",
      "position": 29,
      "original_position": 5,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "9832017da275614664e30532d9ac7882d30f1bb6",
      "in_reply_to_id": 541031015,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, so I think the ratio matters most. It was 2.5 and now it's 2, so a bit different.\r\nBut I'm also not 100% if this difference matters, while preserving 2.5 would require operating with floats now, so I decided to not, at least yet.",
      "created_at": "2020-12-16T13:44:41Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r544308769",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544308769"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 135,
      "original_line": 135,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544319767",
      "pull_request_review_id": 553711075,
      "id": 544319767,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDMxOTc2Nw==",
      "diff_hunk": "@@ -4252,6 +4262,16 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n             AnnounceTxs(remote_missing, pfrom, msgMaker, m_connman);\n             m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::RECONCILDIFF, uint8_t(RECON_SUCCESS), local_missing));\n             peer->m_recon_state->FinalizeReconciliation(true, Peer::ReconState::LocalQAction::Q_RECOMPUTE, local_missing.size(), remote_missing.size());\n+        } else {\n+            // Initial reconciliation failed.\n+            // Store the received sketch and the local sketch, request extension.\n+\n+            assert(remote_sketch != nullptr);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 39,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "c14e819d5f0f0b4869bef62ff0314f8d9538915f",
      "in_reply_to_id": 541149185,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Adding protection for this case.",
      "created_at": "2020-12-16T13:59:58Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r544319767",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544319767"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4269,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544368199",
      "pull_request_review_id": 553771995,
      "id": 544368199,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM2ODE5OQ==",
      "diff_hunk": "@@ -4200,6 +4209,53 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n         peer->m_recon_state->m_next_recon_respond = NextReconRespond(current_time);\n         return;\n     }\n+\n+    // Received a response to the reconciliation request.\n+    // May leak tx-related privacy if we announce local transactions right away, if a peer is strategic about sending\n+    // sketches to us via different connections (requires attacker to occupy multiple outgoing connections).\n+    if (msg_type == NetMsgType::SKETCH) {\n+        if (peer->m_recon_state == nullptr) return;\n+        if (peer->m_recon_state->m_outgoing_recon != Peer::ReconState::ReconPhase::INIT_REQUESTED) return;\n+\n+        std::vector<uint8_t> skdata;\n+        vRecv >> skdata;\n+\n+        // Attempt to decode the received sketch with a local sketch.\n+        if (skdata.size() / BYTES_PER_SKETCH_CAPACITY > MAX_SKETCH_CAPACITY) return;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 39,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "19065cb401be011fd4f172658b5f84467abbe085",
      "in_reply_to_id": 541138509,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not really permanently broken, they still have a chance to send us a proper sketch. But yeah, either finalizing or disconnecting would work. Making it disconnect for now.",
      "created_at": "2020-12-16T15:00:19Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r544368199",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544368199"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3987,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544378109",
      "pull_request_review_id": 553784751,
      "id": 544378109,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM3ODEwOQ==",
      "diff_hunk": "@@ -610,6 +625,42 @@ struct Peer {\n             uint32_t short_txid = 1 + (s & 0xFFFFFFFF);\n             return short_txid;\n         }\n+\n+        /**\n+         * Estimate a capacity of a sketch we will send or use locally (to find set difference)\n+         * based on the local set size.\n+         */\n+        uint16_t EstimateSketchCapacity() {\n+            uint16_t set_size_diff = std::abs(uint16_t(m_local_set.size()) - m_remote_set_size);\n+            uint16_t min_size = std::min(uint16_t(m_local_set.size()), m_remote_set_size);\n+            uint16_t weighted_min_size = m_remote_q * min_size;\n+            uint16_t estimated_diff = 1 + weighted_min_size + set_size_diff;\n+            return minisketch_compute_capacity(RECON_FIELD_SIZE, estimated_diff, RECON_FALSE_POSITIVE_COEF);\n+        }\n+\n+        /**\n+         * Reconciliation involves computing a space-efficient representation of transaction identifiers (a sketch).\n+         * A sketch has a capacity meaning it allows reconciling at most a certain number of elements. (see BIP-330).\n+         * Considering whether we are going to send a sketch to a peer or use locally, we estimate the set difference.\n+         */\n+        minisketch* ComputeSketch(const std::set<uint256> local_set, uint16_t& capacity)\n+        {\n+            std::vector<uint32_t> short_ids;\n+            for (uint256 wtxid: local_set) {\n+                uint32_t short_txid = ComputeShortID(wtxid);\n+                short_ids.push_back(short_txid);\n+                m_local_short_id_mapping.insert(std::pair<uint32_t, uint256>(short_txid, wtxid));",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 57,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "bcade239e25f10ea6e1ac5f1553b5f26ea123282",
      "in_reply_to_id": 541136948,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why so early? The point of it is to refer to it later, when we are requested something by short ID.\r\nThat's why it should be kept until `FinalizeReconciliation`. \r\n\r\nAlthough as currently implemented, I notice there's a bug, because we may lose short IDs of the transactions received during extension when calling this after the extension is over. I need to fix this part.",
      "created_at": "2020-12-16T15:12:42Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r544378109",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544378109"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 688,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544382513",
      "pull_request_review_id": 553790254,
      "id": 544382513,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM4MjUxMw==",
      "diff_hunk": "@@ -899,6 +926,14 @@ void PeerManager::UpdateNextReconRequest(std::chrono::microseconds now)\n     m_next_recon_request = now + RECON_REQUEST_INTERVAL / m_recon_queue.size();\n }\n \n+std::chrono::microseconds PeerManager::NextReconRespond(std::chrono::microseconds now)\n+{\n+    if (m_next_recon_respond < now) {\n+        m_next_recon_respond = now + RECON_RESPONSE_INTERVAL;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 55,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "95a6ab5d2dea0bd4ea4d07fbbeae8ffaa7e53835",
      "in_reply_to_id": 541134079,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I also don't have a good answer, but it's not that simple of an attack: we [have](https://github.com/bitcoin/bitcoin/pull/18261/files#r541017754) Poisson on adding to reconciliation sets.\r\n\r\nHaving another poison here, well, I don't think it makes anything worse. Maybe you're right.",
      "created_at": "2020-12-16T15:18:04Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r544382513",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544382513"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 779,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544386261",
      "pull_request_review_id": 553794945,
      "id": 544386261,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM4NjI2MQ==",
      "diff_hunk": "@@ -2562,6 +2620,74 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n         return;\n     }\n \n+    // Received from an inbound peer planning to reconcile transactions with us, or\n+    // from an outgoing peer demonstrating readiness to do reconciliations.\n+    // If received from outgoing, adds the peer to the reconciliation queue.\n+    // Feature negotiation of tx reconciliation should happen between VERSION and\n+    // VERACK, to avoid relay problems from switching after a connection is up.\n+    if (msg_type == NetMsgType::SENDRECON) {\n+        if (!pfrom.m_tx_relay) return;\n+        if (peer->m_recon_state != nullptr) return; // Do not support reconciliation salt/version updates.\n+        LOCK(cs_main);\n+        if (!State(pfrom.GetId())->m_wtxid_relay) return; // SENDRECON is allowed only after WTXIDRELAY.\n+\n+        bool recon_sender, recon_responder;\n+        uint64_t remote_salt;\n+        uint32_t recon_version;\n+        vRecv >> recon_sender >> recon_responder >> recon_version >> remote_salt;\n+        if (recon_version != 1) return;\n+\n+        // Do not flood through inbound connections which support reconciliation to save bandwidth.\n+        bool flood_to = false;\n+        if (pfrom.IsInboundConn()) {\n+            // We currently don't support reconciliations with inbound peers which\n+            // don't want to be reconciliation senders (request our sketches),\n+            // or want to be reconciliation responders (send us their sketches).\n+            // Just ignore SENDRECON and use normal flooding for transaction relay with them.\n+            if (!recon_sender) return;\n+            if (recon_responder) return;\n+        } else {\n+            // We currently don't support reconciliations with outbound peers which\n+            // don't want to be reconciliation responders (send us their sketches),\n+            // or want to be reconciliation senders (request our sketches).\n+            // Just ignore SENDRECON and use normal flooding for transaction relay with them.\n+            if (recon_sender) return;\n+            if (!recon_responder) return;",
      "path": "src/net_processing.cpp",
      "position": 329,
      "original_position": 108,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "60a723ee676ce4259e0b3177d2fd1b5013dca649",
      "in_reply_to_id": 541120337,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Right, this implementation prioritized simplicity here.\r\nPerhaps, I should add sending RECONACK, and also think whether at least some of the non-matching scenarios are compatible.",
      "created_at": "2020-12-16T15:22:39Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r544386261",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544386261"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2970,
      "original_line": 2970,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544917491",
      "pull_request_review_id": 554394621,
      "id": 544917491,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDkxNzQ5MQ==",
      "diff_hunk": "@@ -123,12 +123,12 @@ static constexpr std::chrono::hours AVG_LOCAL_ADDRESS_BROADCAST_INTERVAL{24};\n static constexpr std::chrono::seconds AVG_ADDRESS_BROADCAST_INTERVAL{30};\n /** Average delay between trickled inventory transmissions in seconds.\n  *  Blocks and peers with noban permission bypass this, outbound peers get half this delay. */\n-static const unsigned int INVENTORY_BROADCAST_INTERVAL = 5;\n+static const unsigned int INVENTORY_BROADCAST_INTERVAL = 2;\n /** Maximum rate of inventory items to send per second.\n  *  Limits the impact of low-fee transaction floods. */\n static constexpr unsigned int INVENTORY_BROADCAST_PER_SECOND = 7;\n /** Maximum number of inventory items to send per transmission. */\n-static constexpr unsigned int INVENTORY_BROADCAST_MAX = INVENTORY_BROADCAST_PER_SECOND * INVENTORY_BROADCAST_INTERVAL;\n+static constexpr unsigned int INVENTORY_BROADCAST_MAX = INVENTORY_BROADCAST_PER_SECOND * INVENTORY_BROADCAST_INTERVAL * 4;",
      "path": "src/net_processing.cpp",
      "position": 35,
      "original_position": 11,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "9832017da275614664e30532d9ac7882d30f1bb6",
      "in_reply_to_id": 541032397,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`INVENTORY_BROADCAST_PER_SECOND` is probably derived from the block size, so it shouldn't be changed.\r\n`INVENTORY_BROADCAST_INTERVAL` is just how long we wait between reconciliations with different peers (say 2 seconds).\r\n\r\nNow, imagine, a non-reachable node (which only learns from reconciliations), reconciled with a dysfunctional peer. So the stack of what it should learn during the next successful reconciliation is twice the regular size.\r\nAnd `INVENTORY_BROADCAST_MAX` should better accommodate for these cases, because otherwise what we'll get is at least inefficiency.\r\n\r\n\"*4\" is just an intuitive amortization for these cases.\r\n\r\nI probably should add the explanation to a commit message once we agree this makes sense.",
      "created_at": "2020-12-17T08:57:47Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r544917491",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544917491"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 140,
      "original_line": 140,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544932128",
      "pull_request_review_id": 554413230,
      "id": 544932128,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDkzMjEyOA==",
      "diff_hunk": "@@ -3993,6 +4028,22 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n         return;\n     }\n \n+    std::chrono::microseconds current_time = GetTime<std::chrono::microseconds>();\n+\n+    // Record an (expected) reconciliation request with parameters to respond when time comes.\n+    // All initial reconciliation responses will be done at the same time to prevent tx-related privacy leaks.\n+    if (msg_type == NetMsgType::REQRECON) {\n+        if (peer->m_recon_state == nullptr) return;\n+        if (!peer->m_recon_state->m_sender) return;\n+        if (peer->m_recon_state->m_incoming_recon != Peer::ReconState::ReconPhase::NONE) return;\n+        uint16_t peer_recon_set_size, peer_q;\n+        vRecv >> peer_recon_set_size >> peer_q;\n+        peer->m_recon_state->m_incoming_recon = Peer::ReconState::ReconPhase::INIT_REQUESTED;\n+        peer->m_recon_state->m_remote_set_size = peer_recon_set_size;\n+        peer->m_recon_state->m_remote_q = double(peer_q / Q_PRECISION);\n+        peer->m_recon_state->m_next_recon_respond = NextReconRespond(current_time);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 80,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "3fc23c90edec1faaf61714272cc04c69fda811ca",
      "in_reply_to_id": 541044473,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "We gain privacy by not allowing 2 peers to monitor our mempool, because we respond to them at the same time (every 2 seconds).\r\n\r\nSnapshoting earlier would hide the transactions received during the last 2 seconds and disable this kind of monitoring, but then reconciliations would not be so \"fresh\" (txs received during last 2s go into the next one).\r\nNot sure this kind of monitoring is that dangerous, especially since we *also* have a Poisson on adding to recon sets.",
      "created_at": "2020-12-17T09:20:01Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r544932128",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544932128"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4181,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544933569",
      "pull_request_review_id": 554415023,
      "id": 544933569,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDkzMzU2OQ==",
      "diff_hunk": "@@ -182,6 +183,20 @@ static constexpr std::chrono::microseconds RECON_REQUEST_INTERVAL{std::chrono::s\n  * when we receive transactions (privacy leak).\n  */\n static constexpr std::chrono::microseconds RECON_RESPONSE_INTERVAL{std::chrono::seconds{2}};\n+/** The size of the field, used to compute sketches to reconcile transactions (see BIP-330). */\n+static constexpr unsigned int RECON_FIELD_SIZE = 32;\n+static_assert(RECON_FIELD_SIZE % 8 == 0, \"Field size should be divisible by 8\");\n+static constexpr unsigned int BYTES_PER_SKETCH_CAPACITY = RECON_FIELD_SIZE / 8;\n+static constexpr uint16_t MAX_SKETCH_CAPACITY = 2 << 12;\n+/**\n+* It is possible that if sketch encodes more elements than the capacity, or\n+* if it is constructed of random bytes, sketch decoding may \"succeed\",\n+* but the result will be nonsense (false-positive decoding).\n+* Given this coef, a false positive probability will be of 1 in 2**coef.\n+*/\n+static constexpr unsigned int RECON_FALSE_POSITIVE_COEF = 16;\n+static_assert(RECON_FALSE_POSITIVE_COEF <= 256,\n+    \"Reducing reconciliation false positives beyond 1 in 2**256 is not supported\");",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "43f06991b5c2794a81b8f7cca25bf49c1573078c",
      "in_reply_to_id": 541049259,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, definitely, I have the same feel. Perhaps it better belongs to ReconState{}.",
      "created_at": "2020-12-17T09:22:12Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r544933569",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544933569"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 197,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546120863",
      "pull_request_review_id": 555851251,
      "id": 546120863,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjEyMDg2Mw==",
      "diff_hunk": "@@ -2560,6 +2621,69 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n         return;\n     }\n \n+    // Received from an inbound peer planning to reconcile transactions with us, or\n+    // from an outgoing peer demonstrating readiness to do reconciliations.\n+    // If received from outgoing, adds the peer to the reconciliation queue.\n+    // Feature negotiation of tx reconciliation should happen between VERSION and\n+    // VERACK, to avoid relay problems from switching after a connection is up.\n+    if (msg_type == NetMsgType::SENDRECON) {\n+        if (!pfrom.m_tx_relay) return;\n+        LOCK(peer->cs_recon_state);\n+        if (peer->m_recon_state != nullptr) return; // Do not support reconciliation salt/version updates.\n+        LOCK(cs_main);\n+        if (!State(pfrom.GetId())->m_wtxid_relay) return; // SENDRECON is allowed only after WTXIDRELAY.\n+\n+        bool recon_sender, recon_responder;\n+        uint64_t remote_salt;\n+        uint32_t recon_version;\n+        vRecv >> recon_sender >> recon_responder >> recon_version >> remote_salt;\n+        if (recon_version != 1) return;\n+\n+        // Do not flood through inbound connections which support reconciliation to save bandwidth.\n+        bool flood_to = false;\n+        if (pfrom.IsInboundConn()) {\n+            // We currently don't support reconciliations with inbound peers which\n+            // don't want to be reconciliation senders (request our sketches),\n+            // or want to be reconciliation responders (send us their sketches).\n+            // Just ignore SENDRECON and use normal flooding for transaction relay with them.\n+            if (!recon_sender) return;\n+            if (recon_responder) return;\n+        } else {\n+            // We currently don't support reconciliations with outbound peers which\n+            // don't want to be reconciliation responders (send us their sketches),\n+            // or want to be reconciliation senders (request our sketches).\n+            // Just ignore SENDRECON and use normal flooding for transaction relay with them.\n+            if (recon_sender) return;\n+            if (!recon_responder) return;\n+            // TODO: Flood only through a limited number of outbound connections.\n+            flood_to = true;\n+        }\n+\n+        uint64_t local_salt = peer->m_local_recon_salt;\n+        std::string salt1, salt2;\n+        if (remote_salt < local_salt) {\n+            salt1 = ToString(remote_salt);\n+            salt2 = ToString(local_salt);\n+        } else {\n+            salt1 = ToString(local_salt);\n+            salt2 = ToString(remote_salt);\n+        }\n+        uint256 full_salt;\n+        CSHA256().Write((unsigned char*)RECON_STATIC_SALT.data(), RECON_STATIC_SALT.size()).",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 127,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "9da045b6f563fb5ba2bf369613ab388b0cc8ce73",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "BIP comment, and commit \"Handle reconciliation support announcement\":\r\n\r\nShould we use a BIP340 tagged hash here (see `TaggedHash()` in src/hash.h)?",
      "created_at": "2020-12-18T22:28:40Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r546120863",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546120863"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2672,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546122011",
      "pull_request_review_id": 555851251,
      "id": 546122011,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjEyMjAxMQ==",
      "diff_hunk": "@@ -461,6 +465,63 @@ struct Peer {\n      * of relay of particular transactions due to collisions in short IDs.\n      */\n     const uint64_t m_local_recon_salt;\n+\n+    /**\n+     * This struct is used to keep track of the reconciliations with a given peer.\n+     * Transaction reconciliation means an efficient synchronization of the known\n+     * transactions between a pair of peers.\n+     * One reconciliation round consists of a sequence of messages. The sequence is\n+     * asymmetrical, there is always a requestor and a responder. At the end of the\n+     * sequence, nodes are supposed to exchange transactions, so that both of them\n+     * have all relevant transactions. For more protocol details, refer to BIP-0330.\n+     */\n+    struct ReconState {\n+        // ReconState(){};\n+        ReconState(bool sender, bool responder, bool flood_to, uint256 salt) :\n+            m_sender(sender), m_responder(responder), m_flood_to(flood_to), m_salt(salt), m_local_q(DEFAULT_RECON_Q) {}\n+\n+        /// Whether this peer will send reconciliation requests.\n+        bool m_sender;\n+\n+        /// Whether this peer will respond to reconciliation requests.\n+        bool m_responder;\n+\n+        /**\n+         * Whether we should flood transactions to the peer.",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 37,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "9da045b6f563fb5ba2bf369613ab388b0cc8ce73",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Handle reconciliation support announcement\":\r\n\r\nThis comment isn't entirely clear to me. Flood transactions to the peer, as opposed to what (given that in the next line you say it's not in conflict with reconciliation, so it's not clear to me if this means instead of, or in addition to, reconciliation).",
      "created_at": "2020-12-18T22:32:37Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r546122011",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546122011"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 490,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546122109",
      "pull_request_review_id": 555851251,
      "id": 546122109,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjEyMjEwOQ==",
      "diff_hunk": "@@ -461,6 +465,63 @@ struct Peer {\n      * of relay of particular transactions due to collisions in short IDs.\n      */\n     const uint64_t m_local_recon_salt;\n+\n+    /**\n+     * This struct is used to keep track of the reconciliations with a given peer.\n+     * Transaction reconciliation means an efficient synchronization of the known\n+     * transactions between a pair of peers.\n+     * One reconciliation round consists of a sequence of messages. The sequence is\n+     * asymmetrical, there is always a requestor and a responder. At the end of the\n+     * sequence, nodes are supposed to exchange transactions, so that both of them\n+     * have all relevant transactions. For more protocol details, refer to BIP-0330.\n+     */\n+    struct ReconState {\n+        // ReconState(){};\n+        ReconState(bool sender, bool responder, bool flood_to, uint256 salt) :\n+            m_sender(sender), m_responder(responder), m_flood_to(flood_to), m_salt(salt), m_local_q(DEFAULT_RECON_Q) {}\n+\n+        /// Whether this peer will send reconciliation requests.\n+        bool m_sender;\n+\n+        /// Whether this peer will respond to reconciliation requests.\n+        bool m_responder;\n+\n+        /**\n+         * Whether we should flood transactions to the peer.\n+         * Reconciliation between two nodes does not prevent these nodes\n+         * from flooding transactions to each other.\n+         * Selective flooding of transactions to only specific peers makes\n+         * transaction relay significantly faster.\n+         */\n+        bool m_flood_to;\n+\n+        /**\n+         * Reconciliation involves computing and transmitting sketches,\n+         * which is a bandwidth-efficient representation of transaction IDs.\n+         * Since computing sketches over full txID is too CPU-expensive,\n+         * they will be computed over shortened IDs instead.\n+         * These short IDs will be salted so that they are not the same\n+         * across all pairs of peers, because otherwise it would enable network-wide\n+         * collisions which may (intentionally or not) halt relay of certain transactions.\n+         * Both of the peers contribute to the salt.\n+         */\n+        uint256 m_salt;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 55,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "9da045b6f563fb5ba2bf369613ab388b0cc8ce73",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Handle reconciliation support announcement\":\r\n\r\nThe salt is only 128 bits, right? Why uint256? In the codebase we usually call SipHash salts k0 and k1.",
      "created_at": "2020-12-18T22:33:07Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r546122109",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546122109"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 508,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546122819",
      "pull_request_review_id": 555851251,
      "id": 546122819,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjEyMjgxOQ==",
      "diff_hunk": "@@ -461,6 +465,63 @@ struct Peer {\n      * of relay of particular transactions due to collisions in short IDs.\n      */\n     const uint64_t m_local_recon_salt;\n+\n+    /**\n+     * This struct is used to keep track of the reconciliations with a given peer.\n+     * Transaction reconciliation means an efficient synchronization of the known\n+     * transactions between a pair of peers.\n+     * One reconciliation round consists of a sequence of messages. The sequence is\n+     * asymmetrical, there is always a requestor and a responder. At the end of the\n+     * sequence, nodes are supposed to exchange transactions, so that both of them\n+     * have all relevant transactions. For more protocol details, refer to BIP-0330.\n+     */\n+    struct ReconState {\n+        // ReconState(){};\n+        ReconState(bool sender, bool responder, bool flood_to, uint256 salt) :\n+            m_sender(sender), m_responder(responder), m_flood_to(flood_to), m_salt(salt), m_local_q(DEFAULT_RECON_Q) {}\n+\n+        /// Whether this peer will send reconciliation requests.\n+        bool m_sender;\n+\n+        /// Whether this peer will respond to reconciliation requests.\n+        bool m_responder;\n+\n+        /**\n+         * Whether we should flood transactions to the peer.\n+         * Reconciliation between two nodes does not prevent these nodes\n+         * from flooding transactions to each other.\n+         * Selective flooding of transactions to only specific peers makes\n+         * transaction relay significantly faster.\n+         */\n+        bool m_flood_to;\n+\n+        /**\n+         * Reconciliation involves computing and transmitting sketches,\n+         * which is a bandwidth-efficient representation of transaction IDs.\n+         * Since computing sketches over full txID is too CPU-expensive,\n+         * they will be computed over shortened IDs instead.\n+         * These short IDs will be salted so that they are not the same\n+         * across all pairs of peers, because otherwise it would enable network-wide\n+         * collisions which may (intentionally or not) halt relay of certain transactions.\n+         * Both of the peers contribute to the salt.\n+         */\n+        uint256 m_salt;\n+\n+        /**\n+         * Computing a set reconciliation sketch involves estimating the difference\n+         * between sets of transactions on two sides of the connection. More specifically,\n+         * a sketch capacity is computed as\n+         * |set_size - local_set_size| + q * (set_size + local_set_size) + c,\n+         * where c is a small constant, and q is a node+connection-specific coefficient.\n+         * This coefficient is recomputed by every node based on its previous reconciliations,\n+         * to better predict future set size differences.\n+         */\n+        double m_local_q;\n+    };\n+\n+    RecursiveMutex cs_recon_state;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 69,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "9da045b6f563fb5ba2bf369613ab388b0cc8ce73",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Handle reconciliation support announcement\"\r\n\r\nIs it necessary to use a recursive mutex here? If you can avoid them, Mutex is more efficient and easier to reason about.",
      "created_at": "2020-12-18T22:35:24Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r546122819",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546122819"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 812,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546125410",
      "pull_request_review_id": 555851251,
      "id": 546125410,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjEyNTQxMA==",
      "diff_hunk": "@@ -2562,6 +2620,74 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n         return;\n     }\n \n+    // Received from an inbound peer planning to reconcile transactions with us, or\n+    // from an outgoing peer demonstrating readiness to do reconciliations.\n+    // If received from outgoing, adds the peer to the reconciliation queue.\n+    // Feature negotiation of tx reconciliation should happen between VERSION and\n+    // VERACK, to avoid relay problems from switching after a connection is up.\n+    if (msg_type == NetMsgType::SENDRECON) {\n+        if (!pfrom.m_tx_relay) return;\n+        if (peer->m_recon_state != nullptr) return; // Do not support reconciliation salt/version updates.\n+        LOCK(cs_main);\n+        if (!State(pfrom.GetId())->m_wtxid_relay) return; // SENDRECON is allowed only after WTXIDRELAY.\n+\n+        bool recon_sender, recon_responder;\n+        uint64_t remote_salt;\n+        uint32_t recon_version;\n+        vRecv >> recon_sender >> recon_responder >> recon_version >> remote_salt;\n+        if (recon_version != 1) return;\n+\n+        // Do not flood through inbound connections which support reconciliation to save bandwidth.\n+        bool flood_to = false;\n+        if (pfrom.IsInboundConn()) {\n+            // We currently don't support reconciliations with inbound peers which\n+            // don't want to be reconciliation senders (request our sketches),\n+            // or want to be reconciliation responders (send us their sketches).\n+            // Just ignore SENDRECON and use normal flooding for transaction relay with them.\n+            if (!recon_sender) return;\n+            if (recon_responder) return;\n+        } else {\n+            // We currently don't support reconciliations with outbound peers which\n+            // don't want to be reconciliation responders (send us their sketches),\n+            // or want to be reconciliation senders (request our sketches).\n+            // Just ignore SENDRECON and use normal flooding for transaction relay with them.\n+            if (recon_sender) return;\n+            if (!recon_responder) return;",
      "path": "src/net_processing.cpp",
      "position": 329,
      "original_position": 108,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "60a723ee676ce4259e0b3177d2fd1b5013dca649",
      "in_reply_to_id": 541120337,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "BIP comment:\r\n\r\nI think it's possible to specify the behavior exactly without the need for an ACK message, but perhaps this is a detail you don't actually want in the BIP:\r\n* We send (us_sender, us_responder, us_version)\r\n* We receive (they_sender, they_responder, they_version)\r\n* Define out_recon = us_sender && they_responder\r\n* Define in_recon = they_sender && us_responder\r\n* If !(out_recon || in_recon), reconciliation is disabled.\r\n* If exactly one of out_recon or in_recon, reconciliation (with us as requestor if out_recon, as responder otherwise) is enabled with protocol version min(us_version, they_version).\r\n* If both out_recon and in_recon, reconciliation is enabled with version min(us_version, they_version), in some tie-breaking direction (prefer outbound->inbound for example, or pick the one with the lowest nonce, ...)?\r\n* If no SENDRECON is received by the time VERACK happens, reconciliation is disabled.\r\n\r\nThis also means a new recon protocol can be introduced in a backward-compatible way. If the other party announced recon protocol 2, things will just default to protocol 1 without problems (which means forcing any client that supports protocol 2 to also support protocol 1). If a change would be made that is so incompatible that we don't expect clients to support the old one anymore, a different negotiation message would be used, or 0 could be sent.\r\n\r\nIn commit \"Handle reconciliation support announcement\":\r\n\r\nThe code would be something like this to accomodate that:\r\n\r\n```c++\r\n/* must match announcement logic */\r\nstatic constexpr uint32_t RECON_VERSION = 1;\r\nbool us_sender = !IsInBound(), us_responder = IsInBound(); \r\n\r\nbool they_sender, they_responder;\r\nvRecv >> they_sender >> they_responder >> recon_version >> remote_salt;\r\nrecon_version = std::min(recon_version, RECON_VERSION);\r\nif (recon_version < 1) return;\r\nbool recon_sender = us_sender && they_responder, recon_responder = us_responder && they_sender;\r\n// If we ever announce us_sender && us_responder, this will need tie-breaking (picking the outbound side as sender)\r\nassert(!(recon_sender && recon_responder));\r\n```\r\n",
      "created_at": "2020-12-18T22:44:13Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r546125410",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546125410"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2970,
      "original_line": 2970,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546141650",
      "pull_request_review_id": 555851251,
      "id": 546141650,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE0MTY1MA==",
      "diff_hunk": "@@ -2560,6 +2621,69 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n         return;\n     }\n \n+    // Received from an inbound peer planning to reconcile transactions with us, or\n+    // from an outgoing peer demonstrating readiness to do reconciliations.\n+    // If received from outgoing, adds the peer to the reconciliation queue.\n+    // Feature negotiation of tx reconciliation should happen between VERSION and\n+    // VERACK, to avoid relay problems from switching after a connection is up.\n+    if (msg_type == NetMsgType::SENDRECON) {\n+        if (!pfrom.m_tx_relay) return;\n+        LOCK(peer->cs_recon_state);\n+        if (peer->m_recon_state != nullptr) return; // Do not support reconciliation salt/version updates.\n+        LOCK(cs_main);\n+        if (!State(pfrom.GetId())->m_wtxid_relay) return; // SENDRECON is allowed only after WTXIDRELAY.\n+\n+        bool recon_sender, recon_responder;\n+        uint64_t remote_salt;\n+        uint32_t recon_version;\n+        vRecv >> recon_sender >> recon_responder >> recon_version >> remote_salt;\n+        if (recon_version != 1) return;\n+\n+        // Do not flood through inbound connections which support reconciliation to save bandwidth.\n+        bool flood_to = false;\n+        if (pfrom.IsInboundConn()) {\n+            // We currently don't support reconciliations with inbound peers which\n+            // don't want to be reconciliation senders (request our sketches),\n+            // or want to be reconciliation responders (send us their sketches).\n+            // Just ignore SENDRECON and use normal flooding for transaction relay with them.\n+            if (!recon_sender) return;\n+            if (recon_responder) return;\n+        } else {\n+            // We currently don't support reconciliations with outbound peers which\n+            // don't want to be reconciliation responders (send us their sketches),\n+            // or want to be reconciliation senders (request our sketches).\n+            // Just ignore SENDRECON and use normal flooding for transaction relay with them.\n+            if (recon_sender) return;\n+            if (!recon_responder) return;\n+            // TODO: Flood only through a limited number of outbound connections.\n+            flood_to = true;\n+        }\n+\n+        uint64_t local_salt = peer->m_local_recon_salt;\n+        std::string salt1, salt2;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 118,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "9da045b6f563fb5ba2bf369613ab388b0cc8ce73",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Handle reconciliation support announcement\"\r\n\r\nThis conversion to decimal strings doesn't seem to match the BIP. I would think you'd do:\r\n\r\n```c++\r\nuint64_t salt1 = local_salt, salt2 = remote_salt;\r\nif (salt1 > salt2) std::swap(salt1, salt2);\r\nuint256 full_salt = (CHashWriter(SER_HASH, 0) << MakeSpan(RECON_STATIC_SALT) << salt1 << salt2).GetSHA256();\r\n```\r\n\r\nIf the BIP is changed to use tagged hashes, you'd do\r\n\r\n```c++\r\nstatic const auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\r\nuint256 full_salt = (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();\r\n```\r\n\r\ninstead.",
      "created_at": "2020-12-18T23:16:03Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r546141650",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546141650"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2663,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546142850",
      "pull_request_review_id": 555851251,
      "id": 546142850,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE0Mjg1MA==",
      "diff_hunk": "@@ -143,6 +143,14 @@ class PeerManager final : public CValidationInterface, public NetEventsInterface\n     TxRequestTracker m_txrequest GUARDED_BY(::cs_main);\n \n     int64_t m_stale_tip_check_time; //!< Next time to check for stale tip\n+\n+    /**\n+     * Transaction reconciliation should happen with peers in the same order,\n+     * because the efficiency gain is the highest when reconciliation set difference\n+     * is predictable. This queue is used to maintain the order of\n+     * peers chosen for reconciliation.\n+     */\n+    std::deque<CNode*> m_recon_queue;",
      "path": "src/net_processing.h",
      "position": null,
      "original_position": 11,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "9da045b6f563fb5ba2bf369613ab388b0cc8ce73",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Handle reconciliation support announcement\":\r\n\r\nThe comment of m_recon_queue needing a lock doesn't seem resolved?",
      "created_at": "2020-12-18T23:21:00Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r546142850",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546142850"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 162,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546146253",
      "pull_request_review_id": 555851251,
      "id": 546146253,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE0NjI1Mw==",
      "diff_hunk": "@@ -2370,6 +2370,28 @@ static void ProcessGetCFCheckPt(CNode& peer, CDataStream& vRecv, const CChainPar\n     connman.PushMessage(&peer, std::move(msg));\n }\n \n+/**\n+ * Announce transactions a peer is missing after reconciliation is done.\n+ * No need to add transactions to peer's filter or do checks\n+ * because it was already done when adding to the reconciliation set.\n+ */\n+void static AnnounceTxs(std::vector<uint256> remote_missing_wtxids, CNode* pto, CNetMsgMaker msgMaker, CConnman* connman)\n+{\n+    if (remote_missing_wtxids.size() != 0) {\n+        std::vector<CInv> remote_missing_invs;\n+        for (uint256 wtxid: remote_missing_wtxids) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "9347a73f01c13a0187b7a70d5315052726ad65ac",
      "in_reply_to_id": 540498519,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Or even `const auto& wtxid : ...` to be sure no copy is created, regardless of the type of the container.",
      "created_at": "2020-12-18T23:34:57Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r546146253",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546146253"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2694,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546148014",
      "pull_request_review_id": 555851251,
      "id": 546148014,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE0ODAxNA==",
      "diff_hunk": "@@ -1190,12 +1191,12 @@ class CNode\n         }\n     }\n \n-    void PushTxInventory(const uint256& hash)\n+    void PushTxInventory(const uint256& hash, const bool flood)\n     {\n         if (m_tx_relay == nullptr) return;\n         LOCK(m_tx_relay->cs_tx_inventory);\n         if (!m_tx_relay->filterInventoryKnown.contains(hash)) {\n-            m_tx_relay->setInventoryTxToSend.insert(hash);\n+            m_tx_relay->setInventoryTxToSend.insert(std::pair<uint256, bool>(hash, flood));",
      "path": "src/net.h",
      "position": null,
      "original_position": 25,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "49a18d73df9590e8f0f1b923a768f8f65095bed2",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Distinguish transactions to flood and to reconcile\":\r\n\r\nYou can use\r\n\r\n```c++\r\nm_tx_relay->setInventoryTxToSend.emplace(hash, flood);\r\n```\r\n\r\nhere instead.\r\n\r\n",
      "created_at": "2020-12-18T23:42:50Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r546148014",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546148014"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1199,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546151144",
      "pull_request_review_id": 555851251,
      "id": 546151144,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE1MTE0NA==",
      "diff_hunk": "@@ -156,6 +156,16 @@ static constexpr double DEFAULT_RECON_Q = 0.02;\n  * It helps to save bandwidth and reduce the privacy leak.\n  */\n static constexpr uint32_t MAX_OUTBOUND_FLOOD_TO = 8;\n+/**\n+ * Maximum number of elements to store in the reconciliation set.\n+ * Used to bound the memory use. If the limit is reached, new transactions are not added and\n+ * forgotten w.r.t. relaying to that peer.\n+ * Sets the bound on the following objects:\n+ * - reconciliation set\n+ * - reconciliation set snapshot\n+ * - reconciliation short-full id mapping\n+ */\n+static const unsigned int MAX_RECON_SET = 10000;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "49a18d73df9590e8f0f1b923a768f8f65095bed2",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Distinguish transactions to flood and to reconcile\"\r\n\r\nWould it make sense to reuse `MAX_PEER_TX_ANNOUNCEMENTS` here? It was reduced to 5000 in #19988.",
      "created_at": "2020-12-18T23:48:27Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r546151144",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546151144"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 171,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546167320",
      "pull_request_review_id": 555851251,
      "id": 546167320,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE2NzMyMA==",
      "diff_hunk": "@@ -2560,6 +2621,69 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n         return;\n     }\n \n+    // Received from an inbound peer planning to reconcile transactions with us, or\n+    // from an outgoing peer demonstrating readiness to do reconciliations.\n+    // If received from outgoing, adds the peer to the reconciliation queue.\n+    // Feature negotiation of tx reconciliation should happen between VERSION and\n+    // VERACK, to avoid relay problems from switching after a connection is up.\n+    if (msg_type == NetMsgType::SENDRECON) {\n+        if (!pfrom.m_tx_relay) return;",
      "path": "src/net_processing.cpp",
      "position": 301,
      "original_position": 85,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "9da045b6f563fb5ba2bf369613ab388b0cc8ce73",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Handle reconciliation support announcement\" (and BIP)\r\n\r\nDo we want to ignore or disconnect if this message arrives after VERACK?",
      "created_at": "2020-12-19T01:07:01Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r546167320",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546167320"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2942,
      "original_line": 2942,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546170672",
      "pull_request_review_id": 555851251,
      "id": 546170672,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE3MDY3Mg==",
      "diff_hunk": "@@ -4608,9 +4645,17 @@ bool PeerManager::SendMessages(CNode* pto)\n                             continue;\n                         }\n                         if (pto->m_tx_relay->pfilter && !pto->m_tx_relay->pfilter->IsRelevantAndUpdate(*txinfo.tx)) continue;\n-                        // Send\n+\n+                        bool flood_tx = it->second;\n+                        if (!peer->m_recon_state || (peer->m_recon_state->m_flood_to && flood_tx))",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 181,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "49a18d73df9590e8f0f1b923a768f8f65095bed2",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Distinguish transactions to flood and to reconcile\":\r\n\r\nNit: coding style (use { ... } for multi-line ifs).",
      "created_at": "2020-12-19T01:28:27Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r546170672",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546170672"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5118,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546301880",
      "pull_request_review_id": 555851251,
      "id": 546301880,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMwMTg4MA==",
      "diff_hunk": "@@ -1009,9 +1009,10 @@ class CNode\n \n         mutable RecursiveMutex cs_tx_inventory;\n         CRollingBloomFilter filterInventoryKnown GUARDED_BY(cs_tx_inventory){50000, 0.000001};\n-        // Set of transaction ids we still have to announce.\n-        // They are sorted by the mempool before relay, so the order is not important.\n-        std::set<uint256> setInventoryTxToSend;\n+        // Set of transaction ids we still have to announce, and whether we may flood them\n+        // in case if peer is meant to receive flooding, as opposed to reconcile.\n+        // Transactions are sorted by the mempool before relay, so the order is not important.",
      "path": "src/net.h",
      "position": null,
      "original_position": 9,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "49a18d73df9590e8f0f1b923a768f8f65095bed2",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Distinguish transactions to flood and to reconcile\"\r\n\r\nPerhaps it's useful to comment on the exact semantics for the bool parameter here. IIRC it is:\r\n* false: use reconciliation if negotiated, flood otherwise\r\n* true: flood unless reconciliation negotiated and this is not a flooding peer\r\n",
      "created_at": "2020-12-20T00:36:28Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r546301880",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546301880"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1022,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546306680",
      "pull_request_review_id": 555851251,
      "id": 546306680,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMwNjY4MA==",
      "diff_hunk": "@@ -146,6 +147,65 @@ static constexpr uint32_t MAX_GETCFILTERS_SIZE = 1000;\n static constexpr uint32_t MAX_GETCFHEADERS_SIZE = 2000;\n /** the maximum percentage of addresses from our addrman to return in response to a getaddr message. */\n static constexpr size_t MAX_PCT_ADDR_TO_SEND = 23;\n+/** Static component of the salt used to compute short txids for transaction reconciliation. */\n+static const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+/** Used to convert a floating point reconciliation coefficient q to an int for transmission. */\n+static constexpr double Q_PRECISION{2 << 12};",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 30,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "80bde2b1aae6897ba29a6d18ef76cd8990daeff5",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "BIP comment: why 12 bits? You could have 16 bits of accuracy with the 2 bytes that it takes.",
      "created_at": "2020-12-20T01:39:59Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r546306680",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546306680"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 160,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546306755",
      "pull_request_review_id": 555851251,
      "id": 546306755,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMwNjc1NQ==",
      "diff_hunk": "@@ -146,6 +147,65 @@ static constexpr uint32_t MAX_GETCFILTERS_SIZE = 1000;\n static constexpr uint32_t MAX_GETCFHEADERS_SIZE = 2000;\n /** the maximum percentage of addresses from our addrman to return in response to a getaddr message. */\n static constexpr size_t MAX_PCT_ADDR_TO_SEND = 23;\n+/** Static component of the salt used to compute short txids for transaction reconciliation. */\n+static const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+/** Used to convert a floating point reconciliation coefficient q to an int for transmission. */\n+static constexpr double Q_PRECISION{2 << 12};\n+/** Default coefficient used to estimate set difference for tx reconciliation. */\n+static constexpr double DEFAULT_RECON_Q = 0.02;\n+/**\n+ * When considering whether we should flood to an outbound connection supporting reconciliation,\n+ * see how many outbound connections are already used for flooding. Flood only if the limit is not reached.\n+ * It helps to save bandwidth and reduce the privacy leak.\n+ */\n+static constexpr uint32_t MAX_OUTBOUND_FLOOD_TO = 8;\n+/**\n+ * Maximum number of elements to store in the reconciliation set.\n+ * Used to bound the memory use. If the limit is reached, new transactions are not added and\n+ * forgotten w.r.t. relaying to that peer.\n+ * Sets the bound on the following objects:\n+ * - reconciliation set\n+ * - reconciliation set snapshot\n+ * - reconciliation short-full id mapping\n+ */\n+static const unsigned int MAX_RECON_SET = 10000;\n+/**\n+ * Interval between sending reconciliation request to the same peer.\n+ * This value allows to reconcile ~100 transactions (7 tx/s * 16s) during normal system operation at capacity.\n+ * More frequent reconciliations would cause significant constant bandwidth overhead due to\n+ * reconciliation metadata (sketch sizes etc.), which would nullify the efficiency.\n+ * Less frequent reconciliations would introduce high transaction relay latency.\n+ */\n+static constexpr std::chrono::microseconds RECON_REQUEST_INTERVAL{std::chrono::seconds{16}};\n+/**\n+ * Interval between responding to peers' reconciliation requests.\n+ * We don't respond to reconciliation requests right away because that would enable monitoring\n+ * when we receive transactions (privacy leak).\n+ */\n+static constexpr std::chrono::microseconds RECON_RESPONSE_INTERVAL{std::chrono::seconds{2}};\n+/** The size of the field, used to compute sketches to reconcile transactions (see BIP-330). */\n+static constexpr unsigned int RECON_FIELD_SIZE = 32;\n+static_assert(RECON_FIELD_SIZE % 8 == 0, \"Field size should be divisible by 8\");",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 65,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "80bde2b1aae6897ba29a6d18ef76cd8990daeff5",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why is this strictly needed? (apart from the BIP specifying that it is 32, so any other value is protocol breaking).",
      "created_at": "2020-12-20T01:41:17Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r546306755",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546306755"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546306899",
      "pull_request_review_id": 555851251,
      "id": 546306899,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMwNjg5OQ==",
      "diff_hunk": "@@ -451,7 +511,305 @@ struct Peer {\n     /** Work queue of items requested by this peer **/\n     std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n \n-    explicit Peer(NodeId id) : m_id(id) {}\n+    explicit Peer(NodeId id) : m_id(id), m_local_recon_salt(GetRand(UINT64_MAX)) {}\n+\n+    /**\n+     * Salt used to compute short IDs during transaction reconciliation.\n+     * Salt is generated randomly per-connection to prevent linking of\n+     * connections belonging to the same physical node.\n+     * Also, salts should be different per-connection to prevent halting\n+     * of relay of particular transactions due to collisions in short IDs.\n+     */\n+    const uint64_t m_local_recon_salt;\n+\n+    /**\n+     * This struct is used to keep track of the reconciliations with a given peer.\n+     * Transaction reconciliation means an efficient synchronization of the known\n+     * transactions between a pair of peers.\n+     * One reconciliation round consists of a sequence of messages. The sequence is\n+     * asymmetrical, there is always a requestor and a responder. At the end of the\n+     * sequence, nodes are supposed to exchange transactions, so that both of them\n+     * have all relevant transactions. For more protocol details, refer to BIP-0330.\n+     */\n+    struct ReconState {\n+        // ReconState(){};\n+        ReconState(bool sender, bool responder, bool flood_to, uint256 salt) :\n+            m_sender(sender), m_responder(responder), m_flood_to(flood_to), m_salt(salt), m_local_q(DEFAULT_RECON_Q) {}\n+\n+        /// Whether this peer will send reconciliation requests.\n+        bool m_sender;\n+\n+        /// Whether this peer will respond to reconciliation requests.\n+        bool m_responder;\n+\n+        /**\n+         * Whether we should flood transactions to the peer.\n+         * Reconciliation between two nodes does not prevent these nodes\n+         * from flooding transactions to each other.\n+         * Selective flooding of transactions to only specific peers makes\n+         * transaction relay significantly faster.\n+         */\n+        bool m_flood_to;\n+\n+        /**\n+         * Reconciliation involves computing and transmitting sketches,\n+         * which is a bandwidth-efficient representation of transaction IDs.\n+         * Since computing sketches over full txID is too CPU-expensive,\n+         * they will be computed over shortened IDs instead.\n+         * These short IDs will be salted so that they are not the same\n+         * across all pairs of peers, because otherwise it would enable network-wide\n+         * collisions which may (intentionally or not) halt relay of certain transactions.\n+         * Both of the peers contribute to the salt.\n+         */\n+        uint256 m_salt;\n+\n+        /**\n+         * Computing a set reconciliation sketch involves estimating the difference\n+         * between sets of transactions on two sides of the connection. More specifically,\n+         * a sketch capacity is computed as\n+         * |set_size - local_set_size| + q * (set_size + local_set_size) + c,\n+         * where c is a small constant, and q is a node+connection-specific coefficient.\n+         * This coefficient is recomputed by every node based on its previous reconciliations,\n+         * to better predict future set size differences.\n+         */\n+        double m_local_q;\n+\n+        /**\n+         * Store all transactions which we would relay to the peer (policy checks passed, etc.) in this set\n+         * instead of announcing them right away. When reconciliation time comes, we will\n+         * compute an efficient representation of this set (\"sketch\") and use it to efficient reconcile\n+         * this set with a similar set on the other side of the connection.\n+         */\n+        std::set<uint256> m_local_set;\n+\n+        /**\n+         * A reconciliation request comes from a peer with a reconciliation set size from their side,\n+         * which is supposed to help us to estimate set difference size. The value is stored here until\n+         * we respond to that request with a sketch.\n+         */\n+        uint16_t m_remote_set_size;\n+\n+        /**\n+         * The use of q coefficients is described above (see local_q comment).\n+         * The value transmitted from the peer with a reconciliation requests is stored here until\n+         * we respond to that request with a sketch.\n+         */\n+        double m_remote_q;\n+\n+        /**\n+         * When a reconciliation request is received, instead of responding to it right away,\n+         * we schedule a response for later, so that a spy can't monitor our reconciliation sets.\n+         */\n+        std::chrono::microseconds m_next_recon_respond{0};\n+\n+        /**\n+         * Used to keep track of the current reconciliation round with a peer.\n+         * Used for both inbound (responded) and outgoing (requested/initiated) reconciliations.\n+         * Currently only one sketch extension request is supported.\n+         */\n+        enum ReconPhase {\n+            NONE,\n+            INIT_REQUESTED,\n+            INIT_RESPONDED,\n+            EXT_REQUESTED,\n+            EXT_RESPONDED,\n+        };\n+        ReconPhase m_outgoing_recon{ReconPhase::NONE};\n+        ReconPhase m_incoming_recon{ReconPhase::NONE};\n+\n+        /**\n+         * Reconciliation sketches are computed over short transaction IDs.\n+         * This is a cache of these IDs enabling faster lookups of full wtxids,\n+         * useful when peer will ask for missing transactions by short IDs\n+         * at the end of a reconciliation round.\n+         */\n+        std::map<uint32_t, uint256> m_local_short_id_mapping;\n+\n+        /**\n+         * A reconciliation round may involve an extension, which is an extra exchange of messages.\n+         * Since it may happen after a delay (at least network latency), new transactions may come\n+         * during that time. To avoid mixing old and new transactions, those which are subject for\n+         * extension of a current reconciliation round are moved to a reconciliation set snapshot\n+         * after an initial (non-extended) sketch is sent.\n+         * New transactions are kept in the regular reconciliation set.\n+         */\n+        std::set<uint256> m_local_set_snapshot;\n+\n+        /**\n+         * A reconciliation round may involve an extension, in which case we should remember\n+         * a capacity of the sketch sent out initially, so that a sketch extension is of the same size.\n+         */\n+        uint16_t m_capacity_snapshot{0};\n+\n+        /**\n+         * In a reconciliation round initiated by us, if we asked for an extension, we want to store\n+         * the sketch computed/transmitted in the initial step, so that we can use it when\n+         * sketch extension arrives.\n+         */\n+        std::vector<uint8_t> m_remote_sketch_snapshot;\n+\n+        /**\n+        * Reconciliation sketches are computed over short transaction IDs.\n+        * Short IDs are salted with a link-specific constant value.\n+        */\n+        uint32_t ComputeShortID(const uint256 wtxid)\n+        {\n+            uint64_t k0 = m_salt.GetUint64(0);\n+            uint64_t k1 = m_salt.GetUint64(1);\n+            uint64_t s = SipHashUint256(k0, k1, wtxid);\n+            uint32_t short_txid = 1 + (s & 0xFFFFFFFF);\n+            return short_txid;\n+        }\n+\n+        /**\n+         * Estimate a capacity of a sketch we will send or use locally (to find set difference)\n+         * based on the local set size.\n+         */\n+        uint16_t EstimateSketchCapacity() {\n+            uint16_t set_size_diff = std::abs(uint16_t(m_local_set.size()) - m_remote_set_size);\n+            uint16_t min_size = std::min(uint16_t(m_local_set.size()), m_remote_set_size);\n+            uint16_t weighted_min_size = m_remote_q * min_size;\n+            uint16_t estimated_diff = 1 + weighted_min_size + set_size_diff;\n+            return minisketch_compute_capacity(RECON_FIELD_SIZE, estimated_diff, RECON_FALSE_POSITIVE_COEF);\n+        }\n+\n+        /**\n+         * Reconciliation involves computing a space-efficient representation of transaction identifiers (a sketch).\n+         * A sketch has a capacity meaning it allows reconciling at most a certain number of elements. (see BIP-330).\n+         * Considering whether we are going to send a sketch to a peer or use locally, we estimate the set difference.\n+         */\n+        minisketch* ComputeSketch(const std::set<uint256> local_set, uint16_t& capacity)\n+        {\n+            std::vector<uint32_t> short_ids;\n+            for (uint256 wtxid: local_set) {\n+                uint32_t short_txid = ComputeShortID(wtxid);\n+                short_ids.push_back(short_txid);\n+                m_local_short_id_mapping.insert(std::pair<uint32_t, uint256>(short_txid, wtxid));\n+            }\n+\n+            capacity = std::min(capacity, MAX_SKETCH_CAPACITY);\n+\n+            if (short_ids.size() == 0) return nullptr;\n+            minisketch* sketch = minisketch_create(RECON_FIELD_SIZE, 0, capacity);\n+            if (sketch == nullptr) {\n+                return nullptr;\n+            }\n+            for (uint32_t short_id: short_ids) {\n+                minisketch_add_uint64(sketch, short_id);\n+            }\n+            return sketch;\n+        }\n+\n+        minisketch* ComputeExtendedSketch() {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 283,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "80bde2b1aae6897ba29a6d18ef76cd8990daeff5",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've PR'ed https://github.com/sipa/minisketch/pull/28 that adds a safer C++ wrapper around the minisketch* type. You may want to use it instead of doing manual memory management for them. It also adds some convenience functions for dealing with fpbits (CreateFP and DecodeFP).",
      "created_at": "2020-12-20T01:43:35Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r546306899",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546306899"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 704,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546307036",
      "pull_request_review_id": 555851251,
      "id": 546307036,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMwNzAzNg==",
      "diff_hunk": "@@ -0,0 +1,596 @@\n+#!/usr/bin/env python3\n+# Copyhigh (c) 2016-2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test reconciliation-based transaction relay protocol.\n+\n+\"\"\"\n+\n+from test_framework.p2p import P2PDataStore, p2p_lock\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, hex_str_to_bytes\n+from test_framework.messages import (\n+    msg_inv, msg_getdata,\n+    msg_sendrecon, msg_reqrecon,\n+    msg_sketch, msg_reqsketchext, msg_reconcildiff,\n+    CTransaction, CInv\n+)\n+from test_framework.siphash import siphash256\n+from enum import IntEnum\n+from io import BytesIO\n+import random\n+import hashlib\n+import time\n+\n+MASK64 = 0xffffffffffffffff\n+MSG_WTX = 5\n+\n+# These parameters are specified in the BIP-0330.\n+Q_PRECISION = 2 << 12\n+FIELD_BITS = 32\n+FIELD_MODULUS = (1 << FIELD_BITS) + 0b10001101\n+\n+# These parameters are suggested by the Erlay paper based on analysis and simulations.\n+DEFAULT_Q = 0.02\n+RECON_REQUEST_INTERVAL = 16\n+INVENTORY_BROADCAST_INTERVAL = 2\n+PENALIZED_INVENTORY_BROADCAST_INTERVAL = INVENTORY_BROADCAST_INTERVAL * 2\n+MAX_OUTBOUND_FLOOD_TO = 8\n+\n+BYTES_PER_SKETCH_CAPACITY = FIELD_BITS / 8\n+\n+def mul2(x):\n+    \"\"\"Compute 2*x in GF(2^FIELD_BITS)\"\"\"\n+    return (x << 1) ^ (FIELD_MODULUS if x.bit_length() >= FIELD_BITS else 0)\n+\n+def mul(x, y):",
      "path": "test/functional/p2p_erlay.py",
      "position": 45,
      "original_position": 46,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "80bde2b1aae6897ba29a6d18ef76cd8990daeff5",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've PR'ed https://github.com/sipa/minisketch/pull/26 which adds a pure Python (slow) full reimplementation of minisketch. You may want to use that instead (it also supports decoding).",
      "created_at": "2020-12-20T01:44:56Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r546307036",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546307036"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 45,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547174377",
      "pull_request_review_id": 556948203,
      "id": 547174377,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE3NDM3Nw==",
      "diff_hunk": "@@ -461,6 +465,63 @@ struct Peer {\n      * of relay of particular transactions due to collisions in short IDs.\n      */\n     const uint64_t m_local_recon_salt;\n+\n+    /**\n+     * This struct is used to keep track of the reconciliations with a given peer.\n+     * Transaction reconciliation means an efficient synchronization of the known\n+     * transactions between a pair of peers.\n+     * One reconciliation round consists of a sequence of messages. The sequence is\n+     * asymmetrical, there is always a requestor and a responder. At the end of the\n+     * sequence, nodes are supposed to exchange transactions, so that both of them\n+     * have all relevant transactions. For more protocol details, refer to BIP-0330.\n+     */\n+    struct ReconState {\n+        // ReconState(){};\n+        ReconState(bool sender, bool responder, bool flood_to, uint256 salt) :\n+            m_sender(sender), m_responder(responder), m_flood_to(flood_to), m_salt(salt), m_local_q(DEFAULT_RECON_Q) {}\n+\n+        /// Whether this peer will send reconciliation requests.\n+        bool m_sender;\n+\n+        /// Whether this peer will respond to reconciliation requests.\n+        bool m_responder;\n+\n+        /**\n+         * Whether we should flood transactions to the peer.\n+         * Reconciliation between two nodes does not prevent these nodes\n+         * from flooding transactions to each other.\n+         * Selective flooding of transactions to only specific peers makes\n+         * transaction relay significantly faster.\n+         */\n+        bool m_flood_to;\n+\n+        /**\n+         * Reconciliation involves computing and transmitting sketches,\n+         * which is a bandwidth-efficient representation of transaction IDs.\n+         * Since computing sketches over full txID is too CPU-expensive,\n+         * they will be computed over shortened IDs instead.\n+         * These short IDs will be salted so that they are not the same\n+         * across all pairs of peers, because otherwise it would enable network-wide\n+         * collisions which may (intentionally or not) halt relay of certain transactions.\n+         * Both of the peers contribute to the salt.\n+         */\n+        uint256 m_salt;\n+\n+        /**\n+         * Computing a set reconciliation sketch involves estimating the difference\n+         * between sets of transactions on two sides of the connection. More specifically,\n+         * a sketch capacity is computed as\n+         * |set_size - local_set_size| + q * (set_size + local_set_size) + c,\n+         * where c is a small constant, and q is a node+connection-specific coefficient.\n+         * This coefficient is recomputed by every node based on its previous reconciliations,\n+         * to better predict future set size differences.\n+         */\n+        double m_local_q;\n+    };\n+\n+    RecursiveMutex cs_recon_state;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 69,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "9da045b6f563fb5ba2bf369613ab388b0cc8ce73",
      "in_reply_to_id": 546122819,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm not 100% sure how to do it right, but simple Mutex doesn't seem to work when `GetFloodingOutboundsCount` is called in handling `NetMsgType::SENDRECON`. It just hangs.",
      "created_at": "2020-12-22T09:44:20Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r547174377",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/547174377"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 812,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/548678244",
      "pull_request_review_id": 558699086,
      "id": 548678244,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODY3ODI0NA==",
      "diff_hunk": "@@ -146,6 +147,65 @@ static constexpr uint32_t MAX_GETCFILTERS_SIZE = 1000;\n static constexpr uint32_t MAX_GETCFHEADERS_SIZE = 2000;\n /** the maximum percentage of addresses from our addrman to return in response to a getaddr message. */\n static constexpr size_t MAX_PCT_ADDR_TO_SEND = 23;\n+/** Static component of the salt used to compute short txids for transaction reconciliation. */\n+static const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+/** Used to convert a floating point reconciliation coefficient q to an int for transmission. */\n+static constexpr double Q_PRECISION{2 << 12};",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 30,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "80bde2b1aae6897ba29a6d18ef76cd8990daeff5",
      "in_reply_to_id": 546306680,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "q is computed as `(total_missing - abs(local_missing - remote_missing)) / min_size`\r\n\r\nSo the bounds on q are [0...2] I think?\r\nif abs = 0, total_missing = 2 * min_size (at most) is an upper bound.\r\nIf abs !=0, well. Ideally, we need to solve this equation properly :)\r\n\r\nSo it should be (2 << 14) - 1 I think assuming [0..2] for now.",
      "created_at": "2020-12-24T18:23:07Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r548678244",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/548678244"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 160,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559247494",
      "pull_request_review_id": 570100861,
      "id": 559247494,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI0NzQ5NA==",
      "diff_hunk": "@@ -556,9 +556,11 @@ class CNode\n \n         mutable RecursiveMutex cs_tx_inventory;\n         CRollingBloomFilter filterInventoryKnown GUARDED_BY(cs_tx_inventory){50000, 0.000001};\n-        // Set of transaction ids we still have to announce.\n-        // They are sorted by the mempool before relay, so the order is not important.\n-        std::set<uint256> setInventoryTxToSend;\n+        // Set of transaction ids we still have to announce, and whether we may flood them:",
      "path": "src/net.h",
      "position": null,
      "original_position": 7,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "f472f3077e6860f2ec6b1ecb3d4b47fc929bccb3",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is no longer a set.",
      "created_at": "2021-01-17T22:24:38Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r559247494",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559247494"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 559,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559247594",
      "pull_request_review_id": 570100861,
      "id": 559247594,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI0NzU5NA==",
      "diff_hunk": "@@ -146,6 +153,37 @@ static constexpr uint32_t MAX_GETCFILTERS_SIZE = 1000;\n static constexpr uint32_t MAX_GETCFHEADERS_SIZE = 2000;\n /** the maximum percentage of addresses from our addrman to return in response to a getaddr message. */\n static constexpr size_t MAX_PCT_ADDR_TO_SEND = 23;\n+/** Static component of the salt used to compute short txids for transaction reconciliation. */\n+static const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+/** Used to convert a floating point reconciliation coefficient q to an int for transmission. Specified by BIP-330. */\n+static constexpr uint16_t Q_PRECISION{(2 << 14) - 1};\n+/**\n+ * When considering whether we should flood to an outbound connection supporting reconciliation,\n+ * see how many outbound connections are already used for flooding. Flood only if the limit is not reached.\n+ * It helps to save bandwidth and reduce the privacy leak.\n+ */\n+static constexpr uint32_t MAX_OUTBOUND_FLOOD_TO = 8;\n+/**\n+ * Interval between sending reconciliation request to the same peer.\n+ * This value allows to reconcile ~100 transactions (7 tx/s * 16s) during normal system operation at capacity.\n+ * More frequent reconciliations would cause significant constant bandwidth overhead due to\n+ * reconciliation metadata (sketch sizes etc.), which would nullify the efficiency.\n+ * Less frequent reconciliations would introduce high transaction relay latency.\n+ */\n+static constexpr std::chrono::microseconds RECON_REQUEST_INTERVAL{std::chrono::seconds{16}};",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 52,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "f472f3077e6860f2ec6b1ecb3d4b47fc929bccb3",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nstatic constexpr std::chrono::microseconds RECON_REQUEST_INTERVAL{16s};\r\n```\r\n\r\nSaves repeating the chrono type",
      "created_at": "2021-01-17T22:25:32Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r559247594",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559247594"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 173,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559247689",
      "pull_request_review_id": 570100861,
      "id": 559247689,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI0NzY4OQ==",
      "diff_hunk": "@@ -146,6 +153,37 @@ static constexpr uint32_t MAX_GETCFILTERS_SIZE = 1000;\n static constexpr uint32_t MAX_GETCFHEADERS_SIZE = 2000;\n /** the maximum percentage of addresses from our addrman to return in response to a getaddr message. */\n static constexpr size_t MAX_PCT_ADDR_TO_SEND = 23;\n+/** Static component of the salt used to compute short txids for transaction reconciliation. */\n+static const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+/** Used to convert a floating point reconciliation coefficient q to an int for transmission. Specified by BIP-330. */\n+static constexpr uint16_t Q_PRECISION{(2 << 14) - 1};\n+/**\n+ * When considering whether we should flood to an outbound connection supporting reconciliation,\n+ * see how many outbound connections are already used for flooding. Flood only if the limit is not reached.\n+ * It helps to save bandwidth and reduce the privacy leak.\n+ */\n+static constexpr uint32_t MAX_OUTBOUND_FLOOD_TO = 8;\n+/**\n+ * Interval between sending reconciliation request to the same peer.\n+ * This value allows to reconcile ~100 transactions (7 tx/s * 16s) during normal system operation at capacity.\n+ * More frequent reconciliations would cause significant constant bandwidth overhead due to\n+ * reconciliation metadata (sketch sizes etc.), which would nullify the efficiency.\n+ * Less frequent reconciliations would introduce high transaction relay latency.\n+ */\n+static constexpr std::chrono::microseconds RECON_REQUEST_INTERVAL{std::chrono::seconds{16}};\n+/**\n+ * Interval between responding to peers' reconciliation requests.\n+ * We don't respond to reconciliation requests right away because that would enable monitoring\n+ * when we receive transactions (privacy leak).\n+ */\n+static constexpr std::chrono::microseconds RECON_RESPONSE_INTERVAL{std::chrono::seconds{2}};\n+\n+/** Represents a reconciliation result, used to decide what to do when the reconciliation is over. */\n+enum ReconResult {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 61,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "f472f3077e6860f2ec6b1ecb3d4b47fc929bccb3",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Any reason not to use a bool here?",
      "created_at": "2021-01-17T22:26:15Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r559247689",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559247689"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 182,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559248117",
      "pull_request_review_id": 570100861,
      "id": 559248117,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI0ODExNw==",
      "diff_hunk": "@@ -2267,6 +2355,29 @@ static void ProcessGetCFCheckPt(CNode& peer, CDataStream& vRecv, const CChainPar\n     connman.PushMessage(&peer, std::move(msg));\n }\n \n+/**\n+ * Announce transactions a peer is missing after reconciliation is done.\n+ * No need to add transactions to peer's filter or do checks\n+ * because it was already done when adding to the reconciliation set.\n+ */\n+void static AnnounceTxs(const std::vector<uint256>& remote_missing_wtxids, CNode& pto, const CNetMsgMaker& msgMaker, CConnman& connman)",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 182,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "f472f3077e6860f2ec6b1ecb3d4b47fc929bccb3",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's easy enough to instantiate a new `CNetMsgMaker` from the CNode, rather than passing it as an argument. If you make this function a member of `PeerManagerImpl` you can also avoid passing the `CConnman&`.",
      "created_at": "2021-01-17T22:29:12Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r559248117",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559248117"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2363,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559248234",
      "pull_request_review_id": 570100861,
      "id": 559248234,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI0ODIzNA==",
      "diff_hunk": "@@ -2267,6 +2355,29 @@ static void ProcessGetCFCheckPt(CNode& peer, CDataStream& vRecv, const CChainPar\n     connman.PushMessage(&peer, std::move(msg));\n }\n \n+/**\n+ * Announce transactions a peer is missing after reconciliation is done.\n+ * No need to add transactions to peer's filter or do checks\n+ * because it was already done when adding to the reconciliation set.\n+ */\n+void static AnnounceTxs(const std::vector<uint256>& remote_missing_wtxids, CNode& pto, const CNetMsgMaker& msgMaker, CConnman& connman)\n+{\n+    if (remote_missing_wtxids.size() != 0) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 184,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "f472f3077e6860f2ec6b1ecb3d4b47fc929bccb3",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Consider inverting this if condition to make this a guard clause and avoid deep indentations below.\r\n\r\n```suggestion\r\n    if (remote_missing_wtxids.size() == 0) return;\r\n```",
      "created_at": "2021-01-17T22:30:08Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r559248234",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559248234"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2365,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559248400",
      "pull_request_review_id": 570100861,
      "id": 559248400,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI0ODQwMA==",
      "diff_hunk": "@@ -2267,6 +2355,29 @@ static void ProcessGetCFCheckPt(CNode& peer, CDataStream& vRecv, const CChainPar\n     connman.PushMessage(&peer, std::move(msg));\n }\n \n+/**\n+ * Announce transactions a peer is missing after reconciliation is done.\n+ * No need to add transactions to peer's filter or do checks\n+ * because it was already done when adding to the reconciliation set.\n+ */\n+void static AnnounceTxs(const std::vector<uint256>& remote_missing_wtxids, CNode& pto, const CNetMsgMaker& msgMaker, CConnman& connman)\n+{\n+    if (remote_missing_wtxids.size() != 0) {\n+        std::vector<CInv> remote_missing_invs;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 185,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "f472f3077e6860f2ec6b1ecb3d4b47fc929bccb3",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Perhaps reserve max(size of remote_missing_wtxids, MAX_INV_SIZE) to avoid reallocations.",
      "created_at": "2021-01-17T22:31:27Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r559248400",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559248400"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2366,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559248515",
      "pull_request_review_id": 570100861,
      "id": 559248515,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI0ODUxNQ==",
      "diff_hunk": "@@ -3751,6 +3943,165 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n         return;\n     }\n \n+    std::chrono::microseconds current_time = GetTime<std::chrono::microseconds>();\n+\n+    // Record an (expected) reconciliation request with parameters to respond when time comes.\n+    // All initial reconciliation responses will be done at the same time to prevent tx-related privacy leaks.\n+    if (msg_type == NetMsgType::REQRECON) {",
      "path": "src/net_processing.cpp",
      "position": 386,
      "original_position": 324,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "f472f3077e6860f2ec6b1ecb3d4b47fc929bccb3",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "A bit of space/comments in this code block would make it easier to read.",
      "created_at": "2021-01-17T22:32:39Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r559248515",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559248515"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4182,
      "original_line": 4182,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559248593",
      "pull_request_review_id": 570100861,
      "id": 559248593,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI0ODU5Mw==",
      "diff_hunk": "@@ -3751,6 +3943,165 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n         return;\n     }\n \n+    std::chrono::microseconds current_time = GetTime<std::chrono::microseconds>();\n+\n+    // Record an (expected) reconciliation request with parameters to respond when time comes.\n+    // All initial reconciliation responses will be done at the same time to prevent tx-related privacy leaks.\n+    if (msg_type == NetMsgType::REQRECON) {\n+        LOCK(peer->cs_recon_state);\n+        if (peer->m_recon_state == nullptr) return;\n+        if (!peer->m_recon_state->m_requestor) return;\n+        if (peer->m_recon_state->m_incoming_recon != Peer::ReconState::ReconPhase::NONE) return;\n+        uint16_t peer_recon_set_size, peer_q;\n+        vRecv >> peer_recon_set_size >> peer_q;\n+        peer->m_recon_state->m_incoming_recon = Peer::ReconState::ReconPhase::INIT_REQUESTED;\n+        peer->m_recon_state->m_remote_set_size = peer_recon_set_size;\n+        peer->m_recon_state->m_remote_q = double(peer_q / Q_PRECISION);\n+        double remote_q = double(peer_q / Q_PRECISION);\n+        assert(remote_q >= 0);\n+        if (remote_q > 2) return;\n+        peer->m_recon_state->m_remote_q = remote_q;\n+        peer->m_recon_state->m_next_recon_respond = NextReconRespond(current_time);\n+        return;\n+    }\n+\n+    // Received a response to the reconciliation request (initial request or request for extension if initial failed).\n+    // May leak tx-related privacy if we announce local transactions right away, if a peer is strategic about sending\n+    // sketches to us via different connections (requires attacker to occupy multiple outgoing connections).\n+    if (msg_type == NetMsgType::SKETCH) {\n+        LOCK(peer->cs_recon_state);\n+        if (peer->m_recon_state == nullptr) return;\n+        if (peer->m_recon_state->m_outgoing_recon != Peer::ReconState::ReconPhase::INIT_REQUESTED &&\n+            peer->m_recon_state->m_outgoing_recon != Peer::ReconState::ReconPhase::EXT_REQUESTED) return;\n+\n+        std::vector<uint8_t> skdata;\n+        vRecv >> skdata;\n+\n+        if (skdata.size() / BYTES_PER_SKETCH_CAPACITY > MAX_SKETCH_CAPACITY) {\n+            pfrom.fDisconnect = true;\n+            return;\n+        }\n+\n+        // Attempt to decode the received sketch with a local sketch.\n+        // Handles both initial reconciliation and extension cases.\n+        if (skdata.size() / BYTES_PER_SKETCH_CAPACITY > MAX_SKETCH_CAPACITY) return;\n+        if (peer->m_recon_state->m_outgoing_recon == Peer::ReconState::ReconPhase::EXT_REQUESTED) {\n+            // A sketch extension is missing the lower elements (to be a valid extended sketch), which we stored on our side at initial reconciliation step.\n+            skdata.insert(skdata.begin(), peer->m_recon_state->m_remote_sketch_snapshot.begin(), peer->m_recon_state->m_remote_sketch_snapshot.end());\n+        }\n+\n+        uint16_t remote_sketch_capacity = uint16_t(skdata.size() / BYTES_PER_SKETCH_CAPACITY);\n+\n+        Minisketch local_sketch, remote_sketch;\n+        if (remote_sketch_capacity != 0) {\n+            remote_sketch = Minisketch(RECON_FIELD_SIZE, 0, remote_sketch_capacity).Deserialize(skdata);\n+        }\n+        if (peer->m_recon_state->m_outgoing_recon == Peer::ReconState::ReconPhase::INIT_REQUESTED) {\n+            local_sketch = peer->m_recon_state->ComputeSketch(peer->m_recon_state->m_local_set, remote_sketch_capacity);\n+            peer->m_recon_state->m_capacity_snapshot = remote_sketch_capacity;\n+        } else {\n+            local_sketch = peer->m_recon_state->ComputeExtendedSketch();\n+        }\n+\n+        if (remote_sketch_capacity == 0 || !remote_sketch || !local_sketch) {\n+            LogPrint(BCLog::NET, \"Outgoing reconciliation with peer=%I failed due to %s \\n\", pfrom.GetId(),\n+                remote_sketch_capacity == 0 ? \"empty sketch\" : \"minisketch API failure\");\n+            std::vector<uint256> remote_missing;\n+            if (peer->m_recon_state->m_outgoing_recon == Peer::ReconState::ReconPhase::INIT_REQUESTED) {\n+                remote_missing = std::vector<uint256>(peer->m_recon_state->m_local_set.begin(), peer->m_recon_state->m_local_set.end());\n+                peer->m_recon_state->FinalizeReconciliation(true, Peer::ReconState::LocalQAction::Q_SET_DEFAULT, 0, 0);\n+            } else {\n+                remote_missing = std::vector<uint256>(peer->m_recon_state->m_local_set_snapshot.begin(), peer->m_recon_state->m_local_set_snapshot.end());\n+                peer->m_recon_state->FinalizeReconciliation(false, Peer::ReconState::LocalQAction::Q_SET_DEFAULT, 0, 0);\n+            }\n+            m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::RECONCILDIFF, uint8_t(RECON_FAILED), std::vector<uint256>()));\n+            AnnounceTxs(remote_missing, pfrom, msgMaker, m_connman);\n+            return;\n+        }\n+\n+        assert(remote_sketch);\n+        assert(local_sketch);\n+        // Attempt to decode the set difference\n+        std::vector<uint64_t> differences(remote_sketch_capacity);\n+        if (local_sketch.Merge(remote_sketch).Decode(differences)) {\n+            // Reconciliation over the current working sketch succeeded\n+            std::vector<uint32_t> local_missing;\n+            if (peer->m_recon_state->m_outgoing_recon == Peer::ReconState::ReconPhase::INIT_REQUESTED) {\n+                // Initial reconciliation succeeded\n+                // Send/request transactions which found to be missing\n+                LogPrint(BCLog::NET, \"Outgoing reconciliation with peer=%i succeeded without extension\\n\", pfrom.GetId());\n+                std::vector<uint256> remote_missing = peer->m_recon_state->GetRelevantIDsFromShortIDs(differences, local_missing);\n+                AnnounceTxs(remote_missing, pfrom, msgMaker, m_connman);\n+                m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::RECONCILDIFF, uint8_t(RECON_SUCCESS), local_missing));\n+                peer->m_recon_state->FinalizeReconciliation(true, Peer::ReconState::LocalQAction::Q_RECOMPUTE, local_missing.size(), remote_missing.size());\n+            } else {\n+                // Reconciliation with extended sketch succeeded.\n+                LogPrint(BCLog::NET, \"Outgoing reconciliation with peer=%I succeeded with extension\\n\", pfrom.GetId());\n+                std::vector<uint256> remote_missing = peer->m_recon_state->GetRelevantIDsFromShortIDs(differences, local_missing);\n+                AnnounceTxs(remote_missing, pfrom, msgMaker, m_connman);\n+                m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::RECONCILDIFF, uint8_t(RECON_SUCCESS), local_missing));\n+                peer->m_recon_state->FinalizeReconciliation(true, Peer::ReconState::LocalQAction::Q_RECOMPUTE, local_missing.size(), remote_missing.size());\n+            }\n+        } else {\n+            // Reconciliation over the current working sketch failed.\n+            if (peer->m_recon_state->m_outgoing_recon == Peer::ReconState::ReconPhase::INIT_REQUESTED) {\n+                // Initial reconciliation failed.\n+                // Store the received sketch and the local sketch, request extension.\n+\n+                // Prepare to process extension.\n+                peer->m_recon_state->m_remote_sketch_snapshot = skdata;\n+                peer->m_recon_state->m_local_set_snapshot = peer->m_recon_state->m_local_set;\n+                peer->m_recon_state->m_local_set.clear();\n+                LogPrint(BCLog::NET, \"Outgoing reconciliation with peer=%i initially failed, requesting extension sketch\\n\", pfrom.GetId());\n+                m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::REQSKETCHEXT));\n+                peer->m_recon_state->m_outgoing_recon = Peer::ReconState::ReconPhase::EXT_REQUESTED;\n+            } else {\n+                // Reconciliation over extended sketch failed.\n+                // Announce all local transactions from the reconciliation set.\n+                // All remote transactions will be announced by peer due to the reconciliation failure flag.\n+\n+                LogPrint(BCLog::NET, \"Outgoing reconciliation with peer=%I failed after extension \\n\", pfrom.GetId());\n+                std::vector<uint256> remote_missing(peer->m_recon_state->m_local_set_snapshot.begin(), peer->m_recon_state->m_local_set_snapshot.end());\n+                m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::RECONCILDIFF, uint8_t(RECON_FAILED), std::vector<uint32_t>()));\n+                peer->m_recon_state->FinalizeReconciliation(false, Peer::ReconState::LocalQAction::Q_SET_DEFAULT, 0, 0);\n+                AnnounceTxs(remote_missing, pfrom, msgMaker, m_connman);\n+            }\n+        }\n+        return;\n+    }\n+\n+    // Peer requesting extension after initial reconciliation failed on their side.\n+    // No privacy leak can happen here because sketch extension is constructed over the snapshot.\n+    if (msg_type == NetMsgType::REQSKETCHEXT) {\n+        LOCK(peer->cs_recon_state);\n+        if (peer->m_recon_state == nullptr) return;\n+        if (peer->m_recon_state->m_incoming_recon != Peer::ReconState::ReconPhase::INIT_RESPONDED) return;\n+        peer->m_recon_state->m_incoming_recon = Peer::ReconState::ReconPhase::EXT_REQUESTED;\n+        return;\n+    }\n+\n+    // Among transactions requested by short ID here, we should send only those transactions\n+    // sketched (stored in local set snapshot), because otherwise we would leak privacy (mempool content).\n+    if (msg_type == NetMsgType::RECONCILDIFF) {",
      "path": "src/net_processing.cpp",
      "position": 511,
      "original_position": 459,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "f472f3077e6860f2ec6b1ecb3d4b47fc929bccb3",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Again, spacing/comments would make this more legible.",
      "created_at": "2021-01-17T22:33:24Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r559248593",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559248593"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4307,
      "original_line": 4307,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559248746",
      "pull_request_review_id": 570100861,
      "id": 559248746,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI0ODc0Ng==",
      "diff_hunk": "@@ -11,6 +11,7 @@\n #include <sync.h>\n #include <txrequest.h>\n #include <validationinterface.h>\n+#include <minisketch/include/minisketch.h>",
      "path": "src/net_processing.h",
      "position": null,
      "original_position": 4,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "f472f3077e6860f2ec6b1ecb3d4b47fc929bccb3",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "sort",
      "created_at": "2021-01-17T22:34:40Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r559248746",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559248746"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559248856",
      "pull_request_review_id": 570100861,
      "id": 559248856,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI0ODg1Ng==",
      "diff_hunk": "@@ -31,6 +32,19 @@ static const bool DEFAULT_PEERBLOOMFILTERS = false;\n static const bool DEFAULT_PEERBLOCKFILTERS = false;\n /** Threshold for marking a node to be discouraged, e.g. disconnected and added to the discouragement filter. */\n static const int DISCOURAGEMENT_THRESHOLD{100};\n+/** The size of the field, used to compute sketches to reconcile transactions (see BIP-330). */\n+static constexpr unsigned int RECON_FIELD_SIZE = 32;\n+static constexpr unsigned int BYTES_PER_SKETCH_CAPACITY = RECON_FIELD_SIZE / 8;",
      "path": "src/net_processing.h",
      "position": null,
      "original_position": 14,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "f472f3077e6860f2ec6b1ecb3d4b47fc929bccb3",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This doesn't need to be in the header, since it's only used inside net_processing.cpp.",
      "created_at": "2021-01-17T22:35:32Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r559248856",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559248856"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559249350",
      "pull_request_review_id": 570100861,
      "id": 559249350,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI0OTM1MA==",
      "diff_hunk": "@@ -89,7 +103,314 @@ struct Peer {\n     /** Work queue of items requested by this peer **/\n     std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n \n-    explicit Peer(NodeId id) : m_id(id) {}\n+    explicit Peer(NodeId id) : m_id(id), m_local_recon_salt(GetRand(UINT64_MAX)) {}\n+\n+    /**\n+     * Salt used to compute short IDs during transaction reconciliation.\n+     * Salt is generated randomly per-connection to prevent linking of\n+     * connections belonging to the same physical node.\n+     * Also, salts should be different per-connection to prevent halting\n+     * of relay of particular transactions due to collisions in short IDs.\n+     */\n+    const uint64_t m_local_recon_salt;\n+\n+    /**\n+     * This struct is used to keep track of the reconciliations with a given peer.\n+     * Transaction reconciliation means an efficient synchronization of the known\n+     * transactions between a pair of peers.\n+     * One reconciliation round consists of a sequence of messages. The sequence is\n+     * asymmetrical, there is always a requestor and a responder. At the end of the\n+     * sequence, nodes are supposed to exchange transactions, so that both of them\n+     * have all relevant transactions. For more protocol details, refer to BIP-0330.\n+     */\n+    struct ReconState {\n+        /** Default coefficient used to estimate set difference for tx reconciliation. */\n+        static constexpr double DEFAULT_RECON_Q = 0.02;\n+\n+        ReconState(bool requestor, bool responder, bool flood_to, uint64_t k0, uint64_t k1) :\n+            m_requestor(requestor), m_responder(responder), m_flood_to(flood_to), m_k0(k0), m_k1(k1), m_local_q(DEFAULT_RECON_Q) {}\n+\n+        /// Whether this peer will send reconciliation requests.\n+        bool m_requestor;\n+\n+        /// Whether this peer will respond to reconciliation requests.\n+        bool m_responder;\n+\n+        /**\n+         * Since reconciliation-only approach makes transaction relay\n+         * significantly slower, we also announce some of the transactions\n+         * (currently, transactions received from inbound links)\n+         * to some of the peers:\n+         * - all pre-reconciliation peers supporting transaction relay;\n+         * - a limited number of outbound reconciling peers *for which this flag is enabled*.\n+         * We enable this flag based on whether we have a\n+         * sufficient number of outbound transaction relay peers.\n+         * This flooding makes transaction relay across the network faster\n+         * without introducing high the bandwidth overhead.\n+         * Transactions announced via flooding should not be added to\n+         * the reconciliation set.\n+         */\n+        bool m_flood_to;\n+\n+        /**\n+         * Reconciliation involves computing and transmitting sketches,\n+         * which is a bandwidth-efficient representation of transaction IDs.\n+         * Since computing sketches over full txID is too CPU-expensive,\n+         * they will be computed over shortened IDs instead.\n+         * These short IDs will be salted so that they are not the same\n+         * across all pairs of peers, because otherwise it would enable network-wide\n+         * collisions which may (intentionally or not) halt relay of certain transactions.\n+         * Both of the peers contribute to the salt.\n+         */\n+        const uint64_t m_k0, m_k1;\n+\n+        /**\n+         * Computing a set reconciliation sketch involves estimating the difference\n+         * between sets of transactions on two sides of the connection. More specifically,\n+         * a sketch capacity is computed as\n+         * |set_size - local_set_size| + q * (set_size + local_set_size) + c,\n+         * where c is a small constant, and q is a node+connection-specific coefficient.\n+         * This coefficient is recomputed by every node based on its previous reconciliations,\n+         * to better predict future set size differences.\n+         */\n+        double m_local_q;\n+\n+        /**\n+         * Store all transactions which we would relay to the peer (policy checks passed, etc.) in this set\n+         * instead of announcing them right away. When reconciliation time comes, we will\n+         * compute an efficient representation of this set (\"sketch\") and use it to efficient reconcile\n+         * this set with a similar set on the other side of the connection.\n+         */\n+        std::set<uint256> m_local_set;\n+\n+        /**\n+         * A reconciliation request comes from a peer with a reconciliation set size from their side,\n+         * which is supposed to help us to estimate set difference size. The value is stored here until\n+         * we respond to that request with a sketch.\n+         */\n+        uint16_t m_remote_set_size;\n+\n+        /**\n+         * The use of q coefficients is described above (see local_q comment).\n+         * The value transmitted from the peer with a reconciliation requests is stored here until\n+         * we respond to that request with a sketch.\n+         */\n+        double m_remote_q;\n+\n+        /**\n+         * When a reconciliation request is received, instead of responding to it right away,\n+         * we schedule a response for later, so that a spy can't monitor our reconciliation sets.\n+         */\n+        std::chrono::microseconds m_next_recon_respond{0};\n+\n+        /**\n+         * Used to keep track of the current reconciliation round with a peer.\n+         * Used for both inbound (responded) and outgoing (requested/initiated) reconciliations.\n+         * Currently only one sketch extension request is supported.\n+         */\n+        enum ReconPhase {\n+            NONE,\n+            INIT_REQUESTED,\n+            INIT_RESPONDED,\n+            EXT_REQUESTED,\n+            EXT_RESPONDED,\n+        };\n+        ReconPhase m_outgoing_recon{ReconPhase::NONE};\n+        ReconPhase m_incoming_recon{ReconPhase::NONE};\n+\n+        /**\n+         * Reconciliation sketches are computed over short transaction IDs.\n+         * This is a cache of these IDs enabling faster lookups of full wtxids,\n+         * useful when peer will ask for missing transactions by short IDs\n+         * at the end of a reconciliation round.\n+         */\n+        std::map<uint32_t, uint256> m_local_short_id_mapping;\n+\n+        /**\n+         * A reconciliation round may involve an extension, which is an extra exchange of messages.\n+         * Since it may happen after a delay (at least network latency), new transactions may come\n+         * during that time. To avoid mixing old and new transactions, those which are subject for\n+         * extension of a current reconciliation round are moved to a reconciliation set snapshot\n+         * after an initial (non-extended) sketch is sent.\n+         * New transactions are kept in the regular reconciliation set.\n+         */\n+        std::set<uint256> m_local_set_snapshot;\n+\n+        /**\n+         * A reconciliation round may involve an extension, in which case we should remember\n+         * a capacity of the sketch sent out initially, so that a sketch extension is of the same size.\n+         */\n+        uint16_t m_capacity_snapshot{0};\n+\n+        /**\n+         * In a reconciliation round initiated by us, if we asked for an extension, we want to store\n+         * the sketch computed/transmitted in the initial step, so that we can use it when\n+         * sketch extension arrives.\n+         */\n+        std::vector<uint8_t> m_remote_sketch_snapshot;\n+\n+        /**\n+        * Reconciliation sketches are computed over short transaction IDs.\n+        * Short IDs are salted with a link-specific constant value.\n+        */\n+        uint32_t ComputeShortID(const uint256 wtxid) const\n+        {\n+            uint64_t s = SipHashUint256(m_k0, m_k1, wtxid);\n+            uint32_t short_txid = 1 + (s & 0xFFFFFFFF);\n+            return short_txid;\n+        }\n+\n+        /**\n+         * Estimate a capacity of a sketch we will send or use locally (to find set difference)\n+         * based on the local set size.\n+         */\n+        uint16_t EstimateSketchCapacity() const\n+        {\n+            uint16_t set_size_diff = std::abs(uint16_t(m_local_set.size()) - m_remote_set_size);\n+            uint16_t min_size = std::min(uint16_t(m_local_set.size()), m_remote_set_size);\n+            uint16_t weighted_min_size = m_remote_q * min_size;\n+            uint16_t estimated_diff = 1 + weighted_min_size + set_size_diff;\n+            return minisketch_compute_capacity(RECON_FIELD_SIZE, estimated_diff, RECON_FALSE_POSITIVE_COEF);\n+        }\n+\n+        /**\n+         * Reconciliation involves computing a space-efficient representation of transaction identifiers (a sketch).\n+         * A sketch has a capacity meaning it allows reconciling at most a certain number of elements. (see BIP-330).\n+         * Considering whether we are going to send a sketch to a peer or use locally, we estimate the set difference.\n+         */\n+        Minisketch ComputeSketch(const std::set<uint256> local_set, uint16_t& capacity)",
      "path": "src/net_processing.h",
      "position": null,
      "original_position": 208,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "f472f3077e6860f2ec6b1ecb3d4b47fc929bccb3",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Inside a structure inside `Peer` feels like the wrong place for a lot of this complex logic. I think ideally, `Peer` would continue to be a struct (i.e. data members only) and the logic would be contained in a separate module.",
      "created_at": "2021-01-17T22:38:48Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r559249350",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559249350"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 280,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559249519",
      "pull_request_review_id": 570100861,
      "id": 559249519,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI0OTUxOQ==",
      "diff_hunk": "@@ -89,7 +103,314 @@ struct Peer {\n     /** Work queue of items requested by this peer **/\n     std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n \n-    explicit Peer(NodeId id) : m_id(id) {}\n+    explicit Peer(NodeId id) : m_id(id), m_local_recon_salt(GetRand(UINT64_MAX)) {}\n+\n+    /**\n+     * Salt used to compute short IDs during transaction reconciliation.\n+     * Salt is generated randomly per-connection to prevent linking of\n+     * connections belonging to the same physical node.\n+     * Also, salts should be different per-connection to prevent halting\n+     * of relay of particular transactions due to collisions in short IDs.\n+     */\n+    const uint64_t m_local_recon_salt;\n+\n+    /**\n+     * This struct is used to keep track of the reconciliations with a given peer.\n+     * Transaction reconciliation means an efficient synchronization of the known\n+     * transactions between a pair of peers.\n+     * One reconciliation round consists of a sequence of messages. The sequence is\n+     * asymmetrical, there is always a requestor and a responder. At the end of the\n+     * sequence, nodes are supposed to exchange transactions, so that both of them\n+     * have all relevant transactions. For more protocol details, refer to BIP-0330.\n+     */\n+    struct ReconState {\n+        /** Default coefficient used to estimate set difference for tx reconciliation. */\n+        static constexpr double DEFAULT_RECON_Q = 0.02;\n+\n+        ReconState(bool requestor, bool responder, bool flood_to, uint64_t k0, uint64_t k1) :\n+            m_requestor(requestor), m_responder(responder), m_flood_to(flood_to), m_k0(k0), m_k1(k1), m_local_q(DEFAULT_RECON_Q) {}\n+\n+        /// Whether this peer will send reconciliation requests.\n+        bool m_requestor;\n+\n+        /// Whether this peer will respond to reconciliation requests.\n+        bool m_responder;\n+\n+        /**\n+         * Since reconciliation-only approach makes transaction relay\n+         * significantly slower, we also announce some of the transactions\n+         * (currently, transactions received from inbound links)\n+         * to some of the peers:\n+         * - all pre-reconciliation peers supporting transaction relay;\n+         * - a limited number of outbound reconciling peers *for which this flag is enabled*.\n+         * We enable this flag based on whether we have a\n+         * sufficient number of outbound transaction relay peers.\n+         * This flooding makes transaction relay across the network faster\n+         * without introducing high the bandwidth overhead.\n+         * Transactions announced via flooding should not be added to\n+         * the reconciliation set.\n+         */\n+        bool m_flood_to;\n+\n+        /**\n+         * Reconciliation involves computing and transmitting sketches,\n+         * which is a bandwidth-efficient representation of transaction IDs.\n+         * Since computing sketches over full txID is too CPU-expensive,\n+         * they will be computed over shortened IDs instead.\n+         * These short IDs will be salted so that they are not the same\n+         * across all pairs of peers, because otherwise it would enable network-wide\n+         * collisions which may (intentionally or not) halt relay of certain transactions.\n+         * Both of the peers contribute to the salt.\n+         */\n+        const uint64_t m_k0, m_k1;\n+\n+        /**\n+         * Computing a set reconciliation sketch involves estimating the difference\n+         * between sets of transactions on two sides of the connection. More specifically,\n+         * a sketch capacity is computed as\n+         * |set_size - local_set_size| + q * (set_size + local_set_size) + c,\n+         * where c is a small constant, and q is a node+connection-specific coefficient.\n+         * This coefficient is recomputed by every node based on its previous reconciliations,\n+         * to better predict future set size differences.\n+         */\n+        double m_local_q;\n+\n+        /**\n+         * Store all transactions which we would relay to the peer (policy checks passed, etc.) in this set\n+         * instead of announcing them right away. When reconciliation time comes, we will\n+         * compute an efficient representation of this set (\"sketch\") and use it to efficient reconcile\n+         * this set with a similar set on the other side of the connection.\n+         */\n+        std::set<uint256> m_local_set;\n+\n+        /**\n+         * A reconciliation request comes from a peer with a reconciliation set size from their side,\n+         * which is supposed to help us to estimate set difference size. The value is stored here until\n+         * we respond to that request with a sketch.\n+         */\n+        uint16_t m_remote_set_size;\n+\n+        /**\n+         * The use of q coefficients is described above (see local_q comment).\n+         * The value transmitted from the peer with a reconciliation requests is stored here until\n+         * we respond to that request with a sketch.\n+         */\n+        double m_remote_q;\n+\n+        /**\n+         * When a reconciliation request is received, instead of responding to it right away,\n+         * we schedule a response for later, so that a spy can't monitor our reconciliation sets.\n+         */\n+        std::chrono::microseconds m_next_recon_respond{0};\n+\n+        /**\n+         * Used to keep track of the current reconciliation round with a peer.\n+         * Used for both inbound (responded) and outgoing (requested/initiated) reconciliations.\n+         * Currently only one sketch extension request is supported.\n+         */\n+        enum ReconPhase {\n+            NONE,\n+            INIT_REQUESTED,\n+            INIT_RESPONDED,\n+            EXT_REQUESTED,\n+            EXT_RESPONDED,\n+        };\n+        ReconPhase m_outgoing_recon{ReconPhase::NONE};\n+        ReconPhase m_incoming_recon{ReconPhase::NONE};\n+\n+        /**\n+         * Reconciliation sketches are computed over short transaction IDs.\n+         * This is a cache of these IDs enabling faster lookups of full wtxids,\n+         * useful when peer will ask for missing transactions by short IDs\n+         * at the end of a reconciliation round.\n+         */\n+        std::map<uint32_t, uint256> m_local_short_id_mapping;\n+\n+        /**\n+         * A reconciliation round may involve an extension, which is an extra exchange of messages.\n+         * Since it may happen after a delay (at least network latency), new transactions may come\n+         * during that time. To avoid mixing old and new transactions, those which are subject for\n+         * extension of a current reconciliation round are moved to a reconciliation set snapshot\n+         * after an initial (non-extended) sketch is sent.\n+         * New transactions are kept in the regular reconciliation set.\n+         */\n+        std::set<uint256> m_local_set_snapshot;\n+\n+        /**\n+         * A reconciliation round may involve an extension, in which case we should remember\n+         * a capacity of the sketch sent out initially, so that a sketch extension is of the same size.\n+         */\n+        uint16_t m_capacity_snapshot{0};\n+\n+        /**\n+         * In a reconciliation round initiated by us, if we asked for an extension, we want to store\n+         * the sketch computed/transmitted in the initial step, so that we can use it when\n+         * sketch extension arrives.\n+         */\n+        std::vector<uint8_t> m_remote_sketch_snapshot;\n+\n+        /**\n+        * Reconciliation sketches are computed over short transaction IDs.\n+        * Short IDs are salted with a link-specific constant value.\n+        */\n+        uint32_t ComputeShortID(const uint256 wtxid) const\n+        {\n+            uint64_t s = SipHashUint256(m_k0, m_k1, wtxid);\n+            uint32_t short_txid = 1 + (s & 0xFFFFFFFF);\n+            return short_txid;\n+        }\n+\n+        /**\n+         * Estimate a capacity of a sketch we will send or use locally (to find set difference)\n+         * based on the local set size.\n+         */\n+        uint16_t EstimateSketchCapacity() const\n+        {\n+            uint16_t set_size_diff = std::abs(uint16_t(m_local_set.size()) - m_remote_set_size);\n+            uint16_t min_size = std::min(uint16_t(m_local_set.size()), m_remote_set_size);\n+            uint16_t weighted_min_size = m_remote_q * min_size;\n+            uint16_t estimated_diff = 1 + weighted_min_size + set_size_diff;\n+            return minisketch_compute_capacity(RECON_FIELD_SIZE, estimated_diff, RECON_FALSE_POSITIVE_COEF);\n+        }\n+\n+        /**\n+         * Reconciliation involves computing a space-efficient representation of transaction identifiers (a sketch).\n+         * A sketch has a capacity meaning it allows reconciling at most a certain number of elements. (see BIP-330).\n+         * Considering whether we are going to send a sketch to a peer or use locally, we estimate the set difference.\n+         */\n+        Minisketch ComputeSketch(const std::set<uint256> local_set, uint16_t& capacity)\n+        {\n+            Minisketch sketch;\n+            if (local_set.size() == 0 || capacity == 0) return sketch; // Avoid serializing/sending an empty sketch.\n+\n+            std::vector<uint32_t> short_ids;\n+            for (const auto& wtxid: local_set) {\n+                uint32_t short_txid = ComputeShortID(wtxid);\n+                short_ids.push_back(short_txid);\n+                m_local_short_id_mapping.emplace(short_txid, wtxid);\n+            }\n+\n+            capacity = std::min(capacity, MAX_SKETCH_CAPACITY);\n+            sketch = Minisketch(RECON_FIELD_SIZE, 0, capacity);\n+            if (sketch) {\n+                for (const uint32_t short_id: short_ids) {\n+                    sketch.Add(short_id);\n+                }\n+            }\n+            return sketch;\n+        }\n+\n+        Minisketch ComputeExtendedSketch() {\n+            // For now, compute a sketch of twice the capacity were computed originally.\n+            // If the sketch is meant to be sent, drop the lower syndromes.\n+            // TODO: optimize by computing the extension *on top* of the existent sketch\n+            // instead of computing the lower order elements again.\n+            uint16_t extended_capacity = m_capacity_snapshot * 2;\n+            return ComputeSketch(m_local_set_snapshot, extended_capacity);\n+        }\n+\n+        /**\n+         * After a reconciliation round is over, the local q coefficient may be adjusted to enable\n+         * better accuracy of future set difference estimations.\n+         * Recompute q in case of full reconciliation success (both initially or after extension).\n+         * In case reconciliation completely failed (initial and extension), fallback to the default q,\n+         * set to cause an overestimation, but should converge to the reasonable q in the next round.\n+         * Note that accurate recompute in case of complete failure is difficult, because it requires waiting for GETDATA/INV\n+         * the peer would send to us, and find the actual difference from there (also may be inaccurate due to the latencies).\n+         */\n+        enum LocalQAction {\n+            Q_KEEP,\n+            Q_RECOMPUTE,\n+            Q_SET_DEFAULT\n+        };\n+\n+        /**\n+         * Clears the state of the peer when the reconciliation is done.\n+         * If this is a extension finalization, keep the reconciliation set to track\n+         * the transactions received from other peers during the reconciliation.\n+         * Also keep the set if this if finalizing initial incoming reconciliation, because\n+         * there was a time frame when we sent out an initial sketch until peer responded.\n+         * If we're finalizing initial outgoing reconciliation, it is safe to clear the set,\n+         * because we do not use the snapshot, but sketch the original set (which might have received\n+         * few new transactions), and finalize the reconciliation immediately.\n+         */\n+        void FinalizeReconciliation(bool clear_local_set, LocalQAction action, size_t actual_local_missing, size_t actual_remote_missing)\n+        {\n+            // According to the erlay spec, reconciliation is initiated by inbound peers.\n+            if (m_requestor) {\n+                assert(m_incoming_recon != ReconPhase::NONE);\n+                m_incoming_recon = ReconPhase::NONE;\n+            } else {\n+                // When reconciliation initialized by us is done, update local q for future reconciliations.\n+                if (action == LocalQAction::Q_RECOMPUTE) {\n+                    assert(m_outgoing_recon != ReconPhase::NONE);\n+                    uint8_t local_set_size;\n+                    if (m_outgoing_recon == ReconPhase::EXT_REQUESTED) {\n+                        local_set_size = m_local_set_snapshot.size();\n+                    } else {\n+                        local_set_size = m_local_set.size();\n+                    }\n+                    uint8_t remote_set_size = local_set_size + actual_local_missing - actual_remote_missing;\n+                    uint8_t set_size_diff = std::abs(local_set_size - remote_set_size);\n+                    uint8_t min_size = std::min(local_set_size, remote_set_size);\n+                    uint8_t actual_difference = actual_local_missing + actual_remote_missing;\n+                    if (min_size != 0) {\n+                        m_local_q = double(actual_difference - set_size_diff) / min_size;\n+                        assert(m_local_q >= 0 && m_local_q <= 2);\n+                    }\n+                } else if (action == LocalQAction::Q_SET_DEFAULT) {\n+                    m_local_q = DEFAULT_RECON_Q;\n+                }\n+                m_outgoing_recon = ReconPhase::NONE;\n+            }\n+            if (clear_local_set) m_local_set.clear();\n+\n+            m_local_short_id_mapping.clear();\n+            // This is currently belt-and-suspenders, as the code should work even without these calls.\n+            m_remote_sketch_snapshot.clear();\n+            m_local_set_snapshot.clear();\n+            m_capacity_snapshot = 0;\n+        }\n+\n+        /**\n+         * When during reconciliation we find a set difference successfully (by combining sketches),\n+         * we want to find which transactions are missing on our and on their side.\n+         * For those missing on our side, we may only find short IDs.\n+         */\n+        std::vector<uint256> GetRelevantIDsFromShortIDs(std::vector<uint64_t> diff, std::vector<uint32_t>& local_missing)\n+        {\n+            std::vector<uint256> remote_missing;\n+            for (const auto& diff_short_id: diff) {\n+                const auto local_tx = m_local_short_id_mapping.find(diff_short_id);\n+                if (local_tx != m_local_short_id_mapping.end()) {\n+                    remote_missing.push_back(local_tx->second);\n+                } else {\n+                    local_missing.push_back(diff_short_id);\n+                }\n+            }\n+            return remote_missing;\n+        }\n+\n+        /**\n+         * After a reconciliation round passed, transactions missing by our peer are known by short ID.\n+         * Look up their full wtxid locally to announce them to the peer.\n+         */\n+        std::vector<uint256> GetWTXIDsFromShortIDs(const std::vector<uint32_t>& remote_missing_short_ids)\n+        {\n+            std::vector<uint256> remote_missing;\n+            for (size_t i = 0; i < remote_missing_short_ids.size(); ++i) {\n+                auto local_tx = m_local_short_id_mapping.find(remote_missing_short_ids[i]);\n+                if (local_tx != m_local_short_id_mapping.end()) {\n+                    remote_missing.push_back(local_tx->second);\n+                }\n+            }\n+            return remote_missing;\n+        }\n+    };\n+\n+    RecursiveMutex cs_recon_state;",
      "path": "src/net_processing.h",
      "position": null,
      "original_position": 338,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "f472f3077e6860f2ec6b1ecb3d4b47fc929bccb3",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Don't use old cs nomenclature for mutexes:\r\n\r\n```suggestion\r\n    RecursiveMutex m_recon_state_mutex;\r\n```\r\n\r\nAlso prefer to use a `Mutex` over a `RecursiveMutex` in new code.",
      "created_at": "2021-01-17T22:39:50Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r559249519",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559249519"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 410,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559249641",
      "pull_request_review_id": 570100861,
      "id": 559249641,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI0OTY0MQ==",
      "diff_hunk": "@@ -232,6 +553,38 @@ class PeerManager final : public CValidationInterface, public NetEventsInterface\n \n     int64_t m_stale_tip_check_time; //!< Next time to check for stale tip\n \n+    /**\n+     * Return the number of outbound peers we\n+     * relay transactions to by flooding.\n+     * Used to determine whether we should flood to a new peer\n+     * which supports reconciliation, in case we haven't reached\n+     * the outbound flooding bandwidth-conserving limit.\n+     */\n+    size_t GetFloodingOutboundsCount() const;\n+\n+    /**\n+     * Transaction reconciliation should happen with peers in the same order,\n+     * because the efficiency gain is the highest when reconciliation set difference\n+     * is predictable. This queue is used to maintain the order of\n+     * peers chosen for reconciliation.\n+     */\n+    RecursiveMutex cs_recon_queue;",
      "path": "src/net_processing.h",
      "position": null,
      "original_position": 363,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "f472f3077e6860f2ec6b1ecb3d4b47fc929bccb3",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Again, prefer a non-reenrant mutex and don't use the cs nomenclature.",
      "created_at": "2021-01-17T22:40:44Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r559249641",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559249641"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 571,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559249766",
      "pull_request_review_id": 570100861,
      "id": 559249766,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI0OTc2Ng==",
      "diff_hunk": "@@ -0,0 +1,595 @@\n+#!/usr/bin/env python3\n+# Copyhigh (c) 2016-2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test reconciliation-based transaction relay protocol.\n+",
      "path": "test/functional/p2p_erlay.py",
      "position": null,
      "original_position": 6,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "f472f3077e6860f2ec6b1ecb3d4b47fc929bccb3",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why this space?",
      "created_at": "2021-01-17T22:41:45Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r559249766",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559249766"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559249818",
      "pull_request_review_id": 570100861,
      "id": 559249818,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI0OTgxOA==",
      "diff_hunk": "@@ -0,0 +1,595 @@\n+#!/usr/bin/env python3\n+# Copyhigh (c) 2016-2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test reconciliation-based transaction relay protocol.\n+\n+\"\"\"\n+\n+from test_framework.p2p import P2PDataStore, p2p_lock\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, hex_str_to_bytes\n+from test_framework.messages import (\n+    msg_inv, msg_getdata,\n+    msg_sendrecon, msg_reqrecon,\n+    msg_sketch, msg_reqsketchext, msg_reconcildiff,\n+    CTransaction, CInv\n+)\n+from test_framework.siphash import siphash256\n+from test_framework.key import TaggedHash\n+from enum import IntEnum\n+from io import BytesIO\n+import random\n+import hashlib\n+import time\n+import struct",
      "path": "test/functional/p2p_erlay.py",
      "position": null,
      "original_position": 25,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "f472f3077e6860f2ec6b1ecb3d4b47fc929bccb3",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Please sort, with standard library imports first.",
      "created_at": "2021-01-17T22:42:06Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r559249818",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559249818"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": 9,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559249883",
      "pull_request_review_id": 570100861,
      "id": 559249883,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI0OTg4Mw==",
      "diff_hunk": "@@ -0,0 +1,595 @@\n+#!/usr/bin/env python3\n+# Copyhigh (c) 2016-2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test reconciliation-based transaction relay protocol.\n+\n+\"\"\"\n+\n+from test_framework.p2p import P2PDataStore, p2p_lock\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, hex_str_to_bytes\n+from test_framework.messages import (\n+    msg_inv, msg_getdata,\n+    msg_sendrecon, msg_reqrecon,\n+    msg_sketch, msg_reqsketchext, msg_reconcildiff,\n+    CTransaction, CInv\n+)\n+from test_framework.siphash import siphash256\n+from test_framework.key import TaggedHash\n+from enum import IntEnum\n+from io import BytesIO\n+import random\n+import hashlib\n+import time\n+import struct\n+\n+MASK64 = 0xffffffffffffffff\n+MSG_WTX = 5\n+\n+# These parameters are specified in the BIP-0330.\n+Q_PRECISION = (2 << 14) - 1\n+FIELD_BITS = 32\n+FIELD_MODULUS = (1 << FIELD_BITS) + 0b10001101\n+\n+# These parameters are suggested by the Erlay paper based on analysis and simulations.\n+DEFAULT_Q = 0.02\n+RECON_REQUEST_INTERVAL = 16\n+INVENTORY_BROADCAST_INTERVAL = 2\n+PENALIZED_INVENTORY_BROADCAST_INTERVAL = INVENTORY_BROADCAST_INTERVAL * 2\n+MAX_OUTBOUND_FLOOD_TO = 8\n+\n+BYTES_PER_SKETCH_CAPACITY = FIELD_BITS / 8\n+\n+def mul2(x):\n+    \"\"\"Compute 2*x in GF(2^FIELD_BITS)\"\"\"\n+    return (x << 1) ^ (FIELD_MODULUS if x.bit_length() >= FIELD_BITS else 0)\n+\n+def mul(x, y):\n+    \"\"\"Compute x*y in GF(2^FIELD_BITS)\"\"\"\n+    ret = 0\n+    for bit in [(x >> i) & 1 for i in range(x.bit_length())]:\n+        ret, y = ret ^ bit * y, mul2(y)\n+    return ret\n+\n+def create_sketch(shortids, capacity):\n+    \"\"\"Compute the bytes of a sketch for given shortids and given capacity.\"\"\"\n+    odd_sums = [0 for _ in range(capacity)]\n+    for shortid in shortids:\n+        squared = mul(shortid, shortid)\n+        for i in range(capacity):\n+            odd_sums[i] ^= shortid\n+            shortid = mul(shortid, squared)\n+    sketch_bytes = []\n+    for odd_sum in odd_sums:\n+        for i in range(4):\n+            sketch_bytes.append((odd_sum >> (i * 8)) & 0xff)\n+    return sketch_bytes\n+\n+def maybe_add_checksum(capacity):\n+    if capacity < 10:\n+        capacity += 1\n+    return capacity\n+\n+# TestP2PConn: A peer we use to send messages to bitcoind, and store responses.\n+class TestP2PConn(P2PDataStore):\n+    def __init__(self, recon_version, local_salt):\n+        super().__init__()\n+        self.recon_version = recon_version\n+        self.local_salt = local_salt\n+        self.remote_salt = 0\n+        self.last_sendrecon = []\n+        self.last_sketch = []\n+        self.last_inv = []\n+        self.last_tx = []\n+        self.last_reqreconcil = []\n+        self.last_reconcildiff = []\n+        self.last_reqsketchext = []\n+        self.last_getdata = []\n+        self.remote_q = DEFAULT_Q\n+        self.last_wtxidrelay = []\n+\n+    def on_sendrecon(self, message):\n+        self.last_sendrecon.append(message)\n+        self.remote_salt = message.salt\n+\n+    def on_wtxidrelay(self, message):\n+        self.last_wtxidrelay.append(message)\n+\n+    def on_sketch(self, message):\n+        self.last_sketch.append(message)\n+\n+    def on_inv(self, message):\n+        MSG_BLOCK = 2\n+        for inv in message.inv:\n+            if inv.type != MSG_BLOCK: # ignore block invs\n+                self.last_inv.append(inv.hash)\n+\n+    def on_tx(self, message):\n+        self.last_tx.append(message.tx.calc_sha256(True))\n+\n+    def on_reqrecon(self, message):\n+        self.last_reqreconcil.append(message)\n+\n+    def on_reqsketchext(self, message):\n+        self.last_reqsketchext.append(message)\n+\n+    def on_reconcildiff(self, message):\n+        self.last_reconcildiff.append(message)\n+\n+    def send_sendrecon(self, sender, responder):\n+        msg = msg_sendrecon()\n+        msg.salt = self.local_salt\n+        msg.version = self.recon_version\n+        msg.sender = sender\n+        msg.responder = responder\n+        self.send_message(msg)\n+\n+    def send_reqrecon(self, set_size, q):\n+        msg = msg_reqrecon()\n+        msg.set_size = set_size\n+        msg.q = q\n+        self.send_message(msg)\n+\n+    def send_sketch(self, skdata):\n+        msg = msg_sketch()\n+        msg.skdata = skdata\n+        self.send_message(msg)\n+\n+    def send_reqsketchext(self):\n+        msg = msg_reqsketchext()\n+        self.send_message(msg)\n+\n+    def send_reconcildiff(self, success, ask_shortids):\n+        msg = msg_reconcildiff()\n+        msg.success = success\n+        msg.ask_shortids = ask_shortids\n+        self.send_message(msg)\n+\n+    def send_inv(self, inv_wtxids):\n+        msg = msg_inv(inv=[CInv(MSG_WTX, h=wtxid) for wtxid in inv_wtxids])\n+        self.send_message(msg)\n+\n+    def send_getdata(self, ask_wtxids):\n+        msg = msg_getdata(inv=[CInv(MSG_WTX, h=wtxid) for wtxid in ask_wtxids])\n+        self.send_message(msg)\n+\n+class ReconResult(IntEnum):\n+    RECON_FAILED = 0\n+    RECON_SUCCESS = 1",
      "path": "test/functional/p2p_erlay.py",
      "position": null,
      "original_position": 159,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "f472f3077e6860f2ec6b1ecb3d4b47fc929bccb3",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why not a bool?",
      "created_at": "2021-01-17T22:42:40Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r559249883",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559249883"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": 157,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 159,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559249972",
      "pull_request_review_id": 570100861,
      "id": 559249972,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI0OTk3Mg==",
      "diff_hunk": "@@ -121,6 +121,29 @@ def ser_uint256(u):\n     return rs\n \n \n+def deser_uint128(f):\n+    r = 0\n+    for i in range(4):\n+        t = struct.unpack(\"<I\", f.read(4))[0]\n+        r += t << (i * 32)\n+    return r\n+\n+\n+def ser_uint128(u):\n+    rs = b\"\"\n+    for i in range(4):\n+        rs += struct.pack(\"<I\", u & 0xFFFFFFFF)\n+        u >>= 32\n+    return rs",
      "path": "test/functional/test_framework/messages.py",
      "position": null,
      "original_position": 17,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "f472f3077e6860f2ec6b1ecb3d4b47fc929bccb3",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think that these are unneeded now that truncated txids aren't used",
      "created_at": "2021-01-17T22:43:27Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r559249972",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559249972"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": 124,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 137,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559250042",
      "pull_request_review_id": 570100861,
      "id": 559250042,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI1MDA0Mg==",
      "diff_hunk": "@@ -178,6 +201,49 @@ def ser_uint256_vector(l):\n         r += ser_uint256(i)\n     return r\n \n+def deser_uint128_vector(f):\n+    nit = deser_compact_size(f)\n+    r = []\n+    for i in range(nit):\n+        t = deser_uint128(f)\n+        r.append(t)\n+    return r\n+\n+def ser_uint128_vector(l):\n+    r = ser_compact_size(len(l))\n+    for i in l:\n+        r += ser_uint128(i)\n+    return r\n+\n+def deser_uint32_vector(f):\n+    nit = deser_compact_size(f)\n+    r = []\n+    for i in range(nit):\n+        t = deser_uint32(f)\n+        r.append(t)\n+    return r\n+\n+def ser_uint32_vector(l):\n+    r = ser_compact_size(len(l))\n+    for i in l:\n+        r += ser_uint32(i)\n+    return r\n+\n+def deser_uint8_vector(f):\n+    nit = deser_compact_size(f)\n+    r = []\n+    for i in range(nit):\n+        t = struct.unpack(\"<B\", f.read(1))[0]\n+        r.append(t)\n+    return r\n+\n+",
      "path": "test/functional/test_framework/messages.py",
      "position": null,
      "original_position": 70,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "f472f3077e6860f2ec6b1ecb3d4b47fc929bccb3",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "why two blank lines?",
      "created_at": "2021-01-17T22:43:55Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r559250042",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559250042"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": 239,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 240,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559250087",
      "pull_request_review_id": 570100861,
      "id": 559250087,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI1MDA4Nw==",
      "diff_hunk": "@@ -27,6 +27,7 @@\n import struct\n import sys\n import threading\n+import socket",
      "path": "test/functional/test_framework/p2p.py",
      "position": null,
      "original_position": 4,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "f472f3077e6860f2ec6b1ecb3d4b47fc929bccb3",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "sort",
      "created_at": "2021-01-17T22:44:13Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r559250087",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559250087"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559250109",
      "pull_request_review_id": 570100861,
      "id": 559250109,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI1MDEwOQ==",
      "diff_hunk": "@@ -59,6 +60,11 @@\n     msg_pong,\n     msg_sendaddrv2,\n     msg_sendcmpct,\n+    msg_sendrecon,",
      "path": "test/functional/test_framework/p2p.py",
      "position": 17,
      "original_position": 12,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "f472f3077e6860f2ec6b1ecb3d4b47fc929bccb3",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "sort",
      "created_at": "2021-01-17T22:44:21Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r559250109",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559250109"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 66,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559250122",
      "pull_request_review_id": 570100861,
      "id": 559250122,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI1MDEyMg==",
      "diff_hunk": "@@ -107,6 +113,11 @@\n     b\"verack\": msg_verack,\n     b\"version\": msg_version,\n     b\"wtxidrelay\": msg_wtxidrelay,\n+    b\"sendrecon\": msg_sendrecon,",
      "path": "test/functional/test_framework/p2p.py",
      "position": null,
      "original_position": 24,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "f472f3077e6860f2ec6b1ecb3d4b47fc929bccb3",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "sort",
      "created_at": "2021-01-17T22:44:29Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r559250122",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559250122"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 116,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559250156",
      "pull_request_review_id": 570100861,
      "id": 559250156,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI1MDE1Ng==",
      "diff_hunk": "@@ -379,6 +408,7 @@ def on_sendaddrv2(self, message): pass\n     def on_sendcmpct(self, message): pass\n     def on_sendheaders(self, message): pass\n     def on_tx(self, message): pass\n+    def on_sendrecon(self, message): pass",
      "path": "test/functional/test_framework/p2p.py",
      "position": 72,
      "original_position": 74,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "f472f3077e6860f2ec6b1ecb3d4b47fc929bccb3",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "sort",
      "created_at": "2021-01-17T22:44:52Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r559250156",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559250156"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 429,
      "original_line": 429,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560107354",
      "pull_request_review_id": 571149947,
      "id": 560107354,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDEwNzM1NA==",
      "diff_hunk": "@@ -2267,6 +2355,29 @@ static void ProcessGetCFCheckPt(CNode& peer, CDataStream& vRecv, const CChainPar\n     connman.PushMessage(&peer, std::move(msg));\n }\n \n+/**\n+ * Announce transactions a peer is missing after reconciliation is done.\n+ * No need to add transactions to peer's filter or do checks\n+ * because it was already done when adding to the reconciliation set.\n+ */\n+void static AnnounceTxs(const std::vector<uint256>& remote_missing_wtxids, CNode& pto, const CNetMsgMaker& msgMaker, CConnman& connman)\n+{\n+    if (remote_missing_wtxids.size() != 0) {\n+        std::vector<CInv> remote_missing_invs;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 185,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "f472f3077e6860f2ec6b1ecb3d4b47fc929bccb3",
      "in_reply_to_id": 559248400,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this should be min, because the vector never exceeds MAX_INV_SIZE.",
      "created_at": "2021-01-19T11:25:54Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r560107354",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560107354"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2366,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560122958",
      "pull_request_review_id": 571170480,
      "id": 560122958,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDEyMjk1OA==",
      "diff_hunk": "@@ -2267,6 +2355,29 @@ static void ProcessGetCFCheckPt(CNode& peer, CDataStream& vRecv, const CChainPar\n     connman.PushMessage(&peer, std::move(msg));\n }\n \n+/**\n+ * Announce transactions a peer is missing after reconciliation is done.\n+ * No need to add transactions to peer's filter or do checks\n+ * because it was already done when adding to the reconciliation set.\n+ */\n+void static AnnounceTxs(const std::vector<uint256>& remote_missing_wtxids, CNode& pto, const CNetMsgMaker& msgMaker, CConnman& connman)\n+{\n+    if (remote_missing_wtxids.size() != 0) {\n+        std::vector<CInv> remote_missing_invs;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 185,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "f472f3077e6860f2ec6b1ecb3d4b47fc929bccb3",
      "in_reply_to_id": 559248400,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "yes, you're right. Should be min.",
      "created_at": "2021-01-19T11:54:21Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r560122958",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560122958"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2366,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560240227",
      "pull_request_review_id": 571328890,
      "id": 560240227,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDI0MDIyNw==",
      "diff_hunk": "@@ -232,6 +553,38 @@ class PeerManager final : public CValidationInterface, public NetEventsInterface\n \n     int64_t m_stale_tip_check_time; //!< Next time to check for stale tip\n \n+    /**\n+     * Return the number of outbound peers we\n+     * relay transactions to by flooding.\n+     * Used to determine whether we should flood to a new peer\n+     * which supports reconciliation, in case we haven't reached\n+     * the outbound flooding bandwidth-conserving limit.\n+     */\n+    size_t GetFloodingOutboundsCount() const;\n+\n+    /**\n+     * Transaction reconciliation should happen with peers in the same order,\n+     * because the efficiency gain is the highest when reconciliation set difference\n+     * is predictable. This queue is used to maintain the order of\n+     * peers chosen for reconciliation.\n+     */\n+    RecursiveMutex cs_recon_queue;",
      "path": "src/net_processing.h",
      "position": null,
      "original_position": 363,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "f472f3077e6860f2ec6b1ecb3d4b47fc929bccb3",
      "in_reply_to_id": 559249641,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I can switch to non-recursive if UpdateNextReconRequest() takes `m_recon_queue.size()` as an argument, instead of accessing it inside. Do you think that would be preferable?",
      "created_at": "2021-01-19T15:00:01Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r560240227",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560240227"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 571,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560259462",
      "pull_request_review_id": 571355551,
      "id": 560259462,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDI1OTQ2Mg==",
      "diff_hunk": "@@ -89,7 +103,314 @@ struct Peer {\n     /** Work queue of items requested by this peer **/\n     std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n \n-    explicit Peer(NodeId id) : m_id(id) {}\n+    explicit Peer(NodeId id) : m_id(id), m_local_recon_salt(GetRand(UINT64_MAX)) {}\n+\n+    /**\n+     * Salt used to compute short IDs during transaction reconciliation.\n+     * Salt is generated randomly per-connection to prevent linking of\n+     * connections belonging to the same physical node.\n+     * Also, salts should be different per-connection to prevent halting\n+     * of relay of particular transactions due to collisions in short IDs.\n+     */\n+    const uint64_t m_local_recon_salt;\n+\n+    /**\n+     * This struct is used to keep track of the reconciliations with a given peer.\n+     * Transaction reconciliation means an efficient synchronization of the known\n+     * transactions between a pair of peers.\n+     * One reconciliation round consists of a sequence of messages. The sequence is\n+     * asymmetrical, there is always a requestor and a responder. At the end of the\n+     * sequence, nodes are supposed to exchange transactions, so that both of them\n+     * have all relevant transactions. For more protocol details, refer to BIP-0330.\n+     */\n+    struct ReconState {\n+        /** Default coefficient used to estimate set difference for tx reconciliation. */\n+        static constexpr double DEFAULT_RECON_Q = 0.02;\n+\n+        ReconState(bool requestor, bool responder, bool flood_to, uint64_t k0, uint64_t k1) :\n+            m_requestor(requestor), m_responder(responder), m_flood_to(flood_to), m_k0(k0), m_k1(k1), m_local_q(DEFAULT_RECON_Q) {}\n+\n+        /// Whether this peer will send reconciliation requests.\n+        bool m_requestor;\n+\n+        /// Whether this peer will respond to reconciliation requests.\n+        bool m_responder;\n+\n+        /**\n+         * Since reconciliation-only approach makes transaction relay\n+         * significantly slower, we also announce some of the transactions\n+         * (currently, transactions received from inbound links)\n+         * to some of the peers:\n+         * - all pre-reconciliation peers supporting transaction relay;\n+         * - a limited number of outbound reconciling peers *for which this flag is enabled*.\n+         * We enable this flag based on whether we have a\n+         * sufficient number of outbound transaction relay peers.\n+         * This flooding makes transaction relay across the network faster\n+         * without introducing high the bandwidth overhead.\n+         * Transactions announced via flooding should not be added to\n+         * the reconciliation set.\n+         */\n+        bool m_flood_to;\n+\n+        /**\n+         * Reconciliation involves computing and transmitting sketches,\n+         * which is a bandwidth-efficient representation of transaction IDs.\n+         * Since computing sketches over full txID is too CPU-expensive,\n+         * they will be computed over shortened IDs instead.\n+         * These short IDs will be salted so that they are not the same\n+         * across all pairs of peers, because otherwise it would enable network-wide\n+         * collisions which may (intentionally or not) halt relay of certain transactions.\n+         * Both of the peers contribute to the salt.\n+         */\n+        const uint64_t m_k0, m_k1;\n+\n+        /**\n+         * Computing a set reconciliation sketch involves estimating the difference\n+         * between sets of transactions on two sides of the connection. More specifically,\n+         * a sketch capacity is computed as\n+         * |set_size - local_set_size| + q * (set_size + local_set_size) + c,\n+         * where c is a small constant, and q is a node+connection-specific coefficient.\n+         * This coefficient is recomputed by every node based on its previous reconciliations,\n+         * to better predict future set size differences.\n+         */\n+        double m_local_q;\n+\n+        /**\n+         * Store all transactions which we would relay to the peer (policy checks passed, etc.) in this set\n+         * instead of announcing them right away. When reconciliation time comes, we will\n+         * compute an efficient representation of this set (\"sketch\") and use it to efficient reconcile\n+         * this set with a similar set on the other side of the connection.\n+         */\n+        std::set<uint256> m_local_set;\n+\n+        /**\n+         * A reconciliation request comes from a peer with a reconciliation set size from their side,\n+         * which is supposed to help us to estimate set difference size. The value is stored here until\n+         * we respond to that request with a sketch.\n+         */\n+        uint16_t m_remote_set_size;\n+\n+        /**\n+         * The use of q coefficients is described above (see local_q comment).\n+         * The value transmitted from the peer with a reconciliation requests is stored here until\n+         * we respond to that request with a sketch.\n+         */\n+        double m_remote_q;\n+\n+        /**\n+         * When a reconciliation request is received, instead of responding to it right away,\n+         * we schedule a response for later, so that a spy can't monitor our reconciliation sets.\n+         */\n+        std::chrono::microseconds m_next_recon_respond{0};\n+\n+        /**\n+         * Used to keep track of the current reconciliation round with a peer.\n+         * Used for both inbound (responded) and outgoing (requested/initiated) reconciliations.\n+         * Currently only one sketch extension request is supported.\n+         */\n+        enum ReconPhase {\n+            NONE,\n+            INIT_REQUESTED,\n+            INIT_RESPONDED,\n+            EXT_REQUESTED,\n+            EXT_RESPONDED,\n+        };\n+        ReconPhase m_outgoing_recon{ReconPhase::NONE};\n+        ReconPhase m_incoming_recon{ReconPhase::NONE};\n+\n+        /**\n+         * Reconciliation sketches are computed over short transaction IDs.\n+         * This is a cache of these IDs enabling faster lookups of full wtxids,\n+         * useful when peer will ask for missing transactions by short IDs\n+         * at the end of a reconciliation round.\n+         */\n+        std::map<uint32_t, uint256> m_local_short_id_mapping;\n+\n+        /**\n+         * A reconciliation round may involve an extension, which is an extra exchange of messages.\n+         * Since it may happen after a delay (at least network latency), new transactions may come\n+         * during that time. To avoid mixing old and new transactions, those which are subject for\n+         * extension of a current reconciliation round are moved to a reconciliation set snapshot\n+         * after an initial (non-extended) sketch is sent.\n+         * New transactions are kept in the regular reconciliation set.\n+         */\n+        std::set<uint256> m_local_set_snapshot;\n+\n+        /**\n+         * A reconciliation round may involve an extension, in which case we should remember\n+         * a capacity of the sketch sent out initially, so that a sketch extension is of the same size.\n+         */\n+        uint16_t m_capacity_snapshot{0};\n+\n+        /**\n+         * In a reconciliation round initiated by us, if we asked for an extension, we want to store\n+         * the sketch computed/transmitted in the initial step, so that we can use it when\n+         * sketch extension arrives.\n+         */\n+        std::vector<uint8_t> m_remote_sketch_snapshot;\n+\n+        /**\n+        * Reconciliation sketches are computed over short transaction IDs.\n+        * Short IDs are salted with a link-specific constant value.\n+        */\n+        uint32_t ComputeShortID(const uint256 wtxid) const\n+        {\n+            uint64_t s = SipHashUint256(m_k0, m_k1, wtxid);\n+            uint32_t short_txid = 1 + (s & 0xFFFFFFFF);\n+            return short_txid;\n+        }\n+\n+        /**\n+         * Estimate a capacity of a sketch we will send or use locally (to find set difference)\n+         * based on the local set size.\n+         */\n+        uint16_t EstimateSketchCapacity() const\n+        {\n+            uint16_t set_size_diff = std::abs(uint16_t(m_local_set.size()) - m_remote_set_size);\n+            uint16_t min_size = std::min(uint16_t(m_local_set.size()), m_remote_set_size);\n+            uint16_t weighted_min_size = m_remote_q * min_size;\n+            uint16_t estimated_diff = 1 + weighted_min_size + set_size_diff;\n+            return minisketch_compute_capacity(RECON_FIELD_SIZE, estimated_diff, RECON_FALSE_POSITIVE_COEF);\n+        }\n+\n+        /**\n+         * Reconciliation involves computing a space-efficient representation of transaction identifiers (a sketch).\n+         * A sketch has a capacity meaning it allows reconciling at most a certain number of elements. (see BIP-330).\n+         * Considering whether we are going to send a sketch to a peer or use locally, we estimate the set difference.\n+         */\n+        Minisketch ComputeSketch(const std::set<uint256> local_set, uint16_t& capacity)\n+        {\n+            Minisketch sketch;\n+            if (local_set.size() == 0 || capacity == 0) return sketch; // Avoid serializing/sending an empty sketch.\n+\n+            std::vector<uint32_t> short_ids;\n+            for (const auto& wtxid: local_set) {\n+                uint32_t short_txid = ComputeShortID(wtxid);\n+                short_ids.push_back(short_txid);\n+                m_local_short_id_mapping.emplace(short_txid, wtxid);\n+            }\n+\n+            capacity = std::min(capacity, MAX_SKETCH_CAPACITY);\n+            sketch = Minisketch(RECON_FIELD_SIZE, 0, capacity);\n+            if (sketch) {\n+                for (const uint32_t short_id: short_ids) {\n+                    sketch.Add(short_id);\n+                }\n+            }\n+            return sketch;\n+        }\n+\n+        Minisketch ComputeExtendedSketch() {\n+            // For now, compute a sketch of twice the capacity were computed originally.\n+            // If the sketch is meant to be sent, drop the lower syndromes.\n+            // TODO: optimize by computing the extension *on top* of the existent sketch\n+            // instead of computing the lower order elements again.\n+            uint16_t extended_capacity = m_capacity_snapshot * 2;\n+            return ComputeSketch(m_local_set_snapshot, extended_capacity);\n+        }\n+\n+        /**\n+         * After a reconciliation round is over, the local q coefficient may be adjusted to enable\n+         * better accuracy of future set difference estimations.\n+         * Recompute q in case of full reconciliation success (both initially or after extension).\n+         * In case reconciliation completely failed (initial and extension), fallback to the default q,\n+         * set to cause an overestimation, but should converge to the reasonable q in the next round.\n+         * Note that accurate recompute in case of complete failure is difficult, because it requires waiting for GETDATA/INV\n+         * the peer would send to us, and find the actual difference from there (also may be inaccurate due to the latencies).\n+         */\n+        enum LocalQAction {\n+            Q_KEEP,\n+            Q_RECOMPUTE,\n+            Q_SET_DEFAULT\n+        };\n+\n+        /**\n+         * Clears the state of the peer when the reconciliation is done.\n+         * If this is a extension finalization, keep the reconciliation set to track\n+         * the transactions received from other peers during the reconciliation.\n+         * Also keep the set if this if finalizing initial incoming reconciliation, because\n+         * there was a time frame when we sent out an initial sketch until peer responded.\n+         * If we're finalizing initial outgoing reconciliation, it is safe to clear the set,\n+         * because we do not use the snapshot, but sketch the original set (which might have received\n+         * few new transactions), and finalize the reconciliation immediately.\n+         */\n+        void FinalizeReconciliation(bool clear_local_set, LocalQAction action, size_t actual_local_missing, size_t actual_remote_missing)\n+        {\n+            // According to the erlay spec, reconciliation is initiated by inbound peers.\n+            if (m_requestor) {\n+                assert(m_incoming_recon != ReconPhase::NONE);\n+                m_incoming_recon = ReconPhase::NONE;\n+            } else {\n+                // When reconciliation initialized by us is done, update local q for future reconciliations.\n+                if (action == LocalQAction::Q_RECOMPUTE) {\n+                    assert(m_outgoing_recon != ReconPhase::NONE);\n+                    uint8_t local_set_size;\n+                    if (m_outgoing_recon == ReconPhase::EXT_REQUESTED) {\n+                        local_set_size = m_local_set_snapshot.size();\n+                    } else {\n+                        local_set_size = m_local_set.size();\n+                    }\n+                    uint8_t remote_set_size = local_set_size + actual_local_missing - actual_remote_missing;\n+                    uint8_t set_size_diff = std::abs(local_set_size - remote_set_size);\n+                    uint8_t min_size = std::min(local_set_size, remote_set_size);\n+                    uint8_t actual_difference = actual_local_missing + actual_remote_missing;\n+                    if (min_size != 0) {\n+                        m_local_q = double(actual_difference - set_size_diff) / min_size;\n+                        assert(m_local_q >= 0 && m_local_q <= 2);\n+                    }\n+                } else if (action == LocalQAction::Q_SET_DEFAULT) {\n+                    m_local_q = DEFAULT_RECON_Q;\n+                }\n+                m_outgoing_recon = ReconPhase::NONE;\n+            }\n+            if (clear_local_set) m_local_set.clear();\n+\n+            m_local_short_id_mapping.clear();\n+            // This is currently belt-and-suspenders, as the code should work even without these calls.\n+            m_remote_sketch_snapshot.clear();\n+            m_local_set_snapshot.clear();\n+            m_capacity_snapshot = 0;\n+        }\n+\n+        /**\n+         * When during reconciliation we find a set difference successfully (by combining sketches),\n+         * we want to find which transactions are missing on our and on their side.\n+         * For those missing on our side, we may only find short IDs.\n+         */\n+        std::vector<uint256> GetRelevantIDsFromShortIDs(std::vector<uint64_t> diff, std::vector<uint32_t>& local_missing)\n+        {\n+            std::vector<uint256> remote_missing;\n+            for (const auto& diff_short_id: diff) {\n+                const auto local_tx = m_local_short_id_mapping.find(diff_short_id);\n+                if (local_tx != m_local_short_id_mapping.end()) {\n+                    remote_missing.push_back(local_tx->second);\n+                } else {\n+                    local_missing.push_back(diff_short_id);\n+                }\n+            }\n+            return remote_missing;\n+        }\n+\n+        /**\n+         * After a reconciliation round passed, transactions missing by our peer are known by short ID.\n+         * Look up their full wtxid locally to announce them to the peer.\n+         */\n+        std::vector<uint256> GetWTXIDsFromShortIDs(const std::vector<uint32_t>& remote_missing_short_ids)\n+        {\n+            std::vector<uint256> remote_missing;\n+            for (size_t i = 0; i < remote_missing_short_ids.size(); ++i) {\n+                auto local_tx = m_local_short_id_mapping.find(remote_missing_short_ids[i]);\n+                if (local_tx != m_local_short_id_mapping.end()) {\n+                    remote_missing.push_back(local_tx->second);\n+                }\n+            }\n+            return remote_missing;\n+        }\n+    };\n+\n+    RecursiveMutex cs_recon_state;",
      "path": "src/net_processing.h",
      "position": null,
      "original_position": 338,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "f472f3077e6860f2ec6b1ecb3d4b47fc929bccb3",
      "in_reply_to_id": 559249519,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think I can't make it non-recursive because of the call inside `GetFloodingOutboundsCount`. How would you suggest to overcome this issue?",
      "created_at": "2021-01-19T15:24:13Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r560259462",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560259462"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 410,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560311775",
      "pull_request_review_id": 571424901,
      "id": 560311775,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDMxMTc3NQ==",
      "diff_hunk": "@@ -232,6 +553,38 @@ class PeerManager final : public CValidationInterface, public NetEventsInterface\n \n     int64_t m_stale_tip_check_time; //!< Next time to check for stale tip\n \n+    /**\n+     * Return the number of outbound peers we\n+     * relay transactions to by flooding.\n+     * Used to determine whether we should flood to a new peer\n+     * which supports reconciliation, in case we haven't reached\n+     * the outbound flooding bandwidth-conserving limit.\n+     */\n+    size_t GetFloodingOutboundsCount() const;\n+\n+    /**\n+     * Transaction reconciliation should happen with peers in the same order,\n+     * because the efficiency gain is the highest when reconciliation set difference\n+     * is predictable. This queue is used to maintain the order of\n+     * peers chosen for reconciliation.\n+     */\n+    RecursiveMutex cs_recon_queue;",
      "path": "src/net_processing.h",
      "position": null,
      "original_position": 363,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "f472f3077e6860f2ec6b1ecb3d4b47fc929bccb3",
      "in_reply_to_id": 559249641,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I haven't looked into your branch in great detail, but it looks like `UpdateNextReconRequest()` is only called in one place, which already holds `m_recon_queue_mutex`. Could you make the function `EXCLUSIVE_LOCKS_REQUIRED(m_recon_queue_mutex)` and not retake the mutex inside?",
      "created_at": "2021-01-19T16:30:37Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r560311775",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560311775"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 571,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563557030",
      "pull_request_review_id": 575183702,
      "id": 563557030,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzU1NzAzMA==",
      "diff_hunk": "@@ -219,7 +232,20 @@ struct Peer {\n     /** Work queue of items requested by this peer **/\n     std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n \n-    explicit Peer(NodeId id) : m_id(id) {}\n+    /**\n+     * Salt used to compute short IDs during transaction reconciliation.\n+     * Salt is generated randomly per-connection to prevent linking of\n+     * connections belonging to the same physical node.\n+     * Also, salts should be different per-connection to prevent halting\n+     * of relay of particular transactions due to collisions in short IDs.\n+     */\n+    const uint64_t m_local_recon_salt;\n+\n+    Mutex m_recon_state_mutex;\n+    /// nullptr if we're not reconciling (neither passively nor actively) with this peer.",
      "path": "src/net_processing.cpp",
      "position": 67,
      "original_position": 59,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "c452e5dbd6808a76e1f616b1269e5394b8b86cd1",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Please use doxygen style comments.",
      "created_at": "2021-01-25T09:02:38Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r563557030",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563557030"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 246,
      "original_line": 246,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563557359",
      "pull_request_review_id": 575183702,
      "id": 563557359,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzU1NzM1OQ==",
      "diff_hunk": "@@ -7,6 +7,7 @@\n #define BITCOIN_NET_PROCESSING_H\n \n #include <net.h>\n+#include <reconciliation.h>",
      "path": "src/net_processing.h",
      "position": null,
      "original_position": 4,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "c452e5dbd6808a76e1f616b1269e5394b8b86cd1",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This isn't needed in the header.",
      "created_at": "2021-01-25T09:03:12Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r563557359",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563557359"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 10,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563558393",
      "pull_request_review_id": 575183702,
      "id": 563558393,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzU1ODM5Mw==",
      "diff_hunk": "@@ -3192,7 +3402,13 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n             // requests for it.\n             m_txrequest.ForgetTxHash(tx.GetHash());\n             m_txrequest.ForgetTxHash(tx.GetWitnessHash());\n-            RelayTransaction(tx.GetHash(), tx.GetWitnessHash(), m_connman);\n+\n+            // Flood those transactions which were received either via flooding, or inbound reconciliation,\n+            // but NOT via outbound reconciliation. Flooding then is mainly used for initial propagation\n+            // of new transactions across a network of reachable nodes quickly.\n+            LOCK(peer->m_recon_state_mutex);\n+            bool flood = !(peer->m_recon_state && peer->m_recon_state->m_responder);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 368,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "c452e5dbd6808a76e1f616b1269e5394b8b86cd1",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Use a `WITH_LOCK()` macro or code block here to avoid holding the mutex for the rest of this block.",
      "created_at": "2021-01-25T09:04:56Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r563558393",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563558393"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": 3409,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 3410,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563559617",
      "pull_request_review_id": 575183702,
      "id": 563559617,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzU1OTYxNw==",
      "diff_hunk": "@@ -3944,6 +4160,163 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         return;\n     }\n \n+    std::chrono::microseconds current_time = GetTime<std::chrono::microseconds>();",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 377,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "c452e5dbd6808a76e1f616b1269e5394b8b86cd1",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Please place this inside the `REQRECON` message handling code block (we probably want to split each message handler into its own function in the future, so we should minimize the use of code outside those code blocks).",
      "created_at": "2021-01-25T09:06:56Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r563559617",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563559617"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4163,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563560359",
      "pull_request_review_id": 575183702,
      "id": 563560359,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzU2MDM1OQ==",
      "diff_hunk": "@@ -4543,6 +4916,7 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n         // Message: inventory\n         //\n         std::vector<CInv> vInv;\n+        PeerRef peer = GetPeerRef(pto->GetId());",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 555,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "c452e5dbd6808a76e1f616b1269e5394b8b86cd1",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not required. There is already a local `peer` in this function.",
      "created_at": "2021-01-25T09:08:03Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r563560359",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563560359"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4919,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563561991",
      "pull_request_review_id": 575183702,
      "id": 563561991,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzU2MTk5MQ==",
      "diff_hunk": "@@ -688,12 +690,12 @@ class CNode\n         }\n     }\n \n-    void PushTxInventory(const uint256& hash)\n+    void PushTxInventory(const uint256& hash, const bool flood)",
      "path": "src/net.h",
      "position": null,
      "original_position": 20,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "c452e5dbd6808a76e1f616b1269e5394b8b86cd1",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No need to mark pass-by-value arguments as const.",
      "created_at": "2021-01-25T09:10:40Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r563561991",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563561991"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 693,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563563608",
      "pull_request_review_id": 575183702,
      "id": 563563608,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzU2MzYwOA==",
      "diff_hunk": "@@ -69,6 +70,6 @@ class PeerManager : public CValidationInterface, public NetEventsInterface\n };\n \n /** Relay transaction to every node */\n-void RelayTransaction(const uint256& txid, const uint256& wtxid, const CConnman& connman) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+void RelayTransaction(const uint256& txid, const uint256& wtxid, const CConnman& connman, bool flood) EXCLUSIVE_LOCKS_REQUIRED(cs_main);",
      "path": "src/net_processing.h",
      "position": 5,
      "original_position": 13,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "c452e5dbd6808a76e1f616b1269e5394b8b86cd1",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Consider making `flood=false` the default, so that call sites don't need to be updated for this change.",
      "created_at": "2021-01-25T09:13:18Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r563563608",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563563608"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 72,
      "original_line": 72,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563564589",
      "pull_request_review_id": 575183702,
      "id": 563564589,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzU2NDU4OQ==",
      "diff_hunk": "@@ -0,0 +1,335 @@\n+#include <minisketch/include/minisketch.h>",
      "path": "src/reconciliation.h",
      "position": 6,
      "original_position": 1,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "c452e5dbd6808a76e1f616b1269e5394b8b86cd1",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Add copyright boilerplate",
      "created_at": "2021-01-25T09:14:53Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r563564589",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563564589"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 6,
      "original_line": 6,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563565058",
      "pull_request_review_id": 575183702,
      "id": 563565058,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzU2NTA1OA==",
      "diff_hunk": "@@ -0,0 +1,335 @@\n+#include <minisketch/include/minisketch.h>\n+\n+/** Static component of the salt used to compute short txids for transaction reconciliation. */",
      "path": "src/reconciliation.h",
      "position": 14,
      "original_position": 3,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "c452e5dbd6808a76e1f616b1269e5394b8b86cd1",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Can you try to limit these lines to 80 or 100 chars to avoid wrapping.",
      "created_at": "2021-01-25T09:15:37Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r563565058",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563565058"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 14,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563565500",
      "pull_request_review_id": 575183702,
      "id": 563565500,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzU2NTUwMA==",
      "diff_hunk": "@@ -0,0 +1,335 @@\n+#include <minisketch/include/minisketch.h>\n+\n+/** Static component of the salt used to compute short txids for transaction reconciliation. */\n+static const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+/** Used to convert a floating point reconciliation coefficient q to an int for transmission. Specified by BIP-330. */\n+static constexpr uint16_t Q_PRECISION{(2 << 14) - 1};\n+/**\n+ * Interval between sending reconciliation request to the same peer.\n+ * This value allows to reconcile ~100 transactions (7 tx/s * 16s) during normal system operation at capacity.\n+ * More frequent reconciliations would cause significant constant bandwidth overhead due to\n+ * reconciliation metadata (sketch sizes etc.), which would nullify the efficiency.\n+ * Less frequent reconciliations would introduce high transaction relay latency.\n+ */\n+static constexpr std::chrono::microseconds RECON_REQUEST_INTERVAL{16s};\n+/**\n+ * Interval between responding to peers' reconciliation requests.\n+ * We don't respond to reconciliation requests right away because that would enable monitoring\n+ * when we receive transactions (privacy leak).\n+ */\n+static constexpr std::chrono::microseconds RECON_RESPONSE_INTERVAL{2s};\n+/** The size of the field, used to compute sketches to reconcile transactions (see BIP-330). */\n+static constexpr unsigned int RECON_FIELD_SIZE = 32;\n+/**\n+ * Allows to infer capacity of a reconciliation sketch based on it's char[] representation,\n+ * which is necessary to deserealize a received sketch.\n+ */\n+static constexpr unsigned int BYTES_PER_SKETCH_CAPACITY = RECON_FIELD_SIZE / 8;\n+/** Limit sketch capacity to avoid DoS. */\n+static constexpr uint16_t MAX_SKETCH_CAPACITY = 2 << 12;\n+/**\n+* It is possible that if sketch encodes more elements than the capacity, or\n+* if it is constructed of random bytes, sketch decoding may \"succeed\",\n+* but the result will be nonsense (false-positive decoding).\n+* Given this coef, a false positive probability will be of 1 in 2**coef.\n+*/\n+static constexpr unsigned int RECON_FALSE_POSITIVE_COEF = 16;\n+static_assert(RECON_FALSE_POSITIVE_COEF <= 256,\n+    \"Reducing reconciliation false positives beyond 1 in 2**256 is not supported\");\n+\n+/**\n+ * Used to keep track of the current reconciliation round with a peer.\n+ * Used for both inbound (responded) and outgoing (requested/initiated) reconciliations.\n+ * Currently only one sketch extension request is supported.\n+ */\n+enum ReconPhase {\n+    RECON_NONE,\n+    RECON_INIT_REQUESTED,\n+    RECON_INIT_RESPONDED,\n+    RECON_EXT_REQUESTED,\n+    RECON_EXT_RESPONDED,\n+};\n+\n+/**\n+ * After a reconciliation round is over, the local q coefficient may be adjusted to enable\n+ * better accuracy of future set difference estimations.\n+ * Recompute q in case of full reconciliation success (both initially or after extension).\n+ * In case reconciliation completely failed (initial and extension), fallback to the default q,\n+ * set to cause an overestimation, but should converge to the reasonable q in the next round.\n+ * Note that accurate recompute in case of complete failure is difficult, because it requires waiting for GETDATA/INV\n+ * the peer would send to us, and find the actual difference from there (also may be inaccurate due to the latencies).\n+ */\n+enum ReconLocalQAction {\n+    Q_KEEP,\n+    Q_RECOMPUTE,\n+    Q_SET_DEFAULT\n+};\n+\n+/**\n+ * This struct is used to keep track of the reconciliations with a given peer,\n+ * and also short transaction IDs for the next reconciliation round.\n+ * Transaction reconciliation means an efficient synchronization of the known\n+ * transactions between a pair of peers.\n+ * One reconciliation round consists of a sequence of messages. The sequence is\n+ * asymmetrical, there is always a requestor and a responder. At the end of the\n+ * sequence, nodes are supposed to exchange transactions, so that both of them\n+ * have all relevant transactions. For more protocol details, refer to BIP-0330.\n+ */\n+struct ReconState {\n+    /** Default coefficient used to estimate set difference for tx reconciliation. */\n+    static constexpr double DEFAULT_RECON_Q = 0.02;\n+\n+    ReconState(bool requestor, bool responder, bool flood_to, uint64_t k0, uint64_t k1) :\n+        m_requestor(requestor), m_responder(responder), m_flood_to(flood_to), m_k0(k0), m_k1(k1), m_local_q(DEFAULT_RECON_Q) {}\n+\n+    /// Whether this peer will send reconciliation requests.",
      "path": "src/reconciliation.h",
      "position": null,
      "original_position": 85,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "c452e5dbd6808a76e1f616b1269e5394b8b86cd1",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "doxygen",
      "created_at": "2021-01-25T09:16:16Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r563565500",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563565500"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563566154",
      "pull_request_review_id": 575183702,
      "id": 563566154,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzU2NjE1NA==",
      "diff_hunk": "@@ -0,0 +1,335 @@\n+#include <minisketch/include/minisketch.h>",
      "path": "src/reconciliation.h",
      "position": 6,
      "original_position": 1,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "c452e5dbd6808a76e1f616b1269e5394b8b86cd1",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This file should include all the standard library headers that it uses (eg chrono, set, etc)",
      "created_at": "2021-01-25T09:17:20Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r563566154",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563566154"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 6,
      "original_line": 6,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563566739",
      "pull_request_review_id": 575183702,
      "id": 563566739,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzU2NjczOQ==",
      "diff_hunk": "@@ -0,0 +1,335 @@\n+#include <minisketch/include/minisketch.h>",
      "path": "src/reconciliation.h",
      "position": 6,
      "original_position": 1,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "c452e5dbd6808a76e1f616b1269e5394b8b86cd1",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Add include guards",
      "created_at": "2021-01-25T09:18:10Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r563566739",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563566739"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 6,
      "original_line": 6,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563568993",
      "pull_request_review_id": 575183702,
      "id": 563568993,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzU2ODk5Mw==",
      "diff_hunk": "@@ -0,0 +1,335 @@\n+#include <minisketch/include/minisketch.h>\n+\n+/** Static component of the salt used to compute short txids for transaction reconciliation. */\n+static const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+/** Used to convert a floating point reconciliation coefficient q to an int for transmission. Specified by BIP-330. */\n+static constexpr uint16_t Q_PRECISION{(2 << 14) - 1};\n+/**\n+ * Interval between sending reconciliation request to the same peer.\n+ * This value allows to reconcile ~100 transactions (7 tx/s * 16s) during normal system operation at capacity.\n+ * More frequent reconciliations would cause significant constant bandwidth overhead due to\n+ * reconciliation metadata (sketch sizes etc.), which would nullify the efficiency.\n+ * Less frequent reconciliations would introduce high transaction relay latency.\n+ */\n+static constexpr std::chrono::microseconds RECON_REQUEST_INTERVAL{16s};\n+/**\n+ * Interval between responding to peers' reconciliation requests.\n+ * We don't respond to reconciliation requests right away because that would enable monitoring\n+ * when we receive transactions (privacy leak).\n+ */\n+static constexpr std::chrono::microseconds RECON_RESPONSE_INTERVAL{2s};\n+/** The size of the field, used to compute sketches to reconcile transactions (see BIP-330). */\n+static constexpr unsigned int RECON_FIELD_SIZE = 32;\n+/**\n+ * Allows to infer capacity of a reconciliation sketch based on it's char[] representation,\n+ * which is necessary to deserealize a received sketch.\n+ */\n+static constexpr unsigned int BYTES_PER_SKETCH_CAPACITY = RECON_FIELD_SIZE / 8;\n+/** Limit sketch capacity to avoid DoS. */\n+static constexpr uint16_t MAX_SKETCH_CAPACITY = 2 << 12;\n+/**\n+* It is possible that if sketch encodes more elements than the capacity, or\n+* if it is constructed of random bytes, sketch decoding may \"succeed\",\n+* but the result will be nonsense (false-positive decoding).\n+* Given this coef, a false positive probability will be of 1 in 2**coef.\n+*/\n+static constexpr unsigned int RECON_FALSE_POSITIVE_COEF = 16;\n+static_assert(RECON_FALSE_POSITIVE_COEF <= 256,\n+    \"Reducing reconciliation false positives beyond 1 in 2**256 is not supported\");\n+\n+/**\n+ * Used to keep track of the current reconciliation round with a peer.\n+ * Used for both inbound (responded) and outgoing (requested/initiated) reconciliations.\n+ * Currently only one sketch extension request is supported.\n+ */\n+enum ReconPhase {\n+    RECON_NONE,\n+    RECON_INIT_REQUESTED,\n+    RECON_INIT_RESPONDED,\n+    RECON_EXT_REQUESTED,\n+    RECON_EXT_RESPONDED,\n+};\n+\n+/**\n+ * After a reconciliation round is over, the local q coefficient may be adjusted to enable\n+ * better accuracy of future set difference estimations.\n+ * Recompute q in case of full reconciliation success (both initially or after extension).\n+ * In case reconciliation completely failed (initial and extension), fallback to the default q,\n+ * set to cause an overestimation, but should converge to the reasonable q in the next round.\n+ * Note that accurate recompute in case of complete failure is difficult, because it requires waiting for GETDATA/INV\n+ * the peer would send to us, and find the actual difference from there (also may be inaccurate due to the latencies).\n+ */\n+enum ReconLocalQAction {\n+    Q_KEEP,\n+    Q_RECOMPUTE,\n+    Q_SET_DEFAULT\n+};\n+\n+/**\n+ * This struct is used to keep track of the reconciliations with a given peer,\n+ * and also short transaction IDs for the next reconciliation round.\n+ * Transaction reconciliation means an efficient synchronization of the known\n+ * transactions between a pair of peers.\n+ * One reconciliation round consists of a sequence of messages. The sequence is\n+ * asymmetrical, there is always a requestor and a responder. At the end of the\n+ * sequence, nodes are supposed to exchange transactions, so that both of them\n+ * have all relevant transactions. For more protocol details, refer to BIP-0330.\n+ */\n+struct ReconState {",
      "path": "src/reconciliation.h",
      "position": null,
      "original_position": 78,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "c452e5dbd6808a76e1f616b1269e5394b8b86cd1",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This should really be a class since it has function members.",
      "created_at": "2021-01-25T09:21:37Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r563568993",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563568993"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571236196",
      "pull_request_review_id": 584688731,
      "id": 571236196,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTIzNjE5Ng==",
      "diff_hunk": "@@ -3358,7 +3375,13 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n             // requests for it.\n             m_txrequest.ForgetTxHash(tx.GetHash());\n             m_txrequest.ForgetTxHash(tx.GetWitnessHash());\n-            RelayTransaction(tx.GetHash(), tx.GetWitnessHash(), m_connman);\n+\n+            // Flood those transactions which were received either via flooding, or inbound reconciliation,\n+            // but NOT via outbound reconciliation. Flooding then is mainly used for initial propagation\n+            // of new transactions across a network of reachable nodes quickly.\n+            LOCK(peer->m_recon_state_mutex);\n+            bool flood = !(peer->m_recon_state && peer->m_recon_state->m_responder);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 85,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "ce83d3fbcc0f09808d15a7d2155223430fa45735",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Does this work as intended in the intermediate stage where not all of our peers support Erlay? If we are a non-reachable node that supports Erlay but has just one older pre-Erlay outbound peer - wouldn't we flood all of its transactions also to our Erlay-supporting peers because `flood == true` here? (Considering the goal that \"only well-connected publicly reachable nodes flood transactions to other publicly reachable nodes via outbound connections\").",
      "created_at": "2021-02-05T20:37:29Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r571236196",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571236196"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3383,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571238532",
      "pull_request_review_id": 584688731,
      "id": 571238532,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTIzODUzMg==",
      "diff_hunk": "@@ -267,6 +267,13 @@ extern const char* WTXIDRELAY;\n  * The salt is used to compute short txids needed for efficient reconciliation.\n  */\n extern const char *SENDRECON;\n+/**\n+ * Requests a reconciliation, and provides local reconciliation set size\n+ * and coefficient used to accurately estimate reconciliation set difference\n+ * for a peer to construct a set sketch.\n+ * Peer should respond with \"sketch\" message.\n+ */\n+extern const char *REQRECON;",
      "path": "src/protocol.h",
      "position": 17,
      "original_position": 10,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "f63ad154266307b9d1d28a8c5df7ef1eb74bd76a",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This message is called \"reqrecon**cil**\" in the BIP.",
      "created_at": "2021-02-05T20:42:04Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r571238532",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571238532"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 276,
      "original_line": 276,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/573021963",
      "pull_request_review_id": 586724683,
      "id": 573021963,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzAyMTk2Mw==",
      "diff_hunk": "@@ -551,9 +551,11 @@ class CNode\n \n         mutable RecursiveMutex cs_tx_inventory;\n         CRollingBloomFilter filterInventoryKnown GUARDED_BY(cs_tx_inventory){50000, 0.000001};\n-        // Set of transaction ids we still have to announce.\n-        // They are sorted by the mempool before relay, so the order is not important.\n-        std::set<uint256> setInventoryTxToSend;\n+        // Transaction ids we still have to announce, and whether we may flood them:\n+        // - true: flood unless peer correctly negotiated reconciliation and we didn't choose that peer for flooding.\n+        // - false: use reconciliation unless it's not supported by the peer, flood otherwise.",
      "path": "src/net.h",
      "position": 9,
      "original_position": 9,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "094c4ed8cb8558c8fdb99b26a2d41d435a4d28bc",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "094c4ed\r\n\r\nThis comment is really unclear. What about :\r\n\"Transactions ids and their associated announcement protocols :\r\n- true, use flooding\r\n- false, use reconciliation\"\r\n\r\nI think it's easier to use this map if it stays blind w.r.t to protocol negotiations and flooding-peers selection.",
      "created_at": "2021-02-09T16:12:56Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r573021963",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/573021963"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 561,
      "original_line": 561,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/573047513",
      "pull_request_review_id": 586724683,
      "id": 573047513,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzA0NzUxMw==",
      "diff_hunk": "@@ -147,6 +147,12 @@ static constexpr uint32_t MAX_GETCFILTERS_SIZE = 1000;\n static constexpr uint32_t MAX_GETCFHEADERS_SIZE = 2000;\n /** the maximum percentage of addresses from our addrman to return in response to a getaddr message. */\n static constexpr size_t MAX_PCT_ADDR_TO_SEND = 23;\n+/**\n+ * When considering whether we should flood to an outbound connection supporting reconciliation,\n+ * see how many outbound connections are already used for flooding. Flood only if the limit is not reached.",
      "path": "src/net_processing.cpp",
      "position": 45,
      "original_position": 6,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "aff98fcc1e83615b9bdff4a240898d15231d5f94",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "aff98fc\r\n\r\nMaybe precise \"Count how many outbound connections are already used for flooding, including the ones not supporting reconciliation at all\". Until I read `GetFloodingOutboundsCount` I did have a doubt on whether or not this limit was scoping outbound peers not-supporting reconciliation.",
      "created_at": "2021-02-09T16:44:17Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r573047513",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/573047513"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 160,
      "original_line": 160,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/573056635",
      "pull_request_review_id": 586724683,
      "id": 573056635,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzA1NjYzNQ==",
      "diff_hunk": "@@ -344,6 +348,15 @@ class PeerManagerImpl final : public PeerManager\n       * on extra block-relay-only peers. */\n     bool m_initial_sync_finished{false};\n \n+    /**\n+     * Transaction reconciliation should happen with peers in the same order,\n+     * because the efficiency gain is the highest when reconciliation set difference\n+     * is predictable. This queue is used to maintain the order of\n+     * peers chosen for reconciliation.\n+     */\n+    Mutex m_recon_queue_mutex;\n+    std::deque<CNode*> m_recon_queue GUARDED_BY(m_recon_queue_mutex);",
      "path": "src/net_processing.cpp",
      "position": 121,
      "original_position": 22,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "34a485e0f1c9511fbd18cc6c0d60b6ca8929ccd9",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "34a485e\r\n\r\n`m_recon_resp_queue` better ?",
      "created_at": "2021-02-09T16:55:08Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r573056635",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/573056635"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 398,
      "original_line": 398,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/573066725",
      "pull_request_review_id": 586724683,
      "id": 573066725,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzA2NjcyNQ==",
      "diff_hunk": "@@ -353,6 +353,13 @@ class PeerManagerImpl final : public PeerManager\n     /** Send a version message to a peer */\n     void PushNodeVersion(CNode& pnode, int64_t nTime);\n \n+    /**\n+     * Reconciliations are requested periodically:\n+     * every RECON_REQUEST_INTERVAL seconds we pick a peer from the queue.",
      "path": "src/net_processing.cpp",
      "position": 95,
      "original_position": 6,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "f63ad154266307b9d1d28a8c5df7ef1eb74bd76a",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "f63ad15\r\n\r\nLooking on `UpdateNextReconRequest` implementation, I think this should mention the delay is decreasing linearly with the number of reconciliation responders available. \r\n\r\nIIUC, you assume that more we have reconciliation peers, better the propagation of our local transactions set is. Thus we should space our requests to save bandwidth ? If this is correct, maybe link the section or the Erlay paper or anywhere else where it's documented?",
      "created_at": "2021-02-09T17:07:22Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r573066725",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/573066725"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 359,
      "original_line": 359,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/573094798",
      "pull_request_review_id": 586724683,
      "id": 573094798,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzA5NDc5OA==",
      "diff_hunk": "@@ -1017,7 +1024,15 @@ void PeerManagerImpl::ReattemptInitialBroadcast(CScheduler& scheduler) const\n \n         if (tx != nullptr) {\n             LOCK(cs_main);\n-            RelayTransaction(txid, tx->GetWitnessHash(), m_connman);\n+            // We re-relay these transactions via reconciliation (same as for initial broadcast),\n+            // instead of flooding, to hide the origin of transactions.\n+            // Since in Erlay transactions are flooded only inbound->outbound,\n+            // non-reachable nodes never flood transactions from other nodes (they have no inbounds).\n+            // Thus, making them flood these would tell a receiver that these indeed belong to the\n+            // flooding non-reachable nodes. Instead, we relay them via reconciliation,\n+            // in which case a receiver can't distinguish them from transactions we reconciled\n+            // with some other peer.\n+            RelayTransaction(txid, tx->GetWitnessHash(), m_connman, false);",
      "path": "src/net_processing.cpp",
      "position": 188,
      "original_position": 29,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "ce83d3fbcc0f09808d15a7d2155223430fa45735",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ce83d3fb\r\n\r\nThanks for the comment but I don't think the non-reachability is a source of leak for the present scenario. Non-reachable nodes may open connections to outbound not supporting reconciliations, thus relying on flooding for transaction announcements, at least until Erlay is well-deployed. \r\n\r\nI think the leak would be constituted by a differential tx-announcement protocol selection for re-broadcast tx rather than the usual one previously negotiated with the peer. Doesn't matter if it's flooding or reconciliation.\r\n\r\n`inbound->outbound` better to say \"flooding is initiated by inbound towards outbound peers\". Not sure that `->` to signify initiation is well-understood as a comment notation...",
      "created_at": "2021-02-09T17:44:14Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r573094798",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/573094798"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1064,
      "original_line": 1064,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/573107239",
      "pull_request_review_id": 586724683,
      "id": 573107239,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzEwNzIzOQ==",
      "diff_hunk": "@@ -1665,17 +1680,19 @@ bool static AlreadyHaveBlock(const uint256& block_hash) EXCLUSIVE_LOCKS_REQUIRED\n     return LookupBlockIndex(block_hash) != nullptr;\n }\n \n-void RelayTransaction(const uint256& txid, const uint256& wtxid, const CConnman& connman)\n+void RelayTransaction(const uint256& txid, const uint256& wtxid, const CConnman& connman, bool flood)\n {\n-    connman.ForEachNode([&txid, &wtxid](CNode* pnode) EXCLUSIVE_LOCKS_REQUIRED(::cs_main) {\n+    connman.ForEachNode([&txid, &wtxid, flood](CNode* pnode) EXCLUSIVE_LOCKS_REQUIRED(::cs_main) {\n         AssertLockHeld(::cs_main);\n \n         CNodeState* state = State(pnode->GetId());\n         if (state == nullptr) return;\n         if (state->m_wtxid_relay) {\n-            pnode->PushTxInventory(wtxid);\n+            pnode->PushTxInventory(wtxid, flood);\n         } else {\n-            pnode->PushTxInventory(txid);\n+            // Reconciliations are not supported for non-wtxid peers,\n+            // so we always use flooding.\n+            pnode->PushTxInventory(txid, true);",
      "path": "src/net_processing.cpp",
      "position": 224,
      "original_position": 53,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "ce83d3fbcc0f09808d15a7d2155223430fa45735",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ce83d3fb\r\n\r\nIs the tx-announcement protocol marker is really required `m_transactions_to_announce` given that ultimately you will check peer's `m_recon_state` and `m_flood` to fan out between `vInv`/`txs_to_reconcile` ? A non-wtxid peer should be `m_recon_state==null` anyway.\r\n\r\nI think it's better to remove this notion of announcement protocol selection attached to tx itself and instead only consider the link.",
      "created_at": "2021-02-09T17:57:41Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r573107239",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/573107239"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1724,
      "original_line": 1724,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/573184729",
      "pull_request_review_id": 586937542,
      "id": 573184729,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE4NDcyOQ==",
      "diff_hunk": "@@ -4145,6 +4160,28 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         return;\n     }\n \n+    std::chrono::microseconds current_time = GetTime<std::chrono::microseconds>();\n+\n+    // Record an (expected) reconciliation request with parameters to respond when time comes.\n+    // All initial reconciliation responses will be done at the same time to prevent tx-related privacy leaks.\n+    if (msg_type == NetMsgType::REQRECON) {\n+        LOCK(peer->m_recon_state_mutex);\n+        if (peer->m_recon_state == nullptr) return;\n+        if (!peer->m_recon_state->m_requestor) return;\n+        if (peer->m_recon_state->m_incoming_recon != RECON_NONE) return;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 41,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "7e5d826532ff541266377eb89dc62e1b5f8747cc",
      "in_reply_to_id": null,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should we disconnect the peer instead of ignoring the message? In all three cases the peer \"misbehaved\" and sent an unsolicited `REQRECON` message.",
      "created_at": "2021-02-09T19:41:35Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r573184729",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/573184729"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4171,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/573373989",
      "pull_request_review_id": 587168578,
      "id": 573373989,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzM3Mzk4OQ==",
      "diff_hunk": "@@ -551,9 +551,11 @@ class CNode\n \n         mutable RecursiveMutex cs_tx_inventory;\n         CRollingBloomFilter filterInventoryKnown GUARDED_BY(cs_tx_inventory){50000, 0.000001};\n-        // Set of transaction ids we still have to announce.\n-        // They are sorted by the mempool before relay, so the order is not important.\n-        std::set<uint256> setInventoryTxToSend;\n+        // Transaction ids we still have to announce, and whether we may flood them:\n+        // - true: flood unless peer correctly negotiated reconciliation and we didn't choose that peer for flooding.\n+        // - false: use reconciliation unless it's not supported by the peer, flood otherwise.\n+        // Transactions are sorted by the mempool before relay, so the order is not important.\n+        std::map<uint256, bool> m_transactions_to_announce;",
      "path": "src/net.h",
      "position": 11,
      "original_position": 11,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "c452e5dbd6808a76e1f616b1269e5394b8b86cd1",
      "in_reply_to_id": null,
      "user": {
        "login": "unseddd",
        "id": 64070857,
        "node_id": "MDQ6VXNlcjY0MDcwODU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/64070857?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/unseddd",
        "html_url": "https://github.com/unseddd",
        "followers_url": "https://api.github.com/users/unseddd/followers",
        "following_url": "https://api.github.com/users/unseddd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/unseddd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/unseddd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/unseddd/subscriptions",
        "organizations_url": "https://api.github.com/users/unseddd/orgs",
        "repos_url": "https://api.github.com/users/unseddd/repos",
        "events_url": "https://api.github.com/users/unseddd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/unseddd/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: since order is not important, maybe std::unordered_map for efficiency?",
      "created_at": "2021-02-10T01:23:08Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r573373989",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/573373989"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 563,
      "original_line": 563,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/573400775",
      "pull_request_review_id": 587200668,
      "id": 573400775,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzQwMDc3NQ==",
      "diff_hunk": "@@ -0,0 +1,335 @@\n+#include <minisketch/include/minisketch.h>\n+\n+/** Static component of the salt used to compute short txids for transaction reconciliation. */\n+static const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+/** Used to convert a floating point reconciliation coefficient q to an int for transmission. Specified by BIP-330. */\n+static constexpr uint16_t Q_PRECISION{(2 << 14) - 1};\n+/**\n+ * Interval between sending reconciliation request to the same peer.\n+ * This value allows to reconcile ~100 transactions (7 tx/s * 16s) during normal system operation at capacity.\n+ * More frequent reconciliations would cause significant constant bandwidth overhead due to\n+ * reconciliation metadata (sketch sizes etc.), which would nullify the efficiency.\n+ * Less frequent reconciliations would introduce high transaction relay latency.\n+ */\n+static constexpr std::chrono::microseconds RECON_REQUEST_INTERVAL{16s};",
      "path": "src/reconciliation.h",
      "position": 27,
      "original_position": 14,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "c452e5dbd6808a76e1f616b1269e5394b8b86cd1",
      "in_reply_to_id": null,
      "user": {
        "login": "unseddd",
        "id": 64070857,
        "node_id": "MDQ6VXNlcjY0MDcwODU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/64070857?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/unseddd",
        "html_url": "https://github.com/unseddd",
        "followers_url": "https://api.github.com/users/unseddd/followers",
        "following_url": "https://api.github.com/users/unseddd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/unseddd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/unseddd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/unseddd/subscriptions",
        "organizations_url": "https://api.github.com/users/unseddd/orgs",
        "repos_url": "https://api.github.com/users/unseddd/repos",
        "events_url": "https://api.github.com/users/unseddd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/unseddd/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: consider using smth like:\r\n\r\n```\r\nstatic constexpr std::chrono::microseconds RECON_REQUEST_INTERVAL{16000000};\r\n```\r\n\r\nusing the `\"\" s` operator requires a `using namespace std::chrono_literals` or similar: [https://en.cppreference.com/w/cpp/chrono/operator%22%22s](https://en.cppreference.com/w/cpp/chrono/operator%22%22s).\r\n\r\nSame for `RECON_RESPONSE_INTERVAL`.",
      "created_at": "2021-02-10T02:24:04Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r573400775",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/573400775"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 27,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/573627435",
      "pull_request_review_id": 587476349,
      "id": 573627435,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzYyNzQzNQ==",
      "diff_hunk": "@@ -0,0 +1,306 @@\n+#ifndef _MINISKETCH_H_\n+#define _MINISKETCH_H_ 1\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+#include <stdint.h>\n+#include <stdlib.h>\n+#include <unistd.h>\n+\n+/** Opaque type for decoded sketches. */\n+typedef struct minisketch minisketch;\n+\n+/** Determine whether support for elements of `bits` bits was compiled in. */\n+int minisketch_bits_supported(uint32_t bits);\n+\n+/** Determine the maximum number of implementations available.\n+ *\n+ * Multiple implementations may be available for a given element size, with\n+ * different performance characteristics on different hardware.\n+ *\n+ * Each implementation is identified by a number from 0 to the output of this\n+ * function call, inclusive. Note that not every combination of implementation\n+ * and element size may exist (see further).\n+*/\n+uint32_t minisketch_implementation_max(void);\n+\n+/** Construct a sketch for a given element size, implementation and capacity.\n+ *\n+ * If the combination of `bits` and `implementation` is unavailable, or if\n+ * `capacity` is 0, NULL is returned.\n+ * If the result is not NULL, it must be destroyed using minisketch_destroy.\n+ */\n+minisketch* minisketch_create(uint32_t bits, uint32_t implementation, size_t capacity);\n+\n+/** Get the element size of a sketch in bits. */\n+uint32_t minisketch_bits(const minisketch* sketch);\n+\n+/** Get the capacity of a sketch. */\n+size_t minisketch_capacity(const minisketch* sketch);\n+\n+/** Get the implementation of a sketch. */\n+uint32_t minisketch_implementation(const minisketch* sketch);\n+\n+/** Set the seed for randomizing algorithm choices to a fixed value.\n+ *\n+ * By default, sketches are initialized with a random seed. This is important\n+ * to avoid scenarios where an attacker could force worst-case behavior.\n+ *\n+ * This function initializes the seed to a user-provided value (any 64-bit\n+ * integer is acceptable, regardless of field size).\n+ *\n+ * When seed is -1, a fixed internal value with predictable behavior is\n+ * used. It is only intended for testing.\n+ */\n+void minisketch_set_seed(minisketch* sketch, uint64_t seed);\n+\n+/** Clone a sketch.\n+ *\n+ * The result must be destroyed using minisketch_destroy.\n+ */\n+minisketch* minisketch_clone(const minisketch* sketch);\n+\n+/** Destroy a sketch.\n+ *\n+ * The pointer that was passed in may not be used anymore afterwards.\n+ */\n+void minisketch_destroy(minisketch* sketch);\n+\n+/** Compute the size in bytes for serializing a given sketch. */\n+size_t minisketch_serialized_size(const minisketch* sketch);\n+\n+/** Serialize a sketch to bytes. */\n+void minisketch_serialize(const minisketch* sketch, unsigned char* output);\n+\n+/** Deserialize a sketch from bytes. */\n+void minisketch_deserialize(minisketch* sketch, const unsigned char* input);\n+\n+/** Add an element to a sketch.\n+ * \n+ * If the element to be added is too large for the sketch, the most significant\n+ * bits of the element are dropped. More precisely, if the element size of\n+ * `sketch` is b bits, then this function adds the unsigned integer represented\n+ * by the b least significant bits of `element` to `sketch`.\n+ * \n+ * If the element to be added is 0 (after potentially dropping the most significant\n+ * bits), then this function is a no-op. Sketches cannot contain an element with\n+ * the value 0.\n+ */\n+void minisketch_add_uint64(minisketch* sketch, uint64_t element);\n+\n+/** Merge the elements of another sketch into this sketch.\n+ *\n+ * After merging, `sketch` will contain every element that existed in one but not\n+ * both of the input sketches. It can be seen as an exclusive or operation on\n+ * the set elements.  If the capacity of `other_sketch` is lower than `sketch`'s,\n+ * merging reduces the capacity of `sketch` to that of `other_sketch`.\n+ *\n+ * This function returns the capacity of `sketch` after merging has been performed\n+ * (where this capacity is at least 1), or 0 to indicate that merging has failed because\n+ * the two input sketches differ in their element size or implementation. If 0 is\n+ * returned, `sketch` (and its capacity) have not been modified.\n+ *\n+ * It is also possible to perform this operation directly on the serializations\n+ * of two sketches with the same element size and capacity by performing a bitwise XOR\n+ * of the serializations.\n+ */\n+size_t minisketch_merge(minisketch* sketch, const minisketch* other_sketch);\n+\n+/** Decode a sketch.\n+ *\n+ * `output` is a pointer to an array of `max_element` uint64_t's, which will be\n+ * filled with the elements in this sketch.\n+ *\n+ * The return value is the number of decoded elements, or -1 if decoding failed.\n+ */\n+ssize_t minisketch_decode(const minisketch* sketch, size_t max_elements, uint64_t* output);\n+\n+/** Compute the capacity needed to achieve a certain rate of false positives.\n+ *\n+ * A sketch with capacity c and no more than c elements can always be decoded\n+ * correctly. However, if it has more than c elements, or contains just random\n+ * bytes, it is possible that it will still decode, but the result will be\n+ * nonsense. This can be counteracted by increasing the capacity slightly.\n+ *\n+ * Given a field size bits, an intended number of elements that can be decoded\n+ * max_elements, and a false positive probability of 1 in 2**fpbits, this\n+ * function computes the necessary capacity. It is only guaranteed to be\n+ * accurate up to fpbits=256.\n+ */\n+size_t minisketch_compute_capacity(uint32_t bits, size_t max_elements, uint32_t fpbits);\n+\n+/** Compute what max_elements can be decoded for a certain rate of false positives.\n+ *\n+ * This is the inverse operation of minisketch_compute_capacity. It determines,\n+ * given a field size bits, a capacity of a sketch, and an acceptable false\n+ * positive probability of 1 in 2**fpbits, what the maximum allowed\n+ * max_elements value is. If no value of max_elements would give the desired\n+ * false positive probability, 0 is returned.\n+ *\n+ * Note that this is not an exact inverse of minisketch_compute_capacity. For\n+ * example, with bits=32, fpbits=16, and max_elements=8,\n+ * minisketch_compute_capacity will return 9, as capacity 8 would only have a\n+ * false positive chance of 1 in 2^15.3. Increasing the capacity to 9 however\n+ * decreases the fp chance to 1 in 2^47.3, enough for max_elements=9 (with fp\n+ * chance of 1 in 2^18.5). Therefore, minisketch_compute_max_elements with\n+ * capacity=9 will return 9.\n+ */\n+size_t minisketch_compute_max_elements(uint32_t bits, size_t capacity, uint32_t fpbits);\n+\n+#ifdef __cplusplus\n+}\n+\n+#if __cplusplus >= 201103L\n+#include <memory>\n+#include <vector>\n+#if __cplusplus >= 201703L\n+#include <optional>\n+#endif // __cplusplus >= 201703L\n+#include <cassert>\n+\n+/** Simple RAII C++11 wrapper around the minisketch API. */\n+class Minisketch\n+{\n+    struct Deleter\n+    {\n+        void operator()(minisketch* ptr) const\n+        {\n+            minisketch_destroy(ptr);\n+        }\n+    };\n+\n+    std::unique_ptr<minisketch, Deleter> m_minisketch;\n+\n+public:\n+    /** See minisketch_bits_supported(). */\n+    static bool BitsSupported(uint32_t bits) noexcept { return minisketch_bits_supported(bits); }\n+\n+    /** See minisketch_implementation_max(). */\n+    static uint32_t MaxImplementation() noexcept { return minisketch_implementation_max(); }\n+\n+    /** See minisketch_compute_capacity(). */\n+    static size_t ComputeCapacity(uint32_t bits, size_t max_elements, uint32_t fpbits) noexcept { return minisketch_compute_capacity(bits, max_elements, fpbits); }\n+\n+    /** See minisketch_compute_max_elements(). */\n+    static size_t ComputeMaxElements(uint32_t bits, size_t capacity, uint32_t fpbits) noexcept { return minisketch_compute_max_elements(bits, capacity, fpbits); }\n+\n+    /** Construct a clone of the specified sketch. */\n+    Minisketch(const Minisketch& sketch) noexcept\n+    {\n+        m_minisketch = std::unique_ptr<minisketch, Deleter>(minisketch_clone(sketch.m_minisketch.get()));\n+    }\n+\n+    /** Make this Minisketch a clone of the specified one. */\n+    Minisketch& operator=(const Minisketch& sketch) noexcept\n+    {\n+        m_minisketch = std::unique_ptr<minisketch, Deleter>(minisketch_clone(sketch.m_minisketch.get()));\n+        return *this;\n+    }\n+\n+    explicit operator bool() const noexcept { return bool{m_minisketch}; }\n+\n+    Minisketch() noexcept = default;\n+    Minisketch(Minisketch&&) noexcept = default;\n+    Minisketch& operator=(Minisketch&&) noexcept = default;\n+\n+    /** Construct a Minisketch object with the specified parameters. */\n+    Minisketch(uint32_t bits, uint32_t implementation, size_t capacity) noexcept\n+    {\n+        m_minisketch = std::unique_ptr<minisketch, Deleter>(minisketch_create(bits, implementation, capacity));\n+    }\n+\n+    /** Create a Minisketch object sufficiently large for the specified number of elements at given fpbits. */\n+    static Minisketch CreateFP(uint32_t bits, uint32_t implementation, size_t max_elements, uint32_t fpbits) noexcept\n+    {\n+        return Minisketch(bits, implementation, ComputeCapacity(bits, max_elements, fpbits));\n+    }\n+\n+    /** See minisketch_get_bits(). */\n+    uint32_t GetBits() const noexcept { return minisketch_bits(m_minisketch.get()); }\n+\n+    /** See minisketch_get_capacity(). */\n+    size_t GetCapacity() const noexcept { return minisketch_capacity(m_minisketch.get()); }\n+\n+    /** See minisketch_get_implementation(). */\n+    uint32_t GetImplementation() const noexcept { return minisketch_implementation(m_minisketch.get()); }\n+\n+    /** See minisketch_set_seed(). */\n+    Minisketch& SetSeed(uint64_t seed) noexcept\n+    {\n+        minisketch_set_seed(m_minisketch.get(), seed);\n+        return *this;\n+    }\n+\n+    /** See miniksetch_add_element(). */\n+    Minisketch& Add(uint64_t element) noexcept\n+    {\n+        minisketch_add_uint64(m_minisketch.get(), element);\n+        return *this;\n+    }\n+\n+    /** See minisketch_merge(). */\n+    Minisketch& Merge(const Minisketch& sketch) noexcept\n+    {\n+        minisketch_merge(m_minisketch.get(), sketch.m_minisketch.get());\n+        return *this;\n+    }\n+\n+    /** Decode this sketch into the result vector, which must have a size equal to the maximum allowed elements. */\n+    bool Decode(std::vector<uint64_t>& result) const noexcept\n+    {\n+        ssize_t ret = minisketch_decode(m_minisketch.get(), result.size(), result.data());\n+        if (ret == -1) return false;\n+        result.resize(ret);\n+        return true;\n+    }\n+\n+    /** See minisketch_serialized_size(). */\n+    size_t GetSerializedSize() const noexcept { return minisketch_serialized_size(m_minisketch.get()); }\n+\n+    /** Serialize the sketch as a byte vector. */\n+    std::vector<unsigned char> Serialize() const noexcept\n+    {\n+        std::vector<unsigned char> result(GetSerializedSize());\n+        minisketch_serialize(m_minisketch.get(), result.data());\n+        return result;\n+    }\n+\n+    /** Deserialize into this sketch from an object containing its bytes (which has data() and size() members). */\n+    template<typename T>\n+    Minisketch& Deserialize(\n+        const T& obj,\n+        typename std::enable_if<\n+            std::is_convertible<typename std::remove_pointer<decltype(obj.data())>::type (*)[], const unsigned char (*)[]>::value &&\n+            std::is_convertible<decltype(obj.size()), std::size_t>::value,\n+            std::nullptr_t\n+        >::type = nullptr) noexcept\n+    {\n+        assert(GetSerializedSize() == obj.size());\n+        minisketch_deserialize(m_minisketch.get(), obj.data());\n+        return *this;\n+    }\n+\n+#if __cplusplus >= 201703L\n+    /** C++17 only: decode with a specified number of max elements into an optional vector. */\n+    std::optional<std::vector<uint64_t>> Decode(size_t max_elements) const noexcept\n+    {\n+        std::vector<uint64_t> result(max_elements);\n+        ssize_t ret = minisketch_decode(m_minisketch.get(), max_elements, result.data());\n+        if (ret == -1) return {};\n+        result.resize(ret);\n+        return std::move(result);",
      "path": "src/minisketch/include/minisketch.h",
      "position": 306,
      "original_position": 293,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "c452e5dbd6808a76e1f616b1269e5394b8b86cd1",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "with gcc 10.2.1\r\n```\r\nIn file included from ./reconciliation.h:1,\r\n                 from ./net_processing.h:10,\r\n                 from rpc/net.cpp:13:\r\n./minisketch/include/minisketch.h: In member function ‘std::optional<std::vector<long unsigned int> > Minisketch::Decode(size_t) const’:\r\n./minisketch/include/minisketch.h:293:25: warning: redundant move in return statement [-Wredundant-move]\r\n  293 |         return std::move(result);\r\n      |                ~~~~~~~~~^~~~~~~~\r\n./minisketch/include/minisketch.h:293:25: note: remove ‘std::move’ call\r\n```\r\n",
      "created_at": "2021-02-10T10:49:02Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r573627435",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/573627435"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 306,
      "original_line": 306,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/573646650",
      "pull_request_review_id": 587500539,
      "id": 573646650,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzY0NjY1MA==",
      "diff_hunk": "@@ -3358,7 +3375,13 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n             // requests for it.\n             m_txrequest.ForgetTxHash(tx.GetHash());\n             m_txrequest.ForgetTxHash(tx.GetWitnessHash());\n-            RelayTransaction(tx.GetHash(), tx.GetWitnessHash(), m_connman);\n+\n+            // Flood those transactions which were received either via flooding, or inbound reconciliation,\n+            // but NOT via outbound reconciliation. Flooding then is mainly used for initial propagation\n+            // of new transactions across a network of reachable nodes quickly.\n+            LOCK(peer->m_recon_state_mutex);\n+            bool flood = !(peer->m_recon_state && peer->m_recon_state->m_responder);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 85,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "ce83d3fbcc0f09808d15a7d2155223430fa45735",
      "in_reply_to_id": 571236196,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "\"only well-connected publicly reachable nodes flood transactions to other publicly reachable nodes via outbound connections\" only is an end-goal when most of the network implement Erlay.\r\n\r\nIn the meanwhile, I think this behavior is better because it's most intuitive: for legacy peers, we support legacy behavior (flood).\r\nTechnically, changing this condition wouldn't break stuff, but I think it's just less intuitive.\r\n\r\nI probably should expand the comment to address this misunderstanding though.",
      "created_at": "2021-02-10T11:18:51Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r573646650",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/573646650"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3383,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/573655499",
      "pull_request_review_id": 587512207,
      "id": 573655499,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzY1NTQ5OQ==",
      "diff_hunk": "@@ -551,9 +551,11 @@ class CNode\n \n         mutable RecursiveMutex cs_tx_inventory;\n         CRollingBloomFilter filterInventoryKnown GUARDED_BY(cs_tx_inventory){50000, 0.000001};\n-        // Set of transaction ids we still have to announce.\n-        // They are sorted by the mempool before relay, so the order is not important.\n-        std::set<uint256> setInventoryTxToSend;\n+        // Transaction ids we still have to announce, and whether we may flood them:\n+        // - true: flood unless peer correctly negotiated reconciliation and we didn't choose that peer for flooding.\n+        // - false: use reconciliation unless it's not supported by the peer, flood otherwise.",
      "path": "src/net.h",
      "position": 9,
      "original_position": 9,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "094c4ed8cb8558c8fdb99b26a2d41d435a4d28bc",
      "in_reply_to_id": 573021963,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "How to reflect that if it's \"false, use reconciliation\", it still can be flooded, in case if reconciliation is not supported for a given peer?\r\n",
      "created_at": "2021-02-10T11:33:09Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r573655499",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/573655499"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 561,
      "original_line": 561,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/573668001",
      "pull_request_review_id": 587528209,
      "id": 573668001,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzY2ODAwMQ==",
      "diff_hunk": "@@ -4559,22 +4933,23 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n \n             if (pto->m_tx_relay != nullptr) {\n                 LOCK(pto->m_tx_relay->cs_tx_inventory);\n+                LOCK(peer->m_recon_state_mutex);",
      "path": "src/net_processing.cpp",
      "position": 551,
      "original_position": 563,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "c452e5dbd6808a76e1f616b1269e5394b8b86cd1",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "After building with both gcc 10.2.1 and clang 9, functional tests are failing with `AssertionError: Unexpected stderr Assertion failed: detected inconsistent lock order for 'peer->m_recon_state_mutex' in net_processing.cpp:4936 (in thread 'msghand')`",
      "created_at": "2021-02-10T11:54:37Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r573668001",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/573668001"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4943,
      "original_line": 4943,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/573739993",
      "pull_request_review_id": 587617960,
      "id": 573739993,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzczOTk5Mw==",
      "diff_hunk": "@@ -551,9 +551,11 @@ class CNode\n \n         mutable RecursiveMutex cs_tx_inventory;\n         CRollingBloomFilter filterInventoryKnown GUARDED_BY(cs_tx_inventory){50000, 0.000001};\n-        // Set of transaction ids we still have to announce.\n-        // They are sorted by the mempool before relay, so the order is not important.\n-        std::set<uint256> setInventoryTxToSend;\n+        // Transaction ids we still have to announce, and whether we may flood them:\n+        // - true: flood unless peer correctly negotiated reconciliation and we didn't choose that peer for flooding.\n+        // - false: use reconciliation unless it's not supported by the peer, flood otherwise.",
      "path": "src/net.h",
      "position": 9,
      "original_position": 9,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "094c4ed8cb8558c8fdb99b26a2d41d435a4d28bc",
      "in_reply_to_id": 573021963,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "See this [comment](https://github.com/bitcoin/bitcoin/pull/18261#discussion_r573107239) which I believe is superseding this discussion. ",
      "created_at": "2021-02-10T13:49:19Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r573739993",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/573739993"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 561,
      "original_line": 561,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/573743726",
      "pull_request_review_id": 587627896,
      "id": 573743726,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Mzc0MzcyNg==",
      "diff_hunk": "@@ -2795,6 +2808,61 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         return;\n     }\n \n+    // Received from an inbound peer planning to reconcile transactions with us, or\n+    // from an outgoing peer demonstrating readiness to do reconciliations.\n+    // If received from outgoing, adds the peer to the reconciliation queue.\n+    // Feature negotiation of tx reconciliation should happen between VERSION and\n+    // VERACK, to avoid relay problems from switching after a connection is up.\n+    if (msg_type == NetMsgType::SENDRECON) {\n+        if (!pfrom.m_tx_relay) return;\n+        LOCK(peer->m_recon_state_mutex);\n+        if (peer->m_recon_state != nullptr) return; // Do not support reconciliation salt/version updates.",
      "path": "src/net_processing.cpp",
      "position": 303,
      "original_position": 39,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "34a485e0f1c9511fbd18cc6c0d60b6ca8929ccd9",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "34a485e\r\n\r\nThis checks sounds to assume we may have in the future a new reconciliation protocol for which we would reuse `ReconState` but with a earlier signaling mechanism. Given `SENDRECON` is versioned, I would expect a version-bump to introduce this hypothetical reconciliation protocol instead of new message already spawning `ReconState` allocation.\r\n\r\nThus I think this check can be removed.",
      "created_at": "2021-02-10T13:54:30Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r573743726",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/573743726"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2944,
      "original_line": 2944,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/573794642",
      "pull_request_review_id": 587627896,
      "id": 573794642,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Mzc5NDY0Mg==",
      "diff_hunk": "@@ -2795,6 +2808,61 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         return;\n     }\n \n+    // Received from an inbound peer planning to reconcile transactions with us, or\n+    // from an outgoing peer demonstrating readiness to do reconciliations.\n+    // If received from outgoing, adds the peer to the reconciliation queue.\n+    // Feature negotiation of tx reconciliation should happen between VERSION and\n+    // VERACK, to avoid relay problems from switching after a connection is up.\n+    if (msg_type == NetMsgType::SENDRECON) {\n+        if (!pfrom.m_tx_relay) return;\n+        LOCK(peer->m_recon_state_mutex);\n+        if (peer->m_recon_state != nullptr) return; // Do not support reconciliation salt/version updates.\n+        LOCK(cs_main);\n+        if (!State(pfrom.GetId())->m_wtxid_relay) return; // SENDRECON is allowed only after WTXIDRELAY.\n+\n+        bool recon_requestor, recon_responder;\n+        uint64_t remote_salt;\n+        uint32_t recon_version;\n+        vRecv >> recon_requestor >> recon_responder >> recon_version >> remote_salt;\n+        if (recon_version != 1) return;\n+\n+        // Do not flood through inbound connections which support reconciliation to save bandwidth.\n+        bool flood_to = false;\n+        if (pfrom.IsInboundConn()) {\n+            // We currently don't support reconciliations with inbound peers which\n+            // don't want to be reconciliation senders (request our sketches),\n+            // or want to be reconciliation responders (send us their sketches).\n+            // Just ignore SENDRECON and use normal flooding for transaction relay with them.\n+            if (!recon_requestor) return;\n+            if (recon_responder) return;\n+        } else {\n+            // We currently don't support reconciliations with outbound peers which\n+            // don't want to be reconciliation responders (send us their sketches),\n+            // or want to be reconciliation senders (request our sketches).\n+            // Just ignore SENDRECON and use normal flooding for transaction relay with them.\n+            if (recon_requestor) return;\n+            if (!recon_responder) return;\n+            // TODO: Flood only through a limited number of outbound connections.\n+            flood_to = true;\n+        }\n+\n+        uint64_t local_salt = peer->m_local_recon_salt;\n+        uint64_t salt1 = local_salt, salt2 = remote_salt;\n+        if (salt1 > salt2) std::swap(salt1, salt2);\n+        static const auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\n+        uint256 full_salt = (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();\n+\n+        peer->m_recon_state = MakeUnique<ReconState>(recon_requestor, recon_responder, flood_to, full_salt.GetUint64(0), full_salt.GetUint64(1));\n+\n+        // Reconcile with all outbound peers supporting reconciliation (even if we flood to them),\n+        // to not miss transactions they have for us but won't flood.",
      "path": "src/net_processing.cpp",
      "position": 346,
      "original_position": 78,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "34a485e0f1c9511fbd18cc6c0d60b6ca8929ccd9",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "34a485e\r\n\r\nI don't find the section in the paper where you're detailing the purpose of reconciliation as a redundant tx-announcement for strategic peers ? Given `RECON_REQUEST_INTERVAL` is superior to `INVENTORY_BROADCAST_INTERVAL`, I guess the motivation isn't about improving latency of transactions discovered during floods round towards strategic peers. ",
      "created_at": "2021-02-10T14:56:49Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r573794642",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/573794642"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2987,
      "original_line": 2987,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/573824646",
      "pull_request_review_id": 587627896,
      "id": 573824646,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzgyNDY0Ng==",
      "diff_hunk": "@@ -3358,7 +3375,13 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n             // requests for it.\n             m_txrequest.ForgetTxHash(tx.GetHash());\n             m_txrequest.ForgetTxHash(tx.GetWitnessHash());\n-            RelayTransaction(tx.GetHash(), tx.GetWitnessHash(), m_connman);\n+\n+            // Flood those transactions which were received either via flooding, or inbound reconciliation,\n+            // but NOT via outbound reconciliation. Flooding then is mainly used for initial propagation\n+            // of new transactions across a network of reachable nodes quickly.",
      "path": "src/net_processing.cpp",
      "position": 374,
      "original_position": 83,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "ce83d3fbcc0f09808d15a7d2155223430fa45735",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ce83d3fb\r\n\r\nIIUC, this comment correctly, you mean that a transaction discovered through an accepted-reconciliation will be marked for reconciliation for its future announcements, no matter the peer type (strategic outbound/non-strategic outbound/inbound).\r\n\r\nI don't get the rational of such approach, propagation of such transactions could be accelerated if we were flooding them for our outbound peers.\r\n\r\nAlso you may consider \"inbound reconciliation\" -> \"initiated reconciliation\", \"outbound reconciliation\" -> \"accepted reconciliation\". Even if reconciliation roles are decided in function of our peer selection, they should be clearly dissociated as orthogonal.",
      "created_at": "2021-02-10T15:27:26Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r573824646",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/573824646"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3423,
      "original_line": 3423,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/573861905",
      "pull_request_review_id": 587627896,
      "id": 573861905,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Mzg2MTkwNQ==",
      "diff_hunk": "@@ -4851,6 +4885,28 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                             pto->m_tx_relay->filterInventoryKnown.insert(txid);\n                         }\n                     }\n+\n+                    // Populating local reconciliation set.\n+                    if (peer->m_recon_state && txs_to_reconcile.size() != 0) {\n+                        assert(peer->m_recon_state->m_requestor || peer->m_recon_state->m_responder);\n+                        int64_t recon_set_overflow = peer->m_recon_state->m_local_set.size() + txs_to_reconcile.size() - MAX_PEER_TX_ANNOUNCEMENTS;\n+                        if (recon_set_overflow > 0) {\n+                            LogPrint(BCLog::NET, \"Reconciliation set for the peer=%d is at capacity, not adding new transactions. \\n\", pto->GetId());\n+                            // Since we reconcile frequently, it either means:\n+                            // (1) a peer for some reason does not request reconciliations from us for a long while, or\n+                            // (2) really a lot of valid fee-paying transactions were dumped on us at once.\n+                            // We don't care about a laggy peer (1) because we probably can't help them even if we flood transactions.\n+                            // However, exploiting (2) should not prevent us from relaying certain transactions.\n+                            // Since computing a sketch over too many elements is too expensive, we will just flood some transactions here.",
      "path": "src/net_processing.cpp",
      "position": 650,
      "original_position": 163,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "ce83d3fbcc0f09808d15a7d2155223430fa45735",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ce83d3fb\r\n\r\nI think we should have this discussion about just throwing away transactions under some `SKETCH_MAX_SIZE`. Sort them by feerate, keep the ones above the mark, discard the others.\r\n\r\nWe're already doing the same assumptions if a a transaction is under mempool min fee, we won't relay it further. That can be the same with reconciliation, we don't allocate sketch resources for low-fee transactions. \r\n\r\nThat said, I feel it should be part of a wider conversation about how we price better network resources while still flowing through the network what is \"near confirmation\".",
      "created_at": "2021-02-10T16:10:25Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r573861905",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/573861905"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5090,
      "original_line": 5090,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/574391119",
      "pull_request_review_id": 588414762,
      "id": 574391119,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NDM5MTExOQ==",
      "diff_hunk": "@@ -0,0 +1,335 @@\n+#include <minisketch/include/minisketch.h>\n+\n+/** Static component of the salt used to compute short txids for transaction reconciliation. */",
      "path": "src/reconciliation.h",
      "position": 14,
      "original_position": 3,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "c452e5dbd6808a76e1f616b1269e5394b8b86cd1",
      "in_reply_to_id": 563565058,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This particular line is less than 100 chars, so I assume you referred to the other ones which are longer than 100. I see a couple, gonna limit them.",
      "created_at": "2021-02-11T10:27:56Z",
      "updated_at": "2021-02-13T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r574391119",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/574391119"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 14,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/575758305",
      "pull_request_review_id": 590017307,
      "id": 575758305,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTc1ODMwNQ==",
      "diff_hunk": "@@ -2546,6 +2555,22 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n \n         if (greatest_common_version >= WTXID_RELAY_VERSION) {\n             m_connman.PushMessage(&pfrom, msg_maker.Make(NetMsgType::WTXIDRELAY));\n+\n+            // Reconciliation is supported only when wtxid relay is supported for only\n+            // those connections which (at least might) support transaction relay.\n+            if (pfrom.IsFullOutboundConn() || pfrom.IsInboundConn() || pfrom.IsManualConn()) {",
      "path": "src/net_processing.cpp",
      "position": 275,
      "original_position": 25,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "01bf7ee3d263be099ba53fb9f6635a9775e45d88",
      "in_reply_to_id": null,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "can you extract this into its own `CNode` function with a name that captures the intent & a case statement for all the connection types? you can see `ExpectServicesFromConn` as an example. ",
      "created_at": "2021-02-14T05:53:27Z",
      "updated_at": "2021-02-14T06:43:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r575758305",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/575758305"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2688,
      "original_line": 2561,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/575761033",
      "pull_request_review_id": 590017307,
      "id": 575761033,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTc2MTAzMw==",
      "diff_hunk": "@@ -2806,6 +2820,61 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         return;\n     }\n \n+    // Received from an inbound peer planning to reconcile transactions with us, or\n+    // from an outgoing peer demonstrating readiness to do reconciliations.\n+    // If received from outgoing, adds the peer to the reconciliation queue.\n+    // Feature negotiation of tx reconciliation should happen between VERSION and\n+    // VERACK, to avoid relay problems from switching after a connection is up.\n+    if (msg_type == NetMsgType::SENDRECON) {\n+        if (!pfrom.m_tx_relay) return;\n+        LOCK(peer->m_recon_state_mutex);\n+        if (peer->m_recon_state != nullptr) return; // Do not support reconciliation salt/version updates.\n+        LOCK(cs_main);\n+        if (!State(pfrom.GetId())->m_wtxid_relay) return; // SENDRECON is allowed only after WTXIDRELAY.\n+\n+        bool recon_requestor, recon_responder;\n+        uint64_t remote_salt;\n+        uint32_t recon_version;\n+        vRecv >> recon_requestor >> recon_responder >> recon_version >> remote_salt;\n+        if (recon_version != 1) return;\n+\n+        // Do not flood through inbound connections which support reconciliation to save bandwidth.\n+        bool flood_to = false;\n+        if (pfrom.IsInboundConn()) {\n+            // We currently don't support reconciliations with inbound peers which\n+            // don't want to be reconciliation senders (request our sketches),\n+            // or want to be reconciliation responders (send us their sketches).\n+            // Just ignore SENDRECON and use normal flooding for transaction relay with them.\n+            if (!recon_requestor) return;\n+            if (recon_responder) return;\n+        } else {\n+            // We currently don't support reconciliations with outbound peers which\n+            // don't want to be reconciliation responders (send us their sketches),\n+            // or want to be reconciliation senders (request our sketches).\n+            // Just ignore SENDRECON and use normal flooding for transaction relay with them.\n+            if (recon_requestor) return;\n+            if (!recon_responder) return;\n+            // TODO: Flood only through a limited number of outbound connections.\n+            flood_to = true;\n+        }\n+\n+        uint64_t local_salt = peer->m_local_recon_salt;",
      "path": "src/net_processing.cpp",
      "position": 337,
      "original_position": 77,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "fb0d2575bfb577e6c66ca90a32344f6f74ff640a",
      "in_reply_to_id": null,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "this salt calculation (and probably also the flood_to logic) seems like an example of code that can be extracted into the reconciliation module rather than added to `ProcessMessage`.\r\n\r\nit would make sense to me for the flow to be something like: \r\n- `ProcessMessage` does internal state checks (`m_tx_relay` exists, wtxid is enabled)\r\n- extract the message from `vRecv`\r\n- pass it along into the module to handle \r\n- module returns saying \"no-op\" or \"here is a ReconState object\" \r\n- if it exists, `ProcessMessage` stores the object on the peer\r\n\r\nI suspect we could go even further, but this would be a start. Ideally the module would abstract this nuanced erlay specific logic away from net processing, even if its per-peer. The txrequest module is a good example for this, eg. `PeerInfo` struct and how its applied within the module to make choices, and the decisions are surfaced to `net_processing`. ",
      "created_at": "2021-02-14T06:26:25Z",
      "updated_at": "2021-02-14T06:43:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r575761033",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/575761033"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2978,
      "original_line": 2861,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/575761493",
      "pull_request_review_id": 590017307,
      "id": 575761493,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTc2MTQ5Mw==",
      "diff_hunk": "@@ -914,6 +929,28 @@ void PeerManagerImpl::PushNodeVersion(CNode& pnode, int64_t nTime)\n     }\n }\n \n+size_t PeerManagerImpl::GetFloodingOutboundsCount(const CNode& skip_node) const\n+{\n+    size_t result = 0;\n+    m_connman.ForEachNode([this, &result, &skip_node](const CNode* pnode) {\n+        if (!pnode->m_tx_relay) return;\n+        if (pnode->GetId() == skip_node.GetId()) return;\n+        if (!pnode->IsFullOutboundConn() && !pnode->IsManualConn()) return;",
      "path": "src/net_processing.cpp",
      "position": 136,
      "original_position": 39,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "86ee3c6235842efb23dd52ef59d3efbf491be6b2",
      "in_reply_to_id": null,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I find (!A && !B) to be very confusing. Again, would be good to extract into its own function with switch statement. ",
      "created_at": "2021-02-14T06:31:09Z",
      "updated_at": "2021-02-14T06:43:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r575761493",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/575761493"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 962,
      "original_line": 938,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/575762526",
      "pull_request_review_id": 590017307,
      "id": 575762526,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTc2MjUyNg==",
      "diff_hunk": "@@ -914,6 +929,28 @@ void PeerManagerImpl::PushNodeVersion(CNode& pnode, int64_t nTime)\n     }\n }\n \n+size_t PeerManagerImpl::GetFloodingOutboundsCount(const CNode& skip_node) const",
      "path": "src/net_processing.cpp",
      "position": 130,
      "original_position": 33,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "86ee3c6235842efb23dd52ef59d3efbf491be6b2",
      "in_reply_to_id": null,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "instead of recalculating whenever we get a `SENDRECON` message, could this logic be significantly simplified by just storing a count that gets updated when nodes do something to change their state? the characteristics being checked are all established early in the connection (connection type, m_tx_relay struct, flood_to being set) \r\n\r\nI think this should remove the need for the \"skip node\" logic in this function, but if not, the node being processed can be checked and then subtract one if needed. ",
      "created_at": "2021-02-14T06:42:59Z",
      "updated_at": "2021-02-14T06:43:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r575762526",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/575762526"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 956,
      "original_line": 932,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/575781038",
      "pull_request_review_id": 590029949,
      "id": 575781038,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTc4MTAzOA==",
      "diff_hunk": "@@ -2806,6 +2820,61 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         return;\n     }\n \n+    // Received from an inbound peer planning to reconcile transactions with us, or\n+    // from an outgoing peer demonstrating readiness to do reconciliations.\n+    // If received from outgoing, adds the peer to the reconciliation queue.\n+    // Feature negotiation of tx reconciliation should happen between VERSION and\n+    // VERACK, to avoid relay problems from switching after a connection is up.\n+    if (msg_type == NetMsgType::SENDRECON) {\n+        if (!pfrom.m_tx_relay) return;\n+        LOCK(peer->m_recon_state_mutex);\n+        if (peer->m_recon_state != nullptr) return; // Do not support reconciliation salt/version updates.\n+        LOCK(cs_main);\n+        if (!State(pfrom.GetId())->m_wtxid_relay) return; // SENDRECON is allowed only after WTXIDRELAY.\n+\n+        bool recon_requestor, recon_responder;\n+        uint64_t remote_salt;\n+        uint32_t recon_version;\n+        vRecv >> recon_requestor >> recon_responder >> recon_version >> remote_salt;\n+        if (recon_version != 1) return;\n+\n+        // Do not flood through inbound connections which support reconciliation to save bandwidth.\n+        bool flood_to = false;\n+        if (pfrom.IsInboundConn()) {\n+            // We currently don't support reconciliations with inbound peers which\n+            // don't want to be reconciliation senders (request our sketches),\n+            // or want to be reconciliation responders (send us their sketches).\n+            // Just ignore SENDRECON and use normal flooding for transaction relay with them.\n+            if (!recon_requestor) return;\n+            if (recon_responder) return;\n+        } else {\n+            // We currently don't support reconciliations with outbound peers which\n+            // don't want to be reconciliation responders (send us their sketches),\n+            // or want to be reconciliation senders (request our sketches).\n+            // Just ignore SENDRECON and use normal flooding for transaction relay with them.\n+            if (recon_requestor) return;\n+            if (!recon_responder) return;\n+            // TODO: Flood only through a limited number of outbound connections.\n+            flood_to = true;\n+        }\n+\n+        uint64_t local_salt = peer->m_local_recon_salt;",
      "path": "src/net_processing.cpp",
      "position": 337,
      "original_position": 77,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "fb0d2575bfb577e6c66ca90a32344f6f74ff640a",
      "in_reply_to_id": 575761033,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, I'm planning to do something similar in the next couple days. That's why I marked the PR draft for now :)\r\n\r\nThank you for the design suggestion!",
      "created_at": "2021-02-14T09:33:33Z",
      "updated_at": "2021-02-14T09:33:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r575781038",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/575781038"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2978,
      "original_line": 2861,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/580595369",
      "pull_request_review_id": 595788347,
      "id": 580595369,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDU5NTM2OQ==",
      "diff_hunk": "@@ -3358,7 +3375,13 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n             // requests for it.\n             m_txrequest.ForgetTxHash(tx.GetHash());\n             m_txrequest.ForgetTxHash(tx.GetWitnessHash());\n-            RelayTransaction(tx.GetHash(), tx.GetWitnessHash(), m_connman);\n+\n+            // Flood those transactions which were received either via flooding, or inbound reconciliation,\n+            // but NOT via outbound reconciliation. Flooding then is mainly used for initial propagation\n+            // of new transactions across a network of reachable nodes quickly.\n+            LOCK(peer->m_recon_state_mutex);\n+            bool flood = !(peer->m_recon_state && peer->m_recon_state->m_responder);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 85,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "ce83d3fbcc0f09808d15a7d2155223430fa45735",
      "in_reply_to_id": 571236196,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "But the legacy behavior also affects Erlay peers (because if a non-reachable node received transactions from legacy  peers, it would act as if it was a reachable hub and forward them via flooding to other outbound peers, including Erlay ones).\r\n\r\nApart from this specific spot that could easily be adjusted if needed, I think that when there are two relay mechanisms with different time scales existing in parallel, this could lead to some non-intuitive consequences - such as legacy relay being dominant and cannibalizing Erlay relay way into the regime when the majority of nodes already support Erlay.\r\n \r\nWould it maybe be worth doing a mixed-network simulation run and measuring the respective contributions at different ratios of Erlay to legacy nodes, if this is possible within the existing simulation framework?",
      "created_at": "2021-02-22T21:14:25Z",
      "updated_at": "2021-02-22T21:14:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r580595369",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/580595369"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3383,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/592830262",
      "pull_request_review_id": 610360092,
      "id": 592830262,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MjgzMDI2Mg==",
      "diff_hunk": "@@ -2781,6 +2933,65 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         return;\n     }\n \n+    // Received from an inbound peer planning to reconcile transactions with us, or\n+    // from an outgoing peer demonstrating readiness to do reconciliations.\n+    // If received from outgoing, adds the peer to the reconciliation queue.\n+    // Feature negotiation of tx reconciliation should happen between VERSION and\n+    // VERACK, to avoid relay problems from switching after a connection is up.\n+    if (msg_type == NetMsgType::SENDRECON) {\n+        if (!pfrom.m_tx_relay) return;\n+        LOCK(peer->m_recon_state_mutex);\n+        if (peer->m_recon_state != nullptr) return; // Do not support reconciliation salt/version updates.\n+        LOCK(cs_main);\n+        if (!State(pfrom.GetId())->m_wtxid_relay) return; // SENDRECON is allowed only after WTXIDRELAY.\n+\n+        bool recon_requestor, recon_responder;\n+        uint64_t remote_salt;\n+        uint32_t recon_version;\n+        vRecv >> recon_requestor >> recon_responder >> recon_version >> remote_salt;\n+        if (recon_version != 1) return;\n+\n+        // Do not flood through inbound connections which support reconciliation to save bandwidth.\n+        // Flood only through a limited number of outbound connections.\n+        bool flood_to = false;\n+        if (pfrom.IsInboundConn()) {\n+            // We currently don't support reconciliations with inbound peers which\n+            // don't want to be reconciliation senders (request our sketches),\n+            // or want to be reconciliation responders (send us their sketches).\n+            // Just ignore SENDRECON and use normal flooding for transaction relay with them.\n+            if (!recon_requestor) return;\n+            if (recon_responder) return;\n+        } else {\n+            // We currently don't support reconciliations with outbound peers which\n+            // don't want to be reconciliation responders (send us their sketches),\n+            // or want to be reconciliation senders (request our sketches).\n+            // Just ignore SENDRECON and use normal flooding for transaction relay with them.\n+            if (recon_requestor) return;\n+            if (!recon_responder) return;\n+\n+            uint64_t outbound_flooding_peers = GetFloodingOutboundsCount(pfrom);\n+            if (outbound_flooding_peers < MAX_OUTBOUND_FLOOD_TO) {\n+                flood_to = true;\n+            }\n+        }\n+\n+        uint64_t local_salt = peer->m_local_recon_salt;\n+        uint64_t salt1 = local_salt, salt2 = remote_salt;\n+        if (salt1 > salt2) std::swap(salt1, salt2);\n+        static const auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\n+        uint256 full_salt = (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();\n+\n+        peer->m_recon_state = MakeUnique<ReconState>(recon_requestor, recon_responder, flood_to, full_salt.GetUint64(0), full_salt.GetUint64(1));",
      "path": "src/net_processing.cpp",
      "position": 343,
      "original_position": 343,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "in_reply_to_id": null,
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Please [use `std::make_unique` in new code](https://github.com/bitcoin/bitcoin/blob/master/src/util/memory.h#L13).",
      "created_at": "2021-03-12T00:39:58Z",
      "updated_at": "2021-03-12T00:39:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r592830262",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/592830262"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2984,
      "original_line": 2984,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594350238",
      "pull_request_review_id": 612210832,
      "id": 594350238,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDM1MDIzOA==",
      "diff_hunk": "@@ -1665,17 +1680,19 @@ bool static AlreadyHaveBlock(const uint256& block_hash) EXCLUSIVE_LOCKS_REQUIRED\n     return LookupBlockIndex(block_hash) != nullptr;\n }\n \n-void RelayTransaction(const uint256& txid, const uint256& wtxid, const CConnman& connman)\n+void RelayTransaction(const uint256& txid, const uint256& wtxid, const CConnman& connman, bool flood)\n {\n-    connman.ForEachNode([&txid, &wtxid](CNode* pnode) EXCLUSIVE_LOCKS_REQUIRED(::cs_main) {\n+    connman.ForEachNode([&txid, &wtxid, flood](CNode* pnode) EXCLUSIVE_LOCKS_REQUIRED(::cs_main) {\n         AssertLockHeld(::cs_main);\n \n         CNodeState* state = State(pnode->GetId());\n         if (state == nullptr) return;\n         if (state->m_wtxid_relay) {\n-            pnode->PushTxInventory(wtxid);\n+            pnode->PushTxInventory(wtxid, flood);\n         } else {\n-            pnode->PushTxInventory(txid);\n+            // Reconciliations are not supported for non-wtxid peers,\n+            // so we always use flooding.\n+            pnode->PushTxInventory(txid, true);",
      "path": "src/net_processing.cpp",
      "position": 224,
      "original_position": 53,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "ce83d3fbcc0f09808d15a7d2155223430fa45735",
      "in_reply_to_id": 573107239,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I know it's more complicated logic, but think it's necessary.\r\nm_flood inside peer's ReconState is one factor, but it's not sufficient, because we can't flood *all* transactions to them.\r\n\r\nIf we did so, there will be too much flooding. A non-reachable node always sets m_flood for its 8 outbound peers to true. In that case, it will flood all transactions it gets for them, too much bandwidth.\r\n\r\nI suggest flooding only transactions received via inbound flooding, so this is never the case for non-reachable nodes.\r\n\r\nI'm open to suggestions on other ways how to limit flooding, but I think this one makes the most sense.",
      "created_at": "2021-03-15T13:49:08Z",
      "updated_at": "2021-03-15T13:49:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r594350238",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594350238"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1724,
      "original_line": 1724,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594369245",
      "pull_request_review_id": 612236207,
      "id": 594369245,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDM2OTI0NQ==",
      "diff_hunk": "@@ -2795,6 +2808,61 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         return;\n     }\n \n+    // Received from an inbound peer planning to reconcile transactions with us, or\n+    // from an outgoing peer demonstrating readiness to do reconciliations.\n+    // If received from outgoing, adds the peer to the reconciliation queue.\n+    // Feature negotiation of tx reconciliation should happen between VERSION and\n+    // VERACK, to avoid relay problems from switching after a connection is up.\n+    if (msg_type == NetMsgType::SENDRECON) {\n+        if (!pfrom.m_tx_relay) return;\n+        LOCK(peer->m_recon_state_mutex);\n+        if (peer->m_recon_state != nullptr) return; // Do not support reconciliation salt/version updates.\n+        LOCK(cs_main);\n+        if (!State(pfrom.GetId())->m_wtxid_relay) return; // SENDRECON is allowed only after WTXIDRELAY.\n+\n+        bool recon_requestor, recon_responder;\n+        uint64_t remote_salt;\n+        uint32_t recon_version;\n+        vRecv >> recon_requestor >> recon_responder >> recon_version >> remote_salt;\n+        if (recon_version != 1) return;\n+\n+        // Do not flood through inbound connections which support reconciliation to save bandwidth.\n+        bool flood_to = false;\n+        if (pfrom.IsInboundConn()) {\n+            // We currently don't support reconciliations with inbound peers which\n+            // don't want to be reconciliation senders (request our sketches),\n+            // or want to be reconciliation responders (send us their sketches).\n+            // Just ignore SENDRECON and use normal flooding for transaction relay with them.\n+            if (!recon_requestor) return;\n+            if (recon_responder) return;\n+        } else {\n+            // We currently don't support reconciliations with outbound peers which\n+            // don't want to be reconciliation responders (send us their sketches),\n+            // or want to be reconciliation senders (request our sketches).\n+            // Just ignore SENDRECON and use normal flooding for transaction relay with them.\n+            if (recon_requestor) return;\n+            if (!recon_responder) return;\n+            // TODO: Flood only through a limited number of outbound connections.\n+            flood_to = true;\n+        }\n+\n+        uint64_t local_salt = peer->m_local_recon_salt;\n+        uint64_t salt1 = local_salt, salt2 = remote_salt;\n+        if (salt1 > salt2) std::swap(salt1, salt2);\n+        static const auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\n+        uint256 full_salt = (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();\n+\n+        peer->m_recon_state = MakeUnique<ReconState>(recon_requestor, recon_responder, flood_to, full_salt.GetUint64(0), full_salt.GetUint64(1));\n+\n+        // Reconcile with all outbound peers supporting reconciliation (even if we flood to them),\n+        // to not miss transactions they have for us but won't flood.",
      "path": "src/net_processing.cpp",
      "position": 346,
      "original_position": 78,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "34a485e0f1c9511fbd18cc6c0d60b6ca8929ccd9",
      "in_reply_to_id": 573794642,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "\"strategic\" is not a bidirectional link property, it's decided on every peer locally.\r\nWe might flood stuff to them, but they won't flood to us (because they only flood outbound). \r\n\r\nIn that case, we will never get their transactions, if we don't reconcile.",
      "created_at": "2021-03-15T14:11:41Z",
      "updated_at": "2021-03-15T14:11:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r594369245",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594369245"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2987,
      "original_line": 2987,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594371856",
      "pull_request_review_id": 612239819,
      "id": 594371856,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDM3MTg1Ng==",
      "diff_hunk": "@@ -1017,7 +1024,15 @@ void PeerManagerImpl::ReattemptInitialBroadcast(CScheduler& scheduler) const\n \n         if (tx != nullptr) {\n             LOCK(cs_main);\n-            RelayTransaction(txid, tx->GetWitnessHash(), m_connman);\n+            // We re-relay these transactions via reconciliation (same as for initial broadcast),\n+            // instead of flooding, to hide the origin of transactions.\n+            // Since in Erlay transactions are flooded only inbound->outbound,\n+            // non-reachable nodes never flood transactions from other nodes (they have no inbounds).\n+            // Thus, making them flood these would tell a receiver that these indeed belong to the\n+            // flooding non-reachable nodes. Instead, we relay them via reconciliation,\n+            // in which case a receiver can't distinguish them from transactions we reconciled\n+            // with some other peer.\n+            RelayTransaction(txid, tx->GetWitnessHash(), m_connman, false);",
      "path": "src/net_processing.cpp",
      "position": 188,
      "original_position": 29,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "ce83d3fbcc0f09808d15a7d2155223430fa45735",
      "in_reply_to_id": 573094798,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": ">Non-reachable nodes may open connections to outbound not supporting reconciliations, thus relying on flooding for transaction announcements, at least until Erlay is well-deployed.\r\n\r\nSure. But for reconciliation conns, the current policy is to flood only what was received via inbound. So if we rebroadcast to a reconciling peer via flooding, they will know it's rebroadcast, because non-reachable never receive any stuff via inbound (by definition)\r\n\r\nContinue [here](https://github.com/bitcoin/bitcoin/pull/18261#discussion_r573107239)",
      "created_at": "2021-03-15T14:14:51Z",
      "updated_at": "2021-03-15T14:55:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r594371856",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594371856"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1064,
      "original_line": 1064,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594380974",
      "pull_request_review_id": 612252887,
      "id": 594380974,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDM4MDk3NA==",
      "diff_hunk": "@@ -4504,11 +4528,11 @@ bool PeerManager::SendMessages(CNode* pto)\n                 bool fSendTrickle = pto->HasPermission(PF_NOBAN);\n                 if (pto->m_tx_relay->nNextInvSend < current_time) {\n                     fSendTrickle = true;\n-                    if (pto->IsInboundConn()) {\n-                        pto->m_tx_relay->nNextInvSend = std::chrono::microseconds{m_connman.PoissonNextSendInbound(count_microseconds(current_time), INVENTORY_BROADCAST_INTERVAL)};\n-                    } else {\n-                        // Use half the delay for outbound peers, as there is less privacy concern for them.\n+                    if (peer->m_recon_state || !pto->IsInboundConn()) {",
      "path": "src/net_processing.cpp",
      "position": 560,
      "original_position": 125,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "e8fd1cb590161e88b64b2e20d3113310390e68a5",
      "in_reply_to_id": 541017754,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": ">It seems like an inbound peer that constantly tries to reconcile with us could be a more effective spy than before this change, but maybe I'm missing something.\r\n\r\nWe don't respond to reconciliations right away, there is a shared timer for those responses. That's why I thought it's fine to reduce the delay here.",
      "created_at": "2021-03-15T14:25:12Z",
      "updated_at": "2021-03-15T14:25:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r594380974",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594380974"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4948,
      "original_line": 4948,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594402754",
      "pull_request_review_id": 612282162,
      "id": 594402754,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDQwMjc1NA==",
      "diff_hunk": "@@ -3358,7 +3375,13 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n             // requests for it.\n             m_txrequest.ForgetTxHash(tx.GetHash());\n             m_txrequest.ForgetTxHash(tx.GetWitnessHash());\n-            RelayTransaction(tx.GetHash(), tx.GetWitnessHash(), m_connman);\n+\n+            // Flood those transactions which were received either via flooding, or inbound reconciliation,\n+            // but NOT via outbound reconciliation. Flooding then is mainly used for initial propagation\n+            // of new transactions across a network of reachable nodes quickly.",
      "path": "src/net_processing.cpp",
      "position": 374,
      "original_position": 83,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "ce83d3fbcc0f09808d15a7d2155223430fa45735",
      "in_reply_to_id": 573824646,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": ">IIUC, this comment correctly, you mean that a transaction discovered through an accepted-reconciliation will be marked for reconciliation for its future announcements, no matter the peer type (strategic outbound/non-strategic outbound/inbound).\r\n\r\nCorrect if you mean accepted=outbound (see confusion below)\r\n\r\n> I don't get the rational of such approach, propagation of such transactions could be accelerated if we were flooding them for our outbound peers.\r\n\r\nDiscuss [here](https://github.com/bitcoin/bitcoin/pull/18261#discussion_r573107239)\r\n\r\n>Also you may consider \"inbound reconciliation\" -> \"initiated reconciliation\", \"outbound reconciliation\" -> \"accepted reconciliation\". Even if reconciliation roles are decided in function of our peer selection, they should be clearly dissociated as orthogonal.\r\n\r\nACK, although I think \"inbound\" is not initiated, but it's accepted.",
      "created_at": "2021-03-15T14:49:13Z",
      "updated_at": "2021-03-15T14:55:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r594402754",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594402754"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3423,
      "original_line": 3423,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594407099",
      "pull_request_review_id": 612288034,
      "id": 594407099,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDQwNzA5OQ==",
      "diff_hunk": "@@ -3358,7 +3375,13 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n             // requests for it.\n             m_txrequest.ForgetTxHash(tx.GetHash());\n             m_txrequest.ForgetTxHash(tx.GetWitnessHash());\n-            RelayTransaction(tx.GetHash(), tx.GetWitnessHash(), m_connman);\n+\n+            // Flood those transactions which were received either via flooding, or inbound reconciliation,\n+            // but NOT via outbound reconciliation. Flooding then is mainly used for initial propagation\n+            // of new transactions across a network of reachable nodes quickly.\n+            LOCK(peer->m_recon_state_mutex);\n+            bool flood = !(peer->m_recon_state && peer->m_recon_state->m_responder);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 85,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "ce83d3fbcc0f09808d15a7d2155223430fa45735",
      "in_reply_to_id": 571236196,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@mzumsande sorry I just saw this question. Yeah, that might be useful, once I'm done with big refactor for this...\r\nIntuitively, I think this shouldn't be the case legacy peers cannibalize efficiency I think.",
      "created_at": "2021-03-15T14:54:04Z",
      "updated_at": "2021-03-15T14:54:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r594407099",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594407099"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3383,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595075917",
      "pull_request_review_id": 613122802,
      "id": 595075917,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTA3NTkxNw==",
      "diff_hunk": "@@ -2562,6 +2620,74 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n         return;\n     }\n \n+    // Received from an inbound peer planning to reconcile transactions with us, or\n+    // from an outgoing peer demonstrating readiness to do reconciliations.\n+    // If received from outgoing, adds the peer to the reconciliation queue.\n+    // Feature negotiation of tx reconciliation should happen between VERSION and\n+    // VERACK, to avoid relay problems from switching after a connection is up.\n+    if (msg_type == NetMsgType::SENDRECON) {\n+        if (!pfrom.m_tx_relay) return;\n+        if (peer->m_recon_state != nullptr) return; // Do not support reconciliation salt/version updates.\n+        LOCK(cs_main);\n+        if (!State(pfrom.GetId())->m_wtxid_relay) return; // SENDRECON is allowed only after WTXIDRELAY.\n+\n+        bool recon_sender, recon_responder;\n+        uint64_t remote_salt;\n+        uint32_t recon_version;\n+        vRecv >> recon_sender >> recon_responder >> recon_version >> remote_salt;\n+        if (recon_version != 1) return;\n+\n+        // Do not flood through inbound connections which support reconciliation to save bandwidth.\n+        bool flood_to = false;\n+        if (pfrom.IsInboundConn()) {\n+            // We currently don't support reconciliations with inbound peers which\n+            // don't want to be reconciliation senders (request our sketches),\n+            // or want to be reconciliation responders (send us their sketches).\n+            // Just ignore SENDRECON and use normal flooding for transaction relay with them.\n+            if (!recon_sender) return;\n+            if (recon_responder) return;\n+        } else {\n+            // We currently don't support reconciliations with outbound peers which\n+            // don't want to be reconciliation responders (send us their sketches),\n+            // or want to be reconciliation senders (request our sketches).\n+            // Just ignore SENDRECON and use normal flooding for transaction relay with them.\n+            if (recon_sender) return;\n+            if (!recon_responder) return;",
      "path": "src/net_processing.cpp",
      "position": 329,
      "original_position": 108,
      "commit_id": "c5389c20b8f4278351c42ff9b6cd7f723c906603",
      "original_commit_id": "60a723ee676ce4259e0b3177d2fd1b5013dca649",
      "in_reply_to_id": 541120337,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@sipa good idea, ack.",
      "created_at": "2021-03-16T11:19:24Z",
      "updated_at": "2021-03-16T11:19:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18261#discussion_r595075917",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595075917"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18261"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2970,
      "original_line": 2970,
      "side": "RIGHT"
    }
  ]
}