{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24158",
    "id": 832032071,
    "node_id": "PR_kwDOABII584xl81H",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/24158",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/24158.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/24158.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24158",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24158/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24158/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24158/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/1eac472976badf52312b52dcb119fa8b50ed408b",
    "number": 24158,
    "state": "closed",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "Optimize Mempool Reorg logic using Epochs, improving memory usage and runtime.",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This is a follow up PR to #21464 which improves the memory usage and runtime of the reorg update logic. The main changes are:\r\n\r\n1. Use std::vector<txiter> in cacheMap instead of std::set<txiter> which makes (iirc) entries go from > ~64 bytes to just 8 bytes\r\n2.  Don't look up in cacheMap the updateIt N times, look it up once and directly write the vector with known length (saves resizing)\r\n3. Use epochs to de-duplicate (saves N log N lookups)\r\n4. trimming from setExclude in a hotter loop\r\n\r\n",
    "labels": [
      {
        "id": 164208572,
        "node_id": "MDU6TGFiZWwxNjQyMDg1NzI=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Mempool",
        "name": "Mempool",
        "color": "fef2c0",
        "default": false
      },
      {
        "id": 955867938,
        "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
        "name": "Needs rebase",
        "description": "",
        "color": "cccccc",
        "default": false
      }
    ],
    "created_at": "2022-01-26T02:20:47Z",
    "updated_at": "2022-10-12T19:02:20Z",
    "closed_at": "2022-10-12T19:02:20Z",
    "mergeable": false,
    "mergeable_state": "dirty",
    "merge_commit_sha": "393e0ebf94bac60fe95bf3a6eac239e05a516dcd",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": false,
    "head": {
      "label": "JeremyRubin:epoch-mempool-reorg-updates",
      "ref": "epoch-mempool-reorg-updates",
      "sha": "1eac472976badf52312b52dcb119fa8b50ed408b",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 53111803,
        "node_id": "MDEwOlJlcG9zaXRvcnk1MzExMTgwMw==",
        "name": "bitcoin",
        "full_name": "JeremyRubin/bitcoin",
        "owner": {
          "login": "JeremyRubin",
          "id": 886523,
          "node_id": "MDQ6VXNlcjg4NjUyMw==",
          "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/JeremyRubin",
          "html_url": "https://github.com/JeremyRubin",
          "followers_url": "https://api.github.com/users/JeremyRubin/followers",
          "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
          "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
          "repos_url": "https://api.github.com/users/JeremyRubin/repos",
          "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/JeremyRubin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/JeremyRubin/bitcoin",
        "archive_url": "https://api.github.com/repos/JeremyRubin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/JeremyRubin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/JeremyRubin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/JeremyRubin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/JeremyRubin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/JeremyRubin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/JeremyRubin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/JeremyRubin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/JeremyRubin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/JeremyRubin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/JeremyRubin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/JeremyRubin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/JeremyRubin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/JeremyRubin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/JeremyRubin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/JeremyRubin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/JeremyRubin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/JeremyRubin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/JeremyRubin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/JeremyRubin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/JeremyRubin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/JeremyRubin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/JeremyRubin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/JeremyRubin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/JeremyRubin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/JeremyRubin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/JeremyRubin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/JeremyRubin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/JeremyRubin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:JeremyRubin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/JeremyRubin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/JeremyRubin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/JeremyRubin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/JeremyRubin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/JeremyRubin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/JeremyRubin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/JeremyRubin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/JeremyRubin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/JeremyRubin/bitcoin/hooks",
        "svn_url": "https://github.com/JeremyRubin/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 7,
        "stargazers_count": 10,
        "watchers_count": 10,
        "size": 203232,
        "default_branch": "master",
        "open_issues_count": 2,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-01-04T19:39:36Z",
        "created_at": "2016-03-04T06:06:13Z",
        "updated_at": "2023-01-05T18:14:42Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "29d540b7ada890dd588c4825d40c27c5e6f20061",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69819,
        "watchers_count": 69819,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-07T05:35:10Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T04:47:18Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24158"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 78,
    "deletions": 34,
    "changed_files": 2,
    "commits": 1,
    "review_comments": 18,
    "comments": 9
  },
  "events": [
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDFlYWM0NzI5NzZiYWRmNTIzMTJiNTJkY2IxMTlmYThiNTBlZDQwOGI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1eac472976badf52312b52dcb119fa8b50ed408b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1eac472976badf52312b52dcb119fa8b50ed408b",
      "tree": {
        "sha": "3108d45336bcbb18e1f8ed9ff480365dde9a591f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3108d45336bcbb18e1f8ed9ff480365dde9a591f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0147278e37d0bc244bcc6a10ad860e16fef055fa",
          "sha": "0147278e37d0bc244bcc6a10ad860e16fef055fa",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/0147278e37d0bc244bcc6a10ad860e16fef055fa"
        }
      ],
      "message": "Optimize Mempool Reorg logic using Epochs, improving memory usage and runtime",
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2022-01-26T01:51:27Z"
      },
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2022-01-26T01:51:27Z"
      },
      "sha": "1eac472976badf52312b52dcb119fa8b50ed408b"
    },
    {
      "event": "labeled",
      "id": 5953997191,
      "node_id": "LE_lADOABII585Cbsv7zwAAAAFi4smH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5953997191",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-26T02:32:27Z",
      "label": {
        "name": "Mempool",
        "color": "fef2c0"
      }
    },
    {
      "event": "commented",
      "id": 1022710490,
      "node_id": "IC_kwDOABII58489VLa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1022710490",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-26T23:53:38Z",
      "updated_at": "2022-06-27T20:04:34Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#25290](https://github.com/bitcoin/bitcoin/pull/25290) ([kernel 3a/n] Decouple `CTxMemPool` from `ArgsManager` by dongcarl)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24158#issuecomment-1022710490",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24158"
    },
    {
      "event": "commented",
      "id": 1042101831,
      "node_id": "IC_kwDOABII584-HTZH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1042101831",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-16T19:49:22Z",
      "updated_at": "2022-02-16T19:49:22Z",
      "author_association": "MEMBER",
      "body": "What is the relationship of this PR to your #18191? Just judging from the title, they seem to do very similar things, although the code changes are not the same.",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24158#issuecomment-1042101831",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24158"
    },
    {
      "event": "commented",
      "id": 1042110112,
      "node_id": "IC_kwDOABII584-HVag",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1042110112",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-16T19:59:16Z",
      "updated_at": "2022-02-16T19:59:16Z",
      "author_association": "CONTRIBUTOR",
      "body": "They were split out from an initial patch set to make it easier to review.\r\n\r\n#18191 is the component which has some behavioral change, #24158 is a pure optimization.",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24158#issuecomment-1042110112",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24158"
    },
    {
      "event": "commented",
      "id": 1042111972,
      "node_id": "IC_kwDOABII584-HV3k",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1042111972",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-16T20:01:21Z",
      "updated_at": "2022-02-16T20:01:21Z",
      "author_association": "CONTRIBUTOR",
      "body": "see the pr description of #18191\r\n\r\n> There's potential for a better -- but more sophisticated -- algorithm that can be used taking advantage of epochs, but I figured it is better to do something that is simple and works first and upgrade it later as the other epoch mempool work proceeds as it makes the patches for the epoch algorithm simpler to understand, so you can consider this as preparatory work. It could either go in now if it is not controversial, or we could wait until the other patch is ready to go.",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24158#issuecomment-1042111972",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24158"
    },
    {
      "event": "commented",
      "id": 1042123094,
      "node_id": "IC_kwDOABII584-HYlW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1042123094",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-16T20:14:14Z",
      "updated_at": "2022-02-16T20:14:14Z",
      "author_association": "MEMBER",
      "body": "> see the pr description of #18191\r\n\r\nThat's from #21464 which was merged, my question is about the older #18191.",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24158#issuecomment-1042123094",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24158"
    },
    {
      "event": "commented",
      "id": 1042219410,
      "node_id": "IC_kwDOABII584-HwGS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1042219410",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-16T20:28:55Z",
      "updated_at": "2022-02-16T20:28:55Z",
      "author_association": "CONTRIBUTOR",
      "body": "oh oops.\r\n\r\nuh yeah TBH I forgot I had that other PR open.\r\n\r\nThey should be mostly the same.\r\n\r\nThe main difference is the earlier one also applies an optimization getting rid of setExclude and just using the cache line presence instead, which ends up being redundant with the setExclude.\r\n\r\nWe can add that optimization as a separate PR since it's a little bit less obvious why it works, I left it out when I rewrote this one.",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24158#issuecomment-1042219410",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24158"
    },
    {
      "event": "reviewed",
      "id": 874762333,
      "node_id": "PRR_kwDOABII5840I9Bd",
      "url": null,
      "actor": null,
      "commit_id": "1eac472976badf52312b52dcb119fa8b50ed408b",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Seems like this could be an improvement, but not convinced unless there's a bench or a breakdown of the memory used.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24158#pullrequestreview-874762333",
      "submitted_at": "2022-02-17T12:04:04Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24158"
    },
    {
      "event": "comment_deleted",
      "id": 6113977485,
      "node_id": "CDE_lADOABII585Cbsv7zwAAAAFsa-SN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6113977485",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-21T20:49:27Z"
    },
    {
      "event": "commented",
      "id": 1101897073,
      "node_id": "IC_kwDOABII585BrZ1x",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1101897073",
      "actor": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-19T01:11:23Z",
      "updated_at": "2022-04-19T01:11:23Z",
      "author_association": "CONTRIBUTOR",
      "body": "I think `UpdateForDescendants` should have the LOCKS_EXCLUDED annotation for m_epoch in txmempool.h",
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24158#issuecomment-1101897073",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24158"
    },
    {
      "event": "commented",
      "id": 1169662009,
      "node_id": "IC_kwDOABII585Ft6A5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1169662009",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-29T08:03:32Z",
      "updated_at": "2022-06-29T08:03:32Z",
      "author_association": "MEMBER",
      "body": "<!--cf906140f33d8803c4a75a2196329ecb-->\n🐙 This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24158#issuecomment-1169662009",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24158"
    },
    {
      "event": "labeled",
      "id": 6900078947,
      "node_id": "LE_lADOABII585Cbsv7zwAAAAGbRtlj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6900078947",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-29T08:03:32Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1276609824,
      "node_id": "IC_kwDOABII585MF4Ug",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1276609824",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-12T19:02:20Z",
      "updated_at": "2022-10-12T19:02:20Z",
      "author_association": "MEMBER",
      "body": "@JeremyRubin as discussed offline, closing this for now and assigning to @stickies-v.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24158#issuecomment-1276609824",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24158"
    },
    {
      "event": "closed",
      "id": 7574543732,
      "node_id": "CE_lADOABII585Cbsv7zwAAAAHDel10",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7574543732",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-12T19:02:20Z"
    },
    {
      "event": "mentioned",
      "id": 7574543783,
      "node_id": "MEE_lADOABII585Cbsv7zwAAAAHDel2n",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7574543783",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-12T19:02:20Z"
    },
    {
      "event": "subscribed",
      "id": 7574543792,
      "node_id": "SE_lADOABII585Cbsv7zwAAAAHDel2w",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7574543792",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-12T19:02:20Z"
    },
    {
      "event": "mentioned",
      "id": 7574543808,
      "node_id": "MEE_lADOABII585Cbsv7zwAAAAHDel3A",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7574543808",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-12T19:02:20Z"
    },
    {
      "event": "subscribed",
      "id": 7574543816,
      "node_id": "SE_lADOABII585Cbsv7zwAAAAHDel3I",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7574543816",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-12T19:02:20Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/808939277",
      "pull_request_review_id": 874762333,
      "id": 808939277,
      "node_id": "PRRC_kwDOABII584wN28N",
      "diff_hunk": "@@ -120,47 +120,91 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap& cachedDescendan\n                                       const std::set<uint256>& setExclude, std::set<uint256>& descendants_to_remove,\n                                       uint64_t ancestor_size_limit, uint64_t ancestor_count_limit)\n {\n-    CTxMemPoolEntry::Children stageEntries, descendants;\n-    stageEntries = updateIt->GetMemPoolChildrenConst();\n-\n-    while (!stageEntries.empty()) {\n-        const CTxMemPoolEntry& descendant = *stageEntries.begin();\n-        descendants.insert(descendant);\n-        stageEntries.erase(descendant);\n-        const CTxMemPoolEntry::Children& children = descendant.GetMemPoolChildrenConst();\n-        for (const CTxMemPoolEntry& childEntry : children) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(mapTx.iterator_to(childEntry));\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    descendants.insert(*cacheEntry);\n+    const CTxMemPoolEntry::Children& children = updateIt->GetMemPoolChildrenConst();\n+\n+    // initialize to hold all direct children\n+    // children guaranteed to be unique at this point\n+    std::vector<txiter> descendants(children.size());\n+    size_t i = 0;\n+    for (const auto& child: children) {\n+        descendants[i] = mapTx.iterator_to(child);\n+        ++i;\n+    }\n+\n+    {\n+        WITH_FRESH_EPOCH(m_epoch);\n+        // visit all children\n+        for (auto& child : descendants) {\n+            visited(child);\n+        }\n+        for (size_t i = 0, n_to_process = descendants.size(); i < n_to_process; ++i) {\n+            const CTxMemPoolEntry& descendant = *descendants[i];\n+            const CTxMemPoolEntry::Children& children = descendant.GetMemPoolChildrenConst();\n+            for (const CTxMemPoolEntry& childEntry : children) {\n+                cacheMap::iterator cacheIt = cachedDescendants.find(mapTx.iterator_to(childEntry));",
      "path": "src/txmempool.cpp",
      "position": 40,
      "original_position": 40,
      "commit_id": "1eac472976badf52312b52dcb119fa8b50ed408b",
      "original_commit_id": "1eac472976badf52312b52dcb119fa8b50ed408b",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Shouldn't you first look for `descendant` in `cachedDescendants` before fetching its children? If its descendant set is available there, you wasted a cycle looking at the first generation.",
      "created_at": "2022-02-17T11:15:52Z",
      "updated_at": "2022-02-17T12:04:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24158#discussion_r808939277",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/808939277"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24158"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 144,
      "original_line": 144,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/808951139",
      "pull_request_review_id": 874762333,
      "id": 808951139,
      "node_id": "PRRC_kwDOABII584wN51j",
      "diff_hunk": "@@ -120,47 +120,91 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap& cachedDescendan\n                                       const std::set<uint256>& setExclude, std::set<uint256>& descendants_to_remove,\n                                       uint64_t ancestor_size_limit, uint64_t ancestor_count_limit)\n {\n-    CTxMemPoolEntry::Children stageEntries, descendants;\n-    stageEntries = updateIt->GetMemPoolChildrenConst();\n-\n-    while (!stageEntries.empty()) {\n-        const CTxMemPoolEntry& descendant = *stageEntries.begin();\n-        descendants.insert(descendant);\n-        stageEntries.erase(descendant);\n-        const CTxMemPoolEntry::Children& children = descendant.GetMemPoolChildrenConst();\n-        for (const CTxMemPoolEntry& childEntry : children) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(mapTx.iterator_to(childEntry));\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    descendants.insert(*cacheEntry);\n+    const CTxMemPoolEntry::Children& children = updateIt->GetMemPoolChildrenConst();\n+\n+    // initialize to hold all direct children\n+    // children guaranteed to be unique at this point\n+    std::vector<txiter> descendants(children.size());\n+    size_t i = 0;\n+    for (const auto& child: children) {\n+        descendants[i] = mapTx.iterator_to(child);\n+        ++i;\n+    }\n+\n+    {\n+        WITH_FRESH_EPOCH(m_epoch);\n+        // visit all children\n+        for (auto& child : descendants) {\n+            visited(child);\n+        }\n+        for (size_t i = 0, n_to_process = descendants.size(); i < n_to_process; ++i) {\n+            const CTxMemPoolEntry& descendant = *descendants[i];\n+            const CTxMemPoolEntry::Children& children = descendant.GetMemPoolChildrenConst();\n+            for (const CTxMemPoolEntry& childEntry : children) {\n+                cacheMap::iterator cacheIt = cachedDescendants.find(mapTx.iterator_to(childEntry));\n+                if (cacheIt != cachedDescendants.end()) {\n+                    // We've already calculated this one, just add the entries for this set\n+                    // but don't traverse again.\n+                    for (txiter cacheEntry : cacheIt->second) {\n+                        // Add all to descendants which have not yet been added\n+                        if (!visited(cacheEntry)) {\n+                            descendants.emplace_back(cacheEntry);\n+                            // skip self-swap because of buggy std::swap implementations\n+                            // on some platforms\n+                            if (!(descendants.size() == i+2)) {\n+                                std::swap(descendants[i+1], descendants.back());\n+                            }",
      "path": "src/txmempool.cpp",
      "position": 52,
      "original_position": 52,
      "commit_id": "1eac472976badf52312b52dcb119fa8b50ed408b",
      "original_commit_id": "1eac472976badf52312b52dcb119fa8b50ed408b",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "IIUC, you're swapping here in order to insert all of the descendants between this child and the next entry in the descendants vector, so you can just increment `i` to skip to the next child in the same generation. Note that you're still moving everything downwards n times where n is the number of cached descendants.\r\nApproach-wise, perhaps a `std::deque` (linked list) is more appropriate if you really want the constant time insert at arbitrary position. Also, I'm not too familiar with the implementation of `std::vector`, but I feel like it should be optimized enough for you to feel okay using `insert(i+1)` without using swaps. It might even do that in the background.\r\n\r\nAlso, please add a comment because it was not immediately obvious that you're doing swaps to maintain ordering.",
      "created_at": "2022-02-17T11:30:56Z",
      "updated_at": "2022-02-17T12:04:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24158#discussion_r808951139",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/808951139"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24158"
        }
      },
      "start_line": 154,
      "original_start_line": 154,
      "start_side": "RIGHT",
      "line": 156,
      "original_line": 156,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/808951919",
      "pull_request_review_id": 874762333,
      "id": 808951919,
      "node_id": "PRRC_kwDOABII584wN6Bv",
      "diff_hunk": "@@ -120,47 +120,91 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap& cachedDescendan\n                                       const std::set<uint256>& setExclude, std::set<uint256>& descendants_to_remove,\n                                       uint64_t ancestor_size_limit, uint64_t ancestor_count_limit)\n {\n-    CTxMemPoolEntry::Children stageEntries, descendants;\n-    stageEntries = updateIt->GetMemPoolChildrenConst();\n-\n-    while (!stageEntries.empty()) {\n-        const CTxMemPoolEntry& descendant = *stageEntries.begin();\n-        descendants.insert(descendant);\n-        stageEntries.erase(descendant);\n-        const CTxMemPoolEntry::Children& children = descendant.GetMemPoolChildrenConst();\n-        for (const CTxMemPoolEntry& childEntry : children) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(mapTx.iterator_to(childEntry));\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    descendants.insert(*cacheEntry);\n+    const CTxMemPoolEntry::Children& children = updateIt->GetMemPoolChildrenConst();\n+\n+    // initialize to hold all direct children\n+    // children guaranteed to be unique at this point\n+    std::vector<txiter> descendants(children.size());\n+    size_t i = 0;\n+    for (const auto& child: children) {\n+        descendants[i] = mapTx.iterator_to(child);\n+        ++i;\n+    }",
      "path": "src/txmempool.cpp",
      "position": 28,
      "original_position": 28,
      "commit_id": "1eac472976badf52312b52dcb119fa8b50ed408b",
      "original_commit_id": "1eac472976badf52312b52dcb119fa8b50ed408b",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What is the purpose of `i` here? You're re-assigning it later anyway.\r\n\r\nAlso, why can't you just do a `std::transform` from `children` to populate `descendants`?",
      "created_at": "2022-02-17T11:31:59Z",
      "updated_at": "2022-02-17T12:04:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24158#discussion_r808951919",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/808951919"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24158"
        }
      },
      "start_line": 128,
      "original_start_line": 128,
      "start_side": "RIGHT",
      "line": 132,
      "original_line": 132,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/808967963",
      "pull_request_review_id": 874762333,
      "id": 808967963,
      "node_id": "PRRC_kwDOABII584wN98b",
      "diff_hunk": "@@ -120,47 +120,91 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap& cachedDescendan\n                                       const std::set<uint256>& setExclude, std::set<uint256>& descendants_to_remove,\n                                       uint64_t ancestor_size_limit, uint64_t ancestor_count_limit)\n {\n-    CTxMemPoolEntry::Children stageEntries, descendants;\n-    stageEntries = updateIt->GetMemPoolChildrenConst();\n-\n-    while (!stageEntries.empty()) {\n-        const CTxMemPoolEntry& descendant = *stageEntries.begin();\n-        descendants.insert(descendant);\n-        stageEntries.erase(descendant);\n-        const CTxMemPoolEntry::Children& children = descendant.GetMemPoolChildrenConst();\n-        for (const CTxMemPoolEntry& childEntry : children) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(mapTx.iterator_to(childEntry));\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    descendants.insert(*cacheEntry);\n+    const CTxMemPoolEntry::Children& children = updateIt->GetMemPoolChildrenConst();\n+\n+    // initialize to hold all direct children\n+    // children guaranteed to be unique at this point\n+    std::vector<txiter> descendants(children.size());\n+    size_t i = 0;\n+    for (const auto& child: children) {\n+        descendants[i] = mapTx.iterator_to(child);\n+        ++i;\n+    }\n+\n+    {\n+        WITH_FRESH_EPOCH(m_epoch);\n+        // visit all children\n+        for (auto& child : descendants) {\n+            visited(child);\n+        }\n+        for (size_t i = 0, n_to_process = descendants.size(); i < n_to_process; ++i) {\n+            const CTxMemPoolEntry& descendant = *descendants[i];\n+            const CTxMemPoolEntry::Children& children = descendant.GetMemPoolChildrenConst();\n+            for (const CTxMemPoolEntry& childEntry : children) {\n+                cacheMap::iterator cacheIt = cachedDescendants.find(mapTx.iterator_to(childEntry));\n+                if (cacheIt != cachedDescendants.end()) {\n+                    // We've already calculated this one, just add the entries for this set\n+                    // but don't traverse again.\n+                    for (txiter cacheEntry : cacheIt->second) {\n+                        // Add all to descendants which have not yet been added\n+                        if (!visited(cacheEntry)) {\n+                            descendants.emplace_back(cacheEntry);\n+                            // skip self-swap because of buggy std::swap implementations\n+                            // on some platforms\n+                            if (!(descendants.size() == i+2)) {\n+                                std::swap(descendants[i+1], descendants.back());\n+                            }\n+                            // skip processing this element\n+                            ++i;\n+                        }\n+                    }\n+                } else if (!visited(mapTx.iterator_to(childEntry))) {\n+                    // Schedule for later processing\n+                    descendants.emplace_back(mapTx.iterator_to(childEntry));\n+                    ++n_to_process;\n                 }\n-            } else if (!descendants.count(childEntry)) {\n-                // Schedule for later processing\n-                stageEntries.insert(childEntry);\n             }\n         }\n-    }\n+    } // release epoch\n+\n+    // remove any descendants that are in setExclude\n+    auto included_upto = std::remove_if(descendants.begin(), descendants.end(),\n+            [&](txiter it) {\n+                return setExclude.count(it->GetTx().GetHash());\n+            });\n+\n+    // if none remain, we don't have to do any updating\n+    if (included_upto == descendants.begin()) return;\n+\n     // descendants now contains all in-mempool descendants of updateIt.\n     // Update and add to cached descendant map\n     int64_t modifySize = 0;\n     CAmount modifyFee = 0;\n     int64_t modifyCount = 0;\n-    for (const CTxMemPoolEntry& descendant : descendants) {\n-        if (!setExclude.count(descendant.GetTx().GetHash())) {\n-            modifySize += descendant.GetTxSize();\n-            modifyFee += descendant.GetModifiedFee();\n-            modifyCount++;\n-            cachedDescendants[updateIt].insert(mapTx.iterator_to(descendant));\n-            // Update ancestor state for each descendant\n-            mapTx.modify(mapTx.iterator_to(descendant), update_ancestor_state(updateIt->GetTxSize(), updateIt->GetModifiedFee(), 1, updateIt->GetSigOpCost()));\n-            // Don't directly remove the transaction here -- doing so would\n-            // invalidate iterators in cachedDescendants. Mark it for removal\n-            // by inserting into descendants_to_remove.\n-            if (descendant.GetCountWithAncestors() > ancestor_count_limit || descendant.GetSizeWithAncestors() > ancestor_size_limit) {\n-                descendants_to_remove.insert(descendant.GetTx().GetHash());\n-            }\n+    // Note: the below contains code which does some hacks to keep memory tight.\n+    // it could be improved in the future to detect if the vector is already tight\n+    // and then directly move it to cachedDescendants. For simplicity, we just\n+    // do a copy for now.\n+\n+    // emplace into a new vector to guarantee we trim memory\n+    const auto& it = cachedDescendants.emplace(std::piecewise_construct,\n+            std::forward_as_tuple(updateIt),\n+            std::forward_as_tuple(descendants.begin(), included_upto));\n+    // swap with descendants to release it early!\n+    std::vector<txiter>().swap(descendants);",
      "path": "src/txmempool.cpp",
      "position": 108,
      "original_position": 108,
      "commit_id": "1eac472976badf52312b52dcb119fa8b50ed408b",
      "original_commit_id": "1eac472976badf52312b52dcb119fa8b50ed408b",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Would using `std::shrink_to_fit()` https://www.cplusplus.com/reference/vector/vector/shrink_to_fit/ \"guarantee we trim\" or no?",
      "created_at": "2022-02-17T11:52:43Z",
      "updated_at": "2022-02-17T12:04:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24158#discussion_r808967963",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/808967963"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24158"
        }
      },
      "start_line": 184,
      "original_start_line": 184,
      "start_side": "RIGHT",
      "line": 194,
      "original_line": 194,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/808974643",
      "pull_request_review_id": 874762333,
      "id": 808974643,
      "node_id": "PRRC_kwDOABII584wN_kz",
      "diff_hunk": "@@ -120,47 +120,91 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap& cachedDescendan\n                                       const std::set<uint256>& setExclude, std::set<uint256>& descendants_to_remove,\n                                       uint64_t ancestor_size_limit, uint64_t ancestor_count_limit)\n {\n-    CTxMemPoolEntry::Children stageEntries, descendants;\n-    stageEntries = updateIt->GetMemPoolChildrenConst();\n-\n-    while (!stageEntries.empty()) {\n-        const CTxMemPoolEntry& descendant = *stageEntries.begin();\n-        descendants.insert(descendant);\n-        stageEntries.erase(descendant);\n-        const CTxMemPoolEntry::Children& children = descendant.GetMemPoolChildrenConst();\n-        for (const CTxMemPoolEntry& childEntry : children) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(mapTx.iterator_to(childEntry));\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    descendants.insert(*cacheEntry);\n+    const CTxMemPoolEntry::Children& children = updateIt->GetMemPoolChildrenConst();\n+\n+    // initialize to hold all direct children\n+    // children guaranteed to be unique at this point\n+    std::vector<txiter> descendants(children.size());",
      "path": "src/txmempool.cpp",
      "position": 23,
      "original_position": 23,
      "commit_id": "1eac472976badf52312b52dcb119fa8b50ed408b",
      "original_commit_id": "1eac472976badf52312b52dcb119fa8b50ed408b",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "actually it might make more sense to resize to the children's aggregated descendant counts. You could overestimate, but there's most likely even fewer resizes.",
      "created_at": "2022-02-17T12:01:27Z",
      "updated_at": "2022-02-17T12:04:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24158#discussion_r808974643",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/808974643"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24158"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 127,
      "original_line": 127,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809932699",
      "pull_request_review_id": 887181840,
      "id": 809932699,
      "node_id": "PRRC_kwDOABII584wRpeb",
      "diff_hunk": "@@ -120,47 +120,91 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap& cachedDescendan\n                                       const std::set<uint256>& setExclude, std::set<uint256>& descendants_to_remove,\n                                       uint64_t ancestor_size_limit, uint64_t ancestor_count_limit)\n {\n-    CTxMemPoolEntry::Children stageEntries, descendants;\n-    stageEntries = updateIt->GetMemPoolChildrenConst();\n-\n-    while (!stageEntries.empty()) {\n-        const CTxMemPoolEntry& descendant = *stageEntries.begin();\n-        descendants.insert(descendant);\n-        stageEntries.erase(descendant);\n-        const CTxMemPoolEntry::Children& children = descendant.GetMemPoolChildrenConst();\n-        for (const CTxMemPoolEntry& childEntry : children) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(mapTx.iterator_to(childEntry));\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    descendants.insert(*cacheEntry);\n+    const CTxMemPoolEntry::Children& children = updateIt->GetMemPoolChildrenConst();\n+\n+    // initialize to hold all direct children\n+    // children guaranteed to be unique at this point\n+    std::vector<txiter> descendants(children.size());\n+    size_t i = 0;\n+    for (const auto& child: children) {\n+        descendants[i] = mapTx.iterator_to(child);\n+        ++i;\n+    }\n+\n+    {\n+        WITH_FRESH_EPOCH(m_epoch);\n+        // visit all children\n+        for (auto& child : descendants) {\n+            visited(child);\n+        }\n+        for (size_t i = 0, n_to_process = descendants.size(); i < n_to_process; ++i) {\n+            const CTxMemPoolEntry& descendant = *descendants[i];\n+            const CTxMemPoolEntry::Children& children = descendant.GetMemPoolChildrenConst();\n+            for (const CTxMemPoolEntry& childEntry : children) {\n+                cacheMap::iterator cacheIt = cachedDescendants.find(mapTx.iterator_to(childEntry));\n+                if (cacheIt != cachedDescendants.end()) {\n+                    // We've already calculated this one, just add the entries for this set\n+                    // but don't traverse again.\n+                    for (txiter cacheEntry : cacheIt->second) {\n+                        // Add all to descendants which have not yet been added\n+                        if (!visited(cacheEntry)) {\n+                            descendants.emplace_back(cacheEntry);\n+                            // skip self-swap because of buggy std::swap implementations\n+                            // on some platforms\n+                            if (!(descendants.size() == i+2)) {\n+                                std::swap(descendants[i+1], descendants.back());\n+                            }\n+                            // skip processing this element\n+                            ++i;\n+                        }\n+                    }\n+                } else if (!visited(mapTx.iterator_to(childEntry))) {\n+                    // Schedule for later processing\n+                    descendants.emplace_back(mapTx.iterator_to(childEntry));\n+                    ++n_to_process;\n                 }\n-            } else if (!descendants.count(childEntry)) {\n-                // Schedule for later processing\n-                stageEntries.insert(childEntry);\n             }\n         }\n-    }\n+    } // release epoch\n+\n+    // remove any descendants that are in setExclude\n+    auto included_upto = std::remove_if(descendants.begin(), descendants.end(),\n+            [&](txiter it) {\n+                return setExclude.count(it->GetTx().GetHash());\n+            });\n+\n+    // if none remain, we don't have to do any updating\n+    if (included_upto == descendants.begin()) return;\n+\n     // descendants now contains all in-mempool descendants of updateIt.\n     // Update and add to cached descendant map\n     int64_t modifySize = 0;\n     CAmount modifyFee = 0;\n     int64_t modifyCount = 0;\n-    for (const CTxMemPoolEntry& descendant : descendants) {\n-        if (!setExclude.count(descendant.GetTx().GetHash())) {\n-            modifySize += descendant.GetTxSize();\n-            modifyFee += descendant.GetModifiedFee();\n-            modifyCount++;\n-            cachedDescendants[updateIt].insert(mapTx.iterator_to(descendant));\n-            // Update ancestor state for each descendant\n-            mapTx.modify(mapTx.iterator_to(descendant), update_ancestor_state(updateIt->GetTxSize(), updateIt->GetModifiedFee(), 1, updateIt->GetSigOpCost()));\n-            // Don't directly remove the transaction here -- doing so would\n-            // invalidate iterators in cachedDescendants. Mark it for removal\n-            // by inserting into descendants_to_remove.\n-            if (descendant.GetCountWithAncestors() > ancestor_count_limit || descendant.GetSizeWithAncestors() > ancestor_size_limit) {\n-                descendants_to_remove.insert(descendant.GetTx().GetHash());\n-            }\n+    // Note: the below contains code which does some hacks to keep memory tight.\n+    // it could be improved in the future to detect if the vector is already tight\n+    // and then directly move it to cachedDescendants. For simplicity, we just\n+    // do a copy for now.\n+\n+    // emplace into a new vector to guarantee we trim memory\n+    const auto& it = cachedDescendants.emplace(std::piecewise_construct,\n+            std::forward_as_tuple(updateIt),\n+            std::forward_as_tuple(descendants.begin(), included_upto));\n+    // swap with descendants to release it early!\n+    std::vector<txiter>().swap(descendants);",
      "path": "src/txmempool.cpp",
      "position": 108,
      "original_position": 108,
      "commit_id": "1eac472976badf52312b52dcb119fa8b50ed408b",
      "original_commit_id": "1eac472976badf52312b52dcb119fa8b50ed408b",
      "in_reply_to_id": 808967963,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Also I'm curious as to why it's necessary to free this memory here. We don't need to allocate anything in the rest of the function, and `descendants` goes out of scope when we return.",
      "created_at": "2022-02-18T11:54:36Z",
      "updated_at": "2022-02-18T11:54:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24158#discussion_r809932699",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809932699"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24158"
        }
      },
      "start_line": 184,
      "original_start_line": 184,
      "start_side": "RIGHT",
      "line": 194,
      "original_line": 194,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/810236818",
      "pull_request_review_id": 887614415,
      "id": 810236818,
      "node_id": "PRRC_kwDOABII584wSzuS",
      "diff_hunk": "@@ -120,47 +120,91 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap& cachedDescendan\n                                       const std::set<uint256>& setExclude, std::set<uint256>& descendants_to_remove,\n                                       uint64_t ancestor_size_limit, uint64_t ancestor_count_limit)\n {\n-    CTxMemPoolEntry::Children stageEntries, descendants;\n-    stageEntries = updateIt->GetMemPoolChildrenConst();\n-\n-    while (!stageEntries.empty()) {\n-        const CTxMemPoolEntry& descendant = *stageEntries.begin();\n-        descendants.insert(descendant);\n-        stageEntries.erase(descendant);\n-        const CTxMemPoolEntry::Children& children = descendant.GetMemPoolChildrenConst();\n-        for (const CTxMemPoolEntry& childEntry : children) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(mapTx.iterator_to(childEntry));\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    descendants.insert(*cacheEntry);\n+    const CTxMemPoolEntry::Children& children = updateIt->GetMemPoolChildrenConst();\n+\n+    // initialize to hold all direct children\n+    // children guaranteed to be unique at this point\n+    std::vector<txiter> descendants(children.size());\n+    size_t i = 0;\n+    for (const auto& child: children) {\n+        descendants[i] = mapTx.iterator_to(child);\n+        ++i;\n+    }\n+\n+    {\n+        WITH_FRESH_EPOCH(m_epoch);\n+        // visit all children\n+        for (auto& child : descendants) {\n+            visited(child);\n+        }\n+        for (size_t i = 0, n_to_process = descendants.size(); i < n_to_process; ++i) {\n+            const CTxMemPoolEntry& descendant = *descendants[i];\n+            const CTxMemPoolEntry::Children& children = descendant.GetMemPoolChildrenConst();\n+            for (const CTxMemPoolEntry& childEntry : children) {\n+                cacheMap::iterator cacheIt = cachedDescendants.find(mapTx.iterator_to(childEntry));\n+                if (cacheIt != cachedDescendants.end()) {\n+                    // We've already calculated this one, just add the entries for this set\n+                    // but don't traverse again.\n+                    for (txiter cacheEntry : cacheIt->second) {\n+                        // Add all to descendants which have not yet been added\n+                        if (!visited(cacheEntry)) {\n+                            descendants.emplace_back(cacheEntry);\n+                            // skip self-swap because of buggy std::swap implementations\n+                            // on some platforms\n+                            if (!(descendants.size() == i+2)) {\n+                                std::swap(descendants[i+1], descendants.back());\n+                            }",
      "path": "src/txmempool.cpp",
      "position": 52,
      "original_position": 52,
      "commit_id": "1eac472976badf52312b52dcb119fa8b50ed408b",
      "original_commit_id": "1eac472976badf52312b52dcb119fa8b50ed408b",
      "in_reply_to_id": 808951139,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think you have it backwards kinda. we do not care about ordering whatsoever, we are keeping a \"partition\" of processed and unprocessed elements.\r\n\r\nessentially we have a queue with processed and unprocessed elements and a pointer to where we should process next.\r\n\r\n```\r\n// start\r\n\r\n[P1 P2 P3 P4 *U5 U6 U7 U8]\r\n\r\n// process element\r\n\r\n[P1 P2 P3 P4 P5 *U6 U7 U8]\r\n\r\n// insert processed element using push back and swap\r\n[P1 P2 P3 P4 P5 *U6 U7 U8 P9]\r\n[P1 P2 P3 P4 P5 *P9 U7 U8 U6]\r\n[P1 P2 P3 P4 P5 P9 *U7 U8 U6]\r\n// insert unprocessed element\r\n[P1 P2 P3 P4 P5 P9 *U7 U8 U6 U10]\r\n```\r\n\r\nIf we were to try to do the same with inserts, it would cause N^2 behavior. As you can see, we also do not preserve order during the swap back approach.\r\n\r\nIf we were to do insert it would look like:\r\n\r\n```\r\n[P1 P2 P3 P4 P5 *U6 U7 U8]\r\n// insert processed element using insert\r\n[P1 P2 P3 P4 P5 *P9 U6 U7 U8 P9]\r\n[P1 P2 P3 P4 P5 P9 *U6 U7 U8 P9]\r\n```\r\n\r\nAnd the shifting would cost O(N).\r\n\r\nDeque is a good data structure, but has an awful lot of extra overhead making it a poor fit for a performance critical code section. One of the key benefits of this approach is that we keep our data structure quick to iterate/add to. \r\n\r\nThe swap approach is O(1) per element added, which is fine. If we used insert / shifting it would be O(N) per element, which would cause a quadratic blowup. \r\n",
      "created_at": "2022-02-18T18:14:10Z",
      "updated_at": "2022-02-18T18:14:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24158#discussion_r810236818",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/810236818"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24158"
        }
      },
      "start_line": 154,
      "original_start_line": 154,
      "start_side": "RIGHT",
      "line": 156,
      "original_line": 156,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/810241004",
      "pull_request_review_id": 887620164,
      "id": 810241004,
      "node_id": "PRRC_kwDOABII584wS0vs",
      "diff_hunk": "@@ -120,47 +120,91 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap& cachedDescendan\n                                       const std::set<uint256>& setExclude, std::set<uint256>& descendants_to_remove,\n                                       uint64_t ancestor_size_limit, uint64_t ancestor_count_limit)\n {\n-    CTxMemPoolEntry::Children stageEntries, descendants;\n-    stageEntries = updateIt->GetMemPoolChildrenConst();\n-\n-    while (!stageEntries.empty()) {\n-        const CTxMemPoolEntry& descendant = *stageEntries.begin();\n-        descendants.insert(descendant);\n-        stageEntries.erase(descendant);\n-        const CTxMemPoolEntry::Children& children = descendant.GetMemPoolChildrenConst();\n-        for (const CTxMemPoolEntry& childEntry : children) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(mapTx.iterator_to(childEntry));\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    descendants.insert(*cacheEntry);\n+    const CTxMemPoolEntry::Children& children = updateIt->GetMemPoolChildrenConst();\n+\n+    // initialize to hold all direct children\n+    // children guaranteed to be unique at this point\n+    std::vector<txiter> descendants(children.size());\n+    size_t i = 0;\n+    for (const auto& child: children) {\n+        descendants[i] = mapTx.iterator_to(child);\n+        ++i;\n+    }\n+\n+    {\n+        WITH_FRESH_EPOCH(m_epoch);\n+        // visit all children\n+        for (auto& child : descendants) {\n+            visited(child);\n+        }\n+        for (size_t i = 0, n_to_process = descendants.size(); i < n_to_process; ++i) {\n+            const CTxMemPoolEntry& descendant = *descendants[i];\n+            const CTxMemPoolEntry::Children& children = descendant.GetMemPoolChildrenConst();\n+            for (const CTxMemPoolEntry& childEntry : children) {\n+                cacheMap::iterator cacheIt = cachedDescendants.find(mapTx.iterator_to(childEntry));\n+                if (cacheIt != cachedDescendants.end()) {\n+                    // We've already calculated this one, just add the entries for this set\n+                    // but don't traverse again.\n+                    for (txiter cacheEntry : cacheIt->second) {\n+                        // Add all to descendants which have not yet been added\n+                        if (!visited(cacheEntry)) {\n+                            descendants.emplace_back(cacheEntry);\n+                            // skip self-swap because of buggy std::swap implementations\n+                            // on some platforms\n+                            if (!(descendants.size() == i+2)) {\n+                                std::swap(descendants[i+1], descendants.back());\n+                            }\n+                            // skip processing this element\n+                            ++i;\n+                        }\n+                    }\n+                } else if (!visited(mapTx.iterator_to(childEntry))) {\n+                    // Schedule for later processing\n+                    descendants.emplace_back(mapTx.iterator_to(childEntry));\n+                    ++n_to_process;\n                 }\n-            } else if (!descendants.count(childEntry)) {\n-                // Schedule for later processing\n-                stageEntries.insert(childEntry);\n             }\n         }\n-    }\n+    } // release epoch\n+\n+    // remove any descendants that are in setExclude\n+    auto included_upto = std::remove_if(descendants.begin(), descendants.end(),\n+            [&](txiter it) {\n+                return setExclude.count(it->GetTx().GetHash());\n+            });\n+\n+    // if none remain, we don't have to do any updating\n+    if (included_upto == descendants.begin()) return;\n+\n     // descendants now contains all in-mempool descendants of updateIt.\n     // Update and add to cached descendant map\n     int64_t modifySize = 0;\n     CAmount modifyFee = 0;\n     int64_t modifyCount = 0;\n-    for (const CTxMemPoolEntry& descendant : descendants) {\n-        if (!setExclude.count(descendant.GetTx().GetHash())) {\n-            modifySize += descendant.GetTxSize();\n-            modifyFee += descendant.GetModifiedFee();\n-            modifyCount++;\n-            cachedDescendants[updateIt].insert(mapTx.iterator_to(descendant));\n-            // Update ancestor state for each descendant\n-            mapTx.modify(mapTx.iterator_to(descendant), update_ancestor_state(updateIt->GetTxSize(), updateIt->GetModifiedFee(), 1, updateIt->GetSigOpCost()));\n-            // Don't directly remove the transaction here -- doing so would\n-            // invalidate iterators in cachedDescendants. Mark it for removal\n-            // by inserting into descendants_to_remove.\n-            if (descendant.GetCountWithAncestors() > ancestor_count_limit || descendant.GetSizeWithAncestors() > ancestor_size_limit) {\n-                descendants_to_remove.insert(descendant.GetTx().GetHash());\n-            }\n+    // Note: the below contains code which does some hacks to keep memory tight.\n+    // it could be improved in the future to detect if the vector is already tight\n+    // and then directly move it to cachedDescendants. For simplicity, we just\n+    // do a copy for now.\n+\n+    // emplace into a new vector to guarantee we trim memory\n+    const auto& it = cachedDescendants.emplace(std::piecewise_construct,\n+            std::forward_as_tuple(updateIt),\n+            std::forward_as_tuple(descendants.begin(), included_upto));\n+    // swap with descendants to release it early!\n+    std::vector<txiter>().swap(descendants);",
      "path": "src/txmempool.cpp",
      "position": 108,
      "original_position": 108,
      "commit_id": "1eac472976badf52312b52dcb119fa8b50ed408b",
      "original_commit_id": "1eac472976badf52312b52dcb119fa8b50ed408b",
      "in_reply_to_id": 808967963,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "from what you cited:\r\n>The request is non-binding, and the container implementation is free to optimize otherwise and leave the [vector](https://www.cplusplus.com/vector) with a [capacity](https://www.cplusplus.com/vector::capacity) greater than its [size](https://www.cplusplus.com/vector::size).\r\n\r\nIdeally we would be happy trusting our shrink_to_fit, but I'd rather get exactly a trimmed vector here.\r\n\r\nwe do allocate (descendants_to_remove.insert), so it's a cautious approach to free it explicitly when it will never be used again than later.",
      "created_at": "2022-02-18T18:20:43Z",
      "updated_at": "2022-02-18T18:20:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24158#discussion_r810241004",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/810241004"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24158"
        }
      },
      "start_line": 184,
      "original_start_line": 184,
      "start_side": "RIGHT",
      "line": 194,
      "original_line": 194,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/810244989",
      "pull_request_review_id": 887625677,
      "id": 810244989,
      "node_id": "PRRC_kwDOABII584wS1t9",
      "diff_hunk": "@@ -120,47 +120,91 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap& cachedDescendan\n                                       const std::set<uint256>& setExclude, std::set<uint256>& descendants_to_remove,\n                                       uint64_t ancestor_size_limit, uint64_t ancestor_count_limit)\n {\n-    CTxMemPoolEntry::Children stageEntries, descendants;\n-    stageEntries = updateIt->GetMemPoolChildrenConst();\n-\n-    while (!stageEntries.empty()) {\n-        const CTxMemPoolEntry& descendant = *stageEntries.begin();\n-        descendants.insert(descendant);\n-        stageEntries.erase(descendant);\n-        const CTxMemPoolEntry::Children& children = descendant.GetMemPoolChildrenConst();\n-        for (const CTxMemPoolEntry& childEntry : children) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(mapTx.iterator_to(childEntry));\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    descendants.insert(*cacheEntry);\n+    const CTxMemPoolEntry::Children& children = updateIt->GetMemPoolChildrenConst();\n+\n+    // initialize to hold all direct children\n+    // children guaranteed to be unique at this point\n+    std::vector<txiter> descendants(children.size());\n+    size_t i = 0;\n+    for (const auto& child: children) {\n+        descendants[i] = mapTx.iterator_to(child);\n+        ++i;\n+    }\n+\n+    {\n+        WITH_FRESH_EPOCH(m_epoch);\n+        // visit all children\n+        for (auto& child : descendants) {\n+            visited(child);\n+        }\n+        for (size_t i = 0, n_to_process = descendants.size(); i < n_to_process; ++i) {\n+            const CTxMemPoolEntry& descendant = *descendants[i];\n+            const CTxMemPoolEntry::Children& children = descendant.GetMemPoolChildrenConst();\n+            for (const CTxMemPoolEntry& childEntry : children) {\n+                cacheMap::iterator cacheIt = cachedDescendants.find(mapTx.iterator_to(childEntry));",
      "path": "src/txmempool.cpp",
      "position": 40,
      "original_position": 40,
      "commit_id": "1eac472976badf52312b52dcb119fa8b50ed408b",
      "original_commit_id": "1eac472976badf52312b52dcb119fa8b50ed408b",
      "in_reply_to_id": 808939277,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "i think you are right on this. The patch here is a 100% behavioral match, but it does seem like one could evade caching a little because we don't check if children are cached. Can you think of any functional differences? (this code is incredibly subtle, so i'm reticent to change it).\r\n",
      "created_at": "2022-02-18T18:26:39Z",
      "updated_at": "2022-02-18T18:26:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24158#discussion_r810244989",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/810244989"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24158"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 144,
      "original_line": 144,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/810247278",
      "pull_request_review_id": 887628535,
      "id": 810247278,
      "node_id": "PRRC_kwDOABII584wS2Ru",
      "diff_hunk": "@@ -120,47 +120,91 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap& cachedDescendan\n                                       const std::set<uint256>& setExclude, std::set<uint256>& descendants_to_remove,\n                                       uint64_t ancestor_size_limit, uint64_t ancestor_count_limit)\n {\n-    CTxMemPoolEntry::Children stageEntries, descendants;\n-    stageEntries = updateIt->GetMemPoolChildrenConst();\n-\n-    while (!stageEntries.empty()) {\n-        const CTxMemPoolEntry& descendant = *stageEntries.begin();\n-        descendants.insert(descendant);\n-        stageEntries.erase(descendant);\n-        const CTxMemPoolEntry::Children& children = descendant.GetMemPoolChildrenConst();\n-        for (const CTxMemPoolEntry& childEntry : children) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(mapTx.iterator_to(childEntry));\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    descendants.insert(*cacheEntry);\n+    const CTxMemPoolEntry::Children& children = updateIt->GetMemPoolChildrenConst();\n+\n+    // initialize to hold all direct children\n+    // children guaranteed to be unique at this point\n+    std::vector<txiter> descendants(children.size());\n+    size_t i = 0;\n+    for (const auto& child: children) {\n+        descendants[i] = mapTx.iterator_to(child);\n+        ++i;\n+    }",
      "path": "src/txmempool.cpp",
      "position": 28,
      "original_position": 28,
      "commit_id": "1eac472976badf52312b52dcb119fa8b50ed408b",
      "original_commit_id": "1eac472976badf52312b52dcb119fa8b50ed408b",
      "in_reply_to_id": 808951919,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "i is needed to index descendants which is allocated up front.\r\n\r\nit could be a std::transform I suppose, but I don't think std::transform provides a readability improvement here.",
      "created_at": "2022-02-18T18:29:43Z",
      "updated_at": "2022-02-18T18:29:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24158#discussion_r810247278",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/810247278"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24158"
        }
      },
      "start_line": 128,
      "original_start_line": 128,
      "start_side": "RIGHT",
      "line": 132,
      "original_line": 132,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/811004575",
      "pull_request_review_id": 888511990,
      "id": 811004575,
      "node_id": "PRRC_kwDOABII584wVvKf",
      "diff_hunk": "@@ -120,47 +120,91 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap& cachedDescendan\n                                       const std::set<uint256>& setExclude, std::set<uint256>& descendants_to_remove,\n                                       uint64_t ancestor_size_limit, uint64_t ancestor_count_limit)\n {\n-    CTxMemPoolEntry::Children stageEntries, descendants;\n-    stageEntries = updateIt->GetMemPoolChildrenConst();\n-\n-    while (!stageEntries.empty()) {\n-        const CTxMemPoolEntry& descendant = *stageEntries.begin();\n-        descendants.insert(descendant);\n-        stageEntries.erase(descendant);\n-        const CTxMemPoolEntry::Children& children = descendant.GetMemPoolChildrenConst();\n-        for (const CTxMemPoolEntry& childEntry : children) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(mapTx.iterator_to(childEntry));\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    descendants.insert(*cacheEntry);\n+    const CTxMemPoolEntry::Children& children = updateIt->GetMemPoolChildrenConst();\n+\n+    // initialize to hold all direct children\n+    // children guaranteed to be unique at this point\n+    std::vector<txiter> descendants(children.size());\n+    size_t i = 0;\n+    for (const auto& child: children) {\n+        descendants[i] = mapTx.iterator_to(child);\n+        ++i;\n+    }\n+\n+    {\n+        WITH_FRESH_EPOCH(m_epoch);\n+        // visit all children\n+        for (auto& child : descendants) {\n+            visited(child);\n+        }\n+        for (size_t i = 0, n_to_process = descendants.size(); i < n_to_process; ++i) {\n+            const CTxMemPoolEntry& descendant = *descendants[i];\n+            const CTxMemPoolEntry::Children& children = descendant.GetMemPoolChildrenConst();\n+            for (const CTxMemPoolEntry& childEntry : children) {\n+                cacheMap::iterator cacheIt = cachedDescendants.find(mapTx.iterator_to(childEntry));\n+                if (cacheIt != cachedDescendants.end()) {\n+                    // We've already calculated this one, just add the entries for this set\n+                    // but don't traverse again.\n+                    for (txiter cacheEntry : cacheIt->second) {\n+                        // Add all to descendants which have not yet been added\n+                        if (!visited(cacheEntry)) {\n+                            descendants.emplace_back(cacheEntry);\n+                            // skip self-swap because of buggy std::swap implementations\n+                            // on some platforms\n+                            if (!(descendants.size() == i+2)) {\n+                                std::swap(descendants[i+1], descendants.back());\n+                            }\n+                            // skip processing this element\n+                            ++i;\n+                        }\n+                    }\n+                } else if (!visited(mapTx.iterator_to(childEntry))) {\n+                    // Schedule for later processing\n+                    descendants.emplace_back(mapTx.iterator_to(childEntry));\n+                    ++n_to_process;\n                 }\n-            } else if (!descendants.count(childEntry)) {\n-                // Schedule for later processing\n-                stageEntries.insert(childEntry);\n             }\n         }\n-    }\n+    } // release epoch\n+\n+    // remove any descendants that are in setExclude\n+    auto included_upto = std::remove_if(descendants.begin(), descendants.end(),\n+            [&](txiter it) {\n+                return setExclude.count(it->GetTx().GetHash());\n+            });\n+\n+    // if none remain, we don't have to do any updating\n+    if (included_upto == descendants.begin()) return;\n+\n     // descendants now contains all in-mempool descendants of updateIt.\n     // Update and add to cached descendant map\n     int64_t modifySize = 0;\n     CAmount modifyFee = 0;\n     int64_t modifyCount = 0;\n-    for (const CTxMemPoolEntry& descendant : descendants) {\n-        if (!setExclude.count(descendant.GetTx().GetHash())) {\n-            modifySize += descendant.GetTxSize();\n-            modifyFee += descendant.GetModifiedFee();\n-            modifyCount++;\n-            cachedDescendants[updateIt].insert(mapTx.iterator_to(descendant));\n-            // Update ancestor state for each descendant\n-            mapTx.modify(mapTx.iterator_to(descendant), update_ancestor_state(updateIt->GetTxSize(), updateIt->GetModifiedFee(), 1, updateIt->GetSigOpCost()));\n-            // Don't directly remove the transaction here -- doing so would\n-            // invalidate iterators in cachedDescendants. Mark it for removal\n-            // by inserting into descendants_to_remove.\n-            if (descendant.GetCountWithAncestors() > ancestor_count_limit || descendant.GetSizeWithAncestors() > ancestor_size_limit) {\n-                descendants_to_remove.insert(descendant.GetTx().GetHash());\n-            }\n+    // Note: the below contains code which does some hacks to keep memory tight.\n+    // it could be improved in the future to detect if the vector is already tight\n+    // and then directly move it to cachedDescendants. For simplicity, we just\n+    // do a copy for now.\n+\n+    // emplace into a new vector to guarantee we trim memory\n+    const auto& it = cachedDescendants.emplace(std::piecewise_construct,\n+            std::forward_as_tuple(updateIt),\n+            std::forward_as_tuple(descendants.begin(), included_upto));\n+    // swap with descendants to release it early!\n+    std::vector<txiter>().swap(descendants);",
      "path": "src/txmempool.cpp",
      "position": 108,
      "original_position": 108,
      "commit_id": "1eac472976badf52312b52dcb119fa8b50ed408b",
      "original_commit_id": "1eac472976badf52312b52dcb119fa8b50ed408b",
      "in_reply_to_id": 808967963,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sounds good.\r\n\r\nAnd my other question - what's the point of releasing `descendants` early?",
      "created_at": "2022-02-21T10:51:31Z",
      "updated_at": "2022-02-21T10:51:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24158#discussion_r811004575",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/811004575"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24158"
        }
      },
      "start_line": 184,
      "original_start_line": 184,
      "start_side": "RIGHT",
      "line": 194,
      "original_line": 194,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/811008835",
      "pull_request_review_id": 888517662,
      "id": 811008835,
      "node_id": "PRRC_kwDOABII584wVwND",
      "diff_hunk": "@@ -120,47 +120,91 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap& cachedDescendan\n                                       const std::set<uint256>& setExclude, std::set<uint256>& descendants_to_remove,\n                                       uint64_t ancestor_size_limit, uint64_t ancestor_count_limit)\n {\n-    CTxMemPoolEntry::Children stageEntries, descendants;\n-    stageEntries = updateIt->GetMemPoolChildrenConst();\n-\n-    while (!stageEntries.empty()) {\n-        const CTxMemPoolEntry& descendant = *stageEntries.begin();\n-        descendants.insert(descendant);\n-        stageEntries.erase(descendant);\n-        const CTxMemPoolEntry::Children& children = descendant.GetMemPoolChildrenConst();\n-        for (const CTxMemPoolEntry& childEntry : children) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(mapTx.iterator_to(childEntry));\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    descendants.insert(*cacheEntry);\n+    const CTxMemPoolEntry::Children& children = updateIt->GetMemPoolChildrenConst();\n+\n+    // initialize to hold all direct children\n+    // children guaranteed to be unique at this point\n+    std::vector<txiter> descendants(children.size());\n+    size_t i = 0;\n+    for (const auto& child: children) {\n+        descendants[i] = mapTx.iterator_to(child);\n+        ++i;\n+    }",
      "path": "src/txmempool.cpp",
      "position": 28,
      "original_position": 28,
      "commit_id": "1eac472976badf52312b52dcb119fa8b50ed408b",
      "original_commit_id": "1eac472976badf52312b52dcb119fa8b50ed408b",
      "in_reply_to_id": 808951919,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> i is needed to index descendants which is allocated up front\r\n\r\nJust `push_back`, and you don't need to allocate anything",
      "created_at": "2022-02-21T10:56:15Z",
      "updated_at": "2022-02-21T10:56:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24158#discussion_r811008835",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/811008835"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24158"
        }
      },
      "start_line": 128,
      "original_start_line": 128,
      "start_side": "RIGHT",
      "line": 132,
      "original_line": 132,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/811037367",
      "pull_request_review_id": 888556691,
      "id": 811037367,
      "node_id": "PRRC_kwDOABII584wV3K3",
      "diff_hunk": "@@ -120,47 +120,91 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap& cachedDescendan\n                                       const std::set<uint256>& setExclude, std::set<uint256>& descendants_to_remove,\n                                       uint64_t ancestor_size_limit, uint64_t ancestor_count_limit)\n {\n-    CTxMemPoolEntry::Children stageEntries, descendants;\n-    stageEntries = updateIt->GetMemPoolChildrenConst();\n-\n-    while (!stageEntries.empty()) {\n-        const CTxMemPoolEntry& descendant = *stageEntries.begin();\n-        descendants.insert(descendant);\n-        stageEntries.erase(descendant);\n-        const CTxMemPoolEntry::Children& children = descendant.GetMemPoolChildrenConst();\n-        for (const CTxMemPoolEntry& childEntry : children) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(mapTx.iterator_to(childEntry));\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    descendants.insert(*cacheEntry);\n+    const CTxMemPoolEntry::Children& children = updateIt->GetMemPoolChildrenConst();\n+\n+    // initialize to hold all direct children\n+    // children guaranteed to be unique at this point\n+    std::vector<txiter> descendants(children.size());\n+    size_t i = 0;\n+    for (const auto& child: children) {\n+        descendants[i] = mapTx.iterator_to(child);\n+        ++i;\n+    }\n+\n+    {\n+        WITH_FRESH_EPOCH(m_epoch);\n+        // visit all children\n+        for (auto& child : descendants) {\n+            visited(child);\n+        }\n+        for (size_t i = 0, n_to_process = descendants.size(); i < n_to_process; ++i) {\n+            const CTxMemPoolEntry& descendant = *descendants[i];\n+            const CTxMemPoolEntry::Children& children = descendant.GetMemPoolChildrenConst();\n+            for (const CTxMemPoolEntry& childEntry : children) {\n+                cacheMap::iterator cacheIt = cachedDescendants.find(mapTx.iterator_to(childEntry));\n+                if (cacheIt != cachedDescendants.end()) {\n+                    // We've already calculated this one, just add the entries for this set\n+                    // but don't traverse again.\n+                    for (txiter cacheEntry : cacheIt->second) {\n+                        // Add all to descendants which have not yet been added\n+                        if (!visited(cacheEntry)) {\n+                            descendants.emplace_back(cacheEntry);\n+                            // skip self-swap because of buggy std::swap implementations\n+                            // on some platforms\n+                            if (!(descendants.size() == i+2)) {\n+                                std::swap(descendants[i+1], descendants.back());\n+                            }",
      "path": "src/txmempool.cpp",
      "position": 52,
      "original_position": 52,
      "commit_id": "1eac472976badf52312b52dcb119fa8b50ed408b",
      "original_commit_id": "1eac472976badf52312b52dcb119fa8b50ed408b",
      "in_reply_to_id": 808951139,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "By preserve ordering, I merely meant that you're keeping the unprocessed elements behind the processed ones. We're saying the same thing, sorry for being unclear.\r\n\r\n> If we were to try to do the same with inserts, it would cause N^2 behavior.\r\n\r\nSure, this is the case if you're shifting everything per-insert inside the vector. This is why I suggested using a deque, where it's O(1) per element. It'd be the same performance as what you're doing here, except you just call `insert` instead of swapping. But my concerns with the complexity/readability of the code will be gone if you just comment what you're doing here.",
      "created_at": "2022-02-21T11:31:38Z",
      "updated_at": "2022-02-21T11:31:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24158#discussion_r811037367",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/811037367"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24158"
        }
      },
      "start_line": 154,
      "original_start_line": 154,
      "start_side": "RIGHT",
      "line": 156,
      "original_line": 156,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/811416671",
      "pull_request_review_id": 889085530,
      "id": 811416671,
      "node_id": "PRRC_kwDOABII584wXTxf",
      "diff_hunk": "@@ -120,47 +120,91 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap& cachedDescendan\n                                       const std::set<uint256>& setExclude, std::set<uint256>& descendants_to_remove,\n                                       uint64_t ancestor_size_limit, uint64_t ancestor_count_limit)\n {\n-    CTxMemPoolEntry::Children stageEntries, descendants;\n-    stageEntries = updateIt->GetMemPoolChildrenConst();\n-\n-    while (!stageEntries.empty()) {\n-        const CTxMemPoolEntry& descendant = *stageEntries.begin();\n-        descendants.insert(descendant);\n-        stageEntries.erase(descendant);\n-        const CTxMemPoolEntry::Children& children = descendant.GetMemPoolChildrenConst();\n-        for (const CTxMemPoolEntry& childEntry : children) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(mapTx.iterator_to(childEntry));\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    descendants.insert(*cacheEntry);\n+    const CTxMemPoolEntry::Children& children = updateIt->GetMemPoolChildrenConst();\n+\n+    // initialize to hold all direct children\n+    // children guaranteed to be unique at this point\n+    std::vector<txiter> descendants(children.size());\n+    size_t i = 0;\n+    for (const auto& child: children) {\n+        descendants[i] = mapTx.iterator_to(child);\n+        ++i;\n+    }\n+\n+    {\n+        WITH_FRESH_EPOCH(m_epoch);\n+        // visit all children\n+        for (auto& child : descendants) {\n+            visited(child);\n+        }\n+        for (size_t i = 0, n_to_process = descendants.size(); i < n_to_process; ++i) {\n+            const CTxMemPoolEntry& descendant = *descendants[i];\n+            const CTxMemPoolEntry::Children& children = descendant.GetMemPoolChildrenConst();\n+            for (const CTxMemPoolEntry& childEntry : children) {\n+                cacheMap::iterator cacheIt = cachedDescendants.find(mapTx.iterator_to(childEntry));\n+                if (cacheIt != cachedDescendants.end()) {\n+                    // We've already calculated this one, just add the entries for this set\n+                    // but don't traverse again.\n+                    for (txiter cacheEntry : cacheIt->second) {\n+                        // Add all to descendants which have not yet been added\n+                        if (!visited(cacheEntry)) {\n+                            descendants.emplace_back(cacheEntry);\n+                            // skip self-swap because of buggy std::swap implementations\n+                            // on some platforms\n+                            if (!(descendants.size() == i+2)) {\n+                                std::swap(descendants[i+1], descendants.back());\n+                            }",
      "path": "src/txmempool.cpp",
      "position": 52,
      "original_position": 52,
      "commit_id": "1eac472976badf52312b52dcb119fa8b50ed408b",
      "original_commit_id": "1eac472976badf52312b52dcb119fa8b50ed408b",
      "in_reply_to_id": 808951139,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "yeah deque is same complexity, but it's not the same performance, so it makes sense to continue using a vec even if we have to do a little bit of index management. can add a comment.",
      "created_at": "2022-02-21T20:38:21Z",
      "updated_at": "2022-02-21T20:38:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24158#discussion_r811416671",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/811416671"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24158"
        }
      },
      "start_line": 154,
      "original_start_line": 154,
      "start_side": "RIGHT",
      "line": 156,
      "original_line": 156,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/811418172",
      "pull_request_review_id": 889087412,
      "id": 811418172,
      "node_id": "PRRC_kwDOABII584wXUI8",
      "diff_hunk": "@@ -120,47 +120,91 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap& cachedDescendan\n                                       const std::set<uint256>& setExclude, std::set<uint256>& descendants_to_remove,\n                                       uint64_t ancestor_size_limit, uint64_t ancestor_count_limit)\n {\n-    CTxMemPoolEntry::Children stageEntries, descendants;\n-    stageEntries = updateIt->GetMemPoolChildrenConst();\n-\n-    while (!stageEntries.empty()) {\n-        const CTxMemPoolEntry& descendant = *stageEntries.begin();\n-        descendants.insert(descendant);\n-        stageEntries.erase(descendant);\n-        const CTxMemPoolEntry::Children& children = descendant.GetMemPoolChildrenConst();\n-        for (const CTxMemPoolEntry& childEntry : children) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(mapTx.iterator_to(childEntry));\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    descendants.insert(*cacheEntry);\n+    const CTxMemPoolEntry::Children& children = updateIt->GetMemPoolChildrenConst();\n+\n+    // initialize to hold all direct children\n+    // children guaranteed to be unique at this point\n+    std::vector<txiter> descendants(children.size());\n+    size_t i = 0;\n+    for (const auto& child: children) {\n+        descendants[i] = mapTx.iterator_to(child);\n+        ++i;\n+    }",
      "path": "src/txmempool.cpp",
      "position": 28,
      "original_position": 28,
      "commit_id": "1eac472976badf52312b52dcb119fa8b50ed408b",
      "original_commit_id": "1eac472976badf52312b52dcb119fa8b50ed408b",
      "in_reply_to_id": 808951919,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "if i do a call to reserve instead of the sized constructor https://en.cppreference.com/w/cpp/container/vector/vector, that would work w/o extra allocations.\r\n\r\nthe sized constructor + default insert + indexed insert is a bit better IMO because there are some overheads to push_back/emplace_back in terms of updating the vec bookkeeping that the simple indexed insert above does not have, but it's all something that would need measuring as the compiler probably does an OK job at it.\r\n\r\ndo you have a strong preference around this?",
      "created_at": "2022-02-21T20:41:57Z",
      "updated_at": "2022-02-21T20:41:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24158#discussion_r811418172",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/811418172"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24158"
        }
      },
      "start_line": 128,
      "original_start_line": 128,
      "start_side": "RIGHT",
      "line": 132,
      "original_line": 132,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/811418425",
      "pull_request_review_id": 889087767,
      "id": 811418425,
      "node_id": "PRRC_kwDOABII584wXUM5",
      "diff_hunk": "@@ -120,47 +120,91 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap& cachedDescendan\n                                       const std::set<uint256>& setExclude, std::set<uint256>& descendants_to_remove,\n                                       uint64_t ancestor_size_limit, uint64_t ancestor_count_limit)\n {\n-    CTxMemPoolEntry::Children stageEntries, descendants;\n-    stageEntries = updateIt->GetMemPoolChildrenConst();\n-\n-    while (!stageEntries.empty()) {\n-        const CTxMemPoolEntry& descendant = *stageEntries.begin();\n-        descendants.insert(descendant);\n-        stageEntries.erase(descendant);\n-        const CTxMemPoolEntry::Children& children = descendant.GetMemPoolChildrenConst();\n-        for (const CTxMemPoolEntry& childEntry : children) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(mapTx.iterator_to(childEntry));\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    descendants.insert(*cacheEntry);\n+    const CTxMemPoolEntry::Children& children = updateIt->GetMemPoolChildrenConst();\n+\n+    // initialize to hold all direct children\n+    // children guaranteed to be unique at this point\n+    std::vector<txiter> descendants(children.size());\n+    size_t i = 0;\n+    for (const auto& child: children) {\n+        descendants[i] = mapTx.iterator_to(child);\n+        ++i;\n+    }\n+\n+    {\n+        WITH_FRESH_EPOCH(m_epoch);\n+        // visit all children\n+        for (auto& child : descendants) {\n+            visited(child);\n+        }\n+        for (size_t i = 0, n_to_process = descendants.size(); i < n_to_process; ++i) {\n+            const CTxMemPoolEntry& descendant = *descendants[i];\n+            const CTxMemPoolEntry::Children& children = descendant.GetMemPoolChildrenConst();\n+            for (const CTxMemPoolEntry& childEntry : children) {\n+                cacheMap::iterator cacheIt = cachedDescendants.find(mapTx.iterator_to(childEntry));\n+                if (cacheIt != cachedDescendants.end()) {\n+                    // We've already calculated this one, just add the entries for this set\n+                    // but don't traverse again.\n+                    for (txiter cacheEntry : cacheIt->second) {\n+                        // Add all to descendants which have not yet been added\n+                        if (!visited(cacheEntry)) {\n+                            descendants.emplace_back(cacheEntry);\n+                            // skip self-swap because of buggy std::swap implementations\n+                            // on some platforms\n+                            if (!(descendants.size() == i+2)) {\n+                                std::swap(descendants[i+1], descendants.back());\n+                            }\n+                            // skip processing this element\n+                            ++i;\n+                        }\n+                    }\n+                } else if (!visited(mapTx.iterator_to(childEntry))) {\n+                    // Schedule for later processing\n+                    descendants.emplace_back(mapTx.iterator_to(childEntry));\n+                    ++n_to_process;\n                 }\n-            } else if (!descendants.count(childEntry)) {\n-                // Schedule for later processing\n-                stageEntries.insert(childEntry);\n             }\n         }\n-    }\n+    } // release epoch\n+\n+    // remove any descendants that are in setExclude\n+    auto included_upto = std::remove_if(descendants.begin(), descendants.end(),\n+            [&](txiter it) {\n+                return setExclude.count(it->GetTx().GetHash());\n+            });\n+\n+    // if none remain, we don't have to do any updating\n+    if (included_upto == descendants.begin()) return;\n+\n     // descendants now contains all in-mempool descendants of updateIt.\n     // Update and add to cached descendant map\n     int64_t modifySize = 0;\n     CAmount modifyFee = 0;\n     int64_t modifyCount = 0;\n-    for (const CTxMemPoolEntry& descendant : descendants) {\n-        if (!setExclude.count(descendant.GetTx().GetHash())) {\n-            modifySize += descendant.GetTxSize();\n-            modifyFee += descendant.GetModifiedFee();\n-            modifyCount++;\n-            cachedDescendants[updateIt].insert(mapTx.iterator_to(descendant));\n-            // Update ancestor state for each descendant\n-            mapTx.modify(mapTx.iterator_to(descendant), update_ancestor_state(updateIt->GetTxSize(), updateIt->GetModifiedFee(), 1, updateIt->GetSigOpCost()));\n-            // Don't directly remove the transaction here -- doing so would\n-            // invalidate iterators in cachedDescendants. Mark it for removal\n-            // by inserting into descendants_to_remove.\n-            if (descendant.GetCountWithAncestors() > ancestor_count_limit || descendant.GetSizeWithAncestors() > ancestor_size_limit) {\n-                descendants_to_remove.insert(descendant.GetTx().GetHash());\n-            }\n+    // Note: the below contains code which does some hacks to keep memory tight.\n+    // it could be improved in the future to detect if the vector is already tight\n+    // and then directly move it to cachedDescendants. For simplicity, we just\n+    // do a copy for now.\n+\n+    // emplace into a new vector to guarantee we trim memory\n+    const auto& it = cachedDescendants.emplace(std::piecewise_construct,\n+            std::forward_as_tuple(updateIt),\n+            std::forward_as_tuple(descendants.begin(), included_upto));\n+    // swap with descendants to release it early!\n+    std::vector<txiter>().swap(descendants);",
      "path": "src/txmempool.cpp",
      "position": 108,
      "original_position": 108,
      "commit_id": "1eac472976badf52312b52dcb119fa8b50ed408b",
      "original_commit_id": "1eac472976badf52312b52dcb119fa8b50ed408b",
      "in_reply_to_id": 808967963,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> e do allocate (descendants_to_remove.insert), so it's a cautious approach to free it explicitly when it will never be used again than later.",
      "created_at": "2022-02-21T20:42:36Z",
      "updated_at": "2022-02-21T20:42:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24158#discussion_r811418425",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/811418425"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24158"
        }
      },
      "start_line": 184,
      "original_start_line": 184,
      "start_side": "RIGHT",
      "line": 194,
      "original_line": 194,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/811418791",
      "pull_request_review_id": 889088284,
      "id": 811418791,
      "node_id": "PRRC_kwDOABII584wXUSn",
      "diff_hunk": "@@ -120,47 +120,91 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap& cachedDescendan\n                                       const std::set<uint256>& setExclude, std::set<uint256>& descendants_to_remove,\n                                       uint64_t ancestor_size_limit, uint64_t ancestor_count_limit)\n {\n-    CTxMemPoolEntry::Children stageEntries, descendants;\n-    stageEntries = updateIt->GetMemPoolChildrenConst();\n-\n-    while (!stageEntries.empty()) {\n-        const CTxMemPoolEntry& descendant = *stageEntries.begin();\n-        descendants.insert(descendant);\n-        stageEntries.erase(descendant);\n-        const CTxMemPoolEntry::Children& children = descendant.GetMemPoolChildrenConst();\n-        for (const CTxMemPoolEntry& childEntry : children) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(mapTx.iterator_to(childEntry));\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    descendants.insert(*cacheEntry);\n+    const CTxMemPoolEntry::Children& children = updateIt->GetMemPoolChildrenConst();\n+\n+    // initialize to hold all direct children\n+    // children guaranteed to be unique at this point\n+    std::vector<txiter> descendants(children.size());",
      "path": "src/txmempool.cpp",
      "position": 23,
      "original_position": 23,
      "commit_id": "1eac472976badf52312b52dcb119fa8b50ed408b",
      "original_commit_id": "1eac472976badf52312b52dcb119fa8b50ed408b",
      "in_reply_to_id": 808974643,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "this is a good point. But how do we know in advance of iterating what that would be? I figured we do not?",
      "created_at": "2022-02-21T20:43:35Z",
      "updated_at": "2022-02-21T20:43:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24158#discussion_r811418791",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/811418791"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24158"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 127,
      "original_line": 127,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/851008181",
      "pull_request_review_id": 943098911,
      "id": 851008181,
      "node_id": "PRRC_kwDOABII584yuVq1",
      "diff_hunk": "@@ -120,47 +120,91 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap& cachedDescendan\n                                       const std::set<uint256>& setExclude, std::set<uint256>& descendants_to_remove,\n                                       uint64_t ancestor_size_limit, uint64_t ancestor_count_limit)\n {\n-    CTxMemPoolEntry::Children stageEntries, descendants;\n-    stageEntries = updateIt->GetMemPoolChildrenConst();\n-\n-    while (!stageEntries.empty()) {\n-        const CTxMemPoolEntry& descendant = *stageEntries.begin();\n-        descendants.insert(descendant);\n-        stageEntries.erase(descendant);\n-        const CTxMemPoolEntry::Children& children = descendant.GetMemPoolChildrenConst();\n-        for (const CTxMemPoolEntry& childEntry : children) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(mapTx.iterator_to(childEntry));\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    descendants.insert(*cacheEntry);\n+    const CTxMemPoolEntry::Children& children = updateIt->GetMemPoolChildrenConst();\n+\n+    // initialize to hold all direct children\n+    // children guaranteed to be unique at this point\n+    std::vector<txiter> descendants(children.size());\n+    size_t i = 0;\n+    for (const auto& child: children) {\n+        descendants[i] = mapTx.iterator_to(child);\n+        ++i;\n+    }\n+\n+    {\n+        WITH_FRESH_EPOCH(m_epoch);\n+        // visit all children\n+        for (auto& child : descendants) {\n+            visited(child);\n+        }\n+        for (size_t i = 0, n_to_process = descendants.size(); i < n_to_process; ++i) {\n+            const CTxMemPoolEntry& descendant = *descendants[i];\n+            const CTxMemPoolEntry::Children& children = descendant.GetMemPoolChildrenConst();\n+            for (const CTxMemPoolEntry& childEntry : children) {\n+                cacheMap::iterator cacheIt = cachedDescendants.find(mapTx.iterator_to(childEntry));",
      "path": "src/txmempool.cpp",
      "position": 40,
      "original_position": 40,
      "commit_id": "1eac472976badf52312b52dcb119fa8b50ed408b",
      "original_commit_id": "1eac472976badf52312b52dcb119fa8b50ed408b",
      "in_reply_to_id": 808939277,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think it should only be done if `children` is non-empty - this change should also allow getting rid of the current `find` call in the children loop and just add straight to `descendants`. The current logic in master of checking `cachedDescendants` is a bit odd as if there are three txn's (t1 -> t2 -> t3) in a chain that depend on each other sequentially, then the `find` call will only get a \"hit\" when t3 is `updateIt` as it \"skips\" t2",
      "created_at": "2022-04-15T02:22:02Z",
      "updated_at": "2022-04-15T02:22:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24158#discussion_r851008181",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/851008181"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24158"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 144,
      "original_line": 144,
      "side": "RIGHT"
    }
  ]
}