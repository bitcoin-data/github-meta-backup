{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27019",
    "id": 1225476602,
    "node_id": "PR_kwDOABII585JC0n6",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/27019",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/27019.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/27019.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27019",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27019/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27019/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27019/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/a6fc02baae1be4b849653448d0522f99064aa94f",
    "number": 27019,
    "state": "closed",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "bench: Expand mempool eviction benchmarking",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Took the existing benchmark and made is something more exhaustive, targeting eviction of 2500 transactions of different shapes. of dependencies.\r\n\r\nMagic number comes from: 100 children being RBF'd, each bumping 24 parents = 2500 transactions\r\n\r\nTurns out the benchmark `ComplexMemPool` already does something similar, so if we don't want to expand it, maybe just remove it in favor of the existing better benchmark?",
    "labels": [
      {
        "id": 62963516,
        "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
        "name": "Tests",
        "color": "d4c5f9",
        "default": false
      }
    ],
    "created_at": "2023-02-01T20:42:36Z",
    "updated_at": "2023-03-22T14:15:38Z",
    "closed_at": "2023-03-22T14:15:38Z",
    "mergeable_state": "unknown",
    "merge_commit_sha": "13e07ad0339d267e4c0fdbaf0bbff6ef04e9ec24",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "instagibbs:bench_eviction",
      "ref": "bench_eviction",
      "sha": "a6fc02baae1be4b849653448d0522f99064aa94f",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 13910191,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMzkxMDE5MQ==",
        "name": "bitcoin",
        "full_name": "instagibbs/bitcoin",
        "owner": {
          "login": "instagibbs",
          "id": 5767891,
          "node_id": "MDQ6VXNlcjU3Njc4OTE=",
          "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/instagibbs",
          "html_url": "https://github.com/instagibbs",
          "followers_url": "https://api.github.com/users/instagibbs/followers",
          "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
          "organizations_url": "https://api.github.com/users/instagibbs/orgs",
          "repos_url": "https://api.github.com/users/instagibbs/repos",
          "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/instagibbs/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/instagibbs/bitcoin",
        "description": "Bitcoin integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/instagibbs/bitcoin",
        "archive_url": "https://api.github.com/repos/instagibbs/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/instagibbs/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/instagibbs/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/instagibbs/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/instagibbs/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/instagibbs/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/instagibbs/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/instagibbs/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/instagibbs/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/instagibbs/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/instagibbs/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/instagibbs/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/instagibbs/bitcoin/events",
        "forks_url": "https://api.github.com/repos/instagibbs/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/instagibbs/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/instagibbs/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/instagibbs/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/instagibbs/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/instagibbs/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/instagibbs/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/instagibbs/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/instagibbs/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/instagibbs/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/instagibbs/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/instagibbs/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/instagibbs/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/instagibbs/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/instagibbs/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/instagibbs/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:instagibbs/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/instagibbs/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/instagibbs/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/instagibbs/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/instagibbs/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/instagibbs/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/instagibbs/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/instagibbs/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/instagibbs/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/instagibbs/bitcoin/hooks",
        "svn_url": "https://github.com/instagibbs/bitcoin",
        "homepage": "http://www.bitcoin.org",
        "language": "C++",
        "forks_count": 1,
        "stargazers_count": 2,
        "watchers_count": 2,
        "size": 213381,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-05-25T13:43:57Z",
        "created_at": "2013-10-27T20:56:53Z",
        "updated_at": "2022-12-28T23:57:23Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "664500fc71a32d5066db8cb4a19ddc7005a1c9e9",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34325,
        "stargazers_count": 69818,
        "watchers_count": 69818,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 626,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-07T07:29:24Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T06:49:43Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27019"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 79,
    "deletions": 101,
    "changed_files": 1,
    "commits": 1,
    "review_comments": 16,
    "comments": 4
  },
  "events": [
    {
      "event": "commented",
      "id": 1412695691,
      "node_id": "IC_kwDOABII585UNAaL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1412695691",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-01T20:42:38Z",
      "updated_at": "2023-02-01T20:42:38Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\nA summary of reviews will appear here.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27019#issuecomment-1412695691",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27019"
    },
    {
      "event": "renamed",
      "id": 8418354337,
      "node_id": "RTE_lADOABII585dY20pzwAAAAH1xeSh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8418354337",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-02T08:26:51Z",
      "rename": {
        "from": "Expand eviction benchmarking",
        "to": "bench: Expand eviction benchmarking"
      }
    },
    {
      "event": "labeled",
      "id": 8418354730,
      "node_id": "LE_lADOABII585dY20pzwAAAAH1xeYq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8418354730",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-02T08:26:53Z",
      "label": {
        "name": "Tests",
        "color": "d4c5f9"
      }
    },
    {
      "event": "reviewed",
      "id": 1280537976,
      "node_id": "PRR_kwDOABII585MU3V4",
      "url": null,
      "actor": null,
      "commit_id": "1fed1e3b0a0382322e236f3230aa9b3361c424b5",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27019#pullrequestreview-1280537976",
      "submitted_at": "2023-02-02T08:27:39Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27019"
    },
    {
      "event": "comment_deleted",
      "id": 8420043460,
      "node_id": "CDE_lADOABII585dY20pzwAAAAH136rE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8420043460",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-02T11:24:24Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8422050467,
      "node_id": "HRFPE_lADOABII585dY20pzwAAAAH1_kqj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8422050467",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-02-02T14:47:31Z"
    },
    {
      "event": "review_requested",
      "id": 8769962340,
      "node_id": "RRE_lADOABII585dY20pzwAAAAIKuwFk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8769962340",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-16T17:04:13Z",
      "requested_reviewer": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "reviewed",
      "id": 1351144851,
      "node_id": "PRR_kwDOABII585QiNWT",
      "url": null,
      "actor": null,
      "commit_id": "a3a2e82a6eb70cd73723af38fa1a456ab553981d",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Thanks for beefing up this bench! Basically lgtm, a few nits. Would like a bit clearer docs so future people can easily understand what the test is doing.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27019#pullrequestreview-1351144851",
      "submitted_at": "2023-03-21T18:45:11Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27019"
    },
    {
      "event": "commented",
      "id": 1478433249,
      "node_id": "IC_kwDOABII585YHxnh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1478433249",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-21T18:59:59Z",
      "updated_at": "2023-03-21T18:59:59Z",
      "author_association": "MEMBER",
      "body": "Sorry for the drive-by suggestion: from the title, I thought this PR might be about the peer eviction benchmarks. Maybe update the title to s/eviction/mempool eviction/.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27019#issuecomment-1478433249",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27019"
    },
    {
      "event": "renamed",
      "id": 8809305300,
      "node_id": "RTE_lADOABII585dY20pzwAAAAINE1TU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8809305300",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-21T19:00:51Z",
      "rename": {
        "from": "bench: Expand eviction benchmarking",
        "to": "bench: Expand mempool eviction benchmarking"
      }
    },
    {
      "event": "commented",
      "id": 1478434780,
      "node_id": "IC_kwDOABII585YHx_c",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1478434780",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-21T19:01:10Z",
      "updated_at": "2023-03-21T19:01:10Z",
      "author_association": "MEMBER",
      "body": "@jonatack good point, updated",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27019#issuecomment-1478434780",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27019"
    },
    {
      "event": "mentioned",
      "id": 8809307845,
      "node_id": "MEE_lADOABII585dY20pzwAAAAINE17F",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8809307845",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-21T19:01:10Z"
    },
    {
      "event": "subscribed",
      "id": 8809307860,
      "node_id": "SE_lADOABII585dY20pzwAAAAINE17U",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8809307860",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-21T19:01:10Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGE2ZmMwMmJhYWUxYmU0Yjg0OTY1MzQ0OGQwNTIyZjk5MDY0YWE5NGY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a6fc02baae1be4b849653448d0522f99064aa94f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a6fc02baae1be4b849653448d0522f99064aa94f",
      "tree": {
        "sha": "d3eb9043240e0463775f0a295339686d2dac73d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d3eb9043240e0463775f0a295339686d2dac73d1"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7241b936c5b4d004cdbdc7dc4d0b586856f6716b",
          "sha": "7241b936c5b4d004cdbdc7dc4d0b586856f6716b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/7241b936c5b4d004cdbdc7dc4d0b586856f6716b"
        }
      ],
      "message": "Expand eviction benchmarking",
      "committer": {
        "name": "Greg Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2023-03-21T20:04:13Z"
      },
      "author": {
        "name": "Greg Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2023-02-01T19:04:22Z"
      },
      "sha": "a6fc02baae1be4b849653448d0522f99064aa94f"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8809794989,
      "node_id": "HRFPE_lADOABII585dY20pzwAAAAINGs2t",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8809794989",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-21T20:04:28Z"
    },
    {
      "event": "commented",
      "id": 1478511512,
      "node_id": "IC_kwDOABII585YIEuY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1478511512",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-21T20:04:57Z",
      "updated_at": "2023-03-21T20:04:57Z",
      "author_association": "MEMBER",
      "body": "fixups included, squashed",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27019#issuecomment-1478511512",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/27019"
    },
    {
      "event": "reviewed",
      "id": 1352051877,
      "node_id": "PRR_kwDOABII585Qlqyl",
      "url": null,
      "actor": null,
      "commit_id": "a6fc02baae1be4b849653448d0522f99064aa94f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27019#pullrequestreview-1352051877",
      "submitted_at": "2023-03-22T09:26:55Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27019"
    },
    {
      "event": "closed",
      "id": 8817362785,
      "node_id": "CE_lADOABII585dY20pzwAAAAINjkdh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8817362785",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-22T14:15:38Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1094183174",
      "pull_request_review_id": 1280537976,
      "id": 1094183174,
      "node_id": "PRRC_kwDOABII585BN-kG",
      "diff_hunk": "@@ -21,116 +21,65 @@ static void AddTx(const CTransactionRef& tx, const CAmount& nFee, CTxMemPool& po\n         spendsCoinbase, sigOpCost, lp));\n }\n \n-// Right now this is only testing eviction performance in an extremely small\n-// mempool. Code needs to be written to generate a much wider variety of\n-// unique transactions for a more meaningful performance measurement.\n-static void MempoolEviction(benchmark::Bench& bench)\n+void add_parents_child(std::vector<CTransactionRef>& txns, size_t package_size, size_t set_num)\n {\n-    const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n-\n-    CMutableTransaction tx1 = CMutableTransaction();\n-    tx1.vin.resize(1);\n-    tx1.vin[0].scriptSig = CScript() << OP_1;\n-    tx1.vin[0].scriptWitness.stack.push_back({1});\n-    tx1.vout.resize(1);\n-    tx1.vout[0].scriptPubKey = CScript() << OP_1 << OP_EQUAL;\n-    tx1.vout[0].nValue = 10 * COIN;\n+    // N+1 N-input-N-output txns, in a parents-and-child package\n+    // Where the final tx takes an input from all ancestors\n+    const size_t num_puts = std::max(package_size - 1, (size_t)1);\n+    const size_t num_txns = package_size;\n+    for (size_t txn_index=0; txn_index<num_txns; txn_index++) {\n+        CMutableTransaction tx = CMutableTransaction();\n+        tx.vin.resize(num_puts);\n+        tx.vout.resize(num_puts);\n+        for (size_t put_index=0; put_index<num_puts; put_index++) {\n+            tx.vin[put_index].scriptSig = CScript() << CScriptNum(txn_index);\n+            tx.vin[put_index].scriptWitness.stack.push_back({1});\n+            tx.vout[put_index].scriptPubKey = CScript() << CScriptNum(set_num); // Ensures unique txid with set_num\n+            tx.vout[put_index].nValue = txn_index;\n \n-    CMutableTransaction tx2 = CMutableTransaction();\n-    tx2.vin.resize(1);\n-    tx2.vin[0].scriptSig = CScript() << OP_2;\n-    tx2.vin[0].scriptWitness.stack.push_back({2});\n-    tx2.vout.resize(1);\n-    tx2.vout[0].scriptPubKey = CScript() << OP_2 << OP_EQUAL;\n-    tx2.vout[0].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx3 = CMutableTransaction();\n-    tx3.vin.resize(1);\n-    tx3.vin[0].prevout = COutPoint(tx2.GetHash(), 0);\n-    tx3.vin[0].scriptSig = CScript() << OP_2;\n-    tx3.vin[0].scriptWitness.stack.push_back({3});\n-    tx3.vout.resize(1);\n-    tx3.vout[0].scriptPubKey = CScript() << OP_3 << OP_EQUAL;\n-    tx3.vout[0].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx4 = CMutableTransaction();\n-    tx4.vin.resize(2);\n-    tx4.vin[0].prevout.SetNull();\n-    tx4.vin[0].scriptSig = CScript() << OP_4;\n-    tx4.vin[0].scriptWitness.stack.push_back({4});\n-    tx4.vin[1].prevout.SetNull();\n-    tx4.vin[1].scriptSig = CScript() << OP_4;\n-    tx4.vin[1].scriptWitness.stack.push_back({4});\n-    tx4.vout.resize(2);\n-    tx4.vout[0].scriptPubKey = CScript() << OP_4 << OP_EQUAL;\n-    tx4.vout[0].nValue = 10 * COIN;\n-    tx4.vout[1].scriptPubKey = CScript() << OP_4 << OP_EQUAL;\n-    tx4.vout[1].nValue = 10 * COIN;\n+            if (put_index < txns.size()) {\n+                // We spend put_index's txn's in the next available slot for each previous transaction\n+                tx.vin[put_index].prevout = COutPoint(txns[put_index]->GetHash(), put_index + txn_index - 1);",
      "path": "src/bench/mempool_eviction.cpp",
      "position": 27,
      "original_position": 65,
      "commit_id": "a6fc02baae1be4b849653448d0522f99064aa94f",
      "original_commit_id": "1fed1e3b0a0382322e236f3230aa9b3361c424b5",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```\r\nbench/mempool_eviction.cpp:42:105: runtime error: unsigned integer overflow: 0 - 1 cannot be represented in type 'unsigned long'",
      "created_at": "2023-02-02T08:27:38Z",
      "updated_at": "2023-02-02T08:27:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27019#discussion_r1094183174",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1094183174"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27019"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 43,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1094629151",
      "pull_request_review_id": 1281207133,
      "id": 1094629151,
      "node_id": "PRRC_kwDOABII585BPrcf",
      "diff_hunk": "@@ -21,116 +21,65 @@ static void AddTx(const CTransactionRef& tx, const CAmount& nFee, CTxMemPool& po\n         spendsCoinbase, sigOpCost, lp));\n }\n \n-// Right now this is only testing eviction performance in an extremely small\n-// mempool. Code needs to be written to generate a much wider variety of\n-// unique transactions for a more meaningful performance measurement.\n-static void MempoolEviction(benchmark::Bench& bench)\n+void add_parents_child(std::vector<CTransactionRef>& txns, size_t package_size, size_t set_num)\n {\n-    const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n-\n-    CMutableTransaction tx1 = CMutableTransaction();\n-    tx1.vin.resize(1);\n-    tx1.vin[0].scriptSig = CScript() << OP_1;\n-    tx1.vin[0].scriptWitness.stack.push_back({1});\n-    tx1.vout.resize(1);\n-    tx1.vout[0].scriptPubKey = CScript() << OP_1 << OP_EQUAL;\n-    tx1.vout[0].nValue = 10 * COIN;\n+    // N+1 N-input-N-output txns, in a parents-and-child package\n+    // Where the final tx takes an input from all ancestors\n+    const size_t num_puts = std::max(package_size - 1, (size_t)1);\n+    const size_t num_txns = package_size;\n+    for (size_t txn_index=0; txn_index<num_txns; txn_index++) {\n+        CMutableTransaction tx = CMutableTransaction();\n+        tx.vin.resize(num_puts);\n+        tx.vout.resize(num_puts);\n+        for (size_t put_index=0; put_index<num_puts; put_index++) {\n+            tx.vin[put_index].scriptSig = CScript() << CScriptNum(txn_index);\n+            tx.vin[put_index].scriptWitness.stack.push_back({1});\n+            tx.vout[put_index].scriptPubKey = CScript() << CScriptNum(set_num); // Ensures unique txid with set_num\n+            tx.vout[put_index].nValue = txn_index;\n \n-    CMutableTransaction tx2 = CMutableTransaction();\n-    tx2.vin.resize(1);\n-    tx2.vin[0].scriptSig = CScript() << OP_2;\n-    tx2.vin[0].scriptWitness.stack.push_back({2});\n-    tx2.vout.resize(1);\n-    tx2.vout[0].scriptPubKey = CScript() << OP_2 << OP_EQUAL;\n-    tx2.vout[0].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx3 = CMutableTransaction();\n-    tx3.vin.resize(1);\n-    tx3.vin[0].prevout = COutPoint(tx2.GetHash(), 0);\n-    tx3.vin[0].scriptSig = CScript() << OP_2;\n-    tx3.vin[0].scriptWitness.stack.push_back({3});\n-    tx3.vout.resize(1);\n-    tx3.vout[0].scriptPubKey = CScript() << OP_3 << OP_EQUAL;\n-    tx3.vout[0].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx4 = CMutableTransaction();\n-    tx4.vin.resize(2);\n-    tx4.vin[0].prevout.SetNull();\n-    tx4.vin[0].scriptSig = CScript() << OP_4;\n-    tx4.vin[0].scriptWitness.stack.push_back({4});\n-    tx4.vin[1].prevout.SetNull();\n-    tx4.vin[1].scriptSig = CScript() << OP_4;\n-    tx4.vin[1].scriptWitness.stack.push_back({4});\n-    tx4.vout.resize(2);\n-    tx4.vout[0].scriptPubKey = CScript() << OP_4 << OP_EQUAL;\n-    tx4.vout[0].nValue = 10 * COIN;\n-    tx4.vout[1].scriptPubKey = CScript() << OP_4 << OP_EQUAL;\n-    tx4.vout[1].nValue = 10 * COIN;\n+            if (put_index < txns.size()) {\n+                // We spend put_index's txn's in the next available slot for each previous transaction\n+                tx.vin[put_index].prevout = COutPoint(txns[put_index]->GetHash(), put_index + txn_index - 1);",
      "path": "src/bench/mempool_eviction.cpp",
      "position": 27,
      "original_position": 65,
      "commit_id": "a6fc02baae1be4b849653448d0522f99064aa94f",
      "original_commit_id": "1fed1e3b0a0382322e236f3230aa9b3361c424b5",
      "in_reply_to_id": 1094183174,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "found the issue, thanks",
      "created_at": "2023-02-02T14:47:40Z",
      "updated_at": "2023-02-02T14:47:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27019#discussion_r1094629151",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1094629151"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27019"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 43,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1143826570",
      "pull_request_review_id": 1351144851,
      "id": 1143826570,
      "node_id": "PRRC_kwDOABII585ELWiK",
      "diff_hunk": "@@ -21,116 +21,96 @@ static void AddTx(const CTransactionRef& tx, const CAmount& nFee, CTxMemPool& po\n         spendsCoinbase, sigOpCost, lp));\n }\n \n-// Right now this is only testing eviction performance in an extremely small\n-// mempool. Code needs to be written to generate a much wider variety of\n-// unique transactions for a more meaningful performance measurement.\n-static void MempoolEviction(benchmark::Bench& bench)\n+void add_parents_child(std::vector<CTransactionRef>& txns, size_t package_size, size_t set_num)\n+{\n+    // N+1 N-input-N-output txns, in a parents-and-child package\n+    // Where the final tx takes an input from all ancestors\n+    const size_t num_puts = std::max(package_size - 1, (size_t)1);\n+    const size_t num_txns = package_size;\n+    for (size_t txn_index=0; txn_index<num_txns; txn_index++) {\n+        CMutableTransaction tx = CMutableTransaction();\n+        tx.vin.resize(num_puts);\n+        tx.vout.resize(num_puts);\n+        for (size_t put_index=0; put_index<num_puts; put_index++) {\n+            tx.vin[put_index].scriptSig = CScript() << CScriptNum(txn_index);\n+            tx.vin[put_index].scriptWitness.stack.push_back({1});\n+            tx.vout[put_index].scriptPubKey = CScript() << CScriptNum(set_num); // Ensures unique txid with set_num\n+            tx.vout[put_index].nValue = txn_index;\n+\n+            if (put_index < txn_index) {\n+                // We spend put_index's txn's in the next available slot for each previous transaction\n+                assert(put_index + txn_index >= 1);\n+                tx.vin[put_index].prevout = COutPoint(txns[put_index]->GetHash(), put_index + txn_index - 1);\n+            }\n+        }\n+        txns.push_back(MakeTransactionRef(tx));\n+    }\n+}\n+\n+static void MempoolEvictionInner(benchmark::Bench& bench, size_t num_packages, size_t package_size)\n {\n     const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n \n-    CMutableTransaction tx1 = CMutableTransaction();\n-    tx1.vin.resize(1);\n-    tx1.vin[0].scriptSig = CScript() << OP_1;\n-    tx1.vin[0].scriptWitness.stack.push_back({1});\n-    tx1.vout.resize(1);\n-    tx1.vout[0].scriptPubKey = CScript() << OP_1 << OP_EQUAL;\n-    tx1.vout[0].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx2 = CMutableTransaction();\n-    tx2.vin.resize(1);\n-    tx2.vin[0].scriptSig = CScript() << OP_2;\n-    tx2.vin[0].scriptWitness.stack.push_back({2});\n-    tx2.vout.resize(1);\n-    tx2.vout[0].scriptPubKey = CScript() << OP_2 << OP_EQUAL;\n-    tx2.vout[0].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx3 = CMutableTransaction();\n-    tx3.vin.resize(1);\n-    tx3.vin[0].prevout = COutPoint(tx2.GetHash(), 0);\n-    tx3.vin[0].scriptSig = CScript() << OP_2;\n-    tx3.vin[0].scriptWitness.stack.push_back({3});\n-    tx3.vout.resize(1);\n-    tx3.vout[0].scriptPubKey = CScript() << OP_3 << OP_EQUAL;\n-    tx3.vout[0].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx4 = CMutableTransaction();\n-    tx4.vin.resize(2);\n-    tx4.vin[0].prevout.SetNull();\n-    tx4.vin[0].scriptSig = CScript() << OP_4;\n-    tx4.vin[0].scriptWitness.stack.push_back({4});\n-    tx4.vin[1].prevout.SetNull();\n-    tx4.vin[1].scriptSig = CScript() << OP_4;\n-    tx4.vin[1].scriptWitness.stack.push_back({4});\n-    tx4.vout.resize(2);\n-    tx4.vout[0].scriptPubKey = CScript() << OP_4 << OP_EQUAL;\n-    tx4.vout[0].nValue = 10 * COIN;\n-    tx4.vout[1].scriptPubKey = CScript() << OP_4 << OP_EQUAL;\n-    tx4.vout[1].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx5 = CMutableTransaction();\n-    tx5.vin.resize(2);\n-    tx5.vin[0].prevout = COutPoint(tx4.GetHash(), 0);\n-    tx5.vin[0].scriptSig = CScript() << OP_4;\n-    tx5.vin[0].scriptWitness.stack.push_back({4});\n-    tx5.vin[1].prevout.SetNull();\n-    tx5.vin[1].scriptSig = CScript() << OP_5;\n-    tx5.vin[1].scriptWitness.stack.push_back({5});\n-    tx5.vout.resize(2);\n-    tx5.vout[0].scriptPubKey = CScript() << OP_5 << OP_EQUAL;\n-    tx5.vout[0].nValue = 10 * COIN;\n-    tx5.vout[1].scriptPubKey = CScript() << OP_5 << OP_EQUAL;\n-    tx5.vout[1].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx6 = CMutableTransaction();\n-    tx6.vin.resize(2);\n-    tx6.vin[0].prevout = COutPoint(tx4.GetHash(), 1);\n-    tx6.vin[0].scriptSig = CScript() << OP_4;\n-    tx6.vin[0].scriptWitness.stack.push_back({4});\n-    tx6.vin[1].prevout.SetNull();\n-    tx6.vin[1].scriptSig = CScript() << OP_6;\n-    tx6.vin[1].scriptWitness.stack.push_back({6});\n-    tx6.vout.resize(2);\n-    tx6.vout[0].scriptPubKey = CScript() << OP_6 << OP_EQUAL;\n-    tx6.vout[0].nValue = 10 * COIN;\n-    tx6.vout[1].scriptPubKey = CScript() << OP_6 << OP_EQUAL;\n-    tx6.vout[1].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx7 = CMutableTransaction();\n-    tx7.vin.resize(2);\n-    tx7.vin[0].prevout = COutPoint(tx5.GetHash(), 0);\n-    tx7.vin[0].scriptSig = CScript() << OP_5;\n-    tx7.vin[0].scriptWitness.stack.push_back({5});\n-    tx7.vin[1].prevout = COutPoint(tx6.GetHash(), 0);\n-    tx7.vin[1].scriptSig = CScript() << OP_6;\n-    tx7.vin[1].scriptWitness.stack.push_back({6});\n-    tx7.vout.resize(2);\n-    tx7.vout[0].scriptPubKey = CScript() << OP_7 << OP_EQUAL;\n-    tx7.vout[0].nValue = 10 * COIN;\n-    tx7.vout[1].scriptPubKey = CScript() << OP_7 << OP_EQUAL;\n-    tx7.vout[1].nValue = 10 * COIN;\n+    std::vector<CTransactionRef> txns;\n+\n+    for (size_t i=0; i<num_packages; i++) {\n+        add_parents_child(txns, package_size, i);\n+    }\n \n+    /* Now we're ready */\n     CTxMemPool& pool = *Assert(testing_setup->m_node.mempool);\n     LOCK2(cs_main, pool.cs);\n-    // Create transaction references outside the \"hot loop\"\n-    const CTransactionRef tx1_r{MakeTransactionRef(tx1)};\n-    const CTransactionRef tx2_r{MakeTransactionRef(tx2)};\n-    const CTransactionRef tx3_r{MakeTransactionRef(tx3)};\n-    const CTransactionRef tx4_r{MakeTransactionRef(tx4)};\n-    const CTransactionRef tx5_r{MakeTransactionRef(tx5)};\n-    const CTransactionRef tx6_r{MakeTransactionRef(tx6)};\n-    const CTransactionRef tx7_r{MakeTransactionRef(tx7)};\n+    bench.run([&]() NO_THREAD_SAFETY_ANALYSIS {\n+        for (size_t i=0; i<txns.size(); i++) {\n+            // Monotonically decreasing fees\n+            AddTx(txns[i], (txns.size() - i)*1000LL, pool);\n+        }\n+        assert(pool.size() == txns.size());\n+        pool.TrimToSize(pool.DynamicMemoryUsage() - 1);\n+        assert(pool.size() == txns.size() - 1);\n+        pool.TrimToSize(GetVirtualTransactionSize(*txns[0]));",
      "path": "src/bench/mempool_eviction.cpp",
      "position": null,
      "original_position": 143,
      "commit_id": "a6fc02baae1be4b849653448d0522f99064aa94f",
      "original_commit_id": "a3a2e82a6eb70cd73723af38fa1a456ab553981d",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why this size exactly - the first tx isn't guaranteed to be the smallest or anything? Why not just 0?",
      "created_at": "2023-03-21T18:19:47Z",
      "updated_at": "2023-03-21T18:45:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27019#discussion_r1143826570",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1143826570"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27019"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 71,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1143839532",
      "pull_request_review_id": 1351144851,
      "id": 1143839532,
      "node_id": "PRRC_kwDOABII585ELZss",
      "diff_hunk": "@@ -21,116 +21,96 @@ static void AddTx(const CTransactionRef& tx, const CAmount& nFee, CTxMemPool& po\n         spendsCoinbase, sigOpCost, lp));\n }\n \n-// Right now this is only testing eviction performance in an extremely small\n-// mempool. Code needs to be written to generate a much wider variety of\n-// unique transactions for a more meaningful performance measurement.\n-static void MempoolEviction(benchmark::Bench& bench)\n+void add_parents_child(std::vector<CTransactionRef>& txns, size_t package_size, size_t set_num)\n+{\n+    // N+1 N-input-N-output txns, in a parents-and-child package\n+    // Where the final tx takes an input from all ancestors",
      "path": "src/bench/mempool_eviction.cpp",
      "position": null,
      "original_position": 11,
      "commit_id": "a6fc02baae1be4b849653448d0522f99064aa94f",
      "original_commit_id": "a3a2e82a6eb70cd73723af38fa1a456ab553981d",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I could be reading this code wrong, but isn't each tx taking inputs from each tx before it? It's still parents-and-child technically but it's also a chain.\r\n\r\n```suggestion\r\n    // Where each tx takes an input from all prior txns\r\n```",
      "created_at": "2023-03-21T18:29:45Z",
      "updated_at": "2023-03-21T18:45:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27019#discussion_r1143839532",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1143839532"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27019"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1143841355",
      "pull_request_review_id": 1351144851,
      "id": 1143841355,
      "node_id": "PRRC_kwDOABII585ELaJL",
      "diff_hunk": "@@ -21,116 +21,96 @@ static void AddTx(const CTransactionRef& tx, const CAmount& nFee, CTxMemPool& po\n         spendsCoinbase, sigOpCost, lp));\n }\n \n-// Right now this is only testing eviction performance in an extremely small\n-// mempool. Code needs to be written to generate a much wider variety of\n-// unique transactions for a more meaningful performance measurement.\n-static void MempoolEviction(benchmark::Bench& bench)\n+void add_parents_child(std::vector<CTransactionRef>& txns, size_t package_size, size_t set_num)\n+{\n+    // N+1 N-input-N-output txns, in a parents-and-child package\n+    // Where the final tx takes an input from all ancestors\n+    const size_t num_puts = std::max(package_size - 1, (size_t)1);\n+    const size_t num_txns = package_size;\n+    for (size_t txn_index=0; txn_index<num_txns; txn_index++) {\n+        CMutableTransaction tx = CMutableTransaction();\n+        tx.vin.resize(num_puts);\n+        tx.vout.resize(num_puts);\n+        for (size_t put_index=0; put_index<num_puts; put_index++) {\n+            tx.vin[put_index].scriptSig = CScript() << CScriptNum(txn_index);\n+            tx.vin[put_index].scriptWitness.stack.push_back({1});\n+            tx.vout[put_index].scriptPubKey = CScript() << CScriptNum(set_num); // Ensures unique txid with set_num\n+            tx.vout[put_index].nValue = txn_index;\n+\n+            if (put_index < txn_index) {\n+                // We spend put_index's txn's in the next available slot for each previous transaction\n+                assert(put_index + txn_index >= 1);\n+                tx.vin[put_index].prevout = COutPoint(txns[put_index]->GetHash(), put_index + txn_index - 1);\n+            }\n+        }\n+        txns.push_back(MakeTransactionRef(tx));\n+    }\n+}\n+\n+static void MempoolEvictionInner(benchmark::Bench& bench, size_t num_packages, size_t package_size)\n {\n     const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n \n-    CMutableTransaction tx1 = CMutableTransaction();\n-    tx1.vin.resize(1);\n-    tx1.vin[0].scriptSig = CScript() << OP_1;\n-    tx1.vin[0].scriptWitness.stack.push_back({1});\n-    tx1.vout.resize(1);\n-    tx1.vout[0].scriptPubKey = CScript() << OP_1 << OP_EQUAL;\n-    tx1.vout[0].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx2 = CMutableTransaction();\n-    tx2.vin.resize(1);\n-    tx2.vin[0].scriptSig = CScript() << OP_2;\n-    tx2.vin[0].scriptWitness.stack.push_back({2});\n-    tx2.vout.resize(1);\n-    tx2.vout[0].scriptPubKey = CScript() << OP_2 << OP_EQUAL;\n-    tx2.vout[0].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx3 = CMutableTransaction();\n-    tx3.vin.resize(1);\n-    tx3.vin[0].prevout = COutPoint(tx2.GetHash(), 0);\n-    tx3.vin[0].scriptSig = CScript() << OP_2;\n-    tx3.vin[0].scriptWitness.stack.push_back({3});\n-    tx3.vout.resize(1);\n-    tx3.vout[0].scriptPubKey = CScript() << OP_3 << OP_EQUAL;\n-    tx3.vout[0].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx4 = CMutableTransaction();\n-    tx4.vin.resize(2);\n-    tx4.vin[0].prevout.SetNull();\n-    tx4.vin[0].scriptSig = CScript() << OP_4;\n-    tx4.vin[0].scriptWitness.stack.push_back({4});\n-    tx4.vin[1].prevout.SetNull();\n-    tx4.vin[1].scriptSig = CScript() << OP_4;\n-    tx4.vin[1].scriptWitness.stack.push_back({4});\n-    tx4.vout.resize(2);\n-    tx4.vout[0].scriptPubKey = CScript() << OP_4 << OP_EQUAL;\n-    tx4.vout[0].nValue = 10 * COIN;\n-    tx4.vout[1].scriptPubKey = CScript() << OP_4 << OP_EQUAL;\n-    tx4.vout[1].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx5 = CMutableTransaction();\n-    tx5.vin.resize(2);\n-    tx5.vin[0].prevout = COutPoint(tx4.GetHash(), 0);\n-    tx5.vin[0].scriptSig = CScript() << OP_4;\n-    tx5.vin[0].scriptWitness.stack.push_back({4});\n-    tx5.vin[1].prevout.SetNull();\n-    tx5.vin[1].scriptSig = CScript() << OP_5;\n-    tx5.vin[1].scriptWitness.stack.push_back({5});\n-    tx5.vout.resize(2);\n-    tx5.vout[0].scriptPubKey = CScript() << OP_5 << OP_EQUAL;\n-    tx5.vout[0].nValue = 10 * COIN;\n-    tx5.vout[1].scriptPubKey = CScript() << OP_5 << OP_EQUAL;\n-    tx5.vout[1].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx6 = CMutableTransaction();\n-    tx6.vin.resize(2);\n-    tx6.vin[0].prevout = COutPoint(tx4.GetHash(), 1);\n-    tx6.vin[0].scriptSig = CScript() << OP_4;\n-    tx6.vin[0].scriptWitness.stack.push_back({4});\n-    tx6.vin[1].prevout.SetNull();\n-    tx6.vin[1].scriptSig = CScript() << OP_6;\n-    tx6.vin[1].scriptWitness.stack.push_back({6});\n-    tx6.vout.resize(2);\n-    tx6.vout[0].scriptPubKey = CScript() << OP_6 << OP_EQUAL;\n-    tx6.vout[0].nValue = 10 * COIN;\n-    tx6.vout[1].scriptPubKey = CScript() << OP_6 << OP_EQUAL;\n-    tx6.vout[1].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx7 = CMutableTransaction();\n-    tx7.vin.resize(2);\n-    tx7.vin[0].prevout = COutPoint(tx5.GetHash(), 0);\n-    tx7.vin[0].scriptSig = CScript() << OP_5;\n-    tx7.vin[0].scriptWitness.stack.push_back({5});\n-    tx7.vin[1].prevout = COutPoint(tx6.GetHash(), 0);\n-    tx7.vin[1].scriptSig = CScript() << OP_6;\n-    tx7.vin[1].scriptWitness.stack.push_back({6});\n-    tx7.vout.resize(2);\n-    tx7.vout[0].scriptPubKey = CScript() << OP_7 << OP_EQUAL;\n-    tx7.vout[0].nValue = 10 * COIN;\n-    tx7.vout[1].scriptPubKey = CScript() << OP_7 << OP_EQUAL;\n-    tx7.vout[1].nValue = 10 * COIN;\n+    std::vector<CTransactionRef> txns;\n+\n+    for (size_t i=0; i<num_packages; i++) {\n+        add_parents_child(txns, package_size, i);\n+    }\n \n+    /* Now we're ready */\n     CTxMemPool& pool = *Assert(testing_setup->m_node.mempool);\n     LOCK2(cs_main, pool.cs);\n-    // Create transaction references outside the \"hot loop\"\n-    const CTransactionRef tx1_r{MakeTransactionRef(tx1)};\n-    const CTransactionRef tx2_r{MakeTransactionRef(tx2)};\n-    const CTransactionRef tx3_r{MakeTransactionRef(tx3)};\n-    const CTransactionRef tx4_r{MakeTransactionRef(tx4)};\n-    const CTransactionRef tx5_r{MakeTransactionRef(tx5)};\n-    const CTransactionRef tx6_r{MakeTransactionRef(tx6)};\n-    const CTransactionRef tx7_r{MakeTransactionRef(tx7)};\n+    bench.run([&]() NO_THREAD_SAFETY_ANALYSIS {\n+        for (size_t i=0; i<txns.size(); i++) {\n+            // Monotonically decreasing fees\n+            AddTx(txns[i], (txns.size() - i)*1000LL, pool);\n+        }\n+        assert(pool.size() == txns.size());\n+        pool.TrimToSize(pool.DynamicMemoryUsage() - 1);\n+        assert(pool.size() == txns.size() - 1);\n+        pool.TrimToSize(GetVirtualTransactionSize(*txns[0]));\n+        assert(pool.size() == 0);\n+    });\n+}\n+\n+static void MempoolConstructionInner(benchmark::Bench& bench, size_t num_packages, size_t package_size)\n+{\n+    const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n \n+    std::vector<CTransactionRef> txns;\n+\n+    for (size_t i=0; i<num_packages; i++) {\n+        add_parents_child(txns, package_size, i);\n+    }\n+\n+    /* Now we're ready */",
      "path": "src/bench/mempool_eviction.cpp",
      "position": 157,
      "original_position": 158,
      "commit_id": "a6fc02baae1be4b849653448d0522f99064aa94f",
      "original_commit_id": "a3a2e82a6eb70cd73723af38fa1a456ab553981d",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Er, what does this comment mean?",
      "created_at": "2023-03-21T18:31:38Z",
      "updated_at": "2023-03-21T18:45:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27019#discussion_r1143841355",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1143841355"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27019"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 85,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1143849591",
      "pull_request_review_id": 1351144851,
      "id": 1143849591,
      "node_id": "PRRC_kwDOABII585ELcJ3",
      "diff_hunk": "@@ -21,116 +21,96 @@ static void AddTx(const CTransactionRef& tx, const CAmount& nFee, CTxMemPool& po\n         spendsCoinbase, sigOpCost, lp));\n }\n \n-// Right now this is only testing eviction performance in an extremely small\n-// mempool. Code needs to be written to generate a much wider variety of\n-// unique transactions for a more meaningful performance measurement.\n-static void MempoolEviction(benchmark::Bench& bench)\n+void add_parents_child(std::vector<CTransactionRef>& txns, size_t package_size, size_t set_num)\n+{\n+    // N+1 N-input-N-output txns, in a parents-and-child package\n+    // Where the final tx takes an input from all ancestors\n+    const size_t num_puts = std::max(package_size - 1, (size_t)1);\n+    const size_t num_txns = package_size;\n+    for (size_t txn_index=0; txn_index<num_txns; txn_index++) {\n+        CMutableTransaction tx = CMutableTransaction();\n+        tx.vin.resize(num_puts);\n+        tx.vout.resize(num_puts);\n+        for (size_t put_index=0; put_index<num_puts; put_index++) {\n+            tx.vin[put_index].scriptSig = CScript() << CScriptNum(txn_index);\n+            tx.vin[put_index].scriptWitness.stack.push_back({1});\n+            tx.vout[put_index].scriptPubKey = CScript() << CScriptNum(set_num); // Ensures unique txid with set_num\n+            tx.vout[put_index].nValue = txn_index;\n+\n+            if (put_index < txn_index) {\n+                // We spend put_index's txn's in the next available slot for each previous transaction\n+                assert(put_index + txn_index >= 1);\n+                tx.vin[put_index].prevout = COutPoint(txns[put_index]->GetHash(), put_index + txn_index - 1);\n+            }\n+        }\n+        txns.push_back(MakeTransactionRef(tx));\n+    }\n+}\n+\n+static void MempoolEvictionInner(benchmark::Bench& bench, size_t num_packages, size_t package_size)\n {\n     const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n \n-    CMutableTransaction tx1 = CMutableTransaction();\n-    tx1.vin.resize(1);\n-    tx1.vin[0].scriptSig = CScript() << OP_1;\n-    tx1.vin[0].scriptWitness.stack.push_back({1});\n-    tx1.vout.resize(1);\n-    tx1.vout[0].scriptPubKey = CScript() << OP_1 << OP_EQUAL;\n-    tx1.vout[0].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx2 = CMutableTransaction();\n-    tx2.vin.resize(1);\n-    tx2.vin[0].scriptSig = CScript() << OP_2;\n-    tx2.vin[0].scriptWitness.stack.push_back({2});\n-    tx2.vout.resize(1);\n-    tx2.vout[0].scriptPubKey = CScript() << OP_2 << OP_EQUAL;\n-    tx2.vout[0].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx3 = CMutableTransaction();\n-    tx3.vin.resize(1);\n-    tx3.vin[0].prevout = COutPoint(tx2.GetHash(), 0);\n-    tx3.vin[0].scriptSig = CScript() << OP_2;\n-    tx3.vin[0].scriptWitness.stack.push_back({3});\n-    tx3.vout.resize(1);\n-    tx3.vout[0].scriptPubKey = CScript() << OP_3 << OP_EQUAL;\n-    tx3.vout[0].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx4 = CMutableTransaction();\n-    tx4.vin.resize(2);\n-    tx4.vin[0].prevout.SetNull();\n-    tx4.vin[0].scriptSig = CScript() << OP_4;\n-    tx4.vin[0].scriptWitness.stack.push_back({4});\n-    tx4.vin[1].prevout.SetNull();\n-    tx4.vin[1].scriptSig = CScript() << OP_4;\n-    tx4.vin[1].scriptWitness.stack.push_back({4});\n-    tx4.vout.resize(2);\n-    tx4.vout[0].scriptPubKey = CScript() << OP_4 << OP_EQUAL;\n-    tx4.vout[0].nValue = 10 * COIN;\n-    tx4.vout[1].scriptPubKey = CScript() << OP_4 << OP_EQUAL;\n-    tx4.vout[1].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx5 = CMutableTransaction();\n-    tx5.vin.resize(2);\n-    tx5.vin[0].prevout = COutPoint(tx4.GetHash(), 0);\n-    tx5.vin[0].scriptSig = CScript() << OP_4;\n-    tx5.vin[0].scriptWitness.stack.push_back({4});\n-    tx5.vin[1].prevout.SetNull();\n-    tx5.vin[1].scriptSig = CScript() << OP_5;\n-    tx5.vin[1].scriptWitness.stack.push_back({5});\n-    tx5.vout.resize(2);\n-    tx5.vout[0].scriptPubKey = CScript() << OP_5 << OP_EQUAL;\n-    tx5.vout[0].nValue = 10 * COIN;\n-    tx5.vout[1].scriptPubKey = CScript() << OP_5 << OP_EQUAL;\n-    tx5.vout[1].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx6 = CMutableTransaction();\n-    tx6.vin.resize(2);\n-    tx6.vin[0].prevout = COutPoint(tx4.GetHash(), 1);\n-    tx6.vin[0].scriptSig = CScript() << OP_4;\n-    tx6.vin[0].scriptWitness.stack.push_back({4});\n-    tx6.vin[1].prevout.SetNull();\n-    tx6.vin[1].scriptSig = CScript() << OP_6;\n-    tx6.vin[1].scriptWitness.stack.push_back({6});\n-    tx6.vout.resize(2);\n-    tx6.vout[0].scriptPubKey = CScript() << OP_6 << OP_EQUAL;\n-    tx6.vout[0].nValue = 10 * COIN;\n-    tx6.vout[1].scriptPubKey = CScript() << OP_6 << OP_EQUAL;\n-    tx6.vout[1].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx7 = CMutableTransaction();\n-    tx7.vin.resize(2);\n-    tx7.vin[0].prevout = COutPoint(tx5.GetHash(), 0);\n-    tx7.vin[0].scriptSig = CScript() << OP_5;\n-    tx7.vin[0].scriptWitness.stack.push_back({5});\n-    tx7.vin[1].prevout = COutPoint(tx6.GetHash(), 0);\n-    tx7.vin[1].scriptSig = CScript() << OP_6;\n-    tx7.vin[1].scriptWitness.stack.push_back({6});\n-    tx7.vout.resize(2);\n-    tx7.vout[0].scriptPubKey = CScript() << OP_7 << OP_EQUAL;\n-    tx7.vout[0].nValue = 10 * COIN;\n-    tx7.vout[1].scriptPubKey = CScript() << OP_7 << OP_EQUAL;\n-    tx7.vout[1].nValue = 10 * COIN;\n+    std::vector<CTransactionRef> txns;\n+\n+    for (size_t i=0; i<num_packages; i++) {\n+        add_parents_child(txns, package_size, i);\n+    }\n \n+    /* Now we're ready */\n     CTxMemPool& pool = *Assert(testing_setup->m_node.mempool);\n     LOCK2(cs_main, pool.cs);\n-    // Create transaction references outside the \"hot loop\"\n-    const CTransactionRef tx1_r{MakeTransactionRef(tx1)};\n-    const CTransactionRef tx2_r{MakeTransactionRef(tx2)};\n-    const CTransactionRef tx3_r{MakeTransactionRef(tx3)};\n-    const CTransactionRef tx4_r{MakeTransactionRef(tx4)};\n-    const CTransactionRef tx5_r{MakeTransactionRef(tx5)};\n-    const CTransactionRef tx6_r{MakeTransactionRef(tx6)};\n-    const CTransactionRef tx7_r{MakeTransactionRef(tx7)};\n+    bench.run([&]() NO_THREAD_SAFETY_ANALYSIS {\n+        for (size_t i=0; i<txns.size(); i++) {\n+            // Monotonically decreasing fees\n+            AddTx(txns[i], (txns.size() - i)*1000LL, pool);\n+        }\n+        assert(pool.size() == txns.size());\n+        pool.TrimToSize(pool.DynamicMemoryUsage() - 1);\n+        assert(pool.size() == txns.size() - 1);\n+        pool.TrimToSize(GetVirtualTransactionSize(*txns[0]));\n+        assert(pool.size() == 0);\n+    });\n+}\n+\n+static void MempoolConstructionInner(benchmark::Bench& bench, size_t num_packages, size_t package_size)\n+{\n+    const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n \n+    std::vector<CTransactionRef> txns;\n+\n+    for (size_t i=0; i<num_packages; i++) {\n+        add_parents_child(txns, package_size, i);\n+    }\n+\n+    /* Now we're ready */\n+    CTxMemPool& pool = *Assert(testing_setup->m_node.mempool);\n+    LOCK2(cs_main, pool.cs);\n     bench.run([&]() NO_THREAD_SAFETY_ANALYSIS {\n-        AddTx(tx1_r, 10000LL, pool);\n-        AddTx(tx2_r, 5000LL, pool);\n-        AddTx(tx3_r, 20000LL, pool);\n-        AddTx(tx4_r, 7000LL, pool);\n-        AddTx(tx5_r, 1000LL, pool);\n-        AddTx(tx6_r, 1100LL, pool);\n-        AddTx(tx7_r, 9000LL, pool);\n-        pool.TrimToSize(pool.DynamicMemoryUsage() * 3 / 4);\n-        pool.TrimToSize(GetVirtualTransactionSize(*tx1_r));\n+        for (size_t i=0; i<txns.size(); i++) {\n+            // Monotonically decreasing fees",
      "path": "src/bench/mempool_eviction.cpp",
      "position": null,
      "original_position": 172,
      "commit_id": "a6fc02baae1be4b849653448d0522f99064aa94f",
      "original_commit_id": "a3a2e82a6eb70cd73723af38fa1a456ab553981d",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why? I don't think it has any impact on the construction performance?",
      "created_at": "2023-03-21T18:39:50Z",
      "updated_at": "2023-03-21T18:45:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27019#discussion_r1143849591",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1143849591"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27019"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 91,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1143851697",
      "pull_request_review_id": 1351144851,
      "id": 1143851697,
      "node_id": "PRRC_kwDOABII585ELcqx",
      "diff_hunk": "@@ -21,116 +21,96 @@ static void AddTx(const CTransactionRef& tx, const CAmount& nFee, CTxMemPool& po\n         spendsCoinbase, sigOpCost, lp));\n }\n \n-// Right now this is only testing eviction performance in an extremely small\n-// mempool. Code needs to be written to generate a much wider variety of\n-// unique transactions for a more meaningful performance measurement.\n-static void MempoolEviction(benchmark::Bench& bench)\n+void add_parents_child(std::vector<CTransactionRef>& txns, size_t package_size, size_t set_num)\n+{\n+    // N+1 N-input-N-output txns, in a parents-and-child package\n+    // Where the final tx takes an input from all ancestors\n+    const size_t num_puts = std::max(package_size - 1, (size_t)1);\n+    const size_t num_txns = package_size;\n+    for (size_t txn_index=0; txn_index<num_txns; txn_index++) {\n+        CMutableTransaction tx = CMutableTransaction();\n+        tx.vin.resize(num_puts);\n+        tx.vout.resize(num_puts);\n+        for (size_t put_index=0; put_index<num_puts; put_index++) {\n+            tx.vin[put_index].scriptSig = CScript() << CScriptNum(txn_index);\n+            tx.vin[put_index].scriptWitness.stack.push_back({1});\n+            tx.vout[put_index].scriptPubKey = CScript() << CScriptNum(set_num); // Ensures unique txid with set_num\n+            tx.vout[put_index].nValue = txn_index;\n+\n+            if (put_index < txn_index) {\n+                // We spend put_index's txn's in the next available slot for each previous transaction\n+                assert(put_index + txn_index >= 1);\n+                tx.vin[put_index].prevout = COutPoint(txns[put_index]->GetHash(), put_index + txn_index - 1);\n+            }\n+        }\n+        txns.push_back(MakeTransactionRef(tx));\n+    }\n+}\n+\n+static void MempoolEvictionInner(benchmark::Bench& bench, size_t num_packages, size_t package_size)\n {\n     const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n \n-    CMutableTransaction tx1 = CMutableTransaction();\n-    tx1.vin.resize(1);\n-    tx1.vin[0].scriptSig = CScript() << OP_1;\n-    tx1.vin[0].scriptWitness.stack.push_back({1});\n-    tx1.vout.resize(1);\n-    tx1.vout[0].scriptPubKey = CScript() << OP_1 << OP_EQUAL;\n-    tx1.vout[0].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx2 = CMutableTransaction();\n-    tx2.vin.resize(1);\n-    tx2.vin[0].scriptSig = CScript() << OP_2;\n-    tx2.vin[0].scriptWitness.stack.push_back({2});\n-    tx2.vout.resize(1);\n-    tx2.vout[0].scriptPubKey = CScript() << OP_2 << OP_EQUAL;\n-    tx2.vout[0].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx3 = CMutableTransaction();\n-    tx3.vin.resize(1);\n-    tx3.vin[0].prevout = COutPoint(tx2.GetHash(), 0);\n-    tx3.vin[0].scriptSig = CScript() << OP_2;\n-    tx3.vin[0].scriptWitness.stack.push_back({3});\n-    tx3.vout.resize(1);\n-    tx3.vout[0].scriptPubKey = CScript() << OP_3 << OP_EQUAL;\n-    tx3.vout[0].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx4 = CMutableTransaction();\n-    tx4.vin.resize(2);\n-    tx4.vin[0].prevout.SetNull();\n-    tx4.vin[0].scriptSig = CScript() << OP_4;\n-    tx4.vin[0].scriptWitness.stack.push_back({4});\n-    tx4.vin[1].prevout.SetNull();\n-    tx4.vin[1].scriptSig = CScript() << OP_4;\n-    tx4.vin[1].scriptWitness.stack.push_back({4});\n-    tx4.vout.resize(2);\n-    tx4.vout[0].scriptPubKey = CScript() << OP_4 << OP_EQUAL;\n-    tx4.vout[0].nValue = 10 * COIN;\n-    tx4.vout[1].scriptPubKey = CScript() << OP_4 << OP_EQUAL;\n-    tx4.vout[1].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx5 = CMutableTransaction();\n-    tx5.vin.resize(2);\n-    tx5.vin[0].prevout = COutPoint(tx4.GetHash(), 0);\n-    tx5.vin[0].scriptSig = CScript() << OP_4;\n-    tx5.vin[0].scriptWitness.stack.push_back({4});\n-    tx5.vin[1].prevout.SetNull();\n-    tx5.vin[1].scriptSig = CScript() << OP_5;\n-    tx5.vin[1].scriptWitness.stack.push_back({5});\n-    tx5.vout.resize(2);\n-    tx5.vout[0].scriptPubKey = CScript() << OP_5 << OP_EQUAL;\n-    tx5.vout[0].nValue = 10 * COIN;\n-    tx5.vout[1].scriptPubKey = CScript() << OP_5 << OP_EQUAL;\n-    tx5.vout[1].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx6 = CMutableTransaction();\n-    tx6.vin.resize(2);\n-    tx6.vin[0].prevout = COutPoint(tx4.GetHash(), 1);\n-    tx6.vin[0].scriptSig = CScript() << OP_4;\n-    tx6.vin[0].scriptWitness.stack.push_back({4});\n-    tx6.vin[1].prevout.SetNull();\n-    tx6.vin[1].scriptSig = CScript() << OP_6;\n-    tx6.vin[1].scriptWitness.stack.push_back({6});\n-    tx6.vout.resize(2);\n-    tx6.vout[0].scriptPubKey = CScript() << OP_6 << OP_EQUAL;\n-    tx6.vout[0].nValue = 10 * COIN;\n-    tx6.vout[1].scriptPubKey = CScript() << OP_6 << OP_EQUAL;\n-    tx6.vout[1].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx7 = CMutableTransaction();\n-    tx7.vin.resize(2);\n-    tx7.vin[0].prevout = COutPoint(tx5.GetHash(), 0);\n-    tx7.vin[0].scriptSig = CScript() << OP_5;\n-    tx7.vin[0].scriptWitness.stack.push_back({5});\n-    tx7.vin[1].prevout = COutPoint(tx6.GetHash(), 0);\n-    tx7.vin[1].scriptSig = CScript() << OP_6;\n-    tx7.vin[1].scriptWitness.stack.push_back({6});\n-    tx7.vout.resize(2);\n-    tx7.vout[0].scriptPubKey = CScript() << OP_7 << OP_EQUAL;\n-    tx7.vout[0].nValue = 10 * COIN;\n-    tx7.vout[1].scriptPubKey = CScript() << OP_7 << OP_EQUAL;\n-    tx7.vout[1].nValue = 10 * COIN;\n+    std::vector<CTransactionRef> txns;\n+\n+    for (size_t i=0; i<num_packages; i++) {\n+        add_parents_child(txns, package_size, i);\n+    }\n \n+    /* Now we're ready */\n     CTxMemPool& pool = *Assert(testing_setup->m_node.mempool);\n     LOCK2(cs_main, pool.cs);\n-    // Create transaction references outside the \"hot loop\"\n-    const CTransactionRef tx1_r{MakeTransactionRef(tx1)};\n-    const CTransactionRef tx2_r{MakeTransactionRef(tx2)};\n-    const CTransactionRef tx3_r{MakeTransactionRef(tx3)};\n-    const CTransactionRef tx4_r{MakeTransactionRef(tx4)};\n-    const CTransactionRef tx5_r{MakeTransactionRef(tx5)};\n-    const CTransactionRef tx6_r{MakeTransactionRef(tx6)};\n-    const CTransactionRef tx7_r{MakeTransactionRef(tx7)};\n+    bench.run([&]() NO_THREAD_SAFETY_ANALYSIS {\n+        for (size_t i=0; i<txns.size(); i++) {",
      "path": "src/bench/mempool_eviction.cpp",
      "position": null,
      "original_position": 136,
      "commit_id": "a6fc02baae1be4b849653448d0522f99064aa94f",
      "original_commit_id": "a3a2e82a6eb70cd73723af38fa1a456ab553981d",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: I think we tend to prefer this\r\n```suggestion\r\n        for (size_t i{0}; i < txns.size(); ++i) {\r\n```",
      "created_at": "2023-03-21T18:42:05Z",
      "updated_at": "2023-03-21T18:45:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27019#discussion_r1143851697",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1143851697"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27019"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1143918290",
      "pull_request_review_id": 1351278447,
      "id": 1143918290,
      "node_id": "PRRC_kwDOABII585ELs7S",
      "diff_hunk": "@@ -21,116 +21,96 @@ static void AddTx(const CTransactionRef& tx, const CAmount& nFee, CTxMemPool& po\n         spendsCoinbase, sigOpCost, lp));\n }\n \n-// Right now this is only testing eviction performance in an extremely small\n-// mempool. Code needs to be written to generate a much wider variety of\n-// unique transactions for a more meaningful performance measurement.\n-static void MempoolEviction(benchmark::Bench& bench)\n+void add_parents_child(std::vector<CTransactionRef>& txns, size_t package_size, size_t set_num)\n+{\n+    // N+1 N-input-N-output txns, in a parents-and-child package\n+    // Where the final tx takes an input from all ancestors\n+    const size_t num_puts = std::max(package_size - 1, (size_t)1);\n+    const size_t num_txns = package_size;\n+    for (size_t txn_index=0; txn_index<num_txns; txn_index++) {\n+        CMutableTransaction tx = CMutableTransaction();\n+        tx.vin.resize(num_puts);\n+        tx.vout.resize(num_puts);\n+        for (size_t put_index=0; put_index<num_puts; put_index++) {\n+            tx.vin[put_index].scriptSig = CScript() << CScriptNum(txn_index);\n+            tx.vin[put_index].scriptWitness.stack.push_back({1});\n+            tx.vout[put_index].scriptPubKey = CScript() << CScriptNum(set_num); // Ensures unique txid with set_num\n+            tx.vout[put_index].nValue = txn_index;\n+\n+            if (put_index < txn_index) {\n+                // We spend put_index's txn's in the next available slot for each previous transaction\n+                assert(put_index + txn_index >= 1);\n+                tx.vin[put_index].prevout = COutPoint(txns[put_index]->GetHash(), put_index + txn_index - 1);\n+            }\n+        }\n+        txns.push_back(MakeTransactionRef(tx));\n+    }\n+}\n+\n+static void MempoolEvictionInner(benchmark::Bench& bench, size_t num_packages, size_t package_size)\n {\n     const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n \n-    CMutableTransaction tx1 = CMutableTransaction();\n-    tx1.vin.resize(1);\n-    tx1.vin[0].scriptSig = CScript() << OP_1;\n-    tx1.vin[0].scriptWitness.stack.push_back({1});\n-    tx1.vout.resize(1);\n-    tx1.vout[0].scriptPubKey = CScript() << OP_1 << OP_EQUAL;\n-    tx1.vout[0].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx2 = CMutableTransaction();\n-    tx2.vin.resize(1);\n-    tx2.vin[0].scriptSig = CScript() << OP_2;\n-    tx2.vin[0].scriptWitness.stack.push_back({2});\n-    tx2.vout.resize(1);\n-    tx2.vout[0].scriptPubKey = CScript() << OP_2 << OP_EQUAL;\n-    tx2.vout[0].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx3 = CMutableTransaction();\n-    tx3.vin.resize(1);\n-    tx3.vin[0].prevout = COutPoint(tx2.GetHash(), 0);\n-    tx3.vin[0].scriptSig = CScript() << OP_2;\n-    tx3.vin[0].scriptWitness.stack.push_back({3});\n-    tx3.vout.resize(1);\n-    tx3.vout[0].scriptPubKey = CScript() << OP_3 << OP_EQUAL;\n-    tx3.vout[0].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx4 = CMutableTransaction();\n-    tx4.vin.resize(2);\n-    tx4.vin[0].prevout.SetNull();\n-    tx4.vin[0].scriptSig = CScript() << OP_4;\n-    tx4.vin[0].scriptWitness.stack.push_back({4});\n-    tx4.vin[1].prevout.SetNull();\n-    tx4.vin[1].scriptSig = CScript() << OP_4;\n-    tx4.vin[1].scriptWitness.stack.push_back({4});\n-    tx4.vout.resize(2);\n-    tx4.vout[0].scriptPubKey = CScript() << OP_4 << OP_EQUAL;\n-    tx4.vout[0].nValue = 10 * COIN;\n-    tx4.vout[1].scriptPubKey = CScript() << OP_4 << OP_EQUAL;\n-    tx4.vout[1].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx5 = CMutableTransaction();\n-    tx5.vin.resize(2);\n-    tx5.vin[0].prevout = COutPoint(tx4.GetHash(), 0);\n-    tx5.vin[0].scriptSig = CScript() << OP_4;\n-    tx5.vin[0].scriptWitness.stack.push_back({4});\n-    tx5.vin[1].prevout.SetNull();\n-    tx5.vin[1].scriptSig = CScript() << OP_5;\n-    tx5.vin[1].scriptWitness.stack.push_back({5});\n-    tx5.vout.resize(2);\n-    tx5.vout[0].scriptPubKey = CScript() << OP_5 << OP_EQUAL;\n-    tx5.vout[0].nValue = 10 * COIN;\n-    tx5.vout[1].scriptPubKey = CScript() << OP_5 << OP_EQUAL;\n-    tx5.vout[1].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx6 = CMutableTransaction();\n-    tx6.vin.resize(2);\n-    tx6.vin[0].prevout = COutPoint(tx4.GetHash(), 1);\n-    tx6.vin[0].scriptSig = CScript() << OP_4;\n-    tx6.vin[0].scriptWitness.stack.push_back({4});\n-    tx6.vin[1].prevout.SetNull();\n-    tx6.vin[1].scriptSig = CScript() << OP_6;\n-    tx6.vin[1].scriptWitness.stack.push_back({6});\n-    tx6.vout.resize(2);\n-    tx6.vout[0].scriptPubKey = CScript() << OP_6 << OP_EQUAL;\n-    tx6.vout[0].nValue = 10 * COIN;\n-    tx6.vout[1].scriptPubKey = CScript() << OP_6 << OP_EQUAL;\n-    tx6.vout[1].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx7 = CMutableTransaction();\n-    tx7.vin.resize(2);\n-    tx7.vin[0].prevout = COutPoint(tx5.GetHash(), 0);\n-    tx7.vin[0].scriptSig = CScript() << OP_5;\n-    tx7.vin[0].scriptWitness.stack.push_back({5});\n-    tx7.vin[1].prevout = COutPoint(tx6.GetHash(), 0);\n-    tx7.vin[1].scriptSig = CScript() << OP_6;\n-    tx7.vin[1].scriptWitness.stack.push_back({6});\n-    tx7.vout.resize(2);\n-    tx7.vout[0].scriptPubKey = CScript() << OP_7 << OP_EQUAL;\n-    tx7.vout[0].nValue = 10 * COIN;\n-    tx7.vout[1].scriptPubKey = CScript() << OP_7 << OP_EQUAL;\n-    tx7.vout[1].nValue = 10 * COIN;\n+    std::vector<CTransactionRef> txns;\n+\n+    for (size_t i=0; i<num_packages; i++) {\n+        add_parents_child(txns, package_size, i);\n+    }\n \n+    /* Now we're ready */\n     CTxMemPool& pool = *Assert(testing_setup->m_node.mempool);\n     LOCK2(cs_main, pool.cs);\n-    // Create transaction references outside the \"hot loop\"\n-    const CTransactionRef tx1_r{MakeTransactionRef(tx1)};\n-    const CTransactionRef tx2_r{MakeTransactionRef(tx2)};\n-    const CTransactionRef tx3_r{MakeTransactionRef(tx3)};\n-    const CTransactionRef tx4_r{MakeTransactionRef(tx4)};\n-    const CTransactionRef tx5_r{MakeTransactionRef(tx5)};\n-    const CTransactionRef tx6_r{MakeTransactionRef(tx6)};\n-    const CTransactionRef tx7_r{MakeTransactionRef(tx7)};\n+    bench.run([&]() NO_THREAD_SAFETY_ANALYSIS {\n+        for (size_t i=0; i<txns.size(); i++) {\n+            // Monotonically decreasing fees\n+            AddTx(txns[i], (txns.size() - i)*1000LL, pool);\n+        }\n+        assert(pool.size() == txns.size());\n+        pool.TrimToSize(pool.DynamicMemoryUsage() - 1);\n+        assert(pool.size() == txns.size() - 1);\n+        pool.TrimToSize(GetVirtualTransactionSize(*txns[0]));",
      "path": "src/bench/mempool_eviction.cpp",
      "position": null,
      "original_position": 143,
      "commit_id": "a6fc02baae1be4b849653448d0522f99064aa94f",
      "original_commit_id": "a3a2e82a6eb70cd73723af38fa1a456ab553981d",
      "in_reply_to_id": 1143826570,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "hmmm, I don't recall. I can just set to 0",
      "created_at": "2023-03-21T19:48:27Z",
      "updated_at": "2023-03-21T19:48:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27019#discussion_r1143918290",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1143918290"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27019"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 71,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1143923923",
      "pull_request_review_id": 1351286944,
      "id": 1143923923,
      "node_id": "PRRC_kwDOABII585ELuTT",
      "diff_hunk": "@@ -21,116 +21,96 @@ static void AddTx(const CTransactionRef& tx, const CAmount& nFee, CTxMemPool& po\n         spendsCoinbase, sigOpCost, lp));\n }\n \n-// Right now this is only testing eviction performance in an extremely small\n-// mempool. Code needs to be written to generate a much wider variety of\n-// unique transactions for a more meaningful performance measurement.\n-static void MempoolEviction(benchmark::Bench& bench)\n+void add_parents_child(std::vector<CTransactionRef>& txns, size_t package_size, size_t set_num)\n+{\n+    // N+1 N-input-N-output txns, in a parents-and-child package\n+    // Where the final tx takes an input from all ancestors\n+    const size_t num_puts = std::max(package_size - 1, (size_t)1);\n+    const size_t num_txns = package_size;\n+    for (size_t txn_index=0; txn_index<num_txns; txn_index++) {\n+        CMutableTransaction tx = CMutableTransaction();\n+        tx.vin.resize(num_puts);\n+        tx.vout.resize(num_puts);\n+        for (size_t put_index=0; put_index<num_puts; put_index++) {\n+            tx.vin[put_index].scriptSig = CScript() << CScriptNum(txn_index);\n+            tx.vin[put_index].scriptWitness.stack.push_back({1});\n+            tx.vout[put_index].scriptPubKey = CScript() << CScriptNum(set_num); // Ensures unique txid with set_num\n+            tx.vout[put_index].nValue = txn_index;\n+\n+            if (put_index < txn_index) {\n+                // We spend put_index's txn's in the next available slot for each previous transaction\n+                assert(put_index + txn_index >= 1);\n+                tx.vin[put_index].prevout = COutPoint(txns[put_index]->GetHash(), put_index + txn_index - 1);\n+            }\n+        }\n+        txns.push_back(MakeTransactionRef(tx));\n+    }\n+}\n+\n+static void MempoolEvictionInner(benchmark::Bench& bench, size_t num_packages, size_t package_size)\n {\n     const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n \n-    CMutableTransaction tx1 = CMutableTransaction();\n-    tx1.vin.resize(1);\n-    tx1.vin[0].scriptSig = CScript() << OP_1;\n-    tx1.vin[0].scriptWitness.stack.push_back({1});\n-    tx1.vout.resize(1);\n-    tx1.vout[0].scriptPubKey = CScript() << OP_1 << OP_EQUAL;\n-    tx1.vout[0].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx2 = CMutableTransaction();\n-    tx2.vin.resize(1);\n-    tx2.vin[0].scriptSig = CScript() << OP_2;\n-    tx2.vin[0].scriptWitness.stack.push_back({2});\n-    tx2.vout.resize(1);\n-    tx2.vout[0].scriptPubKey = CScript() << OP_2 << OP_EQUAL;\n-    tx2.vout[0].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx3 = CMutableTransaction();\n-    tx3.vin.resize(1);\n-    tx3.vin[0].prevout = COutPoint(tx2.GetHash(), 0);\n-    tx3.vin[0].scriptSig = CScript() << OP_2;\n-    tx3.vin[0].scriptWitness.stack.push_back({3});\n-    tx3.vout.resize(1);\n-    tx3.vout[0].scriptPubKey = CScript() << OP_3 << OP_EQUAL;\n-    tx3.vout[0].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx4 = CMutableTransaction();\n-    tx4.vin.resize(2);\n-    tx4.vin[0].prevout.SetNull();\n-    tx4.vin[0].scriptSig = CScript() << OP_4;\n-    tx4.vin[0].scriptWitness.stack.push_back({4});\n-    tx4.vin[1].prevout.SetNull();\n-    tx4.vin[1].scriptSig = CScript() << OP_4;\n-    tx4.vin[1].scriptWitness.stack.push_back({4});\n-    tx4.vout.resize(2);\n-    tx4.vout[0].scriptPubKey = CScript() << OP_4 << OP_EQUAL;\n-    tx4.vout[0].nValue = 10 * COIN;\n-    tx4.vout[1].scriptPubKey = CScript() << OP_4 << OP_EQUAL;\n-    tx4.vout[1].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx5 = CMutableTransaction();\n-    tx5.vin.resize(2);\n-    tx5.vin[0].prevout = COutPoint(tx4.GetHash(), 0);\n-    tx5.vin[0].scriptSig = CScript() << OP_4;\n-    tx5.vin[0].scriptWitness.stack.push_back({4});\n-    tx5.vin[1].prevout.SetNull();\n-    tx5.vin[1].scriptSig = CScript() << OP_5;\n-    tx5.vin[1].scriptWitness.stack.push_back({5});\n-    tx5.vout.resize(2);\n-    tx5.vout[0].scriptPubKey = CScript() << OP_5 << OP_EQUAL;\n-    tx5.vout[0].nValue = 10 * COIN;\n-    tx5.vout[1].scriptPubKey = CScript() << OP_5 << OP_EQUAL;\n-    tx5.vout[1].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx6 = CMutableTransaction();\n-    tx6.vin.resize(2);\n-    tx6.vin[0].prevout = COutPoint(tx4.GetHash(), 1);\n-    tx6.vin[0].scriptSig = CScript() << OP_4;\n-    tx6.vin[0].scriptWitness.stack.push_back({4});\n-    tx6.vin[1].prevout.SetNull();\n-    tx6.vin[1].scriptSig = CScript() << OP_6;\n-    tx6.vin[1].scriptWitness.stack.push_back({6});\n-    tx6.vout.resize(2);\n-    tx6.vout[0].scriptPubKey = CScript() << OP_6 << OP_EQUAL;\n-    tx6.vout[0].nValue = 10 * COIN;\n-    tx6.vout[1].scriptPubKey = CScript() << OP_6 << OP_EQUAL;\n-    tx6.vout[1].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx7 = CMutableTransaction();\n-    tx7.vin.resize(2);\n-    tx7.vin[0].prevout = COutPoint(tx5.GetHash(), 0);\n-    tx7.vin[0].scriptSig = CScript() << OP_5;\n-    tx7.vin[0].scriptWitness.stack.push_back({5});\n-    tx7.vin[1].prevout = COutPoint(tx6.GetHash(), 0);\n-    tx7.vin[1].scriptSig = CScript() << OP_6;\n-    tx7.vin[1].scriptWitness.stack.push_back({6});\n-    tx7.vout.resize(2);\n-    tx7.vout[0].scriptPubKey = CScript() << OP_7 << OP_EQUAL;\n-    tx7.vout[0].nValue = 10 * COIN;\n-    tx7.vout[1].scriptPubKey = CScript() << OP_7 << OP_EQUAL;\n-    tx7.vout[1].nValue = 10 * COIN;\n+    std::vector<CTransactionRef> txns;\n+\n+    for (size_t i=0; i<num_packages; i++) {\n+        add_parents_child(txns, package_size, i);\n+    }\n \n+    /* Now we're ready */\n     CTxMemPool& pool = *Assert(testing_setup->m_node.mempool);\n     LOCK2(cs_main, pool.cs);\n-    // Create transaction references outside the \"hot loop\"\n-    const CTransactionRef tx1_r{MakeTransactionRef(tx1)};\n-    const CTransactionRef tx2_r{MakeTransactionRef(tx2)};\n-    const CTransactionRef tx3_r{MakeTransactionRef(tx3)};\n-    const CTransactionRef tx4_r{MakeTransactionRef(tx4)};\n-    const CTransactionRef tx5_r{MakeTransactionRef(tx5)};\n-    const CTransactionRef tx6_r{MakeTransactionRef(tx6)};\n-    const CTransactionRef tx7_r{MakeTransactionRef(tx7)};\n+    bench.run([&]() NO_THREAD_SAFETY_ANALYSIS {\n+        for (size_t i=0; i<txns.size(); i++) {\n+            // Monotonically decreasing fees\n+            AddTx(txns[i], (txns.size() - i)*1000LL, pool);\n+        }\n+        assert(pool.size() == txns.size());\n+        pool.TrimToSize(pool.DynamicMemoryUsage() - 1);\n+        assert(pool.size() == txns.size() - 1);\n+        pool.TrimToSize(GetVirtualTransactionSize(*txns[0]));\n+        assert(pool.size() == 0);\n+    });\n+}\n+\n+static void MempoolConstructionInner(benchmark::Bench& bench, size_t num_packages, size_t package_size)\n+{\n+    const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n \n+    std::vector<CTransactionRef> txns;\n+\n+    for (size_t i=0; i<num_packages; i++) {\n+        add_parents_child(txns, package_size, i);\n+    }\n+\n+    /* Now we're ready */",
      "path": "src/bench/mempool_eviction.cpp",
      "position": 157,
      "original_position": 158,
      "commit_id": "a6fc02baae1be4b849653448d0522f99064aa94f",
      "original_commit_id": "a3a2e82a6eb70cd73723af38fa1a456ab553981d",
      "in_reply_to_id": 1143841355,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "will remove",
      "created_at": "2023-03-21T19:54:43Z",
      "updated_at": "2023-03-21T19:54:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27019#discussion_r1143923923",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1143923923"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27019"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 85,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1143932896",
      "pull_request_review_id": 1351301107,
      "id": 1143932896,
      "node_id": "PRRC_kwDOABII585ELwfg",
      "diff_hunk": "@@ -21,116 +21,96 @@ static void AddTx(const CTransactionRef& tx, const CAmount& nFee, CTxMemPool& po\n         spendsCoinbase, sigOpCost, lp));\n }\n \n-// Right now this is only testing eviction performance in an extremely small\n-// mempool. Code needs to be written to generate a much wider variety of\n-// unique transactions for a more meaningful performance measurement.\n-static void MempoolEviction(benchmark::Bench& bench)\n+void add_parents_child(std::vector<CTransactionRef>& txns, size_t package_size, size_t set_num)\n+{\n+    // N+1 N-input-N-output txns, in a parents-and-child package\n+    // Where the final tx takes an input from all ancestors\n+    const size_t num_puts = std::max(package_size - 1, (size_t)1);\n+    const size_t num_txns = package_size;\n+    for (size_t txn_index=0; txn_index<num_txns; txn_index++) {\n+        CMutableTransaction tx = CMutableTransaction();\n+        tx.vin.resize(num_puts);\n+        tx.vout.resize(num_puts);\n+        for (size_t put_index=0; put_index<num_puts; put_index++) {\n+            tx.vin[put_index].scriptSig = CScript() << CScriptNum(txn_index);\n+            tx.vin[put_index].scriptWitness.stack.push_back({1});\n+            tx.vout[put_index].scriptPubKey = CScript() << CScriptNum(set_num); // Ensures unique txid with set_num\n+            tx.vout[put_index].nValue = txn_index;\n+\n+            if (put_index < txn_index) {\n+                // We spend put_index's txn's in the next available slot for each previous transaction\n+                assert(put_index + txn_index >= 1);\n+                tx.vin[put_index].prevout = COutPoint(txns[put_index]->GetHash(), put_index + txn_index - 1);\n+            }\n+        }\n+        txns.push_back(MakeTransactionRef(tx));\n+    }\n+}\n+\n+static void MempoolEvictionInner(benchmark::Bench& bench, size_t num_packages, size_t package_size)\n {\n     const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n \n-    CMutableTransaction tx1 = CMutableTransaction();\n-    tx1.vin.resize(1);\n-    tx1.vin[0].scriptSig = CScript() << OP_1;\n-    tx1.vin[0].scriptWitness.stack.push_back({1});\n-    tx1.vout.resize(1);\n-    tx1.vout[0].scriptPubKey = CScript() << OP_1 << OP_EQUAL;\n-    tx1.vout[0].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx2 = CMutableTransaction();\n-    tx2.vin.resize(1);\n-    tx2.vin[0].scriptSig = CScript() << OP_2;\n-    tx2.vin[0].scriptWitness.stack.push_back({2});\n-    tx2.vout.resize(1);\n-    tx2.vout[0].scriptPubKey = CScript() << OP_2 << OP_EQUAL;\n-    tx2.vout[0].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx3 = CMutableTransaction();\n-    tx3.vin.resize(1);\n-    tx3.vin[0].prevout = COutPoint(tx2.GetHash(), 0);\n-    tx3.vin[0].scriptSig = CScript() << OP_2;\n-    tx3.vin[0].scriptWitness.stack.push_back({3});\n-    tx3.vout.resize(1);\n-    tx3.vout[0].scriptPubKey = CScript() << OP_3 << OP_EQUAL;\n-    tx3.vout[0].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx4 = CMutableTransaction();\n-    tx4.vin.resize(2);\n-    tx4.vin[0].prevout.SetNull();\n-    tx4.vin[0].scriptSig = CScript() << OP_4;\n-    tx4.vin[0].scriptWitness.stack.push_back({4});\n-    tx4.vin[1].prevout.SetNull();\n-    tx4.vin[1].scriptSig = CScript() << OP_4;\n-    tx4.vin[1].scriptWitness.stack.push_back({4});\n-    tx4.vout.resize(2);\n-    tx4.vout[0].scriptPubKey = CScript() << OP_4 << OP_EQUAL;\n-    tx4.vout[0].nValue = 10 * COIN;\n-    tx4.vout[1].scriptPubKey = CScript() << OP_4 << OP_EQUAL;\n-    tx4.vout[1].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx5 = CMutableTransaction();\n-    tx5.vin.resize(2);\n-    tx5.vin[0].prevout = COutPoint(tx4.GetHash(), 0);\n-    tx5.vin[0].scriptSig = CScript() << OP_4;\n-    tx5.vin[0].scriptWitness.stack.push_back({4});\n-    tx5.vin[1].prevout.SetNull();\n-    tx5.vin[1].scriptSig = CScript() << OP_5;\n-    tx5.vin[1].scriptWitness.stack.push_back({5});\n-    tx5.vout.resize(2);\n-    tx5.vout[0].scriptPubKey = CScript() << OP_5 << OP_EQUAL;\n-    tx5.vout[0].nValue = 10 * COIN;\n-    tx5.vout[1].scriptPubKey = CScript() << OP_5 << OP_EQUAL;\n-    tx5.vout[1].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx6 = CMutableTransaction();\n-    tx6.vin.resize(2);\n-    tx6.vin[0].prevout = COutPoint(tx4.GetHash(), 1);\n-    tx6.vin[0].scriptSig = CScript() << OP_4;\n-    tx6.vin[0].scriptWitness.stack.push_back({4});\n-    tx6.vin[1].prevout.SetNull();\n-    tx6.vin[1].scriptSig = CScript() << OP_6;\n-    tx6.vin[1].scriptWitness.stack.push_back({6});\n-    tx6.vout.resize(2);\n-    tx6.vout[0].scriptPubKey = CScript() << OP_6 << OP_EQUAL;\n-    tx6.vout[0].nValue = 10 * COIN;\n-    tx6.vout[1].scriptPubKey = CScript() << OP_6 << OP_EQUAL;\n-    tx6.vout[1].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx7 = CMutableTransaction();\n-    tx7.vin.resize(2);\n-    tx7.vin[0].prevout = COutPoint(tx5.GetHash(), 0);\n-    tx7.vin[0].scriptSig = CScript() << OP_5;\n-    tx7.vin[0].scriptWitness.stack.push_back({5});\n-    tx7.vin[1].prevout = COutPoint(tx6.GetHash(), 0);\n-    tx7.vin[1].scriptSig = CScript() << OP_6;\n-    tx7.vin[1].scriptWitness.stack.push_back({6});\n-    tx7.vout.resize(2);\n-    tx7.vout[0].scriptPubKey = CScript() << OP_7 << OP_EQUAL;\n-    tx7.vout[0].nValue = 10 * COIN;\n-    tx7.vout[1].scriptPubKey = CScript() << OP_7 << OP_EQUAL;\n-    tx7.vout[1].nValue = 10 * COIN;\n+    std::vector<CTransactionRef> txns;\n+\n+    for (size_t i=0; i<num_packages; i++) {\n+        add_parents_child(txns, package_size, i);\n+    }\n \n+    /* Now we're ready */\n     CTxMemPool& pool = *Assert(testing_setup->m_node.mempool);\n     LOCK2(cs_main, pool.cs);\n-    // Create transaction references outside the \"hot loop\"\n-    const CTransactionRef tx1_r{MakeTransactionRef(tx1)};\n-    const CTransactionRef tx2_r{MakeTransactionRef(tx2)};\n-    const CTransactionRef tx3_r{MakeTransactionRef(tx3)};\n-    const CTransactionRef tx4_r{MakeTransactionRef(tx4)};\n-    const CTransactionRef tx5_r{MakeTransactionRef(tx5)};\n-    const CTransactionRef tx6_r{MakeTransactionRef(tx6)};\n-    const CTransactionRef tx7_r{MakeTransactionRef(tx7)};\n+    bench.run([&]() NO_THREAD_SAFETY_ANALYSIS {\n+        for (size_t i=0; i<txns.size(); i++) {\n+            // Monotonically decreasing fees\n+            AddTx(txns[i], (txns.size() - i)*1000LL, pool);\n+        }\n+        assert(pool.size() == txns.size());\n+        pool.TrimToSize(pool.DynamicMemoryUsage() - 1);\n+        assert(pool.size() == txns.size() - 1);\n+        pool.TrimToSize(GetVirtualTransactionSize(*txns[0]));\n+        assert(pool.size() == 0);\n+    });\n+}\n+\n+static void MempoolConstructionInner(benchmark::Bench& bench, size_t num_packages, size_t package_size)\n+{\n+    const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n \n+    std::vector<CTransactionRef> txns;\n+\n+    for (size_t i=0; i<num_packages; i++) {\n+        add_parents_child(txns, package_size, i);\n+    }\n+\n+    /* Now we're ready */\n+    CTxMemPool& pool = *Assert(testing_setup->m_node.mempool);\n+    LOCK2(cs_main, pool.cs);\n     bench.run([&]() NO_THREAD_SAFETY_ANALYSIS {\n-        AddTx(tx1_r, 10000LL, pool);\n-        AddTx(tx2_r, 5000LL, pool);\n-        AddTx(tx3_r, 20000LL, pool);\n-        AddTx(tx4_r, 7000LL, pool);\n-        AddTx(tx5_r, 1000LL, pool);\n-        AddTx(tx6_r, 1100LL, pool);\n-        AddTx(tx7_r, 9000LL, pool);\n-        pool.TrimToSize(pool.DynamicMemoryUsage() * 3 / 4);\n-        pool.TrimToSize(GetVirtualTransactionSize(*tx1_r));\n+        for (size_t i=0; i<txns.size(); i++) {\n+            // Monotonically decreasing fees",
      "path": "src/bench/mempool_eviction.cpp",
      "position": null,
      "original_position": 172,
      "commit_id": "a6fc02baae1be4b849653448d0522f99064aa94f",
      "original_commit_id": "a3a2e82a6eb70cd73723af38fa1a456ab553981d",
      "in_reply_to_id": 1143849591,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "looks like something that doesn't matter, based on me getting rid of that factor. Removed.",
      "created_at": "2023-03-21T20:04:38Z",
      "updated_at": "2023-03-21T20:04:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27019#discussion_r1143932896",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1143932896"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27019"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 91,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1144457060",
      "pull_request_review_id": 1352051877,
      "id": 1144457060,
      "node_id": "PRRC_kwDOABII585ENwdk",
      "diff_hunk": "@@ -21,116 +21,96 @@ static void AddTx(const CTransactionRef& tx, const CAmount& nFee, CTxMemPool& po\n         spendsCoinbase, sigOpCost, lp));\n }\n \n-// Right now this is only testing eviction performance in an extremely small\n-// mempool. Code needs to be written to generate a much wider variety of\n-// unique transactions for a more meaningful performance measurement.\n-static void MempoolEviction(benchmark::Bench& bench)\n+void add_parents_child(std::vector<CTransactionRef>& txns, size_t package_size, size_t set_num)\n+{\n+    // N+1 N-input-N-output txns, in a parents-and-child package\n+    // Where the final tx takes an input from all ancestors\n+    const size_t num_puts = std::max(package_size - 1, (size_t)1);\n+    const size_t num_txns = package_size;\n+    for (size_t txn_index=0; txn_index<num_txns; txn_index++) {\n+        CMutableTransaction tx = CMutableTransaction();\n+        tx.vin.resize(num_puts);\n+        tx.vout.resize(num_puts);\n+        for (size_t put_index=0; put_index<num_puts; put_index++) {\n+            tx.vin[put_index].scriptSig = CScript() << CScriptNum(txn_index);\n+            tx.vin[put_index].scriptWitness.stack.push_back({1});\n+            tx.vout[put_index].scriptPubKey = CScript() << CScriptNum(set_num); // Ensures unique txid with set_num\n+            tx.vout[put_index].nValue = txn_index;\n+\n+            if (put_index < txn_index) {\n+                // We spend put_index's txn's in the next available slot for each previous transaction\n+                assert(put_index + txn_index >= 1);\n+                tx.vin[put_index].prevout = COutPoint(txns[put_index]->GetHash(), put_index + txn_index - 1);\n+            }\n+        }\n+        txns.push_back(MakeTransactionRef(tx));\n+    }\n+}\n+\n+static void MempoolEvictionInner(benchmark::Bench& bench, size_t num_packages, size_t package_size)\n {\n     const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n \n-    CMutableTransaction tx1 = CMutableTransaction();\n-    tx1.vin.resize(1);\n-    tx1.vin[0].scriptSig = CScript() << OP_1;\n-    tx1.vin[0].scriptWitness.stack.push_back({1});\n-    tx1.vout.resize(1);\n-    tx1.vout[0].scriptPubKey = CScript() << OP_1 << OP_EQUAL;\n-    tx1.vout[0].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx2 = CMutableTransaction();\n-    tx2.vin.resize(1);\n-    tx2.vin[0].scriptSig = CScript() << OP_2;\n-    tx2.vin[0].scriptWitness.stack.push_back({2});\n-    tx2.vout.resize(1);\n-    tx2.vout[0].scriptPubKey = CScript() << OP_2 << OP_EQUAL;\n-    tx2.vout[0].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx3 = CMutableTransaction();\n-    tx3.vin.resize(1);\n-    tx3.vin[0].prevout = COutPoint(tx2.GetHash(), 0);\n-    tx3.vin[0].scriptSig = CScript() << OP_2;\n-    tx3.vin[0].scriptWitness.stack.push_back({3});\n-    tx3.vout.resize(1);\n-    tx3.vout[0].scriptPubKey = CScript() << OP_3 << OP_EQUAL;\n-    tx3.vout[0].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx4 = CMutableTransaction();\n-    tx4.vin.resize(2);\n-    tx4.vin[0].prevout.SetNull();\n-    tx4.vin[0].scriptSig = CScript() << OP_4;\n-    tx4.vin[0].scriptWitness.stack.push_back({4});\n-    tx4.vin[1].prevout.SetNull();\n-    tx4.vin[1].scriptSig = CScript() << OP_4;\n-    tx4.vin[1].scriptWitness.stack.push_back({4});\n-    tx4.vout.resize(2);\n-    tx4.vout[0].scriptPubKey = CScript() << OP_4 << OP_EQUAL;\n-    tx4.vout[0].nValue = 10 * COIN;\n-    tx4.vout[1].scriptPubKey = CScript() << OP_4 << OP_EQUAL;\n-    tx4.vout[1].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx5 = CMutableTransaction();\n-    tx5.vin.resize(2);\n-    tx5.vin[0].prevout = COutPoint(tx4.GetHash(), 0);\n-    tx5.vin[0].scriptSig = CScript() << OP_4;\n-    tx5.vin[0].scriptWitness.stack.push_back({4});\n-    tx5.vin[1].prevout.SetNull();\n-    tx5.vin[1].scriptSig = CScript() << OP_5;\n-    tx5.vin[1].scriptWitness.stack.push_back({5});\n-    tx5.vout.resize(2);\n-    tx5.vout[0].scriptPubKey = CScript() << OP_5 << OP_EQUAL;\n-    tx5.vout[0].nValue = 10 * COIN;\n-    tx5.vout[1].scriptPubKey = CScript() << OP_5 << OP_EQUAL;\n-    tx5.vout[1].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx6 = CMutableTransaction();\n-    tx6.vin.resize(2);\n-    tx6.vin[0].prevout = COutPoint(tx4.GetHash(), 1);\n-    tx6.vin[0].scriptSig = CScript() << OP_4;\n-    tx6.vin[0].scriptWitness.stack.push_back({4});\n-    tx6.vin[1].prevout.SetNull();\n-    tx6.vin[1].scriptSig = CScript() << OP_6;\n-    tx6.vin[1].scriptWitness.stack.push_back({6});\n-    tx6.vout.resize(2);\n-    tx6.vout[0].scriptPubKey = CScript() << OP_6 << OP_EQUAL;\n-    tx6.vout[0].nValue = 10 * COIN;\n-    tx6.vout[1].scriptPubKey = CScript() << OP_6 << OP_EQUAL;\n-    tx6.vout[1].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx7 = CMutableTransaction();\n-    tx7.vin.resize(2);\n-    tx7.vin[0].prevout = COutPoint(tx5.GetHash(), 0);\n-    tx7.vin[0].scriptSig = CScript() << OP_5;\n-    tx7.vin[0].scriptWitness.stack.push_back({5});\n-    tx7.vin[1].prevout = COutPoint(tx6.GetHash(), 0);\n-    tx7.vin[1].scriptSig = CScript() << OP_6;\n-    tx7.vin[1].scriptWitness.stack.push_back({6});\n-    tx7.vout.resize(2);\n-    tx7.vout[0].scriptPubKey = CScript() << OP_7 << OP_EQUAL;\n-    tx7.vout[0].nValue = 10 * COIN;\n-    tx7.vout[1].scriptPubKey = CScript() << OP_7 << OP_EQUAL;\n-    tx7.vout[1].nValue = 10 * COIN;\n+    std::vector<CTransactionRef> txns;\n+\n+    for (size_t i=0; i<num_packages; i++) {\n+        add_parents_child(txns, package_size, i);\n+    }\n \n+    /* Now we're ready */\n     CTxMemPool& pool = *Assert(testing_setup->m_node.mempool);\n     LOCK2(cs_main, pool.cs);\n-    // Create transaction references outside the \"hot loop\"\n-    const CTransactionRef tx1_r{MakeTransactionRef(tx1)};\n-    const CTransactionRef tx2_r{MakeTransactionRef(tx2)};\n-    const CTransactionRef tx3_r{MakeTransactionRef(tx3)};\n-    const CTransactionRef tx4_r{MakeTransactionRef(tx4)};\n-    const CTransactionRef tx5_r{MakeTransactionRef(tx5)};\n-    const CTransactionRef tx6_r{MakeTransactionRef(tx6)};\n-    const CTransactionRef tx7_r{MakeTransactionRef(tx7)};\n+    bench.run([&]() NO_THREAD_SAFETY_ANALYSIS {\n+        for (size_t i=0; i<txns.size(); i++) {\n+            // Monotonically decreasing fees\n+            AddTx(txns[i], (txns.size() - i)*1000LL, pool);\n+        }\n+        assert(pool.size() == txns.size());\n+        pool.TrimToSize(pool.DynamicMemoryUsage() - 1);\n+        assert(pool.size() == txns.size() - 1);\n+        pool.TrimToSize(GetVirtualTransactionSize(*txns[0]));\n+        assert(pool.size() == 0);\n+    });\n+}\n+\n+static void MempoolConstructionInner(benchmark::Bench& bench, size_t num_packages, size_t package_size)\n+{\n+    const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n \n+    std::vector<CTransactionRef> txns;\n+\n+    for (size_t i=0; i<num_packages; i++) {\n+        add_parents_child(txns, package_size, i);\n+    }\n+\n+    /* Now we're ready */",
      "path": "src/bench/mempool_eviction.cpp",
      "position": 157,
      "original_position": 158,
      "commit_id": "a6fc02baae1be4b849653448d0522f99064aa94f",
      "original_commit_id": "a3a2e82a6eb70cd73723af38fa1a456ab553981d",
      "in_reply_to_id": 1143841355,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Didn't remove?",
      "created_at": "2023-03-22T09:18:08Z",
      "updated_at": "2023-03-22T09:26:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27019#discussion_r1144457060",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1144457060"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27019"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 85,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1144457784",
      "pull_request_review_id": 1352051877,
      "id": 1144457784,
      "node_id": "PRRC_kwDOABII585ENwo4",
      "diff_hunk": "@@ -21,116 +21,94 @@ static void AddTx(const CTransactionRef& tx, const CAmount& nFee, CTxMemPool& po\n         spendsCoinbase, sigOpCost, lp));\n }\n \n-// Right now this is only testing eviction performance in an extremely small\n-// mempool. Code needs to be written to generate a much wider variety of\n-// unique transactions for a more meaningful performance measurement.\n-static void MempoolEviction(benchmark::Bench& bench)\n+void add_parents_child(std::vector<CTransactionRef>& txns, size_t package_size, size_t set_num)\n+{\n+    // N+1 N-input-N-output txns, in a parents-and-child package\n+    // Where each tx takes an input from all prior txns\n+    const size_t num_puts = std::max(package_size - 1, (size_t)1);\n+    const size_t num_txns = package_size;\n+    for (size_t txn_index=0; txn_index<num_txns; txn_index++) {\n+        CMutableTransaction tx = CMutableTransaction();\n+        tx.vin.resize(num_puts);\n+        tx.vout.resize(num_puts);\n+        for (size_t put_index=0; put_index<num_puts; put_index++) {",
      "path": "src/bench/mempool_eviction.cpp",
      "position": 18,
      "original_position": 18,
      "commit_id": "a6fc02baae1be4b849653448d0522f99064aa94f",
      "original_commit_id": "a6fc02baae1be4b849653448d0522f99064aa94f",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Can you apply the changes to the other loops too? i.e.\r\n```suggestion\r\n        for (size_t put_index{0}; put_index < num_puts; ++put_index) {\r\n```",
      "created_at": "2023-03-22T09:18:40Z",
      "updated_at": "2023-03-22T09:26:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27019#discussion_r1144457784",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1144457784"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27019"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 34,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1144470215",
      "pull_request_review_id": 1352051877,
      "id": 1144470215,
      "node_id": "PRRC_kwDOABII585ENzrH",
      "diff_hunk": "@@ -21,116 +21,94 @@ static void AddTx(const CTransactionRef& tx, const CAmount& nFee, CTxMemPool& po\n         spendsCoinbase, sigOpCost, lp));\n }\n \n-// Right now this is only testing eviction performance in an extremely small\n-// mempool. Code needs to be written to generate a much wider variety of\n-// unique transactions for a more meaningful performance measurement.\n-static void MempoolEviction(benchmark::Bench& bench)\n+void add_parents_child(std::vector<CTransactionRef>& txns, size_t package_size, size_t set_num)\n+{\n+    // N+1 N-input-N-output txns, in a parents-and-child package\n+    // Where each tx takes an input from all prior txns\n+    const size_t num_puts = std::max(package_size - 1, (size_t)1);\n+    const size_t num_txns = package_size;\n+    for (size_t txn_index=0; txn_index<num_txns; txn_index++) {\n+        CMutableTransaction tx = CMutableTransaction();\n+        tx.vin.resize(num_puts);\n+        tx.vout.resize(num_puts);\n+        for (size_t put_index=0; put_index<num_puts; put_index++) {\n+            tx.vin[put_index].scriptSig = CScript() << CScriptNum(txn_index);\n+            tx.vin[put_index].scriptWitness.stack.push_back({1});\n+            tx.vout[put_index].scriptPubKey = CScript() << CScriptNum(set_num); // Ensures unique txid with set_num\n+            tx.vout[put_index].nValue = txn_index;\n+\n+            if (put_index < txn_index) {\n+                // We spend put_index's txn's in the next available slot for each previous transaction\n+                assert(put_index + txn_index >= 1);\n+                tx.vin[put_index].prevout = COutPoint(txns[put_index]->GetHash(), put_index + txn_index - 1);",
      "path": "src/bench/mempool_eviction.cpp",
      "position": 27,
      "original_position": 27,
      "commit_id": "a6fc02baae1be4b849653448d0522f99064aa94f",
      "original_commit_id": "a6fc02baae1be4b849653448d0522f99064aa94f",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Wait, if you're using `txns[put_index]` *and* you're using the same `txns` reference each time you call `add_parents_child`, aren't you having all subsequent packages spend outputs from txns[0:24] too? That means all these packages conflict with each other.\r\n\r\nYou could fix this by adding `set_num * package_size` or something to the index. But what would probably make a better interface is if `add_parents_child` returns the list of transactions it creates, and you append them to your larger list of packages.",
      "created_at": "2023-03-22T09:26:41Z",
      "updated_at": "2023-03-22T09:26:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27019#discussion_r1144470215",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1144470215"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27019"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 43,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1144872917",
      "pull_request_review_id": 1352671236,
      "id": 1144872917,
      "node_id": "PRRC_kwDOABII585EPV_V",
      "diff_hunk": "@@ -21,116 +21,94 @@ static void AddTx(const CTransactionRef& tx, const CAmount& nFee, CTxMemPool& po\n         spendsCoinbase, sigOpCost, lp));\n }\n \n-// Right now this is only testing eviction performance in an extremely small\n-// mempool. Code needs to be written to generate a much wider variety of\n-// unique transactions for a more meaningful performance measurement.\n-static void MempoolEviction(benchmark::Bench& bench)\n+void add_parents_child(std::vector<CTransactionRef>& txns, size_t package_size, size_t set_num)\n+{\n+    // N+1 N-input-N-output txns, in a parents-and-child package\n+    // Where each tx takes an input from all prior txns\n+    const size_t num_puts = std::max(package_size - 1, (size_t)1);\n+    const size_t num_txns = package_size;\n+    for (size_t txn_index=0; txn_index<num_txns; txn_index++) {\n+        CMutableTransaction tx = CMutableTransaction();\n+        tx.vin.resize(num_puts);\n+        tx.vout.resize(num_puts);\n+        for (size_t put_index=0; put_index<num_puts; put_index++) {\n+            tx.vin[put_index].scriptSig = CScript() << CScriptNum(txn_index);\n+            tx.vin[put_index].scriptWitness.stack.push_back({1});\n+            tx.vout[put_index].scriptPubKey = CScript() << CScriptNum(set_num); // Ensures unique txid with set_num\n+            tx.vout[put_index].nValue = txn_index;\n+\n+            if (put_index < txn_index) {\n+                // We spend put_index's txn's in the next available slot for each previous transaction\n+                assert(put_index + txn_index >= 1);\n+                tx.vin[put_index].prevout = COutPoint(txns[put_index]->GetHash(), put_index + txn_index - 1);",
      "path": "src/bench/mempool_eviction.cpp",
      "position": 27,
      "original_position": 27,
      "commit_id": "a6fc02baae1be4b849653448d0522f99064aa94f",
      "original_commit_id": "a6fc02baae1be4b849653448d0522f99064aa94f",
      "in_reply_to_id": 1144470215,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hmmm, traced out a package size of 4, looks like I'm referencing non-existent outputs, not re-using them(maybe both :) ).\r\n\r\nClearly this is confusing and broken either way.\r\n\r\nTo take a step back, after doing this draft I realized https://github.com/bitcoin/bitcoin/blob/master/src/bench/mempool_stress.cpp exists. I'm fine if this doesn't get merged if it doesn't add anything new? Helped me learn about the benchmarks if nothing else. Thoughts?",
      "created_at": "2023-03-22T14:07:17Z",
      "updated_at": "2023-03-22T14:15:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27019#discussion_r1144872917",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1144872917"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27019"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 43,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1144880345",
      "pull_request_review_id": 1352682126,
      "id": 1144880345,
      "node_id": "PRRC_kwDOABII585EPXzZ",
      "diff_hunk": "@@ -21,116 +21,94 @@ static void AddTx(const CTransactionRef& tx, const CAmount& nFee, CTxMemPool& po\n         spendsCoinbase, sigOpCost, lp));\n }\n \n-// Right now this is only testing eviction performance in an extremely small\n-// mempool. Code needs to be written to generate a much wider variety of\n-// unique transactions for a more meaningful performance measurement.\n-static void MempoolEviction(benchmark::Bench& bench)\n+void add_parents_child(std::vector<CTransactionRef>& txns, size_t package_size, size_t set_num)\n+{\n+    // N+1 N-input-N-output txns, in a parents-and-child package\n+    // Where each tx takes an input from all prior txns\n+    const size_t num_puts = std::max(package_size - 1, (size_t)1);\n+    const size_t num_txns = package_size;\n+    for (size_t txn_index=0; txn_index<num_txns; txn_index++) {\n+        CMutableTransaction tx = CMutableTransaction();\n+        tx.vin.resize(num_puts);\n+        tx.vout.resize(num_puts);\n+        for (size_t put_index=0; put_index<num_puts; put_index++) {\n+            tx.vin[put_index].scriptSig = CScript() << CScriptNum(txn_index);\n+            tx.vin[put_index].scriptWitness.stack.push_back({1});\n+            tx.vout[put_index].scriptPubKey = CScript() << CScriptNum(set_num); // Ensures unique txid with set_num\n+            tx.vout[put_index].nValue = txn_index;\n+\n+            if (put_index < txn_index) {\n+                // We spend put_index's txn's in the next available slot for each previous transaction\n+                assert(put_index + txn_index >= 1);\n+                tx.vin[put_index].prevout = COutPoint(txns[put_index]->GetHash(), put_index + txn_index - 1);",
      "path": "src/bench/mempool_eviction.cpp",
      "position": 27,
      "original_position": 27,
      "commit_id": "a6fc02baae1be4b849653448d0522f99064aa94f",
      "original_commit_id": "a6fc02baae1be4b849653448d0522f99064aa94f",
      "in_reply_to_id": 1144470215,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah true, I suppose `ComplexMemPool` is already benching eviction of packages. Fine with closing. The effort is appreciated :pray:",
      "created_at": "2023-03-22T14:12:19Z",
      "updated_at": "2023-03-22T14:12:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27019#discussion_r1144880345",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1144880345"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27019"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 43,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1144884349",
      "pull_request_review_id": 1352687916,
      "id": 1144884349,
      "node_id": "PRRC_kwDOABII585EPYx9",
      "diff_hunk": "@@ -21,116 +21,94 @@ static void AddTx(const CTransactionRef& tx, const CAmount& nFee, CTxMemPool& po\n         spendsCoinbase, sigOpCost, lp));\n }\n \n-// Right now this is only testing eviction performance in an extremely small\n-// mempool. Code needs to be written to generate a much wider variety of\n-// unique transactions for a more meaningful performance measurement.\n-static void MempoolEviction(benchmark::Bench& bench)\n+void add_parents_child(std::vector<CTransactionRef>& txns, size_t package_size, size_t set_num)\n+{\n+    // N+1 N-input-N-output txns, in a parents-and-child package\n+    // Where each tx takes an input from all prior txns\n+    const size_t num_puts = std::max(package_size - 1, (size_t)1);\n+    const size_t num_txns = package_size;\n+    for (size_t txn_index=0; txn_index<num_txns; txn_index++) {\n+        CMutableTransaction tx = CMutableTransaction();\n+        tx.vin.resize(num_puts);\n+        tx.vout.resize(num_puts);\n+        for (size_t put_index=0; put_index<num_puts; put_index++) {\n+            tx.vin[put_index].scriptSig = CScript() << CScriptNum(txn_index);\n+            tx.vin[put_index].scriptWitness.stack.push_back({1});\n+            tx.vout[put_index].scriptPubKey = CScript() << CScriptNum(set_num); // Ensures unique txid with set_num\n+            tx.vout[put_index].nValue = txn_index;\n+\n+            if (put_index < txn_index) {\n+                // We spend put_index's txn's in the next available slot for each previous transaction\n+                assert(put_index + txn_index >= 1);\n+                tx.vin[put_index].prevout = COutPoint(txns[put_index]->GetHash(), put_index + txn_index - 1);",
      "path": "src/bench/mempool_eviction.cpp",
      "position": 27,
      "original_position": 27,
      "commit_id": "a6fc02baae1be4b849653448d0522f99064aa94f",
      "original_commit_id": "a6fc02baae1be4b849653448d0522f99064aa94f",
      "in_reply_to_id": 1144470215,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I could change the PR to remove this silly bench.. :P",
      "created_at": "2023-03-22T14:15:00Z",
      "updated_at": "2023-03-22T14:15:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/27019#discussion_r1144884349",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1144884349"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/27019"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 43,
      "original_line": 43,
      "side": "RIGHT"
    }
  ]
}