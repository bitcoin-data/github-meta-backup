{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121",
    "id": 212497878,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MjEyNDk3ODc4",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14121",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/14121.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/14121.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14121",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14121/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/c7efb652f3543b001b4dd22186a354605b14f47e",
    "number": 14121,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "Index for BIP 157 block filters",
    "user": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This introduces a new BlockFilterIndex class, which is required for BIP 157 support.\r\n\r\nThe index is uses the asynchronous BaseIndex infrastructure driven by the ValidationInterface callbacks. Filters are stored sequentially in flat files and the disk location of each filter is indexed in LevelDB along with the filter hash and header. The index is designed to ensure persistence of filters reorganized out of the main chain to simplify the BIP 157 net implementation.\r\n\r\nStats (block height = 565500):\r\n- Syncing the index from scratch takes 45m\r\n- Total index size is 3.8 GiB",
    "labels": [
      {
        "id": 97470796,
        "node_id": "MDU6TGFiZWw5NzQ3MDc5Ng==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/UTXO%20Db%20and%20Indexes",
        "name": "UTXO Db and Indexes",
        "color": "fbca04",
        "default": false
      }
    ],
    "active_lock_reason": "resolved",
    "created_at": "2018-08-31T21:28:20Z",
    "updated_at": "2022-02-15T10:32:40Z",
    "closed_at": "2019-04-18T13:49:38Z",
    "mergeable_state": "unknown",
    "merged_at": "2019-04-18T13:49:38Z",
    "merge_commit_sha": "c7efb652f3543b001b4dd22186a354605b14f47e",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "jimpo:bip157-index",
      "ref": "bip157-index",
      "sha": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 18502174,
        "node_id": "MDEwOlJlcG9zaXRvcnkxODUwMjE3NA==",
        "name": "bitcoin",
        "full_name": "jimpo/bitcoin",
        "owner": {
          "login": "jimpo",
          "id": 881253,
          "node_id": "MDQ6VXNlcjg4MTI1Mw==",
          "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/jimpo",
          "html_url": "https://github.com/jimpo",
          "followers_url": "https://api.github.com/users/jimpo/followers",
          "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
          "organizations_url": "https://api.github.com/users/jimpo/orgs",
          "repos_url": "https://api.github.com/users/jimpo/repos",
          "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/jimpo/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/jimpo/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/jimpo/bitcoin",
        "archive_url": "https://api.github.com/repos/jimpo/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/jimpo/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/jimpo/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/jimpo/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/jimpo/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/jimpo/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/jimpo/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/jimpo/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/jimpo/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/jimpo/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/jimpo/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/jimpo/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/jimpo/bitcoin/events",
        "forks_url": "https://api.github.com/repos/jimpo/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/jimpo/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/jimpo/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/jimpo/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/jimpo/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/jimpo/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/jimpo/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/jimpo/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/jimpo/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/jimpo/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/jimpo/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/jimpo/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/jimpo/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/jimpo/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/jimpo/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/jimpo/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:jimpo/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/jimpo/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/jimpo/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/jimpo/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/jimpo/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/jimpo/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/jimpo/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/jimpo/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/jimpo/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/jimpo/bitcoin/hooks",
        "svn_url": "https://github.com/jimpo/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 1,
        "watchers_count": 1,
        "size": 126773,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2020-05-04T07:11:12Z",
        "created_at": "2014-04-06T23:53:29Z",
        "updated_at": "2019-08-03T04:25:20Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "e439aeb30c0439001a781c5979aec41e1fc2aa50",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69817,
        "watchers_count": 69817,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T22:42:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T01:13:41Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 1240,
    "deletions": 22,
    "changed_files": 18,
    "commits": 12,
    "review_comments": 103,
    "comments": 29
  },
  "events": [
    {
      "event": "head_ref_force_pushed",
      "id": 1821528501,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTgyMTUyODUwMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1821528501",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-08-31T21:35:21Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1821601977,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTgyMTYwMTk3Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1821601977",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-08-31T22:40:32Z"
    },
    {
      "event": "commented",
      "id": 417807823,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQxNzgwNzgyMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/417807823",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-08-31T22:47:52Z",
      "updated_at": "2019-04-03T18:15:59Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-417807823",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14121"
    },
    {
      "event": "reviewed",
      "id": 151572564,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTUxNTcyNTY0",
      "url": null,
      "actor": null,
      "commit_id": "1c2079125a394197e577be272dd5caa899278672",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "leishman",
        "id": 3648618,
        "node_id": "MDQ6VXNlcjM2NDg2MTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3648618?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/leishman",
        "html_url": "https://github.com/leishman",
        "followers_url": "https://api.github.com/users/leishman/followers",
        "following_url": "https://api.github.com/users/leishman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/leishman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/leishman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/leishman/subscriptions",
        "organizations_url": "https://api.github.com/users/leishman/orgs",
        "repos_url": "https://api.github.com/users/leishman/repos",
        "events_url": "https://api.github.com/users/leishman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/leishman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#pullrequestreview-151572564",
      "submitted_at": "2018-08-31T23:31:07Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
    },
    {
      "event": "reviewed",
      "id": 151572855,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTUxNTcyODU1",
      "url": null,
      "actor": null,
      "commit_id": "1c2079125a394197e577be272dd5caa899278672",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "leishman",
        "id": 3648618,
        "node_id": "MDQ6VXNlcjM2NDg2MTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3648618?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/leishman",
        "html_url": "https://github.com/leishman",
        "followers_url": "https://api.github.com/users/leishman/followers",
        "following_url": "https://api.github.com/users/leishman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/leishman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/leishman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/leishman/subscriptions",
        "organizations_url": "https://api.github.com/users/leishman/orgs",
        "repos_url": "https://api.github.com/users/leishman/repos",
        "events_url": "https://api.github.com/users/leishman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/leishman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#pullrequestreview-151572855",
      "submitted_at": "2018-08-31T23:33:47Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
    },
    {
      "event": "reviewed",
      "id": 151574447,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTUxNTc0NDQ3",
      "url": null,
      "actor": null,
      "commit_id": "1c2079125a394197e577be272dd5caa899278672",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "leishman",
        "id": 3648618,
        "node_id": "MDQ6VXNlcjM2NDg2MTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3648618?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/leishman",
        "html_url": "https://github.com/leishman",
        "followers_url": "https://api.github.com/users/leishman/followers",
        "following_url": "https://api.github.com/users/leishman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/leishman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/leishman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/leishman/subscriptions",
        "organizations_url": "https://api.github.com/users/leishman/orgs",
        "repos_url": "https://api.github.com/users/leishman/repos",
        "events_url": "https://api.github.com/users/leishman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/leishman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#pullrequestreview-151574447",
      "submitted_at": "2018-08-31T23:50:20Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1821662120,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTgyMTY2MjEyMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1821662120",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-08-31T23:59:34Z"
    },
    {
      "event": "reviewed",
      "id": 151575502,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTUxNTc1NTAy",
      "url": null,
      "actor": null,
      "commit_id": "b384c3e86c018c6e7cb701dd40dfa2a3f601e2a5",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#pullrequestreview-151575502",
      "submitted_at": "2018-09-01T00:02:53Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
    },
    {
      "event": "commented",
      "id": 417818486,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQxNzgxODQ4Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/417818486",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-01T00:17:26Z",
      "updated_at": "2018-09-01T00:17:26Z",
      "author_association": "CONTRIBUTOR",
      "body": "Storing large records in leveldb is generally a bad idea. Is there a particular reason this doesn't work like the undo data?",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-417818486",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14121"
    },
    {
      "event": "commented",
      "id": 417820776,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQxNzgyMDc3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/417820776",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-01T00:47:26Z",
      "updated_at": "2018-09-01T00:47:26Z",
      "author_association": "CONTRIBUTOR",
      "body": "@gmaxwell If by that you mean writing the filters sequentially in flat files then indexing the disk positions in LevelDB, I hadn't considered that, but it may be worthwhile. The downside of course is additional complexity. What are you mostly concerned about, read or write performance? I'd want to benchmark reads and writes to determine if the DB value sizes are problematic before making the change. With filters on average being 2% of block size and a LevelDB file size limit of 2 MiB, each file could still store ~200 filters (ignoring keys and overhead and such).",
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-417820776",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14121"
    },
    {
      "event": "mentioned",
      "id": 1821686677,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTgyMTY4NjY3Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1821686677",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-01T00:47:26Z"
    },
    {
      "event": "subscribed",
      "id": 1821686678,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE4MjE2ODY2Nzg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1821686678",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-01T00:47:26Z"
    },
    {
      "event": "labeled",
      "id": 1821833831,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDE4MjE4MzM4MzE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1821833831",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-01T09:49:12Z",
      "label": {
        "name": "UTXO Db and Indexes",
        "color": "fbca04"
      }
    },
    {
      "event": "commented",
      "id": 417978694,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQxNzk3ODY5NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/417978694",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-03T01:45:53Z",
      "updated_at": "2018-09-03T01:47:48Z",
      "author_association": "CONTRIBUTOR",
      "body": "@gmaxwell I put together a (not-production-ready) [branch](https://github.com/jimpo/bitcoin/tree/bip157-index-ff) to test your suggestion of writing filters to flat files. In sample size n=1 experiments, I measured that the time to write the entire block index was <1% faster using flat files, and reading 5,000 sequential filters (starting at height 500,000) was 11% slower. The total storage space consumed is nearly the same (3.4 GiB total). Happy to provide the log files/iPython notebooks I used if you'd like.\r\n\r\nGiven the additional complexity and absence of significantly improved performance, I think writing filters directly into LevelDB is the way to go.",
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-417978694",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14121"
    },
    {
      "event": "mentioned",
      "id": 1822498557,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTgyMjQ5ODU1Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1822498557",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-03T01:45:53Z"
    },
    {
      "event": "subscribed",
      "id": 1822498558,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE4MjI0OTg1NTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1822498558",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-03T01:45:53Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1823867691,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTgyMzg2NzY5MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1823867691",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-03T17:06:21Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1823869535,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTgyMzg2OTUzNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1823869535",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-03T17:08:32Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1823930669,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTgyMzkzMDY2OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1823930669",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-03T18:28:38Z"
    },
    {
      "event": "reviewed",
      "id": 152367186,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTUyMzY3MTg2",
      "url": null,
      "actor": null,
      "commit_id": "9b1e7a6cf213590e016bc26f2a094f2b6d59eb93",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#pullrequestreview-152367186",
      "submitted_at": "2018-09-05T07:35:45Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
    },
    {
      "event": "reviewed",
      "id": 152367624,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTUyMzY3NjI0",
      "url": null,
      "actor": null,
      "commit_id": "9b1e7a6cf213590e016bc26f2a094f2b6d59eb93",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#pullrequestreview-152367624",
      "submitted_at": "2018-09-05T07:37:09Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
    },
    {
      "event": "reviewed",
      "id": 152367896,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTUyMzY3ODk2",
      "url": null,
      "actor": null,
      "commit_id": "9b1e7a6cf213590e016bc26f2a094f2b6d59eb93",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#pullrequestreview-152367896",
      "submitted_at": "2018-09-05T07:38:03Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
    },
    {
      "event": "reviewed",
      "id": 153234072,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTUzMjM0MDcy",
      "url": null,
      "actor": null,
      "commit_id": "9b1e7a6cf213590e016bc26f2a094f2b6d59eb93",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#pullrequestreview-153234072",
      "submitted_at": "2018-09-07T07:43:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
    },
    {
      "event": "reviewed",
      "id": 153399005,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTUzMzk5MDA1",
      "url": null,
      "actor": null,
      "commit_id": "9b1e7a6cf213590e016bc26f2a094f2b6d59eb93",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK.\r\n\r\nCan you mention `-blockfilterindex` and `getblockfilter` in the PR description, as well as perhaps add a release note?\r\n\r\nIt's nice to be able to quickly delete an index, so having a separate file for each type makes sense to me (as is the case now: `indexes/blockindex/basic/...`).\r\n\r\nLightly tested on macOS. I get a few mismatching headers compared to the [test vectors](https://github.com/bitcoin/bips/blob/master/bip-0158.mediawiki#appendix-c-test-vectors):\r\n\r\n```\r\nsrc/bitcoin-cli getblockfilter 00000000fd3ceb2404ff07a785c7fdcc76619edc8ed61bd25134eaa22084366a \"basic\"\r\n{\r\n  \"filter\": \"0db414c859a07e8205876354a210a75042d0463404913d61a8e068e58a3ae2aa080026\",\r\n  \"header\": \"c582d51c0ca365e3fcf36c51cb646d7f83a67e867cb4743fd2128e3e022b700c\"\r\n}\r\n\r\n000000000000015d6077a411a8f5cc95caf775ccf11c54e27df75ce58d187313 \r\n-> \"header\": \"546c574a0472144bcaf9b6aeabf26372ad87c7af7d1ee0dbfae5e099abeae49c\"\r\n\r\n0000000000000c00901f2049055e2a437c819d79a3d54fd63e6af796cd7b8a79\r\n-> \"header\": \"0965a544743bbfa36f254446e75630c09404b3d164a261892372977538928ed5\r\n```\r\n\r\nThe filters do match.\r\n\r\nWe should probably include those test vectors. In addition, it would be nice to have script to compare every single block with the btcd RPC, testnet and mainnet. ",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#pullrequestreview-153399005",
      "submitted_at": "2018-09-07T15:47:49Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
    },
    {
      "event": "reviewed",
      "id": 153558959,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTUzNTU4OTU5",
      "url": null,
      "actor": null,
      "commit_id": "9b1e7a6cf213590e016bc26f2a094f2b6d59eb93",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "good idea ",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#pullrequestreview-153558959",
      "submitted_at": "2018-09-08T16:52:06Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
    },
    {
      "event": "mentioned",
      "id": 1836630582,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTgzNjYzMDU4Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1836630582",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-10T17:42:36Z"
    },
    {
      "event": "subscribed",
      "id": 1836630583,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE4MzY2MzA1ODM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1836630583",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-10T17:42:36Z"
    },
    {
      "event": "labeled",
      "id": 1836719402,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDE4MzY3MTk0MDI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1836719402",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-10T18:22:22Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1836756337,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTgzNjc1NjMzNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1836756337",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-10T18:38:10Z"
    },
    {
      "event": "commented",
      "id": 420033880,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDAzMzg4MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/420033880",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-10T19:36:57Z",
      "updated_at": "2018-09-10T19:36:57Z",
      "author_association": "CONTRIBUTOR",
      "body": "@Sjors Thanks for testing and finding that incompatibility! It has been fixed with 775c160ee266bc61d1dcb6f35265354e3f9f5dbc, and roasbeef or I will update the BIP to clarify this point.",
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-420033880",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14121"
    },
    {
      "event": "mentioned",
      "id": 1836875857,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTgzNjg3NTg1Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1836875857",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-10T19:36:57Z"
    },
    {
      "event": "subscribed",
      "id": 1836875858,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE4MzY4NzU4NTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1836875858",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-10T19:36:57Z"
    },
    {
      "event": "unlabeled",
      "id": 1836974016,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MTgzNjk3NDAxNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1836974016",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-10T20:24:34Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 420277474,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDI3NzQ3NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/420277474",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T13:37:39Z",
      "updated_at": "2018-09-11T13:37:39Z",
      "author_association": "MEMBER",
      "body": "@jimpo ok, those three examples now match. Is there an up to date Btcd branch that can be used to compare other blocks? cc @Roasbeef ",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-420277474",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14121"
    },
    {
      "event": "mentioned",
      "id": 1838559747,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTgzODU1OTc0Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1838559747",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T13:37:39Z"
    },
    {
      "event": "subscribed",
      "id": 1838559748,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE4Mzg1NTk3NDg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1838559748",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T13:37:39Z"
    },
    {
      "event": "mentioned",
      "id": 1838559751,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTgzODU1OTc1MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1838559751",
      "actor": {
        "login": "Roasbeef",
        "id": 998190,
        "node_id": "MDQ6VXNlcjk5ODE5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/998190?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Roasbeef",
        "html_url": "https://github.com/Roasbeef",
        "followers_url": "https://api.github.com/users/Roasbeef/followers",
        "following_url": "https://api.github.com/users/Roasbeef/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Roasbeef/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Roasbeef/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Roasbeef/subscriptions",
        "organizations_url": "https://api.github.com/users/Roasbeef/orgs",
        "repos_url": "https://api.github.com/users/Roasbeef/repos",
        "events_url": "https://api.github.com/users/Roasbeef/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Roasbeef/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T13:37:39Z"
    },
    {
      "event": "subscribed",
      "id": 1838559752,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE4Mzg1NTk3NTI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1838559752",
      "actor": {
        "login": "Roasbeef",
        "id": 998190,
        "node_id": "MDQ6VXNlcjk5ODE5MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/998190?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Roasbeef",
        "html_url": "https://github.com/Roasbeef",
        "followers_url": "https://api.github.com/users/Roasbeef/followers",
        "following_url": "https://api.github.com/users/Roasbeef/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Roasbeef/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Roasbeef/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Roasbeef/subscriptions",
        "organizations_url": "https://api.github.com/users/Roasbeef/orgs",
        "repos_url": "https://api.github.com/users/Roasbeef/repos",
        "events_url": "https://api.github.com/users/Roasbeef/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Roasbeef/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T13:37:39Z"
    },
    {
      "event": "commented",
      "id": 420333183,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDMzMzE4Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/420333183",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T16:22:18Z",
      "updated_at": "2018-09-11T16:22:18Z",
      "author_association": "CONTRIBUTOR",
      "body": "@Sjors There is nothing that checks block by block, but the filter headers commit to all previous filters in the chain, so comparing the headers at the chain tip on both change is equivalent to comparing blocks individually. btcd also has an RPC for fetching filter headers `getcfheader`.",
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-420333183",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14121"
    },
    {
      "event": "mentioned",
      "id": 1838987379,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTgzODk4NzM3OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1838987379",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T16:22:18Z"
    },
    {
      "event": "subscribed",
      "id": 1838987380,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE4Mzg5ODczODA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1838987380",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T16:22:18Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1839171739,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTgzOTE3MTczOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1839171739",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T17:44:33Z"
    },
    {
      "event": "reviewed",
      "id": 157931825,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTU3OTMxODI1",
      "url": null,
      "actor": null,
      "commit_id": "d4d3ba7ceb6121b56e2fa38151e88f95993881ea",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#pullrequestreview-157931825",
      "submitted_at": "2018-09-23T07:58:51Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
    },
    {
      "event": "reviewed",
      "id": 158709722,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTU4NzA5NzIy",
      "url": null,
      "actor": null,
      "commit_id": "d4d3ba7ceb6121b56e2fa38151e88f95993881ea",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#pullrequestreview-158709722",
      "submitted_at": "2018-09-25T19:35:18Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
    },
    {
      "event": "reviewed",
      "id": 158709853,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTU4NzA5ODUz",
      "url": null,
      "actor": null,
      "commit_id": "d4d3ba7ceb6121b56e2fa38151e88f95993881ea",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#pullrequestreview-158709853",
      "submitted_at": "2018-09-25T19:35:33Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
    },
    {
      "event": "reviewed",
      "id": 158709983,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTU4NzA5OTgz",
      "url": null,
      "actor": null,
      "commit_id": "d4d3ba7ceb6121b56e2fa38151e88f95993881ea",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#pullrequestreview-158709983",
      "submitted_at": "2018-09-25T19:35:50Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
    },
    {
      "event": "reviewed",
      "id": 158710127,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTU4NzEwMTI3",
      "url": null,
      "actor": null,
      "commit_id": "d4d3ba7ceb6121b56e2fa38151e88f95993881ea",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#pullrequestreview-158710127",
      "submitted_at": "2018-09-25T19:36:10Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
    },
    {
      "event": "reviewed",
      "id": 158710207,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTU4NzEwMjA3",
      "url": null,
      "actor": null,
      "commit_id": "d4d3ba7ceb6121b56e2fa38151e88f95993881ea",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#pullrequestreview-158710207",
      "submitted_at": "2018-09-25T19:36:23Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
    },
    {
      "event": "reviewed",
      "id": 158711011,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTU4NzExMDEx",
      "url": null,
      "actor": null,
      "commit_id": "d4d3ba7ceb6121b56e2fa38151e88f95993881ea",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#pullrequestreview-158711011",
      "submitted_at": "2018-09-25T19:38:22Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
    },
    {
      "event": "reviewed",
      "id": 158711101,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTU4NzExMTAx",
      "url": null,
      "actor": null,
      "commit_id": "d4d3ba7ceb6121b56e2fa38151e88f95993881ea",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#pullrequestreview-158711101",
      "submitted_at": "2018-09-25T19:38:37Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
    },
    {
      "event": "reviewed",
      "id": 158711158,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTU4NzExMTU4",
      "url": null,
      "actor": null,
      "commit_id": "d4d3ba7ceb6121b56e2fa38151e88f95993881ea",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#pullrequestreview-158711158",
      "submitted_at": "2018-09-25T19:38:48Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
    },
    {
      "event": "reviewed",
      "id": 158711226,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTU4NzExMjI2",
      "url": null,
      "actor": null,
      "commit_id": "d4d3ba7ceb6121b56e2fa38151e88f95993881ea",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#pullrequestreview-158711226",
      "submitted_at": "2018-09-25T19:39:00Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
    },
    {
      "event": "reviewed",
      "id": 158711391,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTU4NzExMzkx",
      "url": null,
      "actor": null,
      "commit_id": "d4d3ba7ceb6121b56e2fa38151e88f95993881ea",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#pullrequestreview-158711391",
      "submitted_at": "2018-09-25T19:39:30Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
    },
    {
      "event": "reviewed",
      "id": 160118664,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTYwMTE4NjY0",
      "url": null,
      "actor": null,
      "commit_id": "d4d3ba7ceb6121b56e2fa38151e88f95993881ea",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#pullrequestreview-160118664",
      "submitted_at": "2018-09-30T15:35:06Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
    },
    {
      "event": "labeled",
      "id": 1949264194,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDE5NDkyNjQxOTQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1949264194",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-11-06T15:31:48Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1953500501,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTk1MzUwMDUwMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1953500501",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-11-08T06:50:47Z"
    },
    {
      "event": "unlabeled",
      "id": 1953518457,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MTk1MzUxODQ1Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1953518457",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-11-08T07:05:32Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1953633403,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTk1MzYzMzQwMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1953633403",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-11-08T08:20:59Z"
    },
    {
      "event": "labeled",
      "id": 1957088827,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDE5NTcwODg4Mjc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1957088827",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-11-09T15:16:21Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "referenced",
      "id": 2042101025,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDIwNDIxMDEwMjU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2042101025",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "a4564b9b079ac9b87200cea8a2a4e3d2134925ef",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4564b9b079ac9b87200cea8a2a4e3d2134925ef",
      "created_at": "2018-12-22T13:18:31Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2046421578,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjA0NjQyMTU3OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2046421578",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-27T20:50:30Z"
    },
    {
      "event": "reviewed",
      "id": 188266174,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTg4MjY2MTc0",
      "url": null,
      "actor": null,
      "commit_id": "e6024f3810907e6fbec34e4fb736d1162fc03c09",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#pullrequestreview-188266174",
      "submitted_at": "2018-12-28T10:47:45Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
    },
    {
      "event": "unlabeled",
      "id": 2047147119,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MjA0NzE0NzExOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2047147119",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-28T11:42:31Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 451246692,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTI0NjY5Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/451246692",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-03T19:14:06Z",
      "updated_at": "2019-01-03T19:39:00Z",
      "author_association": "CONTRIBUTOR",
      "body": "NAK.  Storing large variable size blobs is leveldb is entirely unlike our other usage, imposes differet loads, memory behaviors, and would make it infeasible to drop leveldb in the future for e.g. an open hash table.  Creating an imaginary performance concern and then measuring that it isn't small doesn't change any of this.\r\n\r\n[I apologize for missing the prior reply until now-- September was a bad and busy month for the project.]",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-451246692",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14121"
    },
    {
      "event": "commented",
      "id": 451248814,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTI0ODgxNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/451248814",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-03T19:21:29Z",
      "updated_at": "2019-01-03T19:21:29Z",
      "author_association": "MEMBER",
      "body": "@gmaxwell what's your preferred alternative? Flatfiles? \r\n\r\nIt's worth noting that each index lives in its own ldb database at the moment, so UTXO storage can be migrated independently of any given index. As @jimpo notes above, reading out of flatfiles is 11% slower than ldb per his measurements. Given that block filters are obviously a read-heavy part of the system, I think that's a significant enough difference to justify use of ldb.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-451248814",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14121"
    },
    {
      "event": "mentioned",
      "id": 2053124816,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjA1MzEyNDgxNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2053124816",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-03T19:21:29Z"
    },
    {
      "event": "subscribed",
      "id": 2053124817,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDIwNTMxMjQ4MTc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2053124817",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-03T19:21:29Z"
    },
    {
      "event": "mentioned",
      "id": 2053124819,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjA1MzEyNDgxOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2053124819",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-03T19:21:29Z"
    },
    {
      "event": "subscribed",
      "id": 2053124820,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDIwNTMxMjQ4MjA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2053124820",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-03T19:21:29Z"
    },
    {
      "event": "commented",
      "id": 451252591,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTI1MjU5MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/451252591",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-03T19:34:48Z",
      "updated_at": "2019-01-03T19:34:48Z",
      "author_association": "CONTRIBUTOR",
      "body": "> what's your preferred alternative? Flatfiles?\r\n\r\nStoring the like block and undo data: files with the data in them and file_no,offset in the in memory index.\r\n\r\n>  As @jimpo notes above, reading out of flatfiles is 11% slower than ldb per his measurements\r\n\r\nA microbenchmark is probably not particularly informative there.   As leveldb is adding another layer of caching and memory use.  Implemented correctly and compariably it shouldn't be possible for anything else to be faster, since it's the most direct way of storing the data.",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-451252591",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14121"
    },
    {
      "event": "mentioned",
      "id": 2053153262,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjA1MzE1MzI2Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2053153262",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-03T19:34:48Z"
    },
    {
      "event": "subscribed",
      "id": 2053153263,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDIwNTMxNTMyNjM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2053153263",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-03T19:34:48Z"
    },
    {
      "event": "mentioned",
      "id": 2056845194,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjA1Njg0NTE5NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2056845194",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-07T06:42:27Z"
    },
    {
      "event": "subscribed",
      "id": 2056845195,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDIwNTY4NDUxOTU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2056845195",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-07T06:42:27Z"
    },
    {
      "event": "commented",
      "id": 451838178,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTgzODE3OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/451838178",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-07T06:50:29Z",
      "updated_at": "2019-01-07T06:50:52Z",
      "author_association": "CONTRIBUTOR",
      "body": "@gmaxwell To be clear, you are suggesting adding block filter header, hash, and filter disk location to the CBlockIndex entries? This is an additional 72 bytes per block. I think this has significant disadvantages compared to the the approach of creating an optional index which is built asynchronously and can be deleted/rebuilt independently, mostly in terms of modularity. I'd be OK with a separate index (like in this PR), that stores references to filters saved in flat files, but putting them in the block index seems way too tightly coupled to me. Especially if new filter types are added in the future.",
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-451838178",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14121"
    },
    {
      "event": "mentioned",
      "id": 2056854864,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjA1Njg1NDg2NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2056854864",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-07T06:50:29Z"
    },
    {
      "event": "subscribed",
      "id": 2056854865,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDIwNTY4NTQ4NjU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2056854865",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-07T06:50:29Z"
    },
    {
      "event": "commented",
      "id": 452086521,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MjA4NjUyMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/452086521",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-07T21:22:56Z",
      "updated_at": "2019-01-07T21:22:56Z",
      "author_association": "MEMBER",
      "body": "I'm really not a fan of the idea of shoving more data into CBlockIndex entries/existing leveldbs, however I do agree with Greg's suggestion that we store the actual data in flat files. That would imply adding a new leveldb which just stores mappings to offsets in flat files, then loads the data from there.",
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-452086521",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14121"
    },
    {
      "event": "labeled",
      "id": 2064459878,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDIwNjQ0NTk4Nzg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2064459878",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-09T22:44:22Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 191393886,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTkxMzkzODg2",
      "url": null,
      "actor": null,
      "commit_id": "e6024f3810907e6fbec34e4fb736d1162fc03c09",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#pullrequestreview-191393886",
      "submitted_at": "2019-01-10T20:11:45Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
    },
    {
      "event": "mentioned",
      "id": 2093185235,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjA5MzE4NTIzNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2093185235",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-24T00:17:08Z"
    },
    {
      "event": "subscribed",
      "id": 2093185236,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDIwOTMxODUyMzY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2093185236",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-01-24T00:17:08Z"
    },
    {
      "event": "referenced",
      "id": 2175990707,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDIxNzU5OTA3MDc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2175990707",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "2d46f1be0c3c8b7287aa1f62bb1f5b4a8d00ff6e",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d46f1be0c3c8b7287aa1f62bb1f5b4a8d00ff6e",
      "created_at": "2019-03-02T22:21:43Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2176430213,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjE3NjQzMDIxMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2176430213",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-03-03T18:27:19Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2176438028,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjE3NjQzODAyOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2176438028",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-03-03T18:43:52Z"
    },
    {
      "event": "unlabeled",
      "id": 2176453206,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MjE3NjQ1MzIwNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2176453206",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-03-03T19:17:50Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2176464246,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjE3NjQ2NDI0Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2176464246",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-03-03T19:40:41Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2176494918,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjE3NjQ5NDkxOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2176494918",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-03-03T20:43:50Z"
    },
    {
      "event": "commented",
      "id": 469070357,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ2OTA3MDM1Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/469070357",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-03-03T22:14:01Z",
      "updated_at": "2019-03-03T22:14:01Z",
      "author_association": "CONTRIBUTOR",
      "body": "This has been rebased and modified to store filter data in flat files as discussed.",
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-469070357",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14121"
    },
    {
      "event": "reviewed",
      "id": 210781142,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjEwNzgxMTQy",
      "url": null,
      "actor": null,
      "commit_id": "9ab0b7a32f07ce5194b7bd980f8ce7ad1ab59105",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "I tested on macOS 10.14.3 on a testnet node that was previously pruned and needed a reindex: `bitcoind -reindex -blockfilterindex=1`. That seemed to work well, because it created \r\nabout 8 `fltr0000?.dat` files. But then I restarted the node a while later and it generated another 8 such files.\r\n\r\nI did `getblockfilter` for testnet block 0000000000000014ef5083802666af5ed6966131154556cf09f9db0ede1fca8a at height 1,483,520: \r\n\r\n```json\r\n{\r\n  \"filter\": \"8dc5594cd8195fdd5be5393cf7aee01e4dec7c155aed480f9f910659a6c65d60d71eabcb521310fc0799aac0451596534ed4265247f30e76015ac886b3946dd8143da6171cd9f146932adc9f755207ecf7354b63972b4e4bcd1467f96f0455fdaed2e4fdc2a427eb577771854de488878e8eb861d0d818ab9200bf3ef0734e4dad964e4aa3771f81db3997fb13ecfc4c2283a4723f41787dbab24dfe006bfcc85e227d17fb967f3577b89b0242d16fe43a858d31d1fa5396868d809d84822e71409228c73c41124d520580fd18524c8cecf152ccf274377d3897397edf0ba47e46336d7b8b43f1436c94d8172f2d8a06b2c23b90b9e9793d04aa3d756b0231af99b8ff21044666e813d3dc40ef7a2c1bb7a737a9246b9fb24c309374a705ca0526b7949f7df898702d0dac76bac30e64770ab79068c0ac83d24bf5876df74e81dda9b537e42bb2e8211e6e87f0580357216d9d7b0c9607d15517cb590bb86a7d984e4e34de1a40c76d4ca33657a4882d62717932\",\r\n  \"header\": \"eaf0306f5c3856bdf202898fbabc915c855bb69eaa9df3d788b5f2794e6b2699\"\r\n}\r\n```\r\n\r\nSomeone should compare that to btcd (or with a p2p network Python script from a known node).\r\n\r\nCode looks well organised but a bit over my head to review atm.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#pullrequestreview-210781142",
      "submitted_at": "2019-03-05T16:47:00Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
    },
    {
      "event": "commented",
      "id": 470085547,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MDA4NTU0Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/470085547",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-03-06T12:14:17Z",
      "updated_at": "2019-03-06T12:14:17Z",
      "author_association": "MEMBER",
      "body": "Mainnet result for block 0000000000000000001cd1a6b5d0d226d2af982c87d7c82dc033936af84c7d88 at height 565,900:\r\n\r\n```json\r\n{\r\n  \"filter\": \"\",\r\n  \"header\": \"eca99df66c442c1f5fbd50075c06c311dd8b802ca97cbdc2637948f25d598720\"\r\n}\r\n```",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-470085547",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14121"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2196295412,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjE5NjI5NTQxMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2196295412",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-03-12T08:05:11Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2196299679,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjE5NjI5OTY3OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2196299679",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-03-12T08:07:15Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2196304147,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjE5NjMwNDE0Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2196304147",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-03-12T08:09:34Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2198184160,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjE5ODE4NDE2MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2198184160",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-03-12T19:03:11Z"
    },
    {
      "event": "commented",
      "id": 473066978,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MzA2Njk3OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/473066978",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-03-14T21:17:59Z",
      "updated_at": "2019-03-14T21:18:38Z",
      "author_association": "CONTRIBUTOR",
      "body": "Currently testing a little bit...\r\n~~Would it make sense to log more infos? I think along the `Pre-allocating up to position 0x700000 in fltr00006.dat` it would be nice to know at what height the index currently is (maybe every 10k height-change or so).~~\r\n\r\nSorry,.. saw `Syncing basic block filter index with block chain from height XXX` too late. NM",
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-473066978",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14121"
    },
    {
      "event": "commented",
      "id": 473074977,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MzA3NDk3Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/473074977",
      "actor": {
        "login": "flack",
        "id": 425166,
        "node_id": "MDQ6VXNlcjQyNTE2Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/425166?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/flack",
        "html_url": "https://github.com/flack",
        "followers_url": "https://api.github.com/users/flack/followers",
        "following_url": "https://api.github.com/users/flack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/flack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/flack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/flack/subscriptions",
        "organizations_url": "https://api.github.com/users/flack/orgs",
        "repos_url": "https://api.github.com/users/flack/repos",
        "events_url": "https://api.github.com/users/flack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/flack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-03-14T21:39:15Z",
      "updated_at": "2019-03-14T21:39:15Z",
      "author_association": "CONTRIBUTOR",
      "body": "just pasting this here so it doesn't get lost:\r\n\r\n```\r\n2019-03-14T20:08:25  <sipa> it should be called BIP158, there is no p2p protocol support in there :)\r\n```",
      "user": {
        "login": "flack",
        "id": 425166,
        "node_id": "MDQ6VXNlcjQyNTE2Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/425166?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/flack",
        "html_url": "https://github.com/flack",
        "followers_url": "https://api.github.com/users/flack/followers",
        "following_url": "https://api.github.com/users/flack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/flack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/flack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/flack/subscriptions",
        "organizations_url": "https://api.github.com/users/flack/orgs",
        "repos_url": "https://api.github.com/users/flack/repos",
        "events_url": "https://api.github.com/users/flack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/flack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-473074977",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14121"
    },
    {
      "event": "commented",
      "id": 473250387,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MzI1MDM4Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/473250387",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-03-15T11:23:24Z",
      "updated_at": "2019-03-15T11:23:24Z",
      "author_association": "CONTRIBUTOR",
      "body": "Took ~45mins to build the index on Intel i7.\r\nHere is also a histogram of filter-sizes over heights.\r\n\r\n![blk-filter-graph](https://user-images.githubusercontent.com/178464/54428143-d2a20280-471c-11e9-9357-dbdfca0c573e.png)\r\n",
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-473250387",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14121"
    },
    {
      "event": "commented",
      "id": 473671699,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MzY3MTY5OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/473671699",
      "actor": {
        "login": "nopara73",
        "id": 9156103,
        "node_id": "MDQ6VXNlcjkxNTYxMDM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9156103?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nopara73",
        "html_url": "https://github.com/nopara73",
        "followers_url": "https://api.github.com/users/nopara73/followers",
        "following_url": "https://api.github.com/users/nopara73/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/nopara73/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/nopara73/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/nopara73/subscriptions",
        "organizations_url": "https://api.github.com/users/nopara73/orgs",
        "repos_url": "https://api.github.com/users/nopara73/repos",
        "events_url": "https://api.github.com/users/nopara73/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/nopara73/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-03-17T14:38:20Z",
      "updated_at": "2019-03-27T08:50:14Z",
      "author_association": "NONE",
      "body": "Concept ACK.\r\n\r\n45 minutes is very impressive. In Wasabi our first iteration of building bech32 only filter table took two weeks on a powerful server. (Should be a couple of days now, but still bech32 constraint is a huge cheat for us.)  \r\n\r\n**Update:** It took 11.5h with the latest code on Wasabi, so that's how much optimization was added since the very start. Still nowhere near 45m.",
      "user": {
        "login": "nopara73",
        "id": 9156103,
        "node_id": "MDQ6VXNlcjkxNTYxMDM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9156103?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nopara73",
        "html_url": "https://github.com/nopara73",
        "followers_url": "https://api.github.com/users/nopara73/followers",
        "following_url": "https://api.github.com/users/nopara73/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/nopara73/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/nopara73/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/nopara73/subscriptions",
        "organizations_url": "https://api.github.com/users/nopara73/orgs",
        "repos_url": "https://api.github.com/users/nopara73/repos",
        "events_url": "https://api.github.com/users/nopara73/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/nopara73/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-473671699",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14121"
    },
    {
      "event": "commented",
      "id": 473689165,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MzY4OTE2NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/473689165",
      "actor": {
        "login": "PatrickZGW",
        "id": 2649936,
        "node_id": "MDQ6VXNlcjI2NDk5MzY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2649936?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PatrickZGW",
        "html_url": "https://github.com/PatrickZGW",
        "followers_url": "https://api.github.com/users/PatrickZGW/followers",
        "following_url": "https://api.github.com/users/PatrickZGW/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PatrickZGW/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PatrickZGW/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PatrickZGW/subscriptions",
        "organizations_url": "https://api.github.com/users/PatrickZGW/orgs",
        "repos_url": "https://api.github.com/users/PatrickZGW/repos",
        "events_url": "https://api.github.com/users/PatrickZGW/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PatrickZGW/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-03-17T17:53:38Z",
      "updated_at": "2019-03-17T17:53:38Z",
      "author_association": "NONE",
      "body": "Took me about 9 minutes to build the index on testnet on Intel(R) Xeon(R) CPU E5-2650 v4 @ 2.20GHz\r\n\r\nTestnet block 1485036 (0000000000000070cef6099001404170fd4860ac15eede7b9947261fd54d8bf3):\r\n\r\n```\r\n{\r\n  \"filter\": \"3b42da6549c8cfe1037a1e0673b7ca7cf823cae390d8aa21c1074f732ba50f73cb765e8ba0bdc1e093a1fbce25cb35b0cb95c41be226d77080512422eb2278fc007984fca6eabb00fcbf7511da438ac9f14b571ae330914745414d85c40d92fb11e09940b6a75deecf2eafcd7c8909444c8480d62d925c234b07f629cc21a4ce7fc57a1982eab8e9f0cb48d7af3273184dd42f5696625424c7e234a4\",\r\n  \"header\": \"a5d51fd3a49a361134fff81270edc210952f2250d71edaf5a16e234eea2910c2\"\r\n}\r\n```",
      "user": {
        "login": "PatrickZGW",
        "id": 2649936,
        "node_id": "MDQ6VXNlcjI2NDk5MzY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2649936?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PatrickZGW",
        "html_url": "https://github.com/PatrickZGW",
        "followers_url": "https://api.github.com/users/PatrickZGW/followers",
        "following_url": "https://api.github.com/users/PatrickZGW/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PatrickZGW/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PatrickZGW/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PatrickZGW/subscriptions",
        "organizations_url": "https://api.github.com/users/PatrickZGW/orgs",
        "repos_url": "https://api.github.com/users/PatrickZGW/repos",
        "events_url": "https://api.github.com/users/PatrickZGW/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PatrickZGW/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-473689165",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14121"
    },
    {
      "event": "commented",
      "id": 474489360,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NDQ4OTM2MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/474489360",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-03-19T17:42:11Z",
      "updated_at": "2019-03-19T17:42:11Z",
      "author_association": "MEMBER",
      "body": "This seems ready with no more dependencies. Should it be added to high priority review list (https://github.com/bitcoin/bitcoin/projects/8)?",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-474489360",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14121"
    },
    {
      "event": "reviewed",
      "id": 216394604,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjE2Mzk0NjA0",
      "url": null,
      "actor": null,
      "commit_id": "634693641d73f3bc70ba2c508bd4cb15d69e87b6",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#pullrequestreview-216394604",
      "submitted_at": "2019-03-19T20:14:41Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
    },
    {
      "event": "referenced",
      "id": 2217440368,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDIyMTc0NDAzNjg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2217440368",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "93623eea71e7159e367b1b1888418099a5307983",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93623eea71e7159e367b1b1888418099a5307983",
      "created_at": "2019-03-20T16:31:07Z"
    },
    {
      "event": "labeled",
      "id": 2217467768,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDIyMTc0Njc3Njg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2217467768",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-03-20T16:39:18Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 216380234,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjE2MzgwMjM0",
      "url": null,
      "actor": null,
      "commit_id": "96b3234b682c0c8d639aa866c9888376e4f49cf0",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Tested ACK https://github.com/bitcoin/bitcoin/pull/14121/commits/634693641d73f3bc70ba2c508bd4cb15d69e87b6\r\n\r\nCode and tests are *really* nice. Well done.\r\n\r\nThe mainnet index took 154 minutes to generate on my Intel(R) Xeon(R) Silver 4116 CPU @ 2.10GHz (with an nvme SSD). Here's a pretty unsurprising graph of progress per height:\r\n\r\n![block-filter-gen](https://user-images.githubusercontent.com/73197/54716419-0bcae000-4b2c-11e9-9bd7-c507568ff056.png)\r\n\r\nMy filter for block 0000000000000000001cd1a6b5d0d226d2af982c87d7c82dc033936af84c7d88 at height 565,900 matches @Sjors':\r\n```sh\r\n$ ./src/bitcoin-cli getblockfilter 0000000000000000001cd1a6b5d0d226d2af982c87d7c82dc033936af84c7d88\r\n{\r\n  \"filter\": \"\",\r\n  \"header\": \"eca99df66c442c1f5fbd50075c06c311dd8b802ca97cbdc2637948f25d598720\"\r\n}\r\n```\r\n\r\nFeel free to ignore my nits. Nice work!",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#pullrequestreview-216380234",
      "submitted_at": "2019-03-20T20:17:29Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
    },
    {
      "event": "commented",
      "id": 475181971,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NTE4MTk3MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/475181971",
      "actor": {
        "login": "Empact",
        "id": 5470,
        "node_id": "MDQ6VXNlcjU0NzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Empact",
        "html_url": "https://github.com/Empact",
        "followers_url": "https://api.github.com/users/Empact/followers",
        "following_url": "https://api.github.com/users/Empact/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Empact/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Empact/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
        "organizations_url": "https://api.github.com/users/Empact/orgs",
        "repos_url": "https://api.github.com/users/Empact/repos",
        "events_url": "https://api.github.com/users/Empact/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Empact/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-03-21T10:41:48Z",
      "updated_at": "2019-03-21T18:38:46Z",
      "author_association": "MEMBER",
      "body": "Pushed some suggested changes as commits here: https://github.com/Empact/bitcoin/commits/bip157-index\r\n\r\nNothing major - all in the vein of minimizing / simplifying / protecting. Split across small commits in hopes of being helpful.",
      "user": {
        "login": "Empact",
        "id": 5470,
        "node_id": "MDQ6VXNlcjU0NzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Empact",
        "html_url": "https://github.com/Empact",
        "followers_url": "https://api.github.com/users/Empact/followers",
        "following_url": "https://api.github.com/users/Empact/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Empact/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Empact/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
        "organizations_url": "https://api.github.com/users/Empact/orgs",
        "repos_url": "https://api.github.com/users/Empact/repos",
        "events_url": "https://api.github.com/users/Empact/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Empact/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-475181971",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14121"
    },
    {
      "event": "commented",
      "id": 475267003,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NTI2NzAwMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/475267003",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-03-21T15:05:14Z",
      "updated_at": "2019-03-21T15:05:14Z",
      "author_association": "MEMBER",
      "body": "> Pushed some suggested changes as commits here: Empact/bitcoin@bip157-index\r\n\r\nThese are all pretty cosmetic changes that would necessitate comprehensive re-review from a lot of the people who have already looked at this code. I think this PR should be tested as-is for merge, and changes like those you've suggested should be filed as follow-up PRs.\r\n\r\nI like the direction that some of your changes go, but I think it's wiser to marshal scarce review time towards the critical path of getting BIP157/158 to usability.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-475267003",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14121"
    },
    {
      "event": "commented",
      "id": 475366522,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NTM2NjUyMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/475366522",
      "actor": {
        "login": "Empact",
        "id": 5470,
        "node_id": "MDQ6VXNlcjU0NzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Empact",
        "html_url": "https://github.com/Empact",
        "followers_url": "https://api.github.com/users/Empact/followers",
        "following_url": "https://api.github.com/users/Empact/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Empact/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Empact/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
        "organizations_url": "https://api.github.com/users/Empact/orgs",
        "repos_url": "https://api.github.com/users/Empact/repos",
        "events_url": "https://api.github.com/users/Empact/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Empact/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-03-21T19:14:48Z",
      "updated_at": "2019-03-21T19:14:48Z",
      "author_association": "MEMBER",
      "body": "Concept ACK\r\n\r\nI'm also very much in favor of getting this in, and would like to see it on the high priority for review list. Note it needs a rebase at least before that happens, so I don't think my nits are out of order. That said, feel free to ignore them.\r\n\r\nI would particularly make a case for https://github.com/Empact/bitcoin/commit/b1367c206852b62797b04139a85acce3506bc1d3, for usability. Here's an example of Nicolas running into this issue: https://github.com/bitcoin/bitcoin/issues/15147",
      "user": {
        "login": "Empact",
        "id": 5470,
        "node_id": "MDQ6VXNlcjU0NzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Empact",
        "html_url": "https://github.com/Empact",
        "followers_url": "https://api.github.com/users/Empact/followers",
        "following_url": "https://api.github.com/users/Empact/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Empact/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Empact/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
        "organizations_url": "https://api.github.com/users/Empact/orgs",
        "repos_url": "https://api.github.com/users/Empact/repos",
        "events_url": "https://api.github.com/users/Empact/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Empact/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-475366522",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14121"
    },
    {
      "event": "added_to_project",
      "id": 2220810000,
      "node_id": "MDE5OkFkZGVkVG9Qcm9qZWN0RXZlbnQyMjIwODEwMDAw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2220810000",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-03-21T19:28:24Z",
      "project_card": {
        "id": 19184475,
        "url": "https://api.github.com/projects/columns/cards/19184475",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "reviewed",
      "id": 217892935,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjE3ODkyOTM1",
      "url": null,
      "actor": null,
      "commit_id": "96b3234b682c0c8d639aa866c9888376e4f49cf0",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "I've looked though most of this PR and it really looks great. I need to look at some parts more closely, but I almost don't have anything to comment on since it is so well put together. I should finish the review on Monday.\r\n\r\nI like most of Empact's changes too, but a lot of them are subjective improvements. If you're going to use them it might be nice to just incorporate them in the rebase like he mentioned.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#pullrequestreview-217892935",
      "submitted_at": "2019-03-22T20:12:48Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
    },
    {
      "event": "mentioned",
      "id": 2224042344,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjIyNDA0MjM0NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2224042344",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-03-22T23:43:05Z"
    },
    {
      "event": "subscribed",
      "id": 2224042346,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDIyMjQwNDIzNDY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2224042346",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-03-22T23:43:05Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2224168365,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjIyNDE2ODM2NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2224168365",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-03-23T04:22:49Z"
    },
    {
      "event": "unlabeled",
      "id": 2224169553,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MjIyNDE2OTU1Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2224169553",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-03-23T04:26:51Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 475838354,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NTgzODM1NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/475838354",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-03-23T04:29:45Z",
      "updated_at": "2019-03-23T04:29:45Z",
      "author_association": "CONTRIBUTOR",
      "body": "I have rebased and incorporated b1367c206852b62797b04139a85acce3506bc1d3 and 6c1a5adc68d704189825532522a9fa1b5a4aa235 of @Empact 's changes.\r\n\r\nThanks for the reviews!",
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-475838354",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14121"
    },
    {
      "event": "mentioned",
      "id": 2224170346,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjIyNDE3MDM0Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2224170346",
      "actor": {
        "login": "Empact",
        "id": 5470,
        "node_id": "MDQ6VXNlcjU0NzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Empact",
        "html_url": "https://github.com/Empact",
        "followers_url": "https://api.github.com/users/Empact/followers",
        "following_url": "https://api.github.com/users/Empact/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Empact/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Empact/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
        "organizations_url": "https://api.github.com/users/Empact/orgs",
        "repos_url": "https://api.github.com/users/Empact/repos",
        "events_url": "https://api.github.com/users/Empact/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Empact/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-03-23T04:29:45Z"
    },
    {
      "event": "subscribed",
      "id": 2224170347,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDIyMjQxNzAzNDc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2224170347",
      "actor": {
        "login": "Empact",
        "id": 5470,
        "node_id": "MDQ6VXNlcjU0NzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Empact",
        "html_url": "https://github.com/Empact",
        "followers_url": "https://api.github.com/users/Empact/followers",
        "following_url": "https://api.github.com/users/Empact/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Empact/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Empact/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
        "organizations_url": "https://api.github.com/users/Empact/orgs",
        "repos_url": "https://api.github.com/users/Empact/repos",
        "events_url": "https://api.github.com/users/Empact/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Empact/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-03-23T04:29:45Z"
    },
    {
      "event": "reviewed",
      "id": 218080024,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjE4MDgwMDI0",
      "url": null,
      "actor": null,
      "commit_id": "e6c665450648dad8981ec981d6c8c6475e9aa1f8",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "lucayepa",
        "id": 697159,
        "node_id": "MDQ6VXNlcjY5NzE1OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/697159?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lucayepa",
        "html_url": "https://github.com/lucayepa",
        "followers_url": "https://api.github.com/users/lucayepa/followers",
        "following_url": "https://api.github.com/users/lucayepa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/lucayepa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/lucayepa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/lucayepa/subscriptions",
        "organizations_url": "https://api.github.com/users/lucayepa/orgs",
        "repos_url": "https://api.github.com/users/lucayepa/repos",
        "events_url": "https://api.github.com/users/lucayepa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/lucayepa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#pullrequestreview-218080024",
      "submitted_at": "2019-03-24T12:41:22Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
    },
    {
      "event": "reviewed",
      "id": 218549960,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjE4NTQ5OTYw",
      "url": null,
      "actor": null,
      "commit_id": "e3845e4a2a27d69a09ac0f8744b23530ad3bbe9e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "> I should finish the review on Monday\r\n\r\nApologies! I didn't get quite as far with the review as I would have liked. I left many minor suggestions, but as usual please just change whatever interests you and ignore anything else.\r\n\r\nStarted review (will update list below with progress).\r\n- [X] e3845e4a2a27d69a09ac0f8744b23530ad3bbe9e index: Allow atomic commits of index state to be extended. (1/12)\r\n- [X] c368acb6e341bb34e86f011164157ca5ad3d14ef index: Ensure block locator is not stale after chain reorg. (2/12)\r\n- [X] a0bd77e2ad5bdbaeca529a38335b6a6c2f3fd5d9 blockfilter: Functions to translate filter types to/from names. (3/12)\r\n- [X] 4fa1f82bd0db7e8b823e130130fef277d9b1005c serialize: Serialization support for big-endian 32-bit ints. (4/12)\r\n- [X] 5964d2f97a221b898dbc477ca8f06ddfbe1d241e index: Implement block filter index with write operations. (5/12)\r\n- [x] 88ecade18fd615add2550c89f6152bc44fc4ee5e index: Implement lookup methods on block filter index. (6/12)\r\n- [x] 9283baae04dddf09576e541786cc429158077f82 test: Unit tests for block index filter. (7/12)\r\n- [x] d85dd54792f7e1d4ab3d224930e35ed36c6db18a test: Unit test for block filter index reorg handling. (8/12)\r\n- [x] 7a955d1ce6ecfce767c367bd2b787867c0767b47 index: Access functions for global block filter indexes. (9/12)\r\n- [x] 88fac30e85e907891c92b8df456d925369d8bc06 init: Add CLI option to enable block filter index. (10/12)\r\n- [x] 1426fb7128029e88ff0b3d6491d0f0e6d6d2ddab rpc: Add getblockfilter RPC method. (11/12)\r\n- [x] e6c665450648dad8981ec981d6c8c6475e9aa1f8 blockfilter: Update BIP 158 test vectors. (12/12)\r\n\r\n\r\n\r\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#pullrequestreview-218549960",
      "submitted_at": "2019-03-25T21:22:29Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
    },
    {
      "event": "reviewed",
      "id": 219145915,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjE5MTQ1OTE1",
      "url": null,
      "actor": null,
      "commit_id": "e3845e4a2a27d69a09ac0f8744b23530ad3bbe9e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Slightly tested ACK e6c665450648dad8981ec981d6c8c6475e9aa1f8 (I just watched the \"Syncing basic block filter index with block chain from height\" messages and tested the RPC). Again no major comments, feel free to ignore them.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#pullrequestreview-219145915",
      "submitted_at": "2019-03-28T23:24:58Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MzY4Mzg0ZjFkMjY3YjAxMWUwM2E4MDVmOTM0ZjVjNDdlMmNhMWIy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4368384f1d267b011e03a805f934f5c47e2ca1b2",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/4368384f1d267b011e03a805f934f5c47e2ca1b2",
      "tree": {
        "sha": "19895592c19ffb3c2ceee7509cdda57988bf1a5f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/19895592c19ffb3c2ceee7509cdda57988bf1a5f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e439aeb30c0439001a781c5979aec41e1fc2aa50",
          "sha": "e439aeb30c0439001a781c5979aec41e1fc2aa50",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/e439aeb30c0439001a781c5979aec41e1fc2aa50"
        }
      ],
      "message": "index: Allow atomic commits of index state to be extended.",
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-04-06T19:03:21Z"
      },
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-03-03T02:35:55Z"
      },
      "sha": "4368384f1d267b011e03a805f934f5c47e2ca1b2"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MmI3YTRmMDk0MDlmNjBhMzVmYzk5ZGRiNzBmOTE5OWFjNTExYTUz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/62b7a4f09409f60a35fc99ddb70f9199ac511a53",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/62b7a4f09409f60a35fc99ddb70f9199ac511a53",
      "tree": {
        "sha": "d1dcd104c38707ebb15efd1dcf2c7cc6bbc1cb39",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d1dcd104c38707ebb15efd1dcf2c7cc6bbc1cb39"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4368384f1d267b011e03a805f934f5c47e2ca1b2",
          "sha": "4368384f1d267b011e03a805f934f5c47e2ca1b2",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/4368384f1d267b011e03a805f934f5c47e2ca1b2"
        }
      ],
      "message": "index: Ensure block locator is not stale after chain reorg.",
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-04-06T19:03:21Z"
      },
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2018-08-27T22:26:29Z"
      },
      "sha": "62b7a4f09409f60a35fc99ddb70f9199ac511a53"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYTZmZjlhNmY3MDEzOTU5NDM2MmI0YjRhNmI4MTY3MDdiYjE2NWM4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ba6ff9a6f70139594362b4b4a6b816707bb165c8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ba6ff9a6f70139594362b4b4a6b816707bb165c8",
      "tree": {
        "sha": "bfd72dd218f42fd57a402cb9dece4d56ab1e9659",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bfd72dd218f42fd57a402cb9dece4d56ab1e9659"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/62b7a4f09409f60a35fc99ddb70f9199ac511a53",
          "sha": "62b7a4f09409f60a35fc99ddb70f9199ac511a53",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/62b7a4f09409f60a35fc99ddb70f9199ac511a53"
        }
      ],
      "message": "blockfilter: Functions to translate filter types to/from names.",
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-04-06T19:03:21Z"
      },
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2018-08-27T22:42:35Z"
      },
      "sha": "ba6ff9a6f70139594362b4b4a6b816707bb165c8"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYWQyMzM4ZWY5MGJmNjYxYzE5MzA1YWZhZjJmYjY0ODk5N2IwYzky",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ad2338ef90bf661c19305afaf2fb648997b0c92",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2ad2338ef90bf661c19305afaf2fb648997b0c92",
      "tree": {
        "sha": "1b479c647b8fbb3cccbe64ec908d8a5b3b1dc52a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1b479c647b8fbb3cccbe64ec908d8a5b3b1dc52a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ba6ff9a6f70139594362b4b4a6b816707bb165c8",
          "sha": "ba6ff9a6f70139594362b4b4a6b816707bb165c8",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ba6ff9a6f70139594362b4b4a6b816707bb165c8"
        }
      ],
      "message": "serialize: Serialization support for big-endian 32-bit ints.",
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-04-06T19:03:21Z"
      },
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-03-12T07:20:40Z"
      },
      "sha": "2ad2338ef90bf661c19305afaf2fb648997b0c92"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NWE3NmUzNjE5OWViYTIyODg1NmQ1OTMxOGNiNTRjYTY0Y2E2YjU3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/75a76e36199eba228856d59318cb54ca64ca6b57",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/75a76e36199eba228856d59318cb54ca64ca6b57",
      "tree": {
        "sha": "dc0a24d1c8d9f9cc55fddc6f71cf43a09f4e9385",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dc0a24d1c8d9f9cc55fddc6f71cf43a09f4e9385"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ad2338ef90bf661c19305afaf2fb648997b0c92",
          "sha": "2ad2338ef90bf661c19305afaf2fb648997b0c92",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2ad2338ef90bf661c19305afaf2fb648997b0c92"
        }
      ],
      "message": "index: Implement block filter index with write operations.",
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-04-06T19:10:22Z"
      },
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2018-08-28T00:01:24Z"
      },
      "sha": "75a76e36199eba228856d59318cb54ca64ca6b57"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNWU4MjAwZGI3NmYwNmQzNTA5OWRhNTAyNDM5ZGNiZGZkMGExYjNl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b5e8200db76f06d35099da502439dcbdfd0a1b3e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b5e8200db76f06d35099da502439dcbdfd0a1b3e",
      "tree": {
        "sha": "2e549a4f0bbf8ce5ad78faabbe5745f936f89a7f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2e549a4f0bbf8ce5ad78faabbe5745f936f89a7f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/75a76e36199eba228856d59318cb54ca64ca6b57",
          "sha": "75a76e36199eba228856d59318cb54ca64ca6b57",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/75a76e36199eba228856d59318cb54ca64ca6b57"
        }
      ],
      "message": "index: Implement lookup methods on block filter index.",
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-04-06T19:10:22Z"
      },
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2018-08-28T01:39:28Z"
      },
      "sha": "b5e8200db76f06d35099da502439dcbdfd0a1b3e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YmNmMDk5OGMwYjQxMTFjYWRiOWYwZDU4NDU0MjY2ZDQxZmQ3NThi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6bcf0998c0b4111cadb9f0d58454266d41fd758b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6bcf0998c0b4111cadb9f0d58454266d41fd758b",
      "tree": {
        "sha": "14b2975273be01536e03293b5560dbc9a4a477eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/14b2975273be01536e03293b5560dbc9a4a477eb"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b5e8200db76f06d35099da502439dcbdfd0a1b3e",
          "sha": "b5e8200db76f06d35099da502439dcbdfd0a1b3e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b5e8200db76f06d35099da502439dcbdfd0a1b3e"
        }
      ],
      "message": "test: Unit tests for block index filter.",
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-04-06T19:10:22Z"
      },
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2018-08-28T01:44:43Z"
      },
      "sha": "6bcf0998c0b4111cadb9f0d58454266d41fd758b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYmM5MGU0ZTdiZjdmZWY1NjgzMGIzM2IxZmJhNjc4ZmQwZGJkNmQ4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2bc90e4e7bf7fef56830b33b1fba678fd0dbd6d8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2bc90e4e7bf7fef56830b33b1fba678fd0dbd6d8",
      "tree": {
        "sha": "11df4de2628d6a6edad4b8eda0383191cd5c1772",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/11df4de2628d6a6edad4b8eda0383191cd5c1772"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6bcf0998c0b4111cadb9f0d58454266d41fd758b",
          "sha": "6bcf0998c0b4111cadb9f0d58454266d41fd758b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6bcf0998c0b4111cadb9f0d58454266d41fd758b"
        }
      ],
      "message": "test: Unit test for block filter index reorg handling.",
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-04-06T19:10:22Z"
      },
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2018-08-28T16:04:09Z"
      },
      "sha": "2bc90e4e7bf7fef56830b33b1fba678fd0dbd6d8"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzphY2NjOGI4YjE4NDJlZDZkNTIyYjcxYTA1Njc3N2JjYWM4ZjM5ZTgx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/accc8b8b1842ed6d522b71a056777bcac8f39e81",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/accc8b8b1842ed6d522b71a056777bcac8f39e81",
      "tree": {
        "sha": "a94aec9035ccd602835e18997f6f19b116f5dc1b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a94aec9035ccd602835e18997f6f19b116f5dc1b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2bc90e4e7bf7fef56830b33b1fba678fd0dbd6d8",
          "sha": "2bc90e4e7bf7fef56830b33b1fba678fd0dbd6d8",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2bc90e4e7bf7fef56830b33b1fba678fd0dbd6d8"
        }
      ],
      "message": "index: Access functions for global block filter indexes.",
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-04-06T19:10:55Z"
      },
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2018-08-30T15:30:23Z"
      },
      "sha": "accc8b8b1842ed6d522b71a056777bcac8f39e81"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZjM1MTA1MDk2OGYyOTA3ODdjZDVmYTQ1NmQzOTQzODBmNjRmZWMz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ff351050968f290787cd5fa456d394380f64fec3",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ff351050968f290787cd5fa456d394380f64fec3",
      "tree": {
        "sha": "c3becebf7085a6a37f8ec6db5862d90afe164d9f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c3becebf7085a6a37f8ec6db5862d90afe164d9f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/accc8b8b1842ed6d522b71a056777bcac8f39e81",
          "sha": "accc8b8b1842ed6d522b71a056777bcac8f39e81",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/accc8b8b1842ed6d522b71a056777bcac8f39e81"
        }
      ],
      "message": "init: Add CLI option to enable block filter index.",
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-04-06T19:10:55Z"
      },
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2018-08-30T05:15:50Z"
      },
      "sha": "ff351050968f290787cd5fa456d394380f64fec3"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOTMwOGM5ZTIxZDk4YTc4MTg2MjUyMThiMjJiMzdmMjNmODc4MTZm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/19308c9e21d98a7818625218b22b37f23f87816f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/19308c9e21d98a7818625218b22b37f23f87816f",
      "tree": {
        "sha": "5046a7c2251f871cd6112a85186c3f5e8bc583a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5046a7c2251f871cd6112a85186c3f5e8bc583a0"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ff351050968f290787cd5fa456d394380f64fec3",
          "sha": "ff351050968f290787cd5fa456d394380f64fec3",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ff351050968f290787cd5fa456d394380f64fec3"
        }
      ],
      "message": "rpc: Add getblockfilter RPC method.\n\nRetrieves and returns block filter and header from index.",
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-04-06T19:10:55Z"
      },
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2018-08-31T20:28:12Z"
      },
      "sha": "19308c9e21d98a7818625218b22b37f23f87816f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjN2VmYjY1MmYzNTQzYjAwMWI0ZGQyMjE4NmEzNTQ2MDViMTRmNDdl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c7efb652f3543b001b4dd22186a354605b14f47e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c7efb652f3543b001b4dd22186a354605b14f47e",
      "tree": {
        "sha": "9c2231a09331f9759aa56aaba7f325a52b8c9d4f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9c2231a09331f9759aa56aaba7f325a52b8c9d4f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/19308c9e21d98a7818625218b22b37f23f87816f",
          "sha": "19308c9e21d98a7818625218b22b37f23f87816f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/19308c9e21d98a7818625218b22b37f23f87816f"
        }
      ],
      "message": "blockfilter: Update BIP 158 test vectors.\n\nNew tests for the case of non-standard OP_RETURN outputs.",
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-04-06T19:10:55Z"
      },
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2018-09-10T18:33:39Z"
      },
      "sha": "c7efb652f3543b001b4dd22186a354605b14f47e"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2257595843,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjI1NzU5NTg0Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2257595843",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-04-06T19:11:10Z"
    },
    {
      "event": "reviewed",
      "id": 223888002,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjIzODg4MDAy",
      "url": null,
      "actor": null,
      "commit_id": "4368384f1d267b011e03a805f934f5c47e2ca1b2",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Slightly tested ACK c7efb652f3543b001b4dd22186a354605b14f47e (I just rebuilt the index with the updated PR and tested the RPC). Changes since last review: rebase, fixed compile errors in internal commits, new comments, updated error messages, tweaked cache size logic, renamed commit method, renamed constants and globals, fixed whitespace, extra BlockFilterIndex::Init error check.\r\n\r\nI think this change is in a good state and could be merged in it's current form. I left more comments but they are minor and you should ignore them if you don't want to deal with them.\r\n\r\nI think this change has had almost enough review to be merged. It would benefit from a re-ack by @jamesob, and some more cursory reviews by other contributors to confirm that this only creates a new blockindex, and is disabled by default, and has no effect on the existing txindex or validation or wallet or anything crazy like that.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#pullrequestreview-223888002",
      "submitted_at": "2019-04-10T00:08:32Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
    },
    {
      "event": "commented",
      "id": 481548896,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MTU0ODg5Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/481548896",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-04-10T06:16:26Z",
      "updated_at": "2019-04-10T06:16:26Z",
      "author_association": "CONTRIBUTOR",
      "body": "@ryanofsky Let me clarify the intended behavior of `Commit`, so we can figure out how to properly word it. The design really stems from the optimization where the block index is only flushed to disk infrequently or on shutdown, and the auxiliary indexes mimic this.\r\n\r\nDuring normal operation, when the chain is extended by new blocks, entries are written into the database height index and their corresponding filters are written to flat files. However, the in-database pointers to the latest block in the index and end position of the flat file sequence are *not* updated. This happens only on the `ChainStateFlushed` callback, or at the end of the initial catchup sync. There are a few reasons. 1) Until the `ChainStateFlushed` callback is received, we cannot guarantee that the new block entries added to the index will have corresponding block index entries that have been flushed to disk. This is in part why we store a block locator instead of a single block index (in case the index happens to get ahead of the block index), but it would be best to avoid writing ahead of the block index regardless. 2) BlockConnected can be implemented without taking `cs_main`, but if it had to generate a block locator to write to DB_BEST_BLOCK, then it would need to take `cs_main`. So the idea is that BlockConnected advances the in-memory state of the index for sure and writes some data to the database and to disk, but these database/disk writes will not be seen until the new block locator is written. **This is why m_best_block is updated separately from DB_BEST_BLOCK**. In the event of an unclean crash, we are not guaranteed that the index will resume from the state it was last in -- it may have to catch up from further behind, but we do ensure that it is not corrupted.\r\n\r\nNow, with the block filter index, two things change. First, since it has an index of things by height, we need to ensure tip of the index is overwritten to the fork point (and committed to disk) before overwriting any height index entries, hence the `Rewind` method. Secondly, if we commit the new best block in the index, we also need to ensure the flat files have been flushed to disk, which is why `CommitInternal` is overridden in the subclass.\r\n\r\nSo what happens if the call to Commit the latest flat files and DB_BEST_BLOCK fails? It's not good (and it logs an error), but the in-memory and database state of the index are valid even if the database state is lagging behind. Which is why I think the best way to recover is to continue until the next Commit. If the index ever reaches some point where a database or disk write fails during BlockConnected, then a fatal error is raised and bitcoind shuts down.\r\n\r\nIf you have a way of simplifying the logic so that 1) m_best_block_index is separate (and generally further ahead) than DB_BEST_BLOCK and 2) index state is guaranteed to be committed to the fork point of a reorg before connecting new blocks, then I'm open to suggestions. Thoughts?",
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-481548896",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14121"
    },
    {
      "event": "mentioned",
      "id": 2264981299,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjI2NDk4MTI5OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2264981299",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-04-10T06:16:27Z"
    },
    {
      "event": "subscribed",
      "id": 2264981300,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDIyNjQ5ODEzMDA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2264981300",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-04-10T06:16:27Z"
    },
    {
      "event": "commented",
      "id": 481845558,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MTg0NTU1OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/481845558",
      "actor": {
        "login": "zquestz",
        "id": 83898,
        "node_id": "MDQ6VXNlcjgzODk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/83898?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zquestz",
        "html_url": "https://github.com/zquestz",
        "followers_url": "https://api.github.com/users/zquestz/followers",
        "following_url": "https://api.github.com/users/zquestz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zquestz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zquestz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zquestz/subscriptions",
        "organizations_url": "https://api.github.com/users/zquestz/orgs",
        "repos_url": "https://api.github.com/users/zquestz/repos",
        "events_url": "https://api.github.com/users/zquestz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zquestz/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-04-10T20:16:51Z",
      "updated_at": "2019-04-10T20:16:51Z",
      "author_association": "NONE",
      "body": "@jimpo do you have a list of the remaining tasks for full Neutrino support (BIP 157 and 158) that need to be done once this PR lands? Would love to get an idea of the remaining scope of work. =)",
      "user": {
        "login": "zquestz",
        "id": 83898,
        "node_id": "MDQ6VXNlcjgzODk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/83898?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zquestz",
        "html_url": "https://github.com/zquestz",
        "followers_url": "https://api.github.com/users/zquestz/followers",
        "following_url": "https://api.github.com/users/zquestz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zquestz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zquestz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zquestz/subscriptions",
        "organizations_url": "https://api.github.com/users/zquestz/orgs",
        "repos_url": "https://api.github.com/users/zquestz/repos",
        "events_url": "https://api.github.com/users/zquestz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zquestz/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-481845558",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14121"
    },
    {
      "event": "mentioned",
      "id": 2267257890,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjI2NzI1Nzg5MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2267257890",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-04-10T20:16:51Z"
    },
    {
      "event": "subscribed",
      "id": 2267257891,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDIyNjcyNTc4OTE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2267257891",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-04-10T20:16:51Z"
    },
    {
      "event": "commented",
      "id": 482627562,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MjYyNzU2Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/482627562",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-04-12T15:56:06Z",
      "updated_at": "2019-04-12T15:56:06Z",
      "author_association": "MEMBER",
      "body": "utACK c7efb652f3543b001b4dd22186a354605b14f47e",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-482627562",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14121"
    },
    {
      "event": "commented",
      "id": 482731887,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MjczMTg4Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/482731887",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-04-12T21:40:29Z",
      "updated_at": "2019-04-12T21:42:32Z",
      "author_association": "MEMBER",
      "body": "re: https://github.com/bitcoin/bitcoin/pull/14121#pullrequestreview-223888002 from me\r\n\r\n> I think this change has had almost enough review to be merged.\r\n\r\nThere was a new ACK from Marco since I wrote this, so maybe this is about ready?\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-481548896 from jimpo\r\n\r\n> If you have a way of simplifying the logic so that 1) m_best_block_index is separate (and generally further ahead) than DB_BEST_BLOCK and 2) index state is guaranteed to be committed to the fork point of a reorg before connecting new blocks, then I'm open to suggestions. Thoughts?\r\n\r\nWe're just talking past each other. I already made the simplification in https://github.com/bitcoin/bitcoin/pull/14121#discussion_r270178850. Here is a rebased version: 00c3a91ae23b9f6951c51ee4060d1d20a852e721 ([`pr/blockfilt`](https://github.com/ryanofsky/bitcoin/commits/pr/blockfilt)) with some extra renames, since I think neither of us liked the previous names. Here what I see as advantages of this change:\r\n\r\n1) Simpler control flow, no more rewind function calling other rewind function calling commit calling other commit.\r\n2) No more [call super](https://en.wikipedia.org/wiki/Call_super) footgun and anti-pattern\r\n3) No misleading \"commit\" language and claims about atomicity\r\n4) Clearly distinct BaseIndex internal methods and hook methods implemented by subclasses.\r\n5) Slightly less code overall\r\n\r\nUnless there's a bug or actual drawback to using this change, I hope you'll consider it. But either way the PR looks good to me. I tested and ACKed it already and will keep reviewing if there are more updates.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-482731887",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14121"
    },
    {
      "event": "merged",
      "id": 2285775467,
      "node_id": "MDExOk1lcmdlZEV2ZW50MjI4NTc3NTQ2Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2285775467",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7efb652f3543b001b4dd22186a354605b14f47e",
      "created_at": "2019-04-18T13:49:38Z"
    },
    {
      "event": "closed",
      "id": 2285775476,
      "node_id": "MDExOkNsb3NlZEV2ZW50MjI4NTc3NTQ3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2285775476",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-04-18T13:49:38Z"
    },
    {
      "event": "referenced",
      "id": 2285777921,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDIyODU3Nzc5MjE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2285777921",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e4beef611a423e9f836fa210a51634e94f14d830",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4beef611a423e9f836fa210a51634e94f14d830",
      "created_at": "2019-04-18T13:50:24Z"
    },
    {
      "event": "reviewed",
      "id": 226081343,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjI2MDgxMzQz",
      "url": null,
      "actor": null,
      "commit_id": "62b7a4f09409f60a35fc99ddb70f9199ac511a53",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Just some documentation feedback that I withheld earlier to avoid stalling this pull.",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#pullrequestreview-226081343",
      "submitted_at": "2019-04-18T13:59:22Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
    },
    {
      "event": "commented",
      "id": 484522904,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ4NDUyMjkwNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/484522904",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-04-18T14:02:04Z",
      "updated_at": "2019-04-18T14:02:04Z",
      "author_association": "MEMBER",
      "body": "@ryanofsky Your proposed changes should probably go in a follow up pull request, as they also refactor txindex, which should be untouched by this pr",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-484522904",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14121"
    },
    {
      "event": "mentioned",
      "id": 2285815539,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjI4NTgxNTUzOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2285815539",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-04-18T14:02:05Z"
    },
    {
      "event": "subscribed",
      "id": 2285815542,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDIyODU4MTU1NDI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2285815542",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-04-18T14:02:05Z"
    },
    {
      "event": "referenced",
      "id": 2285932405,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDIyODU5MzI0MDU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2285932405",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "693c743a32e49ebd9cb09054ddcea91c2d209d69",
      "commit_url": "https://api.github.com/repos/MarcoFalke/b-c/commits/693c743a32e49ebd9cb09054ddcea91c2d209d69",
      "created_at": "2019-04-18T14:38:52Z"
    },
    {
      "event": "removed_from_project",
      "id": 2286177931,
      "node_id": "MDIzOlJlbW92ZWRGcm9tUHJvamVjdEV2ZW50MjI4NjE3NzkzMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2286177931",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-04-18T16:02:04Z",
      "project_card": {
        "id": 19184475,
        "url": "https://api.github.com/projects/columns/cards/19184475",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "head_ref_deleted",
      "id": 2286844678,
      "node_id": "MDE5OkhlYWRSZWZEZWxldGVkRXZlbnQyMjg2ODQ0Njc4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2286844678",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-04-18T20:27:53Z"
    },
    {
      "event": "mentioned",
      "id": 2708723256,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjcwODcyMzI1Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2708723256",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-13T15:29:30Z"
    },
    {
      "event": "subscribed",
      "id": 2708723257,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI3MDg3MjMyNTc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2708723257",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-13T15:29:30Z"
    },
    {
      "event": "referenced",
      "id": 2721073492,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3MjEwNzM0OTI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2721073492",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "4f42284fc0c5f3ce3fa595fc2f17bf22c994a5f0",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f42284fc0c5f3ce3fa595fc2f17bf22c994a5f0",
      "created_at": "2019-10-17T12:24:25Z"
    },
    {
      "event": "referenced",
      "id": 2725827470,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3MjU4Mjc0NzA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2725827470",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "3def055b0064443bce250dc4e785d4e1e2ccefd2",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/3def055b0064443bce250dc4e785d4e1e2ccefd2",
      "created_at": "2019-10-18T18:28:22Z"
    },
    {
      "event": "referenced",
      "id": 3399983386,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMzOTk5ODMzODY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3399983386",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "db7603658a31a151caa381558dcd750ba52a5221",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/db7603658a31a151caa381558dcd750ba52a5221",
      "created_at": "2020-06-03T00:50:07Z"
    },
    {
      "event": "referenced",
      "id": 3399983390,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMzOTk5ODMzOTA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3399983390",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "d3684631bc6de4b17f47afbf3f4a8a7242f355b1",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/d3684631bc6de4b17f47afbf3f4a8a7242f355b1",
      "created_at": "2020-06-03T00:50:07Z"
    },
    {
      "event": "referenced",
      "id": 3401779851,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM0MDE3Nzk4NTE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3401779851",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "608bb6c7ca96dfa5f432fd8d96ee99d1eaaf79cf",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/608bb6c7ca96dfa5f432fd8d96ee99d1eaaf79cf",
      "created_at": "2020-06-03T11:50:09Z"
    },
    {
      "event": "referenced",
      "id": 3403110958,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM0MDMxMTA5NTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3403110958",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "12fb82482020321fc67a4b3db273d32524a06aff",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/12fb82482020321fc67a4b3db273d32524a06aff",
      "created_at": "2020-06-03T16:50:09Z"
    },
    {
      "event": "referenced",
      "id": 3403110962,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM0MDMxMTA5NjI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3403110962",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "ec4a36d489839dadadd3483471782fdefd5bb8c7",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/ec4a36d489839dadadd3483471782fdefd5bb8c7",
      "created_at": "2020-06-03T16:50:09Z"
    },
    {
      "event": "referenced",
      "id": 3403169684,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM0MDMxNjk2ODQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3403169684",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "814db2b67c5718b409dc9b77f853862f50531807",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/814db2b67c5718b409dc9b77f853862f50531807",
      "created_at": "2020-06-03T17:05:07Z"
    },
    {
      "event": "referenced",
      "id": 3403169690,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM0MDMxNjk2OTA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3403169690",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "5e0bf3785ac3055f8c201abb37497e4b417c9b69",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/5e0bf3785ac3055f8c201abb37497e4b417c9b69",
      "created_at": "2020-06-03T17:05:07Z"
    },
    {
      "event": "referenced",
      "id": 3404407992,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM0MDQ0MDc5OTI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3404407992",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "bd0c10d418f1869040bec3d13b77967b0ac6414f",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/bd0c10d418f1869040bec3d13b77967b0ac6414f",
      "created_at": "2020-06-03T23:20:08Z"
    },
    {
      "event": "referenced",
      "id": 3407985313,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM0MDc5ODUzMTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3407985313",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "d5f585b407c4f2d999ba2175af2f220a002fd8a7",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/d5f585b407c4f2d999ba2175af2f220a002fd8a7",
      "created_at": "2020-06-04T17:35:07Z"
    },
    {
      "event": "referenced",
      "id": 3408039617,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM0MDgwMzk2MTc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3408039617",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "f79742f8f978e72e476ee96e8ef2bd64254f1463",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/f79742f8f978e72e476ee96e8ef2bd64254f1463",
      "created_at": "2020-06-04T17:50:08Z"
    },
    {
      "event": "referenced",
      "id": 3408039620,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM0MDgwMzk2MjA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3408039620",
      "actor": {
        "login": "deadalnix",
        "id": 854121,
        "node_id": "MDQ6VXNlcjg1NDEyMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/854121?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deadalnix",
        "html_url": "https://github.com/deadalnix",
        "followers_url": "https://api.github.com/users/deadalnix/followers",
        "following_url": "https://api.github.com/users/deadalnix/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deadalnix/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deadalnix/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deadalnix/subscriptions",
        "organizations_url": "https://api.github.com/users/deadalnix/orgs",
        "repos_url": "https://api.github.com/users/deadalnix/repos",
        "events_url": "https://api.github.com/users/deadalnix/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deadalnix/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "85617361eb2f2e8f484681683775366f0450268c",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/85617361eb2f2e8f484681683775366f0450268c",
      "created_at": "2020-06-04T17:50:08Z"
    },
    {
      "event": "referenced",
      "id": 3660736916,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM2NjA3MzY5MTY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3660736916",
      "actor": {
        "login": "ftrader",
        "id": 16613123,
        "node_id": "MDQ6VXNlcjE2NjEzMTIz",
        "avatar_url": "https://avatars.githubusercontent.com/u/16613123?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ftrader",
        "html_url": "https://github.com/ftrader",
        "followers_url": "https://api.github.com/users/ftrader/followers",
        "following_url": "https://api.github.com/users/ftrader/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ftrader/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ftrader/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ftrader/subscriptions",
        "organizations_url": "https://api.github.com/users/ftrader/orgs",
        "repos_url": "https://api.github.com/users/ftrader/repos",
        "events_url": "https://api.github.com/users/ftrader/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ftrader/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "d06d0bea75c11809808c1fee93ae59f4b33c1c3e",
      "commit_url": "https://api.github.com/repos/bitcoin-cash-node/bitcoin-cash-node/commits/d06d0bea75c11809808c1fee93ae59f4b33c1c3e",
      "created_at": "2020-08-17T08:19:43Z"
    },
    {
      "event": "referenced",
      "id": 3660737013,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM2NjA3MzcwMTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3660737013",
      "actor": {
        "login": "ftrader",
        "id": 16613123,
        "node_id": "MDQ6VXNlcjE2NjEzMTIz",
        "avatar_url": "https://avatars.githubusercontent.com/u/16613123?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ftrader",
        "html_url": "https://github.com/ftrader",
        "followers_url": "https://api.github.com/users/ftrader/followers",
        "following_url": "https://api.github.com/users/ftrader/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ftrader/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ftrader/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ftrader/subscriptions",
        "organizations_url": "https://api.github.com/users/ftrader/orgs",
        "repos_url": "https://api.github.com/users/ftrader/repos",
        "events_url": "https://api.github.com/users/ftrader/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ftrader/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "04c3baeb048bb3aa447ae3fdf30939a59eebd54a",
      "commit_url": "https://api.github.com/repos/bitcoin-cash-node/bitcoin-cash-node/commits/04c3baeb048bb3aa447ae3fdf30939a59eebd54a",
      "created_at": "2020-08-17T08:19:44Z"
    },
    {
      "event": "referenced",
      "id": 5100234698,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDUxMDAyMzQ2OTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5100234698",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "9dbd21b548d6ce60568732c9461eff96766eca9d",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/9dbd21b548d6ce60568732c9461eff96766eca9d",
      "created_at": "2021-08-02T17:00:19Z"
    },
    {
      "event": "referenced",
      "id": 5100429379,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDUxMDA0MjkzNzk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5100429379",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "b5d7fc6755d7a3f5e729b298a8c5dcac1907565c",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/b5d7fc6755d7a3f5e729b298a8c5dcac1907565c",
      "created_at": "2021-08-02T17:40:27Z"
    },
    {
      "event": "referenced",
      "id": 5102630926,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDUxMDI2MzA5MjY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5102630926",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "1111a7f340ab7b2a4dab89a19b1cdd2ebbea1cb3",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/1111a7f340ab7b2a4dab89a19b1cdd2ebbea1cb3",
      "created_at": "2021-08-03T05:47:22Z"
    },
    {
      "event": "referenced",
      "id": 5126760717,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDUxMjY3NjA3MTc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5126760717",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "bdd2c2bc399f39e1e7be504ca65256232b9a7d8d",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/bdd2c2bc399f39e1e7be504ca65256232b9a7d8d",
      "created_at": "2021-08-08T15:16:55Z"
    },
    {
      "event": "referenced",
      "id": 5145127732,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDUxNDUxMjc3MzI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5145127732",
      "actor": {
        "login": "UdjinM6",
        "id": 1935069,
        "node_id": "MDQ6VXNlcjE5MzUwNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/UdjinM6",
        "html_url": "https://github.com/UdjinM6",
        "followers_url": "https://api.github.com/users/UdjinM6/followers",
        "following_url": "https://api.github.com/users/UdjinM6/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/UdjinM6/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/UdjinM6/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
        "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
        "repos_url": "https://api.github.com/users/UdjinM6/repos",
        "events_url": "https://api.github.com/users/UdjinM6/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "3b97c0558e043dae4766a4620b9b05bff2a585f0",
      "commit_url": "https://api.github.com/repos/UdjinM6/dash/commits/3b97c0558e043dae4766a4620b9b05bff2a585f0",
      "created_at": "2021-08-11T21:47:37Z"
    },
    {
      "event": "referenced",
      "id": 5147518550,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDUxNDc1MTg1NTA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5147518550",
      "actor": {
        "login": "kittywhiskers",
        "id": 63189531,
        "node_id": "MDQ6VXNlcjYzMTg5NTMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63189531?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kittywhiskers",
        "html_url": "https://github.com/kittywhiskers",
        "followers_url": "https://api.github.com/users/kittywhiskers/followers",
        "following_url": "https://api.github.com/users/kittywhiskers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kittywhiskers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kittywhiskers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kittywhiskers/subscriptions",
        "organizations_url": "https://api.github.com/users/kittywhiskers/orgs",
        "repos_url": "https://api.github.com/users/kittywhiskers/repos",
        "events_url": "https://api.github.com/users/kittywhiskers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kittywhiskers/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "21c7e574931d7d38ca3f1a0f6988cecd1564bd3c",
      "commit_url": "https://api.github.com/repos/kittywhiskers/dash/commits/21c7e574931d7d38ca3f1a0f6988cecd1564bd3c",
      "created_at": "2021-08-12T08:11:14Z"
    },
    {
      "event": "referenced",
      "id": 5157555295,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDUxNTc1NTUyOTU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5157555295",
      "actor": {
        "login": "UdjinM6",
        "id": 1935069,
        "node_id": "MDQ6VXNlcjE5MzUwNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/UdjinM6",
        "html_url": "https://github.com/UdjinM6",
        "followers_url": "https://api.github.com/users/UdjinM6/followers",
        "following_url": "https://api.github.com/users/UdjinM6/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/UdjinM6/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/UdjinM6/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
        "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
        "repos_url": "https://api.github.com/users/UdjinM6/repos",
        "events_url": "https://api.github.com/users/UdjinM6/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "607bd4b6b59a963b2bf627f29f3eb9e94fac9207",
      "commit_url": "https://api.github.com/repos/dashpay/dash/commits/607bd4b6b59a963b2bf627f29f3eb9e94fac9207",
      "created_at": "2021-08-13T20:23:05Z"
    },
    {
      "event": "referenced",
      "id": 5389063701,
      "node_id": "REFE_lADOABII584VOhcTzwAAAAFBNpYV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5389063701",
      "actor": {
        "login": "Munkybooty",
        "id": 52090345,
        "node_id": "MDQ6VXNlcjUyMDkwMzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/52090345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Munkybooty",
        "html_url": "https://github.com/Munkybooty",
        "followers_url": "https://api.github.com/users/Munkybooty/followers",
        "following_url": "https://api.github.com/users/Munkybooty/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Munkybooty/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Munkybooty/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Munkybooty/subscriptions",
        "organizations_url": "https://api.github.com/users/Munkybooty/orgs",
        "repos_url": "https://api.github.com/users/Munkybooty/repos",
        "events_url": "https://api.github.com/users/Munkybooty/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Munkybooty/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "fe4f80a6ee61e21a2e690edd52e658fad51c572e",
      "commit_url": "https://api.github.com/repos/Munkybooty/dash/commits/fe4f80a6ee61e21a2e690edd52e658fad51c572e",
      "created_at": "2021-09-30T16:44:05Z"
    },
    {
      "event": "referenced",
      "id": 5428798064,
      "node_id": "REFE_lADOABII584VOhcTzwAAAAFDlOJw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5428798064",
      "actor": {
        "login": "Munkybooty",
        "id": 52090345,
        "node_id": "MDQ6VXNlcjUyMDkwMzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/52090345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Munkybooty",
        "html_url": "https://github.com/Munkybooty",
        "followers_url": "https://api.github.com/users/Munkybooty/followers",
        "following_url": "https://api.github.com/users/Munkybooty/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Munkybooty/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Munkybooty/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Munkybooty/subscriptions",
        "organizations_url": "https://api.github.com/users/Munkybooty/orgs",
        "repos_url": "https://api.github.com/users/Munkybooty/repos",
        "events_url": "https://api.github.com/users/Munkybooty/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Munkybooty/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e46fef0205d6b1f10f2fd0c09870d7b7b92dbe45",
      "commit_url": "https://api.github.com/repos/Munkybooty/dash/commits/e46fef0205d6b1f10f2fd0c09870d7b7b92dbe45",
      "created_at": "2021-10-07T14:05:45Z"
    },
    {
      "event": "referenced",
      "id": 5428813233,
      "node_id": "REFE_lADOABII584VOhcTzwAAAAFDlR2x",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5428813233",
      "actor": {
        "login": "Munkybooty",
        "id": 52090345,
        "node_id": "MDQ6VXNlcjUyMDkwMzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/52090345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Munkybooty",
        "html_url": "https://github.com/Munkybooty",
        "followers_url": "https://api.github.com/users/Munkybooty/followers",
        "following_url": "https://api.github.com/users/Munkybooty/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Munkybooty/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Munkybooty/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Munkybooty/subscriptions",
        "organizations_url": "https://api.github.com/users/Munkybooty/orgs",
        "repos_url": "https://api.github.com/users/Munkybooty/repos",
        "events_url": "https://api.github.com/users/Munkybooty/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Munkybooty/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "1b738e74f13d07bc5d2ccafd3d24aa10e29e9b18",
      "commit_url": "https://api.github.com/repos/Munkybooty/dash/commits/1b738e74f13d07bc5d2ccafd3d24aa10e29e9b18",
      "created_at": "2021-10-07T14:07:41Z"
    },
    {
      "event": "referenced",
      "id": 5449947346,
      "node_id": "REFE_lADOABII584VOhcTzwAAAAFE15jS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5449947346",
      "actor": {
        "login": "Munkybooty",
        "id": 52090345,
        "node_id": "MDQ6VXNlcjUyMDkwMzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/52090345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Munkybooty",
        "html_url": "https://github.com/Munkybooty",
        "followers_url": "https://api.github.com/users/Munkybooty/followers",
        "following_url": "https://api.github.com/users/Munkybooty/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Munkybooty/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Munkybooty/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Munkybooty/subscriptions",
        "organizations_url": "https://api.github.com/users/Munkybooty/orgs",
        "repos_url": "https://api.github.com/users/Munkybooty/repos",
        "events_url": "https://api.github.com/users/Munkybooty/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Munkybooty/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "62aac44c4f7c984a63de0180b1d38ac9843c985f",
      "commit_url": "https://api.github.com/repos/Munkybooty/dash/commits/62aac44c4f7c984a63de0180b1d38ac9843c985f",
      "created_at": "2021-10-12T14:13:00Z"
    },
    {
      "event": "referenced",
      "id": 5550949279,
      "node_id": "REFE_lADOABII584VOhcTzwAAAAFK3MOf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5550949279",
      "actor": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "3f32c9f05602287e48781614b6433c104586907c",
      "commit_url": "https://api.github.com/repos/PastaPastaPasta/dash/commits/3f32c9f05602287e48781614b6433c104586907c",
      "created_at": "2021-11-01T19:15:44Z"
    },
    {
      "event": "referenced",
      "id": 5796553032,
      "node_id": "REFE_lADOABII584VOhcTzwAAAAFZgGFI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5796553032",
      "actor": {
        "login": "Munkybooty",
        "id": 52090345,
        "node_id": "MDQ6VXNlcjUyMDkwMzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/52090345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Munkybooty",
        "html_url": "https://github.com/Munkybooty",
        "followers_url": "https://api.github.com/users/Munkybooty/followers",
        "following_url": "https://api.github.com/users/Munkybooty/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Munkybooty/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Munkybooty/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Munkybooty/subscriptions",
        "organizations_url": "https://api.github.com/users/Munkybooty/orgs",
        "repos_url": "https://api.github.com/users/Munkybooty/repos",
        "events_url": "https://api.github.com/users/Munkybooty/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Munkybooty/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "01b4fe84f54c63aef8a4caffc6bdd934b651c2f2",
      "commit_url": "https://api.github.com/repos/Munkybooty/dash/commits/01b4fe84f54c63aef8a4caffc6bdd934b651c2f2",
      "created_at": "2021-12-21T04:34:19Z"
    },
    {
      "event": "referenced",
      "id": 5800707295,
      "node_id": "REFE_lADOABII584VOhcTzwAAAAFZv8Tf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5800707295",
      "actor": {
        "login": "Munkybooty",
        "id": 52090345,
        "node_id": "MDQ6VXNlcjUyMDkwMzQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/52090345?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Munkybooty",
        "html_url": "https://github.com/Munkybooty",
        "followers_url": "https://api.github.com/users/Munkybooty/followers",
        "following_url": "https://api.github.com/users/Munkybooty/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Munkybooty/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Munkybooty/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Munkybooty/subscriptions",
        "organizations_url": "https://api.github.com/users/Munkybooty/orgs",
        "repos_url": "https://api.github.com/users/Munkybooty/repos",
        "events_url": "https://api.github.com/users/Munkybooty/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Munkybooty/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "74c65712c957e5bd5a46dff5c047802b007aeeea",
      "commit_url": "https://api.github.com/repos/Munkybooty/dash/commits/74c65712c957e5bd5a46dff5c047802b007aeeea",
      "created_at": "2021-12-21T18:39:06Z"
    },
    {
      "event": "locked",
      "id": 6073798871,
      "node_id": "LOE_lADOABII584VOhcTzwAAAAFqBtDX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6073798871",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-15T10:32:40Z",
      "lock_reason": "resolved"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214494925",
      "pull_request_review_id": 151572564,
      "id": 214494925,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDQ5NDkyNQ==",
      "diff_hunk": "@@ -0,0 +1,289 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <map>\n+\n+#include <dbwrapper.h>\n+#include <index/blockfilter.h>\n+#include <util.h>\n+#include <validation.h>\n+\n+/* The index database stores three items for each block: the encoded filter, its D256 hash, and the\n+ * header. Those belonging to blocks on the active chain are indexed by height, and those belonging\n+ * to blocks that have been reorganized out of the active chain are indexed by block hash. This\n+ * ensures that filter data for any block that becomes part of the active chain can always be\n+ * retrieved, alleviating timing concerns.\n+ *\n+ * Keys for the height index have the type pair<char, pair<DB_BLOCK_HEIGHT, int>>.\n+ * Keys for the hash index have the type pair<char, pair<DB_BLOCK_HASH, int>>.\n+ */\n+constexpr char DB_FILTER = 'f';\n+constexpr char DB_FILTER_HASH = 'h';\n+constexpr char DB_FILTER_HEADER = 'r';\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+\n+static std::map<BlockFilterType, BlockFilterIndex> g_filter_indexes;\n+\n+BlockFilterIndex::BlockFilterIndex(BlockFilterType filter_type,\n+                                   size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_filter_type(filter_type)\n+{\n+    const std::string& filter_name = BlockFilterTypeName(filter_type);\n+    if (filter_name == \"\") throw std::invalid_argument(\"unknown filter_type\");\n+\n+    m_name = filter_name + \" block filter index\";\n+    m_db = MakeUnique<BaseIndex::DB>(GetDataDir() / \"indexes\" / \"blockfilter\" / filter_name,\n+                                     n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool BlockFilterIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+    uint256 prev_header;\n+\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, uint256> read_out;\n+        std::pair<char, int> prev_height_key(DB_BLOCK_HEIGHT, pindex->nHeight - 1);\n+        if (!m_db->Read(std::make_pair(DB_FILTER_HEADER, prev_height_key), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        prev_header = read_out.second;\n+    }\n+\n+    BlockFilter filter(m_filter_type, block, block_undo);\n+    std::pair<char, int> height_key(DB_BLOCK_HEIGHT, pindex->nHeight);\n+\n+    CDBBatch batch(*m_db);\n+    batch.Write(std::make_pair(DB_FILTER, height_key),\n+                std::make_pair(pindex->GetBlockHash(), filter.GetEncodedFilter()));\n+    batch.Write(std::make_pair(DB_FILTER_HASH, height_key),\n+                std::make_pair(pindex->GetBlockHash(), filter.GetHash()));\n+    batch.Write(std::make_pair(DB_FILTER_HEADER, height_key),\n+                std::make_pair(pindex->GetBlockHash(), filter.ComputeHeader(prev_header)));\n+    return m_db->WriteBatch(batch);",
      "path": "src/index/blockfilter.cpp",
      "position": null,
      "original_position": 77,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "1c2079125a394197e577be272dd5caa899278672",
      "in_reply_to_id": null,
      "user": {
        "login": "leishman",
        "id": 3648618,
        "node_id": "MDQ6VXNlcjM2NDg2MTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3648618?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/leishman",
        "html_url": "https://github.com/leishman",
        "followers_url": "https://api.github.com/users/leishman/followers",
        "following_url": "https://api.github.com/users/leishman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/leishman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/leishman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/leishman/subscriptions",
        "organizations_url": "https://api.github.com/users/leishman/orgs",
        "repos_url": "https://api.github.com/users/leishman/repos",
        "events_url": "https://api.github.com/users/leishman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/leishman/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Out of scope for this PR, but is there a reason we can't write a batch of entries for more than a single block? Could we write 100 - 1000 blocks worth of entries in each batch write to speed up the migrations? This introduces some complexity, but perhaps it's worth it?",
      "created_at": "2018-08-31T23:31:07Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r214494925",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214494925"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214495167",
      "pull_request_review_id": 151572855,
      "id": 214495167,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDQ5NTE2Nw==",
      "diff_hunk": "@@ -0,0 +1,83 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INDEX_BLOCKFILTER_H\n+#define BITCOIN_INDEX_BLOCKFILTER_H\n+\n+#include <blockfilter.h>\n+#include <chain.h>\n+#include <index/base.h>\n+\n+/**\n+ * BlockFilterIndex is used to store and retrieve block filters, hashes, and headers for a range of\n+ * blocks by height. An index is constructed for each supported filter type with its own database\n+ * (ie. filter data for different types are stored in differente databases).",
      "path": "src/index/blockfilter.h",
      "position": null,
      "original_position": 15,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "1c2079125a394197e577be272dd5caa899278672",
      "in_reply_to_id": null,
      "user": {
        "login": "leishman",
        "id": 3648618,
        "node_id": "MDQ6VXNlcjM2NDg2MTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3648618?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/leishman",
        "html_url": "https://github.com/leishman",
        "followers_url": "https://api.github.com/users/leishman/followers",
        "following_url": "https://api.github.com/users/leishman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/leishman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/leishman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/leishman/subscriptions",
        "organizations_url": "https://api.github.com/users/leishman/orgs",
        "repos_url": "https://api.github.com/users/leishman/repos",
        "events_url": "https://api.github.com/users/leishman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/leishman/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "typo `differente`",
      "created_at": "2018-08-31T23:33:47Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r214495167",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214495167"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 15,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214496437",
      "pull_request_review_id": 151574447,
      "id": 214496437,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDQ5NjQzNw==",
      "diff_hunk": "@@ -0,0 +1,289 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <map>\n+\n+#include <dbwrapper.h>\n+#include <index/blockfilter.h>\n+#include <util.h>\n+#include <validation.h>\n+\n+/* The index database stores three items for each block: the encoded filter, its D256 hash, and the\n+ * header. Those belonging to blocks on the active chain are indexed by height, and those belonging\n+ * to blocks that have been reorganized out of the active chain are indexed by block hash. This\n+ * ensures that filter data for any block that becomes part of the active chain can always be\n+ * retrieved, alleviating timing concerns.\n+ *\n+ * Keys for the height index have the type pair<char, pair<DB_BLOCK_HEIGHT, int>>.\n+ * Keys for the hash index have the type pair<char, pair<DB_BLOCK_HASH, int>>.\n+ */\n+constexpr char DB_FILTER = 'f';\n+constexpr char DB_FILTER_HASH = 'h';\n+constexpr char DB_FILTER_HEADER = 'r';\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+\n+static std::map<BlockFilterType, BlockFilterIndex> g_filter_indexes;\n+\n+BlockFilterIndex::BlockFilterIndex(BlockFilterType filter_type,\n+                                   size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_filter_type(filter_type)\n+{\n+    const std::string& filter_name = BlockFilterTypeName(filter_type);\n+    if (filter_name == \"\") throw std::invalid_argument(\"unknown filter_type\");\n+\n+    m_name = filter_name + \" block filter index\";\n+    m_db = MakeUnique<BaseIndex::DB>(GetDataDir() / \"indexes\" / \"blockfilter\" / filter_name,\n+                                     n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool BlockFilterIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+    uint256 prev_header;\n+\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, uint256> read_out;\n+        std::pair<char, int> prev_height_key(DB_BLOCK_HEIGHT, pindex->nHeight - 1);\n+        if (!m_db->Read(std::make_pair(DB_FILTER_HEADER, prev_height_key), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        prev_header = read_out.second;\n+    }\n+\n+    BlockFilter filter(m_filter_type, block, block_undo);\n+    std::pair<char, int> height_key(DB_BLOCK_HEIGHT, pindex->nHeight);\n+\n+    CDBBatch batch(*m_db);\n+    batch.Write(std::make_pair(DB_FILTER, height_key),\n+                std::make_pair(pindex->GetBlockHash(), filter.GetEncodedFilter()));\n+    batch.Write(std::make_pair(DB_FILTER_HASH, height_key),\n+                std::make_pair(pindex->GetBlockHash(), filter.GetHash()));\n+    batch.Write(std::make_pair(DB_FILTER_HEADER, height_key),\n+                std::make_pair(pindex->GetBlockHash(), filter.ComputeHeader(prev_header)));\n+    return m_db->WriteBatch(batch);\n+}\n+\n+template <typename T>\n+static bool CopyHeightIndexToHashIndex(CDBIterator& db_it, CDBBatch& batch,\n+                                       const std::string& index_name, char key_prefix,\n+                                       int start_height, const CBlockIndex* stop_index)\n+{\n+    db_it.Seek(std::make_pair(key_prefix, std::make_pair(DB_BLOCK_HEIGHT, start_height)));\n+\n+    for (int height = start_height; height <= stop_index->nHeight; ++height) {\n+        std::pair<char, std::pair<char, int>> key, expected_key;\n+        expected_key = std::make_pair(key_prefix, std::make_pair(DB_BLOCK_HEIGHT, height));\n+\n+        if (!db_it.GetKey(key) || key != expected_key) {\n+            return error(\"%s: unexpected key in %s: expected (%c, (%c, %d))\",\n+                         __func__, index_name, key_prefix, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        std::pair<uint256, T> value;\n+        if (!db_it.GetValue(value)) {\n+            return error(\"%s: unable to read value in %s at key (%c, (%c, %d))\",\n+                         __func__, index_name, key_prefix, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        auto hash_key = std::make_pair(key_prefix, std::make_pair(DB_BLOCK_HASH, value.first));\n+        batch.Write(hash_key, std::move(value.second));\n+\n+        db_it.Next();\n+    }\n+    return true;\n+}\n+\n+bool BlockFilterIndex::Rewind(const CBlockIndex* current_tip, const CBlockIndex* new_tip)\n+{\n+    assert(current_tip->GetAncestor(new_tip->nHeight) == new_tip);\n+\n+    CDBBatch batch(*m_db);\n+    std::unique_ptr<CDBIterator> db_it(m_db->NewIterator());\n+\n+    if (!CopyHeightIndexToHashIndex<std::vector<unsigned char>>(*db_it, batch, m_name, DB_FILTER,\n+                                                                new_tip->nHeight, current_tip)) {\n+        return false;\n+    }\n+    if (!CopyHeightIndexToHashIndex<uint256>(*db_it, batch, m_name, DB_FILTER_HASH,\n+                                             new_tip->nHeight, current_tip)) {\n+        return false;\n+    }\n+    if (!CopyHeightIndexToHashIndex<uint256>(*db_it, batch, m_name, DB_FILTER_HEADER,\n+                                             new_tip->nHeight, current_tip)) {\n+        return false;\n+    }\n+\n+    if (!m_db->WriteBatch(batch)) return false;\n+\n+    return BaseIndex::Rewind(current_tip, new_tip);\n+}\n+\n+template <typename T>\n+static bool LookupOne(const CDBWrapper& db, char key_prefix,\n+                      const CBlockIndex* block_index, T& result)\n+{\n+    // First check if the result is stored under the height index and the value there matches the\n+    // block hash. This should be the case if the block is on the active chain.\n+    std::pair<char, int> height_key(DB_BLOCK_HEIGHT, block_index->nHeight);\n+    std::pair<uint256, T> read_out;\n+    if (!db.Read(std::make_pair(key_prefix, height_key), read_out)) {\n+        return false;\n+    }\n+    if (read_out.first == block_index->GetBlockHash()) {\n+        result = std::move(read_out.second);\n+        return true;\n+    }\n+\n+    // If value at the height index corresponds to an different block, the result will be stored in\n+    // the hash index.\n+    std::pair<char, uint256> hash_key(DB_BLOCK_HASH, block_index->GetBlockHash());\n+    return db.Read(std::make_pair(key_prefix, hash_key), result);\n+}\n+\n+template <typename T>\n+static bool LookupRange(CDBWrapper& db, const std::string& index_name,\n+                        char key_prefix, int start_height, const CBlockIndex* stop_index,\n+                        std::vector<T>& results)\n+{\n+    if (start_height < 0) {\n+        return error(\"%s: start height (%d) is negative\", __func__, start_height);\n+    }\n+    if (start_height > stop_index->nHeight) {\n+        return error(\"%s: start height (%d) is greater than stop height (%d)\",\n+                     __func__, start_height, stop_index->nHeight);\n+    }\n+\n+    std::vector<std::pair<uint256, T>> values(stop_index->nHeight - start_height + 1);\n+\n+    std::unique_ptr<CDBIterator> db_it(db.NewIterator());\n+    db_it->Seek(std::make_pair(key_prefix, std::make_pair(DB_BLOCK_HEIGHT, start_height)));\n+    for (int height = start_height; height <= stop_index->nHeight; ++height) {\n+        std::pair<char, std::pair<char, int>> key, expected_key;\n+        expected_key = std::make_pair(key_prefix, std::make_pair(DB_BLOCK_HEIGHT, height));\n+\n+        if (!db_it->Valid() || !db_it->GetKey(key) || key != expected_key) {\n+            return false;\n+        }\n+\n+        size_t i = height - start_height;\n+        if (!db_it->GetValue(values[i])) {\n+            return error(\"%s: unable to read value in %s at key (%c, (%c, %d))\",\n+                         __func__, index_name, key_prefix, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        db_it->Next();\n+    }\n+\n+    results.resize(stop_index->nHeight - start_height + 1);\n+    for (const CBlockIndex* block_index = stop_index;\n+         block_index && block_index->nHeight >= start_height;\n+         block_index = block_index->pprev) {\n+        uint256 block_hash = block_index->GetBlockHash();\n+\n+        size_t i = block_index->nHeight - start_height;\n+        if (block_hash == values[i].first) {\n+            results[i] = std::move(values[i].second);\n+            continue;\n+        }\n+\n+        std::pair<char, uint256> hash_key(DB_BLOCK_HASH, block_hash);\n+        if (!db.Read(std::make_pair(key_prefix, hash_key), results[i])) {\n+            return error(\"%s: unable to read value in %s at key (%c, (%c, %s))\",\n+                         __func__, index_name, key_prefix, DB_BLOCK_HASH, block_hash.ToString());\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+bool BlockFilterIndex::LookupFilter(const CBlockIndex* block_index, BlockFilter& filter_out) const\n+{\n+    std::vector<unsigned char> encoded_filter;\n+    if (!LookupOne(*m_db, DB_FILTER, block_index, encoded_filter)) {\n+        return false;\n+    }\n+\n+    filter_out = BlockFilter(m_filter_type, block_index->GetBlockHash(), std::move(encoded_filter));\n+    return true;\n+}\n+\n+bool BlockFilterIndex::LookupFilterHeader(const CBlockIndex* block_index, uint256& header_out) const\n+{\n+    return LookupOne(*m_db, DB_FILTER_HEADER, block_index, header_out);\n+}\n+\n+bool BlockFilterIndex::LookupFilterRange(int start_height, const CBlockIndex* stop_index,\n+                                         std::vector<BlockFilter>& filters_out) const\n+{\n+    std::vector<std::vector<unsigned char>> encoded_filters;\n+    if (!LookupRange(*m_db, m_name, DB_FILTER, start_height, stop_index, encoded_filters)) {\n+        return false;\n+    }\n+\n+    filters_out.resize(stop_index->nHeight - start_height + 1);\n+\n+    auto it = filters_out.rbegin();\n+    auto encoded_filter_it = encoded_filters.rbegin();\n+    const CBlockIndex* pindex = stop_index;\n+\n+    while (it != filters_out.rend()) {\n+        *it = BlockFilter(m_filter_type, pindex->GetBlockHash(), std::move(*encoded_filter_it));",
      "path": "src/index/blockfilter.cpp",
      "position": null,
      "original_position": 244,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "1c2079125a394197e577be272dd5caa899278672",
      "in_reply_to_id": null,
      "user": {
        "login": "leishman",
        "id": 3648618,
        "node_id": "MDQ6VXNlcjM2NDg2MTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3648618?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/leishman",
        "html_url": "https://github.com/leishman",
        "followers_url": "https://api.github.com/users/leishman/followers",
        "following_url": "https://api.github.com/users/leishman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/leishman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/leishman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/leishman/subscriptions",
        "organizations_url": "https://api.github.com/users/leishman/orgs",
        "repos_url": "https://api.github.com/users/leishman/repos",
        "events_url": "https://api.github.com/users/leishman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/leishman/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is assigning to the dereferenced pointer here instead of using a vector function an optimization? I can't see an obvious reason there is anything wrong with this, but just double checking.",
      "created_at": "2018-08-31T23:50:20Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r214496437",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214496437"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 244,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214497299",
      "pull_request_review_id": 151575502,
      "id": 214497299,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDQ5NzI5OQ==",
      "diff_hunk": "@@ -0,0 +1,289 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <map>\n+\n+#include <dbwrapper.h>\n+#include <index/blockfilter.h>\n+#include <util.h>\n+#include <validation.h>\n+\n+/* The index database stores three items for each block: the encoded filter, its D256 hash, and the",
      "path": "src/index/blockfilter.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "b384c3e86c018c6e7cb701dd40dfa2a3f601e2a5",
      "in_reply_to_id": null,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "s/D256/DSHA256/",
      "created_at": "2018-09-01T00:02:53Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r214497299",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214497299"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 12,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214548666",
      "pull_request_review_id": 151628758,
      "id": 214548666,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDU0ODY2Ng==",
      "diff_hunk": "@@ -0,0 +1,289 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <map>\n+\n+#include <dbwrapper.h>\n+#include <index/blockfilter.h>\n+#include <util.h>\n+#include <validation.h>\n+\n+/* The index database stores three items for each block: the encoded filter, its D256 hash, and the\n+ * header. Those belonging to blocks on the active chain are indexed by height, and those belonging\n+ * to blocks that have been reorganized out of the active chain are indexed by block hash. This\n+ * ensures that filter data for any block that becomes part of the active chain can always be\n+ * retrieved, alleviating timing concerns.\n+ *\n+ * Keys for the height index have the type pair<char, pair<DB_BLOCK_HEIGHT, int>>.\n+ * Keys for the hash index have the type pair<char, pair<DB_BLOCK_HASH, int>>.\n+ */\n+constexpr char DB_FILTER = 'f';\n+constexpr char DB_FILTER_HASH = 'h';\n+constexpr char DB_FILTER_HEADER = 'r';\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+\n+static std::map<BlockFilterType, BlockFilterIndex> g_filter_indexes;\n+\n+BlockFilterIndex::BlockFilterIndex(BlockFilterType filter_type,\n+                                   size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_filter_type(filter_type)\n+{\n+    const std::string& filter_name = BlockFilterTypeName(filter_type);\n+    if (filter_name == \"\") throw std::invalid_argument(\"unknown filter_type\");\n+\n+    m_name = filter_name + \" block filter index\";\n+    m_db = MakeUnique<BaseIndex::DB>(GetDataDir() / \"indexes\" / \"blockfilter\" / filter_name,\n+                                     n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool BlockFilterIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+    uint256 prev_header;\n+\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, uint256> read_out;\n+        std::pair<char, int> prev_height_key(DB_BLOCK_HEIGHT, pindex->nHeight - 1);\n+        if (!m_db->Read(std::make_pair(DB_FILTER_HEADER, prev_height_key), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        prev_header = read_out.second;\n+    }\n+\n+    BlockFilter filter(m_filter_type, block, block_undo);\n+    std::pair<char, int> height_key(DB_BLOCK_HEIGHT, pindex->nHeight);\n+\n+    CDBBatch batch(*m_db);\n+    batch.Write(std::make_pair(DB_FILTER, height_key),\n+                std::make_pair(pindex->GetBlockHash(), filter.GetEncodedFilter()));\n+    batch.Write(std::make_pair(DB_FILTER_HASH, height_key),\n+                std::make_pair(pindex->GetBlockHash(), filter.GetHash()));\n+    batch.Write(std::make_pair(DB_FILTER_HEADER, height_key),\n+                std::make_pair(pindex->GetBlockHash(), filter.ComputeHeader(prev_header)));\n+    return m_db->WriteBatch(batch);",
      "path": "src/index/blockfilter.cpp",
      "position": null,
      "original_position": 77,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "1c2079125a394197e577be272dd5caa899278672",
      "in_reply_to_id": 214494925,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Could be worth looking into during ThreadSync. As you note though, it's a fairly independent change.",
      "created_at": "2018-09-02T18:10:30Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r214548666",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214548666"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214548691",
      "pull_request_review_id": 151628780,
      "id": 214548691,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDU0ODY5MQ==",
      "diff_hunk": "@@ -0,0 +1,289 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <map>\n+\n+#include <dbwrapper.h>\n+#include <index/blockfilter.h>\n+#include <util.h>\n+#include <validation.h>\n+\n+/* The index database stores three items for each block: the encoded filter, its D256 hash, and the\n+ * header. Those belonging to blocks on the active chain are indexed by height, and those belonging\n+ * to blocks that have been reorganized out of the active chain are indexed by block hash. This\n+ * ensures that filter data for any block that becomes part of the active chain can always be\n+ * retrieved, alleviating timing concerns.\n+ *\n+ * Keys for the height index have the type pair<char, pair<DB_BLOCK_HEIGHT, int>>.\n+ * Keys for the hash index have the type pair<char, pair<DB_BLOCK_HASH, int>>.\n+ */\n+constexpr char DB_FILTER = 'f';\n+constexpr char DB_FILTER_HASH = 'h';\n+constexpr char DB_FILTER_HEADER = 'r';\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+\n+static std::map<BlockFilterType, BlockFilterIndex> g_filter_indexes;\n+\n+BlockFilterIndex::BlockFilterIndex(BlockFilterType filter_type,\n+                                   size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_filter_type(filter_type)\n+{\n+    const std::string& filter_name = BlockFilterTypeName(filter_type);\n+    if (filter_name == \"\") throw std::invalid_argument(\"unknown filter_type\");\n+\n+    m_name = filter_name + \" block filter index\";\n+    m_db = MakeUnique<BaseIndex::DB>(GetDataDir() / \"indexes\" / \"blockfilter\" / filter_name,\n+                                     n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool BlockFilterIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+    uint256 prev_header;\n+\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, uint256> read_out;\n+        std::pair<char, int> prev_height_key(DB_BLOCK_HEIGHT, pindex->nHeight - 1);\n+        if (!m_db->Read(std::make_pair(DB_FILTER_HEADER, prev_height_key), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        prev_header = read_out.second;\n+    }\n+\n+    BlockFilter filter(m_filter_type, block, block_undo);\n+    std::pair<char, int> height_key(DB_BLOCK_HEIGHT, pindex->nHeight);\n+\n+    CDBBatch batch(*m_db);\n+    batch.Write(std::make_pair(DB_FILTER, height_key),\n+                std::make_pair(pindex->GetBlockHash(), filter.GetEncodedFilter()));\n+    batch.Write(std::make_pair(DB_FILTER_HASH, height_key),\n+                std::make_pair(pindex->GetBlockHash(), filter.GetHash()));\n+    batch.Write(std::make_pair(DB_FILTER_HEADER, height_key),\n+                std::make_pair(pindex->GetBlockHash(), filter.ComputeHeader(prev_header)));\n+    return m_db->WriteBatch(batch);\n+}\n+\n+template <typename T>\n+static bool CopyHeightIndexToHashIndex(CDBIterator& db_it, CDBBatch& batch,\n+                                       const std::string& index_name, char key_prefix,\n+                                       int start_height, const CBlockIndex* stop_index)\n+{\n+    db_it.Seek(std::make_pair(key_prefix, std::make_pair(DB_BLOCK_HEIGHT, start_height)));\n+\n+    for (int height = start_height; height <= stop_index->nHeight; ++height) {\n+        std::pair<char, std::pair<char, int>> key, expected_key;\n+        expected_key = std::make_pair(key_prefix, std::make_pair(DB_BLOCK_HEIGHT, height));\n+\n+        if (!db_it.GetKey(key) || key != expected_key) {\n+            return error(\"%s: unexpected key in %s: expected (%c, (%c, %d))\",\n+                         __func__, index_name, key_prefix, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        std::pair<uint256, T> value;\n+        if (!db_it.GetValue(value)) {\n+            return error(\"%s: unable to read value in %s at key (%c, (%c, %d))\",\n+                         __func__, index_name, key_prefix, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        auto hash_key = std::make_pair(key_prefix, std::make_pair(DB_BLOCK_HASH, value.first));\n+        batch.Write(hash_key, std::move(value.second));\n+\n+        db_it.Next();\n+    }\n+    return true;\n+}\n+\n+bool BlockFilterIndex::Rewind(const CBlockIndex* current_tip, const CBlockIndex* new_tip)\n+{\n+    assert(current_tip->GetAncestor(new_tip->nHeight) == new_tip);\n+\n+    CDBBatch batch(*m_db);\n+    std::unique_ptr<CDBIterator> db_it(m_db->NewIterator());\n+\n+    if (!CopyHeightIndexToHashIndex<std::vector<unsigned char>>(*db_it, batch, m_name, DB_FILTER,\n+                                                                new_tip->nHeight, current_tip)) {\n+        return false;\n+    }\n+    if (!CopyHeightIndexToHashIndex<uint256>(*db_it, batch, m_name, DB_FILTER_HASH,\n+                                             new_tip->nHeight, current_tip)) {\n+        return false;\n+    }\n+    if (!CopyHeightIndexToHashIndex<uint256>(*db_it, batch, m_name, DB_FILTER_HEADER,\n+                                             new_tip->nHeight, current_tip)) {\n+        return false;\n+    }\n+\n+    if (!m_db->WriteBatch(batch)) return false;\n+\n+    return BaseIndex::Rewind(current_tip, new_tip);\n+}\n+\n+template <typename T>\n+static bool LookupOne(const CDBWrapper& db, char key_prefix,\n+                      const CBlockIndex* block_index, T& result)\n+{\n+    // First check if the result is stored under the height index and the value there matches the\n+    // block hash. This should be the case if the block is on the active chain.\n+    std::pair<char, int> height_key(DB_BLOCK_HEIGHT, block_index->nHeight);\n+    std::pair<uint256, T> read_out;\n+    if (!db.Read(std::make_pair(key_prefix, height_key), read_out)) {\n+        return false;\n+    }\n+    if (read_out.first == block_index->GetBlockHash()) {\n+        result = std::move(read_out.second);\n+        return true;\n+    }\n+\n+    // If value at the height index corresponds to an different block, the result will be stored in\n+    // the hash index.\n+    std::pair<char, uint256> hash_key(DB_BLOCK_HASH, block_index->GetBlockHash());\n+    return db.Read(std::make_pair(key_prefix, hash_key), result);\n+}\n+\n+template <typename T>\n+static bool LookupRange(CDBWrapper& db, const std::string& index_name,\n+                        char key_prefix, int start_height, const CBlockIndex* stop_index,\n+                        std::vector<T>& results)\n+{\n+    if (start_height < 0) {\n+        return error(\"%s: start height (%d) is negative\", __func__, start_height);\n+    }\n+    if (start_height > stop_index->nHeight) {\n+        return error(\"%s: start height (%d) is greater than stop height (%d)\",\n+                     __func__, start_height, stop_index->nHeight);\n+    }\n+\n+    std::vector<std::pair<uint256, T>> values(stop_index->nHeight - start_height + 1);\n+\n+    std::unique_ptr<CDBIterator> db_it(db.NewIterator());\n+    db_it->Seek(std::make_pair(key_prefix, std::make_pair(DB_BLOCK_HEIGHT, start_height)));\n+    for (int height = start_height; height <= stop_index->nHeight; ++height) {\n+        std::pair<char, std::pair<char, int>> key, expected_key;\n+        expected_key = std::make_pair(key_prefix, std::make_pair(DB_BLOCK_HEIGHT, height));\n+\n+        if (!db_it->Valid() || !db_it->GetKey(key) || key != expected_key) {\n+            return false;\n+        }\n+\n+        size_t i = height - start_height;\n+        if (!db_it->GetValue(values[i])) {\n+            return error(\"%s: unable to read value in %s at key (%c, (%c, %d))\",\n+                         __func__, index_name, key_prefix, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        db_it->Next();\n+    }\n+\n+    results.resize(stop_index->nHeight - start_height + 1);\n+    for (const CBlockIndex* block_index = stop_index;\n+         block_index && block_index->nHeight >= start_height;\n+         block_index = block_index->pprev) {\n+        uint256 block_hash = block_index->GetBlockHash();\n+\n+        size_t i = block_index->nHeight - start_height;\n+        if (block_hash == values[i].first) {\n+            results[i] = std::move(values[i].second);\n+            continue;\n+        }\n+\n+        std::pair<char, uint256> hash_key(DB_BLOCK_HASH, block_hash);\n+        if (!db.Read(std::make_pair(key_prefix, hash_key), results[i])) {\n+            return error(\"%s: unable to read value in %s at key (%c, (%c, %s))\",\n+                         __func__, index_name, key_prefix, DB_BLOCK_HASH, block_hash.ToString());\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+bool BlockFilterIndex::LookupFilter(const CBlockIndex* block_index, BlockFilter& filter_out) const\n+{\n+    std::vector<unsigned char> encoded_filter;\n+    if (!LookupOne(*m_db, DB_FILTER, block_index, encoded_filter)) {\n+        return false;\n+    }\n+\n+    filter_out = BlockFilter(m_filter_type, block_index->GetBlockHash(), std::move(encoded_filter));\n+    return true;\n+}\n+\n+bool BlockFilterIndex::LookupFilterHeader(const CBlockIndex* block_index, uint256& header_out) const\n+{\n+    return LookupOne(*m_db, DB_FILTER_HEADER, block_index, header_out);\n+}\n+\n+bool BlockFilterIndex::LookupFilterRange(int start_height, const CBlockIndex* stop_index,\n+                                         std::vector<BlockFilter>& filters_out) const\n+{\n+    std::vector<std::vector<unsigned char>> encoded_filters;\n+    if (!LookupRange(*m_db, m_name, DB_FILTER, start_height, stop_index, encoded_filters)) {\n+        return false;\n+    }\n+\n+    filters_out.resize(stop_index->nHeight - start_height + 1);\n+\n+    auto it = filters_out.rbegin();\n+    auto encoded_filter_it = encoded_filters.rbegin();\n+    const CBlockIndex* pindex = stop_index;\n+\n+    while (it != filters_out.rend()) {\n+        *it = BlockFilter(m_filter_type, pindex->GetBlockHash(), std::move(*encoded_filter_it));",
      "path": "src/index/blockfilter.cpp",
      "position": null,
      "original_position": 244,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "1c2079125a394197e577be272dd5caa899278672",
      "in_reply_to_id": 214496437,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What do you mean by a vector function? This just seemed to be the most immediate way to do the assignment to me.",
      "created_at": "2018-09-02T18:11:23Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r214548691",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214548691"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 244,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214550876",
      "pull_request_review_id": 151630949,
      "id": 214550876,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDU1MDg3Ng==",
      "diff_hunk": "@@ -0,0 +1,289 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <map>\n+\n+#include <dbwrapper.h>\n+#include <index/blockfilter.h>\n+#include <util.h>\n+#include <validation.h>\n+\n+/* The index database stores three items for each block: the encoded filter, its D256 hash, and the\n+ * header. Those belonging to blocks on the active chain are indexed by height, and those belonging\n+ * to blocks that have been reorganized out of the active chain are indexed by block hash. This\n+ * ensures that filter data for any block that becomes part of the active chain can always be\n+ * retrieved, alleviating timing concerns.\n+ *\n+ * Keys for the height index have the type pair<char, pair<DB_BLOCK_HEIGHT, int>>.\n+ * Keys for the hash index have the type pair<char, pair<DB_BLOCK_HASH, int>>.\n+ */\n+constexpr char DB_FILTER = 'f';\n+constexpr char DB_FILTER_HASH = 'h';\n+constexpr char DB_FILTER_HEADER = 'r';\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+\n+static std::map<BlockFilterType, BlockFilterIndex> g_filter_indexes;\n+\n+BlockFilterIndex::BlockFilterIndex(BlockFilterType filter_type,\n+                                   size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_filter_type(filter_type)\n+{\n+    const std::string& filter_name = BlockFilterTypeName(filter_type);\n+    if (filter_name == \"\") throw std::invalid_argument(\"unknown filter_type\");\n+\n+    m_name = filter_name + \" block filter index\";\n+    m_db = MakeUnique<BaseIndex::DB>(GetDataDir() / \"indexes\" / \"blockfilter\" / filter_name,\n+                                     n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool BlockFilterIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+    uint256 prev_header;\n+\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, uint256> read_out;\n+        std::pair<char, int> prev_height_key(DB_BLOCK_HEIGHT, pindex->nHeight - 1);\n+        if (!m_db->Read(std::make_pair(DB_FILTER_HEADER, prev_height_key), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        prev_header = read_out.second;\n+    }\n+\n+    BlockFilter filter(m_filter_type, block, block_undo);\n+    std::pair<char, int> height_key(DB_BLOCK_HEIGHT, pindex->nHeight);\n+\n+    CDBBatch batch(*m_db);\n+    batch.Write(std::make_pair(DB_FILTER, height_key),\n+                std::make_pair(pindex->GetBlockHash(), filter.GetEncodedFilter()));\n+    batch.Write(std::make_pair(DB_FILTER_HASH, height_key),\n+                std::make_pair(pindex->GetBlockHash(), filter.GetHash()));\n+    batch.Write(std::make_pair(DB_FILTER_HEADER, height_key),\n+                std::make_pair(pindex->GetBlockHash(), filter.ComputeHeader(prev_header)));\n+    return m_db->WriteBatch(batch);\n+}\n+\n+template <typename T>\n+static bool CopyHeightIndexToHashIndex(CDBIterator& db_it, CDBBatch& batch,\n+                                       const std::string& index_name, char key_prefix,\n+                                       int start_height, const CBlockIndex* stop_index)\n+{\n+    db_it.Seek(std::make_pair(key_prefix, std::make_pair(DB_BLOCK_HEIGHT, start_height)));\n+\n+    for (int height = start_height; height <= stop_index->nHeight; ++height) {\n+        std::pair<char, std::pair<char, int>> key, expected_key;\n+        expected_key = std::make_pair(key_prefix, std::make_pair(DB_BLOCK_HEIGHT, height));\n+\n+        if (!db_it.GetKey(key) || key != expected_key) {\n+            return error(\"%s: unexpected key in %s: expected (%c, (%c, %d))\",\n+                         __func__, index_name, key_prefix, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        std::pair<uint256, T> value;\n+        if (!db_it.GetValue(value)) {\n+            return error(\"%s: unable to read value in %s at key (%c, (%c, %d))\",\n+                         __func__, index_name, key_prefix, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        auto hash_key = std::make_pair(key_prefix, std::make_pair(DB_BLOCK_HASH, value.first));\n+        batch.Write(hash_key, std::move(value.second));\n+\n+        db_it.Next();\n+    }\n+    return true;\n+}\n+\n+bool BlockFilterIndex::Rewind(const CBlockIndex* current_tip, const CBlockIndex* new_tip)\n+{\n+    assert(current_tip->GetAncestor(new_tip->nHeight) == new_tip);\n+\n+    CDBBatch batch(*m_db);\n+    std::unique_ptr<CDBIterator> db_it(m_db->NewIterator());\n+\n+    if (!CopyHeightIndexToHashIndex<std::vector<unsigned char>>(*db_it, batch, m_name, DB_FILTER,\n+                                                                new_tip->nHeight, current_tip)) {\n+        return false;\n+    }\n+    if (!CopyHeightIndexToHashIndex<uint256>(*db_it, batch, m_name, DB_FILTER_HASH,\n+                                             new_tip->nHeight, current_tip)) {\n+        return false;\n+    }\n+    if (!CopyHeightIndexToHashIndex<uint256>(*db_it, batch, m_name, DB_FILTER_HEADER,\n+                                             new_tip->nHeight, current_tip)) {\n+        return false;\n+    }\n+\n+    if (!m_db->WriteBatch(batch)) return false;\n+\n+    return BaseIndex::Rewind(current_tip, new_tip);\n+}\n+\n+template <typename T>\n+static bool LookupOne(const CDBWrapper& db, char key_prefix,\n+                      const CBlockIndex* block_index, T& result)\n+{\n+    // First check if the result is stored under the height index and the value there matches the\n+    // block hash. This should be the case if the block is on the active chain.\n+    std::pair<char, int> height_key(DB_BLOCK_HEIGHT, block_index->nHeight);\n+    std::pair<uint256, T> read_out;\n+    if (!db.Read(std::make_pair(key_prefix, height_key), read_out)) {\n+        return false;\n+    }\n+    if (read_out.first == block_index->GetBlockHash()) {\n+        result = std::move(read_out.second);\n+        return true;\n+    }\n+\n+    // If value at the height index corresponds to an different block, the result will be stored in\n+    // the hash index.\n+    std::pair<char, uint256> hash_key(DB_BLOCK_HASH, block_index->GetBlockHash());\n+    return db.Read(std::make_pair(key_prefix, hash_key), result);\n+}\n+\n+template <typename T>\n+static bool LookupRange(CDBWrapper& db, const std::string& index_name,\n+                        char key_prefix, int start_height, const CBlockIndex* stop_index,\n+                        std::vector<T>& results)\n+{\n+    if (start_height < 0) {\n+        return error(\"%s: start height (%d) is negative\", __func__, start_height);\n+    }\n+    if (start_height > stop_index->nHeight) {\n+        return error(\"%s: start height (%d) is greater than stop height (%d)\",\n+                     __func__, start_height, stop_index->nHeight);\n+    }\n+\n+    std::vector<std::pair<uint256, T>> values(stop_index->nHeight - start_height + 1);\n+\n+    std::unique_ptr<CDBIterator> db_it(db.NewIterator());\n+    db_it->Seek(std::make_pair(key_prefix, std::make_pair(DB_BLOCK_HEIGHT, start_height)));\n+    for (int height = start_height; height <= stop_index->nHeight; ++height) {\n+        std::pair<char, std::pair<char, int>> key, expected_key;\n+        expected_key = std::make_pair(key_prefix, std::make_pair(DB_BLOCK_HEIGHT, height));\n+\n+        if (!db_it->Valid() || !db_it->GetKey(key) || key != expected_key) {\n+            return false;\n+        }\n+\n+        size_t i = height - start_height;\n+        if (!db_it->GetValue(values[i])) {\n+            return error(\"%s: unable to read value in %s at key (%c, (%c, %d))\",\n+                         __func__, index_name, key_prefix, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        db_it->Next();\n+    }\n+\n+    results.resize(stop_index->nHeight - start_height + 1);\n+    for (const CBlockIndex* block_index = stop_index;\n+         block_index && block_index->nHeight >= start_height;\n+         block_index = block_index->pprev) {\n+        uint256 block_hash = block_index->GetBlockHash();\n+\n+        size_t i = block_index->nHeight - start_height;\n+        if (block_hash == values[i].first) {\n+            results[i] = std::move(values[i].second);\n+            continue;\n+        }\n+\n+        std::pair<char, uint256> hash_key(DB_BLOCK_HASH, block_hash);\n+        if (!db.Read(std::make_pair(key_prefix, hash_key), results[i])) {\n+            return error(\"%s: unable to read value in %s at key (%c, (%c, %s))\",\n+                         __func__, index_name, key_prefix, DB_BLOCK_HASH, block_hash.ToString());\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+bool BlockFilterIndex::LookupFilter(const CBlockIndex* block_index, BlockFilter& filter_out) const\n+{\n+    std::vector<unsigned char> encoded_filter;\n+    if (!LookupOne(*m_db, DB_FILTER, block_index, encoded_filter)) {\n+        return false;\n+    }\n+\n+    filter_out = BlockFilter(m_filter_type, block_index->GetBlockHash(), std::move(encoded_filter));\n+    return true;\n+}\n+\n+bool BlockFilterIndex::LookupFilterHeader(const CBlockIndex* block_index, uint256& header_out) const\n+{\n+    return LookupOne(*m_db, DB_FILTER_HEADER, block_index, header_out);\n+}\n+\n+bool BlockFilterIndex::LookupFilterRange(int start_height, const CBlockIndex* stop_index,\n+                                         std::vector<BlockFilter>& filters_out) const\n+{\n+    std::vector<std::vector<unsigned char>> encoded_filters;\n+    if (!LookupRange(*m_db, m_name, DB_FILTER, start_height, stop_index, encoded_filters)) {\n+        return false;\n+    }\n+\n+    filters_out.resize(stop_index->nHeight - start_height + 1);\n+\n+    auto it = filters_out.rbegin();\n+    auto encoded_filter_it = encoded_filters.rbegin();\n+    const CBlockIndex* pindex = stop_index;\n+\n+    while (it != filters_out.rend()) {\n+        *it = BlockFilter(m_filter_type, pindex->GetBlockHash(), std::move(*encoded_filter_it));",
      "path": "src/index/blockfilter.cpp",
      "position": null,
      "original_position": 244,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "1c2079125a394197e577be272dd5caa899278672",
      "in_reply_to_id": 214496437,
      "user": {
        "login": "leishman",
        "id": 3648618,
        "node_id": "MDQ6VXNlcjM2NDg2MTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3648618?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/leishman",
        "html_url": "https://github.com/leishman",
        "followers_url": "https://api.github.com/users/leishman/followers",
        "following_url": "https://api.github.com/users/leishman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/leishman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/leishman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/leishman/subscriptions",
        "organizations_url": "https://api.github.com/users/leishman/orgs",
        "repos_url": "https://api.github.com/users/leishman/repos",
        "events_url": "https://api.github.com/users/leishman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/leishman/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I meant using something like `insert` instead of direct assignment. It's been a while since I've written a lot of c++. ",
      "created_at": "2018-09-02T19:40:14Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r214550876",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214550876"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 244,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215163302",
      "pull_request_review_id": 152367186,
      "id": 215163302,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTE2MzMwMg==",
      "diff_hunk": "@@ -44,19 +54,16 @@ class GCSFilter\n public:\n \n     /** Constructs an empty filter. */\n-    GCSFilter(uint64_t siphash_k0 = 0, uint64_t siphash_k1 = 0, uint8_t P = 0, uint32_t M = 0);\n+    GCSFilter(const Params& params = Params());",
      "path": "src/blockfilter.h",
      "position": null,
      "original_position": 38,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "9b1e7a6cf213590e016bc26f2a094f2b6d59eb93",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Please make `explicit` :-)",
      "created_at": "2018-09-05T07:35:45Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r215163302",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215163302"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 57,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215163648",
      "pull_request_review_id": 152367624,
      "id": 215163648,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTE2MzY0OA==",
      "diff_hunk": "@@ -0,0 +1,289 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <map>\n+\n+#include <dbwrapper.h>\n+#include <index/blockfilter.h>\n+#include <util.h>\n+#include <validation.h>\n+\n+/* The index database stores three items for each block: the encoded filter, its dSHA256 hash, and\n+ * the header. Those belonging to blocks on the active chain are indexed by height, and those\n+ * belonging to blocks that have been reorganized out of the active chain are indexed by block hash.\n+ * This ensures that filter data for any block that becomes part of the active chain can always be\n+ * retrieved, alleviating timing concerns.\n+ *\n+ * Keys for the height index have the type pair<char, pair<DB_BLOCK_HEIGHT, int>>.\n+ * Keys for the hash index have the type pair<char, pair<DB_BLOCK_HASH, int>>.\n+ */\n+constexpr char DB_FILTER = 'f';\n+constexpr char DB_FILTER_HASH = 'h';\n+constexpr char DB_FILTER_HEADER = 'r';\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+\n+static std::map<BlockFilterType, BlockFilterIndex> g_filter_indexes;\n+\n+BlockFilterIndex::BlockFilterIndex(BlockFilterType filter_type,\n+                                   size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_filter_type(filter_type)\n+{\n+    const std::string& filter_name = BlockFilterTypeName(filter_type);\n+    if (filter_name == \"\") throw std::invalid_argument(\"unknown filter_type\");\n+\n+    m_name = filter_name + \" block filter index\";\n+    m_db = MakeUnique<BaseIndex::DB>(GetDataDir() / \"indexes\" / \"blockfilter\" / filter_name,\n+                                     n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool BlockFilterIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+    uint256 prev_header;\n+\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, uint256> read_out;\n+        std::pair<char, int> prev_height_key(DB_BLOCK_HEIGHT, pindex->nHeight - 1);\n+        if (!m_db->Read(std::make_pair(DB_FILTER_HEADER, prev_height_key), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        prev_header = read_out.second;\n+    }\n+\n+    BlockFilter filter(m_filter_type, block, block_undo);\n+    std::pair<char, int> height_key(DB_BLOCK_HEIGHT, pindex->nHeight);\n+\n+    CDBBatch batch(*m_db);\n+    batch.Write(std::make_pair(DB_FILTER, height_key),\n+                std::make_pair(pindex->GetBlockHash(), filter.GetEncodedFilter()));\n+    batch.Write(std::make_pair(DB_FILTER_HASH, height_key),\n+                std::make_pair(pindex->GetBlockHash(), filter.GetHash()));\n+    batch.Write(std::make_pair(DB_FILTER_HEADER, height_key),\n+                std::make_pair(pindex->GetBlockHash(), filter.ComputeHeader(prev_header)));\n+    return m_db->WriteBatch(batch);\n+}\n+\n+template <typename T>\n+static bool CopyHeightIndexToHashIndex(CDBIterator& db_it, CDBBatch& batch,\n+                                       const std::string& index_name, char key_prefix,\n+                                       int start_height, const CBlockIndex* stop_index)\n+{\n+    db_it.Seek(std::make_pair(key_prefix, std::make_pair(DB_BLOCK_HEIGHT, start_height)));\n+\n+    for (int height = start_height; height <= stop_index->nHeight; ++height) {\n+        std::pair<char, std::pair<char, int>> key, expected_key;\n+        expected_key = std::make_pair(key_prefix, std::make_pair(DB_BLOCK_HEIGHT, height));\n+\n+        if (!db_it.GetKey(key) || key != expected_key) {\n+            return error(\"%s: unexpected key in %s: expected (%c, (%c, %d))\",\n+                         __func__, index_name, key_prefix, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        std::pair<uint256, T> value;\n+        if (!db_it.GetValue(value)) {\n+            return error(\"%s: unable to read value in %s at key (%c, (%c, %d))\",\n+                         __func__, index_name, key_prefix, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        auto hash_key = std::make_pair(key_prefix, std::make_pair(DB_BLOCK_HASH, value.first));\n+        batch.Write(hash_key, std::move(value.second));\n+\n+        db_it.Next();\n+    }\n+    return true;\n+}\n+\n+bool BlockFilterIndex::Rewind(const CBlockIndex* current_tip, const CBlockIndex* new_tip)\n+{\n+    assert(current_tip->GetAncestor(new_tip->nHeight) == new_tip);",
      "path": "src/index/blockfilter.cpp",
      "position": null,
      "original_position": 112,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "9b1e7a6cf213590e016bc26f2a094f2b6d59eb93",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Assertions should not have side effects. Please move `GetAncestor` outside of assertion :-)",
      "created_at": "2018-09-05T07:37:09Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r215163648",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215163648"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 112,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215163868",
      "pull_request_review_id": 152367896,
      "id": 215163868,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTE2Mzg2OA==",
      "diff_hunk": "@@ -44,19 +54,16 @@ class GCSFilter\n public:\n \n     /** Constructs an empty filter. */\n-    GCSFilter(uint64_t siphash_k0 = 0, uint64_t siphash_k1 = 0, uint8_t P = 0, uint32_t M = 0);\n+    GCSFilter(const Params& params = Params());\n \n     /** Reconstructs an already-created filter from an encoding. */\n-    GCSFilter(uint64_t siphash_k0, uint64_t siphash_k1, uint8_t P, uint32_t M,\n-              std::vector<unsigned char> encoded_filter);\n+    GCSFilter(const Params& params, std::vector<unsigned char> encoded_filter);\n \n     /** Builds a new filter from the params and set of elements. */\n-    GCSFilter(uint64_t siphash_k0, uint64_t siphash_k1, uint8_t P, uint32_t M,\n-              const ElementSet& elements);\n+    GCSFilter(const Params& params, const ElementSet& elements);\n \n-    uint8_t GetP() const { return m_P; }\n     uint32_t GetN() const { return m_N; }\n-    uint32_t GetM() const { return m_M; }\n+    const Params& GetParams() const { return m_params; }",
      "path": "src/blockfilter.h",
      "position": null,
      "original_position": 53,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "9b1e7a6cf213590e016bc26f2a094f2b6d59eb93",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Remove `GetParams()`? Not used?",
      "created_at": "2018-09-05T07:38:03Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r215163868",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215163868"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215449867",
      "pull_request_review_id": 152718402,
      "id": 215449867,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTQ0OTg2Nw==",
      "diff_hunk": "@@ -0,0 +1,289 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <map>\n+\n+#include <dbwrapper.h>\n+#include <index/blockfilter.h>\n+#include <util.h>\n+#include <validation.h>\n+\n+/* The index database stores three items for each block: the encoded filter, its dSHA256 hash, and\n+ * the header. Those belonging to blocks on the active chain are indexed by height, and those\n+ * belonging to blocks that have been reorganized out of the active chain are indexed by block hash.\n+ * This ensures that filter data for any block that becomes part of the active chain can always be\n+ * retrieved, alleviating timing concerns.\n+ *\n+ * Keys for the height index have the type pair<char, pair<DB_BLOCK_HEIGHT, int>>.\n+ * Keys for the hash index have the type pair<char, pair<DB_BLOCK_HASH, int>>.\n+ */\n+constexpr char DB_FILTER = 'f';\n+constexpr char DB_FILTER_HASH = 'h';\n+constexpr char DB_FILTER_HEADER = 'r';\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+\n+static std::map<BlockFilterType, BlockFilterIndex> g_filter_indexes;\n+\n+BlockFilterIndex::BlockFilterIndex(BlockFilterType filter_type,\n+                                   size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_filter_type(filter_type)\n+{\n+    const std::string& filter_name = BlockFilterTypeName(filter_type);\n+    if (filter_name == \"\") throw std::invalid_argument(\"unknown filter_type\");\n+\n+    m_name = filter_name + \" block filter index\";\n+    m_db = MakeUnique<BaseIndex::DB>(GetDataDir() / \"indexes\" / \"blockfilter\" / filter_name,\n+                                     n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool BlockFilterIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+    uint256 prev_header;\n+\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, uint256> read_out;\n+        std::pair<char, int> prev_height_key(DB_BLOCK_HEIGHT, pindex->nHeight - 1);\n+        if (!m_db->Read(std::make_pair(DB_FILTER_HEADER, prev_height_key), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        prev_header = read_out.second;\n+    }\n+\n+    BlockFilter filter(m_filter_type, block, block_undo);\n+    std::pair<char, int> height_key(DB_BLOCK_HEIGHT, pindex->nHeight);\n+\n+    CDBBatch batch(*m_db);\n+    batch.Write(std::make_pair(DB_FILTER, height_key),\n+                std::make_pair(pindex->GetBlockHash(), filter.GetEncodedFilter()));\n+    batch.Write(std::make_pair(DB_FILTER_HASH, height_key),\n+                std::make_pair(pindex->GetBlockHash(), filter.GetHash()));\n+    batch.Write(std::make_pair(DB_FILTER_HEADER, height_key),\n+                std::make_pair(pindex->GetBlockHash(), filter.ComputeHeader(prev_header)));\n+    return m_db->WriteBatch(batch);\n+}\n+\n+template <typename T>\n+static bool CopyHeightIndexToHashIndex(CDBIterator& db_it, CDBBatch& batch,\n+                                       const std::string& index_name, char key_prefix,\n+                                       int start_height, const CBlockIndex* stop_index)\n+{\n+    db_it.Seek(std::make_pair(key_prefix, std::make_pair(DB_BLOCK_HEIGHT, start_height)));\n+\n+    for (int height = start_height; height <= stop_index->nHeight; ++height) {\n+        std::pair<char, std::pair<char, int>> key, expected_key;\n+        expected_key = std::make_pair(key_prefix, std::make_pair(DB_BLOCK_HEIGHT, height));\n+\n+        if (!db_it.GetKey(key) || key != expected_key) {\n+            return error(\"%s: unexpected key in %s: expected (%c, (%c, %d))\",\n+                         __func__, index_name, key_prefix, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        std::pair<uint256, T> value;\n+        if (!db_it.GetValue(value)) {\n+            return error(\"%s: unable to read value in %s at key (%c, (%c, %d))\",\n+                         __func__, index_name, key_prefix, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        auto hash_key = std::make_pair(key_prefix, std::make_pair(DB_BLOCK_HASH, value.first));\n+        batch.Write(hash_key, std::move(value.second));\n+\n+        db_it.Next();\n+    }\n+    return true;\n+}\n+\n+bool BlockFilterIndex::Rewind(const CBlockIndex* current_tip, const CBlockIndex* new_tip)\n+{\n+    assert(current_tip->GetAncestor(new_tip->nHeight) == new_tip);",
      "path": "src/index/blockfilter.cpp",
      "position": null,
      "original_position": 112,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "9b1e7a6cf213590e016bc26f2a094f2b6d59eb93",
      "in_reply_to_id": 215163648,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What is the side effect? `GetAncestor` is a `const` method.",
      "created_at": "2018-09-05T22:53:02Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r215449867",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215449867"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 112,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215449989",
      "pull_request_review_id": 152718528,
      "id": 215449989,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTQ0OTk4OQ==",
      "diff_hunk": "@@ -44,19 +54,16 @@ class GCSFilter\n public:\n \n     /** Constructs an empty filter. */\n-    GCSFilter(uint64_t siphash_k0 = 0, uint64_t siphash_k1 = 0, uint8_t P = 0, uint32_t M = 0);\n+    GCSFilter(const Params& params = Params());\n \n     /** Reconstructs an already-created filter from an encoding. */\n-    GCSFilter(uint64_t siphash_k0, uint64_t siphash_k1, uint8_t P, uint32_t M,\n-              std::vector<unsigned char> encoded_filter);\n+    GCSFilter(const Params& params, std::vector<unsigned char> encoded_filter);\n \n     /** Builds a new filter from the params and set of elements. */\n-    GCSFilter(uint64_t siphash_k0, uint64_t siphash_k1, uint8_t P, uint32_t M,\n-              const ElementSet& elements);\n+    GCSFilter(const Params& params, const ElementSet& elements);\n \n-    uint8_t GetP() const { return m_P; }\n     uint32_t GetN() const { return m_N; }\n-    uint32_t GetM() const { return m_M; }\n+    const Params& GetParams() const { return m_params; }",
      "path": "src/blockfilter.h",
      "position": null,
      "original_position": 53,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "9b1e7a6cf213590e016bc26f2a094f2b6d59eb93",
      "in_reply_to_id": 215163868,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No, it's not used, but it feels like there should be a getter.",
      "created_at": "2018-09-05T22:53:37Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r215449989",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215449989"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215523962",
      "pull_request_review_id": 152805690,
      "id": 215523962,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTUyMzk2Mg==",
      "diff_hunk": "@@ -44,19 +54,16 @@ class GCSFilter\n public:\n \n     /** Constructs an empty filter. */\n-    GCSFilter(uint64_t siphash_k0 = 0, uint64_t siphash_k1 = 0, uint8_t P = 0, uint32_t M = 0);\n+    GCSFilter(const Params& params = Params());\n \n     /** Reconstructs an already-created filter from an encoding. */\n-    GCSFilter(uint64_t siphash_k0, uint64_t siphash_k1, uint8_t P, uint32_t M,\n-              std::vector<unsigned char> encoded_filter);\n+    GCSFilter(const Params& params, std::vector<unsigned char> encoded_filter);\n \n     /** Builds a new filter from the params and set of elements. */\n-    GCSFilter(uint64_t siphash_k0, uint64_t siphash_k1, uint8_t P, uint32_t M,\n-              const ElementSet& elements);\n+    GCSFilter(const Params& params, const ElementSet& elements);\n \n-    uint8_t GetP() const { return m_P; }\n     uint32_t GetN() const { return m_N; }\n-    uint32_t GetM() const { return m_M; }\n+    const Params& GetParams() const { return m_params; }",
      "path": "src/blockfilter.h",
      "position": null,
      "original_position": 53,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "9b1e7a6cf213590e016bc26f2a094f2b6d59eb93",
      "in_reply_to_id": 215163868,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Unused code is untested code, so I suggest removing it or adding a test for it :-)",
      "created_at": "2018-09-06T07:40:13Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r215523962",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215523962"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215872796",
      "pull_request_review_id": 153234072,
      "id": 215872796,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTg3Mjc5Ng==",
      "diff_hunk": "@@ -0,0 +1,59 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the getblockfilter RPC.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal, assert_is_hex_string, assert_raises_rpc_error,\n+    connect_nodes, disconnect_nodes, sync_blocks\n+    )\n+\n+FILTER_TYPES = [\"basic\"]\n+\n+class GetBlockFilterTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n+        self.extra_args = [[\"-blockfilterindex\"], []]\n+\n+    def run_test (self):",
      "path": "test/functional/rpc_getblockfilter.py",
      "position": null,
      "original_position": 21,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "9b1e7a6cf213590e016bc26f2a094f2b6d59eb93",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```\r\n./test/functional/rpc_getblockfilter.py:21:17: E211 whitespace before '('\r\n```",
      "created_at": "2018-09-07T07:43:57Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r215872796",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215872796"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 21,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/216003484",
      "pull_request_review_id": 153399005,
      "id": 216003484,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjAwMzQ4NA==",
      "diff_hunk": "@@ -0,0 +1,289 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <map>\n+\n+#include <dbwrapper.h>\n+#include <index/blockfilter.h>\n+#include <util.h>\n+#include <validation.h>\n+\n+/* The index database stores three items for each block: the encoded filter, its dSHA256 hash, and\n+ * the header. Those belonging to blocks on the active chain are indexed by height, and those\n+ * belonging to blocks that have been reorganized out of the active chain are indexed by block hash.\n+ * This ensures that filter data for any block that becomes part of the active chain can always be\n+ * retrieved, alleviating timing concerns.",
      "path": "src/index/blockfilter.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "9b1e7a6cf213590e016bc26f2a094f2b6d59eb93",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Can you explain this? What would be wrong with always indexing by block hash? Especially given that `getblockfilter` takes a block hash argument. ",
      "created_at": "2018-09-07T15:45:12Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r216003484",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/216003484"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/216138058",
      "pull_request_review_id": 153562071,
      "id": 216138058,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjEzODA1OA==",
      "diff_hunk": "@@ -0,0 +1,289 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <map>\n+\n+#include <dbwrapper.h>\n+#include <index/blockfilter.h>\n+#include <util.h>\n+#include <validation.h>\n+\n+/* The index database stores three items for each block: the encoded filter, its dSHA256 hash, and\n+ * the header. Those belonging to blocks on the active chain are indexed by height, and those\n+ * belonging to blocks that have been reorganized out of the active chain are indexed by block hash.\n+ * This ensures that filter data for any block that becomes part of the active chain can always be\n+ * retrieved, alleviating timing concerns.",
      "path": "src/index/blockfilter.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "9b1e7a6cf213590e016bc26f2a094f2b6d59eb93",
      "in_reply_to_id": 216003484,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Indexing by hash is less efficient when fetching a range of filters or filter hashes by height, which is a common access pattern in BIP 157.",
      "created_at": "2018-09-08T18:51:56Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r216138058",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/216138058"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/216412270",
      "pull_request_review_id": 153886694,
      "id": 216412270,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjQxMjI3MA==",
      "diff_hunk": "@@ -0,0 +1,289 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <map>\n+\n+#include <dbwrapper.h>\n+#include <index/blockfilter.h>\n+#include <util.h>\n+#include <validation.h>\n+\n+/* The index database stores three items for each block: the encoded filter, its dSHA256 hash, and\n+ * the header. Those belonging to blocks on the active chain are indexed by height, and those\n+ * belonging to blocks that have been reorganized out of the active chain are indexed by block hash.\n+ * This ensures that filter data for any block that becomes part of the active chain can always be\n+ * retrieved, alleviating timing concerns.\n+ *\n+ * Keys for the height index have the type pair<char, pair<DB_BLOCK_HEIGHT, int>>.\n+ * Keys for the hash index have the type pair<char, pair<DB_BLOCK_HASH, int>>.\n+ */\n+constexpr char DB_FILTER = 'f';\n+constexpr char DB_FILTER_HASH = 'h';\n+constexpr char DB_FILTER_HEADER = 'r';\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+\n+static std::map<BlockFilterType, BlockFilterIndex> g_filter_indexes;\n+\n+BlockFilterIndex::BlockFilterIndex(BlockFilterType filter_type,\n+                                   size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_filter_type(filter_type)\n+{\n+    const std::string& filter_name = BlockFilterTypeName(filter_type);\n+    if (filter_name == \"\") throw std::invalid_argument(\"unknown filter_type\");\n+\n+    m_name = filter_name + \" block filter index\";\n+    m_db = MakeUnique<BaseIndex::DB>(GetDataDir() / \"indexes\" / \"blockfilter\" / filter_name,\n+                                     n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool BlockFilterIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+    uint256 prev_header;\n+\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, uint256> read_out;\n+        std::pair<char, int> prev_height_key(DB_BLOCK_HEIGHT, pindex->nHeight - 1);\n+        if (!m_db->Read(std::make_pair(DB_FILTER_HEADER, prev_height_key), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        prev_header = read_out.second;\n+    }\n+\n+    BlockFilter filter(m_filter_type, block, block_undo);\n+    std::pair<char, int> height_key(DB_BLOCK_HEIGHT, pindex->nHeight);\n+\n+    CDBBatch batch(*m_db);\n+    batch.Write(std::make_pair(DB_FILTER, height_key),\n+                std::make_pair(pindex->GetBlockHash(), filter.GetEncodedFilter()));\n+    batch.Write(std::make_pair(DB_FILTER_HASH, height_key),\n+                std::make_pair(pindex->GetBlockHash(), filter.GetHash()));\n+    batch.Write(std::make_pair(DB_FILTER_HEADER, height_key),\n+                std::make_pair(pindex->GetBlockHash(), filter.ComputeHeader(prev_header)));\n+    return m_db->WriteBatch(batch);\n+}\n+\n+template <typename T>\n+static bool CopyHeightIndexToHashIndex(CDBIterator& db_it, CDBBatch& batch,\n+                                       const std::string& index_name, char key_prefix,\n+                                       int start_height, const CBlockIndex* stop_index)\n+{\n+    db_it.Seek(std::make_pair(key_prefix, std::make_pair(DB_BLOCK_HEIGHT, start_height)));\n+\n+    for (int height = start_height; height <= stop_index->nHeight; ++height) {\n+        std::pair<char, std::pair<char, int>> key, expected_key;\n+        expected_key = std::make_pair(key_prefix, std::make_pair(DB_BLOCK_HEIGHT, height));\n+\n+        if (!db_it.GetKey(key) || key != expected_key) {\n+            return error(\"%s: unexpected key in %s: expected (%c, (%c, %d))\",\n+                         __func__, index_name, key_prefix, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        std::pair<uint256, T> value;\n+        if (!db_it.GetValue(value)) {\n+            return error(\"%s: unable to read value in %s at key (%c, (%c, %d))\",\n+                         __func__, index_name, key_prefix, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        auto hash_key = std::make_pair(key_prefix, std::make_pair(DB_BLOCK_HASH, value.first));\n+        batch.Write(hash_key, std::move(value.second));\n+\n+        db_it.Next();\n+    }\n+    return true;\n+}\n+\n+bool BlockFilterIndex::Rewind(const CBlockIndex* current_tip, const CBlockIndex* new_tip)\n+{\n+    assert(current_tip->GetAncestor(new_tip->nHeight) == new_tip);",
      "path": "src/index/blockfilter.cpp",
      "position": null,
      "original_position": 112,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "9b1e7a6cf213590e016bc26f2a094f2b6d59eb93",
      "in_reply_to_id": 215163648,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@jimpo You're right! Forget my comment :-)",
      "created_at": "2018-09-10T17:42:35Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r216412270",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/216412270"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 112,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691258",
      "pull_request_review_id": 157931825,
      "id": 219691258,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTY5MTI1OA==",
      "diff_hunk": "@@ -0,0 +1,307 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <blockfilter.h>\n+#include <chainparams.h>\n+#include <consensus/validation.h>\n+#include <index/blockfilterindex.h>\n+#include <miner.h>\n+#include <pow.h>\n+#include <test/test_bitcoin.h>\n+#include <script/standard.h>\n+#include <validation.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(blockfilter_index_tests)\n+\n+static bool ComputeFilter(BlockFilterType filter_type, const CBlockIndex* block_index,\n+                          BlockFilter& filter)\n+{\n+    CBlock block;\n+    if (!ReadBlockFromDisk(block, block_index->GetBlockPos(), Params().GetConsensus())) {\n+        return false;\n+    }\n+\n+    CBlockUndo block_undo;\n+    if (block_index->nHeight > 0 && !UndoReadFromDisk(block_undo, block_index)) {\n+        return false;\n+    }\n+\n+    filter = BlockFilter(filter_type, block, block_undo);\n+    return true;\n+}\n+\n+static bool CheckFilterLookups(BlockFilterIndex& filter_index, const CBlockIndex* block_index,\n+                               uint256& last_header)\n+{\n+    BlockFilter expected_filter;\n+    if (!ComputeFilter(filter_index.GetFilterType(), block_index, expected_filter)) {\n+        BOOST_ERROR(\"ComputeFilter failed on block \" << block_index->nHeight);\n+        return false;\n+    }\n+\n+    BlockFilter filter;\n+    uint256 filter_header;\n+    std::vector<BlockFilter> filters;\n+    std::vector<uint256> filter_hashes;\n+\n+    BOOST_CHECK(filter_index.LookupFilter(block_index, filter));\n+    BOOST_CHECK(filter_index.LookupFilterHeader(block_index, filter_header));\n+    BOOST_CHECK(filter_index.LookupFilterRange(block_index->nHeight, block_index, filters));\n+    BOOST_CHECK(filter_index.LookupFilterHashRange(block_index->nHeight, block_index,\n+                                                   filter_hashes));\n+\n+    BOOST_CHECK_EQUAL(filters.size(), 1);\n+    BOOST_CHECK_EQUAL(filter_hashes.size(), 1);\n+\n+    BOOST_CHECK_EQUAL(filter.GetHash(), expected_filter.GetHash());\n+    BOOST_CHECK_EQUAL(filter_header, expected_filter.ComputeHeader(last_header));\n+    BOOST_CHECK_EQUAL(filters[0].GetHash(), expected_filter.GetHash());\n+    BOOST_CHECK_EQUAL(filter_hashes[0], expected_filter.GetHash());\n+\n+    filters.clear();\n+    filter_hashes.clear();\n+    last_header = filter_header;\n+    return true;\n+}\n+\n+static CBlock CreateBlock(const CBlockIndex* prev,\n+                          const std::vector<CMutableTransaction>& txns,\n+                          const CScript& scriptPubKey)\n+{\n+    const CChainParams& chainparams = Params();\n+    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey);\n+    CBlock& block = pblocktemplate->block;\n+    block.hashPrevBlock = prev->GetBlockHash();\n+    block.nTime = prev->nTime + 1;\n+\n+    // Replace mempool-selected txns with just coinbase plus passed-in txns:\n+    block.vtx.resize(1);\n+    for (const CMutableTransaction& tx : txns)\n+        block.vtx.push_back(MakeTransactionRef(tx));\n+    // IncrementExtraNonce creates a valid coinbase and merkleRoot\n+    unsigned int extraNonce = 0;\n+    IncrementExtraNonce(&block, prev, extraNonce);\n+\n+    while (!CheckProofOfWork(block.GetHash(), block.nBits, chainparams.GetConsensus())) ++block.nNonce;\n+\n+    return block;\n+}\n+\n+static bool BuildChain(const CBlockIndex* pindex, const CScript& coinbase_script_pub_key,\n+                       size_t length, std::vector<std::shared_ptr<CBlock>>& chain)\n+{\n+    std::vector<CMutableTransaction> no_txns;\n+\n+    chain.resize(length);\n+    for (auto& block : chain) {\n+        block = std::make_shared<CBlock>(CreateBlock(pindex, no_txns, coinbase_script_pub_key));\n+        CBlockHeader header = block->GetBlockHeader();\n+\n+        CValidationState state;\n+        if (!ProcessNewBlockHeaders({header}, state, Params(), &pindex, nullptr)) {\n+            return false;\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, TestChain100Setup)\n+{\n+    BlockFilterIndex filter_index(BlockFilterType::BASIC, 1 << 20, true);\n+\n+    uint256 last_header;\n+\n+    // Filter should not be found in the index before it is started.\n+    {\n+        LOCK(cs_main);\n+\n+        BlockFilter filter;\n+        uint256 filter_header;\n+        std::vector<BlockFilter> filters;\n+        std::vector<uint256> filter_hashes;\n+\n+        for (const CBlockIndex* block_index = chainActive.Genesis();\n+             block_index != nullptr;\n+             block_index = chainActive.Next(block_index)) {\n+",
      "path": "src/test/blockfilter_index_tests.cpp",
      "position": null,
      "original_position": 130,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "d4d3ba7ceb6121b56e2fa38151e88f95993881ea",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```\r\n2018-09-22 21:14:22 cpplint(pr=14121): src/test/blockfilter_index_tests.cpp:130:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]\r\n```",
      "created_at": "2018-09-23T07:58:51Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r219691258",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691258"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 130,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/220326775",
      "pull_request_review_id": 158709722,
      "id": 220326775,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMDMyNjc3NQ==",
      "diff_hunk": "@@ -0,0 +1,289 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <map>\n+\n+#include <dbwrapper.h>\n+#include <index/blockfilterindex.h>\n+#include <util.h>\n+#include <validation.h>\n+\n+/* The index database stores three items for each block: the encoded filter, its dSHA256 hash, and\n+ * the header. Those belonging to blocks on the active chain are indexed by height, and those\n+ * belonging to blocks that have been reorganized out of the active chain are indexed by block hash.\n+ * This ensures that filter data for any block that becomes part of the active chain can always be\n+ * retrieved, alleviating timing concerns.\n+ *\n+ * Keys for the height index have the type pair<char, pair<DB_BLOCK_HEIGHT, int>>.\n+ * Keys for the hash index have the type pair<char, pair<DB_BLOCK_HASH, int>>.\n+ */\n+constexpr char DB_FILTER = 'f';\n+constexpr char DB_FILTER_HASH = 'h';\n+constexpr char DB_FILTER_HEADER = 'r';\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+\n+static std::map<BlockFilterType, BlockFilterIndex> g_filter_indexes;\n+\n+BlockFilterIndex::BlockFilterIndex(BlockFilterType filter_type,\n+                                   size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_filter_type(filter_type)\n+{\n+    const std::string& filter_name = BlockFilterTypeName(filter_type);\n+    if (filter_name == \"\") throw std::invalid_argument(\"unknown filter_type\");\n+\n+    m_name = filter_name + \" block filter index\";\n+    m_db = MakeUnique<BaseIndex::DB>(GetDataDir() / \"indexes\" / \"blockfilter\" / filter_name,\n+                                     n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool BlockFilterIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+    uint256 prev_header;\n+\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, uint256> read_out;\n+        std::pair<char, int> prev_height_key(DB_BLOCK_HEIGHT, pindex->nHeight - 1);\n+        if (!m_db->Read(std::make_pair(DB_FILTER_HEADER, prev_height_key), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        prev_header = read_out.second;\n+    }\n+\n+    BlockFilter filter(m_filter_type, block, block_undo);\n+    std::pair<char, int> height_key(DB_BLOCK_HEIGHT, pindex->nHeight);\n+\n+    CDBBatch batch(*m_db);\n+    batch.Write(std::make_pair(DB_FILTER, height_key),\n+                std::make_pair(pindex->GetBlockHash(), filter.GetEncodedFilter()));\n+    batch.Write(std::make_pair(DB_FILTER_HASH, height_key),\n+                std::make_pair(pindex->GetBlockHash(), filter.GetHash()));\n+    batch.Write(std::make_pair(DB_FILTER_HEADER, height_key),\n+                std::make_pair(pindex->GetBlockHash(), filter.ComputeHeader(prev_header)));\n+    return m_db->WriteBatch(batch);\n+}\n+\n+template <typename T>\n+static bool CopyHeightIndexToHashIndex(CDBIterator& db_it, CDBBatch& batch,\n+                                       const std::string& index_name, char key_prefix,\n+                                       int start_height, const CBlockIndex* stop_index)\n+{\n+    db_it.Seek(std::make_pair(key_prefix, std::make_pair(DB_BLOCK_HEIGHT, start_height)));\n+\n+    for (int height = start_height; height <= stop_index->nHeight; ++height) {\n+        std::pair<char, std::pair<char, int>> key, expected_key;\n+        expected_key = std::make_pair(key_prefix, std::make_pair(DB_BLOCK_HEIGHT, height));\n+\n+        if (!db_it.GetKey(key) || key != expected_key) {\n+            return error(\"%s: unexpected key in %s: expected (%c, (%c, %d))\",\n+                         __func__, index_name, key_prefix, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        std::pair<uint256, T> value;\n+        if (!db_it.GetValue(value)) {\n+            return error(\"%s: unable to read value in %s at key (%c, (%c, %d))\",\n+                         __func__, index_name, key_prefix, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        auto hash_key = std::make_pair(key_prefix, std::make_pair(DB_BLOCK_HASH, value.first));\n+        batch.Write(hash_key, std::move(value.second));\n+\n+        db_it.Next();\n+    }\n+    return true;\n+}\n+\n+bool BlockFilterIndex::Rewind(const CBlockIndex* current_tip, const CBlockIndex* new_tip)\n+{\n+    assert(current_tip->GetAncestor(new_tip->nHeight) == new_tip);\n+\n+    CDBBatch batch(*m_db);\n+    std::unique_ptr<CDBIterator> db_it(m_db->NewIterator());\n+\n+    if (!CopyHeightIndexToHashIndex<std::vector<unsigned char>>(*db_it, batch, m_name, DB_FILTER,\n+                                                                new_tip->nHeight, current_tip)) {\n+        return false;\n+    }\n+    if (!CopyHeightIndexToHashIndex<uint256>(*db_it, batch, m_name, DB_FILTER_HASH,\n+                                             new_tip->nHeight, current_tip)) {\n+        return false;\n+    }\n+    if (!CopyHeightIndexToHashIndex<uint256>(*db_it, batch, m_name, DB_FILTER_HEADER,\n+                                             new_tip->nHeight, current_tip)) {\n+        return false;\n+    }\n+\n+    if (!m_db->WriteBatch(batch)) return false;\n+\n+    return BaseIndex::Rewind(current_tip, new_tip);\n+}\n+\n+template <typename T>\n+static bool LookupOne(const CDBWrapper& db, char key_prefix,\n+                      const CBlockIndex* block_index, T& result)\n+{\n+    // First check if the result is stored under the height index and the value there matches the\n+    // block hash. This should be the case if the block is on the active chain.\n+    std::pair<char, int> height_key(DB_BLOCK_HEIGHT, block_index->nHeight);\n+    std::pair<uint256, T> read_out;\n+    if (!db.Read(std::make_pair(key_prefix, height_key), read_out)) {\n+        return false;\n+    }\n+    if (read_out.first == block_index->GetBlockHash()) {\n+        result = std::move(read_out.second);\n+        return true;\n+    }\n+\n+    // If value at the height index corresponds to an different block, the result will be stored in\n+    // the hash index.\n+    std::pair<char, uint256> hash_key(DB_BLOCK_HASH, block_index->GetBlockHash());\n+    return db.Read(std::make_pair(key_prefix, hash_key), result);\n+}\n+\n+template <typename T>\n+static bool LookupRange(CDBWrapper& db, const std::string& index_name,\n+                        char key_prefix, int start_height, const CBlockIndex* stop_index,\n+                        std::vector<T>& results)\n+{\n+    if (start_height < 0) {\n+        return error(\"%s: start height (%d) is negative\", __func__, start_height);\n+    }\n+    if (start_height > stop_index->nHeight) {\n+        return error(\"%s: start height (%d) is greater than stop height (%d)\",\n+                     __func__, start_height, stop_index->nHeight);\n+    }\n+\n+    std::vector<std::pair<uint256, T>> values(stop_index->nHeight - start_height + 1);\n+\n+    std::unique_ptr<CDBIterator> db_it(db.NewIterator());\n+    db_it->Seek(std::make_pair(key_prefix, std::make_pair(DB_BLOCK_HEIGHT, start_height)));\n+    for (int height = start_height; height <= stop_index->nHeight; ++height) {\n+        std::pair<char, std::pair<char, int>> key, expected_key;\n+        expected_key = std::make_pair(key_prefix, std::make_pair(DB_BLOCK_HEIGHT, height));\n+\n+        if (!db_it->Valid() || !db_it->GetKey(key) || key != expected_key) {\n+            return false;\n+        }\n+\n+        size_t i = height - start_height;",
      "path": "src/index/blockfilterindex.cpp",
      "position": null,
      "original_position": 182,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "d4d3ba7ceb6121b56e2fa38151e88f95993881ea",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```\r\n2018-09-25 20:53:15 clang(pr=14121): index/blockfilterindex.cpp:182:27: warning: implicit conversion changes signedness: 'int' to 'size_t' (aka 'unsigned long') [-Wsign-conversion]\r\n```",
      "created_at": "2018-09-25T19:35:17Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r220326775",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/220326775"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 182,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/220326881",
      "pull_request_review_id": 158709853,
      "id": 220326881,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMDMyNjg4MQ==",
      "diff_hunk": "@@ -0,0 +1,289 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <map>\n+\n+#include <dbwrapper.h>\n+#include <index/blockfilterindex.h>\n+#include <util.h>\n+#include <validation.h>\n+\n+/* The index database stores three items for each block: the encoded filter, its dSHA256 hash, and\n+ * the header. Those belonging to blocks on the active chain are indexed by height, and those\n+ * belonging to blocks that have been reorganized out of the active chain are indexed by block hash.\n+ * This ensures that filter data for any block that becomes part of the active chain can always be\n+ * retrieved, alleviating timing concerns.\n+ *\n+ * Keys for the height index have the type pair<char, pair<DB_BLOCK_HEIGHT, int>>.\n+ * Keys for the hash index have the type pair<char, pair<DB_BLOCK_HASH, int>>.\n+ */\n+constexpr char DB_FILTER = 'f';\n+constexpr char DB_FILTER_HASH = 'h';\n+constexpr char DB_FILTER_HEADER = 'r';\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+\n+static std::map<BlockFilterType, BlockFilterIndex> g_filter_indexes;\n+\n+BlockFilterIndex::BlockFilterIndex(BlockFilterType filter_type,\n+                                   size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_filter_type(filter_type)\n+{\n+    const std::string& filter_name = BlockFilterTypeName(filter_type);\n+    if (filter_name == \"\") throw std::invalid_argument(\"unknown filter_type\");\n+\n+    m_name = filter_name + \" block filter index\";\n+    m_db = MakeUnique<BaseIndex::DB>(GetDataDir() / \"indexes\" / \"blockfilter\" / filter_name,\n+                                     n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool BlockFilterIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+    uint256 prev_header;\n+\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, uint256> read_out;\n+        std::pair<char, int> prev_height_key(DB_BLOCK_HEIGHT, pindex->nHeight - 1);\n+        if (!m_db->Read(std::make_pair(DB_FILTER_HEADER, prev_height_key), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        prev_header = read_out.second;\n+    }\n+\n+    BlockFilter filter(m_filter_type, block, block_undo);\n+    std::pair<char, int> height_key(DB_BLOCK_HEIGHT, pindex->nHeight);\n+\n+    CDBBatch batch(*m_db);\n+    batch.Write(std::make_pair(DB_FILTER, height_key),\n+                std::make_pair(pindex->GetBlockHash(), filter.GetEncodedFilter()));\n+    batch.Write(std::make_pair(DB_FILTER_HASH, height_key),\n+                std::make_pair(pindex->GetBlockHash(), filter.GetHash()));\n+    batch.Write(std::make_pair(DB_FILTER_HEADER, height_key),\n+                std::make_pair(pindex->GetBlockHash(), filter.ComputeHeader(prev_header)));\n+    return m_db->WriteBatch(batch);\n+}\n+\n+template <typename T>\n+static bool CopyHeightIndexToHashIndex(CDBIterator& db_it, CDBBatch& batch,\n+                                       const std::string& index_name, char key_prefix,\n+                                       int start_height, const CBlockIndex* stop_index)\n+{\n+    db_it.Seek(std::make_pair(key_prefix, std::make_pair(DB_BLOCK_HEIGHT, start_height)));\n+\n+    for (int height = start_height; height <= stop_index->nHeight; ++height) {\n+        std::pair<char, std::pair<char, int>> key, expected_key;\n+        expected_key = std::make_pair(key_prefix, std::make_pair(DB_BLOCK_HEIGHT, height));\n+\n+        if (!db_it.GetKey(key) || key != expected_key) {\n+            return error(\"%s: unexpected key in %s: expected (%c, (%c, %d))\",\n+                         __func__, index_name, key_prefix, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        std::pair<uint256, T> value;\n+        if (!db_it.GetValue(value)) {\n+            return error(\"%s: unable to read value in %s at key (%c, (%c, %d))\",\n+                         __func__, index_name, key_prefix, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        auto hash_key = std::make_pair(key_prefix, std::make_pair(DB_BLOCK_HASH, value.first));\n+        batch.Write(hash_key, std::move(value.second));\n+\n+        db_it.Next();\n+    }\n+    return true;\n+}\n+\n+bool BlockFilterIndex::Rewind(const CBlockIndex* current_tip, const CBlockIndex* new_tip)\n+{\n+    assert(current_tip->GetAncestor(new_tip->nHeight) == new_tip);\n+\n+    CDBBatch batch(*m_db);\n+    std::unique_ptr<CDBIterator> db_it(m_db->NewIterator());\n+\n+    if (!CopyHeightIndexToHashIndex<std::vector<unsigned char>>(*db_it, batch, m_name, DB_FILTER,\n+                                                                new_tip->nHeight, current_tip)) {\n+        return false;\n+    }\n+    if (!CopyHeightIndexToHashIndex<uint256>(*db_it, batch, m_name, DB_FILTER_HASH,\n+                                             new_tip->nHeight, current_tip)) {\n+        return false;\n+    }\n+    if (!CopyHeightIndexToHashIndex<uint256>(*db_it, batch, m_name, DB_FILTER_HEADER,\n+                                             new_tip->nHeight, current_tip)) {\n+        return false;\n+    }\n+\n+    if (!m_db->WriteBatch(batch)) return false;\n+\n+    return BaseIndex::Rewind(current_tip, new_tip);\n+}\n+\n+template <typename T>\n+static bool LookupOne(const CDBWrapper& db, char key_prefix,\n+                      const CBlockIndex* block_index, T& result)\n+{\n+    // First check if the result is stored under the height index and the value there matches the\n+    // block hash. This should be the case if the block is on the active chain.\n+    std::pair<char, int> height_key(DB_BLOCK_HEIGHT, block_index->nHeight);\n+    std::pair<uint256, T> read_out;\n+    if (!db.Read(std::make_pair(key_prefix, height_key), read_out)) {\n+        return false;\n+    }\n+    if (read_out.first == block_index->GetBlockHash()) {\n+        result = std::move(read_out.second);\n+        return true;\n+    }\n+\n+    // If value at the height index corresponds to an different block, the result will be stored in\n+    // the hash index.\n+    std::pair<char, uint256> hash_key(DB_BLOCK_HASH, block_index->GetBlockHash());\n+    return db.Read(std::make_pair(key_prefix, hash_key), result);\n+}\n+\n+template <typename T>\n+static bool LookupRange(CDBWrapper& db, const std::string& index_name,\n+                        char key_prefix, int start_height, const CBlockIndex* stop_index,\n+                        std::vector<T>& results)\n+{\n+    if (start_height < 0) {\n+        return error(\"%s: start height (%d) is negative\", __func__, start_height);\n+    }\n+    if (start_height > stop_index->nHeight) {\n+        return error(\"%s: start height (%d) is greater than stop height (%d)\",\n+                     __func__, start_height, stop_index->nHeight);\n+    }\n+\n+    std::vector<std::pair<uint256, T>> values(stop_index->nHeight - start_height + 1);\n+\n+    std::unique_ptr<CDBIterator> db_it(db.NewIterator());\n+    db_it->Seek(std::make_pair(key_prefix, std::make_pair(DB_BLOCK_HEIGHT, start_height)));\n+    for (int height = start_height; height <= stop_index->nHeight; ++height) {\n+        std::pair<char, std::pair<char, int>> key, expected_key;\n+        expected_key = std::make_pair(key_prefix, std::make_pair(DB_BLOCK_HEIGHT, height));\n+\n+        if (!db_it->Valid() || !db_it->GetKey(key) || key != expected_key) {\n+            return false;\n+        }\n+\n+        size_t i = height - start_height;\n+        if (!db_it->GetValue(values[i])) {\n+            return error(\"%s: unable to read value in %s at key (%c, (%c, %d))\",\n+                         __func__, index_name, key_prefix, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        db_it->Next();\n+    }\n+\n+    results.resize(stop_index->nHeight - start_height + 1);\n+    for (const CBlockIndex* block_index = stop_index;\n+         block_index && block_index->nHeight >= start_height;\n+         block_index = block_index->pprev) {\n+        uint256 block_hash = block_index->GetBlockHash();\n+\n+        size_t i = block_index->nHeight - start_height;",
      "path": "src/index/blockfilterindex.cpp",
      "position": null,
      "original_position": 197,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "d4d3ba7ceb6121b56e2fa38151e88f95993881ea",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```\r\n2018-09-25 20:53:15 clang(pr=14121): index/blockfilterindex.cpp:197:41: warning: implicit conversion changes signedness: 'int' to 'size_t' (aka 'unsigned long') [-Wsign-conversion]\r\n```",
      "created_at": "2018-09-25T19:35:33Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r220326881",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/220326881"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 197,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/220326988",
      "pull_request_review_id": 158709983,
      "id": 220326988,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMDMyNjk4OA==",
      "diff_hunk": "@@ -0,0 +1,289 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <map>\n+\n+#include <dbwrapper.h>\n+#include <index/blockfilterindex.h>\n+#include <util.h>\n+#include <validation.h>\n+\n+/* The index database stores three items for each block: the encoded filter, its dSHA256 hash, and\n+ * the header. Those belonging to blocks on the active chain are indexed by height, and those\n+ * belonging to blocks that have been reorganized out of the active chain are indexed by block hash.\n+ * This ensures that filter data for any block that becomes part of the active chain can always be\n+ * retrieved, alleviating timing concerns.\n+ *\n+ * Keys for the height index have the type pair<char, pair<DB_BLOCK_HEIGHT, int>>.\n+ * Keys for the hash index have the type pair<char, pair<DB_BLOCK_HASH, int>>.\n+ */\n+constexpr char DB_FILTER = 'f';\n+constexpr char DB_FILTER_HASH = 'h';\n+constexpr char DB_FILTER_HEADER = 'r';\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+\n+static std::map<BlockFilterType, BlockFilterIndex> g_filter_indexes;\n+\n+BlockFilterIndex::BlockFilterIndex(BlockFilterType filter_type,\n+                                   size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_filter_type(filter_type)\n+{\n+    const std::string& filter_name = BlockFilterTypeName(filter_type);\n+    if (filter_name == \"\") throw std::invalid_argument(\"unknown filter_type\");\n+\n+    m_name = filter_name + \" block filter index\";\n+    m_db = MakeUnique<BaseIndex::DB>(GetDataDir() / \"indexes\" / \"blockfilter\" / filter_name,\n+                                     n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool BlockFilterIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+    uint256 prev_header;\n+\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, uint256> read_out;\n+        std::pair<char, int> prev_height_key(DB_BLOCK_HEIGHT, pindex->nHeight - 1);\n+        if (!m_db->Read(std::make_pair(DB_FILTER_HEADER, prev_height_key), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        prev_header = read_out.second;\n+    }\n+\n+    BlockFilter filter(m_filter_type, block, block_undo);\n+    std::pair<char, int> height_key(DB_BLOCK_HEIGHT, pindex->nHeight);\n+\n+    CDBBatch batch(*m_db);\n+    batch.Write(std::make_pair(DB_FILTER, height_key),\n+                std::make_pair(pindex->GetBlockHash(), filter.GetEncodedFilter()));\n+    batch.Write(std::make_pair(DB_FILTER_HASH, height_key),\n+                std::make_pair(pindex->GetBlockHash(), filter.GetHash()));\n+    batch.Write(std::make_pair(DB_FILTER_HEADER, height_key),\n+                std::make_pair(pindex->GetBlockHash(), filter.ComputeHeader(prev_header)));\n+    return m_db->WriteBatch(batch);\n+}\n+\n+template <typename T>\n+static bool CopyHeightIndexToHashIndex(CDBIterator& db_it, CDBBatch& batch,\n+                                       const std::string& index_name, char key_prefix,\n+                                       int start_height, const CBlockIndex* stop_index)\n+{\n+    db_it.Seek(std::make_pair(key_prefix, std::make_pair(DB_BLOCK_HEIGHT, start_height)));\n+\n+    for (int height = start_height; height <= stop_index->nHeight; ++height) {\n+        std::pair<char, std::pair<char, int>> key, expected_key;\n+        expected_key = std::make_pair(key_prefix, std::make_pair(DB_BLOCK_HEIGHT, height));\n+\n+        if (!db_it.GetKey(key) || key != expected_key) {\n+            return error(\"%s: unexpected key in %s: expected (%c, (%c, %d))\",\n+                         __func__, index_name, key_prefix, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        std::pair<uint256, T> value;\n+        if (!db_it.GetValue(value)) {\n+            return error(\"%s: unable to read value in %s at key (%c, (%c, %d))\",\n+                         __func__, index_name, key_prefix, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        auto hash_key = std::make_pair(key_prefix, std::make_pair(DB_BLOCK_HASH, value.first));\n+        batch.Write(hash_key, std::move(value.second));\n+\n+        db_it.Next();\n+    }\n+    return true;\n+}\n+\n+bool BlockFilterIndex::Rewind(const CBlockIndex* current_tip, const CBlockIndex* new_tip)\n+{\n+    assert(current_tip->GetAncestor(new_tip->nHeight) == new_tip);\n+\n+    CDBBatch batch(*m_db);\n+    std::unique_ptr<CDBIterator> db_it(m_db->NewIterator());\n+\n+    if (!CopyHeightIndexToHashIndex<std::vector<unsigned char>>(*db_it, batch, m_name, DB_FILTER,\n+                                                                new_tip->nHeight, current_tip)) {\n+        return false;\n+    }\n+    if (!CopyHeightIndexToHashIndex<uint256>(*db_it, batch, m_name, DB_FILTER_HASH,\n+                                             new_tip->nHeight, current_tip)) {\n+        return false;\n+    }\n+    if (!CopyHeightIndexToHashIndex<uint256>(*db_it, batch, m_name, DB_FILTER_HEADER,\n+                                             new_tip->nHeight, current_tip)) {\n+        return false;\n+    }\n+\n+    if (!m_db->WriteBatch(batch)) return false;\n+\n+    return BaseIndex::Rewind(current_tip, new_tip);\n+}\n+\n+template <typename T>\n+static bool LookupOne(const CDBWrapper& db, char key_prefix,\n+                      const CBlockIndex* block_index, T& result)\n+{\n+    // First check if the result is stored under the height index and the value there matches the\n+    // block hash. This should be the case if the block is on the active chain.\n+    std::pair<char, int> height_key(DB_BLOCK_HEIGHT, block_index->nHeight);\n+    std::pair<uint256, T> read_out;\n+    if (!db.Read(std::make_pair(key_prefix, height_key), read_out)) {\n+        return false;\n+    }\n+    if (read_out.first == block_index->GetBlockHash()) {\n+        result = std::move(read_out.second);\n+        return true;\n+    }\n+\n+    // If value at the height index corresponds to an different block, the result will be stored in\n+    // the hash index.\n+    std::pair<char, uint256> hash_key(DB_BLOCK_HASH, block_index->GetBlockHash());\n+    return db.Read(std::make_pair(key_prefix, hash_key), result);\n+}\n+\n+template <typename T>\n+static bool LookupRange(CDBWrapper& db, const std::string& index_name,\n+                        char key_prefix, int start_height, const CBlockIndex* stop_index,\n+                        std::vector<T>& results)\n+{\n+    if (start_height < 0) {\n+        return error(\"%s: start height (%d) is negative\", __func__, start_height);\n+    }\n+    if (start_height > stop_index->nHeight) {\n+        return error(\"%s: start height (%d) is greater than stop height (%d)\",\n+                     __func__, start_height, stop_index->nHeight);\n+    }\n+\n+    std::vector<std::pair<uint256, T>> values(stop_index->nHeight - start_height + 1);\n+\n+    std::unique_ptr<CDBIterator> db_it(db.NewIterator());\n+    db_it->Seek(std::make_pair(key_prefix, std::make_pair(DB_BLOCK_HEIGHT, start_height)));\n+    for (int height = start_height; height <= stop_index->nHeight; ++height) {\n+        std::pair<char, std::pair<char, int>> key, expected_key;\n+        expected_key = std::make_pair(key_prefix, std::make_pair(DB_BLOCK_HEIGHT, height));\n+\n+        if (!db_it->Valid() || !db_it->GetKey(key) || key != expected_key) {\n+            return false;\n+        }\n+\n+        size_t i = height - start_height;\n+        if (!db_it->GetValue(values[i])) {\n+            return error(\"%s: unable to read value in %s at key (%c, (%c, %d))\",\n+                         __func__, index_name, key_prefix, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        db_it->Next();\n+    }\n+\n+    results.resize(stop_index->nHeight - start_height + 1);\n+    for (const CBlockIndex* block_index = stop_index;\n+         block_index && block_index->nHeight >= start_height;\n+         block_index = block_index->pprev) {\n+        uint256 block_hash = block_index->GetBlockHash();\n+\n+        size_t i = block_index->nHeight - start_height;\n+        if (block_hash == values[i].first) {\n+            results[i] = std::move(values[i].second);\n+            continue;\n+        }\n+\n+        std::pair<char, uint256> hash_key(DB_BLOCK_HASH, block_hash);\n+        if (!db.Read(std::make_pair(key_prefix, hash_key), results[i])) {\n+            return error(\"%s: unable to read value in %s at key (%c, (%c, %s))\",\n+                         __func__, index_name, key_prefix, DB_BLOCK_HASH, block_hash.ToString());\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+bool BlockFilterIndex::LookupFilter(const CBlockIndex* block_index, BlockFilter& filter_out) const\n+{\n+    std::vector<unsigned char> encoded_filter;\n+    if (!LookupOne(*m_db, DB_FILTER, block_index, encoded_filter)) {\n+        return false;\n+    }\n+\n+    filter_out = BlockFilter(m_filter_type, block_index->GetBlockHash(), std::move(encoded_filter));\n+    return true;\n+}\n+\n+bool BlockFilterIndex::LookupFilterHeader(const CBlockIndex* block_index, uint256& header_out) const\n+{\n+    return LookupOne(*m_db, DB_FILTER_HEADER, block_index, header_out);\n+}\n+\n+bool BlockFilterIndex::LookupFilterRange(int start_height, const CBlockIndex* stop_index,\n+                                         std::vector<BlockFilter>& filters_out) const\n+{\n+    std::vector<std::vector<unsigned char>> encoded_filters;\n+    if (!LookupRange(*m_db, m_name, DB_FILTER, start_height, stop_index, encoded_filters)) {\n+        return false;\n+    }\n+\n+    filters_out.resize(stop_index->nHeight - start_height + 1);",
      "path": "src/index/blockfilterindex.cpp",
      "position": null,
      "original_position": 237,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "d4d3ba7ceb6121b56e2fa38151e88f95993881ea",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```\r\n2018-09-25 20:53:15 clang(pr=14121): index/blockfilterindex.cpp:237:59: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [-Wsign-conversion]\r\n```",
      "created_at": "2018-09-25T19:35:50Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r220326988",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/220326988"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 237,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/220327112",
      "pull_request_review_id": 158710127,
      "id": 220327112,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMDMyNzExMg==",
      "diff_hunk": "@@ -0,0 +1,289 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <map>\n+\n+#include <dbwrapper.h>\n+#include <index/blockfilterindex.h>\n+#include <util.h>\n+#include <validation.h>\n+\n+/* The index database stores three items for each block: the encoded filter, its dSHA256 hash, and\n+ * the header. Those belonging to blocks on the active chain are indexed by height, and those\n+ * belonging to blocks that have been reorganized out of the active chain are indexed by block hash.\n+ * This ensures that filter data for any block that becomes part of the active chain can always be\n+ * retrieved, alleviating timing concerns.\n+ *\n+ * Keys for the height index have the type pair<char, pair<DB_BLOCK_HEIGHT, int>>.\n+ * Keys for the hash index have the type pair<char, pair<DB_BLOCK_HASH, int>>.\n+ */\n+constexpr char DB_FILTER = 'f';\n+constexpr char DB_FILTER_HASH = 'h';\n+constexpr char DB_FILTER_HEADER = 'r';\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+\n+static std::map<BlockFilterType, BlockFilterIndex> g_filter_indexes;\n+\n+BlockFilterIndex::BlockFilterIndex(BlockFilterType filter_type,\n+                                   size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_filter_type(filter_type)\n+{\n+    const std::string& filter_name = BlockFilterTypeName(filter_type);\n+    if (filter_name == \"\") throw std::invalid_argument(\"unknown filter_type\");\n+\n+    m_name = filter_name + \" block filter index\";\n+    m_db = MakeUnique<BaseIndex::DB>(GetDataDir() / \"indexes\" / \"blockfilter\" / filter_name,\n+                                     n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool BlockFilterIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+    uint256 prev_header;\n+\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, uint256> read_out;\n+        std::pair<char, int> prev_height_key(DB_BLOCK_HEIGHT, pindex->nHeight - 1);\n+        if (!m_db->Read(std::make_pair(DB_FILTER_HEADER, prev_height_key), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        prev_header = read_out.second;\n+    }\n+\n+    BlockFilter filter(m_filter_type, block, block_undo);\n+    std::pair<char, int> height_key(DB_BLOCK_HEIGHT, pindex->nHeight);\n+\n+    CDBBatch batch(*m_db);\n+    batch.Write(std::make_pair(DB_FILTER, height_key),\n+                std::make_pair(pindex->GetBlockHash(), filter.GetEncodedFilter()));\n+    batch.Write(std::make_pair(DB_FILTER_HASH, height_key),\n+                std::make_pair(pindex->GetBlockHash(), filter.GetHash()));\n+    batch.Write(std::make_pair(DB_FILTER_HEADER, height_key),\n+                std::make_pair(pindex->GetBlockHash(), filter.ComputeHeader(prev_header)));\n+    return m_db->WriteBatch(batch);\n+}\n+\n+template <typename T>\n+static bool CopyHeightIndexToHashIndex(CDBIterator& db_it, CDBBatch& batch,\n+                                       const std::string& index_name, char key_prefix,\n+                                       int start_height, const CBlockIndex* stop_index)\n+{\n+    db_it.Seek(std::make_pair(key_prefix, std::make_pair(DB_BLOCK_HEIGHT, start_height)));\n+\n+    for (int height = start_height; height <= stop_index->nHeight; ++height) {\n+        std::pair<char, std::pair<char, int>> key, expected_key;\n+        expected_key = std::make_pair(key_prefix, std::make_pair(DB_BLOCK_HEIGHT, height));\n+\n+        if (!db_it.GetKey(key) || key != expected_key) {\n+            return error(\"%s: unexpected key in %s: expected (%c, (%c, %d))\",\n+                         __func__, index_name, key_prefix, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        std::pair<uint256, T> value;\n+        if (!db_it.GetValue(value)) {\n+            return error(\"%s: unable to read value in %s at key (%c, (%c, %d))\",\n+                         __func__, index_name, key_prefix, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        auto hash_key = std::make_pair(key_prefix, std::make_pair(DB_BLOCK_HASH, value.first));\n+        batch.Write(hash_key, std::move(value.second));\n+\n+        db_it.Next();\n+    }\n+    return true;\n+}\n+\n+bool BlockFilterIndex::Rewind(const CBlockIndex* current_tip, const CBlockIndex* new_tip)\n+{\n+    assert(current_tip->GetAncestor(new_tip->nHeight) == new_tip);\n+\n+    CDBBatch batch(*m_db);\n+    std::unique_ptr<CDBIterator> db_it(m_db->NewIterator());\n+\n+    if (!CopyHeightIndexToHashIndex<std::vector<unsigned char>>(*db_it, batch, m_name, DB_FILTER,\n+                                                                new_tip->nHeight, current_tip)) {\n+        return false;\n+    }\n+    if (!CopyHeightIndexToHashIndex<uint256>(*db_it, batch, m_name, DB_FILTER_HASH,\n+                                             new_tip->nHeight, current_tip)) {\n+        return false;\n+    }\n+    if (!CopyHeightIndexToHashIndex<uint256>(*db_it, batch, m_name, DB_FILTER_HEADER,\n+                                             new_tip->nHeight, current_tip)) {\n+        return false;\n+    }\n+\n+    if (!m_db->WriteBatch(batch)) return false;\n+\n+    return BaseIndex::Rewind(current_tip, new_tip);\n+}\n+\n+template <typename T>\n+static bool LookupOne(const CDBWrapper& db, char key_prefix,\n+                      const CBlockIndex* block_index, T& result)\n+{\n+    // First check if the result is stored under the height index and the value there matches the\n+    // block hash. This should be the case if the block is on the active chain.\n+    std::pair<char, int> height_key(DB_BLOCK_HEIGHT, block_index->nHeight);\n+    std::pair<uint256, T> read_out;\n+    if (!db.Read(std::make_pair(key_prefix, height_key), read_out)) {\n+        return false;\n+    }\n+    if (read_out.first == block_index->GetBlockHash()) {\n+        result = std::move(read_out.second);\n+        return true;\n+    }\n+\n+    // If value at the height index corresponds to an different block, the result will be stored in\n+    // the hash index.\n+    std::pair<char, uint256> hash_key(DB_BLOCK_HASH, block_index->GetBlockHash());\n+    return db.Read(std::make_pair(key_prefix, hash_key), result);\n+}\n+\n+template <typename T>\n+static bool LookupRange(CDBWrapper& db, const std::string& index_name,\n+                        char key_prefix, int start_height, const CBlockIndex* stop_index,\n+                        std::vector<T>& results)\n+{\n+    if (start_height < 0) {\n+        return error(\"%s: start height (%d) is negative\", __func__, start_height);\n+    }\n+    if (start_height > stop_index->nHeight) {\n+        return error(\"%s: start height (%d) is greater than stop height (%d)\",\n+                     __func__, start_height, stop_index->nHeight);\n+    }\n+\n+    std::vector<std::pair<uint256, T>> values(stop_index->nHeight - start_height + 1);",
      "path": "src/index/blockfilterindex.cpp",
      "position": null,
      "original_position": 170,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "d4d3ba7ceb6121b56e2fa38151e88f95993881ea",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```\r\n2018-09-25 20:53:15 clang(pr=14121): index/blockfilterindex.cpp:170:82: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [-Wsign-conversion]\r\n```",
      "created_at": "2018-09-25T19:36:10Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r220327112",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/220327112"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 170,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/220327171",
      "pull_request_review_id": 158710207,
      "id": 220327171,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMDMyNzE3MQ==",
      "diff_hunk": "@@ -0,0 +1,289 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <map>\n+\n+#include <dbwrapper.h>\n+#include <index/blockfilterindex.h>\n+#include <util.h>\n+#include <validation.h>\n+\n+/* The index database stores three items for each block: the encoded filter, its dSHA256 hash, and\n+ * the header. Those belonging to blocks on the active chain are indexed by height, and those\n+ * belonging to blocks that have been reorganized out of the active chain are indexed by block hash.\n+ * This ensures that filter data for any block that becomes part of the active chain can always be\n+ * retrieved, alleviating timing concerns.\n+ *\n+ * Keys for the height index have the type pair<char, pair<DB_BLOCK_HEIGHT, int>>.\n+ * Keys for the hash index have the type pair<char, pair<DB_BLOCK_HASH, int>>.\n+ */\n+constexpr char DB_FILTER = 'f';\n+constexpr char DB_FILTER_HASH = 'h';\n+constexpr char DB_FILTER_HEADER = 'r';\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+\n+static std::map<BlockFilterType, BlockFilterIndex> g_filter_indexes;\n+\n+BlockFilterIndex::BlockFilterIndex(BlockFilterType filter_type,\n+                                   size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_filter_type(filter_type)\n+{\n+    const std::string& filter_name = BlockFilterTypeName(filter_type);\n+    if (filter_name == \"\") throw std::invalid_argument(\"unknown filter_type\");\n+\n+    m_name = filter_name + \" block filter index\";\n+    m_db = MakeUnique<BaseIndex::DB>(GetDataDir() / \"indexes\" / \"blockfilter\" / filter_name,\n+                                     n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool BlockFilterIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+    uint256 prev_header;\n+\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, uint256> read_out;\n+        std::pair<char, int> prev_height_key(DB_BLOCK_HEIGHT, pindex->nHeight - 1);\n+        if (!m_db->Read(std::make_pair(DB_FILTER_HEADER, prev_height_key), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        prev_header = read_out.second;\n+    }\n+\n+    BlockFilter filter(m_filter_type, block, block_undo);\n+    std::pair<char, int> height_key(DB_BLOCK_HEIGHT, pindex->nHeight);\n+\n+    CDBBatch batch(*m_db);\n+    batch.Write(std::make_pair(DB_FILTER, height_key),\n+                std::make_pair(pindex->GetBlockHash(), filter.GetEncodedFilter()));\n+    batch.Write(std::make_pair(DB_FILTER_HASH, height_key),\n+                std::make_pair(pindex->GetBlockHash(), filter.GetHash()));\n+    batch.Write(std::make_pair(DB_FILTER_HEADER, height_key),\n+                std::make_pair(pindex->GetBlockHash(), filter.ComputeHeader(prev_header)));\n+    return m_db->WriteBatch(batch);\n+}\n+\n+template <typename T>\n+static bool CopyHeightIndexToHashIndex(CDBIterator& db_it, CDBBatch& batch,\n+                                       const std::string& index_name, char key_prefix,\n+                                       int start_height, const CBlockIndex* stop_index)\n+{\n+    db_it.Seek(std::make_pair(key_prefix, std::make_pair(DB_BLOCK_HEIGHT, start_height)));\n+\n+    for (int height = start_height; height <= stop_index->nHeight; ++height) {\n+        std::pair<char, std::pair<char, int>> key, expected_key;\n+        expected_key = std::make_pair(key_prefix, std::make_pair(DB_BLOCK_HEIGHT, height));\n+\n+        if (!db_it.GetKey(key) || key != expected_key) {\n+            return error(\"%s: unexpected key in %s: expected (%c, (%c, %d))\",\n+                         __func__, index_name, key_prefix, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        std::pair<uint256, T> value;\n+        if (!db_it.GetValue(value)) {\n+            return error(\"%s: unable to read value in %s at key (%c, (%c, %d))\",\n+                         __func__, index_name, key_prefix, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        auto hash_key = std::make_pair(key_prefix, std::make_pair(DB_BLOCK_HASH, value.first));\n+        batch.Write(hash_key, std::move(value.second));\n+\n+        db_it.Next();\n+    }\n+    return true;\n+}\n+\n+bool BlockFilterIndex::Rewind(const CBlockIndex* current_tip, const CBlockIndex* new_tip)\n+{\n+    assert(current_tip->GetAncestor(new_tip->nHeight) == new_tip);\n+\n+    CDBBatch batch(*m_db);\n+    std::unique_ptr<CDBIterator> db_it(m_db->NewIterator());\n+\n+    if (!CopyHeightIndexToHashIndex<std::vector<unsigned char>>(*db_it, batch, m_name, DB_FILTER,\n+                                                                new_tip->nHeight, current_tip)) {\n+        return false;\n+    }\n+    if (!CopyHeightIndexToHashIndex<uint256>(*db_it, batch, m_name, DB_FILTER_HASH,\n+                                             new_tip->nHeight, current_tip)) {\n+        return false;\n+    }\n+    if (!CopyHeightIndexToHashIndex<uint256>(*db_it, batch, m_name, DB_FILTER_HEADER,\n+                                             new_tip->nHeight, current_tip)) {\n+        return false;\n+    }\n+\n+    if (!m_db->WriteBatch(batch)) return false;\n+\n+    return BaseIndex::Rewind(current_tip, new_tip);\n+}\n+\n+template <typename T>\n+static bool LookupOne(const CDBWrapper& db, char key_prefix,\n+                      const CBlockIndex* block_index, T& result)\n+{\n+    // First check if the result is stored under the height index and the value there matches the\n+    // block hash. This should be the case if the block is on the active chain.\n+    std::pair<char, int> height_key(DB_BLOCK_HEIGHT, block_index->nHeight);\n+    std::pair<uint256, T> read_out;\n+    if (!db.Read(std::make_pair(key_prefix, height_key), read_out)) {\n+        return false;\n+    }\n+    if (read_out.first == block_index->GetBlockHash()) {\n+        result = std::move(read_out.second);\n+        return true;\n+    }\n+\n+    // If value at the height index corresponds to an different block, the result will be stored in\n+    // the hash index.\n+    std::pair<char, uint256> hash_key(DB_BLOCK_HASH, block_index->GetBlockHash());\n+    return db.Read(std::make_pair(key_prefix, hash_key), result);\n+}\n+\n+template <typename T>\n+static bool LookupRange(CDBWrapper& db, const std::string& index_name,\n+                        char key_prefix, int start_height, const CBlockIndex* stop_index,\n+                        std::vector<T>& results)\n+{\n+    if (start_height < 0) {\n+        return error(\"%s: start height (%d) is negative\", __func__, start_height);\n+    }\n+    if (start_height > stop_index->nHeight) {\n+        return error(\"%s: start height (%d) is greater than stop height (%d)\",\n+                     __func__, start_height, stop_index->nHeight);\n+    }\n+\n+    std::vector<std::pair<uint256, T>> values(stop_index->nHeight - start_height + 1);\n+\n+    std::unique_ptr<CDBIterator> db_it(db.NewIterator());\n+    db_it->Seek(std::make_pair(key_prefix, std::make_pair(DB_BLOCK_HEIGHT, start_height)));\n+    for (int height = start_height; height <= stop_index->nHeight; ++height) {\n+        std::pair<char, std::pair<char, int>> key, expected_key;\n+        expected_key = std::make_pair(key_prefix, std::make_pair(DB_BLOCK_HEIGHT, height));\n+\n+        if (!db_it->Valid() || !db_it->GetKey(key) || key != expected_key) {\n+            return false;\n+        }\n+\n+        size_t i = height - start_height;\n+        if (!db_it->GetValue(values[i])) {\n+            return error(\"%s: unable to read value in %s at key (%c, (%c, %d))\",\n+                         __func__, index_name, key_prefix, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        db_it->Next();\n+    }\n+\n+    results.resize(stop_index->nHeight - start_height + 1);",
      "path": "src/index/blockfilterindex.cpp",
      "position": null,
      "original_position": 191,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "d4d3ba7ceb6121b56e2fa38151e88f95993881ea",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```\r\n2018-09-25 20:53:15 clang(pr=14121): index/blockfilterindex.cpp:191:55: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [-Wsign-conversion]\r\n```",
      "created_at": "2018-09-25T19:36:23Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r220327171",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/220327171"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 191,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/220327832",
      "pull_request_review_id": 158711011,
      "id": 220327832,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMDMyNzgzMg==",
      "diff_hunk": "@@ -0,0 +1,307 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <blockfilter.h>\n+#include <chainparams.h>\n+#include <consensus/validation.h>\n+#include <index/blockfilterindex.h>\n+#include <miner.h>\n+#include <pow.h>\n+#include <test/test_bitcoin.h>\n+#include <script/standard.h>\n+#include <validation.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(blockfilter_index_tests)\n+\n+static bool ComputeFilter(BlockFilterType filter_type, const CBlockIndex* block_index,\n+                          BlockFilter& filter)\n+{\n+    CBlock block;\n+    if (!ReadBlockFromDisk(block, block_index->GetBlockPos(), Params().GetConsensus())) {\n+        return false;\n+    }\n+\n+    CBlockUndo block_undo;\n+    if (block_index->nHeight > 0 && !UndoReadFromDisk(block_undo, block_index)) {\n+        return false;\n+    }\n+\n+    filter = BlockFilter(filter_type, block, block_undo);\n+    return true;\n+}\n+\n+static bool CheckFilterLookups(BlockFilterIndex& filter_index, const CBlockIndex* block_index,\n+                               uint256& last_header)\n+{\n+    BlockFilter expected_filter;\n+    if (!ComputeFilter(filter_index.GetFilterType(), block_index, expected_filter)) {\n+        BOOST_ERROR(\"ComputeFilter failed on block \" << block_index->nHeight);\n+        return false;\n+    }\n+\n+    BlockFilter filter;\n+    uint256 filter_header;\n+    std::vector<BlockFilter> filters;\n+    std::vector<uint256> filter_hashes;\n+\n+    BOOST_CHECK(filter_index.LookupFilter(block_index, filter));\n+    BOOST_CHECK(filter_index.LookupFilterHeader(block_index, filter_header));\n+    BOOST_CHECK(filter_index.LookupFilterRange(block_index->nHeight, block_index, filters));\n+    BOOST_CHECK(filter_index.LookupFilterHashRange(block_index->nHeight, block_index,\n+                                                   filter_hashes));\n+\n+    BOOST_CHECK_EQUAL(filters.size(), 1);\n+    BOOST_CHECK_EQUAL(filter_hashes.size(), 1);\n+\n+    BOOST_CHECK_EQUAL(filter.GetHash(), expected_filter.GetHash());\n+    BOOST_CHECK_EQUAL(filter_header, expected_filter.ComputeHeader(last_header));\n+    BOOST_CHECK_EQUAL(filters[0].GetHash(), expected_filter.GetHash());\n+    BOOST_CHECK_EQUAL(filter_hashes[0], expected_filter.GetHash());\n+\n+    filters.clear();\n+    filter_hashes.clear();\n+    last_header = filter_header;\n+    return true;\n+}\n+\n+static CBlock CreateBlock(const CBlockIndex* prev,\n+                          const std::vector<CMutableTransaction>& txns,\n+                          const CScript& scriptPubKey)\n+{\n+    const CChainParams& chainparams = Params();\n+    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey);\n+    CBlock& block = pblocktemplate->block;\n+    block.hashPrevBlock = prev->GetBlockHash();\n+    block.nTime = prev->nTime + 1;\n+\n+    // Replace mempool-selected txns with just coinbase plus passed-in txns:\n+    block.vtx.resize(1);\n+    for (const CMutableTransaction& tx : txns)\n+        block.vtx.push_back(MakeTransactionRef(tx));\n+    // IncrementExtraNonce creates a valid coinbase and merkleRoot\n+    unsigned int extraNonce = 0;\n+    IncrementExtraNonce(&block, prev, extraNonce);\n+\n+    while (!CheckProofOfWork(block.GetHash(), block.nBits, chainparams.GetConsensus())) ++block.nNonce;\n+\n+    return block;\n+}\n+\n+static bool BuildChain(const CBlockIndex* pindex, const CScript& coinbase_script_pub_key,\n+                       size_t length, std::vector<std::shared_ptr<CBlock>>& chain)\n+{\n+    std::vector<CMutableTransaction> no_txns;\n+\n+    chain.resize(length);\n+    for (auto& block : chain) {\n+        block = std::make_shared<CBlock>(CreateBlock(pindex, no_txns, coinbase_script_pub_key));\n+        CBlockHeader header = block->GetBlockHeader();\n+\n+        CValidationState state;\n+        if (!ProcessNewBlockHeaders({header}, state, Params(), &pindex, nullptr)) {\n+            return false;\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, TestChain100Setup)\n+{\n+    BlockFilterIndex filter_index(BlockFilterType::BASIC, 1 << 20, true);\n+\n+    uint256 last_header;\n+\n+    // Filter should not be found in the index before it is started.\n+    {\n+        LOCK(cs_main);\n+\n+        BlockFilter filter;\n+        uint256 filter_header;\n+        std::vector<BlockFilter> filters;\n+        std::vector<uint256> filter_hashes;\n+\n+        for (const CBlockIndex* block_index = chainActive.Genesis();\n+             block_index != nullptr;\n+             block_index = chainActive.Next(block_index)) {\n+\n+            BOOST_CHECK(!filter_index.LookupFilter(block_index, filter));\n+            BOOST_CHECK(!filter_index.LookupFilterHeader(block_index, filter_header));\n+            BOOST_CHECK(!filter_index.LookupFilterRange(block_index->nHeight, block_index, filters));\n+            BOOST_CHECK(!filter_index.LookupFilterHashRange(block_index->nHeight, block_index,\n+                                                            filter_hashes));\n+        }\n+    }\n+\n+    // BlockUntilSyncedToCurrentChain should return false before index is started.\n+    BOOST_CHECK(!filter_index.BlockUntilSyncedToCurrentChain());\n+\n+    filter_index.Start();\n+\n+    // Allow filter index to catch up with the block index.\n+    constexpr int64_t timeout_ms = 10 * 1000;\n+    int64_t time_start = GetTimeMillis();\n+    while (!filter_index.BlockUntilSyncedToCurrentChain()) {\n+        BOOST_REQUIRE(time_start + timeout_ms > GetTimeMillis());\n+        MilliSleep(100);\n+    }\n+\n+    // Check that filter index has all blocks that were in the chain before it started.\n+    {\n+        LOCK(cs_main);\n+        const CBlockIndex* block_index;\n+        for (block_index = chainActive.Genesis();\n+             block_index != nullptr;\n+             block_index = chainActive.Next(block_index)) {\n+            CheckFilterLookups(filter_index, block_index, last_header);\n+        }\n+    }\n+\n+    // Create two forks.\n+    const CBlockIndex* tip;\n+    {\n+        LOCK(cs_main);\n+        tip = chainActive.Tip();\n+    }\n+    CScript coinbase_script_pub_key = GetScriptForDestination(coinbaseKey.GetPubKey().GetID());\n+    std::vector<std::shared_ptr<CBlock>> chainA, chainB;\n+    BOOST_REQUIRE(BuildChain(tip, coinbase_script_pub_key, 10, chainA));\n+    BOOST_REQUIRE(BuildChain(tip, coinbase_script_pub_key, 10, chainB));\n+\n+    // Check that new blocks on chain A get indexed.\n+    uint256 chainA_last_header = last_header;\n+    for (int i = 0; i < 2; i++) {\n+        const auto& block = chainA[i];\n+        BOOST_REQUIRE(ProcessNewBlock(Params(), block, true, nullptr));\n+\n+        const CBlockIndex* block_index;\n+        {\n+            LOCK(cs_main);\n+            block_index = LookupBlockIndex(block->GetHash());\n+        }\n+\n+        BOOST_CHECK(filter_index.BlockUntilSyncedToCurrentChain());\n+        CheckFilterLookups(filter_index, block_index, chainA_last_header);\n+    }\n+\n+    // Reorg to chain B.\n+    uint256 chainB_last_header = last_header;\n+    for (int i = 0; i < 3; i++) {\n+        const auto& block = chainB[i];\n+        BOOST_REQUIRE(ProcessNewBlock(Params(), block, true, nullptr));\n+\n+        const CBlockIndex* block_index;\n+        {\n+            LOCK(cs_main);\n+            block_index = LookupBlockIndex(block->GetHash());\n+        }\n+\n+        BOOST_CHECK(filter_index.BlockUntilSyncedToCurrentChain());\n+        CheckFilterLookups(filter_index, block_index, chainB_last_header);\n+    }\n+\n+    // Check that filters for stale blocks on A can be retrieved.\n+    chainA_last_header = last_header;\n+    for (int i = 0; i < 2; i++) {\n+        const auto& block = chainA[i];",
      "path": "src/test/blockfilter_index_tests.cpp",
      "position": 209,
      "original_position": 209,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "d4d3ba7ceb6121b56e2fa38151e88f95993881ea",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```\r\n2018-09-25 20:53:15 clang(pr=14121): test/blockfilter_index_tests.cpp:209:36: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [-Wsign-conversion]\r\n```",
      "created_at": "2018-09-25T19:38:22Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r220327832",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/220327832"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 209,
      "original_line": 209,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/220327892",
      "pull_request_review_id": 158711101,
      "id": 220327892,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMDMyNzg5Mg==",
      "diff_hunk": "@@ -0,0 +1,307 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <blockfilter.h>\n+#include <chainparams.h>\n+#include <consensus/validation.h>\n+#include <index/blockfilterindex.h>\n+#include <miner.h>\n+#include <pow.h>\n+#include <test/test_bitcoin.h>\n+#include <script/standard.h>\n+#include <validation.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(blockfilter_index_tests)\n+\n+static bool ComputeFilter(BlockFilterType filter_type, const CBlockIndex* block_index,\n+                          BlockFilter& filter)\n+{\n+    CBlock block;\n+    if (!ReadBlockFromDisk(block, block_index->GetBlockPos(), Params().GetConsensus())) {\n+        return false;\n+    }\n+\n+    CBlockUndo block_undo;\n+    if (block_index->nHeight > 0 && !UndoReadFromDisk(block_undo, block_index)) {\n+        return false;\n+    }\n+\n+    filter = BlockFilter(filter_type, block, block_undo);\n+    return true;\n+}\n+\n+static bool CheckFilterLookups(BlockFilterIndex& filter_index, const CBlockIndex* block_index,\n+                               uint256& last_header)\n+{\n+    BlockFilter expected_filter;\n+    if (!ComputeFilter(filter_index.GetFilterType(), block_index, expected_filter)) {\n+        BOOST_ERROR(\"ComputeFilter failed on block \" << block_index->nHeight);\n+        return false;\n+    }\n+\n+    BlockFilter filter;\n+    uint256 filter_header;\n+    std::vector<BlockFilter> filters;\n+    std::vector<uint256> filter_hashes;\n+\n+    BOOST_CHECK(filter_index.LookupFilter(block_index, filter));\n+    BOOST_CHECK(filter_index.LookupFilterHeader(block_index, filter_header));\n+    BOOST_CHECK(filter_index.LookupFilterRange(block_index->nHeight, block_index, filters));\n+    BOOST_CHECK(filter_index.LookupFilterHashRange(block_index->nHeight, block_index,\n+                                                   filter_hashes));\n+\n+    BOOST_CHECK_EQUAL(filters.size(), 1);\n+    BOOST_CHECK_EQUAL(filter_hashes.size(), 1);\n+\n+    BOOST_CHECK_EQUAL(filter.GetHash(), expected_filter.GetHash());\n+    BOOST_CHECK_EQUAL(filter_header, expected_filter.ComputeHeader(last_header));\n+    BOOST_CHECK_EQUAL(filters[0].GetHash(), expected_filter.GetHash());\n+    BOOST_CHECK_EQUAL(filter_hashes[0], expected_filter.GetHash());\n+\n+    filters.clear();\n+    filter_hashes.clear();\n+    last_header = filter_header;\n+    return true;\n+}\n+\n+static CBlock CreateBlock(const CBlockIndex* prev,\n+                          const std::vector<CMutableTransaction>& txns,\n+                          const CScript& scriptPubKey)\n+{\n+    const CChainParams& chainparams = Params();\n+    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey);\n+    CBlock& block = pblocktemplate->block;\n+    block.hashPrevBlock = prev->GetBlockHash();\n+    block.nTime = prev->nTime + 1;\n+\n+    // Replace mempool-selected txns with just coinbase plus passed-in txns:\n+    block.vtx.resize(1);\n+    for (const CMutableTransaction& tx : txns)\n+        block.vtx.push_back(MakeTransactionRef(tx));\n+    // IncrementExtraNonce creates a valid coinbase and merkleRoot\n+    unsigned int extraNonce = 0;\n+    IncrementExtraNonce(&block, prev, extraNonce);\n+\n+    while (!CheckProofOfWork(block.GetHash(), block.nBits, chainparams.GetConsensus())) ++block.nNonce;\n+\n+    return block;\n+}\n+\n+static bool BuildChain(const CBlockIndex* pindex, const CScript& coinbase_script_pub_key,\n+                       size_t length, std::vector<std::shared_ptr<CBlock>>& chain)\n+{\n+    std::vector<CMutableTransaction> no_txns;\n+\n+    chain.resize(length);\n+    for (auto& block : chain) {\n+        block = std::make_shared<CBlock>(CreateBlock(pindex, no_txns, coinbase_script_pub_key));\n+        CBlockHeader header = block->GetBlockHeader();\n+\n+        CValidationState state;\n+        if (!ProcessNewBlockHeaders({header}, state, Params(), &pindex, nullptr)) {\n+            return false;\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, TestChain100Setup)\n+{\n+    BlockFilterIndex filter_index(BlockFilterType::BASIC, 1 << 20, true);\n+\n+    uint256 last_header;\n+\n+    // Filter should not be found in the index before it is started.\n+    {\n+        LOCK(cs_main);\n+\n+        BlockFilter filter;\n+        uint256 filter_header;\n+        std::vector<BlockFilter> filters;\n+        std::vector<uint256> filter_hashes;\n+\n+        for (const CBlockIndex* block_index = chainActive.Genesis();\n+             block_index != nullptr;\n+             block_index = chainActive.Next(block_index)) {\n+\n+            BOOST_CHECK(!filter_index.LookupFilter(block_index, filter));\n+            BOOST_CHECK(!filter_index.LookupFilterHeader(block_index, filter_header));\n+            BOOST_CHECK(!filter_index.LookupFilterRange(block_index->nHeight, block_index, filters));\n+            BOOST_CHECK(!filter_index.LookupFilterHashRange(block_index->nHeight, block_index,\n+                                                            filter_hashes));\n+        }\n+    }\n+\n+    // BlockUntilSyncedToCurrentChain should return false before index is started.\n+    BOOST_CHECK(!filter_index.BlockUntilSyncedToCurrentChain());\n+\n+    filter_index.Start();\n+\n+    // Allow filter index to catch up with the block index.\n+    constexpr int64_t timeout_ms = 10 * 1000;\n+    int64_t time_start = GetTimeMillis();\n+    while (!filter_index.BlockUntilSyncedToCurrentChain()) {\n+        BOOST_REQUIRE(time_start + timeout_ms > GetTimeMillis());\n+        MilliSleep(100);\n+    }\n+\n+    // Check that filter index has all blocks that were in the chain before it started.\n+    {\n+        LOCK(cs_main);\n+        const CBlockIndex* block_index;\n+        for (block_index = chainActive.Genesis();\n+             block_index != nullptr;\n+             block_index = chainActive.Next(block_index)) {\n+            CheckFilterLookups(filter_index, block_index, last_header);\n+        }\n+    }\n+\n+    // Create two forks.\n+    const CBlockIndex* tip;\n+    {\n+        LOCK(cs_main);\n+        tip = chainActive.Tip();\n+    }\n+    CScript coinbase_script_pub_key = GetScriptForDestination(coinbaseKey.GetPubKey().GetID());\n+    std::vector<std::shared_ptr<CBlock>> chainA, chainB;\n+    BOOST_REQUIRE(BuildChain(tip, coinbase_script_pub_key, 10, chainA));\n+    BOOST_REQUIRE(BuildChain(tip, coinbase_script_pub_key, 10, chainB));\n+\n+    // Check that new blocks on chain A get indexed.\n+    uint256 chainA_last_header = last_header;\n+    for (int i = 0; i < 2; i++) {\n+        const auto& block = chainA[i];\n+        BOOST_REQUIRE(ProcessNewBlock(Params(), block, true, nullptr));\n+\n+        const CBlockIndex* block_index;\n+        {\n+            LOCK(cs_main);\n+            block_index = LookupBlockIndex(block->GetHash());\n+        }\n+\n+        BOOST_CHECK(filter_index.BlockUntilSyncedToCurrentChain());\n+        CheckFilterLookups(filter_index, block_index, chainA_last_header);\n+    }\n+\n+    // Reorg to chain B.\n+    uint256 chainB_last_header = last_header;\n+    for (int i = 0; i < 3; i++) {\n+        const auto& block = chainB[i];\n+        BOOST_REQUIRE(ProcessNewBlock(Params(), block, true, nullptr));\n+\n+        const CBlockIndex* block_index;\n+        {\n+            LOCK(cs_main);\n+            block_index = LookupBlockIndex(block->GetHash());\n+        }\n+\n+        BOOST_CHECK(filter_index.BlockUntilSyncedToCurrentChain());\n+        CheckFilterLookups(filter_index, block_index, chainB_last_header);\n+    }\n+\n+    // Check that filters for stale blocks on A can be retrieved.\n+    chainA_last_header = last_header;\n+    for (int i = 0; i < 2; i++) {\n+        const auto& block = chainA[i];\n+        const CBlockIndex* block_index;\n+        {\n+            LOCK(cs_main);\n+            block_index = LookupBlockIndex(block->GetHash());\n+        }\n+\n+        BOOST_CHECK(filter_index.BlockUntilSyncedToCurrentChain());\n+        CheckFilterLookups(filter_index, block_index, chainA_last_header);\n+    }\n+\n+    // Reorg back to chain A.\n+     for (int i = 2; i < 4; i++) {\n+         const auto& block = chainA[i];",
      "path": "src/test/blockfilter_index_tests.cpp",
      "position": 222,
      "original_position": 222,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "d4d3ba7ceb6121b56e2fa38151e88f95993881ea",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```\r\n2018-09-25 20:53:15 clang(pr=14121): test/blockfilter_index_tests.cpp:222:37: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [-Wsign-conversion]\r\n```",
      "created_at": "2018-09-25T19:38:37Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r220327892",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/220327892"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 222,
      "original_line": 222,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/220327947",
      "pull_request_review_id": 158711158,
      "id": 220327947,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMDMyNzk0Nw==",
      "diff_hunk": "@@ -0,0 +1,307 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <blockfilter.h>\n+#include <chainparams.h>\n+#include <consensus/validation.h>\n+#include <index/blockfilterindex.h>\n+#include <miner.h>\n+#include <pow.h>\n+#include <test/test_bitcoin.h>\n+#include <script/standard.h>\n+#include <validation.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(blockfilter_index_tests)\n+\n+static bool ComputeFilter(BlockFilterType filter_type, const CBlockIndex* block_index,\n+                          BlockFilter& filter)\n+{\n+    CBlock block;\n+    if (!ReadBlockFromDisk(block, block_index->GetBlockPos(), Params().GetConsensus())) {\n+        return false;\n+    }\n+\n+    CBlockUndo block_undo;\n+    if (block_index->nHeight > 0 && !UndoReadFromDisk(block_undo, block_index)) {\n+        return false;\n+    }\n+\n+    filter = BlockFilter(filter_type, block, block_undo);\n+    return true;\n+}\n+\n+static bool CheckFilterLookups(BlockFilterIndex& filter_index, const CBlockIndex* block_index,\n+                               uint256& last_header)\n+{\n+    BlockFilter expected_filter;\n+    if (!ComputeFilter(filter_index.GetFilterType(), block_index, expected_filter)) {\n+        BOOST_ERROR(\"ComputeFilter failed on block \" << block_index->nHeight);\n+        return false;\n+    }\n+\n+    BlockFilter filter;\n+    uint256 filter_header;\n+    std::vector<BlockFilter> filters;\n+    std::vector<uint256> filter_hashes;\n+\n+    BOOST_CHECK(filter_index.LookupFilter(block_index, filter));\n+    BOOST_CHECK(filter_index.LookupFilterHeader(block_index, filter_header));\n+    BOOST_CHECK(filter_index.LookupFilterRange(block_index->nHeight, block_index, filters));\n+    BOOST_CHECK(filter_index.LookupFilterHashRange(block_index->nHeight, block_index,\n+                                                   filter_hashes));\n+\n+    BOOST_CHECK_EQUAL(filters.size(), 1);\n+    BOOST_CHECK_EQUAL(filter_hashes.size(), 1);\n+\n+    BOOST_CHECK_EQUAL(filter.GetHash(), expected_filter.GetHash());\n+    BOOST_CHECK_EQUAL(filter_header, expected_filter.ComputeHeader(last_header));\n+    BOOST_CHECK_EQUAL(filters[0].GetHash(), expected_filter.GetHash());\n+    BOOST_CHECK_EQUAL(filter_hashes[0], expected_filter.GetHash());\n+\n+    filters.clear();\n+    filter_hashes.clear();\n+    last_header = filter_header;\n+    return true;\n+}\n+\n+static CBlock CreateBlock(const CBlockIndex* prev,\n+                          const std::vector<CMutableTransaction>& txns,\n+                          const CScript& scriptPubKey)\n+{\n+    const CChainParams& chainparams = Params();\n+    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey);\n+    CBlock& block = pblocktemplate->block;\n+    block.hashPrevBlock = prev->GetBlockHash();\n+    block.nTime = prev->nTime + 1;\n+\n+    // Replace mempool-selected txns with just coinbase plus passed-in txns:\n+    block.vtx.resize(1);\n+    for (const CMutableTransaction& tx : txns)\n+        block.vtx.push_back(MakeTransactionRef(tx));\n+    // IncrementExtraNonce creates a valid coinbase and merkleRoot\n+    unsigned int extraNonce = 0;\n+    IncrementExtraNonce(&block, prev, extraNonce);\n+\n+    while (!CheckProofOfWork(block.GetHash(), block.nBits, chainparams.GetConsensus())) ++block.nNonce;\n+\n+    return block;\n+}\n+\n+static bool BuildChain(const CBlockIndex* pindex, const CScript& coinbase_script_pub_key,\n+                       size_t length, std::vector<std::shared_ptr<CBlock>>& chain)\n+{\n+    std::vector<CMutableTransaction> no_txns;\n+\n+    chain.resize(length);\n+    for (auto& block : chain) {\n+        block = std::make_shared<CBlock>(CreateBlock(pindex, no_txns, coinbase_script_pub_key));\n+        CBlockHeader header = block->GetBlockHeader();\n+\n+        CValidationState state;\n+        if (!ProcessNewBlockHeaders({header}, state, Params(), &pindex, nullptr)) {\n+            return false;\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, TestChain100Setup)\n+{\n+    BlockFilterIndex filter_index(BlockFilterType::BASIC, 1 << 20, true);\n+\n+    uint256 last_header;\n+\n+    // Filter should not be found in the index before it is started.\n+    {\n+        LOCK(cs_main);\n+\n+        BlockFilter filter;\n+        uint256 filter_header;\n+        std::vector<BlockFilter> filters;\n+        std::vector<uint256> filter_hashes;\n+\n+        for (const CBlockIndex* block_index = chainActive.Genesis();\n+             block_index != nullptr;\n+             block_index = chainActive.Next(block_index)) {\n+\n+            BOOST_CHECK(!filter_index.LookupFilter(block_index, filter));\n+            BOOST_CHECK(!filter_index.LookupFilterHeader(block_index, filter_header));\n+            BOOST_CHECK(!filter_index.LookupFilterRange(block_index->nHeight, block_index, filters));\n+            BOOST_CHECK(!filter_index.LookupFilterHashRange(block_index->nHeight, block_index,\n+                                                            filter_hashes));\n+        }\n+    }\n+\n+    // BlockUntilSyncedToCurrentChain should return false before index is started.\n+    BOOST_CHECK(!filter_index.BlockUntilSyncedToCurrentChain());\n+\n+    filter_index.Start();\n+\n+    // Allow filter index to catch up with the block index.\n+    constexpr int64_t timeout_ms = 10 * 1000;\n+    int64_t time_start = GetTimeMillis();\n+    while (!filter_index.BlockUntilSyncedToCurrentChain()) {\n+        BOOST_REQUIRE(time_start + timeout_ms > GetTimeMillis());\n+        MilliSleep(100);\n+    }\n+\n+    // Check that filter index has all blocks that were in the chain before it started.\n+    {\n+        LOCK(cs_main);\n+        const CBlockIndex* block_index;\n+        for (block_index = chainActive.Genesis();\n+             block_index != nullptr;\n+             block_index = chainActive.Next(block_index)) {\n+            CheckFilterLookups(filter_index, block_index, last_header);\n+        }\n+    }\n+\n+    // Create two forks.\n+    const CBlockIndex* tip;\n+    {\n+        LOCK(cs_main);\n+        tip = chainActive.Tip();\n+    }\n+    CScript coinbase_script_pub_key = GetScriptForDestination(coinbaseKey.GetPubKey().GetID());\n+    std::vector<std::shared_ptr<CBlock>> chainA, chainB;\n+    BOOST_REQUIRE(BuildChain(tip, coinbase_script_pub_key, 10, chainA));\n+    BOOST_REQUIRE(BuildChain(tip, coinbase_script_pub_key, 10, chainB));\n+\n+    // Check that new blocks on chain A get indexed.\n+    uint256 chainA_last_header = last_header;\n+    for (int i = 0; i < 2; i++) {\n+        const auto& block = chainA[i];\n+        BOOST_REQUIRE(ProcessNewBlock(Params(), block, true, nullptr));\n+\n+        const CBlockIndex* block_index;\n+        {\n+            LOCK(cs_main);\n+            block_index = LookupBlockIndex(block->GetHash());\n+        }\n+\n+        BOOST_CHECK(filter_index.BlockUntilSyncedToCurrentChain());\n+        CheckFilterLookups(filter_index, block_index, chainA_last_header);\n+    }\n+\n+    // Reorg to chain B.\n+    uint256 chainB_last_header = last_header;\n+    for (int i = 0; i < 3; i++) {\n+        const auto& block = chainB[i];\n+        BOOST_REQUIRE(ProcessNewBlock(Params(), block, true, nullptr));\n+\n+        const CBlockIndex* block_index;\n+        {\n+            LOCK(cs_main);\n+            block_index = LookupBlockIndex(block->GetHash());\n+        }\n+\n+        BOOST_CHECK(filter_index.BlockUntilSyncedToCurrentChain());\n+        CheckFilterLookups(filter_index, block_index, chainB_last_header);\n+    }\n+\n+    // Check that filters for stale blocks on A can be retrieved.\n+    chainA_last_header = last_header;\n+    for (int i = 0; i < 2; i++) {\n+        const auto& block = chainA[i];\n+        const CBlockIndex* block_index;\n+        {\n+            LOCK(cs_main);\n+            block_index = LookupBlockIndex(block->GetHash());\n+        }\n+\n+        BOOST_CHECK(filter_index.BlockUntilSyncedToCurrentChain());\n+        CheckFilterLookups(filter_index, block_index, chainA_last_header);\n+    }\n+\n+    // Reorg back to chain A.\n+     for (int i = 2; i < 4; i++) {\n+         const auto& block = chainA[i];\n+        BOOST_REQUIRE(ProcessNewBlock(Params(), block, true, nullptr));\n+     }\n+\n+     // Check that chain A and B blocks can be retrieved.\n+     chainA_last_header = last_header;\n+     chainB_last_header = last_header;\n+     for (int i = 0; i < 3; i++) {\n+         const CBlockIndex* block_index;\n+\n+         {\n+             LOCK(cs_main);\n+             block_index = LookupBlockIndex(chainA[i]->GetHash());",
      "path": "src/test/blockfilter_index_tests.cpp",
      "position": 234,
      "original_position": 234,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "d4d3ba7ceb6121b56e2fa38151e88f95993881ea",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```\r\n2018-09-25 20:53:15 clang(pr=14121): test/blockfilter_index_tests.cpp:234:52: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [-Wsign-conversion]\r\n```",
      "created_at": "2018-09-25T19:38:48Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r220327947",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/220327947"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 234,
      "original_line": 234,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/220328014",
      "pull_request_review_id": 158711226,
      "id": 220328014,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMDMyODAxNA==",
      "diff_hunk": "@@ -0,0 +1,307 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <blockfilter.h>\n+#include <chainparams.h>\n+#include <consensus/validation.h>\n+#include <index/blockfilterindex.h>\n+#include <miner.h>\n+#include <pow.h>\n+#include <test/test_bitcoin.h>\n+#include <script/standard.h>\n+#include <validation.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(blockfilter_index_tests)\n+\n+static bool ComputeFilter(BlockFilterType filter_type, const CBlockIndex* block_index,\n+                          BlockFilter& filter)\n+{\n+    CBlock block;\n+    if (!ReadBlockFromDisk(block, block_index->GetBlockPos(), Params().GetConsensus())) {\n+        return false;\n+    }\n+\n+    CBlockUndo block_undo;\n+    if (block_index->nHeight > 0 && !UndoReadFromDisk(block_undo, block_index)) {\n+        return false;\n+    }\n+\n+    filter = BlockFilter(filter_type, block, block_undo);\n+    return true;\n+}\n+\n+static bool CheckFilterLookups(BlockFilterIndex& filter_index, const CBlockIndex* block_index,\n+                               uint256& last_header)\n+{\n+    BlockFilter expected_filter;\n+    if (!ComputeFilter(filter_index.GetFilterType(), block_index, expected_filter)) {\n+        BOOST_ERROR(\"ComputeFilter failed on block \" << block_index->nHeight);\n+        return false;\n+    }\n+\n+    BlockFilter filter;\n+    uint256 filter_header;\n+    std::vector<BlockFilter> filters;\n+    std::vector<uint256> filter_hashes;\n+\n+    BOOST_CHECK(filter_index.LookupFilter(block_index, filter));\n+    BOOST_CHECK(filter_index.LookupFilterHeader(block_index, filter_header));\n+    BOOST_CHECK(filter_index.LookupFilterRange(block_index->nHeight, block_index, filters));\n+    BOOST_CHECK(filter_index.LookupFilterHashRange(block_index->nHeight, block_index,\n+                                                   filter_hashes));\n+\n+    BOOST_CHECK_EQUAL(filters.size(), 1);\n+    BOOST_CHECK_EQUAL(filter_hashes.size(), 1);\n+\n+    BOOST_CHECK_EQUAL(filter.GetHash(), expected_filter.GetHash());\n+    BOOST_CHECK_EQUAL(filter_header, expected_filter.ComputeHeader(last_header));\n+    BOOST_CHECK_EQUAL(filters[0].GetHash(), expected_filter.GetHash());\n+    BOOST_CHECK_EQUAL(filter_hashes[0], expected_filter.GetHash());\n+\n+    filters.clear();\n+    filter_hashes.clear();\n+    last_header = filter_header;\n+    return true;\n+}\n+\n+static CBlock CreateBlock(const CBlockIndex* prev,\n+                          const std::vector<CMutableTransaction>& txns,\n+                          const CScript& scriptPubKey)\n+{\n+    const CChainParams& chainparams = Params();\n+    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey);\n+    CBlock& block = pblocktemplate->block;\n+    block.hashPrevBlock = prev->GetBlockHash();\n+    block.nTime = prev->nTime + 1;\n+\n+    // Replace mempool-selected txns with just coinbase plus passed-in txns:\n+    block.vtx.resize(1);\n+    for (const CMutableTransaction& tx : txns)\n+        block.vtx.push_back(MakeTransactionRef(tx));\n+    // IncrementExtraNonce creates a valid coinbase and merkleRoot\n+    unsigned int extraNonce = 0;\n+    IncrementExtraNonce(&block, prev, extraNonce);\n+\n+    while (!CheckProofOfWork(block.GetHash(), block.nBits, chainparams.GetConsensus())) ++block.nNonce;\n+\n+    return block;\n+}\n+\n+static bool BuildChain(const CBlockIndex* pindex, const CScript& coinbase_script_pub_key,\n+                       size_t length, std::vector<std::shared_ptr<CBlock>>& chain)\n+{\n+    std::vector<CMutableTransaction> no_txns;\n+\n+    chain.resize(length);\n+    for (auto& block : chain) {\n+        block = std::make_shared<CBlock>(CreateBlock(pindex, no_txns, coinbase_script_pub_key));\n+        CBlockHeader header = block->GetBlockHeader();\n+\n+        CValidationState state;\n+        if (!ProcessNewBlockHeaders({header}, state, Params(), &pindex, nullptr)) {\n+            return false;\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, TestChain100Setup)\n+{\n+    BlockFilterIndex filter_index(BlockFilterType::BASIC, 1 << 20, true);\n+\n+    uint256 last_header;\n+\n+    // Filter should not be found in the index before it is started.\n+    {\n+        LOCK(cs_main);\n+\n+        BlockFilter filter;\n+        uint256 filter_header;\n+        std::vector<BlockFilter> filters;\n+        std::vector<uint256> filter_hashes;\n+\n+        for (const CBlockIndex* block_index = chainActive.Genesis();\n+             block_index != nullptr;\n+             block_index = chainActive.Next(block_index)) {\n+\n+            BOOST_CHECK(!filter_index.LookupFilter(block_index, filter));\n+            BOOST_CHECK(!filter_index.LookupFilterHeader(block_index, filter_header));\n+            BOOST_CHECK(!filter_index.LookupFilterRange(block_index->nHeight, block_index, filters));\n+            BOOST_CHECK(!filter_index.LookupFilterHashRange(block_index->nHeight, block_index,\n+                                                            filter_hashes));\n+        }\n+    }\n+\n+    // BlockUntilSyncedToCurrentChain should return false before index is started.\n+    BOOST_CHECK(!filter_index.BlockUntilSyncedToCurrentChain());\n+\n+    filter_index.Start();\n+\n+    // Allow filter index to catch up with the block index.\n+    constexpr int64_t timeout_ms = 10 * 1000;\n+    int64_t time_start = GetTimeMillis();\n+    while (!filter_index.BlockUntilSyncedToCurrentChain()) {\n+        BOOST_REQUIRE(time_start + timeout_ms > GetTimeMillis());\n+        MilliSleep(100);\n+    }\n+\n+    // Check that filter index has all blocks that were in the chain before it started.\n+    {\n+        LOCK(cs_main);\n+        const CBlockIndex* block_index;\n+        for (block_index = chainActive.Genesis();\n+             block_index != nullptr;\n+             block_index = chainActive.Next(block_index)) {\n+            CheckFilterLookups(filter_index, block_index, last_header);\n+        }\n+    }\n+\n+    // Create two forks.\n+    const CBlockIndex* tip;\n+    {\n+        LOCK(cs_main);\n+        tip = chainActive.Tip();\n+    }\n+    CScript coinbase_script_pub_key = GetScriptForDestination(coinbaseKey.GetPubKey().GetID());\n+    std::vector<std::shared_ptr<CBlock>> chainA, chainB;\n+    BOOST_REQUIRE(BuildChain(tip, coinbase_script_pub_key, 10, chainA));\n+    BOOST_REQUIRE(BuildChain(tip, coinbase_script_pub_key, 10, chainB));\n+\n+    // Check that new blocks on chain A get indexed.\n+    uint256 chainA_last_header = last_header;\n+    for (int i = 0; i < 2; i++) {\n+        const auto& block = chainA[i];\n+        BOOST_REQUIRE(ProcessNewBlock(Params(), block, true, nullptr));\n+\n+        const CBlockIndex* block_index;\n+        {\n+            LOCK(cs_main);\n+            block_index = LookupBlockIndex(block->GetHash());\n+        }\n+\n+        BOOST_CHECK(filter_index.BlockUntilSyncedToCurrentChain());\n+        CheckFilterLookups(filter_index, block_index, chainA_last_header);\n+    }\n+\n+    // Reorg to chain B.\n+    uint256 chainB_last_header = last_header;\n+    for (int i = 0; i < 3; i++) {\n+        const auto& block = chainB[i];\n+        BOOST_REQUIRE(ProcessNewBlock(Params(), block, true, nullptr));\n+\n+        const CBlockIndex* block_index;\n+        {\n+            LOCK(cs_main);\n+            block_index = LookupBlockIndex(block->GetHash());\n+        }\n+\n+        BOOST_CHECK(filter_index.BlockUntilSyncedToCurrentChain());\n+        CheckFilterLookups(filter_index, block_index, chainB_last_header);\n+    }\n+\n+    // Check that filters for stale blocks on A can be retrieved.\n+    chainA_last_header = last_header;\n+    for (int i = 0; i < 2; i++) {\n+        const auto& block = chainA[i];\n+        const CBlockIndex* block_index;\n+        {\n+            LOCK(cs_main);\n+            block_index = LookupBlockIndex(block->GetHash());\n+        }\n+\n+        BOOST_CHECK(filter_index.BlockUntilSyncedToCurrentChain());\n+        CheckFilterLookups(filter_index, block_index, chainA_last_header);\n+    }\n+\n+    // Reorg back to chain A.\n+     for (int i = 2; i < 4; i++) {\n+         const auto& block = chainA[i];\n+        BOOST_REQUIRE(ProcessNewBlock(Params(), block, true, nullptr));\n+     }\n+\n+     // Check that chain A and B blocks can be retrieved.\n+     chainA_last_header = last_header;\n+     chainB_last_header = last_header;\n+     for (int i = 0; i < 3; i++) {\n+         const CBlockIndex* block_index;\n+\n+         {\n+             LOCK(cs_main);\n+             block_index = LookupBlockIndex(chainA[i]->GetHash());\n+         }\n+         BOOST_CHECK(filter_index.BlockUntilSyncedToCurrentChain());\n+         CheckFilterLookups(filter_index, block_index, chainA_last_header);\n+\n+         {\n+             LOCK(cs_main);\n+             block_index = LookupBlockIndex(chainB[i]->GetHash());",
      "path": "src/test/blockfilter_index_tests.cpp",
      "position": 241,
      "original_position": 241,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "d4d3ba7ceb6121b56e2fa38151e88f95993881ea",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```\r\n2018-09-25 20:53:15 clang(pr=14121): test/blockfilter_index_tests.cpp:241:52: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [-Wsign-conversion]\r\n```",
      "created_at": "2018-09-25T19:39:00Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r220328014",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/220328014"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 241,
      "original_line": 241,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/220328149",
      "pull_request_review_id": 158711391,
      "id": 220328149,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMDMyODE0OQ==",
      "diff_hunk": "@@ -0,0 +1,307 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <blockfilter.h>\n+#include <chainparams.h>\n+#include <consensus/validation.h>\n+#include <index/blockfilterindex.h>\n+#include <miner.h>\n+#include <pow.h>\n+#include <test/test_bitcoin.h>\n+#include <script/standard.h>\n+#include <validation.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(blockfilter_index_tests)\n+\n+static bool ComputeFilter(BlockFilterType filter_type, const CBlockIndex* block_index,\n+                          BlockFilter& filter)\n+{\n+    CBlock block;\n+    if (!ReadBlockFromDisk(block, block_index->GetBlockPos(), Params().GetConsensus())) {\n+        return false;\n+    }\n+\n+    CBlockUndo block_undo;\n+    if (block_index->nHeight > 0 && !UndoReadFromDisk(block_undo, block_index)) {\n+        return false;\n+    }\n+\n+    filter = BlockFilter(filter_type, block, block_undo);\n+    return true;\n+}\n+\n+static bool CheckFilterLookups(BlockFilterIndex& filter_index, const CBlockIndex* block_index,\n+                               uint256& last_header)\n+{\n+    BlockFilter expected_filter;\n+    if (!ComputeFilter(filter_index.GetFilterType(), block_index, expected_filter)) {\n+        BOOST_ERROR(\"ComputeFilter failed on block \" << block_index->nHeight);\n+        return false;\n+    }\n+\n+    BlockFilter filter;\n+    uint256 filter_header;\n+    std::vector<BlockFilter> filters;\n+    std::vector<uint256> filter_hashes;\n+\n+    BOOST_CHECK(filter_index.LookupFilter(block_index, filter));\n+    BOOST_CHECK(filter_index.LookupFilterHeader(block_index, filter_header));\n+    BOOST_CHECK(filter_index.LookupFilterRange(block_index->nHeight, block_index, filters));\n+    BOOST_CHECK(filter_index.LookupFilterHashRange(block_index->nHeight, block_index,\n+                                                   filter_hashes));\n+\n+    BOOST_CHECK_EQUAL(filters.size(), 1);\n+    BOOST_CHECK_EQUAL(filter_hashes.size(), 1);\n+\n+    BOOST_CHECK_EQUAL(filter.GetHash(), expected_filter.GetHash());\n+    BOOST_CHECK_EQUAL(filter_header, expected_filter.ComputeHeader(last_header));\n+    BOOST_CHECK_EQUAL(filters[0].GetHash(), expected_filter.GetHash());\n+    BOOST_CHECK_EQUAL(filter_hashes[0], expected_filter.GetHash());\n+\n+    filters.clear();\n+    filter_hashes.clear();\n+    last_header = filter_header;\n+    return true;\n+}\n+\n+static CBlock CreateBlock(const CBlockIndex* prev,\n+                          const std::vector<CMutableTransaction>& txns,\n+                          const CScript& scriptPubKey)\n+{\n+    const CChainParams& chainparams = Params();\n+    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey);\n+    CBlock& block = pblocktemplate->block;\n+    block.hashPrevBlock = prev->GetBlockHash();\n+    block.nTime = prev->nTime + 1;\n+\n+    // Replace mempool-selected txns with just coinbase plus passed-in txns:\n+    block.vtx.resize(1);\n+    for (const CMutableTransaction& tx : txns)\n+        block.vtx.push_back(MakeTransactionRef(tx));\n+    // IncrementExtraNonce creates a valid coinbase and merkleRoot\n+    unsigned int extraNonce = 0;\n+    IncrementExtraNonce(&block, prev, extraNonce);\n+\n+    while (!CheckProofOfWork(block.GetHash(), block.nBits, chainparams.GetConsensus())) ++block.nNonce;\n+\n+    return block;\n+}\n+\n+static bool BuildChain(const CBlockIndex* pindex, const CScript& coinbase_script_pub_key,\n+                       size_t length, std::vector<std::shared_ptr<CBlock>>& chain)\n+{\n+    std::vector<CMutableTransaction> no_txns;\n+\n+    chain.resize(length);\n+    for (auto& block : chain) {\n+        block = std::make_shared<CBlock>(CreateBlock(pindex, no_txns, coinbase_script_pub_key));\n+        CBlockHeader header = block->GetBlockHeader();\n+\n+        CValidationState state;\n+        if (!ProcessNewBlockHeaders({header}, state, Params(), &pindex, nullptr)) {\n+            return false;\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, TestChain100Setup)\n+{\n+    BlockFilterIndex filter_index(BlockFilterType::BASIC, 1 << 20, true);\n+\n+    uint256 last_header;\n+\n+    // Filter should not be found in the index before it is started.\n+    {\n+        LOCK(cs_main);\n+\n+        BlockFilter filter;\n+        uint256 filter_header;\n+        std::vector<BlockFilter> filters;\n+        std::vector<uint256> filter_hashes;\n+\n+        for (const CBlockIndex* block_index = chainActive.Genesis();\n+             block_index != nullptr;\n+             block_index = chainActive.Next(block_index)) {\n+\n+            BOOST_CHECK(!filter_index.LookupFilter(block_index, filter));\n+            BOOST_CHECK(!filter_index.LookupFilterHeader(block_index, filter_header));\n+            BOOST_CHECK(!filter_index.LookupFilterRange(block_index->nHeight, block_index, filters));\n+            BOOST_CHECK(!filter_index.LookupFilterHashRange(block_index->nHeight, block_index,\n+                                                            filter_hashes));\n+        }\n+    }\n+\n+    // BlockUntilSyncedToCurrentChain should return false before index is started.\n+    BOOST_CHECK(!filter_index.BlockUntilSyncedToCurrentChain());\n+\n+    filter_index.Start();\n+\n+    // Allow filter index to catch up with the block index.\n+    constexpr int64_t timeout_ms = 10 * 1000;\n+    int64_t time_start = GetTimeMillis();\n+    while (!filter_index.BlockUntilSyncedToCurrentChain()) {\n+        BOOST_REQUIRE(time_start + timeout_ms > GetTimeMillis());\n+        MilliSleep(100);\n+    }\n+\n+    // Check that filter index has all blocks that were in the chain before it started.\n+    {\n+        LOCK(cs_main);\n+        const CBlockIndex* block_index;\n+        for (block_index = chainActive.Genesis();\n+             block_index != nullptr;\n+             block_index = chainActive.Next(block_index)) {\n+            CheckFilterLookups(filter_index, block_index, last_header);\n+        }\n+    }\n+\n+    // Create two forks.\n+    const CBlockIndex* tip;\n+    {\n+        LOCK(cs_main);\n+        tip = chainActive.Tip();\n+    }\n+    CScript coinbase_script_pub_key = GetScriptForDestination(coinbaseKey.GetPubKey().GetID());\n+    std::vector<std::shared_ptr<CBlock>> chainA, chainB;\n+    BOOST_REQUIRE(BuildChain(tip, coinbase_script_pub_key, 10, chainA));\n+    BOOST_REQUIRE(BuildChain(tip, coinbase_script_pub_key, 10, chainB));\n+\n+    // Check that new blocks on chain A get indexed.\n+    uint256 chainA_last_header = last_header;\n+    for (int i = 0; i < 2; i++) {\n+        const auto& block = chainA[i];\n+        BOOST_REQUIRE(ProcessNewBlock(Params(), block, true, nullptr));\n+\n+        const CBlockIndex* block_index;\n+        {\n+            LOCK(cs_main);\n+            block_index = LookupBlockIndex(block->GetHash());\n+        }\n+\n+        BOOST_CHECK(filter_index.BlockUntilSyncedToCurrentChain());\n+        CheckFilterLookups(filter_index, block_index, chainA_last_header);\n+    }\n+\n+    // Reorg to chain B.\n+    uint256 chainB_last_header = last_header;\n+    for (int i = 0; i < 3; i++) {\n+        const auto& block = chainB[i];\n+        BOOST_REQUIRE(ProcessNewBlock(Params(), block, true, nullptr));\n+\n+        const CBlockIndex* block_index;\n+        {\n+            LOCK(cs_main);\n+            block_index = LookupBlockIndex(block->GetHash());\n+        }\n+\n+        BOOST_CHECK(filter_index.BlockUntilSyncedToCurrentChain());\n+        CheckFilterLookups(filter_index, block_index, chainB_last_header);\n+    }\n+\n+    // Check that filters for stale blocks on A can be retrieved.\n+    chainA_last_header = last_header;\n+    for (int i = 0; i < 2; i++) {\n+        const auto& block = chainA[i];\n+        const CBlockIndex* block_index;\n+        {\n+            LOCK(cs_main);\n+            block_index = LookupBlockIndex(block->GetHash());\n+        }\n+\n+        BOOST_CHECK(filter_index.BlockUntilSyncedToCurrentChain());\n+        CheckFilterLookups(filter_index, block_index, chainA_last_header);\n+    }\n+\n+    // Reorg back to chain A.\n+     for (int i = 2; i < 4; i++) {\n+         const auto& block = chainA[i];\n+        BOOST_REQUIRE(ProcessNewBlock(Params(), block, true, nullptr));\n+     }\n+\n+     // Check that chain A and B blocks can be retrieved.\n+     chainA_last_header = last_header;\n+     chainB_last_header = last_header;\n+     for (int i = 0; i < 3; i++) {\n+         const CBlockIndex* block_index;\n+\n+         {\n+             LOCK(cs_main);\n+             block_index = LookupBlockIndex(chainA[i]->GetHash());\n+         }\n+         BOOST_CHECK(filter_index.BlockUntilSyncedToCurrentChain());\n+         CheckFilterLookups(filter_index, block_index, chainA_last_header);\n+\n+         {\n+             LOCK(cs_main);\n+             block_index = LookupBlockIndex(chainB[i]->GetHash());\n+         }\n+         BOOST_CHECK(filter_index.BlockUntilSyncedToCurrentChain());\n+         CheckFilterLookups(filter_index, block_index, chainB_last_header);\n+     }\n+\n+    // Test lookups for a range of filters/hashes.\n+    std::vector<BlockFilter> filters;\n+    std::vector<uint256> filter_hashes;\n+\n+    {\n+        LOCK(cs_main);\n+        tip = chainActive.Tip();\n+    }\n+    BOOST_CHECK(filter_index.LookupFilterRange(0, tip, filters));\n+    BOOST_CHECK(filter_index.LookupFilterHashRange(0, tip, filter_hashes));\n+\n+    BOOST_CHECK_EQUAL(filters.size(), tip->nHeight + 1);\n+    BOOST_CHECK_EQUAL(filter_hashes.size(), tip->nHeight + 1);\n+\n+    filters.clear();\n+    filter_hashes.clear();\n+\n+    filter_index.Interrupt();\n+    filter_index.Stop();\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(blockfilter_index_init_destroy, BasicTestingSetup)\n+{\n+    SetDataDir(\"tempdir\");\n+\n+    BlockFilterIndex* filter_index;\n+\n+    filter_index = GetBlockFilterIndex(BlockFilterType::BASIC);\n+    BOOST_CHECK(filter_index == nullptr);\n+\n+    BOOST_CHECK(InitBlockFilterIndex(BlockFilterType::BASIC, 1 << 20, true, false));\n+\n+    filter_index = GetBlockFilterIndex(BlockFilterType::BASIC);\n+    BOOST_CHECK(filter_index != nullptr);\n+    BOOST_CHECK(filter_index->GetFilterType() == BlockFilterType::BASIC);\n+\n+    // Initialize returns false if index already exists.\n+    BOOST_CHECK(!InitBlockFilterIndex(BlockFilterType::BASIC, 1 << 20, true, false));\n+\n+    int iter_count = 0;\n+    ForEachBlockFilterIndex([&iter_count](BlockFilterIndex& index) { iter_count++; });",
      "path": "src/test/blockfilter_index_tests.cpp",
      "position": null,
      "original_position": 287,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "d4d3ba7ceb6121b56e2fa38151e88f95993881ea",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```\r\n2018-09-25 20:53:15 clang(pr=14121): test/blockfilter_index_tests.cpp:287:61: warning: unused parameter 'index' [-Wunused-parameter]\r\n```",
      "created_at": "2018-09-25T19:39:30Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r220328149",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/220328149"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 287,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/221463322",
      "pull_request_review_id": 160118664,
      "id": 221463322,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMTQ2MzMyMg==",
      "diff_hunk": "@@ -149,6 +152,17 @@ bool BaseIndex::WriteBestBlock(const CBlockIndex* block_index)\n     return true;\n }\n \n+bool BaseIndex::Rewind(const CBlockIndex* _current_tip, const CBlockIndex* new_tip)",
      "path": "src/index/base.cpp",
      "position": null,
      "original_position": 42,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "d4d3ba7ceb6121b56e2fa38151e88f95993881ea",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`_current_tip` is unused?",
      "created_at": "2018-09-30T15:35:06Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r221463322",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/221463322"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 155,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/221471766",
      "pull_request_review_id": 160126801,
      "id": 221471766,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMTQ3MTc2Ng==",
      "diff_hunk": "@@ -149,6 +152,17 @@ bool BaseIndex::WriteBestBlock(const CBlockIndex* block_index)\n     return true;\n }\n \n+bool BaseIndex::Rewind(const CBlockIndex* _current_tip, const CBlockIndex* new_tip)",
      "path": "src/index/base.cpp",
      "position": null,
      "original_position": 42,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "d4d3ba7ceb6121b56e2fa38151e88f95993881ea",
      "in_reply_to_id": 221463322,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's used in a subclass implementation.",
      "created_at": "2018-09-30T20:09:29Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r221471766",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/221471766"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 155,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/244299781",
      "pull_request_review_id": 188266174,
      "id": 244299781,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NDI5OTc4MQ==",
      "diff_hunk": "@@ -0,0 +1,83 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INDEX_BLOCKFILTERINDEX_H\n+#define BITCOIN_INDEX_BLOCKFILTERINDEX_H\n+\n+#include <blockfilter.h>\n+#include <chain.h>\n+#include <index/base.h>\n+\n+/**\n+ * BlockFilterIndex is used to store and retrieve block filters, hashes, and headers for a range of\n+ * blocks by height. An index is constructed for each supported filter type with its own database\n+ * (ie. filter data for different types are stored in separate databases).\n+ *\n+ * This index is used to serve BIP 157 net requests.\n+ */\n+class BlockFilterIndex final : public BaseIndex\n+{\n+private:\n+    BlockFilterType m_filter_type;\n+    std::string m_name;\n+    std::unique_ptr<BaseIndex::DB> m_db;\n+\n+protected:\n+    bool WriteBlock(const CBlock& block, const CBlockIndex* pindex) override;\n+\n+    bool Rewind(const CBlockIndex* current_tip, const CBlockIndex* new_tip) override;\n+\n+    BaseIndex::DB& GetDB() const override { return *m_db; }\n+\n+    const char* GetName() const override { return m_name.c_str(); }\n+\n+public:\n+    /** Constructs the index, which becomes available to be queried. */\n+    explicit BlockFilterIndex(BlockFilterType filter_type,",
      "path": "src/index/blockfilterindex.h",
      "position": 48,
      "original_position": 37,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "e6024f3810907e6fbec34e4fb736d1162fc03c09",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Isn’t `explicit` redundant here?",
      "created_at": "2018-12-28T10:47:45Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r244299781",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/244299781"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 48,
      "original_line": 48,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246905158",
      "pull_request_review_id": 191393886,
      "id": 246905158,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NjkwNTE1OA==",
      "diff_hunk": "@@ -248,7 +248,8 @@ static GCSFilter::ElementSet BasicFilterElements(const CBlock& block,\n     for (const CTransactionRef& tx : block.vtx) {\n         for (const CTxOut& txout : tx->vout) {\n             const CScript& script = txout.scriptPubKey;\n-            if (script.empty() || script[0] == OP_RETURN) continue;\n+            if (script.empty()) continue;\n+            if (script[0] == OP_RETURN && script.IsPushOnly(script.begin() + 1)) continue;",
      "path": "src/blockfilter.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "e6024f3810907e6fbec34e4fb736d1162fc03c09",
      "in_reply_to_id": null,
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This change doesn't appear consistent with BIP158. (\"The scriptPubKey of each output, aside from all OP_RETURN output scripts.\", \"We exclude all OP_RETURN outputs in order to allow filters to easily be committed to in the future via a soft-fork.\")  Also I don't think it's a good idea? They're no less unspendable even if they're not push only.",
      "created_at": "2019-01-10T20:11:45Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r246905158",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246905158"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 252,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246952416",
      "pull_request_review_id": 191454734,
      "id": 246952416,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0Njk1MjQxNg==",
      "diff_hunk": "@@ -248,7 +248,8 @@ static GCSFilter::ElementSet BasicFilterElements(const CBlock& block,\n     for (const CTransactionRef& tx : block.vtx) {\n         for (const CTxOut& txout : tx->vout) {\n             const CScript& script = txout.scriptPubKey;\n-            if (script.empty() || script[0] == OP_RETURN) continue;\n+            if (script.empty()) continue;\n+            if (script[0] == OP_RETURN && script.IsPushOnly(script.begin() + 1)) continue;",
      "path": "src/blockfilter.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "e6024f3810907e6fbec34e4fb736d1162fc03c09",
      "in_reply_to_id": 246905158,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, the BIP should probably clarify exactly what that means. I made this change because 1) btcd does it and 2) the standard TX_NULL_DATA script type is [defined this way](https://github.com/bitcoin/bitcoin/blob/b68bac83d9ead9e8893785a58fbed6d09cba4b5c/src/script/standard.cpp#L128). In other words, scripts beginning with OP_RETURN and not followed by pushdata are non-standard. I think it makes sense to stick with this definition of \"OP_RETURN output\", but don't feel too strongly.",
      "created_at": "2019-01-10T22:59:08Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r246952416",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246952416"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 252,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/250021511",
      "pull_request_review_id": 195305536,
      "id": 250021511,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MDAyMTUxMQ==",
      "diff_hunk": "@@ -248,7 +248,8 @@ static GCSFilter::ElementSet BasicFilterElements(const CBlock& block,\n     for (const CTransactionRef& tx : block.vtx) {\n         for (const CTxOut& txout : tx->vout) {\n             const CScript& script = txout.scriptPubKey;\n-            if (script.empty() || script[0] == OP_RETURN) continue;\n+            if (script.empty()) continue;\n+            if (script[0] == OP_RETURN && script.IsPushOnly(script.begin() + 1)) continue;",
      "path": "src/blockfilter.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "e6024f3810907e6fbec34e4fb736d1162fc03c09",
      "in_reply_to_id": 246905158,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "We should probably match IsUnspendable (ie that it just starts with OP_RETURN). TX_NULL_DATA is just an internal thing, not something to mirror this based on.",
      "created_at": "2019-01-23T01:02:48Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r250021511",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/250021511"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 252,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/250424163",
      "pull_request_review_id": 195807125,
      "id": 250424163,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MDQyNDE2Mw==",
      "diff_hunk": "@@ -248,7 +248,8 @@ static GCSFilter::ElementSet BasicFilterElements(const CBlock& block,\n     for (const CTransactionRef& tx : block.vtx) {\n         for (const CTxOut& txout : tx->vout) {\n             const CScript& script = txout.scriptPubKey;\n-            if (script.empty() || script[0] == OP_RETURN) continue;\n+            if (script.empty()) continue;\n+            if (script[0] == OP_RETURN && script.IsPushOnly(script.begin() + 1)) continue;",
      "path": "src/blockfilter.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "e6024f3810907e6fbec34e4fb736d1162fc03c09",
      "in_reply_to_id": 246905158,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I agree with @TheBlueMatt that there is no need to leak our internal TX_NULL_DATA template into the BIP. Would it make sense to use CScript::IsUnspendable instead (or at least equivalent to its current definition), which triggers on *((length > 0 and first_byte = OP_RETURN) or length > 10000)*?",
      "created_at": "2019-01-24T00:17:07Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r250424163",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/250424163"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 252,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/261879998",
      "pull_request_review_id": 209923857,
      "id": 261879998,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2MTg3OTk5OA==",
      "diff_hunk": "@@ -248,7 +248,8 @@ static GCSFilter::ElementSet BasicFilterElements(const CBlock& block,\n     for (const CTransactionRef& tx : block.vtx) {\n         for (const CTxOut& txout : tx->vout) {\n             const CScript& script = txout.scriptPubKey;\n-            if (script.empty() || script[0] == OP_RETURN) continue;\n+            if (script.empty()) continue;\n+            if (script[0] == OP_RETURN && script.IsPushOnly(script.begin() + 1)) continue;",
      "path": "src/blockfilter.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "e6024f3810907e6fbec34e4fb736d1162fc03c09",
      "in_reply_to_id": 246905158,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This has been clarified in the BIP and updated here.",
      "created_at": "2019-03-03T18:28:22Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r261879998",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/261879998"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 252,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/262576030",
      "pull_request_review_id": 210781142,
      "id": 262576030,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2MjU3NjAzMA==",
      "diff_hunk": "@@ -2297,6 +2299,82 @@ UniValue scantxoutset(const JSONRPCRequest& request)\n     return result;\n }\n \n+static UniValue getblockfilter(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 2) {",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "9ab0b7a32f07ce5194b7bd980f8ce7ad1ab59105",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`|| request.params.empty() || request.params.size() > 2`",
      "created_at": "2019-03-05T16:30:45Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r262576030",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/262576030"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2304,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/262583513",
      "pull_request_review_id": 210781142,
      "id": 262583513,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2MjU4MzUxMw==",
      "diff_hunk": "@@ -2297,6 +2299,82 @@ UniValue scantxoutset(const JSONRPCRequest& request)\n     return result;\n }\n \n+static UniValue getblockfilter(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 2) {\n+        throw std::runtime_error(\n+            RPCHelpMan{\"getblockfilter\",\n+                \"\\nRetrieve a BIP 157 content filter for a particular block.\\n\",\n+                {\n+                    {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The hash of the block\"},\n+                    {\"filtertype\", RPCArg::Type::STR, /*default*/ \"basic\", \"The type name of the filter\"},\n+                },\n+                RPCResult{\n+                    \"{\\n\"\n+                    \"  \\\"filter\\\" : (string) the hex-encoded filter data\\n\"\n+                    \"  \\\"header\\\" : (string) the hex-encoded filter header\\n\"\n+                    \"}\\n\"\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockfilter\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\" \\\"basic\\\"\")\n+                }\n+            }.ToString()\n+        );\n+    }\n+\n+    uint256 block_hash = uint256S(request.params[0].get_str());\n+    std::string filtertype_name = request.params[1].get_str();",
      "path": "src/rpc/blockchain.cpp",
      "position": null,
      "original_position": 44,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "1a52982bd800fc997f8a2ab9df05d34661655ddf",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```cpp\r\n    std::string filtertype_name = \"basic\";\r\n    if(!request.params[1].isNull()) {\r\n        filtertype_name = request.params[1].get_str();\r\n    }\r\n```",
      "created_at": "2019-03-05T16:46:15Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r262583513",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/262583513"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2326,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/264050135",
      "pull_request_review_id": 212613603,
      "id": 264050135,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2NDA1MDEzNQ==",
      "diff_hunk": "@@ -0,0 +1,83 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INDEX_BLOCKFILTERINDEX_H\n+#define BITCOIN_INDEX_BLOCKFILTERINDEX_H\n+\n+#include <blockfilter.h>\n+#include <chain.h>\n+#include <index/base.h>\n+\n+/**\n+ * BlockFilterIndex is used to store and retrieve block filters, hashes, and headers for a range of\n+ * blocks by height. An index is constructed for each supported filter type with its own database\n+ * (ie. filter data for different types are stored in separate databases).\n+ *\n+ * This index is used to serve BIP 157 net requests.\n+ */\n+class BlockFilterIndex final : public BaseIndex\n+{\n+private:\n+    BlockFilterType m_filter_type;\n+    std::string m_name;\n+    std::unique_ptr<BaseIndex::DB> m_db;\n+\n+protected:\n+    bool WriteBlock(const CBlock& block, const CBlockIndex* pindex) override;\n+\n+    bool Rewind(const CBlockIndex* current_tip, const CBlockIndex* new_tip) override;\n+\n+    BaseIndex::DB& GetDB() const override { return *m_db; }\n+\n+    const char* GetName() const override { return m_name.c_str(); }\n+\n+public:\n+    /** Constructs the index, which becomes available to be queried. */\n+    explicit BlockFilterIndex(BlockFilterType filter_type,",
      "path": "src/index/blockfilterindex.h",
      "position": 48,
      "original_position": 37,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "e6024f3810907e6fbec34e4fb736d1162fc03c09",
      "in_reply_to_id": 244299781,
      "user": {
        "login": "Empact",
        "id": 5470,
        "node_id": "MDQ6VXNlcjU0NzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Empact",
        "html_url": "https://github.com/Empact",
        "followers_url": "https://api.github.com/users/Empact/followers",
        "following_url": "https://api.github.com/users/Empact/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Empact/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Empact/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
        "organizations_url": "https://api.github.com/users/Empact/orgs",
        "repos_url": "https://api.github.com/users/Empact/repos",
        "events_url": "https://api.github.com/users/Empact/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Empact/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not as of C++11, because of list initialization\r\nhttps://en.cppreference.com/w/cpp/language/explicit",
      "created_at": "2019-03-10T17:47:26Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r264050135",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/264050135"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 48,
      "original_line": 48,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/267066278",
      "pull_request_review_id": 216380234,
      "id": 267066278,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2NzA2NjI3OA==",
      "diff_hunk": "@@ -144,12 +146,35 @@ void BaseIndex::ThreadSync()\n     }\n }\n \n-bool BaseIndex::WriteBestBlock(const CBlockIndex* block_index)\n+bool BaseIndex::Commit()\n+{\n+    CDBBatch batch(GetDB());\n+    if (!Commit(batch) || !GetDB().WriteBatch(batch)) {\n+        return error(\"%s: Failed to commit latest %s state\", __func__, GetName());\n+    }\n+    return true;\n+}\n+\n+bool BaseIndex::Commit(CDBBatch& batch)\n {\n     LOCK(cs_main);\n-    if (!GetDB().WriteBestBlock(chainActive.GetLocator(block_index))) {\n-        return error(\"%s: Failed to write locator to disk\", __func__);\n+    GetDB().WriteBestBlock(batch, chainActive.GetLocator(m_best_block_index));\n+    return true;\n+}\n+\n+bool BaseIndex::Rewind(const CBlockIndex* current_tip, const CBlockIndex* new_tip)\n+{\n+    assert(current_tip = m_best_block_index);",
      "path": "src/index/base.cpp",
      "position": null,
      "original_position": 69,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "96b3234b682c0c8d639aa866c9888376e4f49cf0",
      "in_reply_to_id": null,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is wrong but is corrected later in a801e39472. Wonder if it's worth amending here.",
      "created_at": "2019-03-19T19:44:12Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r267066278",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/267066278"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 167,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/267077532",
      "pull_request_review_id": 216394604,
      "id": 267077532,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2NzA3NzUzMg==",
      "diff_hunk": "@@ -404,6 +409,10 @@ void SetupServerArgs()\n     hidden_args.emplace_back(\"-sysperms\");\n #endif\n     gArgs.AddArg(\"-txindex\", strprintf(\"Maintain a full transaction index, used by the getrawtransaction rpc call (default: %u)\", DEFAULT_TXINDEX), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-blockfilterindex=<type>\",\n+                 strprintf(\"Maintain an index of compact filters by block (default: %u, values: %s).\", 0, ListBlockFilterTypes()) +",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 45,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "634693641d73f3bc70ba2c508bd4cb15d69e87b6",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Please define the default in a single location (ie, not both here and GetArg calls), and use %s in case it is a string.",
      "created_at": "2019-03-19T20:14:41Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r267077532",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/267077532"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 413,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/267362389",
      "pull_request_review_id": 216380234,
      "id": 267362389,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2NzM2MjM4OQ==",
      "diff_hunk": "@@ -0,0 +1,272 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <map>\n+\n+#include <index/blockfilterindex.h>\n+#include <util/system.h>\n+#include <validation.h>\n+\n+/* The index database stores three items for each block: the disk location of the encoded filter,\n+ * its dSHA256 hash, and the header. Those belonging to blocks on the active chain are indexed by\n+ * height, and those belonging to blocks that have been reorganized out of the active chain are\n+ * indexed by block hash. This ensures that filter data for any block that becomes part of the\n+ * active chain can always be retrieved, alleviating timing concerns.\n+ *\n+ * The filters themselves are stored in flat files and referenced by the LevelDB entries. This\n+ * minimizes the amount of data written to LevelDB and keeps the database values constant size.\n+ *\n+ * Keys for the height index have the type [DB_BLOCK_HEIGHT, uint32 (BE)]. The height is represented\n+ * as big-endian so that sequential reads of filters by height are fast.\n+ * Keys for the hash index have the type [DB_BLOCK_HASH, uint256].\n+ */\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_FILTER_POS = 'P';\n+\n+constexpr unsigned int MAX_FILE_SIZE = 0x1000000; // 16 MiB\n+/** The pre-allocation chunk size for fltr?????.dat files */\n+constexpr unsigned int FILE_CHUNK_SIZE = 0x100000; // 1 MiB\n+\n+namespace {\n+    struct DBVal\n+    {\n+        uint256 hash;\n+        uint256 header;\n+        FlatFilePos pos;\n+\n+        ADD_SERIALIZE_METHODS;\n+\n+        template <typename Stream, typename Operation>\n+        inline void SerializationOp(Stream& s, Operation ser_action) {\n+            READWRITE(hash);\n+            READWRITE(header);\n+            READWRITE(pos);\n+        }\n+    };\n+\n+    struct DBHeightKey\n+    {\n+        int height;\n+\n+        DBHeightKey() : height(0) {}\n+        DBHeightKey(int height_in) : height(height_in) {}\n+\n+        template<typename Stream>\n+        void Serialize(Stream& s) const\n+        {\n+            ser_writedata8(s, DB_BLOCK_HEIGHT);\n+            ser_writedata32be(s, height);\n+        }\n+\n+        template<typename Stream>\n+        void Unserialize(Stream& s)\n+        {\n+            char prefix = ser_readdata8(s);\n+            if (prefix != DB_BLOCK_HEIGHT) {\n+                throw std::ios_base::failure(\"Invalid format for DB key\");\n+            }\n+            height = ser_readdata32be(s);\n+        }\n+    };\n+\n+    struct DBHashKey\n+    {\n+        uint256 hash;\n+\n+        DBHashKey(const uint256& hash_in) : hash(hash_in) {}\n+\n+        ADD_SERIALIZE_METHODS;\n+\n+        template <typename Stream, typename Operation>\n+        inline void SerializationOp(Stream& s, Operation ser_action) {\n+            char prefix = DB_BLOCK_HASH;\n+            READWRITE(prefix);\n+            if (prefix != DB_BLOCK_HASH) {\n+                throw std::ios_base::failure(\"Invalid format for DB key\");\n+            }\n+\n+            READWRITE(hash);\n+        }\n+    };\n+};\n+\n+BlockFilterIndex::BlockFilterIndex(BlockFilterType filter_type,\n+                                   size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_filter_type(filter_type)\n+{\n+    const std::string& filter_name = BlockFilterTypeName(filter_type);\n+    if (filter_name == \"\") throw std::invalid_argument(\"unknown filter_type\");\n+\n+    fs::path path = GetDataDir() / \"indexes\" / \"blockfilter\" / filter_name;\n+    fs::create_directories(path);\n+\n+    m_name = filter_name + \" block filter index\";\n+    m_db = MakeUnique<BaseIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+    m_filter_fileseq = MakeUnique<FlatFileSeq>(std::move(path), \"fltr\", FILE_CHUNK_SIZE);\n+}\n+\n+bool BlockFilterIndex::Init()\n+{\n+    if (!m_db->Read(DB_FILTER_POS, m_next_filter_pos)) {\n+        m_next_filter_pos.nFile = 0;\n+        m_next_filter_pos.nPos = 0;\n+    }\n+    return BaseIndex::Init();\n+}\n+\n+bool BlockFilterIndex::Commit(CDBBatch& batch)\n+{\n+    const FlatFilePos& pos = m_next_filter_pos;\n+\n+    // Flush current filter file to disk.\n+    CAutoFile file(m_filter_fileseq->Open(pos), SER_DISK, CLIENT_VERSION);\n+    if (file.IsNull()) {\n+        return error(\"%s: Failed to open filter file %d\", __func__, pos.nFile);\n+    }\n+    if (!FileCommit(file.Get())) {\n+        return error(\"%s: Failed to commit filter file %d\", __func__, pos.nFile);\n+    }\n+\n+    batch.Write(DB_FILTER_POS, pos);\n+    return BaseIndex::Commit(batch);\n+}\n+\n+size_t BlockFilterIndex::WriteFilterToDisk(FlatFilePos& pos, const BlockFilter& filter)\n+{\n+    assert(filter.GetFilterType() == GetFilterType());\n+\n+    size_t data_size =\n+        GetSerializeSize(filter.GetBlockHash(), CLIENT_VERSION) +\n+        GetSerializeSize(filter.GetEncodedFilter(), CLIENT_VERSION);\n+\n+    // If writing the filter would overflow the file, flush and move to the next one.",
      "path": "src/index/blockfilterindex.cpp",
      "position": 177,
      "original_position": 144,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "ac208f820b2a80dd23f3a11cdb4da616a115123b",
      "in_reply_to_id": null,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Conceptual nit: this logic seems like it should live in `FlatFileSeq` since it seems similar in nature to `FlatFileSeq::Allocate()`.",
      "created_at": "2019-03-20T14:19:54Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r267362389",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/267362389"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 177,
      "original_line": 177,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/267421501",
      "pull_request_review_id": 216380234,
      "id": 267421501,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2NzQyMTUwMQ==",
      "diff_hunk": "@@ -64,6 +67,48 @@ static bool CheckFilterLookups(BlockFilterIndex& filter_index, const CBlockIndex\n     return true;\n }\n \n+static CBlock CreateBlock(const CBlockIndex* prev,\n+                          const std::vector<CMutableTransaction>& txns,\n+                          const CScript& scriptPubKey)\n+{\n+    const CChainParams& chainparams = Params();\n+    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey);\n+    CBlock& block = pblocktemplate->block;\n+    block.hashPrevBlock = prev->GetBlockHash();\n+    block.nTime = prev->nTime + 1;\n+\n+    // Replace mempool-selected txns with just coinbase plus passed-in txns:\n+    block.vtx.resize(1);\n+    for (const CMutableTransaction& tx : txns)\n+        block.vtx.push_back(MakeTransactionRef(tx));\n+    // IncrementExtraNonce creates a valid coinbase and merkleRoot\n+    unsigned int extraNonce = 0;\n+    IncrementExtraNonce(&block, prev, extraNonce);\n+\n+    while (!CheckProofOfWork(block.GetHash(), block.nBits, chainparams.GetConsensus())) ++block.nNonce;\n+\n+    return block;\n+}\n+\n+static bool BuildChain(const CBlockIndex* pindex, const CScript& coinbase_script_pub_key,\n+                       size_t length, std::vector<std::shared_ptr<CBlock>>& chain)\n+{\n+    std::vector<CMutableTransaction> no_txns;\n+\n+    chain.resize(length);\n+    for (auto& block : chain) {\n+        block = std::make_shared<CBlock>(CreateBlock(pindex, no_txns, coinbase_script_pub_key));\n+        CBlockHeader header = block->GetBlockHeader();\n+\n+        CValidationState state;\n+        if (!ProcessNewBlockHeaders({header}, state, Params(), &pindex, nullptr)) {\n+            return false;\n+        }\n+    }\n+\n+    return true;\n+}",
      "path": "src/test/blockfilter_index_tests.cpp",
      "position": 111,
      "original_position": 55,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "4f7a4a593d200c26ca913552a63e887e0c07758f",
      "in_reply_to_id": null,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(not blocking) The above two functions are nice utilities and general beyond these tests. They'd probably be useful to future test writers and accordingly could live somewhere less specific.",
      "created_at": "2019-03-20T16:09:28Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r267421501",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/267421501"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 111,
      "original_line": 111,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/267519622",
      "pull_request_review_id": 216380234,
      "id": 267519622,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2NzUxOTYyMg==",
      "diff_hunk": "@@ -18,7 +18,7 @@ static constexpr int GCS_SER_TYPE = SER_NETWORK;\n static constexpr int GCS_SER_VERSION = 0;\n \n static const std::map<BlockFilterType, std::string> g_filter_types = {\n-    {BASIC, \"basic\"},\n+    {BlockFilterType::BASIC, \"basic\"},",
      "path": "src/blockfilter.cpp",
      "position": 15,
      "original_position": 5,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "634693641d73f3bc70ba2c508bd4cb15d69e87b6",
      "in_reply_to_id": null,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This commit (consisting only of this line diff) could probably be squashed into https://github.com/bitcoin/bitcoin/pull/14121/commits/aab05e29d5d2e3f162f0453a3b0ba7205e57356e.",
      "created_at": "2019-03-20T19:55:42Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r267519622",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/267519622"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 22,
      "original_line": 22,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/268275576",
      "pull_request_review_id": 217892935,
      "id": 268275576,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2ODI3NTU3Ng==",
      "diff_hunk": "@@ -144,12 +146,35 @@ void BaseIndex::ThreadSync()\n     }\n }\n \n-bool BaseIndex::WriteBestBlock(const CBlockIndex* block_index)\n+bool BaseIndex::Commit()\n+{\n+    CDBBatch batch(GetDB());\n+    if (!Commit(batch) || !GetDB().WriteBatch(batch)) {\n+        return error(\"%s: Failed to commit latest %s state\", __func__, GetName());\n+    }\n+    return true;\n+}\n+\n+bool BaseIndex::Commit(CDBBatch& batch)\n {\n     LOCK(cs_main);\n-    if (!GetDB().WriteBestBlock(chainActive.GetLocator(block_index))) {\n-        return error(\"%s: Failed to write locator to disk\", __func__);\n+    GetDB().WriteBestBlock(batch, chainActive.GetLocator(m_best_block_index));\n+    return true;\n+}\n+\n+bool BaseIndex::Rewind(const CBlockIndex* current_tip, const CBlockIndex* new_tip)\n+{\n+    assert(current_tip = m_best_block_index);",
      "path": "src/index/base.cpp",
      "position": null,
      "original_position": 69,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "96b3234b682c0c8d639aa866c9888376e4f49cf0",
      "in_reply_to_id": 267066278,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"index: Allow atomic commits of index state to be extended.\" (96b3234b682c0c8d639aa866c9888376e4f49cf0)\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/14121#discussion_r267066278\r\n\r\n> This is wrong but is corrected later in a801e39. Wonder if it's worth amending here.\r\n\r\nThis commit also doesn't compile because the Rewind method isn't declared until the next commit. Would fix this up, especially since the PR needs to be rebased anyway.",
      "created_at": "2019-03-22T17:46:16Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r268275576",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/268275576"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 167,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/268367938",
      "pull_request_review_id": 218010532,
      "id": 268367938,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2ODM2NzkzOA==",
      "diff_hunk": "@@ -0,0 +1,272 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <map>\n+\n+#include <index/blockfilterindex.h>\n+#include <util/system.h>\n+#include <validation.h>\n+\n+/* The index database stores three items for each block: the disk location of the encoded filter,\n+ * its dSHA256 hash, and the header. Those belonging to blocks on the active chain are indexed by\n+ * height, and those belonging to blocks that have been reorganized out of the active chain are\n+ * indexed by block hash. This ensures that filter data for any block that becomes part of the\n+ * active chain can always be retrieved, alleviating timing concerns.\n+ *\n+ * The filters themselves are stored in flat files and referenced by the LevelDB entries. This\n+ * minimizes the amount of data written to LevelDB and keeps the database values constant size.\n+ *\n+ * Keys for the height index have the type [DB_BLOCK_HEIGHT, uint32 (BE)]. The height is represented\n+ * as big-endian so that sequential reads of filters by height are fast.\n+ * Keys for the hash index have the type [DB_BLOCK_HASH, uint256].\n+ */\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_FILTER_POS = 'P';\n+\n+constexpr unsigned int MAX_FILE_SIZE = 0x1000000; // 16 MiB\n+/** The pre-allocation chunk size for fltr?????.dat files */\n+constexpr unsigned int FILE_CHUNK_SIZE = 0x100000; // 1 MiB\n+\n+namespace {\n+    struct DBVal\n+    {\n+        uint256 hash;\n+        uint256 header;\n+        FlatFilePos pos;\n+\n+        ADD_SERIALIZE_METHODS;\n+\n+        template <typename Stream, typename Operation>\n+        inline void SerializationOp(Stream& s, Operation ser_action) {\n+            READWRITE(hash);\n+            READWRITE(header);\n+            READWRITE(pos);\n+        }\n+    };\n+\n+    struct DBHeightKey\n+    {\n+        int height;\n+\n+        DBHeightKey() : height(0) {}\n+        DBHeightKey(int height_in) : height(height_in) {}\n+\n+        template<typename Stream>\n+        void Serialize(Stream& s) const\n+        {\n+            ser_writedata8(s, DB_BLOCK_HEIGHT);\n+            ser_writedata32be(s, height);\n+        }\n+\n+        template<typename Stream>\n+        void Unserialize(Stream& s)\n+        {\n+            char prefix = ser_readdata8(s);\n+            if (prefix != DB_BLOCK_HEIGHT) {\n+                throw std::ios_base::failure(\"Invalid format for DB key\");\n+            }\n+            height = ser_readdata32be(s);\n+        }\n+    };\n+\n+    struct DBHashKey\n+    {\n+        uint256 hash;\n+\n+        DBHashKey(const uint256& hash_in) : hash(hash_in) {}\n+\n+        ADD_SERIALIZE_METHODS;\n+\n+        template <typename Stream, typename Operation>\n+        inline void SerializationOp(Stream& s, Operation ser_action) {\n+            char prefix = DB_BLOCK_HASH;\n+            READWRITE(prefix);\n+            if (prefix != DB_BLOCK_HASH) {\n+                throw std::ios_base::failure(\"Invalid format for DB key\");\n+            }\n+\n+            READWRITE(hash);\n+        }\n+    };\n+};\n+\n+BlockFilterIndex::BlockFilterIndex(BlockFilterType filter_type,\n+                                   size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_filter_type(filter_type)\n+{\n+    const std::string& filter_name = BlockFilterTypeName(filter_type);\n+    if (filter_name == \"\") throw std::invalid_argument(\"unknown filter_type\");\n+\n+    fs::path path = GetDataDir() / \"indexes\" / \"blockfilter\" / filter_name;\n+    fs::create_directories(path);\n+\n+    m_name = filter_name + \" block filter index\";\n+    m_db = MakeUnique<BaseIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+    m_filter_fileseq = MakeUnique<FlatFileSeq>(std::move(path), \"fltr\", FILE_CHUNK_SIZE);\n+}\n+\n+bool BlockFilterIndex::Init()\n+{\n+    if (!m_db->Read(DB_FILTER_POS, m_next_filter_pos)) {\n+        m_next_filter_pos.nFile = 0;\n+        m_next_filter_pos.nPos = 0;\n+    }\n+    return BaseIndex::Init();\n+}\n+\n+bool BlockFilterIndex::Commit(CDBBatch& batch)\n+{\n+    const FlatFilePos& pos = m_next_filter_pos;\n+\n+    // Flush current filter file to disk.\n+    CAutoFile file(m_filter_fileseq->Open(pos), SER_DISK, CLIENT_VERSION);\n+    if (file.IsNull()) {\n+        return error(\"%s: Failed to open filter file %d\", __func__, pos.nFile);\n+    }\n+    if (!FileCommit(file.Get())) {\n+        return error(\"%s: Failed to commit filter file %d\", __func__, pos.nFile);\n+    }\n+\n+    batch.Write(DB_FILTER_POS, pos);\n+    return BaseIndex::Commit(batch);\n+}\n+\n+size_t BlockFilterIndex::WriteFilterToDisk(FlatFilePos& pos, const BlockFilter& filter)\n+{\n+    assert(filter.GetFilterType() == GetFilterType());\n+\n+    size_t data_size =\n+        GetSerializeSize(filter.GetBlockHash(), CLIENT_VERSION) +\n+        GetSerializeSize(filter.GetEncodedFilter(), CLIENT_VERSION);\n+\n+    // If writing the filter would overflow the file, flush and move to the next one.",
      "path": "src/index/blockfilterindex.cpp",
      "position": 177,
      "original_position": 144,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "ac208f820b2a80dd23f3a11cdb4da616a115123b",
      "in_reply_to_id": 267362389,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I agree, but the logic for block/undo files is weird because they are synchronized (like the undo file numbers increment when the block file numbers do, not at a size limit).\r\n\r\nWould be a good thing to look at refactoring after this is merged maybe.",
      "created_at": "2019-03-22T23:36:39Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r268367938",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/268367938"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 177,
      "original_line": 177,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/268368647",
      "pull_request_review_id": 218011412,
      "id": 268368647,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2ODM2ODY0Nw==",
      "diff_hunk": "@@ -64,6 +67,48 @@ static bool CheckFilterLookups(BlockFilterIndex& filter_index, const CBlockIndex\n     return true;\n }\n \n+static CBlock CreateBlock(const CBlockIndex* prev,\n+                          const std::vector<CMutableTransaction>& txns,\n+                          const CScript& scriptPubKey)\n+{\n+    const CChainParams& chainparams = Params();\n+    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey);\n+    CBlock& block = pblocktemplate->block;\n+    block.hashPrevBlock = prev->GetBlockHash();\n+    block.nTime = prev->nTime + 1;\n+\n+    // Replace mempool-selected txns with just coinbase plus passed-in txns:\n+    block.vtx.resize(1);\n+    for (const CMutableTransaction& tx : txns)\n+        block.vtx.push_back(MakeTransactionRef(tx));\n+    // IncrementExtraNonce creates a valid coinbase and merkleRoot\n+    unsigned int extraNonce = 0;\n+    IncrementExtraNonce(&block, prev, extraNonce);\n+\n+    while (!CheckProofOfWork(block.GetHash(), block.nBits, chainparams.GetConsensus())) ++block.nNonce;\n+\n+    return block;\n+}\n+\n+static bool BuildChain(const CBlockIndex* pindex, const CScript& coinbase_script_pub_key,\n+                       size_t length, std::vector<std::shared_ptr<CBlock>>& chain)\n+{\n+    std::vector<CMutableTransaction> no_txns;\n+\n+    chain.resize(length);\n+    for (auto& block : chain) {\n+        block = std::make_shared<CBlock>(CreateBlock(pindex, no_txns, coinbase_script_pub_key));\n+        CBlockHeader header = block->GetBlockHeader();\n+\n+        CValidationState state;\n+        if (!ProcessNewBlockHeaders({header}, state, Params(), &pindex, nullptr)) {\n+            return false;\n+        }\n+    }\n+\n+    return true;\n+}",
      "path": "src/test/blockfilter_index_tests.cpp",
      "position": 111,
      "original_position": 55,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "4f7a4a593d200c26ca913552a63e887e0c07758f",
      "in_reply_to_id": 267421501,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'd be happy to add to `test_bitcoin` or `TestingSetup` or something if people think these are useful in the test framework. I'm not really sure. Any opinions @jnewbery?",
      "created_at": "2019-03-22T23:43:05Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r268368647",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/268368647"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 111,
      "original_line": 111,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/268370727",
      "pull_request_review_id": 218013948,
      "id": 268370727,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2ODM3MDcyNw==",
      "diff_hunk": "@@ -64,6 +67,48 @@ static bool CheckFilterLookups(BlockFilterIndex& filter_index, const CBlockIndex\n     return true;\n }\n \n+static CBlock CreateBlock(const CBlockIndex* prev,\n+                          const std::vector<CMutableTransaction>& txns,\n+                          const CScript& scriptPubKey)\n+{\n+    const CChainParams& chainparams = Params();\n+    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey);\n+    CBlock& block = pblocktemplate->block;\n+    block.hashPrevBlock = prev->GetBlockHash();\n+    block.nTime = prev->nTime + 1;\n+\n+    // Replace mempool-selected txns with just coinbase plus passed-in txns:\n+    block.vtx.resize(1);\n+    for (const CMutableTransaction& tx : txns)\n+        block.vtx.push_back(MakeTransactionRef(tx));\n+    // IncrementExtraNonce creates a valid coinbase and merkleRoot\n+    unsigned int extraNonce = 0;\n+    IncrementExtraNonce(&block, prev, extraNonce);\n+\n+    while (!CheckProofOfWork(block.GetHash(), block.nBits, chainparams.GetConsensus())) ++block.nNonce;\n+\n+    return block;\n+}\n+\n+static bool BuildChain(const CBlockIndex* pindex, const CScript& coinbase_script_pub_key,\n+                       size_t length, std::vector<std::shared_ptr<CBlock>>& chain)\n+{\n+    std::vector<CMutableTransaction> no_txns;\n+\n+    chain.resize(length);\n+    for (auto& block : chain) {\n+        block = std::make_shared<CBlock>(CreateBlock(pindex, no_txns, coinbase_script_pub_key));\n+        CBlockHeader header = block->GetBlockHeader();\n+\n+        CValidationState state;\n+        if (!ProcessNewBlockHeaders({header}, state, Params(), &pindex, nullptr)) {\n+            return false;\n+        }\n+    }\n+\n+    return true;\n+}",
      "path": "src/test/blockfilter_index_tests.cpp",
      "position": 111,
      "original_position": 55,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "4f7a4a593d200c26ca913552a63e887e0c07758f",
      "in_reply_to_id": 267421501,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "There are methods in `src/test/validation_block_tests.cpp` and `src/bench/block_assemble.cpp` that do something similar. I think copy-pasting them is fine unless it is more convenient to share code between them.",
      "created_at": "2019-03-23T00:03:28Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r268370727",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/268370727"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 111,
      "original_line": 111,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/268431957",
      "pull_request_review_id": 218080024,
      "id": 268431957,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2ODQzMTk1Nw==",
      "diff_hunk": "@@ -32,7 +32,7 @@ class BaseIndex : public CValidationInterface\n         bool ReadBestBlock(CBlockLocator& locator) const;\n \n         /// Write block locator of the chain that the txindex is in sync with.\n-        bool WriteBestBlock(const CBlockLocator& locator);\n+        void WriteBestBlock(CDBBatch& batch, const CBlockLocator& locator);",
      "path": "src/index/base.h",
      "position": 5,
      "original_position": 5,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "e6c665450648dad8981ec981d6c8c6475e9aa1f8",
      "in_reply_to_id": null,
      "user": {
        "login": "lucayepa",
        "id": 697159,
        "node_id": "MDQ6VXNlcjY5NzE1OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/697159?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lucayepa",
        "html_url": "https://github.com/lucayepa",
        "followers_url": "https://api.github.com/users/lucayepa/followers",
        "following_url": "https://api.github.com/users/lucayepa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/lucayepa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/lucayepa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/lucayepa/subscriptions",
        "organizations_url": "https://api.github.com/users/lucayepa/orgs",
        "repos_url": "https://api.github.com/users/lucayepa/repos",
        "events_url": "https://api.github.com/users/lucayepa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/lucayepa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ultranit, you can change the comment: txindex -> index.",
      "created_at": "2019-03-24T12:41:22Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r268431957",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/268431957"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 35,
      "original_line": 35,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/268822822",
      "pull_request_review_id": 218549960,
      "id": 268822822,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2ODgyMjgyMg==",
      "diff_hunk": "@@ -144,12 +146,35 @@ void BaseIndex::ThreadSync()\n     }\n }\n \n-bool BaseIndex::WriteBestBlock(const CBlockIndex* block_index)\n+bool BaseIndex::Commit()\n+{\n+    CDBBatch batch(GetDB());\n+    if (!Commit(batch) || !GetDB().WriteBatch(batch)) {\n+        return error(\"%s: Failed to commit latest %s state\", __func__, GetName());\n+    }\n+    return true;\n+}\n+\n+bool BaseIndex::Commit(CDBBatch& batch)\n {\n     LOCK(cs_main);\n-    if (!GetDB().WriteBestBlock(chainActive.GetLocator(block_index))) {\n-        return error(\"%s: Failed to write locator to disk\", __func__);\n+    GetDB().WriteBestBlock(batch, chainActive.GetLocator(m_best_block_index));\n+    return true;\n+}\n+\n+bool BaseIndex::Rewind(const CBlockIndex* current_tip, const CBlockIndex* new_tip)",
      "path": "src/index/base.cpp",
      "position": 79,
      "original_position": 67,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "e3845e4a2a27d69a09ac0f8744b23530ad3bbe9e",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"index: Allow atomic commits of index state to be extended.\" (e3845e4a2a27d69a09ac0f8744b23530ad3bbe9e)\r\n\r\nThis commit still doesn't compile because `BaseIndex::Rewind` declaration is not added until the next commit.",
      "created_at": "2019-03-25T19:52:23Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r268822822",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/268822822"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 175,
      "original_line": 175,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/268824956",
      "pull_request_review_id": 218549960,
      "id": 268824956,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2ODgyNDk1Ng==",
      "diff_hunk": "@@ -224,9 +249,7 @@ void BaseIndex::ChainStateFlushed(const CBlockLocator& locator)\n         return;\n     }\n \n-    if (!GetDB().WriteBestBlock(locator)) {\n-        error(\"%s: Failed to write locator to disk\", __func__);\n-    }\n+    Commit();",
      "path": "src/index/base.cpp",
      "position": 117,
      "original_position": 90,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "e3845e4a2a27d69a09ac0f8744b23530ad3bbe9e",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"index: Allow atomic commits of index state to be extended.\" (e3845e4a2a27d69a09ac0f8744b23530ad3bbe9e)\r\n\r\nIt would be good to check for failures on `Commit()` calls in this git commit. Even though the current implementation in this git commit always returns true, it can start to return false when the subclasses is added, and these calls don't appear to be updated later.",
      "created_at": "2019-03-25T19:58:10Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r268824956",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/268824956"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 270,
      "original_line": 270,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/268827726",
      "pull_request_review_id": 218549960,
      "id": 268827726,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2ODgyNzcyNg==",
      "diff_hunk": "@@ -0,0 +1,272 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <map>\n+\n+#include <index/blockfilterindex.h>\n+#include <util/system.h>\n+#include <validation.h>\n+\n+/* The index database stores three items for each block: the disk location of the encoded filter,\n+ * its dSHA256 hash, and the header. Those belonging to blocks on the active chain are indexed by\n+ * height, and those belonging to blocks that have been reorganized out of the active chain are\n+ * indexed by block hash. This ensures that filter data for any block that becomes part of the\n+ * active chain can always be retrieved, alleviating timing concerns.\n+ *\n+ * The filters themselves are stored in flat files and referenced by the LevelDB entries. This\n+ * minimizes the amount of data written to LevelDB and keeps the database values constant size.\n+ *\n+ * Keys for the height index have the type [DB_BLOCK_HEIGHT, uint32 (BE)]. The height is represented\n+ * as big-endian so that sequential reads of filters by height are fast.\n+ * Keys for the hash index have the type [DB_BLOCK_HASH, uint256].\n+ */\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_FILTER_POS = 'P';\n+\n+constexpr unsigned int MAX_FILE_SIZE = 0x1000000; // 16 MiB\n+/** The pre-allocation chunk size for fltr?????.dat files */\n+constexpr unsigned int FILE_CHUNK_SIZE = 0x100000; // 1 MiB\n+\n+namespace {\n+    struct DBVal\n+    {\n+        uint256 hash;\n+        uint256 header;\n+        FlatFilePos pos;\n+\n+        ADD_SERIALIZE_METHODS;\n+\n+        template <typename Stream, typename Operation>\n+        inline void SerializationOp(Stream& s, Operation ser_action) {\n+            READWRITE(hash);\n+            READWRITE(header);\n+            READWRITE(pos);\n+        }\n+    };\n+\n+    struct DBHeightKey\n+    {\n+        int height;\n+\n+        DBHeightKey() : height(0) {}\n+        DBHeightKey(int height_in) : height(height_in) {}\n+\n+        template<typename Stream>\n+        void Serialize(Stream& s) const\n+        {\n+            ser_writedata8(s, DB_BLOCK_HEIGHT);\n+            ser_writedata32be(s, height);\n+        }\n+\n+        template<typename Stream>\n+        void Unserialize(Stream& s)\n+        {\n+            char prefix = ser_readdata8(s);\n+            if (prefix != DB_BLOCK_HEIGHT) {\n+                throw std::ios_base::failure(\"Invalid format for DB key\");\n+            }\n+            height = ser_readdata32be(s);\n+        }\n+    };\n+\n+    struct DBHashKey\n+    {\n+        uint256 hash;\n+\n+        DBHashKey(const uint256& hash_in) : hash(hash_in) {}\n+\n+        ADD_SERIALIZE_METHODS;\n+\n+        template <typename Stream, typename Operation>\n+        inline void SerializationOp(Stream& s, Operation ser_action) {\n+            char prefix = DB_BLOCK_HASH;\n+            READWRITE(prefix);\n+            if (prefix != DB_BLOCK_HASH) {\n+                throw std::ios_base::failure(\"Invalid format for DB key\");\n+            }\n+\n+            READWRITE(hash);\n+        }\n+    };\n+};\n+\n+BlockFilterIndex::BlockFilterIndex(BlockFilterType filter_type,\n+                                   size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_filter_type(filter_type)\n+{\n+    const std::string& filter_name = BlockFilterTypeName(filter_type);\n+    if (filter_name == \"\") throw std::invalid_argument(\"unknown filter_type\");\n+\n+    fs::path path = GetDataDir() / \"indexes\" / \"blockfilter\" / filter_name;\n+    fs::create_directories(path);\n+\n+    m_name = filter_name + \" block filter index\";\n+    m_db = MakeUnique<BaseIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+    m_filter_fileseq = MakeUnique<FlatFileSeq>(std::move(path), \"fltr\", FILE_CHUNK_SIZE);\n+}\n+\n+bool BlockFilterIndex::Init()\n+{\n+    if (!m_db->Read(DB_FILTER_POS, m_next_filter_pos)) {\n+        m_next_filter_pos.nFile = 0;\n+        m_next_filter_pos.nPos = 0;\n+    }\n+    return BaseIndex::Init();\n+}\n+\n+bool BlockFilterIndex::Commit(CDBBatch& batch)\n+{\n+    const FlatFilePos& pos = m_next_filter_pos;\n+\n+    // Flush current filter file to disk.\n+    CAutoFile file(m_filter_fileseq->Open(pos), SER_DISK, CLIENT_VERSION);\n+    if (file.IsNull()) {\n+        return error(\"%s: Failed to open filter file %d\", __func__, pos.nFile);\n+    }\n+    if (!FileCommit(file.Get())) {\n+        return error(\"%s: Failed to commit filter file %d\", __func__, pos.nFile);\n+    }\n+\n+    batch.Write(DB_FILTER_POS, pos);\n+    return BaseIndex::Commit(batch);\n+}\n+\n+size_t BlockFilterIndex::WriteFilterToDisk(FlatFilePos& pos, const BlockFilter& filter)\n+{\n+    assert(filter.GetFilterType() == GetFilterType());\n+\n+    size_t data_size =\n+        GetSerializeSize(filter.GetBlockHash(), CLIENT_VERSION) +\n+        GetSerializeSize(filter.GetEncodedFilter(), CLIENT_VERSION);\n+\n+    // If writing the filter would overflow the file, flush and move to the next one.\n+    if (pos.nPos + data_size > MAX_FILE_SIZE) {\n+        CAutoFile last_file(m_filter_fileseq->Open(pos), SER_DISK, CLIENT_VERSION);\n+        if (last_file.IsNull()) {\n+            LogPrintf(\"%s: Failed to open filter file %d\\n\", __func__, pos.nFile);\n+            return 0;\n+        }\n+        if (!TruncateFile(last_file.Get(), pos.nPos)) {\n+            LogPrintf(\"%s: Failed to truncate filter file %d\\n\", __func__, pos.nFile);\n+            return 0;\n+        }\n+        if (!FileCommit(last_file.Get())) {\n+            LogPrintf(\"%s: Failed to commit filter file %d\\n\", __func__, pos.nFile);\n+            return 0;\n+        }\n+\n+        pos.nFile++;\n+        pos.nPos = 0;\n+    }\n+\n+    // Pre-allocate sufficient space for filter data.\n+    bool out_of_space;\n+    m_filter_fileseq->Allocate(pos, data_size, out_of_space);\n+    if (out_of_space) {\n+        LogPrintf(\"%s: out of disk space\\n\", __func__);\n+        return 0;\n+    }\n+\n+    CAutoFile fileout(m_filter_fileseq->Open(pos), SER_DISK, CLIENT_VERSION);\n+    if (fileout.IsNull()) {\n+        LogPrintf(\"%s: Failed to open filter file %d\\n\", __func__, pos.nFile);\n+        return 0;\n+    }\n+\n+    fileout << filter.GetBlockHash() << filter.GetEncodedFilter();\n+    return data_size;\n+}\n+\n+bool BlockFilterIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+    uint256 prev_header;\n+\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        prev_header = read_out.second.header;\n+    }\n+\n+    BlockFilter filter(m_filter_type, block, block_undo);\n+\n+    size_t bytes_written = WriteFilterToDisk(m_next_filter_pos, filter);\n+    if (bytes_written == 0) return false;\n+\n+    std::pair<uint256, DBVal> value;\n+    value.first = pindex->GetBlockHash();\n+    value.second.hash = filter.GetHash();\n+    value.second.header = filter.ComputeHeader(prev_header);\n+    value.second.pos = m_next_filter_pos;\n+\n+    if (!m_db->Write(DBHeightKey(pindex->nHeight), value)) {\n+        return false;\n+    }\n+\n+    m_next_filter_pos += bytes_written;",
      "path": "src/index/blockfilterindex.cpp",
      "position": null,
      "original_position": 221,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "5964d2f97a221b898dbc477ca8f06ddfbe1d241e",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"index: Implement block filter index with write operations.\" (5964d2f97a221b898dbc477ca8f06ddfbe1d241e)\r\n\r\nThis commit fails to compile with\r\n\r\n```\r\nindex/blockfilterindex.cpp:221:23: error: no viable overloaded '+='\r\n    m_next_filter_pos += bytes_written;\r\n```\r\n",
      "created_at": "2019-03-25T20:05:36Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r268827726",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/268827726"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 221,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/268829521",
      "pull_request_review_id": 218549960,
      "id": 268829521,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2ODgyOTUyMQ==",
      "diff_hunk": "@@ -0,0 +1,272 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <map>\n+\n+#include <index/blockfilterindex.h>\n+#include <util/system.h>\n+#include <validation.h>\n+\n+/* The index database stores three items for each block: the disk location of the encoded filter,\n+ * its dSHA256 hash, and the header. Those belonging to blocks on the active chain are indexed by\n+ * height, and those belonging to blocks that have been reorganized out of the active chain are\n+ * indexed by block hash. This ensures that filter data for any block that becomes part of the\n+ * active chain can always be retrieved, alleviating timing concerns.\n+ *\n+ * The filters themselves are stored in flat files and referenced by the LevelDB entries. This\n+ * minimizes the amount of data written to LevelDB and keeps the database values constant size.\n+ *\n+ * Keys for the height index have the type [DB_BLOCK_HEIGHT, uint32 (BE)]. The height is represented\n+ * as big-endian so that sequential reads of filters by height are fast.\n+ * Keys for the hash index have the type [DB_BLOCK_HASH, uint256].\n+ */\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_FILTER_POS = 'P';",
      "path": "src/index/blockfilterindex.cpp",
      "position": 29,
      "original_position": 26,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "5964d2f97a221b898dbc477ca8f06ddfbe1d241e",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"index: Implement block filter index with write operations.\" (5964d2f97a221b898dbc477ca8f06ddfbe1d241e)\r\n\r\nCan you mention the DB_FILTER_POS key in the comment above? I also think DB_NEXT_FILTER_POS would be a slightly more descriptive and consistent name.",
      "created_at": "2019-03-25T20:10:32Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r268829521",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/268829521"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 29,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/268831097",
      "pull_request_review_id": 218549960,
      "id": 268831097,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2ODgzMTA5Nw==",
      "diff_hunk": "@@ -0,0 +1,272 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <map>\n+\n+#include <index/blockfilterindex.h>\n+#include <util/system.h>\n+#include <validation.h>\n+\n+/* The index database stores three items for each block: the disk location of the encoded filter,\n+ * its dSHA256 hash, and the header. Those belonging to blocks on the active chain are indexed by\n+ * height, and those belonging to blocks that have been reorganized out of the active chain are\n+ * indexed by block hash. This ensures that filter data for any block that becomes part of the\n+ * active chain can always be retrieved, alleviating timing concerns.\n+ *\n+ * The filters themselves are stored in flat files and referenced by the LevelDB entries. This\n+ * minimizes the amount of data written to LevelDB and keeps the database values constant size.\n+ *\n+ * Keys for the height index have the type [DB_BLOCK_HEIGHT, uint32 (BE)]. The height is represented\n+ * as big-endian so that sequential reads of filters by height are fast.\n+ * Keys for the hash index have the type [DB_BLOCK_HASH, uint256].\n+ */\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_FILTER_POS = 'P';\n+\n+constexpr unsigned int MAX_FILE_SIZE = 0x1000000; // 16 MiB",
      "path": "src/index/blockfilterindex.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "5964d2f97a221b898dbc477ca8f06ddfbe1d241e",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"index: Implement block filter index with write operations.\" (5964d2f97a221b898dbc477ca8f06ddfbe1d241e)\r\n\r\nComment saying this limit is for filter files would be nice. Or using less ambiguous names (MAX_FILT_FILE_SIZE, FILT_FILE_CHUNK_SIZE)",
      "created_at": "2019-03-25T20:14:53Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r268831097",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/268831097"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/268831802",
      "pull_request_review_id": 218549960,
      "id": 268831802,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2ODgzMTgwMg==",
      "diff_hunk": "@@ -0,0 +1,272 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <map>\n+\n+#include <index/blockfilterindex.h>\n+#include <util/system.h>\n+#include <validation.h>\n+\n+/* The index database stores three items for each block: the disk location of the encoded filter,\n+ * its dSHA256 hash, and the header. Those belonging to blocks on the active chain are indexed by\n+ * height, and those belonging to blocks that have been reorganized out of the active chain are\n+ * indexed by block hash. This ensures that filter data for any block that becomes part of the\n+ * active chain can always be retrieved, alleviating timing concerns.\n+ *\n+ * The filters themselves are stored in flat files and referenced by the LevelDB entries. This\n+ * minimizes the amount of data written to LevelDB and keeps the database values constant size.\n+ *\n+ * Keys for the height index have the type [DB_BLOCK_HEIGHT, uint32 (BE)]. The height is represented\n+ * as big-endian so that sequential reads of filters by height are fast.\n+ * Keys for the hash index have the type [DB_BLOCK_HASH, uint256].\n+ */\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_FILTER_POS = 'P';\n+\n+constexpr unsigned int MAX_FILE_SIZE = 0x1000000; // 16 MiB\n+/** The pre-allocation chunk size for fltr?????.dat files */",
      "path": "src/index/blockfilterindex.cpp",
      "position": 32,
      "original_position": 29,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "5964d2f97a221b898dbc477ca8f06ddfbe1d241e",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"index: Implement block filter index with write operations.\" (5964d2f97a221b898dbc477ca8f06ddfbe1d241e)\r\n\r\nObviously bikeshedding here but \"filt\" seems like a more obvious abbreviation for filter than \"fltr\".",
      "created_at": "2019-03-25T20:16:49Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r268831802",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/268831802"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 32,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/268832554",
      "pull_request_review_id": 218549960,
      "id": 268832554,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2ODgzMjU1NA==",
      "diff_hunk": "@@ -0,0 +1,272 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <map>\n+\n+#include <index/blockfilterindex.h>\n+#include <util/system.h>\n+#include <validation.h>\n+\n+/* The index database stores three items for each block: the disk location of the encoded filter,\n+ * its dSHA256 hash, and the header. Those belonging to blocks on the active chain are indexed by\n+ * height, and those belonging to blocks that have been reorganized out of the active chain are\n+ * indexed by block hash. This ensures that filter data for any block that becomes part of the\n+ * active chain can always be retrieved, alleviating timing concerns.\n+ *\n+ * The filters themselves are stored in flat files and referenced by the LevelDB entries. This\n+ * minimizes the amount of data written to LevelDB and keeps the database values constant size.\n+ *\n+ * Keys for the height index have the type [DB_BLOCK_HEIGHT, uint32 (BE)]. The height is represented\n+ * as big-endian so that sequential reads of filters by height are fast.\n+ * Keys for the hash index have the type [DB_BLOCK_HASH, uint256].\n+ */\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_FILTER_POS = 'P';\n+\n+constexpr unsigned int MAX_FILE_SIZE = 0x1000000; // 16 MiB\n+/** The pre-allocation chunk size for fltr?????.dat files */\n+constexpr unsigned int FILE_CHUNK_SIZE = 0x100000; // 1 MiB\n+\n+namespace {\n+    struct DBVal",
      "path": "src/index/blockfilterindex.cpp",
      "position": null,
      "original_position": 33,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "5964d2f97a221b898dbc477ca8f06ddfbe1d241e",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"index: Implement block filter index with write operations.\" (5964d2f97a221b898dbc477ca8f06ddfbe1d241e)\r\n\r\nSuggest running clang-format. Our style guide and clang-format-config don't indent namespaces or put struct opening braces on new lines, iirc.",
      "created_at": "2019-03-25T20:18:47Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r268832554",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/268832554"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/268836756",
      "pull_request_review_id": 218549960,
      "id": 268836756,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2ODgzNjc1Ng==",
      "diff_hunk": "@@ -0,0 +1,272 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <map>\n+\n+#include <index/blockfilterindex.h>\n+#include <util/system.h>\n+#include <validation.h>\n+\n+/* The index database stores three items for each block: the disk location of the encoded filter,\n+ * its dSHA256 hash, and the header. Those belonging to blocks on the active chain are indexed by\n+ * height, and those belonging to blocks that have been reorganized out of the active chain are\n+ * indexed by block hash. This ensures that filter data for any block that becomes part of the\n+ * active chain can always be retrieved, alleviating timing concerns.\n+ *\n+ * The filters themselves are stored in flat files and referenced by the LevelDB entries. This\n+ * minimizes the amount of data written to LevelDB and keeps the database values constant size.\n+ *\n+ * Keys for the height index have the type [DB_BLOCK_HEIGHT, uint32 (BE)]. The height is represented\n+ * as big-endian so that sequential reads of filters by height are fast.\n+ * Keys for the hash index have the type [DB_BLOCK_HASH, uint256].\n+ */\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_FILTER_POS = 'P';\n+\n+constexpr unsigned int MAX_FILE_SIZE = 0x1000000; // 16 MiB\n+/** The pre-allocation chunk size for fltr?????.dat files */\n+constexpr unsigned int FILE_CHUNK_SIZE = 0x100000; // 1 MiB\n+\n+namespace {\n+    struct DBVal\n+    {\n+        uint256 hash;\n+        uint256 header;\n+        FlatFilePos pos;\n+\n+        ADD_SERIALIZE_METHODS;\n+\n+        template <typename Stream, typename Operation>\n+        inline void SerializationOp(Stream& s, Operation ser_action) {\n+            READWRITE(hash);\n+            READWRITE(header);\n+            READWRITE(pos);\n+        }\n+    };\n+\n+    struct DBHeightKey\n+    {\n+        int height;\n+\n+        DBHeightKey() : height(0) {}\n+        DBHeightKey(int height_in) : height(height_in) {}\n+\n+        template<typename Stream>\n+        void Serialize(Stream& s) const\n+        {\n+            ser_writedata8(s, DB_BLOCK_HEIGHT);\n+            ser_writedata32be(s, height);\n+        }\n+\n+        template<typename Stream>\n+        void Unserialize(Stream& s)\n+        {\n+            char prefix = ser_readdata8(s);\n+            if (prefix != DB_BLOCK_HEIGHT) {\n+                throw std::ios_base::failure(\"Invalid format for DB key\");",
      "path": "src/index/blockfilterindex.cpp",
      "position": null,
      "original_position": 68,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "5964d2f97a221b898dbc477ca8f06ddfbe1d241e",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"index: Implement block filter index with write operations.\" (5964d2f97a221b898dbc477ca8f06ddfbe1d241e)\r\n\r\nMaybe use less generic error messages here and below like \"Invalid format for block filter index DBHeightKey\"",
      "created_at": "2019-03-25T20:29:31Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r268836756",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/268836756"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/268837245",
      "pull_request_review_id": 218549960,
      "id": 268837245,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2ODgzNzI0NQ==",
      "diff_hunk": "@@ -0,0 +1,272 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <map>\n+\n+#include <index/blockfilterindex.h>\n+#include <util/system.h>\n+#include <validation.h>\n+\n+/* The index database stores three items for each block: the disk location of the encoded filter,\n+ * its dSHA256 hash, and the header. Those belonging to blocks on the active chain are indexed by\n+ * height, and those belonging to blocks that have been reorganized out of the active chain are\n+ * indexed by block hash. This ensures that filter data for any block that becomes part of the\n+ * active chain can always be retrieved, alleviating timing concerns.\n+ *\n+ * The filters themselves are stored in flat files and referenced by the LevelDB entries. This\n+ * minimizes the amount of data written to LevelDB and keeps the database values constant size.\n+ *\n+ * Keys for the height index have the type [DB_BLOCK_HEIGHT, uint32 (BE)]. The height is represented\n+ * as big-endian so that sequential reads of filters by height are fast.\n+ * Keys for the hash index have the type [DB_BLOCK_HASH, uint256].\n+ */\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_FILTER_POS = 'P';\n+\n+constexpr unsigned int MAX_FILE_SIZE = 0x1000000; // 16 MiB\n+/** The pre-allocation chunk size for fltr?????.dat files */\n+constexpr unsigned int FILE_CHUNK_SIZE = 0x100000; // 1 MiB\n+\n+namespace {\n+    struct DBVal\n+    {\n+        uint256 hash;\n+        uint256 header;\n+        FlatFilePos pos;\n+\n+        ADD_SERIALIZE_METHODS;\n+\n+        template <typename Stream, typename Operation>\n+        inline void SerializationOp(Stream& s, Operation ser_action) {\n+            READWRITE(hash);\n+            READWRITE(header);\n+            READWRITE(pos);\n+        }\n+    };\n+\n+    struct DBHeightKey\n+    {\n+        int height;\n+\n+        DBHeightKey() : height(0) {}\n+        DBHeightKey(int height_in) : height(height_in) {}\n+\n+        template<typename Stream>\n+        void Serialize(Stream& s) const\n+        {\n+            ser_writedata8(s, DB_BLOCK_HEIGHT);\n+            ser_writedata32be(s, height);\n+        }\n+\n+        template<typename Stream>\n+        void Unserialize(Stream& s)\n+        {\n+            char prefix = ser_readdata8(s);\n+            if (prefix != DB_BLOCK_HEIGHT) {\n+                throw std::ios_base::failure(\"Invalid format for DB key\");\n+            }\n+            height = ser_readdata32be(s);\n+        }\n+    };\n+\n+    struct DBHashKey\n+    {\n+        uint256 hash;\n+\n+        DBHashKey(const uint256& hash_in) : hash(hash_in) {}\n+\n+        ADD_SERIALIZE_METHODS;\n+\n+        template <typename Stream, typename Operation>\n+        inline void SerializationOp(Stream& s, Operation ser_action) {\n+            char prefix = DB_BLOCK_HASH;\n+            READWRITE(prefix);\n+            if (prefix != DB_BLOCK_HASH) {\n+                throw std::ios_base::failure(\"Invalid format for DB key\");\n+            }\n+\n+            READWRITE(hash);\n+        }\n+    };\n+};\n+\n+BlockFilterIndex::BlockFilterIndex(BlockFilterType filter_type,\n+                                   size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_filter_type(filter_type)\n+{\n+    const std::string& filter_name = BlockFilterTypeName(filter_type);\n+    if (filter_name == \"\") throw std::invalid_argument(\"unknown filter_type\");",
      "path": "src/index/blockfilterindex.cpp",
      "position": null,
      "original_position": 100,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "5964d2f97a221b898dbc477ca8f06ddfbe1d241e",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"index: Implement block filter index with write operations.\" (5964d2f97a221b898dbc477ca8f06ddfbe1d241e)\r\n\r\n`if (filter_name.empty())` would be a little more idiomatic c++",
      "created_at": "2019-03-25T20:30:35Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r268837245",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/268837245"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 100,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/268841030",
      "pull_request_review_id": 218549960,
      "id": 268841030,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2ODg0MTAzMA==",
      "diff_hunk": "@@ -0,0 +1,272 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <map>\n+\n+#include <index/blockfilterindex.h>\n+#include <util/system.h>\n+#include <validation.h>\n+\n+/* The index database stores three items for each block: the disk location of the encoded filter,\n+ * its dSHA256 hash, and the header. Those belonging to blocks on the active chain are indexed by\n+ * height, and those belonging to blocks that have been reorganized out of the active chain are\n+ * indexed by block hash. This ensures that filter data for any block that becomes part of the\n+ * active chain can always be retrieved, alleviating timing concerns.\n+ *\n+ * The filters themselves are stored in flat files and referenced by the LevelDB entries. This\n+ * minimizes the amount of data written to LevelDB and keeps the database values constant size.\n+ *\n+ * Keys for the height index have the type [DB_BLOCK_HEIGHT, uint32 (BE)]. The height is represented\n+ * as big-endian so that sequential reads of filters by height are fast.\n+ * Keys for the hash index have the type [DB_BLOCK_HASH, uint256].\n+ */\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_FILTER_POS = 'P';\n+\n+constexpr unsigned int MAX_FILE_SIZE = 0x1000000; // 16 MiB\n+/** The pre-allocation chunk size for fltr?????.dat files */\n+constexpr unsigned int FILE_CHUNK_SIZE = 0x100000; // 1 MiB\n+\n+namespace {\n+    struct DBVal\n+    {\n+        uint256 hash;\n+        uint256 header;\n+        FlatFilePos pos;\n+\n+        ADD_SERIALIZE_METHODS;\n+\n+        template <typename Stream, typename Operation>\n+        inline void SerializationOp(Stream& s, Operation ser_action) {\n+            READWRITE(hash);\n+            READWRITE(header);\n+            READWRITE(pos);\n+        }\n+    };\n+\n+    struct DBHeightKey\n+    {\n+        int height;\n+\n+        DBHeightKey() : height(0) {}\n+        DBHeightKey(int height_in) : height(height_in) {}\n+\n+        template<typename Stream>\n+        void Serialize(Stream& s) const\n+        {\n+            ser_writedata8(s, DB_BLOCK_HEIGHT);\n+            ser_writedata32be(s, height);\n+        }\n+\n+        template<typename Stream>\n+        void Unserialize(Stream& s)\n+        {\n+            char prefix = ser_readdata8(s);\n+            if (prefix != DB_BLOCK_HEIGHT) {\n+                throw std::ios_base::failure(\"Invalid format for DB key\");\n+            }\n+            height = ser_readdata32be(s);\n+        }\n+    };\n+\n+    struct DBHashKey\n+    {\n+        uint256 hash;\n+\n+        DBHashKey(const uint256& hash_in) : hash(hash_in) {}\n+\n+        ADD_SERIALIZE_METHODS;\n+\n+        template <typename Stream, typename Operation>\n+        inline void SerializationOp(Stream& s, Operation ser_action) {\n+            char prefix = DB_BLOCK_HASH;\n+            READWRITE(prefix);\n+            if (prefix != DB_BLOCK_HASH) {\n+                throw std::ios_base::failure(\"Invalid format for DB key\");\n+            }\n+\n+            READWRITE(hash);\n+        }\n+    };\n+};\n+\n+BlockFilterIndex::BlockFilterIndex(BlockFilterType filter_type,\n+                                   size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_filter_type(filter_type)\n+{\n+    const std::string& filter_name = BlockFilterTypeName(filter_type);\n+    if (filter_name == \"\") throw std::invalid_argument(\"unknown filter_type\");\n+\n+    fs::path path = GetDataDir() / \"indexes\" / \"blockfilter\" / filter_name;\n+    fs::create_directories(path);\n+\n+    m_name = filter_name + \" block filter index\";\n+    m_db = MakeUnique<BaseIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+    m_filter_fileseq = MakeUnique<FlatFileSeq>(std::move(path), \"fltr\", FILE_CHUNK_SIZE);\n+}\n+\n+bool BlockFilterIndex::Init()\n+{\n+    if (!m_db->Read(DB_FILTER_POS, m_next_filter_pos)) {",
      "path": "src/index/blockfilterindex.cpp",
      "position": 116,
      "original_position": 112,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "5964d2f97a221b898dbc477ca8f06ddfbe1d241e",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"index: Implement block filter index with write operations.\" (5964d2f97a221b898dbc477ca8f06ddfbe1d241e)\r\n\r\nIs it possible to distinguish between entry not existing here and failure to deserialize? Might be a little nicer to be able to return an error if there's something weird here, instead of resetting the next write to position 0.",
      "created_at": "2019-03-25T20:39:57Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r268841030",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/268841030"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 116,
      "original_line": 116,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/268853704",
      "pull_request_review_id": 218549960,
      "id": 268853704,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2ODg1MzcwNA==",
      "diff_hunk": "@@ -0,0 +1,272 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <map>\n+\n+#include <index/blockfilterindex.h>\n+#include <util/system.h>\n+#include <validation.h>\n+\n+/* The index database stores three items for each block: the disk location of the encoded filter,\n+ * its dSHA256 hash, and the header. Those belonging to blocks on the active chain are indexed by\n+ * height, and those belonging to blocks that have been reorganized out of the active chain are\n+ * indexed by block hash. This ensures that filter data for any block that becomes part of the",
      "path": "src/index/blockfilterindex.cpp",
      "position": 15,
      "original_position": 14,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "5964d2f97a221b898dbc477ca8f06ddfbe1d241e",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"index: Implement block filter index with write operations.\" (5964d2f97a221b898dbc477ca8f06ddfbe1d241e)\r\n\r\nIt'd be good to mention that values and not just the keys are different in these two cases (height keys appear to have values prefixed by the block hash).",
      "created_at": "2019-03-25T21:13:12Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r268853704",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/268853704"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 15,
      "original_line": 15,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/269303765",
      "pull_request_review_id": 219145915,
      "id": 269303765,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2OTMwMzc2NQ==",
      "diff_hunk": "@@ -54,8 +54,8 @@ class BaseIndex : public CValidationInterface\n     /// over and the sync thread exits.\n     void ThreadSync();\n \n-    /// Write the current chain block locator to the DB.\n-    bool WriteBestBlock(const CBlockIndex* block_index);\n+    /// Write the current chain block locator and other index state to the DB.\n+    bool Commit();",
      "path": "src/index/base.h",
      "position": 23,
      "original_position": 16,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "e3845e4a2a27d69a09ac0f8744b23530ad3bbe9e",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"index: Allow atomic commits of index state to be extended.\" (e3845e4a2a27d69a09ac0f8744b23530ad3bbe9e):\r\n\r\nGiving the private method the same name as the protected method inherited by subclasses makes the code harder to follow. Would suggest calling this InternalCommit() or something like that.",
      "created_at": "2019-03-26T20:35:40Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r269303765",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/269303765"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 65,
      "original_line": 65,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/269309762",
      "pull_request_review_id": 219145915,
      "id": 269309762,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2OTMwOTc2Mg==",
      "diff_hunk": "@@ -54,8 +54,8 @@ class BaseIndex : public CValidationInterface\n     /// over and the sync thread exits.\n     void ThreadSync();\n \n-    /// Write the current chain block locator to the DB.\n-    bool WriteBestBlock(const CBlockIndex* block_index);\n+    /// Write the current chain block locator and other index state to the DB.",
      "path": "src/index/base.h",
      "position": null,
      "original_position": 15,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "e3845e4a2a27d69a09ac0f8744b23530ad3bbe9e",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"index: Allow atomic commits of index state to be extended.\" (e3845e4a2a27d69a09ac0f8744b23530ad3bbe9e)\r\n\r\nIt isn't clear from this comment when this is called or what \"other index state\" might be referring to. Maybe expand comment to something like: \"Write the current chain block locator and other index state from subclasses to the DB. This is called after blocks are added or rewound.\"\r\n\r\n",
      "created_at": "2019-03-26T20:50:57Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r269309762",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/269309762"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 57,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/270152421",
      "pull_request_review_id": 219145915,
      "id": 270152421,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MDE1MjQyMQ==",
      "diff_hunk": "@@ -224,9 +249,7 @@ void BaseIndex::ChainStateFlushed(const CBlockLocator& locator)\n         return;\n     }\n \n-    if (!GetDB().WriteBestBlock(locator)) {\n-        error(\"%s: Failed to write locator to disk\", __func__);\n-    }\n+    Commit();",
      "path": "src/index/base.cpp",
      "position": 117,
      "original_position": 90,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "e3845e4a2a27d69a09ac0f8744b23530ad3bbe9e",
      "in_reply_to_id": 268824956,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"index: Allow atomic commits of index state to be extended.\" (e3845e4a2a27d69a09ac0f8744b23530ad3bbe9e)\r\n\r\nWould be good to add NODISCARD to all methods that return errors on failure. Even in cases where you don't want to handle or log the errors, it's clarifying if invoking code shows that errors are being ignored, and maybe has comments saying why the errors are expected or ok to ignore.",
      "created_at": "2019-03-28T18:52:42Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r270152421",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/270152421"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 270,
      "original_line": 270,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/270159230",
      "pull_request_review_id": 219145915,
      "id": 270159230,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MDE1OTIzMA==",
      "diff_hunk": "@@ -69,6 +69,10 @@ class BaseIndex : public CValidationInterface\n     /// Write update index entries for a newly connected block.\n     virtual bool WriteBlock(const CBlock& block, const CBlockIndex* pindex) { return true; }\n \n+    /// Virtual method called internally that can be overridden to atomically\n+    /// commit more index state.\n+    virtual bool Commit(CDBBatch& batch);",
      "path": "src/index/base.h",
      "position": null,
      "original_position": 26,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "e3845e4a2a27d69a09ac0f8744b23530ad3bbe9e",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"index: Allow atomic commits of index state to be extended.\" (e3845e4a2a27d69a09ac0f8744b23530ad3bbe9e)\r\n\r\nComment should mention how this relates to WriteBlock (and Rewind), that it's called after one or more WriteBlock/Rewind calls in order to flush state to disk and store extra data. Comment should also mention that subclasses that override this must include a call to the overridden method (or the index position won't be updated).\r\n\r\nIt's also not clear what's supposed to happen if this returns false. Maybe a comment could clarify. It seems like the only thing that happens is that the batch update is not written, and the next block position is not saved, but the sync still continues? I don't understand when this behavior would be useful, and why it wouldn't be better to abort syncing the index in this case. Maybe the behavior is ok, but comment should at least mention what return value is expected from the overridden method and what effect it will have.",
      "created_at": "2019-03-28T19:11:08Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r270159230",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/270159230"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/270162675",
      "pull_request_review_id": 219145915,
      "id": 270162675,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MDE2MjY3NQ==",
      "diff_hunk": "@@ -95,17 +95,18 @@ void BaseIndex::ThreadSync()\n         int64_t last_locator_write_time = 0;\n         while (true) {\n             if (m_interrupt) {\n-                WriteBestBlock(pindex);\n+                m_best_block_index = pindex;",
      "path": "src/index/base.cpp",
      "position": 17,
      "original_position": 17,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "e3845e4a2a27d69a09ac0f8744b23530ad3bbe9e",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"index: Allow atomic commits of index state to be extended.\" (e3845e4a2a27d69a09ac0f8744b23530ad3bbe9e)\r\n\r\nIt seems good to set `m_best_block_index` here, but I don't understand why it wasn't being set before. Is this a bugfix?",
      "created_at": "2019-03-28T19:21:20Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r270162675",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/270162675"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 98,
      "original_line": 98,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/270168395",
      "pull_request_review_id": 219145915,
      "id": 270168395,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MDE2ODM5NQ==",
      "diff_hunk": "@@ -18,7 +18,7 @@ static constexpr int GCS_SER_TYPE = SER_NETWORK;\n static constexpr int GCS_SER_VERSION = 0;\n \n static const std::map<BlockFilterType, std::string> g_filter_types = {\n-    {BASIC, \"basic\"},\n+    {BlockFilterType::BASIC, \"basic\"},",
      "path": "src/blockfilter.cpp",
      "position": 15,
      "original_position": 5,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "634693641d73f3bc70ba2c508bd4cb15d69e87b6",
      "in_reply_to_id": 267519622,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/14121#discussion_r267519622\r\n\r\nIn commit \"blockfilter: Functions to translate filter types to/from names.\" (a0bd77e2ad5bdbaeca529a38335b6a6c2f3fd5d9)\r\n\r\nPrevious github comment can be marked resolved.",
      "created_at": "2019-03-28T19:37:58Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r270168395",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/270168395"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 22,
      "original_line": 22,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/270168972",
      "pull_request_review_id": 219145915,
      "id": 270168972,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MDE2ODk3Mg==",
      "diff_hunk": "@@ -197,6 +201,23 @@ bool GCSFilter::MatchAny(const ElementSet& elements) const\n     return MatchInternal(queries.data(), queries.size());\n }\n \n+const std::string& BlockFilterTypeName(BlockFilterType filter_type)\n+{\n+    static std::string unknown_retval = \"\";\n+    auto it = g_filter_types.find(filter_type);\n+    return it != g_filter_types.end() ? it->second : unknown_retval;\n+}\n+\n+bool BlockFilterTypeByName(const std::string& name, BlockFilterType& filter_type) {\n+    for (auto entry : g_filter_types) {",
      "path": "src/blockfilter.cpp",
      "position": null,
      "original_position": 23,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "a0bd77e2ad5bdbaeca529a38335b6a6c2f3fd5d9",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"blockfilter: Functions to translate filter types to/from names.\" (a0bd77e2ad5bdbaeca529a38335b6a6c2f3fd5d9)\r\n\r\n`const auto&` to prevent string copies and allocs",
      "created_at": "2019-03-28T19:39:34Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r270168972",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/270168972"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 212,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/270172763",
      "pull_request_review_id": 219145915,
      "id": 270172763,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MDE3Mjc2Mw==",
      "diff_hunk": "@@ -0,0 +1,272 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <map>\n+\n+#include <index/blockfilterindex.h>\n+#include <util/system.h>\n+#include <validation.h>\n+\n+/* The index database stores three items for each block: the disk location of the encoded filter,\n+ * its dSHA256 hash, and the header. Those belonging to blocks on the active chain are indexed by\n+ * height, and those belonging to blocks that have been reorganized out of the active chain are\n+ * indexed by block hash. This ensures that filter data for any block that becomes part of the\n+ * active chain can always be retrieved, alleviating timing concerns.\n+ *\n+ * The filters themselves are stored in flat files and referenced by the LevelDB entries. This\n+ * minimizes the amount of data written to LevelDB and keeps the database values constant size.\n+ *\n+ * Keys for the height index have the type [DB_BLOCK_HEIGHT, uint32 (BE)]. The height is represented\n+ * as big-endian so that sequential reads of filters by height are fast.\n+ * Keys for the hash index have the type [DB_BLOCK_HASH, uint256].\n+ */\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_FILTER_POS = 'P';\n+\n+constexpr unsigned int MAX_FILE_SIZE = 0x1000000; // 16 MiB\n+/** The pre-allocation chunk size for fltr?????.dat files */\n+constexpr unsigned int FILE_CHUNK_SIZE = 0x100000; // 1 MiB\n+\n+namespace {\n+    struct DBVal\n+    {\n+        uint256 hash;\n+        uint256 header;\n+        FlatFilePos pos;\n+\n+        ADD_SERIALIZE_METHODS;\n+\n+        template <typename Stream, typename Operation>\n+        inline void SerializationOp(Stream& s, Operation ser_action) {\n+            READWRITE(hash);\n+            READWRITE(header);\n+            READWRITE(pos);\n+        }\n+    };\n+\n+    struct DBHeightKey\n+    {\n+        int height;\n+\n+        DBHeightKey() : height(0) {}\n+        DBHeightKey(int height_in) : height(height_in) {}\n+\n+        template<typename Stream>\n+        void Serialize(Stream& s) const\n+        {\n+            ser_writedata8(s, DB_BLOCK_HEIGHT);\n+            ser_writedata32be(s, height);\n+        }\n+\n+        template<typename Stream>\n+        void Unserialize(Stream& s)\n+        {\n+            char prefix = ser_readdata8(s);\n+            if (prefix != DB_BLOCK_HEIGHT) {\n+                throw std::ios_base::failure(\"Invalid format for DB key\");\n+            }\n+            height = ser_readdata32be(s);\n+        }\n+    };\n+\n+    struct DBHashKey\n+    {\n+        uint256 hash;\n+\n+        DBHashKey(const uint256& hash_in) : hash(hash_in) {}\n+\n+        ADD_SERIALIZE_METHODS;\n+\n+        template <typename Stream, typename Operation>\n+        inline void SerializationOp(Stream& s, Operation ser_action) {\n+            char prefix = DB_BLOCK_HASH;\n+            READWRITE(prefix);\n+            if (prefix != DB_BLOCK_HASH) {\n+                throw std::ios_base::failure(\"Invalid format for DB key\");\n+            }\n+\n+            READWRITE(hash);\n+        }\n+    };\n+};\n+\n+BlockFilterIndex::BlockFilterIndex(BlockFilterType filter_type,\n+                                   size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_filter_type(filter_type)\n+{\n+    const std::string& filter_name = BlockFilterTypeName(filter_type);\n+    if (filter_name == \"\") throw std::invalid_argument(\"unknown filter_type\");\n+\n+    fs::path path = GetDataDir() / \"indexes\" / \"blockfilter\" / filter_name;\n+    fs::create_directories(path);\n+\n+    m_name = filter_name + \" block filter index\";\n+    m_db = MakeUnique<BaseIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+    m_filter_fileseq = MakeUnique<FlatFileSeq>(std::move(path), \"fltr\", FILE_CHUNK_SIZE);\n+}\n+\n+bool BlockFilterIndex::Init()\n+{\n+    if (!m_db->Read(DB_FILTER_POS, m_next_filter_pos)) {\n+        m_next_filter_pos.nFile = 0;\n+        m_next_filter_pos.nPos = 0;\n+    }\n+    return BaseIndex::Init();\n+}\n+\n+bool BlockFilterIndex::Commit(CDBBatch& batch)\n+{\n+    const FlatFilePos& pos = m_next_filter_pos;\n+\n+    // Flush current filter file to disk.\n+    CAutoFile file(m_filter_fileseq->Open(pos), SER_DISK, CLIENT_VERSION);\n+    if (file.IsNull()) {\n+        return error(\"%s: Failed to open filter file %d\", __func__, pos.nFile);\n+    }\n+    if (!FileCommit(file.Get())) {\n+        return error(\"%s: Failed to commit filter file %d\", __func__, pos.nFile);\n+    }\n+\n+    batch.Write(DB_FILTER_POS, pos);\n+    return BaseIndex::Commit(batch);\n+}\n+\n+size_t BlockFilterIndex::WriteFilterToDisk(FlatFilePos& pos, const BlockFilter& filter)\n+{\n+    assert(filter.GetFilterType() == GetFilterType());\n+\n+    size_t data_size =\n+        GetSerializeSize(filter.GetBlockHash(), CLIENT_VERSION) +\n+        GetSerializeSize(filter.GetEncodedFilter(), CLIENT_VERSION);\n+\n+    // If writing the filter would overflow the file, flush and move to the next one.\n+    if (pos.nPos + data_size > MAX_FILE_SIZE) {\n+        CAutoFile last_file(m_filter_fileseq->Open(pos), SER_DISK, CLIENT_VERSION);\n+        if (last_file.IsNull()) {\n+            LogPrintf(\"%s: Failed to open filter file %d\\n\", __func__, pos.nFile);\n+            return 0;\n+        }\n+        if (!TruncateFile(last_file.Get(), pos.nPos)) {\n+            LogPrintf(\"%s: Failed to truncate filter file %d\\n\", __func__, pos.nFile);\n+            return 0;\n+        }\n+        if (!FileCommit(last_file.Get())) {\n+            LogPrintf(\"%s: Failed to commit filter file %d\\n\", __func__, pos.nFile);\n+            return 0;\n+        }\n+\n+        pos.nFile++;\n+        pos.nPos = 0;\n+    }\n+\n+    // Pre-allocate sufficient space for filter data.\n+    bool out_of_space;\n+    m_filter_fileseq->Allocate(pos, data_size, out_of_space);\n+    if (out_of_space) {\n+        LogPrintf(\"%s: out of disk space\\n\", __func__);\n+        return 0;\n+    }\n+\n+    CAutoFile fileout(m_filter_fileseq->Open(pos), SER_DISK, CLIENT_VERSION);\n+    if (fileout.IsNull()) {\n+        LogPrintf(\"%s: Failed to open filter file %d\\n\", __func__, pos.nFile);\n+        return 0;\n+    }\n+\n+    fileout << filter.GetBlockHash() << filter.GetEncodedFilter();\n+    return data_size;\n+}\n+\n+bool BlockFilterIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+    uint256 prev_header;\n+\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        prev_header = read_out.second.header;\n+    }\n+\n+    BlockFilter filter(m_filter_type, block, block_undo);\n+\n+    size_t bytes_written = WriteFilterToDisk(m_next_filter_pos, filter);\n+    if (bytes_written == 0) return false;\n+\n+    std::pair<uint256, DBVal> value;\n+    value.first = pindex->GetBlockHash();\n+    value.second.hash = filter.GetHash();\n+    value.second.header = filter.ComputeHeader(prev_header);\n+    value.second.pos = m_next_filter_pos;\n+\n+    if (!m_db->Write(DBHeightKey(pindex->nHeight), value)) {\n+        return false;\n+    }\n+\n+    m_next_filter_pos += bytes_written;\n+    return true;\n+}\n+\n+static bool CopyHeightIndexToHashIndex(CDBIterator& db_it, CDBBatch& batch,\n+                                       const std::string& index_name, int start_height,\n+                                       const CBlockIndex* stop_index)",
      "path": "src/index/blockfilterindex.cpp",
      "position": null,
      "original_position": 227,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "5964d2f97a221b898dbc477ca8f06ddfbe1d241e",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"index: Implement block filter index with write operations.\" (5964d2f97a221b898dbc477ca8f06ddfbe1d241e)\r\n\r\nIt seems misleading that this function accepts a stop_index argument rather than a stop_height, because the stopping point is identified only by height, and no other fields of the CBlockIndex are actually accessed. It would also be more consistent to have start_height/stop_height arguments than start_height/stop_index.",
      "created_at": "2019-03-28T19:51:11Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r270172763",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/270172763"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 227,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/270178850",
      "pull_request_review_id": 219145915,
      "id": 270178850,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MDE3ODg1MA==",
      "diff_hunk": "@@ -0,0 +1,272 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <map>\n+\n+#include <index/blockfilterindex.h>\n+#include <util/system.h>\n+#include <validation.h>\n+\n+/* The index database stores three items for each block: the disk location of the encoded filter,\n+ * its dSHA256 hash, and the header. Those belonging to blocks on the active chain are indexed by\n+ * height, and those belonging to blocks that have been reorganized out of the active chain are\n+ * indexed by block hash. This ensures that filter data for any block that becomes part of the\n+ * active chain can always be retrieved, alleviating timing concerns.\n+ *\n+ * The filters themselves are stored in flat files and referenced by the LevelDB entries. This\n+ * minimizes the amount of data written to LevelDB and keeps the database values constant size.\n+ *\n+ * Keys for the height index have the type [DB_BLOCK_HEIGHT, uint32 (BE)]. The height is represented\n+ * as big-endian so that sequential reads of filters by height are fast.\n+ * Keys for the hash index have the type [DB_BLOCK_HASH, uint256].\n+ */\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_FILTER_POS = 'P';\n+\n+constexpr unsigned int MAX_FILE_SIZE = 0x1000000; // 16 MiB\n+/** The pre-allocation chunk size for fltr?????.dat files */\n+constexpr unsigned int FILE_CHUNK_SIZE = 0x100000; // 1 MiB\n+\n+namespace {\n+    struct DBVal\n+    {\n+        uint256 hash;\n+        uint256 header;\n+        FlatFilePos pos;\n+\n+        ADD_SERIALIZE_METHODS;\n+\n+        template <typename Stream, typename Operation>\n+        inline void SerializationOp(Stream& s, Operation ser_action) {\n+            READWRITE(hash);\n+            READWRITE(header);\n+            READWRITE(pos);\n+        }\n+    };\n+\n+    struct DBHeightKey\n+    {\n+        int height;\n+\n+        DBHeightKey() : height(0) {}\n+        DBHeightKey(int height_in) : height(height_in) {}\n+\n+        template<typename Stream>\n+        void Serialize(Stream& s) const\n+        {\n+            ser_writedata8(s, DB_BLOCK_HEIGHT);\n+            ser_writedata32be(s, height);\n+        }\n+\n+        template<typename Stream>\n+        void Unserialize(Stream& s)\n+        {\n+            char prefix = ser_readdata8(s);\n+            if (prefix != DB_BLOCK_HEIGHT) {\n+                throw std::ios_base::failure(\"Invalid format for DB key\");\n+            }\n+            height = ser_readdata32be(s);\n+        }\n+    };\n+\n+    struct DBHashKey\n+    {\n+        uint256 hash;\n+\n+        DBHashKey(const uint256& hash_in) : hash(hash_in) {}\n+\n+        ADD_SERIALIZE_METHODS;\n+\n+        template <typename Stream, typename Operation>\n+        inline void SerializationOp(Stream& s, Operation ser_action) {\n+            char prefix = DB_BLOCK_HASH;\n+            READWRITE(prefix);\n+            if (prefix != DB_BLOCK_HASH) {\n+                throw std::ios_base::failure(\"Invalid format for DB key\");\n+            }\n+\n+            READWRITE(hash);\n+        }\n+    };\n+};\n+\n+BlockFilterIndex::BlockFilterIndex(BlockFilterType filter_type,\n+                                   size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_filter_type(filter_type)\n+{\n+    const std::string& filter_name = BlockFilterTypeName(filter_type);\n+    if (filter_name == \"\") throw std::invalid_argument(\"unknown filter_type\");\n+\n+    fs::path path = GetDataDir() / \"indexes\" / \"blockfilter\" / filter_name;\n+    fs::create_directories(path);\n+\n+    m_name = filter_name + \" block filter index\";\n+    m_db = MakeUnique<BaseIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+    m_filter_fileseq = MakeUnique<FlatFileSeq>(std::move(path), \"fltr\", FILE_CHUNK_SIZE);\n+}\n+\n+bool BlockFilterIndex::Init()\n+{\n+    if (!m_db->Read(DB_FILTER_POS, m_next_filter_pos)) {\n+        m_next_filter_pos.nFile = 0;\n+        m_next_filter_pos.nPos = 0;\n+    }\n+    return BaseIndex::Init();\n+}\n+\n+bool BlockFilterIndex::Commit(CDBBatch& batch)\n+{\n+    const FlatFilePos& pos = m_next_filter_pos;\n+\n+    // Flush current filter file to disk.\n+    CAutoFile file(m_filter_fileseq->Open(pos), SER_DISK, CLIENT_VERSION);\n+    if (file.IsNull()) {\n+        return error(\"%s: Failed to open filter file %d\", __func__, pos.nFile);\n+    }\n+    if (!FileCommit(file.Get())) {\n+        return error(\"%s: Failed to commit filter file %d\", __func__, pos.nFile);\n+    }\n+\n+    batch.Write(DB_FILTER_POS, pos);\n+    return BaseIndex::Commit(batch);\n+}\n+\n+size_t BlockFilterIndex::WriteFilterToDisk(FlatFilePos& pos, const BlockFilter& filter)\n+{\n+    assert(filter.GetFilterType() == GetFilterType());\n+\n+    size_t data_size =\n+        GetSerializeSize(filter.GetBlockHash(), CLIENT_VERSION) +\n+        GetSerializeSize(filter.GetEncodedFilter(), CLIENT_VERSION);\n+\n+    // If writing the filter would overflow the file, flush and move to the next one.\n+    if (pos.nPos + data_size > MAX_FILE_SIZE) {\n+        CAutoFile last_file(m_filter_fileseq->Open(pos), SER_DISK, CLIENT_VERSION);\n+        if (last_file.IsNull()) {\n+            LogPrintf(\"%s: Failed to open filter file %d\\n\", __func__, pos.nFile);\n+            return 0;\n+        }\n+        if (!TruncateFile(last_file.Get(), pos.nPos)) {\n+            LogPrintf(\"%s: Failed to truncate filter file %d\\n\", __func__, pos.nFile);\n+            return 0;\n+        }\n+        if (!FileCommit(last_file.Get())) {\n+            LogPrintf(\"%s: Failed to commit filter file %d\\n\", __func__, pos.nFile);\n+            return 0;\n+        }\n+\n+        pos.nFile++;\n+        pos.nPos = 0;\n+    }\n+\n+    // Pre-allocate sufficient space for filter data.\n+    bool out_of_space;\n+    m_filter_fileseq->Allocate(pos, data_size, out_of_space);\n+    if (out_of_space) {\n+        LogPrintf(\"%s: out of disk space\\n\", __func__);\n+        return 0;\n+    }\n+\n+    CAutoFile fileout(m_filter_fileseq->Open(pos), SER_DISK, CLIENT_VERSION);\n+    if (fileout.IsNull()) {\n+        LogPrintf(\"%s: Failed to open filter file %d\\n\", __func__, pos.nFile);\n+        return 0;\n+    }\n+\n+    fileout << filter.GetBlockHash() << filter.GetEncodedFilter();\n+    return data_size;\n+}\n+\n+bool BlockFilterIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+    uint256 prev_header;\n+\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        prev_header = read_out.second.header;\n+    }\n+\n+    BlockFilter filter(m_filter_type, block, block_undo);\n+\n+    size_t bytes_written = WriteFilterToDisk(m_next_filter_pos, filter);\n+    if (bytes_written == 0) return false;\n+\n+    std::pair<uint256, DBVal> value;\n+    value.first = pindex->GetBlockHash();\n+    value.second.hash = filter.GetHash();\n+    value.second.header = filter.ComputeHeader(prev_header);\n+    value.second.pos = m_next_filter_pos;\n+\n+    if (!m_db->Write(DBHeightKey(pindex->nHeight), value)) {\n+        return false;\n+    }\n+\n+    m_next_filter_pos += bytes_written;\n+    return true;\n+}\n+\n+static bool CopyHeightIndexToHashIndex(CDBIterator& db_it, CDBBatch& batch,\n+                                       const std::string& index_name, int start_height,\n+                                       const CBlockIndex* stop_index)\n+{\n+    DBHeightKey key(start_height);\n+    db_it.Seek(key);\n+\n+    for (int height = start_height; height <= stop_index->nHeight; ++height) {\n+        if (!db_it.GetKey(key) || key.height != height) {\n+            return error(\"%s: unexpected key in %s: expected (%c, %d)\",\n+                         __func__, index_name, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        std::pair<uint256, DBVal> value;\n+        if (!db_it.GetValue(value)) {\n+            return error(\"%s: unable to read value in %s at key (%c, %d)\",\n+                         __func__, index_name, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        batch.Write(DBHashKey(value.first), std::move(value.second));\n+\n+        db_it.Next();\n+    }\n+    return true;\n+}\n+\n+bool BlockFilterIndex::Rewind(const CBlockIndex* current_tip, const CBlockIndex* new_tip)\n+{\n+    assert(current_tip->GetAncestor(new_tip->nHeight) == new_tip);\n+\n+    CDBBatch batch(*m_db);\n+    std::unique_ptr<CDBIterator> db_it(m_db->NewIterator());\n+\n+    // During a reorg, we need to copy all filters for blocks that are getting disconnected from the\n+    // height index to the hash index so we can still find them when the height index entries are\n+    // overwritten.\n+    if (!CopyHeightIndexToHashIndex(*db_it, batch, m_name, new_tip->nHeight, current_tip)) {\n+        return false;\n+    }\n+\n+    // The latest filter position gets written in Commit by the call to the BaseIndex::Rewind.",
      "path": "src/index/blockfilterindex.cpp",
      "position": 298,
      "original_position": 265,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "5964d2f97a221b898dbc477ca8f06ddfbe1d241e",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"index: Implement block filter index with write operations.\" (5964d2f97a221b898dbc477ca8f06ddfbe1d241e)\r\n\r\nThis comment and the general control flow here where BlockFilterIndex::Rewind calls BaseIndex::Rewind which calls BlockFilterIndex::Commit which calls BaseIndex::Commit is confusing to follow (made worse by there being two BaseIndex::Commit methods). I flattened the control flow in a (+42/-49) simplification in 8bb65cedbaf4a84d4018cc194985aa02c8a51043 ([`pr/blockfilt`](https://github.com/ryanofsky/bitcoin/commits/pr/blockfilt)), and I think it'd be good to squash these changes into the PR, especially since the early commit that introduces `Commit()`/`Rewind()`  doesn't compile right now anyway.",
      "created_at": "2019-03-28T20:08:28Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r270178850",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/270178850"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 298,
      "original_line": 298,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/270215452",
      "pull_request_review_id": 219145915,
      "id": 270215452,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MDIxNTQ1Mg==",
      "diff_hunk": "@@ -218,7 +239,7 @@ bool BlockFilterIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex\n         return false;\n     }\n \n-    m_next_filter_pos += bytes_written;\n+    m_next_filter_pos.nPos += bytes_written;",
      "path": "src/index/blockfilterindex.cpp",
      "position": 254,
      "original_position": 40,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "88ecade18fd615add2550c89f6152bc44fc4ee5e",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"index: Implement lookup methods on block filter index.\" (88ecade18fd615add2550c89f6152bc44fc4ee5e)\r\n\r\nThis change should be moved to the previous commit (5964d2f97a221b898dbc477ca8f06ddfbe1d241e), which doesn't compile without it.",
      "created_at": "2019-03-28T21:59:36Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r270215452",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/270215452"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 254,
      "original_line": 254,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/270217137",
      "pull_request_review_id": 219145915,
      "id": 270217137,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MDIxNzEzNw==",
      "diff_hunk": "@@ -48,6 +49,20 @@ class BlockFilterIndex final : public BaseIndex\n                               size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n \n     BlockFilterType GetFilterType() const { return m_filter_type; }\n+\n+    /** Get a single filter by block. */\n+    bool LookupFilter(const CBlockIndex* block_index, BlockFilter& filter_out) const;\n+\n+    /** Get a single filter header by block. */\n+    bool LookupFilterHeader(const CBlockIndex* block_index, uint256& header_out) const;\n+\n+    /** Get a range of filters between two heights on a chain. */",
      "path": "src/index/blockfilterindex.h",
      "position": 59,
      "original_position": 19,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "88ecade18fd615add2550c89f6152bc44fc4ee5e",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"index: Implement lookup methods on block filter index.\" (88ecade18fd615add2550c89f6152bc44fc4ee5e)\r\n\r\nMight be worth commenting on how range lookups are intended to be used since they aren't exposed via RPC in this PR.",
      "created_at": "2019-03-28T22:06:08Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r270217137",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/270217137"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 59,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/270220529",
      "pull_request_review_id": 219145915,
      "id": 270220529,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MDIyMDUyOQ==",
      "diff_hunk": "@@ -0,0 +1,150 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <blockfilter.h>\n+#include <chainparams.h>\n+#include <index/blockfilterindex.h>\n+#include <test/test_bitcoin.h>\n+#include <script/standard.h>\n+#include <validation.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(blockfilter_index_tests)\n+\n+static bool ComputeFilter(BlockFilterType filter_type, const CBlockIndex* block_index,\n+                          BlockFilter& filter)\n+{\n+    CBlock block;\n+    if (!ReadBlockFromDisk(block, block_index->GetBlockPos(), Params().GetConsensus())) {\n+        return false;\n+    }\n+\n+    CBlockUndo block_undo;\n+    if (block_index->nHeight > 0 && !UndoReadFromDisk(block_undo, block_index)) {\n+        return false;\n+    }\n+\n+    filter = BlockFilter(filter_type, block, block_undo);\n+    return true;\n+}\n+\n+static bool CheckFilterLookups(BlockFilterIndex& filter_index, const CBlockIndex* block_index,\n+                               uint256& last_header)\n+{\n+    BlockFilter expected_filter;\n+    if (!ComputeFilter(filter_index.GetFilterType(), block_index, expected_filter)) {\n+        BOOST_ERROR(\"ComputeFilter failed on block \" << block_index->nHeight);\n+        return false;\n+    }\n+\n+    BlockFilter filter;\n+    uint256 filter_header;\n+    std::vector<BlockFilter> filters;\n+    std::vector<uint256> filter_hashes;\n+\n+    BOOST_CHECK(filter_index.LookupFilter(block_index, filter));\n+    BOOST_CHECK(filter_index.LookupFilterHeader(block_index, filter_header));\n+    BOOST_CHECK(filter_index.LookupFilterRange(block_index->nHeight, block_index, filters));\n+    BOOST_CHECK(filter_index.LookupFilterHashRange(block_index->nHeight, block_index,\n+                                                   filter_hashes));\n+\n+    BOOST_CHECK_EQUAL(filters.size(), 1);\n+    BOOST_CHECK_EQUAL(filter_hashes.size(), 1);\n+\n+    BOOST_CHECK_EQUAL(filter.GetHash(), expected_filter.GetHash());\n+    BOOST_CHECK_EQUAL(filter_header, expected_filter.ComputeHeader(last_header));\n+    BOOST_CHECK_EQUAL(filters[0].GetHash(), expected_filter.GetHash());\n+    BOOST_CHECK_EQUAL(filter_hashes[0], expected_filter.GetHash());\n+\n+    filters.clear();\n+    filter_hashes.clear();\n+    last_header = filter_header;\n+    return true;\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, TestChain100Setup)\n+{\n+    BlockFilterIndex filter_index(BlockFilterType::BASIC, 1 << 20, true);\n+\n+    uint256 last_header;\n+\n+    // Filter should not be found in the index before it is started.\n+    {\n+        LOCK(cs_main);\n+\n+        BlockFilter filter;\n+        uint256 filter_header;\n+        std::vector<BlockFilter> filters;\n+        std::vector<uint256> filter_hashes;\n+\n+        for (const CBlockIndex* block_index = chainActive.Genesis();\n+             block_index != nullptr;\n+             block_index = chainActive.Next(block_index)) {\n+            BOOST_CHECK(!filter_index.LookupFilter(block_index, filter));\n+            BOOST_CHECK(!filter_index.LookupFilterHeader(block_index, filter_header));\n+            BOOST_CHECK(!filter_index.LookupFilterRange(block_index->nHeight, block_index, filters));\n+            BOOST_CHECK(!filter_index.LookupFilterHashRange(block_index->nHeight, block_index,\n+                                                            filter_hashes));\n+        }\n+    }\n+\n+    // BlockUntilSyncedToCurrentChain should return false before index is started.\n+    BOOST_CHECK(!filter_index.BlockUntilSyncedToCurrentChain());\n+\n+    filter_index.Start();\n+\n+    // Allow filter index to catch up with the block index.\n+    constexpr int64_t timeout_ms = 10 * 1000;\n+    int64_t time_start = GetTimeMillis();\n+    while (!filter_index.BlockUntilSyncedToCurrentChain()) {\n+        BOOST_REQUIRE(time_start + timeout_ms > GetTimeMillis());\n+        MilliSleep(100);\n+    }\n+\n+    // Check that filter index has all blocks that were in the chain before it started.\n+    {\n+        LOCK(cs_main);\n+        const CBlockIndex* block_index;\n+        for (block_index = chainActive.Genesis();\n+             block_index != nullptr;\n+             block_index = chainActive.Next(block_index)) {\n+            CheckFilterLookups(filter_index, block_index, last_header);\n+        }\n+    }\n+\n+    // Check that new blocks get indexed.\n+    for (int i = 0; i < 10; i++) {\n+        CScript coinbase_script_pub_key = GetScriptForDestination(coinbaseKey.GetPubKey().GetID());\n+        std::vector<CMutableTransaction> no_txns;\n+        const CBlock& block = CreateAndProcessBlock(no_txns, coinbase_script_pub_key);\n+        const CBlockIndex* block_index;\n+        {\n+            LOCK(cs_main);\n+            block_index = LookupBlockIndex(block.GetHash());\n+        }\n+\n+        BOOST_CHECK(filter_index.BlockUntilSyncedToCurrentChain());\n+        CheckFilterLookups(filter_index, block_index, last_header);\n+    }\n+\n+    // Test lookups for a range of filters/hashes.\n+    std::vector<BlockFilter> filters;\n+    std::vector<uint256> filter_hashes;\n+\n+    const CBlockIndex* block_index = chainActive.Tip();\n+    BOOST_CHECK(filter_index.LookupFilterRange(0, block_index, filters));",
      "path": "src/test/blockfilter_index_tests.cpp",
      "position": null,
      "original_position": 137,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "9283baae04dddf09576e541786cc429158077f82",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"test: Unit tests for block index filter.\" (9283baae04dddf09576e541786cc429158077f82)\r\n\r\nIt might be good to add a test for good error handling (no crashes) over a range that includes blocks never added to the index (known blocks that were never connected, or connected blocks that haven't been added to the index yet).",
      "created_at": "2019-03-28T22:19:19Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r270220529",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/270220529"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 137,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/270221151",
      "pull_request_review_id": 219145915,
      "id": 270221151,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MDIyMTE1MQ==",
      "diff_hunk": "@@ -64,6 +67,48 @@ static bool CheckFilterLookups(BlockFilterIndex& filter_index, const CBlockIndex\n     return true;\n }\n \n+static CBlock CreateBlock(const CBlockIndex* prev,\n+                          const std::vector<CMutableTransaction>& txns,\n+                          const CScript& scriptPubKey)\n+{\n+    const CChainParams& chainparams = Params();\n+    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey);\n+    CBlock& block = pblocktemplate->block;\n+    block.hashPrevBlock = prev->GetBlockHash();\n+    block.nTime = prev->nTime + 1;\n+\n+    // Replace mempool-selected txns with just coinbase plus passed-in txns:\n+    block.vtx.resize(1);\n+    for (const CMutableTransaction& tx : txns)",
      "path": "src/test/blockfilter_index_tests.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "d85dd54792f7e1d4ab3d224930e35ed36c6db18a",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"test: Unit test for block filter index reorg handling.\" (d85dd54792f7e1d4ab3d224930e35ed36c6db18a)\r\n\r\nStyle guide braces blah blah.",
      "created_at": "2019-03-28T22:21:31Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r270221151",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/270221151"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 82,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/270222454",
      "pull_request_review_id": 219145915,
      "id": 270222454,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MDIyMjQ1NA==",
      "diff_hunk": "@@ -886,6 +895,7 @@ int nUserMaxConnections;\n int nFD;\n ServiceFlags nLocalServices = ServiceFlags(NODE_NETWORK | NODE_NETWORK_LIMITED);\n int64_t peer_connect_timeout;\n+std::vector<BlockFilterType> enabled_filter_types;",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 55,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "88fac30e85e907891c92b8df456d925369d8bc06",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"init: Add CLI option to enable block filter index.\" (88fac30e85e907891c92b8df456d925369d8bc06)\r\n\r\nPlease do use `g_` prefix to make it clear this is a global.",
      "created_at": "2019-03-28T22:26:35Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r270222454",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/270222454"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 898,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/270225386",
      "pull_request_review_id": 219145915,
      "id": 270225386,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MDIyNTM4Ng==",
      "diff_hunk": "@@ -1448,6 +1477,13 @@ bool AppInitMain(InitInterfaces& interfaces)\n     nTotalCache -= nBlockTreeDBCache;\n     int64_t nTxIndexCache = std::min(nTotalCache / 8, gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX) ? nMaxTxIndexCache << 20 : 0);\n     nTotalCache -= nTxIndexCache;\n+    int64_t filter_index_cache = 0;\n+    if (!enabled_filter_types.empty()) {\n+        size_t n_indexes = enabled_filter_types.size();\n+        int64_t max_cache = (max_filter_index_cache << 20) / n_indexes;\n+        filter_index_cache = std::min(nTotalCache / 8, max_cache);",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 97,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "88fac30e85e907891c92b8df456d925369d8bc06",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"init: Add CLI option to enable block filter index.\" (88fac30e85e907891c92b8df456d925369d8bc06)\r\n\r\nDid you want to divide nTotalCache by n_indexes here? Shouldn't matter now because n_indexes is one. But as n_indexes grows, nTotalCache on the next line could keep decreasing and even go below 0.",
      "created_at": "2019-03-28T22:38:03Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r270225386",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/270225386"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1484,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/270231499",
      "pull_request_review_id": 219145915,
      "id": 270231499,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MDIzMTQ5OQ==",
      "diff_hunk": "@@ -270,3 +291,134 @@ bool BlockFilterIndex::Rewind(const CBlockIndex* current_tip, const CBlockIndex*\n \n     return BaseIndex::Rewind(current_tip, new_tip);\n }\n+\n+static bool LookupOne(const CDBWrapper& db, const CBlockIndex* block_index, DBVal& result)\n+{\n+    // First check if the result is stored under the height index and the value there matches the\n+    // block hash. This should be the case if the block is on the active chain.\n+    std::pair<uint256, DBVal> read_out;\n+    if (!db.Read(DBHeightKey(block_index->nHeight), read_out)) {\n+        return false;\n+    }\n+    if (read_out.first == block_index->GetBlockHash()) {\n+        result = std::move(read_out.second);\n+        return true;\n+    }\n+\n+    // If value at the height index corresponds to an different block, the result will be stored in\n+    // the hash index.\n+    return db.Read(DBHashKey(block_index->GetBlockHash()), result);\n+}\n+\n+static bool LookupRange(CDBWrapper& db, const std::string& index_name, int start_height,\n+                        const CBlockIndex* stop_index, std::vector<DBVal>& results)\n+{\n+    if (start_height < 0) {\n+        return error(\"%s: start height (%d) is negative\", __func__, start_height);\n+    }\n+    if (start_height > stop_index->nHeight) {\n+        return error(\"%s: start height (%d) is greater than stop height (%d)\",\n+                     __func__, start_height, stop_index->nHeight);\n+    }\n+\n+    size_t results_size = static_cast<size_t>(stop_index->nHeight - start_height + 1);\n+    std::vector<std::pair<uint256, DBVal>> values(results_size);\n+\n+    DBHeightKey key(start_height);\n+    std::unique_ptr<CDBIterator> db_it(db.NewIterator());\n+    db_it->Seek(DBHeightKey(start_height));\n+    for (int height = start_height; height <= stop_index->nHeight; ++height) {\n+        if (!db_it->Valid() || !db_it->GetKey(key) || key.height != height) {\n+            return false;\n+        }\n+\n+        size_t i = static_cast<size_t>(height - start_height);\n+        if (!db_it->GetValue(values[i])) {\n+            return error(\"%s: unable to read value in %s at key (%c, %d)\",\n+                         __func__, index_name, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        db_it->Next();\n+    }\n+\n+    results.resize(results_size);",
      "path": "src/index/blockfilterindex.cpp",
      "position": 356,
      "original_position": 98,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "88ecade18fd615add2550c89f6152bc44fc4ee5e",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"index: Implement lookup methods on block filter index.\" (88ecade18fd615add2550c89f6152bc44fc4ee5e)\r\n\r\nIt seems like this line isn't doing anything and could be removed (new size should be same as previous size).",
      "created_at": "2019-03-28T23:04:18Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r270231499",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/270231499"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 356,
      "original_line": 356,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/270233641",
      "pull_request_review_id": 219145915,
      "id": 270233641,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MDIzMzY0MQ==",
      "diff_hunk": "@@ -270,3 +291,134 @@ bool BlockFilterIndex::Rewind(const CBlockIndex* current_tip, const CBlockIndex*\n \n     return BaseIndex::Rewind(current_tip, new_tip);\n }\n+\n+static bool LookupOne(const CDBWrapper& db, const CBlockIndex* block_index, DBVal& result)\n+{\n+    // First check if the result is stored under the height index and the value there matches the\n+    // block hash. This should be the case if the block is on the active chain.\n+    std::pair<uint256, DBVal> read_out;\n+    if (!db.Read(DBHeightKey(block_index->nHeight), read_out)) {\n+        return false;\n+    }\n+    if (read_out.first == block_index->GetBlockHash()) {\n+        result = std::move(read_out.second);\n+        return true;\n+    }\n+\n+    // If value at the height index corresponds to an different block, the result will be stored in\n+    // the hash index.\n+    return db.Read(DBHashKey(block_index->GetBlockHash()), result);\n+}\n+\n+static bool LookupRange(CDBWrapper& db, const std::string& index_name, int start_height,\n+                        const CBlockIndex* stop_index, std::vector<DBVal>& results)\n+{\n+    if (start_height < 0) {\n+        return error(\"%s: start height (%d) is negative\", __func__, start_height);\n+    }\n+    if (start_height > stop_index->nHeight) {\n+        return error(\"%s: start height (%d) is greater than stop height (%d)\",\n+                     __func__, start_height, stop_index->nHeight);\n+    }\n+\n+    size_t results_size = static_cast<size_t>(stop_index->nHeight - start_height + 1);\n+    std::vector<std::pair<uint256, DBVal>> values(results_size);\n+\n+    DBHeightKey key(start_height);\n+    std::unique_ptr<CDBIterator> db_it(db.NewIterator());\n+    db_it->Seek(DBHeightKey(start_height));\n+    for (int height = start_height; height <= stop_index->nHeight; ++height) {\n+        if (!db_it->Valid() || !db_it->GetKey(key) || key.height != height) {\n+            return false;\n+        }\n+\n+        size_t i = static_cast<size_t>(height - start_height);\n+        if (!db_it->GetValue(values[i])) {\n+            return error(\"%s: unable to read value in %s at key (%c, %d)\",\n+                         __func__, index_name, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        db_it->Next();\n+    }\n+\n+    results.resize(results_size);\n+\n+    // Iterate backwards through block indexes collecting results in order to access the block hash\n+    // of each entry in case we need to look it up in the hash index.\n+    for (const CBlockIndex* block_index = stop_index;\n+         block_index && block_index->nHeight >= start_height;\n+         block_index = block_index->pprev) {\n+        uint256 block_hash = block_index->GetBlockHash();\n+\n+        size_t i = static_cast<size_t>(block_index->nHeight - start_height);\n+        if (block_hash == values[i].first) {\n+            results[i] = std::move(values[i].second);\n+            continue;",
      "path": "src/index/blockfilterindex.cpp",
      "position": 368,
      "original_position": 110,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "88ecade18fd615add2550c89f6152bc44fc4ee5e",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"index: Implement lookup methods on block filter index.\" (88ecade18fd615add2550c89f6152bc44fc4ee5e)\r\n\r\nSeems like this could break instead of continue. Would add a comment here if there's a case where this needs to keep iterating.",
      "created_at": "2019-03-28T23:14:40Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r270233641",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/270233641"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 368,
      "original_line": 368,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/272756187",
      "pull_request_review_id": 223494916,
      "id": 272756187,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3Mjc1NjE4Nw==",
      "diff_hunk": "@@ -224,9 +249,7 @@ void BaseIndex::ChainStateFlushed(const CBlockLocator& locator)\n         return;\n     }\n \n-    if (!GetDB().WriteBestBlock(locator)) {\n-        error(\"%s: Failed to write locator to disk\", __func__);\n-    }\n+    Commit();",
      "path": "src/index/base.cpp",
      "position": 117,
      "original_position": 90,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "e3845e4a2a27d69a09ac0f8744b23530ad3bbe9e",
      "in_reply_to_id": 268824956,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I explicitly don't want to handle failure as Commit() already logs on errors and in the places where the return value is ignored, the index is committing a later state so it is safe to just continue. I will add comments in the appropriate places saying this.",
      "created_at": "2019-04-05T21:59:27Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r272756187",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/272756187"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 270,
      "original_line": 270,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/272759717",
      "pull_request_review_id": 223499485,
      "id": 272759717,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3Mjc1OTcxNw==",
      "diff_hunk": "@@ -0,0 +1,272 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <map>\n+\n+#include <index/blockfilterindex.h>\n+#include <util/system.h>\n+#include <validation.h>\n+\n+/* The index database stores three items for each block: the disk location of the encoded filter,\n+ * its dSHA256 hash, and the header. Those belonging to blocks on the active chain are indexed by\n+ * height, and those belonging to blocks that have been reorganized out of the active chain are\n+ * indexed by block hash. This ensures that filter data for any block that becomes part of the\n+ * active chain can always be retrieved, alleviating timing concerns.\n+ *\n+ * The filters themselves are stored in flat files and referenced by the LevelDB entries. This\n+ * minimizes the amount of data written to LevelDB and keeps the database values constant size.\n+ *\n+ * Keys for the height index have the type [DB_BLOCK_HEIGHT, uint32 (BE)]. The height is represented\n+ * as big-endian so that sequential reads of filters by height are fast.\n+ * Keys for the hash index have the type [DB_BLOCK_HASH, uint256].\n+ */\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_FILTER_POS = 'P';",
      "path": "src/index/blockfilterindex.cpp",
      "position": 29,
      "original_position": 26,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "5964d2f97a221b898dbc477ca8f06ddfbe1d241e",
      "in_reply_to_id": 268829521,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added a comment.",
      "created_at": "2019-04-05T22:18:43Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r272759717",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/272759717"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 29,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/272761157",
      "pull_request_review_id": 223501392,
      "id": 272761157,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3Mjc2MTE1Nw==",
      "diff_hunk": "@@ -0,0 +1,272 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <map>\n+\n+#include <index/blockfilterindex.h>\n+#include <util/system.h>\n+#include <validation.h>\n+\n+/* The index database stores three items for each block: the disk location of the encoded filter,\n+ * its dSHA256 hash, and the header. Those belonging to blocks on the active chain are indexed by\n+ * height, and those belonging to blocks that have been reorganized out of the active chain are\n+ * indexed by block hash. This ensures that filter data for any block that becomes part of the\n+ * active chain can always be retrieved, alleviating timing concerns.\n+ *\n+ * The filters themselves are stored in flat files and referenced by the LevelDB entries. This\n+ * minimizes the amount of data written to LevelDB and keeps the database values constant size.\n+ *\n+ * Keys for the height index have the type [DB_BLOCK_HEIGHT, uint32 (BE)]. The height is represented\n+ * as big-endian so that sequential reads of filters by height are fast.\n+ * Keys for the hash index have the type [DB_BLOCK_HASH, uint256].\n+ */\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_FILTER_POS = 'P';\n+\n+constexpr unsigned int MAX_FILE_SIZE = 0x1000000; // 16 MiB\n+/** The pre-allocation chunk size for fltr?????.dat files */\n+constexpr unsigned int FILE_CHUNK_SIZE = 0x100000; // 1 MiB\n+\n+namespace {\n+    struct DBVal\n+    {\n+        uint256 hash;\n+        uint256 header;\n+        FlatFilePos pos;\n+\n+        ADD_SERIALIZE_METHODS;\n+\n+        template <typename Stream, typename Operation>\n+        inline void SerializationOp(Stream& s, Operation ser_action) {\n+            READWRITE(hash);\n+            READWRITE(header);\n+            READWRITE(pos);\n+        }\n+    };\n+\n+    struct DBHeightKey\n+    {\n+        int height;\n+\n+        DBHeightKey() : height(0) {}\n+        DBHeightKey(int height_in) : height(height_in) {}\n+\n+        template<typename Stream>\n+        void Serialize(Stream& s) const\n+        {\n+            ser_writedata8(s, DB_BLOCK_HEIGHT);\n+            ser_writedata32be(s, height);\n+        }\n+\n+        template<typename Stream>\n+        void Unserialize(Stream& s)\n+        {\n+            char prefix = ser_readdata8(s);\n+            if (prefix != DB_BLOCK_HEIGHT) {\n+                throw std::ios_base::failure(\"Invalid format for DB key\");\n+            }\n+            height = ser_readdata32be(s);\n+        }\n+    };\n+\n+    struct DBHashKey\n+    {\n+        uint256 hash;\n+\n+        DBHashKey(const uint256& hash_in) : hash(hash_in) {}\n+\n+        ADD_SERIALIZE_METHODS;\n+\n+        template <typename Stream, typename Operation>\n+        inline void SerializationOp(Stream& s, Operation ser_action) {\n+            char prefix = DB_BLOCK_HASH;\n+            READWRITE(prefix);\n+            if (prefix != DB_BLOCK_HASH) {\n+                throw std::ios_base::failure(\"Invalid format for DB key\");\n+            }\n+\n+            READWRITE(hash);\n+        }\n+    };\n+};\n+\n+BlockFilterIndex::BlockFilterIndex(BlockFilterType filter_type,\n+                                   size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_filter_type(filter_type)\n+{\n+    const std::string& filter_name = BlockFilterTypeName(filter_type);\n+    if (filter_name == \"\") throw std::invalid_argument(\"unknown filter_type\");\n+\n+    fs::path path = GetDataDir() / \"indexes\" / \"blockfilter\" / filter_name;\n+    fs::create_directories(path);\n+\n+    m_name = filter_name + \" block filter index\";\n+    m_db = MakeUnique<BaseIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+    m_filter_fileseq = MakeUnique<FlatFileSeq>(std::move(path), \"fltr\", FILE_CHUNK_SIZE);\n+}\n+\n+bool BlockFilterIndex::Init()\n+{\n+    if (!m_db->Read(DB_FILTER_POS, m_next_filter_pos)) {",
      "path": "src/index/blockfilterindex.cpp",
      "position": 116,
      "original_position": 112,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "5964d2f97a221b898dbc477ca8f06ddfbe1d241e",
      "in_reply_to_id": 268841030,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Very good point!",
      "created_at": "2019-04-05T22:27:35Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r272761157",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/272761157"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 116,
      "original_line": 116,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/272763293",
      "pull_request_review_id": 223504055,
      "id": 272763293,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3Mjc2MzI5Mw==",
      "diff_hunk": "@@ -95,17 +95,18 @@ void BaseIndex::ThreadSync()\n         int64_t last_locator_write_time = 0;\n         while (true) {\n             if (m_interrupt) {\n-                WriteBestBlock(pindex);\n+                m_best_block_index = pindex;",
      "path": "src/index/base.cpp",
      "position": 17,
      "original_position": 17,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "e3845e4a2a27d69a09ac0f8744b23530ad3bbe9e",
      "in_reply_to_id": 270162675,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Previously, since `m_synced` wasn't set to *and* WriteBestBlock took an explicit pointer argument, it wasn't necessary. But now WriteBestBlock reads m_best_block_index instead of taking an argument.",
      "created_at": "2019-04-05T22:41:04Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r272763293",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/272763293"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 98,
      "original_line": 98,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/272763851",
      "pull_request_review_id": 223504779,
      "id": 272763851,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3Mjc2Mzg1MQ==",
      "diff_hunk": "@@ -270,3 +291,134 @@ bool BlockFilterIndex::Rewind(const CBlockIndex* current_tip, const CBlockIndex*\n \n     return BaseIndex::Rewind(current_tip, new_tip);\n }\n+\n+static bool LookupOne(const CDBWrapper& db, const CBlockIndex* block_index, DBVal& result)\n+{\n+    // First check if the result is stored under the height index and the value there matches the\n+    // block hash. This should be the case if the block is on the active chain.\n+    std::pair<uint256, DBVal> read_out;\n+    if (!db.Read(DBHeightKey(block_index->nHeight), read_out)) {\n+        return false;\n+    }\n+    if (read_out.first == block_index->GetBlockHash()) {\n+        result = std::move(read_out.second);\n+        return true;\n+    }\n+\n+    // If value at the height index corresponds to an different block, the result will be stored in\n+    // the hash index.\n+    return db.Read(DBHashKey(block_index->GetBlockHash()), result);\n+}\n+\n+static bool LookupRange(CDBWrapper& db, const std::string& index_name, int start_height,\n+                        const CBlockIndex* stop_index, std::vector<DBVal>& results)\n+{\n+    if (start_height < 0) {\n+        return error(\"%s: start height (%d) is negative\", __func__, start_height);\n+    }\n+    if (start_height > stop_index->nHeight) {\n+        return error(\"%s: start height (%d) is greater than stop height (%d)\",\n+                     __func__, start_height, stop_index->nHeight);\n+    }\n+\n+    size_t results_size = static_cast<size_t>(stop_index->nHeight - start_height + 1);\n+    std::vector<std::pair<uint256, DBVal>> values(results_size);\n+\n+    DBHeightKey key(start_height);\n+    std::unique_ptr<CDBIterator> db_it(db.NewIterator());\n+    db_it->Seek(DBHeightKey(start_height));\n+    for (int height = start_height; height <= stop_index->nHeight; ++height) {\n+        if (!db_it->Valid() || !db_it->GetKey(key) || key.height != height) {\n+            return false;\n+        }\n+\n+        size_t i = static_cast<size_t>(height - start_height);\n+        if (!db_it->GetValue(values[i])) {\n+            return error(\"%s: unable to read value in %s at key (%c, %d)\",\n+                         __func__, index_name, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        db_it->Next();\n+    }\n+\n+    results.resize(results_size);\n+\n+    // Iterate backwards through block indexes collecting results in order to access the block hash\n+    // of each entry in case we need to look it up in the hash index.\n+    for (const CBlockIndex* block_index = stop_index;\n+         block_index && block_index->nHeight >= start_height;\n+         block_index = block_index->pprev) {\n+        uint256 block_hash = block_index->GetBlockHash();\n+\n+        size_t i = static_cast<size_t>(block_index->nHeight - start_height);\n+        if (block_hash == values[i].first) {\n+            results[i] = std::move(values[i].second);\n+            continue;",
      "path": "src/index/blockfilterindex.cpp",
      "position": 368,
      "original_position": 110,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "88ecade18fd615add2550c89f6152bc44fc4ee5e",
      "in_reply_to_id": 270233641,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hmm? If it was a break, it would only copy one value to the result value rather than all of them.",
      "created_at": "2019-04-05T22:44:50Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r272763851",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/272763851"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 368,
      "original_line": 368,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/272764193",
      "pull_request_review_id": 223505156,
      "id": 272764193,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3Mjc2NDE5Mw==",
      "diff_hunk": "@@ -270,3 +291,134 @@ bool BlockFilterIndex::Rewind(const CBlockIndex* current_tip, const CBlockIndex*\n \n     return BaseIndex::Rewind(current_tip, new_tip);\n }\n+\n+static bool LookupOne(const CDBWrapper& db, const CBlockIndex* block_index, DBVal& result)\n+{\n+    // First check if the result is stored under the height index and the value there matches the\n+    // block hash. This should be the case if the block is on the active chain.\n+    std::pair<uint256, DBVal> read_out;\n+    if (!db.Read(DBHeightKey(block_index->nHeight), read_out)) {\n+        return false;\n+    }\n+    if (read_out.first == block_index->GetBlockHash()) {\n+        result = std::move(read_out.second);\n+        return true;\n+    }\n+\n+    // If value at the height index corresponds to an different block, the result will be stored in\n+    // the hash index.\n+    return db.Read(DBHashKey(block_index->GetBlockHash()), result);\n+}\n+\n+static bool LookupRange(CDBWrapper& db, const std::string& index_name, int start_height,\n+                        const CBlockIndex* stop_index, std::vector<DBVal>& results)\n+{\n+    if (start_height < 0) {\n+        return error(\"%s: start height (%d) is negative\", __func__, start_height);\n+    }\n+    if (start_height > stop_index->nHeight) {\n+        return error(\"%s: start height (%d) is greater than stop height (%d)\",\n+                     __func__, start_height, stop_index->nHeight);\n+    }\n+\n+    size_t results_size = static_cast<size_t>(stop_index->nHeight - start_height + 1);\n+    std::vector<std::pair<uint256, DBVal>> values(results_size);\n+\n+    DBHeightKey key(start_height);\n+    std::unique_ptr<CDBIterator> db_it(db.NewIterator());\n+    db_it->Seek(DBHeightKey(start_height));\n+    for (int height = start_height; height <= stop_index->nHeight; ++height) {\n+        if (!db_it->Valid() || !db_it->GetKey(key) || key.height != height) {\n+            return false;\n+        }\n+\n+        size_t i = static_cast<size_t>(height - start_height);\n+        if (!db_it->GetValue(values[i])) {\n+            return error(\"%s: unable to read value in %s at key (%c, %d)\",\n+                         __func__, index_name, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        db_it->Next();\n+    }\n+\n+    results.resize(results_size);",
      "path": "src/index/blockfilterindex.cpp",
      "position": 356,
      "original_position": 98,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "88ecade18fd615add2550c89f6152bc44fc4ee5e",
      "in_reply_to_id": 270231499,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is the first time `results` is accessed in this method, and the size has to be set appropriately.",
      "created_at": "2019-04-05T22:46:48Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r272764193",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/272764193"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 356,
      "original_line": 356,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/272765337",
      "pull_request_review_id": 223506565,
      "id": 272765337,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3Mjc2NTMzNw==",
      "diff_hunk": "@@ -1448,6 +1477,13 @@ bool AppInitMain(InitInterfaces& interfaces)\n     nTotalCache -= nBlockTreeDBCache;\n     int64_t nTxIndexCache = std::min(nTotalCache / 8, gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX) ? nMaxTxIndexCache << 20 : 0);\n     nTotalCache -= nTxIndexCache;\n+    int64_t filter_index_cache = 0;\n+    if (!enabled_filter_types.empty()) {\n+        size_t n_indexes = enabled_filter_types.size();\n+        int64_t max_cache = (max_filter_index_cache << 20) / n_indexes;\n+        filter_index_cache = std::min(nTotalCache / 8, max_cache);",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 97,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "88fac30e85e907891c92b8df456d925369d8bc06",
      "in_reply_to_id": 270225386,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Updated the logic.",
      "created_at": "2019-04-05T22:54:33Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r272765337",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/272765337"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1484,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/272805282",
      "pull_request_review_id": 223551935,
      "id": 272805282,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MjgwNTI4Mg==",
      "diff_hunk": "@@ -0,0 +1,272 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <map>\n+\n+#include <index/blockfilterindex.h>\n+#include <util/system.h>\n+#include <validation.h>\n+\n+/* The index database stores three items for each block: the disk location of the encoded filter,\n+ * its dSHA256 hash, and the header. Those belonging to blocks on the active chain are indexed by\n+ * height, and those belonging to blocks that have been reorganized out of the active chain are\n+ * indexed by block hash. This ensures that filter data for any block that becomes part of the\n+ * active chain can always be retrieved, alleviating timing concerns.\n+ *\n+ * The filters themselves are stored in flat files and referenced by the LevelDB entries. This\n+ * minimizes the amount of data written to LevelDB and keeps the database values constant size.\n+ *\n+ * Keys for the height index have the type [DB_BLOCK_HEIGHT, uint32 (BE)]. The height is represented\n+ * as big-endian so that sequential reads of filters by height are fast.\n+ * Keys for the hash index have the type [DB_BLOCK_HASH, uint256].\n+ */\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_FILTER_POS = 'P';\n+\n+constexpr unsigned int MAX_FILE_SIZE = 0x1000000; // 16 MiB\n+/** The pre-allocation chunk size for fltr?????.dat files */\n+constexpr unsigned int FILE_CHUNK_SIZE = 0x100000; // 1 MiB\n+\n+namespace {\n+    struct DBVal\n+    {\n+        uint256 hash;\n+        uint256 header;\n+        FlatFilePos pos;\n+\n+        ADD_SERIALIZE_METHODS;\n+\n+        template <typename Stream, typename Operation>\n+        inline void SerializationOp(Stream& s, Operation ser_action) {\n+            READWRITE(hash);\n+            READWRITE(header);\n+            READWRITE(pos);\n+        }\n+    };\n+\n+    struct DBHeightKey\n+    {\n+        int height;\n+\n+        DBHeightKey() : height(0) {}\n+        DBHeightKey(int height_in) : height(height_in) {}\n+\n+        template<typename Stream>\n+        void Serialize(Stream& s) const\n+        {\n+            ser_writedata8(s, DB_BLOCK_HEIGHT);\n+            ser_writedata32be(s, height);\n+        }\n+\n+        template<typename Stream>\n+        void Unserialize(Stream& s)\n+        {\n+            char prefix = ser_readdata8(s);\n+            if (prefix != DB_BLOCK_HEIGHT) {\n+                throw std::ios_base::failure(\"Invalid format for DB key\");\n+            }\n+            height = ser_readdata32be(s);\n+        }\n+    };\n+\n+    struct DBHashKey\n+    {\n+        uint256 hash;\n+\n+        DBHashKey(const uint256& hash_in) : hash(hash_in) {}\n+\n+        ADD_SERIALIZE_METHODS;\n+\n+        template <typename Stream, typename Operation>\n+        inline void SerializationOp(Stream& s, Operation ser_action) {\n+            char prefix = DB_BLOCK_HASH;\n+            READWRITE(prefix);\n+            if (prefix != DB_BLOCK_HASH) {\n+                throw std::ios_base::failure(\"Invalid format for DB key\");\n+            }\n+\n+            READWRITE(hash);\n+        }\n+    };\n+};\n+\n+BlockFilterIndex::BlockFilterIndex(BlockFilterType filter_type,\n+                                   size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_filter_type(filter_type)\n+{\n+    const std::string& filter_name = BlockFilterTypeName(filter_type);\n+    if (filter_name == \"\") throw std::invalid_argument(\"unknown filter_type\");\n+\n+    fs::path path = GetDataDir() / \"indexes\" / \"blockfilter\" / filter_name;\n+    fs::create_directories(path);\n+\n+    m_name = filter_name + \" block filter index\";\n+    m_db = MakeUnique<BaseIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+    m_filter_fileseq = MakeUnique<FlatFileSeq>(std::move(path), \"fltr\", FILE_CHUNK_SIZE);\n+}\n+\n+bool BlockFilterIndex::Init()\n+{\n+    if (!m_db->Read(DB_FILTER_POS, m_next_filter_pos)) {\n+        m_next_filter_pos.nFile = 0;\n+        m_next_filter_pos.nPos = 0;\n+    }\n+    return BaseIndex::Init();\n+}\n+\n+bool BlockFilterIndex::Commit(CDBBatch& batch)\n+{\n+    const FlatFilePos& pos = m_next_filter_pos;\n+\n+    // Flush current filter file to disk.\n+    CAutoFile file(m_filter_fileseq->Open(pos), SER_DISK, CLIENT_VERSION);\n+    if (file.IsNull()) {\n+        return error(\"%s: Failed to open filter file %d\", __func__, pos.nFile);\n+    }\n+    if (!FileCommit(file.Get())) {\n+        return error(\"%s: Failed to commit filter file %d\", __func__, pos.nFile);\n+    }\n+\n+    batch.Write(DB_FILTER_POS, pos);\n+    return BaseIndex::Commit(batch);\n+}\n+\n+size_t BlockFilterIndex::WriteFilterToDisk(FlatFilePos& pos, const BlockFilter& filter)\n+{\n+    assert(filter.GetFilterType() == GetFilterType());\n+\n+    size_t data_size =\n+        GetSerializeSize(filter.GetBlockHash(), CLIENT_VERSION) +\n+        GetSerializeSize(filter.GetEncodedFilter(), CLIENT_VERSION);\n+\n+    // If writing the filter would overflow the file, flush and move to the next one.\n+    if (pos.nPos + data_size > MAX_FILE_SIZE) {\n+        CAutoFile last_file(m_filter_fileseq->Open(pos), SER_DISK, CLIENT_VERSION);\n+        if (last_file.IsNull()) {\n+            LogPrintf(\"%s: Failed to open filter file %d\\n\", __func__, pos.nFile);\n+            return 0;\n+        }\n+        if (!TruncateFile(last_file.Get(), pos.nPos)) {\n+            LogPrintf(\"%s: Failed to truncate filter file %d\\n\", __func__, pos.nFile);\n+            return 0;\n+        }\n+        if (!FileCommit(last_file.Get())) {\n+            LogPrintf(\"%s: Failed to commit filter file %d\\n\", __func__, pos.nFile);\n+            return 0;\n+        }\n+\n+        pos.nFile++;\n+        pos.nPos = 0;\n+    }\n+\n+    // Pre-allocate sufficient space for filter data.\n+    bool out_of_space;\n+    m_filter_fileseq->Allocate(pos, data_size, out_of_space);\n+    if (out_of_space) {\n+        LogPrintf(\"%s: out of disk space\\n\", __func__);\n+        return 0;\n+    }\n+\n+    CAutoFile fileout(m_filter_fileseq->Open(pos), SER_DISK, CLIENT_VERSION);\n+    if (fileout.IsNull()) {\n+        LogPrintf(\"%s: Failed to open filter file %d\\n\", __func__, pos.nFile);\n+        return 0;\n+    }\n+\n+    fileout << filter.GetBlockHash() << filter.GetEncodedFilter();\n+    return data_size;\n+}\n+\n+bool BlockFilterIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+    uint256 prev_header;\n+\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        prev_header = read_out.second.header;\n+    }\n+\n+    BlockFilter filter(m_filter_type, block, block_undo);\n+\n+    size_t bytes_written = WriteFilterToDisk(m_next_filter_pos, filter);\n+    if (bytes_written == 0) return false;\n+\n+    std::pair<uint256, DBVal> value;\n+    value.first = pindex->GetBlockHash();\n+    value.second.hash = filter.GetHash();\n+    value.second.header = filter.ComputeHeader(prev_header);\n+    value.second.pos = m_next_filter_pos;\n+\n+    if (!m_db->Write(DBHeightKey(pindex->nHeight), value)) {\n+        return false;\n+    }\n+\n+    m_next_filter_pos += bytes_written;\n+    return true;\n+}\n+\n+static bool CopyHeightIndexToHashIndex(CDBIterator& db_it, CDBBatch& batch,\n+                                       const std::string& index_name, int start_height,\n+                                       const CBlockIndex* stop_index)\n+{\n+    DBHeightKey key(start_height);\n+    db_it.Seek(key);\n+\n+    for (int height = start_height; height <= stop_index->nHeight; ++height) {\n+        if (!db_it.GetKey(key) || key.height != height) {\n+            return error(\"%s: unexpected key in %s: expected (%c, %d)\",\n+                         __func__, index_name, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        std::pair<uint256, DBVal> value;\n+        if (!db_it.GetValue(value)) {\n+            return error(\"%s: unable to read value in %s at key (%c, %d)\",\n+                         __func__, index_name, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        batch.Write(DBHashKey(value.first), std::move(value.second));\n+\n+        db_it.Next();\n+    }\n+    return true;\n+}\n+\n+bool BlockFilterIndex::Rewind(const CBlockIndex* current_tip, const CBlockIndex* new_tip)\n+{\n+    assert(current_tip->GetAncestor(new_tip->nHeight) == new_tip);\n+\n+    CDBBatch batch(*m_db);\n+    std::unique_ptr<CDBIterator> db_it(m_db->NewIterator());\n+\n+    // During a reorg, we need to copy all filters for blocks that are getting disconnected from the\n+    // height index to the hash index so we can still find them when the height index entries are\n+    // overwritten.\n+    if (!CopyHeightIndexToHashIndex(*db_it, batch, m_name, new_tip->nHeight, current_tip)) {\n+        return false;\n+    }\n+\n+    // The latest filter position gets written in Commit by the call to the BaseIndex::Rewind.",
      "path": "src/index/blockfilterindex.cpp",
      "position": 298,
      "original_position": 265,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "5964d2f97a221b898dbc477ca8f06ddfbe1d241e",
      "in_reply_to_id": 270178850,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I looked over your proposed changes. I updated one of the commit methods to CommitInternal as suggested (though the opposite one from you -- I think Commit calling CommitInternal makes more sense).\r\n\r\nHowever, I don't really like the change in behavior to Commit/Rewind. Commit *just* does DB/disk persistence, which is why errors can generally be ignored, so giving it responsibility for writing `m_best_block_index` makes everything more confusing. However, Rewind is a special case where ignoring errors in Commit would be unsafe. I added more comments on the methods to explain this.",
      "created_at": "2019-04-06T18:39:51Z",
      "updated_at": "2019-04-06T19:11:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r272805282",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/272805282"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 298,
      "original_line": 298,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/273094828",
      "pull_request_review_id": 223888002,
      "id": 273094828,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MzA5NDgyOA==",
      "diff_hunk": "@@ -54,8 +54,8 @@ class BaseIndex : public CValidationInterface\n     /// over and the sync thread exits.\n     void ThreadSync();\n \n-    /// Write the current chain block locator to the DB.\n-    bool WriteBestBlock(const CBlockIndex* block_index);\n+    /// Write the current chain block locator and other index state to the DB.\n+    bool Commit();",
      "path": "src/index/base.h",
      "position": 23,
      "original_position": 16,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "e3845e4a2a27d69a09ac0f8744b23530ad3bbe9e",
      "in_reply_to_id": 269303765,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/14121#discussion_r269303765\r\n\r\nIn commit \"index: Allow atomic commits of index state to be extended.\" (4368384f1d267b011e03a805f934f5c47e2ca1b2)\r\n\r\nCurrent change isn't what I was suggesting and I think is actually worse than the original (but still ok if this is what makes most sense to you). I was suggesting renaming the `Commit()` that's _internal_ to the base class `InternalCommit()`, not calling the other `Commit()` that's shared and overridden externally by subclasses `InternalCommit()`. Calling the overridden `Commit()` internal also breaks consistency with the other overridden methods (init, rewind, writeblock).",
      "created_at": "2019-04-08T15:03:50Z",
      "updated_at": "2019-04-10T00:08:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r273094828",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/273094828"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 65,
      "original_line": 65,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/273098190",
      "pull_request_review_id": 223888002,
      "id": 273098190,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MzA5ODE5MA==",
      "diff_hunk": "@@ -54,8 +54,15 @@ class BaseIndex : public CValidationInterface\n     /// over and the sync thread exits.\n     void ThreadSync();\n \n-    /// Write the current chain block locator to the DB.\n-    bool WriteBestBlock(const CBlockIndex* block_index);\n+    /// Write the current index state (eg. chain block locator and subclass-specific items) to disk.\n+    ///\n+    /// Recommendations for error handling:\n+    /// If called on a successor of the previous committed best block in the index, the index can",
      "path": "src/index/base.h",
      "position": 18,
      "original_position": 18,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "4368384f1d267b011e03a805f934f5c47e2ca1b2",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"index: Allow atomic commits of index state to be extended.\" (4368384f1d267b011e03a805f934f5c47e2ca1b2)\r\n\r\nThank you for adding this comment, but I had to read this several times before I figured out that the \"index can continue processing\" isn't describing something that happens externally but is describing what you are supposed to do when handling errors from this function. I'd suggest phrasing this less passively as:\r\n\r\n```c++\r\n/// Recommendation for handling errors returned by this function:\r\n///\r\n/// If calling this function fails, and m_best_block_index is a descendant\r\n/// of a block that was previously committed, it is safe to ignore the error\r\n/// because the index will not get corrupted (just needs to catch up from\r\n/// further behind on reboot). If m_best_block_index is not a descendant of\r\n/// the last block committed (due to a chain reorganization), the error can't\r\n/// be ignored and the index should halt until Commit succeeds or it could \r\n/// end up getting corrupted.\r\n```\r\n\r\n\r\n\r\n",
      "created_at": "2019-04-08T15:10:40Z",
      "updated_at": "2019-04-10T00:08:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r273098190",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/273098190"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 60,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/273719943",
      "pull_request_review_id": 223888002,
      "id": 273719943,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MzcxOTk0Mw==",
      "diff_hunk": "@@ -95,17 +95,22 @@ void BaseIndex::ThreadSync()\n         int64_t last_locator_write_time = 0;\n         while (true) {\n             if (m_interrupt) {\n-                WriteBestBlock(pindex);\n+                m_best_block_index = pindex;\n+                // No need to handle errors in Commit. If it fails, the error will be already be\n+                // logged. The best way to recover is to continue, as index cannot be corrupted by",
      "path": "src/index/base.cpp",
      "position": 19,
      "original_position": 19,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "4368384f1d267b011e03a805f934f5c47e2ca1b2",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"index: Allow atomic commits of index state to be extended.\" (4368384f1d267b011e03a805f934f5c47e2ca1b2)\r\n\r\nI don't understand \"index cannot be corrupted by a missed commit.\" Does it mean that if this Commit call fails you expect a future Commit call to fix whatever the problem is? If so, this seems like a property that holds for TxIndex, but not necessarily for BlockFilterIndex since that index is writing external files. Should clarify whatever is meant by this comment.\r\n\r\nIt would also be really helpful to give a specific example where this behavior would be desirable. Is there a case you are imagining where some commits fail and some succeed and after that everything is fine? I am having trouble trying to conjure up a scenario. \r\n\r\nNaively, as a user relying on the index I would expect that if updating the index ever failed, then the index would get disabled and lookups into the index would return RPC errors instead of silently returning bad data or incomplete data. I would probably also want writing to stop after the first error, so I could potentially debug the issue, and so my logs wouldn't fill up with more and more write errors after the first one.\r\n\r\nMaybe this implementation makes more sense than what I'm describing and is better for some reason, but whatever the rationale is, it could definitely be stated more clearly.",
      "created_at": "2019-04-09T21:53:15Z",
      "updated_at": "2019-04-10T00:08:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r273719943",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/273719943"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 100,
      "original_line": 100,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/273735411",
      "pull_request_review_id": 223888002,
      "id": 273735411,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3MzczNTQxMQ==",
      "diff_hunk": "@@ -0,0 +1,272 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <map>\n+\n+#include <index/blockfilterindex.h>\n+#include <util/system.h>\n+#include <validation.h>\n+\n+/* The index database stores three items for each block: the disk location of the encoded filter,\n+ * its dSHA256 hash, and the header. Those belonging to blocks on the active chain are indexed by\n+ * height, and those belonging to blocks that have been reorganized out of the active chain are\n+ * indexed by block hash. This ensures that filter data for any block that becomes part of the\n+ * active chain can always be retrieved, alleviating timing concerns.\n+ *\n+ * The filters themselves are stored in flat files and referenced by the LevelDB entries. This\n+ * minimizes the amount of data written to LevelDB and keeps the database values constant size.\n+ *\n+ * Keys for the height index have the type [DB_BLOCK_HEIGHT, uint32 (BE)]. The height is represented\n+ * as big-endian so that sequential reads of filters by height are fast.\n+ * Keys for the hash index have the type [DB_BLOCK_HASH, uint256].\n+ */\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_FILTER_POS = 'P';\n+\n+constexpr unsigned int MAX_FILE_SIZE = 0x1000000; // 16 MiB\n+/** The pre-allocation chunk size for fltr?????.dat files */\n+constexpr unsigned int FILE_CHUNK_SIZE = 0x100000; // 1 MiB\n+\n+namespace {\n+    struct DBVal\n+    {\n+        uint256 hash;\n+        uint256 header;\n+        FlatFilePos pos;\n+\n+        ADD_SERIALIZE_METHODS;\n+\n+        template <typename Stream, typename Operation>\n+        inline void SerializationOp(Stream& s, Operation ser_action) {\n+            READWRITE(hash);\n+            READWRITE(header);\n+            READWRITE(pos);\n+        }\n+    };\n+\n+    struct DBHeightKey\n+    {\n+        int height;\n+\n+        DBHeightKey() : height(0) {}\n+        DBHeightKey(int height_in) : height(height_in) {}\n+\n+        template<typename Stream>\n+        void Serialize(Stream& s) const\n+        {\n+            ser_writedata8(s, DB_BLOCK_HEIGHT);\n+            ser_writedata32be(s, height);\n+        }\n+\n+        template<typename Stream>\n+        void Unserialize(Stream& s)\n+        {\n+            char prefix = ser_readdata8(s);\n+            if (prefix != DB_BLOCK_HEIGHT) {\n+                throw std::ios_base::failure(\"Invalid format for DB key\");\n+            }\n+            height = ser_readdata32be(s);\n+        }\n+    };\n+\n+    struct DBHashKey\n+    {\n+        uint256 hash;\n+\n+        DBHashKey(const uint256& hash_in) : hash(hash_in) {}\n+\n+        ADD_SERIALIZE_METHODS;\n+\n+        template <typename Stream, typename Operation>\n+        inline void SerializationOp(Stream& s, Operation ser_action) {\n+            char prefix = DB_BLOCK_HASH;\n+            READWRITE(prefix);\n+            if (prefix != DB_BLOCK_HASH) {\n+                throw std::ios_base::failure(\"Invalid format for DB key\");\n+            }\n+\n+            READWRITE(hash);\n+        }\n+    };\n+};\n+\n+BlockFilterIndex::BlockFilterIndex(BlockFilterType filter_type,\n+                                   size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_filter_type(filter_type)\n+{\n+    const std::string& filter_name = BlockFilterTypeName(filter_type);\n+    if (filter_name == \"\") throw std::invalid_argument(\"unknown filter_type\");\n+\n+    fs::path path = GetDataDir() / \"indexes\" / \"blockfilter\" / filter_name;\n+    fs::create_directories(path);\n+\n+    m_name = filter_name + \" block filter index\";\n+    m_db = MakeUnique<BaseIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+    m_filter_fileseq = MakeUnique<FlatFileSeq>(std::move(path), \"fltr\", FILE_CHUNK_SIZE);\n+}\n+\n+bool BlockFilterIndex::Init()\n+{\n+    if (!m_db->Read(DB_FILTER_POS, m_next_filter_pos)) {\n+        m_next_filter_pos.nFile = 0;\n+        m_next_filter_pos.nPos = 0;\n+    }\n+    return BaseIndex::Init();\n+}\n+\n+bool BlockFilterIndex::Commit(CDBBatch& batch)\n+{\n+    const FlatFilePos& pos = m_next_filter_pos;\n+\n+    // Flush current filter file to disk.\n+    CAutoFile file(m_filter_fileseq->Open(pos), SER_DISK, CLIENT_VERSION);\n+    if (file.IsNull()) {\n+        return error(\"%s: Failed to open filter file %d\", __func__, pos.nFile);\n+    }\n+    if (!FileCommit(file.Get())) {\n+        return error(\"%s: Failed to commit filter file %d\", __func__, pos.nFile);\n+    }\n+\n+    batch.Write(DB_FILTER_POS, pos);\n+    return BaseIndex::Commit(batch);\n+}\n+\n+size_t BlockFilterIndex::WriteFilterToDisk(FlatFilePos& pos, const BlockFilter& filter)\n+{\n+    assert(filter.GetFilterType() == GetFilterType());\n+\n+    size_t data_size =\n+        GetSerializeSize(filter.GetBlockHash(), CLIENT_VERSION) +\n+        GetSerializeSize(filter.GetEncodedFilter(), CLIENT_VERSION);\n+\n+    // If writing the filter would overflow the file, flush and move to the next one.\n+    if (pos.nPos + data_size > MAX_FILE_SIZE) {\n+        CAutoFile last_file(m_filter_fileseq->Open(pos), SER_DISK, CLIENT_VERSION);\n+        if (last_file.IsNull()) {\n+            LogPrintf(\"%s: Failed to open filter file %d\\n\", __func__, pos.nFile);\n+            return 0;\n+        }\n+        if (!TruncateFile(last_file.Get(), pos.nPos)) {\n+            LogPrintf(\"%s: Failed to truncate filter file %d\\n\", __func__, pos.nFile);\n+            return 0;\n+        }\n+        if (!FileCommit(last_file.Get())) {\n+            LogPrintf(\"%s: Failed to commit filter file %d\\n\", __func__, pos.nFile);\n+            return 0;\n+        }\n+\n+        pos.nFile++;\n+        pos.nPos = 0;\n+    }\n+\n+    // Pre-allocate sufficient space for filter data.\n+    bool out_of_space;\n+    m_filter_fileseq->Allocate(pos, data_size, out_of_space);\n+    if (out_of_space) {\n+        LogPrintf(\"%s: out of disk space\\n\", __func__);\n+        return 0;\n+    }\n+\n+    CAutoFile fileout(m_filter_fileseq->Open(pos), SER_DISK, CLIENT_VERSION);\n+    if (fileout.IsNull()) {\n+        LogPrintf(\"%s: Failed to open filter file %d\\n\", __func__, pos.nFile);\n+        return 0;\n+    }\n+\n+    fileout << filter.GetBlockHash() << filter.GetEncodedFilter();\n+    return data_size;\n+}\n+\n+bool BlockFilterIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+    uint256 prev_header;\n+\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        prev_header = read_out.second.header;\n+    }\n+\n+    BlockFilter filter(m_filter_type, block, block_undo);\n+\n+    size_t bytes_written = WriteFilterToDisk(m_next_filter_pos, filter);\n+    if (bytes_written == 0) return false;\n+\n+    std::pair<uint256, DBVal> value;\n+    value.first = pindex->GetBlockHash();\n+    value.second.hash = filter.GetHash();\n+    value.second.header = filter.ComputeHeader(prev_header);\n+    value.second.pos = m_next_filter_pos;\n+\n+    if (!m_db->Write(DBHeightKey(pindex->nHeight), value)) {\n+        return false;\n+    }\n+\n+    m_next_filter_pos += bytes_written;\n+    return true;\n+}\n+\n+static bool CopyHeightIndexToHashIndex(CDBIterator& db_it, CDBBatch& batch,\n+                                       const std::string& index_name, int start_height,\n+                                       const CBlockIndex* stop_index)\n+{\n+    DBHeightKey key(start_height);\n+    db_it.Seek(key);\n+\n+    for (int height = start_height; height <= stop_index->nHeight; ++height) {\n+        if (!db_it.GetKey(key) || key.height != height) {\n+            return error(\"%s: unexpected key in %s: expected (%c, %d)\",\n+                         __func__, index_name, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        std::pair<uint256, DBVal> value;\n+        if (!db_it.GetValue(value)) {\n+            return error(\"%s: unable to read value in %s at key (%c, %d)\",\n+                         __func__, index_name, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        batch.Write(DBHashKey(value.first), std::move(value.second));\n+\n+        db_it.Next();\n+    }\n+    return true;\n+}\n+\n+bool BlockFilterIndex::Rewind(const CBlockIndex* current_tip, const CBlockIndex* new_tip)\n+{\n+    assert(current_tip->GetAncestor(new_tip->nHeight) == new_tip);\n+\n+    CDBBatch batch(*m_db);\n+    std::unique_ptr<CDBIterator> db_it(m_db->NewIterator());\n+\n+    // During a reorg, we need to copy all filters for blocks that are getting disconnected from the\n+    // height index to the hash index so we can still find them when the height index entries are\n+    // overwritten.\n+    if (!CopyHeightIndexToHashIndex(*db_it, batch, m_name, new_tip->nHeight, current_tip)) {\n+        return false;\n+    }\n+\n+    // The latest filter position gets written in Commit by the call to the BaseIndex::Rewind.",
      "path": "src/index/blockfilterindex.cpp",
      "position": 298,
      "original_position": 265,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "5964d2f97a221b898dbc477ca8f06ddfbe1d241e",
      "in_reply_to_id": 270178850,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/14121#discussion_r270178850\r\n\r\n> I don't really like the change in behavior to Commit/Rewind. Commit just does DB/disk persistence, which is why errors can generally be ignored\r\n\r\nUp to you but I'd encourage you to take another look. Your comment sounds more like a reaction to the method naming and not the substance of the change. I agree with you naming in my suggested change is not ideal. I actually wanted to call the base `Commit()` method `UpdatePosition()` and the overridden `Commit()` method `Flush()`, but I reverted back to your names to try to avoid adding unrelated differences. (IMO, all the mentions of committing and atomicity in this PR are misleading because almost nothing about the implementation is atomic. It is true that updates of m_best_block, DB_BEST_BLOCK, and fltr*.dat files are _ordered_, but operations being ordered is different from them being atomic, and it feels like too much is implied by the current naming even if the code is technically correct.)\r\n\r\nIn any case, here are the advantages of my change beyond reducing the amount of code:\r\n\r\n1) It updates m_best_block_index in the same place as DB_BEST_BLOCK.\r\n2) It flattens control flow, getting rid the BlockFilterIndex::Rewind calling BaseIndex::Rewind calling BlockFilterIndex::Commit calling BaseIndex::Commit sequence and the whole [call super](https://en.wikipedia.org/wiki/Call_super) anti-pattern.\r\n\r\nIt's sounds crazy to me to cite updating m_best_block_index and DB_BEST_BLOCK in _different_ places instead of the same place as an advantage of the current code. This seems like a footgun and anti-ergonomic decision, like putting the steering wheel on the outside of a car. When you want to turn your car left, do you just want to turn the wheel? Or is it better to stop the car, get out, point the wheel, make the turn, stop again, straighten, then keep going? When you update the position, do you just want to call one method? Or is it better to manually set a member variable and go through a rube-goldberg sequence of virtual method calls?",
      "created_at": "2019-04-09T22:54:42Z",
      "updated_at": "2019-04-10T00:08:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r273735411",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/273735411"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 298,
      "original_line": 298,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/273742872",
      "pull_request_review_id": 223888002,
      "id": 273742872,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3Mzc0Mjg3Mg==",
      "diff_hunk": "@@ -270,3 +291,134 @@ bool BlockFilterIndex::Rewind(const CBlockIndex* current_tip, const CBlockIndex*\n \n     return BaseIndex::Rewind(current_tip, new_tip);\n }\n+\n+static bool LookupOne(const CDBWrapper& db, const CBlockIndex* block_index, DBVal& result)\n+{\n+    // First check if the result is stored under the height index and the value there matches the\n+    // block hash. This should be the case if the block is on the active chain.\n+    std::pair<uint256, DBVal> read_out;\n+    if (!db.Read(DBHeightKey(block_index->nHeight), read_out)) {\n+        return false;\n+    }\n+    if (read_out.first == block_index->GetBlockHash()) {\n+        result = std::move(read_out.second);\n+        return true;\n+    }\n+\n+    // If value at the height index corresponds to an different block, the result will be stored in\n+    // the hash index.\n+    return db.Read(DBHashKey(block_index->GetBlockHash()), result);\n+}\n+\n+static bool LookupRange(CDBWrapper& db, const std::string& index_name, int start_height,\n+                        const CBlockIndex* stop_index, std::vector<DBVal>& results)\n+{\n+    if (start_height < 0) {\n+        return error(\"%s: start height (%d) is negative\", __func__, start_height);\n+    }\n+    if (start_height > stop_index->nHeight) {\n+        return error(\"%s: start height (%d) is greater than stop height (%d)\",\n+                     __func__, start_height, stop_index->nHeight);\n+    }\n+\n+    size_t results_size = static_cast<size_t>(stop_index->nHeight - start_height + 1);\n+    std::vector<std::pair<uint256, DBVal>> values(results_size);\n+\n+    DBHeightKey key(start_height);\n+    std::unique_ptr<CDBIterator> db_it(db.NewIterator());\n+    db_it->Seek(DBHeightKey(start_height));\n+    for (int height = start_height; height <= stop_index->nHeight; ++height) {\n+        if (!db_it->Valid() || !db_it->GetKey(key) || key.height != height) {\n+            return false;\n+        }\n+\n+        size_t i = static_cast<size_t>(height - start_height);\n+        if (!db_it->GetValue(values[i])) {\n+            return error(\"%s: unable to read value in %s at key (%c, %d)\",\n+                         __func__, index_name, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        db_it->Next();\n+    }\n+\n+    results.resize(results_size);",
      "path": "src/index/blockfilterindex.cpp",
      "position": 356,
      "original_position": 98,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "88ecade18fd615add2550c89f6152bc44fc4ee5e",
      "in_reply_to_id": 270231499,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/14121#discussion_r272764193\r\n\r\nIn commit \"index: Implement lookup methods on block filter index.\" (b5e8200db76f06d35099da502439dcbdfd0a1b3e)\r\n\r\n> This is the first time results is accessed in this method, and the size has to be set appropriately.\r\n\r\nSorry, you're right. I confused `results` with the `values` variable above.",
      "created_at": "2019-04-09T23:31:53Z",
      "updated_at": "2019-04-10T00:08:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r273742872",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/273742872"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 356,
      "original_line": 356,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/273744675",
      "pull_request_review_id": 223888002,
      "id": 273744675,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3Mzc0NDY3NQ==",
      "diff_hunk": "@@ -270,3 +291,134 @@ bool BlockFilterIndex::Rewind(const CBlockIndex* current_tip, const CBlockIndex*\n \n     return BaseIndex::Rewind(current_tip, new_tip);\n }\n+\n+static bool LookupOne(const CDBWrapper& db, const CBlockIndex* block_index, DBVal& result)\n+{\n+    // First check if the result is stored under the height index and the value there matches the\n+    // block hash. This should be the case if the block is on the active chain.\n+    std::pair<uint256, DBVal> read_out;\n+    if (!db.Read(DBHeightKey(block_index->nHeight), read_out)) {\n+        return false;\n+    }\n+    if (read_out.first == block_index->GetBlockHash()) {\n+        result = std::move(read_out.second);\n+        return true;\n+    }\n+\n+    // If value at the height index corresponds to an different block, the result will be stored in\n+    // the hash index.\n+    return db.Read(DBHashKey(block_index->GetBlockHash()), result);\n+}\n+\n+static bool LookupRange(CDBWrapper& db, const std::string& index_name, int start_height,\n+                        const CBlockIndex* stop_index, std::vector<DBVal>& results)\n+{\n+    if (start_height < 0) {\n+        return error(\"%s: start height (%d) is negative\", __func__, start_height);\n+    }\n+    if (start_height > stop_index->nHeight) {\n+        return error(\"%s: start height (%d) is greater than stop height (%d)\",\n+                     __func__, start_height, stop_index->nHeight);\n+    }\n+\n+    size_t results_size = static_cast<size_t>(stop_index->nHeight - start_height + 1);\n+    std::vector<std::pair<uint256, DBVal>> values(results_size);\n+\n+    DBHeightKey key(start_height);\n+    std::unique_ptr<CDBIterator> db_it(db.NewIterator());\n+    db_it->Seek(DBHeightKey(start_height));\n+    for (int height = start_height; height <= stop_index->nHeight; ++height) {\n+        if (!db_it->Valid() || !db_it->GetKey(key) || key.height != height) {\n+            return false;\n+        }\n+\n+        size_t i = static_cast<size_t>(height - start_height);\n+        if (!db_it->GetValue(values[i])) {\n+            return error(\"%s: unable to read value in %s at key (%c, %d)\",\n+                         __func__, index_name, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        db_it->Next();\n+    }\n+\n+    results.resize(results_size);\n+\n+    // Iterate backwards through block indexes collecting results in order to access the block hash\n+    // of each entry in case we need to look it up in the hash index.\n+    for (const CBlockIndex* block_index = stop_index;\n+         block_index && block_index->nHeight >= start_height;\n+         block_index = block_index->pprev) {\n+        uint256 block_hash = block_index->GetBlockHash();\n+\n+        size_t i = static_cast<size_t>(block_index->nHeight - start_height);\n+        if (block_hash == values[i].first) {\n+            results[i] = std::move(values[i].second);\n+            continue;",
      "path": "src/index/blockfilterindex.cpp",
      "position": 368,
      "original_position": 110,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "88ecade18fd615add2550c89f6152bc44fc4ee5e",
      "in_reply_to_id": 270233641,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/14121#discussion_r270233641\r\n\r\nIn commit \"index: Implement lookup methods on block filter index.\" (b5e8200db76f06d35099da502439dcbdfd0a1b3e)\r\n\r\n> Hmm? If it was a break, it would only copy one value to the result value rather than all of them.\r\n\r\nAgain this is me thinking `results` and `values` where the same variable, so it would be safe to break at the forking point because the earlier blocks would already be filled in. This could maybe be a legitimate optimization, but not worth implementing at this point.",
      "created_at": "2019-04-09T23:41:48Z",
      "updated_at": "2019-04-10T00:08:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r273744675",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/273744675"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 368,
      "original_line": 368,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/273796810",
      "pull_request_review_id": 224768077,
      "id": 273796810,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3Mzc5NjgxMA==",
      "diff_hunk": "@@ -54,8 +54,8 @@ class BaseIndex : public CValidationInterface\n     /// over and the sync thread exits.\n     void ThreadSync();\n \n-    /// Write the current chain block locator to the DB.\n-    bool WriteBestBlock(const CBlockIndex* block_index);\n+    /// Write the current chain block locator and other index state to the DB.\n+    bool Commit();",
      "path": "src/index/base.h",
      "position": 23,
      "original_position": 16,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "e3845e4a2a27d69a09ac0f8744b23530ad3bbe9e",
      "in_reply_to_id": 269303765,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The difference from `Init`, `Rewind`, and `WriteBlock` and is that `CommitInternal` has a different method signature from `Commit`, which is why I thought you found it confusing, whereas the others have only a single method signature that the child classes override.\r\n\r\nI don't have too much of a preference, though I do think switching the `Internal` would be weird, as I've generally found the convention to be that an outer function delegating to an inner helper function might call `FuncInternal`, not the other way around.",
      "created_at": "2019-04-10T05:45:16Z",
      "updated_at": "2019-04-10T05:45:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r273796810",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/273796810"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 65,
      "original_line": 65,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/274935198",
      "pull_request_review_id": 226081343,
      "id": 274935198,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NDkzNTE5OA==",
      "diff_hunk": "@@ -0,0 +1,282 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <map>\n+\n+#include <index/blockfilterindex.h>\n+#include <util/system.h>\n+#include <validation.h>\n+\n+/* The index database stores three items for each block: the disk location of the encoded filter,\n+ * its dSHA256 hash, and the header. Those belonging to blocks on the active chain are indexed by\n+ * height, and those belonging to blocks that have been reorganized out of the active chain are\n+ * indexed by block hash. This ensures that filter data for any block that becomes part of the\n+ * active chain can always be retrieved, alleviating timing concerns.\n+ *\n+ * The filters themselves are stored in flat files and referenced by the LevelDB entries. This\n+ * minimizes the amount of data written to LevelDB and keeps the database values constant size. The\n+ * disk location of the next block filter to be written (represented as a FlatFilePos) is stored\n+ * under the DB_FILTER_POS key.\n+ *\n+ * Keys for the height index have the type [DB_BLOCK_HEIGHT, uint32 (BE)]. The height is represented\n+ * as big-endian so that sequential reads of filters by height are fast.\n+ * Keys for the hash index have the type [DB_BLOCK_HASH, uint256].\n+ */\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_FILTER_POS = 'P';\n+\n+constexpr unsigned int MAX_FLTR_FILE_SIZE = 0x1000000; // 16 MiB\n+/** The pre-allocation chunk size for fltr?????.dat files */\n+constexpr unsigned int FLTR_FILE_CHUNK_SIZE = 0x100000; // 1 MiB\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 hash;\n+    uint256 header;\n+    FlatFilePos pos;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(hash);\n+        READWRITE(header);\n+        READWRITE(pos);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    DBHeightKey(int height_in) : height(height_in) {}",
      "path": "src/index/blockfilterindex.cpp",
      "position": 56,
      "original_position": 55,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "75a76e36199eba228856d59318cb54ca64ca6b57",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in commit 75a76e36199eb\r\n\r\nShould this be `explicit`?",
      "created_at": "2019-04-12T14:38:43Z",
      "updated_at": "2019-04-18T13:59:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r274935198",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/274935198"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 56,
      "original_line": 55,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/274958037",
      "pull_request_review_id": 226081343,
      "id": 274958037,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NDk1ODAzNw==",
      "diff_hunk": "@@ -114,31 +160,103 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, TestChain100Setup)\n         }\n     }\n \n-    // Check that new blocks get indexed.\n-    for (int i = 0; i < 10; i++) {\n-        CScript coinbase_script_pub_key = GetScriptForDestination(coinbaseKey.GetPubKey().GetID());\n-        std::vector<CMutableTransaction> no_txns;\n-        const CBlock& block = CreateAndProcessBlock(no_txns, coinbase_script_pub_key);\n+    // Create two forks.\n+    const CBlockIndex* tip;\n+    {\n+        LOCK(cs_main);\n+        tip = chainActive.Tip();\n+    }\n+    CScript coinbase_script_pub_key = GetScriptForDestination(coinbaseKey.GetPubKey().GetID());\n+    std::vector<std::shared_ptr<CBlock>> chainA, chainB;\n+    BOOST_REQUIRE(BuildChain(tip, coinbase_script_pub_key, 10, chainA));\n+    BOOST_REQUIRE(BuildChain(tip, coinbase_script_pub_key, 10, chainB));",
      "path": "src/test/blockfilter_index_tests.cpp",
      "position": 172,
      "original_position": 79,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "2bc90e4e7bf7fef56830b33b1fba678fd0dbd6d8",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in commit 2bc90e4e7bf7f:\r\n\r\nShould asset that the chains are different in this test to not accidentally reorg to the same chain?",
      "created_at": "2019-04-12T15:30:33Z",
      "updated_at": "2019-04-18T13:59:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r274958037",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/274958037"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 172,
      "original_line": 172,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/274962598",
      "pull_request_review_id": 226081343,
      "id": 274962598,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NDk2MjU5OA==",
      "diff_hunk": "@@ -954,10 +964,29 @@ bool AppInitParameterInteraction()\n         return InitError(strprintf(_(\"Specified blocks directory \\\"%s\\\" does not exist.\"), gArgs.GetArg(\"-blocksdir\", \"\").c_str()));\n     }\n \n+    // parse and validate enabled filter types\n+    std::string blockfilterindex_value = gArgs.GetArg(\"-blockfilterindex\", DEFAULT_BLOCKFILTERINDEX);\n+    if (blockfilterindex_value == \"\" || blockfilterindex_value == \"1\") {\n+        g_enabled_filter_types = AllBlockFilterTypes();\n+    } else if (blockfilterindex_value != \"0\") {\n+        const std::vector<std::string> names = gArgs.GetArgs(\"-blockfilterindex\");\n+        g_enabled_filter_types.reserve(names.size());\n+        for (const auto& name : names) {\n+            BlockFilterType filter_type;\n+            if (!BlockFilterTypeByName(name, filter_type)) {\n+                return InitError(strprintf(_(\"Unknown -blockfilterindex value %s.\"), name));\n+            }\n+            g_enabled_filter_types.push_back(filter_type);\n+        }\n+    }\n+\n     // if using block pruning, then disallow txindex\n     if (gArgs.GetArg(\"-prune\", 0)) {\n         if (gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX))\n             return InitError(_(\"Prune mode is incompatible with -txindex.\"));\n+        if (!g_enabled_filter_types.empty()) {\n+            return InitError(_(\"Prune mode is incompatible with -blockfilterindex.\"));\n+        }",
      "path": "src/init.cpp",
      "position": 85,
      "original_position": 85,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "ff351050968f290787cd5fa456d394380f64fec3",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in commit ff351050968f290:\r\n\r\nWhy is it incompatible? Maybe should add a cpp comment to explain.\r\n\r\nSee also https://github.com/bitcoin/bips/blob/master/bip-0157.mediawiki#node-operation\r\n\r\n\"Nodes MAY prune block data after generating and storing all filters for a block.\"",
      "created_at": "2019-04-12T15:41:59Z",
      "updated_at": "2019-04-18T13:59:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r274962598",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/274962598"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 989,
      "original_line": 989,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/276673807",
      "pull_request_review_id": 226081343,
      "id": 276673807,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NjY3MzgwNw==",
      "diff_hunk": "@@ -118,6 +118,7 @@ static const int64_t MAX_FEE_ESTIMATION_TIP_AGE = 3 * 60 * 60;\n static const bool DEFAULT_PERMIT_BAREMULTISIG = true;\n static const bool DEFAULT_CHECKPOINTS_ENABLED = true;\n static const bool DEFAULT_TXINDEX = false;\n+static const char* const DEFAULT_BLOCKFILTERINDEX = \"0\";",
      "path": "src/validation.h",
      "position": 4,
      "original_position": 4,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I believe we make this `extern` in the header, so that it is not added to each obj file?",
      "created_at": "2019-04-18T13:55:21Z",
      "updated_at": "2019-04-18T13:59:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r276673807",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/276673807"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 121,
      "original_line": 121,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/277112847",
      "pull_request_review_id": 228852799,
      "id": 277112847,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NzExMjg0Nw==",
      "diff_hunk": "@@ -954,10 +964,29 @@ bool AppInitParameterInteraction()\n         return InitError(strprintf(_(\"Specified blocks directory \\\"%s\\\" does not exist.\"), gArgs.GetArg(\"-blocksdir\", \"\").c_str()));\n     }\n \n+    // parse and validate enabled filter types\n+    std::string blockfilterindex_value = gArgs.GetArg(\"-blockfilterindex\", DEFAULT_BLOCKFILTERINDEX);\n+    if (blockfilterindex_value == \"\" || blockfilterindex_value == \"1\") {\n+        g_enabled_filter_types = AllBlockFilterTypes();\n+    } else if (blockfilterindex_value != \"0\") {\n+        const std::vector<std::string> names = gArgs.GetArgs(\"-blockfilterindex\");\n+        g_enabled_filter_types.reserve(names.size());\n+        for (const auto& name : names) {\n+            BlockFilterType filter_type;\n+            if (!BlockFilterTypeByName(name, filter_type)) {\n+                return InitError(strprintf(_(\"Unknown -blockfilterindex value %s.\"), name));\n+            }\n+            g_enabled_filter_types.push_back(filter_type);\n+        }\n+    }\n+\n     // if using block pruning, then disallow txindex\n     if (gArgs.GetArg(\"-prune\", 0)) {\n         if (gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX))\n             return InitError(_(\"Prune mode is incompatible with -txindex.\"));\n+        if (!g_enabled_filter_types.empty()) {\n+            return InitError(_(\"Prune mode is incompatible with -blockfilterindex.\"));\n+        }",
      "path": "src/init.cpp",
      "position": 85,
      "original_position": 85,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "ff351050968f290787cd5fa456d394380f64fec3",
      "in_reply_to_id": 274962598,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You can turn on the filter index and it will build in the background using the blocks on disk. This wouldn't work in pruned mode. It might be safe though to allow pruning if the block filter index tip is already within chain tip height - MIN_BLOCKS_TO_KEEP. But then we couldn't prune until the block filter index is in sync (it has its own sort of initial sync logic).\r\n\r\nNot prohibitively difficult though, just requires a bit more thought.",
      "created_at": "2019-04-19T23:38:00Z",
      "updated_at": "2019-04-19T23:38:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r277112847",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/277112847"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 989,
      "original_line": 989,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/277112950",
      "pull_request_review_id": 228852941,
      "id": 277112950,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NzExMjk1MA==",
      "diff_hunk": "@@ -0,0 +1,282 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <map>\n+\n+#include <index/blockfilterindex.h>\n+#include <util/system.h>\n+#include <validation.h>\n+\n+/* The index database stores three items for each block: the disk location of the encoded filter,\n+ * its dSHA256 hash, and the header. Those belonging to blocks on the active chain are indexed by\n+ * height, and those belonging to blocks that have been reorganized out of the active chain are\n+ * indexed by block hash. This ensures that filter data for any block that becomes part of the\n+ * active chain can always be retrieved, alleviating timing concerns.\n+ *\n+ * The filters themselves are stored in flat files and referenced by the LevelDB entries. This\n+ * minimizes the amount of data written to LevelDB and keeps the database values constant size. The\n+ * disk location of the next block filter to be written (represented as a FlatFilePos) is stored\n+ * under the DB_FILTER_POS key.\n+ *\n+ * Keys for the height index have the type [DB_BLOCK_HEIGHT, uint32 (BE)]. The height is represented\n+ * as big-endian so that sequential reads of filters by height are fast.\n+ * Keys for the hash index have the type [DB_BLOCK_HASH, uint256].\n+ */\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_FILTER_POS = 'P';\n+\n+constexpr unsigned int MAX_FLTR_FILE_SIZE = 0x1000000; // 16 MiB\n+/** The pre-allocation chunk size for fltr?????.dat files */\n+constexpr unsigned int FLTR_FILE_CHUNK_SIZE = 0x100000; // 1 MiB\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 hash;\n+    uint256 header;\n+    FlatFilePos pos;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(hash);\n+        READWRITE(header);\n+        READWRITE(pos);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    DBHeightKey(int height_in) : height(height_in) {}",
      "path": "src/index/blockfilterindex.cpp",
      "position": 56,
      "original_position": 55,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "75a76e36199eba228856d59318cb54ca64ca6b57",
      "in_reply_to_id": 274935198,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, probably a good idea.",
      "created_at": "2019-04-19T23:39:03Z",
      "updated_at": "2019-04-19T23:39:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r277112950",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/277112950"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 56,
      "original_line": 55,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/277113000",
      "pull_request_review_id": 228853000,
      "id": 277113000,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NzExMzAwMA==",
      "diff_hunk": "@@ -114,31 +160,103 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, TestChain100Setup)\n         }\n     }\n \n-    // Check that new blocks get indexed.\n-    for (int i = 0; i < 10; i++) {\n-        CScript coinbase_script_pub_key = GetScriptForDestination(coinbaseKey.GetPubKey().GetID());\n-        std::vector<CMutableTransaction> no_txns;\n-        const CBlock& block = CreateAndProcessBlock(no_txns, coinbase_script_pub_key);\n+    // Create two forks.\n+    const CBlockIndex* tip;\n+    {\n+        LOCK(cs_main);\n+        tip = chainActive.Tip();\n+    }\n+    CScript coinbase_script_pub_key = GetScriptForDestination(coinbaseKey.GetPubKey().GetID());\n+    std::vector<std::shared_ptr<CBlock>> chainA, chainB;\n+    BOOST_REQUIRE(BuildChain(tip, coinbase_script_pub_key, 10, chainA));\n+    BOOST_REQUIRE(BuildChain(tip, coinbase_script_pub_key, 10, chainB));",
      "path": "src/test/blockfilter_index_tests.cpp",
      "position": 172,
      "original_position": 79,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "2bc90e4e7bf7fef56830b33b1fba678fd0dbd6d8",
      "in_reply_to_id": 274958037,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't understand.",
      "created_at": "2019-04-19T23:39:31Z",
      "updated_at": "2019-04-19T23:39:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r277113000",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/277113000"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 172,
      "original_line": 172,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/277113041",
      "pull_request_review_id": 228853054,
      "id": 277113041,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NzExMzA0MQ==",
      "diff_hunk": "@@ -118,6 +118,7 @@ static const int64_t MAX_FEE_ESTIMATION_TIP_AGE = 3 * 60 * 60;\n static const bool DEFAULT_PERMIT_BAREMULTISIG = true;\n static const bool DEFAULT_CHECKPOINTS_ENABLED = true;\n static const bool DEFAULT_TXINDEX = false;\n+static const char* const DEFAULT_BLOCKFILTERINDEX = \"0\";",
      "path": "src/validation.h",
      "position": 4,
      "original_position": 4,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "in_reply_to_id": 276673807,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah. This applies to all the defaults, right?",
      "created_at": "2019-04-19T23:40:03Z",
      "updated_at": "2019-04-19T23:40:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r277113041",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/277113041"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 121,
      "original_line": 121,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/277302973",
      "pull_request_review_id": 229078117,
      "id": 277302973,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NzMwMjk3Mw==",
      "diff_hunk": "@@ -118,6 +118,7 @@ static const int64_t MAX_FEE_ESTIMATION_TIP_AGE = 3 * 60 * 60;\n static const bool DEFAULT_PERMIT_BAREMULTISIG = true;\n static const bool DEFAULT_CHECKPOINTS_ENABLED = true;\n static const bool DEFAULT_TXINDEX = false;\n+static const char* const DEFAULT_BLOCKFILTERINDEX = \"0\";",
      "path": "src/validation.h",
      "position": 4,
      "original_position": 4,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "in_reply_to_id": 276673807,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think only strings and cstrings and not POD types",
      "created_at": "2019-04-22T14:15:47Z",
      "updated_at": "2019-04-22T14:15:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r277302973",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/277302973"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 121,
      "original_line": 121,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/334282663",
      "pull_request_review_id": 301053159,
      "id": 334282663,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNDI4MjY2Mw==",
      "diff_hunk": "@@ -114,31 +160,103 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, TestChain100Setup)\n         }\n     }\n \n-    // Check that new blocks get indexed.\n-    for (int i = 0; i < 10; i++) {\n-        CScript coinbase_script_pub_key = GetScriptForDestination(coinbaseKey.GetPubKey().GetID());\n-        std::vector<CMutableTransaction> no_txns;\n-        const CBlock& block = CreateAndProcessBlock(no_txns, coinbase_script_pub_key);\n+    // Create two forks.\n+    const CBlockIndex* tip;\n+    {\n+        LOCK(cs_main);\n+        tip = chainActive.Tip();\n+    }\n+    CScript coinbase_script_pub_key = GetScriptForDestination(coinbaseKey.GetPubKey().GetID());\n+    std::vector<std::shared_ptr<CBlock>> chainA, chainB;\n+    BOOST_REQUIRE(BuildChain(tip, coinbase_script_pub_key, 10, chainA));\n+    BOOST_REQUIRE(BuildChain(tip, coinbase_script_pub_key, 10, chainB));",
      "path": "src/test/blockfilter_index_tests.cpp",
      "position": 172,
      "original_position": 79,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "2bc90e4e7bf7fef56830b33b1fba678fd0dbd6d8",
      "in_reply_to_id": 274958037,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@jimpo I am adding this assert, and the tests still pass. What is the point of `chainA` and `chainB`, when they are identical?\r\n\r\n```diff\r\ndiff --git a/src/test/blockfilter_index_tests.cpp b/src/test/blockfilter_index_tests.cpp\r\nindex cf87aa9303..a7eb057b05 100644\r\n--- a/src/test/blockfilter_index_tests.cpp\r\n+++ b/src/test/blockfilter_index_tests.cpp\r\n@@ -171,6 +171,7 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, TestChain100Setup)\r\n     std::vector<std::shared_ptr<CBlock>> chainA, chainB;\r\n     BOOST_REQUIRE(BuildChain(tip, coinbase_script_pub_key, 10, chainA));\r\n     BOOST_REQUIRE(BuildChain(tip, coinbase_script_pub_key, 10, chainB));\r\n+    BOOST_CHECK_EQUAL(chainA.back()->GetHash(), chainB.back()->GetHash());\r\n \r\n     // Check that new blocks on chain A get indexed.\r\n     uint256 chainA_last_header = last_header;\r\n",
      "created_at": "2019-10-13T15:29:30Z",
      "updated_at": "2019-10-13T15:29:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r334282663",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/334282663"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 172,
      "original_line": 172,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/334642521",
      "pull_request_review_id": 301514430,
      "id": 334642521,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNDY0MjUyMQ==",
      "diff_hunk": "@@ -114,31 +160,103 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, TestChain100Setup)\n         }\n     }\n \n-    // Check that new blocks get indexed.\n-    for (int i = 0; i < 10; i++) {\n-        CScript coinbase_script_pub_key = GetScriptForDestination(coinbaseKey.GetPubKey().GetID());\n-        std::vector<CMutableTransaction> no_txns;\n-        const CBlock& block = CreateAndProcessBlock(no_txns, coinbase_script_pub_key);\n+    // Create two forks.\n+    const CBlockIndex* tip;\n+    {\n+        LOCK(cs_main);\n+        tip = chainActive.Tip();\n+    }\n+    CScript coinbase_script_pub_key = GetScriptForDestination(coinbaseKey.GetPubKey().GetID());\n+    std::vector<std::shared_ptr<CBlock>> chainA, chainB;\n+    BOOST_REQUIRE(BuildChain(tip, coinbase_script_pub_key, 10, chainA));\n+    BOOST_REQUIRE(BuildChain(tip, coinbase_script_pub_key, 10, chainB));",
      "path": "src/test/blockfilter_index_tests.cpp",
      "position": 172,
      "original_position": 79,
      "commit_id": "c7efb652f3543b001b4dd22186a354605b14f47e",
      "original_commit_id": "2bc90e4e7bf7fef56830b33b1fba678fd0dbd6d8",
      "in_reply_to_id": 274958037,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You're totally right, good catch! Opened #17140 ",
      "created_at": "2019-10-14T20:08:16Z",
      "updated_at": "2019-10-14T20:08:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/14121#discussion_r334642521",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/334642521"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14121"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 172,
      "original_line": 172,
      "side": "RIGHT"
    }
  ]
}