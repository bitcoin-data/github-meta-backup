{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937",
    "id": 484402357,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDg0NDAyMzU3",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19937",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/19937.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/19937.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19937",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19937/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/595a34dbea01954cb0372b0210d2fd64357a1762",
    "number": 19937,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "signet mining utility",
    "user": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Adds `contrib/signet/miner` for mining signet blocks.\r\n\r\nAdds `bitcoin-util` cli utility, with the idea being it can provide bitcoin related functionality that does not rely on the ability to access a running node. Only subcommand currently is \"grind\" which takes a hex-encoded header and grinds its nonce until its nBits is satisfied.\r\n\r\nUpdates `getblocktemplate` to include `signet_challenge` field, and makes `getblocktemplate` require the signet rule when invoked on the signet change. Removes connectivity and IBD checks from `getblocktemplate` when applied to a test chain (regtest, testnet, signet).",
    "labels": [
      {
        "id": 98279177,
        "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
        "name": "RPC/REST/ZMQ",
        "color": "0052cc",
        "default": false
      },
      {
        "id": 118378960,
        "node_id": "MDU6TGFiZWwxMTgzNzg5NjA=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Mining",
        "name": "Mining",
        "color": "c7def8",
        "default": false
      },
      {
        "id": 231994551,
        "node_id": "MDU6TGFiZWwyMzE5OTQ1NTE=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Scripts%20and%20tools",
        "name": "Scripts and tools",
        "color": "ffffee",
        "default": false
      },
      {
        "id": 241832923,
        "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
        "name": "Utils/log/libs",
        "description": "",
        "color": "5319e7",
        "default": false
      }
    ],
    "active_lock_reason": "resolved",
    "created_at": "2020-09-10T22:38:26Z",
    "updated_at": "2022-08-16T17:12:12Z",
    "closed_at": "2021-01-12T11:54:30Z",
    "mergeable_state": "unknown",
    "merged_at": "2021-01-12T11:54:30Z",
    "merge_commit_sha": "7b975639ef93b50537a3ec6326b54d7218afc8da",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "ajtowns:202009-signet-generate",
      "ref": "202009-signet-generate",
      "sha": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 53941525,
        "node_id": "MDEwOlJlcG9zaXRvcnk1Mzk0MTUyNQ==",
        "name": "bitcoin",
        "full_name": "ajtowns/bitcoin",
        "owner": {
          "login": "ajtowns",
          "id": 127186,
          "node_id": "MDQ6VXNlcjEyNzE4Ng==",
          "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ajtowns",
          "html_url": "https://github.com/ajtowns",
          "followers_url": "https://api.github.com/users/ajtowns/followers",
          "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
          "organizations_url": "https://api.github.com/users/ajtowns/orgs",
          "repos_url": "https://api.github.com/users/ajtowns/repos",
          "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/ajtowns/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/ajtowns/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/ajtowns/bitcoin",
        "archive_url": "https://api.github.com/repos/ajtowns/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/ajtowns/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/ajtowns/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/ajtowns/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/ajtowns/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/ajtowns/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/ajtowns/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/ajtowns/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/ajtowns/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/ajtowns/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/ajtowns/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/ajtowns/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/ajtowns/bitcoin/events",
        "forks_url": "https://api.github.com/repos/ajtowns/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/ajtowns/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/ajtowns/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/ajtowns/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/ajtowns/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/ajtowns/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/ajtowns/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/ajtowns/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/ajtowns/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/ajtowns/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/ajtowns/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/ajtowns/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/ajtowns/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/ajtowns/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/ajtowns/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/ajtowns/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:ajtowns/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/ajtowns/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/ajtowns/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/ajtowns/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/ajtowns/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/ajtowns/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/ajtowns/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/ajtowns/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/ajtowns/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/ajtowns/bitcoin/hooks",
        "svn_url": "https://github.com/ajtowns/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 2,
        "stargazers_count": 7,
        "watchers_count": 7,
        "size": 262427,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-05T19:54:41Z",
        "created_at": "2016-03-15T12:11:24Z",
        "updated_at": "2023-03-19T19:22:46Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "7838db141b76fa72fcb9c3a3081859f9db102039",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69818,
        "watchers_count": 69818,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T22:42:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T03:51:27Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 1015,
    "deletions": 7,
    "changed_files": 9,
    "commits": 5,
    "review_comments": 59,
    "comments": 38
  },
  "events": [
    {
      "event": "labeled",
      "id": 3753515841,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM3NTM1MTU4NDE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3753515841",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-10T23:01:15Z",
      "label": {
        "name": "Build system",
        "color": "5319e7"
      }
    },
    {
      "event": "labeled",
      "id": 3753515843,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM3NTM1MTU4NDM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3753515843",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-10T23:01:15Z",
      "label": {
        "name": "GUI",
        "color": "02d7e1"
      }
    },
    {
      "event": "labeled",
      "id": 3753515845,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM3NTM1MTU4NDU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3753515845",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-10T23:01:15Z",
      "label": {
        "name": "Mining",
        "color": "c7def8"
      }
    },
    {
      "event": "labeled",
      "id": 3753515847,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM3NTM1MTU4NDc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3753515847",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-10T23:01:15Z",
      "label": {
        "name": "RPC/REST/ZMQ",
        "color": "0052cc"
      }
    },
    {
      "event": "labeled",
      "id": 3753515849,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM3NTM1MTU4NDk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3753515849",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-10T23:01:15Z",
      "label": {
        "name": "Scripts and tools",
        "color": "ffffee"
      }
    },
    {
      "event": "labeled",
      "id": 3753515852,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM3NTM1MTU4NTI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3753515852",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-10T23:01:15Z",
      "label": {
        "name": "Utils/log/libs",
        "color": "5319e7"
      }
    },
    {
      "event": "labeled",
      "id": 3753515854,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM3NTM1MTU4NTQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3753515854",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-10T23:01:15Z",
      "label": {
        "name": "Validation",
        "color": "6060aa"
      }
    },
    {
      "event": "commented",
      "id": 695214773,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY5NTIxNDc3Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/695214773",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-19T13:39:39Z",
      "updated_at": "2020-12-22T16:08:49Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-695214773",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19937"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3790670216,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzc5MDY3MDIxNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3790670216",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-21T21:33:07Z"
    },
    {
      "event": "unlabeled",
      "id": 3790675170,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50Mzc5MDY3NTE3MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3790675170",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-21T21:34:51Z",
      "label": {
        "name": "GUI",
        "color": "02d7e1"
      }
    },
    {
      "event": "unlabeled",
      "id": 3790675172,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50Mzc5MDY3NTE3Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3790675172",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-21T21:34:51Z",
      "label": {
        "name": "Validation",
        "color": "6060aa"
      }
    },
    {
      "event": "ready_for_review",
      "id": 3790814381,
      "node_id": "MDE5OlJlYWR5Rm9yUmV2aWV3RXZlbnQzNzkwODE0Mzgx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3790814381",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-21T22:26:46Z"
    },
    {
      "event": "commented",
      "id": 696419619,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY5NjQxOTYxOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/696419619",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-21T22:48:42Z",
      "updated_at": "2020-11-11T07:29:05Z",
      "author_association": "MEMBER",
      "body": "EDIT: the following is no longer accurate, see contrib/signet/README.md instead\r\n\r\nSome examples:\r\n\r\n * Generate blocks indefinitely, at 10 minute intervals, paying block reward to the given address, using bitcoin-util to do multi-threaded proof-of-work: `$ ./contrib/signet/generate.py --cli='./bitcoin-cli' generate 10 --block-time=600 --address=\"tb1...\" --grind-cmd='./bitcoin-util grind'`\r\n * Generate 10 blocks, at 10 minute intervals, paying block reward to the given address, with timestamps starting at the genesis block, using single-threaded python code to do proof-of-work: `$ ./contrib/signet/generate.py --cli='./bitcoin-cli' generate 10 --block-time=600 --address=\"tb1...\" --backdate 0`\r\n * Generate blocks indefinitely at 30 minute intervals, but only if there hasn't been a block in the meantime, paying the reward for block height X to the X'th address from the given descriptor: `$ ./contrib/signet/generate.py --cli='./bitcoin-cli' generate -1 --block-time=1800 --descriptor=\"wpkh(...)#...\" --secondary`\r\n\r\nUsing a \"--block-time=600\" will get blocks exactly on 10 minute boundaries, with very little variation. You can alternatively use `--mining-time=20` to target spending an average of 20 seconds of cpu time per block, which should get a mainnet-like distribution of block times once difficulty has stabilised, assuming only one miner. \r\n\r\nYou can also generate blocks more manually by running:\r\n\r\n * `./bitcoin-cli -signet getblocktemplate '{\"rules\": [\"signet\",\"segwit\"]}' | ../contrib/signet/generate.py --cli='./bitcoin-cli' genpsbt --address=tb1...` -- to generate a psbt, encoding the signet txs and the raw block\r\n * `./bitcoin-cli -signet -stdin walletprocesspsbt` to sign the psbt from stdin, or some other method of signing a psbt\r\n * `../contrib/signet/generate.py solvepsbt --grind-cmd='./bitcoin-util grind' | ./bitcoin-cli -signet submitblock` to convert the signed psbt into a signet commitment and submit the block\r\n\r\nUsing the `--cli` option to specify `./bitcoin-cli -conf=/path/to/custom-signet.conf` and having `signet=1`, `signetchallenge` and a custom datadir all specified in the conf file is probably sensible.",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-696419619",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19937"
    },
    {
      "event": "unlabeled",
      "id": 3793293297,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50Mzc5MzI5MzI5Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3793293297",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-22T13:33:44Z",
      "label": {
        "name": "Build system",
        "color": "5319e7"
      }
    },
    {
      "event": "unlabeled",
      "id": 3793293304,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50Mzc5MzI5MzMwNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3793293304",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-22T13:33:44Z",
      "label": {
        "name": "Mining",
        "color": "c7def8"
      }
    },
    {
      "event": "unlabeled",
      "id": 3793293309,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50Mzc5MzI5MzMwOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3793293309",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-22T13:33:44Z",
      "label": {
        "name": "RPC/REST/ZMQ",
        "color": "0052cc"
      }
    },
    {
      "event": "reviewed",
      "id": 493464528,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzNDY0NTI4",
      "url": null,
      "actor": null,
      "commit_id": "e077aa7055e71f08a7d2cfbb29702832899fee04",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Is there a risk in exposing the miner on RPC as well? Bitcoind is running anyway somewhere, and some miners might want to run everything in one process for convenience? No strong opinion.",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#pullrequestreview-493464528",
      "submitted_at": "2020-09-22T13:43:19Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
    },
    {
      "event": "labeled",
      "id": 3793343879,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM3OTMzNDM4Nzk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3793343879",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-22T13:44:02Z",
      "label": {
        "name": "RPC/REST/ZMQ",
        "color": "0052cc"
      }
    },
    {
      "event": "labeled",
      "id": 3793344760,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM3OTMzNDQ3NjA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3793344760",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-22T13:44:12Z",
      "label": {
        "name": "Mining",
        "color": "c7def8"
      }
    },
    {
      "event": "commented",
      "id": 696851260,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY5Njg1MTI2MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/696851260",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-22T17:00:40Z",
      "updated_at": "2020-09-22T17:00:40Z",
      "author_association": "MEMBER",
      "body": "I don't think there's a risk in doing it over RPC; it's that it puts the wallet code in the middle of two mining codes bits (ie, generate a template, sign, grind proof of work). Merging mining and wallet code seemed a bit ugly, but keeping them distinct means you need a script to combine them for you, so it was easier to put everything in the script. Also seemed easier to add an RPC later if that makes sense, than to remove it if it doesn't make sense.",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-696851260",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19937"
    },
    {
      "event": "reviewed",
      "id": 499142142,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5MTQyMTQy",
      "url": null,
      "actor": null,
      "commit_id": "a55abfe4259fbccf78be45ca2edcafb82cf11718",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Tested ACK e077aa7055e71f08a7d2cfbb29702832899fee04",
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#pullrequestreview-499142142",
      "submitted_at": "2020-09-30T07:35:32Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
    },
    {
      "event": "reviewed",
      "id": 499378286,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5Mzc4Mjg2",
      "url": null,
      "actor": null,
      "commit_id": "e077aa7055e71f08a7d2cfbb29702832899fee04",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#pullrequestreview-499378286",
      "submitted_at": "2020-09-30T12:32:51Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
    },
    {
      "event": "commented",
      "id": 702022998,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwMjAyMjk5OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/702022998",
      "actor": {
        "login": "jsarenik",
        "id": 244565,
        "node_id": "MDQ6VXNlcjI0NDU2NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/244565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jsarenik",
        "html_url": "https://github.com/jsarenik",
        "followers_url": "https://api.github.com/users/jsarenik/followers",
        "following_url": "https://api.github.com/users/jsarenik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jsarenik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jsarenik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jsarenik/subscriptions",
        "organizations_url": "https://api.github.com/users/jsarenik/orgs",
        "repos_url": "https://api.github.com/users/jsarenik/repos",
        "events_url": "https://api.github.com/users/jsarenik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jsarenik/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-01T09:50:31Z",
      "updated_at": "2020-10-01T09:50:31Z",
      "author_association": "NONE",
      "body": "I still have no idea how to run a custom signet on this PR's commit f4c6ec1deaf8cf4dbbbc2633886112ebdddb31dc (which has conflicts when I try to rebase it to master locally).\r\n\r\nThe [documentation at bitcoin.it](https://en.bitcoin.it/wiki/Signet#Custom_Signet) is out of date. Please help me so that I can test.",
      "user": {
        "login": "jsarenik",
        "id": 244565,
        "node_id": "MDQ6VXNlcjI0NDU2NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/244565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jsarenik",
        "html_url": "https://github.com/jsarenik",
        "followers_url": "https://api.github.com/users/jsarenik/followers",
        "following_url": "https://api.github.com/users/jsarenik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jsarenik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jsarenik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jsarenik/subscriptions",
        "organizations_url": "https://api.github.com/users/jsarenik/orgs",
        "repos_url": "https://api.github.com/users/jsarenik/repos",
        "events_url": "https://api.github.com/users/jsarenik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jsarenik/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-702022998",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19937"
    },
    {
      "event": "commented",
      "id": 702036426,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwMjAzNjQyNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/702036426",
      "actor": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-01T10:16:18Z",
      "updated_at": "2020-10-01T10:16:18Z",
      "author_association": "MEMBER",
      "body": "@jsarenik I've updated the running an issuer section of the docs. The rest are fine I think. Lemme know if not.",
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-702036426",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19937"
    },
    {
      "event": "mentioned",
      "id": 3828683591,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzgyODY4MzU5MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3828683591",
      "actor": {
        "login": "jsarenik",
        "id": 244565,
        "node_id": "MDQ6VXNlcjI0NDU2NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/244565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jsarenik",
        "html_url": "https://github.com/jsarenik",
        "followers_url": "https://api.github.com/users/jsarenik/followers",
        "following_url": "https://api.github.com/users/jsarenik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jsarenik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jsarenik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jsarenik/subscriptions",
        "organizations_url": "https://api.github.com/users/jsarenik/orgs",
        "repos_url": "https://api.github.com/users/jsarenik/repos",
        "events_url": "https://api.github.com/users/jsarenik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jsarenik/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-01T10:16:18Z"
    },
    {
      "event": "subscribed",
      "id": 3828683602,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM4Mjg2ODM2MDI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3828683602",
      "actor": {
        "login": "jsarenik",
        "id": 244565,
        "node_id": "MDQ6VXNlcjI0NDU2NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/244565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jsarenik",
        "html_url": "https://github.com/jsarenik",
        "followers_url": "https://api.github.com/users/jsarenik/followers",
        "following_url": "https://api.github.com/users/jsarenik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jsarenik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jsarenik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jsarenik/subscriptions",
        "organizations_url": "https://api.github.com/users/jsarenik/orgs",
        "repos_url": "https://api.github.com/users/jsarenik/repos",
        "events_url": "https://api.github.com/users/jsarenik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jsarenik/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-01T10:16:18Z"
    },
    {
      "event": "commented",
      "id": 702071793,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwMjA3MTc5Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/702071793",
      "actor": {
        "login": "jsarenik",
        "id": 244565,
        "node_id": "MDQ6VXNlcjI0NDU2NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/244565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jsarenik",
        "html_url": "https://github.com/jsarenik",
        "followers_url": "https://api.github.com/users/jsarenik/followers",
        "following_url": "https://api.github.com/users/jsarenik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jsarenik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jsarenik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jsarenik/subscriptions",
        "organizations_url": "https://api.github.com/users/jsarenik/orgs",
        "repos_url": "https://api.github.com/users/jsarenik/repos",
        "events_url": "https://api.github.com/users/jsarenik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jsarenik/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-01T11:30:30Z",
      "updated_at": "2020-10-01T11:30:30Z",
      "author_association": "NONE",
      "body": "@kallewoof have a look at https://github.com/bitcoin/bitcoin/pull/15454 and add the `createwallet` lines to the doc please.",
      "user": {
        "login": "jsarenik",
        "id": 244565,
        "node_id": "MDQ6VXNlcjI0NDU2NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/244565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jsarenik",
        "html_url": "https://github.com/jsarenik",
        "followers_url": "https://api.github.com/users/jsarenik/followers",
        "following_url": "https://api.github.com/users/jsarenik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jsarenik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jsarenik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jsarenik/subscriptions",
        "organizations_url": "https://api.github.com/users/jsarenik/orgs",
        "repos_url": "https://api.github.com/users/jsarenik/repos",
        "events_url": "https://api.github.com/users/jsarenik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jsarenik/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-702071793",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19937"
    },
    {
      "event": "mentioned",
      "id": 3828965605,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzgyODk2NTYwNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3828965605",
      "actor": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-01T11:30:30Z"
    },
    {
      "event": "subscribed",
      "id": 3828965607,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM4Mjg5NjU2MDc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3828965607",
      "actor": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-01T11:30:30Z"
    },
    {
      "event": "commented",
      "id": 702083358,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwMjA4MzM1OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/702083358",
      "actor": {
        "login": "jsarenik",
        "id": 244565,
        "node_id": "MDQ6VXNlcjI0NDU2NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/244565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jsarenik",
        "html_url": "https://github.com/jsarenik",
        "followers_url": "https://api.github.com/users/jsarenik/followers",
        "following_url": "https://api.github.com/users/jsarenik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jsarenik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jsarenik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jsarenik/subscriptions",
        "organizations_url": "https://api.github.com/users/jsarenik/orgs",
        "repos_url": "https://api.github.com/users/jsarenik/repos",
        "events_url": "https://api.github.com/users/jsarenik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jsarenik/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-01T11:55:08Z",
      "updated_at": "2020-10-01T11:55:08Z",
      "author_association": "NONE",
      "body": "@kallewoof or start all `bitcoind` with `-wallet` command line argument.",
      "user": {
        "login": "jsarenik",
        "id": 244565,
        "node_id": "MDQ6VXNlcjI0NDU2NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/244565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jsarenik",
        "html_url": "https://github.com/jsarenik",
        "followers_url": "https://api.github.com/users/jsarenik/followers",
        "following_url": "https://api.github.com/users/jsarenik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jsarenik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jsarenik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jsarenik/subscriptions",
        "organizations_url": "https://api.github.com/users/jsarenik/orgs",
        "repos_url": "https://api.github.com/users/jsarenik/repos",
        "events_url": "https://api.github.com/users/jsarenik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jsarenik/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-702083358",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19937"
    },
    {
      "event": "mentioned",
      "id": 3829057793,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzgyOTA1Nzc5Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3829057793",
      "actor": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-01T11:55:08Z"
    },
    {
      "event": "subscribed",
      "id": 3829057797,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM4MjkwNTc3OTc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3829057797",
      "actor": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-01T11:55:08Z"
    },
    {
      "event": "commented",
      "id": 702088576,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwMjA4ODU3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/702088576",
      "actor": {
        "login": "jsarenik",
        "id": 244565,
        "node_id": "MDQ6VXNlcjI0NDU2NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/244565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jsarenik",
        "html_url": "https://github.com/jsarenik",
        "followers_url": "https://api.github.com/users/jsarenik/followers",
        "following_url": "https://api.github.com/users/jsarenik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jsarenik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jsarenik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jsarenik/subscriptions",
        "organizations_url": "https://api.github.com/users/jsarenik/orgs",
        "repos_url": "https://api.github.com/users/jsarenik/repos",
        "events_url": "https://api.github.com/users/jsarenik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jsarenik/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-01T12:05:29Z",
      "updated_at": "2020-10-01T12:05:29Z",
      "author_association": "NONE",
      "body": "Or actually rather `-wallet=\"\"`",
      "user": {
        "login": "jsarenik",
        "id": 244565,
        "node_id": "MDQ6VXNlcjI0NDU2NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/244565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jsarenik",
        "html_url": "https://github.com/jsarenik",
        "followers_url": "https://api.github.com/users/jsarenik/followers",
        "following_url": "https://api.github.com/users/jsarenik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jsarenik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jsarenik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jsarenik/subscriptions",
        "organizations_url": "https://api.github.com/users/jsarenik/orgs",
        "repos_url": "https://api.github.com/users/jsarenik/repos",
        "events_url": "https://api.github.com/users/jsarenik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jsarenik/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-702088576",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19937"
    },
    {
      "event": "commented",
      "id": 702102555,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwMjEwMjU1NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/702102555",
      "actor": {
        "login": "jsarenik",
        "id": 244565,
        "node_id": "MDQ6VXNlcjI0NDU2NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/244565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jsarenik",
        "html_url": "https://github.com/jsarenik",
        "followers_url": "https://api.github.com/users/jsarenik/followers",
        "following_url": "https://api.github.com/users/jsarenik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jsarenik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jsarenik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jsarenik/subscriptions",
        "organizations_url": "https://api.github.com/users/jsarenik/orgs",
        "repos_url": "https://api.github.com/users/jsarenik/repos",
        "events_url": "https://api.github.com/users/jsarenik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jsarenik/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-01T12:32:45Z",
      "updated_at": "2020-10-01T12:32:45Z",
      "author_association": "NONE",
      "body": "@kallewoof Maybe adding a new `bitcoin-cli createwallet` line after starting a `bitcoind` would be the best according to https://github.com/bitcoin/bitcoin/pull/20034 (because `-wallet=\"\"` may change behavior in next releases as far as I understood).",
      "user": {
        "login": "jsarenik",
        "id": 244565,
        "node_id": "MDQ6VXNlcjI0NDU2NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/244565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jsarenik",
        "html_url": "https://github.com/jsarenik",
        "followers_url": "https://api.github.com/users/jsarenik/followers",
        "following_url": "https://api.github.com/users/jsarenik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jsarenik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jsarenik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jsarenik/subscriptions",
        "organizations_url": "https://api.github.com/users/jsarenik/orgs",
        "repos_url": "https://api.github.com/users/jsarenik/repos",
        "events_url": "https://api.github.com/users/jsarenik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jsarenik/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-702102555",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19937"
    },
    {
      "event": "mentioned",
      "id": 3829220557,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzgyOTIyMDU1Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3829220557",
      "actor": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-01T12:32:45Z"
    },
    {
      "event": "subscribed",
      "id": 3829220562,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM4MjkyMjA1NjI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3829220562",
      "actor": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-01T12:32:45Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3830956206,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzgzMDk1NjIwNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3830956206",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-01T18:46:37Z"
    },
    {
      "event": "commented",
      "id": 702328725,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwMjMyODcyNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/702328725",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-01T18:47:42Z",
      "updated_at": "2020-10-01T18:47:42Z",
      "author_association": "MEMBER",
      "body": "Rebased, with the a bunch of the suggestions applied",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-702328725",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19937"
    },
    {
      "event": "added_to_project",
      "id": 3831091216,
      "node_id": "MDE5OkFkZGVkVG9Qcm9qZWN0RXZlbnQzODMxMDkxMjE2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3831091216",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-01T19:23:09Z",
      "project_card": {
        "id": 46568018,
        "url": "https://api.github.com/projects/columns/cards/46568018",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "commented",
      "id": 702563748,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwMjU2Mzc0OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/702563748",
      "actor": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-02T07:01:27Z",
      "updated_at": "2020-10-02T07:01:27Z",
      "author_association": "MEMBER",
      "body": "@jsarenik Gave you edit privileges on the Bitcoin Wiki.",
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-702563748",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19937"
    },
    {
      "event": "mentioned",
      "id": 3832634092,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzgzMjYzNDA5Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3832634092",
      "actor": {
        "login": "jsarenik",
        "id": 244565,
        "node_id": "MDQ6VXNlcjI0NDU2NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/244565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jsarenik",
        "html_url": "https://github.com/jsarenik",
        "followers_url": "https://api.github.com/users/jsarenik/followers",
        "following_url": "https://api.github.com/users/jsarenik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jsarenik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jsarenik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jsarenik/subscriptions",
        "organizations_url": "https://api.github.com/users/jsarenik/orgs",
        "repos_url": "https://api.github.com/users/jsarenik/repos",
        "events_url": "https://api.github.com/users/jsarenik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jsarenik/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-02T07:01:27Z"
    },
    {
      "event": "subscribed",
      "id": 3832634096,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM4MzI2MzQwOTY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3832634096",
      "actor": {
        "login": "jsarenik",
        "id": 244565,
        "node_id": "MDQ6VXNlcjI0NDU2NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/244565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jsarenik",
        "html_url": "https://github.com/jsarenik",
        "followers_url": "https://api.github.com/users/jsarenik/followers",
        "following_url": "https://api.github.com/users/jsarenik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jsarenik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jsarenik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jsarenik/subscriptions",
        "organizations_url": "https://api.github.com/users/jsarenik/orgs",
        "repos_url": "https://api.github.com/users/jsarenik/repos",
        "events_url": "https://api.github.com/users/jsarenik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jsarenik/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-02T07:01:27Z"
    },
    {
      "event": "commented",
      "id": 702567617,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwMjU2NzYxNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/702567617",
      "actor": {
        "login": "jsarenik",
        "id": 244565,
        "node_id": "MDQ6VXNlcjI0NDU2NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/244565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jsarenik",
        "html_url": "https://github.com/jsarenik",
        "followers_url": "https://api.github.com/users/jsarenik/followers",
        "following_url": "https://api.github.com/users/jsarenik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jsarenik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jsarenik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jsarenik/subscriptions",
        "organizations_url": "https://api.github.com/users/jsarenik/orgs",
        "repos_url": "https://api.github.com/users/jsarenik/repos",
        "events_url": "https://api.github.com/users/jsarenik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jsarenik/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-02T07:11:51Z",
      "updated_at": "2020-10-02T07:11:51Z",
      "author_association": "NONE",
      "body": "@kallewoof Thank you! Now I need to figure out how to run a custom signet…",
      "user": {
        "login": "jsarenik",
        "id": 244565,
        "node_id": "MDQ6VXNlcjI0NDU2NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/244565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jsarenik",
        "html_url": "https://github.com/jsarenik",
        "followers_url": "https://api.github.com/users/jsarenik/followers",
        "following_url": "https://api.github.com/users/jsarenik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jsarenik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jsarenik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jsarenik/subscriptions",
        "organizations_url": "https://api.github.com/users/jsarenik/orgs",
        "repos_url": "https://api.github.com/users/jsarenik/repos",
        "events_url": "https://api.github.com/users/jsarenik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jsarenik/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-702567617",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19937"
    },
    {
      "event": "mentioned",
      "id": 3832666615,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzgzMjY2NjYxNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3832666615",
      "actor": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-02T07:11:51Z"
    },
    {
      "event": "subscribed",
      "id": 3832666618,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM4MzI2NjY2MTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3832666618",
      "actor": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-02T07:11:51Z"
    },
    {
      "event": "commented",
      "id": 702653278,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwMjY1MzI3OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/702653278",
      "actor": {
        "login": "jsarenik",
        "id": 244565,
        "node_id": "MDQ6VXNlcjI0NDU2NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/244565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jsarenik",
        "html_url": "https://github.com/jsarenik",
        "followers_url": "https://api.github.com/users/jsarenik/followers",
        "following_url": "https://api.github.com/users/jsarenik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jsarenik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jsarenik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jsarenik/subscriptions",
        "organizations_url": "https://api.github.com/users/jsarenik/orgs",
        "repos_url": "https://api.github.com/users/jsarenik/repos",
        "events_url": "https://api.github.com/users/jsarenik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jsarenik/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-02T10:27:16Z",
      "updated_at": "2020-10-02T10:27:16Z",
      "author_association": "NONE",
      "body": "Tested ACK f2ee4a95b3d9eac7b717f2ed4316dcb5df2d2795\r\n\r\nEditing the [Wiki](https://en.bitcoin.it/w/index.php?title=Signet#Custom_Signet) now.",
      "user": {
        "login": "jsarenik",
        "id": 244565,
        "node_id": "MDQ6VXNlcjI0NDU2NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/244565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jsarenik",
        "html_url": "https://github.com/jsarenik",
        "followers_url": "https://api.github.com/users/jsarenik/followers",
        "following_url": "https://api.github.com/users/jsarenik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jsarenik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jsarenik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jsarenik/subscriptions",
        "organizations_url": "https://api.github.com/users/jsarenik/orgs",
        "repos_url": "https://api.github.com/users/jsarenik/repos",
        "events_url": "https://api.github.com/users/jsarenik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jsarenik/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-702653278",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19937"
    },
    {
      "event": "commented",
      "id": 703284091,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwMzI4NDA5MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/703284091",
      "actor": {
        "login": "decryp2kanon",
        "id": 60179867,
        "node_id": "MDQ6VXNlcjYwMTc5ODY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/60179867?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/decryp2kanon",
        "html_url": "https://github.com/decryp2kanon",
        "followers_url": "https://api.github.com/users/decryp2kanon/followers",
        "following_url": "https://api.github.com/users/decryp2kanon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/decryp2kanon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/decryp2kanon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/decryp2kanon/subscriptions",
        "organizations_url": "https://api.github.com/users/decryp2kanon/orgs",
        "repos_url": "https://api.github.com/users/decryp2kanon/repos",
        "events_url": "https://api.github.com/users/decryp2kanon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/decryp2kanon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-04T16:57:16Z",
      "updated_at": "2020-10-04T16:58:21Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK",
      "user": {
        "login": "decryp2kanon",
        "id": 60179867,
        "node_id": "MDQ6VXNlcjYwMTc5ODY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/60179867?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/decryp2kanon",
        "html_url": "https://github.com/decryp2kanon",
        "followers_url": "https://api.github.com/users/decryp2kanon/followers",
        "following_url": "https://api.github.com/users/decryp2kanon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/decryp2kanon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/decryp2kanon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/decryp2kanon/subscriptions",
        "organizations_url": "https://api.github.com/users/decryp2kanon/orgs",
        "repos_url": "https://api.github.com/users/decryp2kanon/repos",
        "events_url": "https://api.github.com/users/decryp2kanon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/decryp2kanon/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-703284091",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19937"
    },
    {
      "event": "reviewed",
      "id": 510970758,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwOTcwNzU4",
      "url": null,
      "actor": null,
      "commit_id": "dd62762ff2d4eac87ce12dff0e8f7ac3dd535f39",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK. Using the wiki instructions, I was able to launch my own signet and mine blocks on it!\r\n\r\nIt's nice to see `bitcoin-util` #14671 come to live.\r\n\r\nThe commits that touch the node (3d1c2ce3c2684d4435fe17118d2fbdd10d04a2e0, dd62762ff2d4eac87ce12dff0e8f7ac3dd535f39, 0857bf9e6cb23792de94cfd164289d3eb08c608f) look good to me, but I didn't review the bitcoin-util and generate.py script.\r\n\r\nI get a compiler warning:\r\n```\r\ntest/validation_tests.cpp:68:88: warning: braces around scalar initializer [-Wbraced-scalar-init]\r\n    BOOST_CHECK(signet_params->GetConsensus().signet_challenge == std::vector<uint8_t>{{OP_TRUE}});\r\n                                                                                       ^~~~~~~~~\r\n/usr/local/include/boost/test/tools/old/interface.hpp:83:6: note: expanded from macro 'BOOST_CHECK'\r\n    (P), BOOST_TEST_STRINGIZE( P ), CHECK, CHECK_PRED, _ )\r\n     ^\r\n/usr/local/include/boost/test/tools/old/interface.hpp:68:61: note: expanded from macro 'BOOST_TEST_TOOL_IMPL'\r\n        BOOST_JOIN( BOOST_TEST_TOOL_PASS_PRED, frwd_type )( P, ARGS ),          \\\r\n                                                            ^\r\n/usr/local/include/boost/test/tools/old/interface.hpp:51:47: note: expanded from macro 'BOOST_TEST_TOOL_PASS_PRED2'\r\n#define BOOST_TEST_TOOL_PASS_PRED2( P, ARGS ) P\r\n```\r\n\r\n@jsarenik in the wiki it's better to redact the _entire_ public key, because idiots like myself might end up copy-pasting their public key into `REDACTED` and end up with an invalid `-signetchallenge` :-)  ",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#pullrequestreview-510970758",
      "submitted_at": "2020-10-17T09:42:18Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
    },
    {
      "event": "commented",
      "id": 711140853,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcxMTE0MDg1Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/711140853",
      "actor": {
        "login": "jsarenik",
        "id": 244565,
        "node_id": "MDQ6VXNlcjI0NDU2NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/244565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jsarenik",
        "html_url": "https://github.com/jsarenik",
        "followers_url": "https://api.github.com/users/jsarenik/followers",
        "following_url": "https://api.github.com/users/jsarenik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jsarenik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jsarenik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jsarenik/subscriptions",
        "organizations_url": "https://api.github.com/users/jsarenik/orgs",
        "repos_url": "https://api.github.com/users/jsarenik/repos",
        "events_url": "https://api.github.com/users/jsarenik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jsarenik/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-18T09:25:36Z",
      "updated_at": "2020-10-18T09:25:36Z",
      "author_association": "NONE",
      "body": "> @jsarenik in the wiki it's better to redact the _entire_ public key, because idiots like myself might end up copy-pasting their public key into `REDACTED` and end up with an invalid `-signetchallenge` :-)\r\n\r\nThank you @Sjors for feed-back. Wiki edited. Have a look.",
      "user": {
        "login": "jsarenik",
        "id": 244565,
        "node_id": "MDQ6VXNlcjI0NDU2NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/244565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jsarenik",
        "html_url": "https://github.com/jsarenik",
        "followers_url": "https://api.github.com/users/jsarenik/followers",
        "following_url": "https://api.github.com/users/jsarenik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jsarenik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jsarenik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jsarenik/subscriptions",
        "organizations_url": "https://api.github.com/users/jsarenik/orgs",
        "repos_url": "https://api.github.com/users/jsarenik/repos",
        "events_url": "https://api.github.com/users/jsarenik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jsarenik/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-711140853",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19937"
    },
    {
      "event": "mentioned",
      "id": 3890062692,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mzg5MDA2MjY5Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3890062692",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-18T09:25:36Z"
    },
    {
      "event": "subscribed",
      "id": 3890062693,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM4OTAwNjI2OTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3890062693",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-18T09:25:36Z"
    },
    {
      "event": "mentioned",
      "id": 3890062695,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mzg5MDA2MjY5NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3890062695",
      "actor": {
        "login": "jsarenik",
        "id": 244565,
        "node_id": "MDQ6VXNlcjI0NDU2NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/244565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jsarenik",
        "html_url": "https://github.com/jsarenik",
        "followers_url": "https://api.github.com/users/jsarenik/followers",
        "following_url": "https://api.github.com/users/jsarenik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jsarenik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jsarenik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jsarenik/subscriptions",
        "organizations_url": "https://api.github.com/users/jsarenik/orgs",
        "repos_url": "https://api.github.com/users/jsarenik/repos",
        "events_url": "https://api.github.com/users/jsarenik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jsarenik/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-18T09:25:36Z"
    },
    {
      "event": "subscribed",
      "id": 3890062696,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM4OTAwNjI2OTY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3890062696",
      "actor": {
        "login": "jsarenik",
        "id": 244565,
        "node_id": "MDQ6VXNlcjI0NDU2NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/244565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jsarenik",
        "html_url": "https://github.com/jsarenik",
        "followers_url": "https://api.github.com/users/jsarenik/followers",
        "following_url": "https://api.github.com/users/jsarenik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jsarenik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jsarenik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jsarenik/subscriptions",
        "organizations_url": "https://api.github.com/users/jsarenik/orgs",
        "repos_url": "https://api.github.com/users/jsarenik/repos",
        "events_url": "https://api.github.com/users/jsarenik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jsarenik/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-18T09:25:36Z"
    },
    {
      "event": "commented",
      "id": 711852509,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcxMTg1MjUwOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/711852509",
      "actor": {
        "login": "0xB10C",
        "id": 19157360,
        "node_id": "MDQ6VXNlcjE5MTU3MzYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/0xB10C",
        "html_url": "https://github.com/0xB10C",
        "followers_url": "https://api.github.com/users/0xB10C/followers",
        "following_url": "https://api.github.com/users/0xB10C/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/0xB10C/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/0xB10C/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
        "organizations_url": "https://api.github.com/users/0xB10C/orgs",
        "repos_url": "https://api.github.com/users/0xB10C/repos",
        "events_url": "https://api.github.com/users/0xB10C/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/0xB10C/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-19T08:36:55Z",
      "updated_at": "2020-10-19T08:36:55Z",
      "author_association": "MEMBER",
      "body": "I successfully launched my own signet and mined a few hundred blocks on it, too. Haven't had a chance to take a closer look at the code.",
      "user": {
        "login": "0xB10C",
        "id": 19157360,
        "node_id": "MDQ6VXNlcjE5MTU3MzYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/0xB10C",
        "html_url": "https://github.com/0xB10C",
        "followers_url": "https://api.github.com/users/0xB10C/followers",
        "following_url": "https://api.github.com/users/0xB10C/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/0xB10C/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/0xB10C/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
        "organizations_url": "https://api.github.com/users/0xB10C/orgs",
        "repos_url": "https://api.github.com/users/0xB10C/repos",
        "events_url": "https://api.github.com/users/0xB10C/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/0xB10C/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-711852509",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19937"
    },
    {
      "event": "commented",
      "id": 713706228,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcxMzcwNjIyOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/713706228",
      "actor": {
        "login": "decryp2kanon",
        "id": 60179867,
        "node_id": "MDQ6VXNlcjYwMTc5ODY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/60179867?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/decryp2kanon",
        "html_url": "https://github.com/decryp2kanon",
        "followers_url": "https://api.github.com/users/decryp2kanon/followers",
        "following_url": "https://api.github.com/users/decryp2kanon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/decryp2kanon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/decryp2kanon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/decryp2kanon/subscriptions",
        "organizations_url": "https://api.github.com/users/decryp2kanon/orgs",
        "repos_url": "https://api.github.com/users/decryp2kanon/repos",
        "events_url": "https://api.github.com/users/decryp2kanon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/decryp2kanon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-21T16:39:54Z",
      "updated_at": "2020-10-21T16:39:54Z",
      "author_association": "CONTRIBUTOR",
      "body": "just a question about MAGIC_BYTES\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/b46f37ba5ec4fbd2e4c82343fc4f353d7f34837a/src/chainparams.cpp#L342\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/b46f37ba5ec4fbd2e4c82343fc4f353d7f34837a/test/functional/test_framework/p2p.py#L116\r\n\r\nboth are same?",
      "user": {
        "login": "decryp2kanon",
        "id": 60179867,
        "node_id": "MDQ6VXNlcjYwMTc5ODY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/60179867?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/decryp2kanon",
        "html_url": "https://github.com/decryp2kanon",
        "followers_url": "https://api.github.com/users/decryp2kanon/followers",
        "following_url": "https://api.github.com/users/decryp2kanon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/decryp2kanon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/decryp2kanon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/decryp2kanon/subscriptions",
        "organizations_url": "https://api.github.com/users/decryp2kanon/orgs",
        "repos_url": "https://api.github.com/users/decryp2kanon/repos",
        "events_url": "https://api.github.com/users/decryp2kanon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/decryp2kanon/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-713706228",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19937"
    },
    {
      "event": "commented",
      "id": 713729099,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcxMzcyOTA5OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/713729099",
      "actor": {
        "login": "jsarenik",
        "id": 244565,
        "node_id": "MDQ6VXNlcjI0NDU2NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/244565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jsarenik",
        "html_url": "https://github.com/jsarenik",
        "followers_url": "https://api.github.com/users/jsarenik/followers",
        "following_url": "https://api.github.com/users/jsarenik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jsarenik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jsarenik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jsarenik/subscriptions",
        "organizations_url": "https://api.github.com/users/jsarenik/orgs",
        "repos_url": "https://api.github.com/users/jsarenik/repos",
        "events_url": "https://api.github.com/users/jsarenik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jsarenik/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-21T17:18:40Z",
      "updated_at": "2020-10-21T17:20:42Z",
      "author_association": "NONE",
      "body": "> just a question about MAGIC_BYTES\r\n> \r\n> https://github.com/bitcoin/bitcoin/blob/b46f37ba5ec4fbd2e4c82343fc4f353d7f34837a/src/chainparams.cpp#L342\r\n> \r\n> https://github.com/bitcoin/bitcoin/blob/b46f37ba5ec4fbd2e4c82343fc4f353d7f34837a/test/functional/test_framework/p2p.py#L116\r\n> \r\n> both are same?\r\n\r\n@decryp2kanon Yes. In the other endianness it is [`0x40CF030A`](https://github.com/rustyrussell/bitcoin-iterate/blob/e46b6e1/iterate.c#L954) and for Signet IV this is the network marker.",
      "user": {
        "login": "jsarenik",
        "id": 244565,
        "node_id": "MDQ6VXNlcjI0NDU2NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/244565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jsarenik",
        "html_url": "https://github.com/jsarenik",
        "followers_url": "https://api.github.com/users/jsarenik/followers",
        "following_url": "https://api.github.com/users/jsarenik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jsarenik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jsarenik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jsarenik/subscriptions",
        "organizations_url": "https://api.github.com/users/jsarenik/orgs",
        "repos_url": "https://api.github.com/users/jsarenik/repos",
        "events_url": "https://api.github.com/users/jsarenik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jsarenik/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-713729099",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19937"
    },
    {
      "event": "mentioned",
      "id": 3905064501,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzkwNTA2NDUwMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3905064501",
      "actor": {
        "login": "decryp2kanon",
        "id": 60179867,
        "node_id": "MDQ6VXNlcjYwMTc5ODY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/60179867?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/decryp2kanon",
        "html_url": "https://github.com/decryp2kanon",
        "followers_url": "https://api.github.com/users/decryp2kanon/followers",
        "following_url": "https://api.github.com/users/decryp2kanon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/decryp2kanon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/decryp2kanon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/decryp2kanon/subscriptions",
        "organizations_url": "https://api.github.com/users/decryp2kanon/orgs",
        "repos_url": "https://api.github.com/users/decryp2kanon/repos",
        "events_url": "https://api.github.com/users/decryp2kanon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/decryp2kanon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-21T17:20:42Z"
    },
    {
      "event": "subscribed",
      "id": 3905064509,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM5MDUwNjQ1MDk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3905064509",
      "actor": {
        "login": "decryp2kanon",
        "id": 60179867,
        "node_id": "MDQ6VXNlcjYwMTc5ODY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/60179867?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/decryp2kanon",
        "html_url": "https://github.com/decryp2kanon",
        "followers_url": "https://api.github.com/users/decryp2kanon/followers",
        "following_url": "https://api.github.com/users/decryp2kanon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/decryp2kanon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/decryp2kanon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/decryp2kanon/subscriptions",
        "organizations_url": "https://api.github.com/users/decryp2kanon/orgs",
        "repos_url": "https://api.github.com/users/decryp2kanon/repos",
        "events_url": "https://api.github.com/users/decryp2kanon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/decryp2kanon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-21T17:20:42Z"
    },
    {
      "event": "reviewed",
      "id": 514023871,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0MDIzODcx",
      "url": null,
      "actor": null,
      "commit_id": "f2ee4a95b3d9eac7b717f2ed4316dcb5df2d2795",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "decryp2kanon",
        "id": 60179867,
        "node_id": "MDQ6VXNlcjYwMTc5ODY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/60179867?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/decryp2kanon",
        "html_url": "https://github.com/decryp2kanon",
        "followers_url": "https://api.github.com/users/decryp2kanon/followers",
        "following_url": "https://api.github.com/users/decryp2kanon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/decryp2kanon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/decryp2kanon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/decryp2kanon/subscriptions",
        "organizations_url": "https://api.github.com/users/decryp2kanon/orgs",
        "repos_url": "https://api.github.com/users/decryp2kanon/repos",
        "events_url": "https://api.github.com/users/decryp2kanon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/decryp2kanon/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#pullrequestreview-514023871",
      "submitted_at": "2020-10-21T17:47:49Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
    },
    {
      "event": "commented",
      "id": 713748500,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcxMzc0ODUwMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/713748500",
      "actor": {
        "login": "decryp2kanon",
        "id": 60179867,
        "node_id": "MDQ6VXNlcjYwMTc5ODY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/60179867?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/decryp2kanon",
        "html_url": "https://github.com/decryp2kanon",
        "followers_url": "https://api.github.com/users/decryp2kanon/followers",
        "following_url": "https://api.github.com/users/decryp2kanon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/decryp2kanon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/decryp2kanon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/decryp2kanon/subscriptions",
        "organizations_url": "https://api.github.com/users/decryp2kanon/orgs",
        "repos_url": "https://api.github.com/users/decryp2kanon/repos",
        "events_url": "https://api.github.com/users/decryp2kanon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/decryp2kanon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-21T17:51:44Z",
      "updated_at": "2020-10-21T17:51:44Z",
      "author_association": "CONTRIBUTOR",
      "body": "I am trying to test. could you give an example of this?\r\n```\r\nusage: generate.py generate [-h] [--block-time BLOCK_TIME]\r\n                            [--target-mining-time TARGET_MINING_TIME]\r\n                            [--backdate BACKDATE] [--secondary]\r\n                            [--signcmd SIGNCMD] [--address ADDRESS]\r\n                            [--descriptor DESCRIPTOR] [--grind-cmd GRIND_CMD]\r\n```",
      "user": {
        "login": "decryp2kanon",
        "id": 60179867,
        "node_id": "MDQ6VXNlcjYwMTc5ODY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/60179867?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/decryp2kanon",
        "html_url": "https://github.com/decryp2kanon",
        "followers_url": "https://api.github.com/users/decryp2kanon/followers",
        "following_url": "https://api.github.com/users/decryp2kanon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/decryp2kanon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/decryp2kanon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/decryp2kanon/subscriptions",
        "organizations_url": "https://api.github.com/users/decryp2kanon/orgs",
        "repos_url": "https://api.github.com/users/decryp2kanon/repos",
        "events_url": "https://api.github.com/users/decryp2kanon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/decryp2kanon/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-713748500",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19937"
    },
    {
      "event": "commented",
      "id": 713753803,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcxMzc1MzgwMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/713753803",
      "actor": {
        "login": "jsarenik",
        "id": 244565,
        "node_id": "MDQ6VXNlcjI0NDU2NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/244565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jsarenik",
        "html_url": "https://github.com/jsarenik",
        "followers_url": "https://api.github.com/users/jsarenik/followers",
        "following_url": "https://api.github.com/users/jsarenik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jsarenik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jsarenik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jsarenik/subscriptions",
        "organizations_url": "https://api.github.com/users/jsarenik/orgs",
        "repos_url": "https://api.github.com/users/jsarenik/repos",
        "events_url": "https://api.github.com/users/jsarenik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jsarenik/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-21T17:57:03Z",
      "updated_at": "2020-10-21T17:58:12Z",
      "author_association": "NONE",
      "body": "> I am trying to test. could you give an example of this?\r\n\r\n@decryp2kanon See https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-696419619 (above)",
      "user": {
        "login": "jsarenik",
        "id": 244565,
        "node_id": "MDQ6VXNlcjI0NDU2NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/244565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jsarenik",
        "html_url": "https://github.com/jsarenik",
        "followers_url": "https://api.github.com/users/jsarenik/followers",
        "following_url": "https://api.github.com/users/jsarenik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jsarenik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jsarenik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jsarenik/subscriptions",
        "organizations_url": "https://api.github.com/users/jsarenik/orgs",
        "repos_url": "https://api.github.com/users/jsarenik/repos",
        "events_url": "https://api.github.com/users/jsarenik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jsarenik/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-713753803",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19937"
    },
    {
      "event": "mentioned",
      "id": 3905232734,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzkwNTIzMjczNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3905232734",
      "actor": {
        "login": "decryp2kanon",
        "id": 60179867,
        "node_id": "MDQ6VXNlcjYwMTc5ODY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/60179867?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/decryp2kanon",
        "html_url": "https://github.com/decryp2kanon",
        "followers_url": "https://api.github.com/users/decryp2kanon/followers",
        "following_url": "https://api.github.com/users/decryp2kanon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/decryp2kanon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/decryp2kanon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/decryp2kanon/subscriptions",
        "organizations_url": "https://api.github.com/users/decryp2kanon/orgs",
        "repos_url": "https://api.github.com/users/decryp2kanon/repos",
        "events_url": "https://api.github.com/users/decryp2kanon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/decryp2kanon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-21T17:58:13Z"
    },
    {
      "event": "subscribed",
      "id": 3905232737,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM5MDUyMzI3Mzc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3905232737",
      "actor": {
        "login": "decryp2kanon",
        "id": 60179867,
        "node_id": "MDQ6VXNlcjYwMTc5ODY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/60179867?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/decryp2kanon",
        "html_url": "https://github.com/decryp2kanon",
        "followers_url": "https://api.github.com/users/decryp2kanon/followers",
        "following_url": "https://api.github.com/users/decryp2kanon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/decryp2kanon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/decryp2kanon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/decryp2kanon/subscriptions",
        "organizations_url": "https://api.github.com/users/decryp2kanon/orgs",
        "repos_url": "https://api.github.com/users/decryp2kanon/repos",
        "events_url": "https://api.github.com/users/decryp2kanon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/decryp2kanon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-21T17:58:13Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3906762849,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzkwNjc2Mjg0OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3906762849",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-22T02:32:43Z"
    },
    {
      "event": "commented",
      "id": 714183776,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcxNDE4Mzc3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/714183776",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-22T02:37:18Z",
      "updated_at": "2020-10-22T02:37:18Z",
      "author_association": "MEMBER",
      "body": "Rebased to master to pull in #20060 which fixes the compiler warning and #20157 which activates taproot, and made some changes based on feedback above.",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-714183776",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19937"
    },
    {
      "event": "commented",
      "id": 714277988,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcxNDI3Nzk4OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/714277988",
      "actor": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-22T07:01:48Z",
      "updated_at": "2020-10-22T07:01:48Z",
      "author_association": "MEMBER",
      "body": "Miner now running this version on my end.",
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-714277988",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19937"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3907536296,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzkwNzUzNjI5Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3907536296",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-22T07:36:40Z"
    },
    {
      "event": "commented",
      "id": 716396958,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcxNjM5Njk1OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/716396958",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-26T08:35:19Z",
      "updated_at": "2020-10-26T08:35:36Z",
      "author_association": "MEMBER",
      "body": "The commits that touch the node still good to me as of 09671f2, thanks for the changes. Mining also still works. The `bitcoin-util` command help text is missing a list of commands. It's also confusing why `signetseednode` is listed as a potential argument.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-716396958",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19937"
    },
    {
      "event": "commented",
      "id": 716403808,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcxNjQwMzgwOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/716403808",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-26T08:49:03Z",
      "updated_at": "2020-10-26T08:49:03Z",
      "author_association": "MEMBER",
      "body": "> command help text is missing a list of commands\r\n\r\nThis can probably be fixed by switching to ArgsMan: https://github.com/bitcoin/bitcoin/pull/19937#discussion_r510721007",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-716403808",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19937"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3982493989,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mzk4MjQ5Mzk4OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3982493989",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-11T07:20:30Z"
    },
    {
      "event": "commented",
      "id": 725256662,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcyNTI1NjY2Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/725256662",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-11T07:28:34Z",
      "updated_at": "2020-11-11T08:08:43Z",
      "author_association": "MEMBER",
      "body": "Bunch of changes:\r\n\r\n * adds contrib/signet/README.md\r\n * renames contrib/signet/generate.py to contrib/signet/miner\r\n * changes many of the parameters (`--block-time` and `--mining-time` replaced by `--nbits` and `--poisson`; `--secondary` replaced by `--multiminer`, `--backup-delay` and `--standby-delay`)\r\n * makes block times predictable\r\n * adds a `calibrate` subcommand to see how long your cpu takes to mine a block to pick out a value for `--nbits`\r\n * improves the output so it's easier to tell what's going on\r\n * does not add signet challenge to getmininginfo anymore",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-725256662",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19937"
    },
    {
      "event": "labeled",
      "id": 4015559476,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQwMTU1NTk0NzY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4015559476",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-19T12:20:20Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4015862104,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDAxNTg2MjEwNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4015862104",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-19T13:33:30Z"
    },
    {
      "event": "unlabeled",
      "id": 4016126355,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDAxNjEyNjM1NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4016126355",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-19T14:26:27Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 732222298,
      "node_id": "MDEyOklzc3VlQ29tbWVudDczMjIyMjI5OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/732222298",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-23T15:11:09Z",
      "updated_at": "2020-11-23T15:11:09Z",
      "author_association": "MEMBER",
      "body": "I'm a bit in doubt about adding yet another binary just for this. In principle we already have `bitcoin-tx` with for idea being to provide bitcoin related functionality that does not rely on the ability to access a running node. It's named a bit inconvenient to add this functionality I guess but …",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-732222298",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19937"
    },
    {
      "event": "commented",
      "id": 732445799,
      "node_id": "MDEyOklzc3VlQ29tbWVudDczMjQ0NTc5OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/732445799",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-23T21:48:13Z",
      "updated_at": "2020-11-23T21:48:13Z",
      "author_association": "MEMBER",
      "body": "@laanwj bitcoin-util could be used for node-free versions of a bunch of rpc calls (see #14671) and/or to avoid introducing a separate binary for managing asmap stuff (see #18573). I think it would make more sense to aim to eventually deprecate `bitcoin-tx` in favour of psbt operations, and instead keep around `bitcoin-cli` for interacting with a node over rpc, `bitcoin-wallet` for doing wallet operations that don't require a node, and `bitcoin-util` for anything that doesn't require a node or a wallet (or a gui).",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-732445799",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19937"
    },
    {
      "event": "mentioned",
      "id": 4029786118,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDAyOTc4NjExOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4029786118",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-23T21:48:14Z"
    },
    {
      "event": "subscribed",
      "id": 4029786121,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQwMjk3ODYxMjE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4029786121",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-23T21:48:14Z"
    },
    {
      "event": "commented",
      "id": 736489140,
      "node_id": "MDEyOklzc3VlQ29tbWVudDczNjQ4OTE0MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/736489140",
      "actor": {
        "login": "muxator",
        "id": 4067621,
        "node_id": "MDQ6VXNlcjQwNjc2MjE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4067621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/muxator",
        "html_url": "https://github.com/muxator",
        "followers_url": "https://api.github.com/users/muxator/followers",
        "following_url": "https://api.github.com/users/muxator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/muxator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/muxator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/muxator/subscriptions",
        "organizations_url": "https://api.github.com/users/muxator/orgs",
        "repos_url": "https://api.github.com/users/muxator/repos",
        "events_url": "https://api.github.com/users/muxator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/muxator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-01T11:45:27Z",
      "updated_at": "2020-12-01T11:45:27Z",
      "author_association": "NONE",
      "body": "Hi,\r\n\r\na very minor nit: 34b8e1742cb756016bae94a2775a0f7d617050b1 introduces  `contrib/signet/generate.py`. The subsequent commit a2ada2db9c16d50c920ddb56e1b82d30b68987fe updates the documentation, while also renaming `contrib/signet/generate.py` → `contrib/signet/miner`.\r\n\r\nShouldn't the first commit be modified to directly introduce `miner` instead of `generate.py`?\r\n\r\nDepending on the project policies, it may also make sense to use a single commit to introduce the new script and update the relevant documentation.\r\n",
      "user": {
        "login": "muxator",
        "id": 4067621,
        "node_id": "MDQ6VXNlcjQwNjc2MjE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4067621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/muxator",
        "html_url": "https://github.com/muxator",
        "followers_url": "https://api.github.com/users/muxator/followers",
        "following_url": "https://api.github.com/users/muxator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/muxator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/muxator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/muxator/subscriptions",
        "organizations_url": "https://api.github.com/users/muxator/orgs",
        "repos_url": "https://api.github.com/users/muxator/repos",
        "events_url": "https://api.github.com/users/muxator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/muxator/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-736489140",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19937"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4059810365,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDA1OTgxMDM2NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4059810365",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-02T00:17:49Z"
    },
    {
      "event": "commented",
      "id": 736904055,
      "node_id": "MDEyOklzc3VlQ29tbWVudDczNjkwNDA1NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/736904055",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-02T00:19:33Z",
      "updated_at": "2020-12-02T00:19:33Z",
      "author_association": "MEMBER",
      "body": "@muxator good catch; fixed to introduce the script as `contrib/signet/miner` directly. Don't see any reason to merge the docs into the same commit -- they're already in the same PR so won't be merged separately.",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-736904055",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19937"
    },
    {
      "event": "mentioned",
      "id": 4059814579,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDA1OTgxNDU3OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4059814579",
      "actor": {
        "login": "muxator",
        "id": 4067621,
        "node_id": "MDQ6VXNlcjQwNjc2MjE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4067621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/muxator",
        "html_url": "https://github.com/muxator",
        "followers_url": "https://api.github.com/users/muxator/followers",
        "following_url": "https://api.github.com/users/muxator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/muxator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/muxator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/muxator/subscriptions",
        "organizations_url": "https://api.github.com/users/muxator/orgs",
        "repos_url": "https://api.github.com/users/muxator/repos",
        "events_url": "https://api.github.com/users/muxator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/muxator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-02T00:19:33Z"
    },
    {
      "event": "subscribed",
      "id": 4059814585,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQwNTk4MTQ1ODU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4059814585",
      "actor": {
        "login": "muxator",
        "id": 4067621,
        "node_id": "MDQ6VXNlcjQwNjc2MjE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4067621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/muxator",
        "html_url": "https://github.com/muxator",
        "followers_url": "https://api.github.com/users/muxator/followers",
        "following_url": "https://api.github.com/users/muxator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/muxator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/muxator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/muxator/subscriptions",
        "organizations_url": "https://api.github.com/users/muxator/orgs",
        "repos_url": "https://api.github.com/users/muxator/repos",
        "events_url": "https://api.github.com/users/muxator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/muxator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-02T00:19:33Z"
    },
    {
      "event": "reviewed",
      "id": 542451420,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyNDUxNDIw",
      "url": null,
      "actor": null,
      "commit_id": "066ee99cea331ae55ccf52873d3dcde636bb8128",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#pullrequestreview-542451420",
      "submitted_at": "2020-12-02T02:29:12Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
    },
    {
      "event": "reviewed",
      "id": 543240392,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzMjQwMzky",
      "url": null,
      "actor": null,
      "commit_id": "066ee99cea331ae55ccf52873d3dcde636bb8128",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "muxator",
        "id": 4067621,
        "node_id": "MDQ6VXNlcjQwNjc2MjE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4067621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/muxator",
        "html_url": "https://github.com/muxator",
        "followers_url": "https://api.github.com/users/muxator/followers",
        "following_url": "https://api.github.com/users/muxator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/muxator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/muxator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/muxator/subscriptions",
        "organizations_url": "https://api.github.com/users/muxator/orgs",
        "repos_url": "https://api.github.com/users/muxator/repos",
        "events_url": "https://api.github.com/users/muxator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/muxator/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#pullrequestreview-543240392",
      "submitted_at": "2020-12-02T21:57:08Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4065277356,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDA2NTI3NzM1Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4065277356",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-03T02:40:07Z"
    },
    {
      "event": "commented",
      "id": 737625815,
      "node_id": "MDEyOklzc3VlQ29tbWVudDczNzYyNTgxNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/737625815",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-03T02:42:12Z",
      "updated_at": "2020-12-03T02:42:12Z",
      "author_association": "MEMBER",
      "body": "Added @muxator's suggestions and updated bitcoin-util-res.rc to match the new version number scheme (and rebased to master to catch up with the new version scheme)",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-737625815",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19937"
    },
    {
      "event": "mentioned",
      "id": 4065282187,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDA2NTI4MjE4Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4065282187",
      "actor": {
        "login": "muxator",
        "id": 4067621,
        "node_id": "MDQ6VXNlcjQwNjc2MjE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4067621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/muxator",
        "html_url": "https://github.com/muxator",
        "followers_url": "https://api.github.com/users/muxator/followers",
        "following_url": "https://api.github.com/users/muxator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/muxator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/muxator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/muxator/subscriptions",
        "organizations_url": "https://api.github.com/users/muxator/orgs",
        "repos_url": "https://api.github.com/users/muxator/repos",
        "events_url": "https://api.github.com/users/muxator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/muxator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-03T02:42:12Z"
    },
    {
      "event": "subscribed",
      "id": 4065282195,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQwNjUyODIxOTU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4065282195",
      "actor": {
        "login": "muxator",
        "id": 4067621,
        "node_id": "MDQ6VXNlcjQwNjc2MjE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4067621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/muxator",
        "html_url": "https://github.com/muxator",
        "followers_url": "https://api.github.com/users/muxator/followers",
        "following_url": "https://api.github.com/users/muxator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/muxator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/muxator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/muxator/subscriptions",
        "organizations_url": "https://api.github.com/users/muxator/orgs",
        "repos_url": "https://api.github.com/users/muxator/repos",
        "events_url": "https://api.github.com/users/muxator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/muxator/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-03T02:42:13Z"
    },
    {
      "event": "reviewed",
      "id": 543671520,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzNjcxNTIw",
      "url": null,
      "actor": null,
      "commit_id": "6258e7eb3c9c4cb519cb519d640b73a059b1cc11",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Tested ACK 6258e7eb3c9c4cb519cb519d640b73a059b1cc11",
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#pullrequestreview-543671520",
      "submitted_at": "2020-12-03T07:32:20Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
    },
    {
      "event": "reviewed",
      "id": 546188593,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2MTg4NTkz",
      "url": null,
      "actor": null,
      "commit_id": "6258e7eb3c9c4cb519cb519d640b73a059b1cc11",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "muxator",
        "id": 4067621,
        "node_id": "MDQ6VXNlcjQwNjc2MjE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4067621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/muxator",
        "html_url": "https://github.com/muxator",
        "followers_url": "https://api.github.com/users/muxator/followers",
        "following_url": "https://api.github.com/users/muxator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/muxator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/muxator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/muxator/subscriptions",
        "organizations_url": "https://api.github.com/users/muxator/orgs",
        "repos_url": "https://api.github.com/users/muxator/repos",
        "events_url": "https://api.github.com/users/muxator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/muxator/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#pullrequestreview-546188593",
      "submitted_at": "2020-12-07T14:15:41Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
    },
    {
      "event": "reviewed",
      "id": 546190187,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2MTkwMTg3",
      "url": null,
      "actor": null,
      "commit_id": "6258e7eb3c9c4cb519cb519d640b73a059b1cc11",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "muxator",
        "id": 4067621,
        "node_id": "MDQ6VXNlcjQwNjc2MjE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4067621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/muxator",
        "html_url": "https://github.com/muxator",
        "followers_url": "https://api.github.com/users/muxator/followers",
        "following_url": "https://api.github.com/users/muxator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/muxator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/muxator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/muxator/subscriptions",
        "organizations_url": "https://api.github.com/users/muxator/orgs",
        "repos_url": "https://api.github.com/users/muxator/repos",
        "events_url": "https://api.github.com/users/muxator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/muxator/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#pullrequestreview-546190187",
      "submitted_at": "2020-12-07T14:17:27Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
    },
    {
      "event": "labeled",
      "id": 4094889787,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQwOTQ4ODk3ODc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4094889787",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-10T12:37:31Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MWM1NGRlYzIwODkxZjI2MjdhNDliMmUzZTc4NWZkYWYyYTFlNjY0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/81c54dec20891f2627a49b2e3e785fdaf2a1e664",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/81c54dec20891f2627a49b2e3e785fdaf2a1e664",
      "tree": {
        "sha": "6343f2c5b2d0e0d4ec29e80ef36860f510709c27",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6343f2c5b2d0e0d4ec29e80ef36860f510709c27"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/25bc840e038f5cc3a1d70d6fbaf1dc2eb2c6e460",
          "sha": "25bc840e038f5cc3a1d70d6fbaf1dc2eb2c6e460",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/25bc840e038f5cc3a1d70d6fbaf1dc2eb2c6e460"
        }
      ],
      "message": "rpc: update getblocktemplate with signet rule, include signet_challenge",
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2020-12-14T08:32:57Z"
      },
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2020-09-09T21:51:19Z"
      },
      "sha": "81c54dec20891f2627a49b2e3e785fdaf2a1e664"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NWQ1ZDVlNjI1NzgyNWJiMzg1Y2VlMzE4ZDU2ODE1OTdmN2Y3NjQ2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/95d5d5e6257825bb385cee318d5681597f7f7646",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/95d5d5e6257825bb385cee318d5681597f7f7646",
      "tree": {
        "sha": "b5223236a85cc0088ba764e037e4571198dd1836",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b5223236a85cc0088ba764e037e4571198dd1836"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/81c54dec20891f2627a49b2e3e785fdaf2a1e664",
          "sha": "81c54dec20891f2627a49b2e3e785fdaf2a1e664",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/81c54dec20891f2627a49b2e3e785fdaf2a1e664"
        }
      ],
      "message": "rpc: allow getblocktemplate for test chains when unconnected or in IBD",
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2020-12-14T08:32:57Z"
      },
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2020-09-09T22:06:34Z"
      },
      "sha": "95d5d5e6257825bb385cee318d5681597f7f7646"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4107929294,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDEwNzkyOTI5NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4107929294",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-14T08:41:27Z"
    },
    {
      "event": "unlabeled",
      "id": 4107996168,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDEwNzk5NjE2OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4107996168",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-14T08:54:59Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 555100424,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1MTAwNDI0",
      "url": null,
      "actor": null,
      "commit_id": "69c6e47a3f929478a7f842ca3880bcae3c28a134",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Tested ACK; could do more direct review of the code itself.\r\n\r\nFew docs nits.\r\n\r\nUtility works like a charm to mine blocks!",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#pullrequestreview-555100424",
      "submitted_at": "2020-12-18T00:59:20Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
    },
    {
      "event": "reviewed",
      "id": 555818857,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1ODE4ODU3",
      "url": null,
      "actor": null,
      "commit_id": "69c6e47a3f929478a7f842ca3880bcae3c28a134",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "gruve-p",
        "id": 11212268,
        "node_id": "MDQ6VXNlcjExMjEyMjY4",
        "avatar_url": "https://avatars.githubusercontent.com/u/11212268?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gruve-p",
        "html_url": "https://github.com/gruve-p",
        "followers_url": "https://api.github.com/users/gruve-p/followers",
        "following_url": "https://api.github.com/users/gruve-p/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gruve-p/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gruve-p/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gruve-p/subscriptions",
        "organizations_url": "https://api.github.com/users/gruve-p/orgs",
        "repos_url": "https://api.github.com/users/gruve-p/repos",
        "events_url": "https://api.github.com/users/gruve-p/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gruve-p/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#pullrequestreview-555818857",
      "submitted_at": "2020-12-18T21:17:11Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
    },
    {
      "event": "reviewed",
      "id": 555833068,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1ODMzMDY4",
      "url": null,
      "actor": null,
      "commit_id": "69c6e47a3f929478a7f842ca3880bcae3c28a134",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "gruve-p",
        "id": 11212268,
        "node_id": "MDQ6VXNlcjExMjEyMjY4",
        "avatar_url": "https://avatars.githubusercontent.com/u/11212268?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gruve-p",
        "html_url": "https://github.com/gruve-p",
        "followers_url": "https://api.github.com/users/gruve-p/followers",
        "following_url": "https://api.github.com/users/gruve-p/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gruve-p/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gruve-p/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gruve-p/subscriptions",
        "organizations_url": "https://api.github.com/users/gruve-p/orgs",
        "repos_url": "https://api.github.com/users/gruve-p/repos",
        "events_url": "https://api.github.com/users/gruve-p/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gruve-p/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#pullrequestreview-555833068",
      "submitted_at": "2020-12-18T21:46:55Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
    },
    {
      "event": "reviewed",
      "id": 556069857,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MDY5ODU3",
      "url": null,
      "actor": null,
      "commit_id": "69c6e47a3f929478a7f842ca3880bcae3c28a134",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "gruve-p",
        "id": 11212268,
        "node_id": "MDQ6VXNlcjExMjEyMjY4",
        "avatar_url": "https://avatars.githubusercontent.com/u/11212268?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gruve-p",
        "html_url": "https://github.com/gruve-p",
        "followers_url": "https://api.github.com/users/gruve-p/followers",
        "following_url": "https://api.github.com/users/gruve-p/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gruve-p/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gruve-p/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gruve-p/subscriptions",
        "organizations_url": "https://api.github.com/users/gruve-p/orgs",
        "repos_url": "https://api.github.com/users/gruve-p/repos",
        "events_url": "https://api.github.com/users/gruve-p/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gruve-p/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#pullrequestreview-556069857",
      "submitted_at": "2020-12-20T23:02:01Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4133999383,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDEzMzk5OTM4Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4133999383",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-21T02:19:46Z"
    },
    {
      "event": "reviewed",
      "id": 556462996,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2NDYyOTk2",
      "url": null,
      "actor": null,
      "commit_id": "f19148a9ddab01af80067982f2639dbee2cdbf52",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "gruve-p",
        "id": 11212268,
        "node_id": "MDQ6VXNlcjExMjEyMjY4",
        "avatar_url": "https://avatars.githubusercontent.com/u/11212268?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gruve-p",
        "html_url": "https://github.com/gruve-p",
        "followers_url": "https://api.github.com/users/gruve-p/followers",
        "following_url": "https://api.github.com/users/gruve-p/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gruve-p/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gruve-p/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gruve-p/subscriptions",
        "organizations_url": "https://api.github.com/users/gruve-p/orgs",
        "repos_url": "https://api.github.com/users/gruve-p/repos",
        "events_url": "https://api.github.com/users/gruve-p/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gruve-p/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#pullrequestreview-556462996",
      "submitted_at": "2020-12-21T15:29:35Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
    },
    {
      "event": "commented",
      "id": 749049129,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc0OTA0OTEyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/749049129",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-21T16:02:12Z",
      "updated_at": "2020-12-21T16:05:30Z",
      "author_association": "MEMBER",
      "body": "code review ACK f19148a9ddab01af80067982f2639dbee2cdbf52\r\n\r\nnit: your new utility doesn't implement `--version` and no manual page is generated for it in `contrib/devtools/gen-manpages.sh`. No opinion on whether that's necessary here.",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-749049129",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19937"
    },
    {
      "event": "commented",
      "id": 750464206,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc1MDQ2NDIwNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/750464206",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-23T20:36:59Z",
      "updated_at": "2020-12-23T20:36:59Z",
      "author_association": "MEMBER",
      "body": "Concept ACK. I think it makes sense to have a bitcoin-util tool with subcommands for wallet- and node-free operations (and deprecate bitcoin-tx in favor of PSBT support in bitcoin-util).",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-750464206",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19937"
    },
    {
      "event": "commented",
      "id": 750917054,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc1MDkxNzA1NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/750917054",
      "actor": {
        "login": "gruve-p",
        "id": 11212268,
        "node_id": "MDQ6VXNlcjExMjEyMjY4",
        "avatar_url": "https://avatars.githubusercontent.com/u/11212268?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gruve-p",
        "html_url": "https://github.com/gruve-p",
        "followers_url": "https://api.github.com/users/gruve-p/followers",
        "following_url": "https://api.github.com/users/gruve-p/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gruve-p/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gruve-p/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gruve-p/subscriptions",
        "organizations_url": "https://api.github.com/users/gruve-p/orgs",
        "repos_url": "https://api.github.com/users/gruve-p/repos",
        "events_url": "https://api.github.com/users/gruve-p/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gruve-p/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-24T15:58:45Z",
      "updated_at": "2020-12-24T16:02:59Z",
      "author_association": "CONTRIBUTOR",
      "body": "tACK https://github.com/bitcoin/bitcoin/pull/19937/commits/f19148a9ddab01af80067982f2639dbee2cdbf52\r\n\r\nFew docs nits.",
      "user": {
        "login": "gruve-p",
        "id": 11212268,
        "node_id": "MDQ6VXNlcjExMjEyMjY4",
        "avatar_url": "https://avatars.githubusercontent.com/u/11212268?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gruve-p",
        "html_url": "https://github.com/gruve-p",
        "followers_url": "https://api.github.com/users/gruve-p/followers",
        "following_url": "https://api.github.com/users/gruve-p/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gruve-p/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gruve-p/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gruve-p/subscriptions",
        "organizations_url": "https://api.github.com/users/gruve-p/orgs",
        "repos_url": "https://api.github.com/users/gruve-p/repos",
        "events_url": "https://api.github.com/users/gruve-p/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gruve-p/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-750917054",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19937"
    },
    {
      "event": "commented",
      "id": 751526262,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc1MTUyNjI2Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/751526262",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-27T23:03:54Z",
      "updated_at": "2020-12-27T23:03:54Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK\r\n\r\n`bitcoin-util` makes sense!",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-751526262",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19937"
    },
    {
      "event": "reviewed",
      "id": 565363327,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY1MzYzMzI3",
      "url": null,
      "actor": null,
      "commit_id": "f19148a9ddab01af80067982f2639dbee2cdbf52",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#pullrequestreview-565363327",
      "submitted_at": "2021-01-11T13:42:54Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
    },
    {
      "event": "reviewed",
      "id": 565365554,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY1MzY1NTU0",
      "url": null,
      "actor": null,
      "commit_id": "f19148a9ddab01af80067982f2639dbee2cdbf52",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#pullrequestreview-565365554",
      "submitted_at": "2021-01-11T13:45:35Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMzc2MmJjYzk2MTgxMzhkZDI4YjUzYzIwMzFkZWZkYzlkNzYyZDI2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/13762bcc9618138dd28b53c2031defdc9d762d26",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/13762bcc9618138dd28b53c2031defdc9d762d26",
      "tree": {
        "sha": "58e51911fd2579f677a50962876a80383d011baf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/58e51911fd2579f677a50962876a80383d011baf"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/95d5d5e6257825bb385cee318d5681597f7f7646",
          "sha": "95d5d5e6257825bb385cee318d5681597f7f7646",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/95d5d5e6257825bb385cee318d5681597f7f7646"
        }
      ],
      "message": "Add bitcoin-util command line utility",
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-01-12T08:34:25Z"
      },
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2020-09-09T22:09:07Z"
      },
      "sha": "13762bcc9618138dd28b53c2031defdc9d762d26"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZjdkYmRjMDhhMTFlOTk5ZTc3MThiNmFjNzY0NWVjY2VlZjgxMTg4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ff7dbdc08a11e999e7718b6ac7645ecceef81188",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ff7dbdc08a11e999e7718b6ac7645ecceef81188",
      "tree": {
        "sha": "4ff4acd8207fcdbc4983da2efa463324f1a0af86",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4ff4acd8207fcdbc4983da2efa463324f1a0af86"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/13762bcc9618138dd28b53c2031defdc9d762d26",
          "sha": "13762bcc9618138dd28b53c2031defdc9d762d26",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/13762bcc9618138dd28b53c2031defdc9d762d26"
        }
      ],
      "message": "contrib/signet: Add script for generating a signet chain",
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-01-12T08:34:29Z"
      },
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2020-09-09T22:37:55Z"
      },
      "sha": "ff7dbdc08a11e999e7718b6ac7645ecceef81188"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OTVhMzRkYmVhMDE5NTRjYjAzNzJiMDIxMGQyZmQ2NDM1N2ExNzYy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/595a34dbea01954cb0372b0210d2fd64357a1762",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/595a34dbea01954cb0372b0210d2fd64357a1762",
      "tree": {
        "sha": "254dc766e60423e6a090ebf0b97dabfaff0328bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/254dc766e60423e6a090ebf0b97dabfaff0328bf"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ff7dbdc08a11e999e7718b6ac7645ecceef81188",
          "sha": "ff7dbdc08a11e999e7718b6ac7645ecceef81188",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ff7dbdc08a11e999e7718b6ac7645ecceef81188"
        }
      ],
      "message": "contrib/signet: Document miner script in README.md",
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-01-12T08:34:29Z"
      },
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2020-11-10T05:39:07Z"
      },
      "sha": "595a34dbea01954cb0372b0210d2fd64357a1762"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4194636670,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDE5NDYzNjY3MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4194636670",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-12T08:35:36Z"
    },
    {
      "event": "commented",
      "id": 758498760,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc1ODQ5ODc2MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/758498760",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-12T08:38:33Z",
      "updated_at": "2021-01-12T08:38:33Z",
      "author_association": "MEMBER",
      "body": "Rebased to fix the bad library ordering.\r\n\r\nSuggest reviewing #20715 which is probably the future for bitcoin-util's argument parsing. I think we could update bitcoin-util to work that way either before or after merging this PR.",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-758498760",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19937"
    },
    {
      "event": "commented",
      "id": 758607187,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc1ODYwNzE4Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/758607187",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-12T11:53:32Z",
      "updated_at": "2021-01-12T11:53:32Z",
      "author_association": "MEMBER",
      "body": "code review ACK 595a34dbea01954cb0372b0210d2fd64357a1762",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-758607187",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19937"
    },
    {
      "event": "merged",
      "id": 4195493586,
      "node_id": "MDExOk1lcmdlZEV2ZW50NDE5NTQ5MzU4Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4195493586",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "7b975639ef93b50537a3ec6326b54d7218afc8da",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b975639ef93b50537a3ec6326b54d7218afc8da",
      "created_at": "2021-01-12T11:54:30Z"
    },
    {
      "event": "closed",
      "id": 4195493603,
      "node_id": "MDExOkNsb3NlZEV2ZW50NDE5NTQ5MzYwMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4195493603",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-12T11:54:31Z"
    },
    {
      "event": "removed_from_project",
      "id": 4195496916,
      "node_id": "MDIzOlJlbW92ZWRGcm9tUHJvamVjdEV2ZW50NDE5NTQ5NjkxNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4195496916",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-12T11:55:23Z",
      "project_card": {
        "id": 46568018,
        "url": "https://api.github.com/projects/columns/cards/46568018",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "referenced",
      "id": 4196659625,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQxOTY2NTk2MjU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4196659625",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "0e8638b64fffe242bcfb47b685f56a211bd29818",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/0e8638b64fffe242bcfb47b685f56a211bd29818",
      "created_at": "2021-01-12T16:00:57Z"
    },
    {
      "event": "comment_deleted",
      "id": 4199016277,
      "node_id": "MDE5OkNvbW1lbnREZWxldGVkRXZlbnQ0MTk5MDE2Mjc3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4199016277",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-13T01:51:22Z"
    },
    {
      "event": "commented",
      "id": 760969715,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc2MDk2OTcxNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/760969715",
      "actor": {
        "login": "weedcoder",
        "id": 4971940,
        "node_id": "MDQ6VXNlcjQ5NzE5NDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4971940?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/weedcoder",
        "html_url": "https://github.com/weedcoder",
        "followers_url": "https://api.github.com/users/weedcoder/followers",
        "following_url": "https://api.github.com/users/weedcoder/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/weedcoder/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/weedcoder/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/weedcoder/subscriptions",
        "organizations_url": "https://api.github.com/users/weedcoder/orgs",
        "repos_url": "https://api.github.com/users/weedcoder/repos",
        "events_url": "https://api.github.com/users/weedcoder/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/weedcoder/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-15T14:21:10Z",
      "updated_at": "2021-01-15T14:21:10Z",
      "author_association": "NONE",
      "body": "![4txwyb](https://user-images.githubusercontent.com/4971940/104738010-47915980-5745-11eb-934e-7a4f236e18ec.jpeg)\r\n",
      "user": {
        "login": "weedcoder",
        "id": 4971940,
        "node_id": "MDQ6VXNlcjQ5NzE5NDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4971940?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/weedcoder",
        "html_url": "https://github.com/weedcoder",
        "followers_url": "https://api.github.com/users/weedcoder/followers",
        "following_url": "https://api.github.com/users/weedcoder/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/weedcoder/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/weedcoder/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/weedcoder/subscriptions",
        "organizations_url": "https://api.github.com/users/weedcoder/orgs",
        "repos_url": "https://api.github.com/users/weedcoder/repos",
        "events_url": "https://api.github.com/users/weedcoder/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/weedcoder/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-760969715",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19937"
    },
    {
      "event": "commented",
      "id": 761373213,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc2MTM3MzIxMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/761373213",
      "actor": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-16T04:24:56Z",
      "updated_at": "2021-01-16T04:24:56Z",
      "author_association": "MEMBER",
      "body": "@weedcoder I'd say it is missing a lot of the logic required to do what liquid does, but I do believe this + a permanent elements chain with a 2-way-peg can do a great job as a test-chain for liquid. :)",
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#issuecomment-761373213",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19937"
    },
    {
      "event": "mentioned",
      "id": 4213655171,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDIxMzY1NTE3MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4213655171",
      "actor": {
        "login": "weedcoder",
        "id": 4971940,
        "node_id": "MDQ6VXNlcjQ5NzE5NDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4971940?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/weedcoder",
        "html_url": "https://github.com/weedcoder",
        "followers_url": "https://api.github.com/users/weedcoder/followers",
        "following_url": "https://api.github.com/users/weedcoder/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/weedcoder/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/weedcoder/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/weedcoder/subscriptions",
        "organizations_url": "https://api.github.com/users/weedcoder/orgs",
        "repos_url": "https://api.github.com/users/weedcoder/repos",
        "events_url": "https://api.github.com/users/weedcoder/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/weedcoder/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-16T04:24:56Z"
    },
    {
      "event": "subscribed",
      "id": 4213655173,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQyMTM2NTUxNzM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4213655173",
      "actor": {
        "login": "weedcoder",
        "id": 4971940,
        "node_id": "MDQ6VXNlcjQ5NzE5NDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4971940?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/weedcoder",
        "html_url": "https://github.com/weedcoder",
        "followers_url": "https://api.github.com/users/weedcoder/followers",
        "following_url": "https://api.github.com/users/weedcoder/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/weedcoder/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/weedcoder/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/weedcoder/subscriptions",
        "organizations_url": "https://api.github.com/users/weedcoder/orgs",
        "repos_url": "https://api.github.com/users/weedcoder/repos",
        "events_url": "https://api.github.com/users/weedcoder/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/weedcoder/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-16T04:24:56Z"
    },
    {
      "event": "referenced",
      "id": 4219239102,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQyMTkyMzkxMDI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4219239102",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "c763cacb883c77f7b8baf1b913a73943cf7c2180",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c763cacb883c77f7b8baf1b913a73943cf7c2180",
      "created_at": "2021-01-18T17:33:37Z"
    },
    {
      "event": "comment_deleted",
      "id": 4224958449,
      "node_id": "MDE5OkNvbW1lbnREZWxldGVkRXZlbnQ0MjI0OTU4NDQ5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4224958449",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-19T22:29:43Z"
    },
    {
      "event": "referenced",
      "id": 4229803987,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQyMjk4MDM5ODc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4229803987",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "f2485c00b84ede1939e5d1e193c9cf5545480606",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/f2485c00b84ede1939e5d1e193c9cf5545480606",
      "created_at": "2021-01-20T20:24:17Z"
    },
    {
      "event": "reviewed",
      "id": 580707262,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgwNzA3MjYy",
      "url": null,
      "actor": null,
      "commit_id": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#pullrequestreview-580707262",
      "submitted_at": "2021-02-01T19:49:10Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
    },
    {
      "event": "referenced",
      "id": 4289436473,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQyODk0MzY0NzM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4289436473",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "4e946ebcf111a5af11e6434d2fe217aca1cff22f",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e946ebcf111a5af11e6434d2fe217aca1cff22f",
      "created_at": "2021-02-04T08:13:10Z"
    },
    {
      "event": "referenced",
      "id": 4910926668,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ5MTA5MjY2Njg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4910926668",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "0f47e01d7d491fd240f4b14302bf9edf4f05142c",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f47e01d7d491fd240f4b14302bf9edf4f05142c",
      "created_at": "2021-06-18T17:32:26Z"
    },
    {
      "event": "locked",
      "id": 7199067666,
      "node_id": "LOE_lADOABII584po19AzwAAAAGtGQ4S",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7199067666",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-16T17:12:12Z",
      "lock_reason": "resolved"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492737367",
      "pull_request_review_id": 493464528,
      "id": 492737367,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjczNzM2Nw==",
      "diff_hunk": "@@ -0,0 +1,422 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2010 ArtForz -- public domain half-a-node\n+# Copyright (c) 2012 Jeff Garzik\n+# Copyright (c) 2010-2020 The Bitcoin Core developers",
      "path": "contrib/signet/generate.py",
      "position": null,
      "original_position": 4,
      "commit_id": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "original_commit_id": "e077aa7055e71f08a7d2cfbb29702832899fee04",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n# Copyright (c) 2020 The Bitcoin Core developers\r\n```\r\n\r\n:eyes: ",
      "created_at": "2020-09-22T13:34:23Z",
      "updated_at": "2021-01-12T08:35:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#discussion_r492737367",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492737367"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492742101",
      "pull_request_review_id": 493464528,
      "id": 492742101,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc0MjEwMQ==",
      "diff_hunk": "@@ -0,0 +1,222 @@\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <arith_uint256.h>\n+#include <clientversion.h>\n+#include <coins.h>\n+#include <consensus/consensus.h>\n+#include <core_io.h>\n+#include <key_io.h>\n+#include <policy/rbf.h>\n+#include <primitives/transaction.h>\n+#include <script/script.h>\n+#include <script/sign.h>\n+#include <script/signingprovider.h>\n+#include <univalue.h>\n+#include <util/moneystr.h>\n+#include <util/rbf.h>\n+#include <util/strencodings.h>\n+#include <util/string.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+\n+#include <functional>\n+#include <memory>\n+#include <stdio.h>\n+#include <thread>\n+\n+#include <boost/algorithm/string.hpp>\n+\n+static const int CONTINUE_EXECUTION=-1;\n+\n+const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static void SetupBitcoinUtilArgs(ArgsManager &argsman)\n+{\n+    SetupHelpOptions(argsman);\n+\n+    SetupChainParamsBaseOptions(argsman);\n+}\n+\n+//\n+// This function returns either one of EXIT_ codes when it's expected to stop the process or\n+// CONTINUE_EXECUTION when it's expected to continue further.\n+//\n+static int AppInitUtil(int argc, char* argv[])\n+{\n+    //\n+    // Parameters\n+    //\n+    SetupBitcoinUtilArgs(gArgs);\n+    std::string error;\n+    if (!gArgs.ParseParameters(argc, argv, error)) {\n+        tfm::format(std::cerr, \"Error parsing command line arguments: %s\\n\", error);\n+        return EXIT_FAILURE;\n+    }\n+\n+    // Check for -chain, -testnet or -regtest parameter (Params() calls are only valid after this clause)\n+    try {\n+        SelectParams(gArgs.GetChainName());\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\n\", e.what());\n+        return EXIT_FAILURE;\n+    }\n+\n+    if (argc < 2 || HelpRequested(gArgs)) {\n+        // First part of help message is specific to this utility\n+        std::string strUsage = PACKAGE_NAME \" bitcoin-tx utility version \" + FormatFullVersion() + \"\\n\\n\" +\n+            \"Usage:  bitcoin-util [options] [commands]  Do stuff\\n\" +\n+            \"\\n\";\n+        strUsage += gArgs.GetHelpMessage();\n+\n+        tfm::format(std::cout, \"%s\", strUsage);\n+\n+        if (argc < 2) {\n+            tfm::format(std::cerr, \"Error: too few parameters\\n\");\n+            return EXIT_FAILURE;\n+        }\n+        return EXIT_SUCCESS;\n+    }\n+    return CONTINUE_EXECUTION;\n+}\n+\n+static void grind_task(uint32_t nBits, CBlockHeader& header_orig, uint32_t offset, uint32_t step, std::atomic<bool>& found)\n+{\n+    arith_uint256 target;\n+    bool neg, over;\n+    target.SetCompact(nBits, &neg, &over);\n+    if (target == 0 || neg || over) return;\n+    CBlockHeader header = header_orig; // working copy\n+    header.nNonce = offset;\n+\n+    uint32_t finish = std::numeric_limits<uint32_t>::max() - step;\n+    finish = finish - (finish % step) + offset;\n+\n+    while (!found && header.nNonce < finish) {\n+        const uint32_t next = (finish - header.nNonce < 5000*step) ? finish : header.nNonce + 5000*step;\n+        do {\n+            if (!(UintToArith256(header.GetHash()) > target)) {\n+                if (!found.exchange(true)) {\n+                    header_orig.nNonce = header.nNonce;\n+                }\n+                return;\n+            }\n+            header.nNonce += step;\n+        } while(header.nNonce != next);\n+    }\n+}\n+\n+static int Grind(int argc, char* argv[], std::string& strPrint)\n+{\n+    if (argc != 1) {\n+        strPrint = \"Must specify block header to grind\";\n+        return 1;\n+    }\n+\n+    CBlockHeader header;\n+    if (!DecodeHexBlockHeader(header, argv[0])) {\n+        strPrint = \"Could not decode block header\";\n+        return 1;\n+    }\n+\n+    uint32_t nBits = header.nBits;\n+    std::atomic<bool> found{false};\n+\n+    std::vector<std::thread> threads;\n+    int n_tasks = std::max(1u, std::thread::hardware_concurrency());\n+    for (int i = 0; i < n_tasks; ++i) {\n+        threads.emplace_back( grind_task, nBits, std::ref(header), i, n_tasks, std::ref(found) );\n+    }\n+    for (auto& t : threads) {\n+        t.join();\n+    }\n+    if (!found) {\n+        strPrint = \"Could not satisfy difficulty target\";\n+        return 1;\n+    }\n+\n+    CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n+    ss << header;\n+    strPrint = HexStr(ss);\n+    return 0;\n+}\n+\n+static int CommandLineUtil(int argc, char* argv[])\n+{\n+    if (argc <= 1) return 1;\n+\n+    std::string strPrint;\n+    int nRet = 0;\n+\n+    try {\n+        while (argc > 1 && IsSwitchChar(argv[1][0]) && (argv[1][1] != 0)) {\n+            --argc;\n+            ++argv;\n+        }\n+\n+        char* command = argv[1];\n+        if (strcmp(command, \"grind\") == 0) {",
      "path": "src/bitcoin-util.cpp",
      "position": 158,
      "original_position": 163,
      "commit_id": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "original_commit_id": "e077aa7055e71f08a7d2cfbb29702832899fee04",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Any reason to not use our ArgsManager here, so that `-help` documentation will be created?",
      "created_at": "2020-09-22T13:40:31Z",
      "updated_at": "2021-01-12T08:35:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#discussion_r492742101",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492742101"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 158,
      "original_line": 158,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492743007",
      "pull_request_review_id": 493464528,
      "id": 492743007,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc0MzAwNw==",
      "diff_hunk": "@@ -0,0 +1,222 @@\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <arith_uint256.h>\n+#include <clientversion.h>\n+#include <coins.h>\n+#include <consensus/consensus.h>\n+#include <core_io.h>\n+#include <key_io.h>\n+#include <policy/rbf.h>\n+#include <primitives/transaction.h>\n+#include <script/script.h>\n+#include <script/sign.h>\n+#include <script/signingprovider.h>\n+#include <univalue.h>\n+#include <util/moneystr.h>\n+#include <util/rbf.h>\n+#include <util/strencodings.h>\n+#include <util/string.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+\n+#include <functional>\n+#include <memory>\n+#include <stdio.h>\n+#include <thread>\n+\n+#include <boost/algorithm/string.hpp>\n+\n+static const int CONTINUE_EXECUTION=-1;\n+\n+const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static void SetupBitcoinUtilArgs(ArgsManager &argsman)\n+{\n+    SetupHelpOptions(argsman);\n+\n+    SetupChainParamsBaseOptions(argsman);\n+}\n+\n+//\n+// This function returns either one of EXIT_ codes when it's expected to stop the process or\n+// CONTINUE_EXECUTION when it's expected to continue further.\n+//\n+static int AppInitUtil(int argc, char* argv[])\n+{\n+    //\n+    // Parameters\n+    //\n+    SetupBitcoinUtilArgs(gArgs);\n+    std::string error;\n+    if (!gArgs.ParseParameters(argc, argv, error)) {\n+        tfm::format(std::cerr, \"Error parsing command line arguments: %s\\n\", error);\n+        return EXIT_FAILURE;\n+    }\n+\n+    // Check for -chain, -testnet or -regtest parameter (Params() calls are only valid after this clause)\n+    try {\n+        SelectParams(gArgs.GetChainName());\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\n\", e.what());\n+        return EXIT_FAILURE;\n+    }\n+\n+    if (argc < 2 || HelpRequested(gArgs)) {\n+        // First part of help message is specific to this utility\n+        std::string strUsage = PACKAGE_NAME \" bitcoin-tx utility version \" + FormatFullVersion() + \"\\n\\n\" +",
      "path": "src/bitcoin-util.cpp",
      "position": null,
      "original_position": 72,
      "commit_id": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "original_commit_id": "e077aa7055e71f08a7d2cfbb29702832899fee04",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n        std::string strUsage = PACKAGE_NAME \" bitcoin-util utility version \" + FormatFullVersion() + \"\\n\\n\" +\r\n```",
      "created_at": "2020-09-22T13:41:39Z",
      "updated_at": "2021-01-12T08:35:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#discussion_r492743007",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492743007"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 72,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492877166",
      "pull_request_review_id": 493647779,
      "id": 492877166,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg3NzE2Ng==",
      "diff_hunk": "@@ -0,0 +1,422 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2010 ArtForz -- public domain half-a-node\n+# Copyright (c) 2012 Jeff Garzik\n+# Copyright (c) 2010-2020 The Bitcoin Core developers",
      "path": "contrib/signet/generate.py",
      "position": null,
      "original_position": 4,
      "commit_id": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "original_commit_id": "e077aa7055e71f08a7d2cfbb29702832899fee04",
      "in_reply_to_id": 492737367,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hmm, think those are leftover from when the code from test_framework/messages.py etc was copied in rather than imported",
      "created_at": "2020-09-22T16:33:27Z",
      "updated_at": "2021-01-12T08:35:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#discussion_r492877166",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492877166"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492877918",
      "pull_request_review_id": 493648787,
      "id": 492877918,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg3NzkxOA==",
      "diff_hunk": "@@ -0,0 +1,222 @@\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <arith_uint256.h>\n+#include <clientversion.h>\n+#include <coins.h>\n+#include <consensus/consensus.h>\n+#include <core_io.h>\n+#include <key_io.h>\n+#include <policy/rbf.h>\n+#include <primitives/transaction.h>\n+#include <script/script.h>\n+#include <script/sign.h>\n+#include <script/signingprovider.h>\n+#include <univalue.h>\n+#include <util/moneystr.h>\n+#include <util/rbf.h>\n+#include <util/strencodings.h>\n+#include <util/string.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+\n+#include <functional>\n+#include <memory>\n+#include <stdio.h>\n+#include <thread>\n+\n+#include <boost/algorithm/string.hpp>\n+\n+static const int CONTINUE_EXECUTION=-1;\n+\n+const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static void SetupBitcoinUtilArgs(ArgsManager &argsman)\n+{\n+    SetupHelpOptions(argsman);\n+\n+    SetupChainParamsBaseOptions(argsman);\n+}\n+\n+//\n+// This function returns either one of EXIT_ codes when it's expected to stop the process or\n+// CONTINUE_EXECUTION when it's expected to continue further.\n+//\n+static int AppInitUtil(int argc, char* argv[])\n+{\n+    //\n+    // Parameters\n+    //\n+    SetupBitcoinUtilArgs(gArgs);\n+    std::string error;\n+    if (!gArgs.ParseParameters(argc, argv, error)) {\n+        tfm::format(std::cerr, \"Error parsing command line arguments: %s\\n\", error);\n+        return EXIT_FAILURE;\n+    }\n+\n+    // Check for -chain, -testnet or -regtest parameter (Params() calls are only valid after this clause)\n+    try {\n+        SelectParams(gArgs.GetChainName());\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\n\", e.what());\n+        return EXIT_FAILURE;\n+    }\n+\n+    if (argc < 2 || HelpRequested(gArgs)) {\n+        // First part of help message is specific to this utility\n+        std::string strUsage = PACKAGE_NAME \" bitcoin-tx utility version \" + FormatFullVersion() + \"\\n\\n\" +\n+            \"Usage:  bitcoin-util [options] [commands]  Do stuff\\n\" +\n+            \"\\n\";\n+        strUsage += gArgs.GetHelpMessage();\n+\n+        tfm::format(std::cout, \"%s\", strUsage);\n+\n+        if (argc < 2) {\n+            tfm::format(std::cerr, \"Error: too few parameters\\n\");\n+            return EXIT_FAILURE;\n+        }\n+        return EXIT_SUCCESS;\n+    }\n+    return CONTINUE_EXECUTION;\n+}\n+\n+static void grind_task(uint32_t nBits, CBlockHeader& header_orig, uint32_t offset, uint32_t step, std::atomic<bool>& found)\n+{\n+    arith_uint256 target;\n+    bool neg, over;\n+    target.SetCompact(nBits, &neg, &over);\n+    if (target == 0 || neg || over) return;\n+    CBlockHeader header = header_orig; // working copy\n+    header.nNonce = offset;\n+\n+    uint32_t finish = std::numeric_limits<uint32_t>::max() - step;\n+    finish = finish - (finish % step) + offset;\n+\n+    while (!found && header.nNonce < finish) {\n+        const uint32_t next = (finish - header.nNonce < 5000*step) ? finish : header.nNonce + 5000*step;\n+        do {\n+            if (!(UintToArith256(header.GetHash()) > target)) {\n+                if (!found.exchange(true)) {\n+                    header_orig.nNonce = header.nNonce;\n+                }\n+                return;\n+            }\n+            header.nNonce += step;\n+        } while(header.nNonce != next);\n+    }\n+}\n+\n+static int Grind(int argc, char* argv[], std::string& strPrint)\n+{\n+    if (argc != 1) {\n+        strPrint = \"Must specify block header to grind\";\n+        return 1;\n+    }\n+\n+    CBlockHeader header;\n+    if (!DecodeHexBlockHeader(header, argv[0])) {\n+        strPrint = \"Could not decode block header\";\n+        return 1;\n+    }\n+\n+    uint32_t nBits = header.nBits;\n+    std::atomic<bool> found{false};\n+\n+    std::vector<std::thread> threads;\n+    int n_tasks = std::max(1u, std::thread::hardware_concurrency());\n+    for (int i = 0; i < n_tasks; ++i) {\n+        threads.emplace_back( grind_task, nBits, std::ref(header), i, n_tasks, std::ref(found) );\n+    }\n+    for (auto& t : threads) {\n+        t.join();\n+    }\n+    if (!found) {\n+        strPrint = \"Could not satisfy difficulty target\";\n+        return 1;\n+    }\n+\n+    CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n+    ss << header;\n+    strPrint = HexStr(ss);\n+    return 0;\n+}\n+\n+static int CommandLineUtil(int argc, char* argv[])\n+{\n+    if (argc <= 1) return 1;\n+\n+    std::string strPrint;\n+    int nRet = 0;\n+\n+    try {\n+        while (argc > 1 && IsSwitchChar(argv[1][0]) && (argv[1][1] != 0)) {\n+            --argc;\n+            ++argv;\n+        }\n+\n+        char* command = argv[1];\n+        if (strcmp(command, \"grind\") == 0) {",
      "path": "src/bitcoin-util.cpp",
      "position": 158,
      "original_position": 163,
      "commit_id": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "original_commit_id": "e077aa7055e71f08a7d2cfbb29702832899fee04",
      "in_reply_to_id": 492742101,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think ArgsManager supports subcommands that have different suboptions?",
      "created_at": "2020-09-22T16:34:37Z",
      "updated_at": "2021-01-12T08:35:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#discussion_r492877918",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492877918"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 158,
      "original_line": 158,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492887446",
      "pull_request_review_id": 493660820,
      "id": 492887446,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg4NzQ0Ng==",
      "diff_hunk": "@@ -0,0 +1,222 @@\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <arith_uint256.h>\n+#include <clientversion.h>\n+#include <coins.h>\n+#include <consensus/consensus.h>\n+#include <core_io.h>\n+#include <key_io.h>\n+#include <policy/rbf.h>\n+#include <primitives/transaction.h>\n+#include <script/script.h>\n+#include <script/sign.h>\n+#include <script/signingprovider.h>\n+#include <univalue.h>\n+#include <util/moneystr.h>\n+#include <util/rbf.h>\n+#include <util/strencodings.h>\n+#include <util/string.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+\n+#include <functional>\n+#include <memory>\n+#include <stdio.h>\n+#include <thread>\n+\n+#include <boost/algorithm/string.hpp>\n+\n+static const int CONTINUE_EXECUTION=-1;\n+\n+const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static void SetupBitcoinUtilArgs(ArgsManager &argsman)\n+{\n+    SetupHelpOptions(argsman);\n+\n+    SetupChainParamsBaseOptions(argsman);\n+}\n+\n+//\n+// This function returns either one of EXIT_ codes when it's expected to stop the process or\n+// CONTINUE_EXECUTION when it's expected to continue further.\n+//\n+static int AppInitUtil(int argc, char* argv[])\n+{\n+    //\n+    // Parameters\n+    //\n+    SetupBitcoinUtilArgs(gArgs);\n+    std::string error;\n+    if (!gArgs.ParseParameters(argc, argv, error)) {\n+        tfm::format(std::cerr, \"Error parsing command line arguments: %s\\n\", error);\n+        return EXIT_FAILURE;\n+    }\n+\n+    // Check for -chain, -testnet or -regtest parameter (Params() calls are only valid after this clause)\n+    try {\n+        SelectParams(gArgs.GetChainName());\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\n\", e.what());\n+        return EXIT_FAILURE;\n+    }\n+\n+    if (argc < 2 || HelpRequested(gArgs)) {\n+        // First part of help message is specific to this utility\n+        std::string strUsage = PACKAGE_NAME \" bitcoin-tx utility version \" + FormatFullVersion() + \"\\n\\n\" +\n+            \"Usage:  bitcoin-util [options] [commands]  Do stuff\\n\" +\n+            \"\\n\";\n+        strUsage += gArgs.GetHelpMessage();\n+\n+        tfm::format(std::cout, \"%s\", strUsage);\n+\n+        if (argc < 2) {\n+            tfm::format(std::cerr, \"Error: too few parameters\\n\");\n+            return EXIT_FAILURE;\n+        }\n+        return EXIT_SUCCESS;\n+    }\n+    return CONTINUE_EXECUTION;\n+}\n+\n+static void grind_task(uint32_t nBits, CBlockHeader& header_orig, uint32_t offset, uint32_t step, std::atomic<bool>& found)\n+{\n+    arith_uint256 target;\n+    bool neg, over;\n+    target.SetCompact(nBits, &neg, &over);\n+    if (target == 0 || neg || over) return;\n+    CBlockHeader header = header_orig; // working copy\n+    header.nNonce = offset;\n+\n+    uint32_t finish = std::numeric_limits<uint32_t>::max() - step;\n+    finish = finish - (finish % step) + offset;\n+\n+    while (!found && header.nNonce < finish) {\n+        const uint32_t next = (finish - header.nNonce < 5000*step) ? finish : header.nNonce + 5000*step;\n+        do {\n+            if (!(UintToArith256(header.GetHash()) > target)) {\n+                if (!found.exchange(true)) {\n+                    header_orig.nNonce = header.nNonce;\n+                }\n+                return;\n+            }\n+            header.nNonce += step;\n+        } while(header.nNonce != next);\n+    }\n+}\n+\n+static int Grind(int argc, char* argv[], std::string& strPrint)\n+{\n+    if (argc != 1) {\n+        strPrint = \"Must specify block header to grind\";\n+        return 1;\n+    }\n+\n+    CBlockHeader header;\n+    if (!DecodeHexBlockHeader(header, argv[0])) {\n+        strPrint = \"Could not decode block header\";\n+        return 1;\n+    }\n+\n+    uint32_t nBits = header.nBits;\n+    std::atomic<bool> found{false};\n+\n+    std::vector<std::thread> threads;\n+    int n_tasks = std::max(1u, std::thread::hardware_concurrency());\n+    for (int i = 0; i < n_tasks; ++i) {\n+        threads.emplace_back( grind_task, nBits, std::ref(header), i, n_tasks, std::ref(found) );\n+    }\n+    for (auto& t : threads) {\n+        t.join();\n+    }\n+    if (!found) {\n+        strPrint = \"Could not satisfy difficulty target\";\n+        return 1;\n+    }\n+\n+    CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n+    ss << header;\n+    strPrint = HexStr(ss);\n+    return 0;\n+}\n+\n+static int CommandLineUtil(int argc, char* argv[])\n+{\n+    if (argc <= 1) return 1;\n+\n+    std::string strPrint;\n+    int nRet = 0;\n+\n+    try {\n+        while (argc > 1 && IsSwitchChar(argv[1][0]) && (argv[1][1] != 0)) {\n+            --argc;\n+            ++argv;\n+        }\n+\n+        char* command = argv[1];\n+        if (strcmp(command, \"grind\") == 0) {",
      "path": "src/bitcoin-util.cpp",
      "position": 158,
      "original_position": 163,
      "commit_id": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "original_commit_id": "e077aa7055e71f08a7d2cfbb29702832899fee04",
      "in_reply_to_id": 492742101,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It would support `-grind=block_header_hex`. Is something else needed here that I am missing?",
      "created_at": "2020-09-22T16:49:40Z",
      "updated_at": "2021-01-12T08:35:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#discussion_r492887446",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492887446"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 158,
      "original_line": 158,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497289193",
      "pull_request_review_id": 499142142,
      "id": 497289193,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI4OTE5Mw==",
      "diff_hunk": "@@ -560,6 +561,12 @@ AC_ARG_ENABLE([util-wallet],\n   [build_bitcoin_wallet=$enableval],\n   [build_bitcoin_wallet=$build_bitcoin_utils])\n \n+AC_ARG_ENABLE([util-util],\n+  [AS_HELP_STRING([--enable-util-util],",
      "path": "configure.ac",
      "position": 22,
      "original_position": 22,
      "commit_id": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "original_commit_id": "a55abfe4259fbccf78be45ca2edcafb82cf11718",
      "in_reply_to_id": null,
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why is this needed, since there's already --with-util above? (Also, why util-util?)",
      "created_at": "2020-09-30T07:12:38Z",
      "updated_at": "2021-01-12T08:35:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#discussion_r497289193",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497289193"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 580,
      "original_line": 580,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497294186",
      "pull_request_review_id": 499142142,
      "id": 497294186,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI5NDE4Ng==",
      "diff_hunk": "@@ -0,0 +1,222 @@\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <arith_uint256.h>\n+#include <clientversion.h>\n+#include <coins.h>\n+#include <consensus/consensus.h>\n+#include <core_io.h>\n+#include <key_io.h>\n+#include <policy/rbf.h>\n+#include <primitives/transaction.h>\n+#include <script/script.h>\n+#include <script/sign.h>\n+#include <script/signingprovider.h>\n+#include <univalue.h>\n+#include <util/moneystr.h>\n+#include <util/rbf.h>\n+#include <util/strencodings.h>\n+#include <util/string.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+\n+#include <functional>\n+#include <memory>\n+#include <stdio.h>\n+#include <thread>\n+\n+#include <boost/algorithm/string.hpp>\n+\n+static const int CONTINUE_EXECUTION=-1;\n+\n+const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static void SetupBitcoinUtilArgs(ArgsManager &argsman)\n+{\n+    SetupHelpOptions(argsman);\n+\n+    SetupChainParamsBaseOptions(argsman);\n+}\n+\n+//\n+// This function returns either one of EXIT_ codes when it's expected to stop the process or\n+// CONTINUE_EXECUTION when it's expected to continue further.\n+//\n+static int AppInitUtil(int argc, char* argv[])\n+{\n+    //\n+    // Parameters\n+    //\n+    SetupBitcoinUtilArgs(gArgs);\n+    std::string error;\n+    if (!gArgs.ParseParameters(argc, argv, error)) {\n+        tfm::format(std::cerr, \"Error parsing command line arguments: %s\\n\", error);\n+        return EXIT_FAILURE;\n+    }\n+\n+    // Check for -chain, -testnet or -regtest parameter (Params() calls are only valid after this clause)\n+    try {\n+        SelectParams(gArgs.GetChainName());\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\n\", e.what());\n+        return EXIT_FAILURE;\n+    }\n+\n+    if (argc < 2 || HelpRequested(gArgs)) {\n+        // First part of help message is specific to this utility\n+        std::string strUsage = PACKAGE_NAME \" bitcoin-tx utility version \" + FormatFullVersion() + \"\\n\\n\" +\n+            \"Usage:  bitcoin-util [options] [commands]  Do stuff\\n\" +\n+            \"\\n\";\n+        strUsage += gArgs.GetHelpMessage();\n+\n+        tfm::format(std::cout, \"%s\", strUsage);\n+\n+        if (argc < 2) {\n+            tfm::format(std::cerr, \"Error: too few parameters\\n\");\n+            return EXIT_FAILURE;\n+        }\n+        return EXIT_SUCCESS;\n+    }\n+    return CONTINUE_EXECUTION;\n+}\n+\n+static void grind_task(uint32_t nBits, CBlockHeader& header_orig, uint32_t offset, uint32_t step, std::atomic<bool>& found)\n+{\n+    arith_uint256 target;\n+    bool neg, over;\n+    target.SetCompact(nBits, &neg, &over);\n+    if (target == 0 || neg || over) return;\n+    CBlockHeader header = header_orig; // working copy\n+    header.nNonce = offset;\n+\n+    uint32_t finish = std::numeric_limits<uint32_t>::max() - step;\n+    finish = finish - (finish % step) + offset;\n+\n+    while (!found && header.nNonce < finish) {\n+        const uint32_t next = (finish - header.nNonce < 5000*step) ? finish : header.nNonce + 5000*step;\n+        do {\n+            if (!(UintToArith256(header.GetHash()) > target)) {",
      "path": "src/bitcoin-util.cpp",
      "position": null,
      "original_position": 103,
      "commit_id": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "original_commit_id": "a55abfe4259fbccf78be45ca2edcafb82cf11718",
      "in_reply_to_id": null,
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`operator<=` exists, so using that seems more straightforward.",
      "created_at": "2020-09-30T07:22:27Z",
      "updated_at": "2021-01-12T08:35:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#discussion_r497294186",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497294186"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 103,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497300518",
      "pull_request_review_id": 499142142,
      "id": 497300518,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzMwMDUxOA==",
      "diff_hunk": "@@ -0,0 +1,222 @@\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <arith_uint256.h>\n+#include <clientversion.h>\n+#include <coins.h>\n+#include <consensus/consensus.h>\n+#include <core_io.h>\n+#include <key_io.h>\n+#include <policy/rbf.h>\n+#include <primitives/transaction.h>\n+#include <script/script.h>\n+#include <script/sign.h>\n+#include <script/signingprovider.h>\n+#include <univalue.h>\n+#include <util/moneystr.h>\n+#include <util/rbf.h>\n+#include <util/strencodings.h>\n+#include <util/string.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+\n+#include <functional>\n+#include <memory>\n+#include <stdio.h>\n+#include <thread>\n+\n+#include <boost/algorithm/string.hpp>\n+\n+static const int CONTINUE_EXECUTION=-1;\n+\n+const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static void SetupBitcoinUtilArgs(ArgsManager &argsman)\n+{\n+    SetupHelpOptions(argsman);\n+\n+    SetupChainParamsBaseOptions(argsman);\n+}\n+\n+//\n+// This function returns either one of EXIT_ codes when it's expected to stop the process or\n+// CONTINUE_EXECUTION when it's expected to continue further.\n+//\n+static int AppInitUtil(int argc, char* argv[])\n+{\n+    //\n+    // Parameters\n+    //\n+    SetupBitcoinUtilArgs(gArgs);\n+    std::string error;\n+    if (!gArgs.ParseParameters(argc, argv, error)) {\n+        tfm::format(std::cerr, \"Error parsing command line arguments: %s\\n\", error);\n+        return EXIT_FAILURE;",
      "path": "src/bitcoin-util.cpp",
      "position": 54,
      "original_position": 59,
      "commit_id": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "original_commit_id": "a55abfe4259fbccf78be45ca2edcafb82cf11718",
      "in_reply_to_id": null,
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Wouldn't it be totally fine if these simply did exit(...) instead of the EXIT_/CONTINUE_ stuff?",
      "created_at": "2020-09-30T07:34:08Z",
      "updated_at": "2021-01-12T08:35:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#discussion_r497300518",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497300518"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 54,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497471331",
      "pull_request_review_id": 499378286,
      "id": 497471331,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ3MTMzMQ==",
      "diff_hunk": "@@ -0,0 +1,222 @@\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <arith_uint256.h>\n+#include <clientversion.h>\n+#include <coins.h>\n+#include <consensus/consensus.h>\n+#include <core_io.h>\n+#include <key_io.h>\n+#include <policy/rbf.h>\n+#include <primitives/transaction.h>\n+#include <script/script.h>\n+#include <script/sign.h>\n+#include <script/signingprovider.h>\n+#include <univalue.h>\n+#include <util/moneystr.h>\n+#include <util/rbf.h>\n+#include <util/strencodings.h>\n+#include <util/string.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+\n+#include <functional>\n+#include <memory>\n+#include <stdio.h>\n+#include <thread>\n+\n+#include <boost/algorithm/string.hpp>\n+\n+static const int CONTINUE_EXECUTION=-1;\n+\n+const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static void SetupBitcoinUtilArgs(ArgsManager &argsman)\n+{\n+    SetupHelpOptions(argsman);\n+\n+    SetupChainParamsBaseOptions(argsman);\n+}\n+\n+//\n+// This function returns either one of EXIT_ codes when it's expected to stop the process or\n+// CONTINUE_EXECUTION when it's expected to continue further.\n+//\n+static int AppInitUtil(int argc, char* argv[])\n+{\n+    //\n+    // Parameters\n+    //\n+    SetupBitcoinUtilArgs(gArgs);\n+    std::string error;\n+    if (!gArgs.ParseParameters(argc, argv, error)) {\n+        tfm::format(std::cerr, \"Error parsing command line arguments: %s\\n\", error);\n+        return EXIT_FAILURE;\n+    }\n+\n+    // Check for -chain, -testnet or -regtest parameter (Params() calls are only valid after this clause)",
      "path": "src/bitcoin-util.cpp",
      "position": null,
      "original_position": 62,
      "commit_id": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "original_commit_id": "e077aa7055e71f08a7d2cfbb29702832899fee04",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Could cherry-pick the syle-changes from commit faf0a26711eed9264113463e56b988cf9fe549fd?",
      "created_at": "2020-09-30T12:32:51Z",
      "updated_at": "2021-01-12T08:35:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#discussion_r497471331",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497471331"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 62,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498424245",
      "pull_request_review_id": 500593135,
      "id": 498424245,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQyNDI0NQ==",
      "diff_hunk": "@@ -560,6 +561,12 @@ AC_ARG_ENABLE([util-wallet],\n   [build_bitcoin_wallet=$enableval],\n   [build_bitcoin_wallet=$build_bitcoin_utils])\n \n+AC_ARG_ENABLE([util-util],\n+  [AS_HELP_STRING([--enable-util-util],",
      "path": "configure.ac",
      "position": 22,
      "original_position": 22,
      "commit_id": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "original_commit_id": "a55abfe4259fbccf78be45ca2edcafb82cf11718",
      "in_reply_to_id": 497289193,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`--with-utils` gives the bitcoin-cli, bitcoin-tx, bitcoin-util, bitcoin-wallet utils; `--with-util-X` just gives bitcoin-X. Not really needed, (and util-util is certainly weird) but don't see any reason to be inconsistent.",
      "created_at": "2020-10-01T18:01:49Z",
      "updated_at": "2021-01-12T08:35:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#discussion_r498424245",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498424245"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 580,
      "original_line": 580,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498425839",
      "pull_request_review_id": 500595480,
      "id": 498425839,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQyNTgzOQ==",
      "diff_hunk": "@@ -0,0 +1,222 @@\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <arith_uint256.h>\n+#include <clientversion.h>\n+#include <coins.h>\n+#include <consensus/consensus.h>\n+#include <core_io.h>\n+#include <key_io.h>\n+#include <policy/rbf.h>\n+#include <primitives/transaction.h>\n+#include <script/script.h>\n+#include <script/sign.h>\n+#include <script/signingprovider.h>\n+#include <univalue.h>\n+#include <util/moneystr.h>\n+#include <util/rbf.h>\n+#include <util/strencodings.h>\n+#include <util/string.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+\n+#include <functional>\n+#include <memory>\n+#include <stdio.h>\n+#include <thread>\n+\n+#include <boost/algorithm/string.hpp>\n+\n+static const int CONTINUE_EXECUTION=-1;\n+\n+const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static void SetupBitcoinUtilArgs(ArgsManager &argsman)\n+{\n+    SetupHelpOptions(argsman);\n+\n+    SetupChainParamsBaseOptions(argsman);\n+}\n+\n+//\n+// This function returns either one of EXIT_ codes when it's expected to stop the process or\n+// CONTINUE_EXECUTION when it's expected to continue further.\n+//\n+static int AppInitUtil(int argc, char* argv[])\n+{\n+    //\n+    // Parameters\n+    //\n+    SetupBitcoinUtilArgs(gArgs);\n+    std::string error;\n+    if (!gArgs.ParseParameters(argc, argv, error)) {\n+        tfm::format(std::cerr, \"Error parsing command line arguments: %s\\n\", error);\n+        return EXIT_FAILURE;",
      "path": "src/bitcoin-util.cpp",
      "position": 54,
      "original_position": 59,
      "commit_id": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "original_commit_id": "a55abfe4259fbccf78be45ca2edcafb82cf11718",
      "in_reply_to_id": 497300518,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sure? It's just doing the same thing bitcoin-tx does.",
      "created_at": "2020-10-01T18:05:04Z",
      "updated_at": "2021-01-12T08:35:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#discussion_r498425839",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498425839"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 54,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498431698",
      "pull_request_review_id": 500603528,
      "id": 498431698,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQzMTY5OA==",
      "diff_hunk": "@@ -0,0 +1,222 @@\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <arith_uint256.h>\n+#include <clientversion.h>\n+#include <coins.h>\n+#include <consensus/consensus.h>\n+#include <core_io.h>\n+#include <key_io.h>\n+#include <policy/rbf.h>\n+#include <primitives/transaction.h>\n+#include <script/script.h>\n+#include <script/sign.h>\n+#include <script/signingprovider.h>\n+#include <univalue.h>\n+#include <util/moneystr.h>\n+#include <util/rbf.h>\n+#include <util/strencodings.h>\n+#include <util/string.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+\n+#include <functional>\n+#include <memory>\n+#include <stdio.h>\n+#include <thread>\n+\n+#include <boost/algorithm/string.hpp>\n+\n+static const int CONTINUE_EXECUTION=-1;\n+\n+const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static void SetupBitcoinUtilArgs(ArgsManager &argsman)\n+{\n+    SetupHelpOptions(argsman);\n+\n+    SetupChainParamsBaseOptions(argsman);\n+}\n+\n+//\n+// This function returns either one of EXIT_ codes when it's expected to stop the process or\n+// CONTINUE_EXECUTION when it's expected to continue further.\n+//\n+static int AppInitUtil(int argc, char* argv[])\n+{\n+    //\n+    // Parameters\n+    //\n+    SetupBitcoinUtilArgs(gArgs);\n+    std::string error;\n+    if (!gArgs.ParseParameters(argc, argv, error)) {\n+        tfm::format(std::cerr, \"Error parsing command line arguments: %s\\n\", error);\n+        return EXIT_FAILURE;\n+    }\n+\n+    // Check for -chain, -testnet or -regtest parameter (Params() calls are only valid after this clause)\n+    try {\n+        SelectParams(gArgs.GetChainName());\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\n\", e.what());\n+        return EXIT_FAILURE;\n+    }\n+\n+    if (argc < 2 || HelpRequested(gArgs)) {\n+        // First part of help message is specific to this utility\n+        std::string strUsage = PACKAGE_NAME \" bitcoin-tx utility version \" + FormatFullVersion() + \"\\n\\n\" +\n+            \"Usage:  bitcoin-util [options] [commands]  Do stuff\\n\" +\n+            \"\\n\";\n+        strUsage += gArgs.GetHelpMessage();\n+\n+        tfm::format(std::cout, \"%s\", strUsage);\n+\n+        if (argc < 2) {\n+            tfm::format(std::cerr, \"Error: too few parameters\\n\");\n+            return EXIT_FAILURE;\n+        }\n+        return EXIT_SUCCESS;\n+    }\n+    return CONTINUE_EXECUTION;\n+}\n+\n+static void grind_task(uint32_t nBits, CBlockHeader& header_orig, uint32_t offset, uint32_t step, std::atomic<bool>& found)\n+{\n+    arith_uint256 target;\n+    bool neg, over;\n+    target.SetCompact(nBits, &neg, &over);\n+    if (target == 0 || neg || over) return;\n+    CBlockHeader header = header_orig; // working copy\n+    header.nNonce = offset;\n+\n+    uint32_t finish = std::numeric_limits<uint32_t>::max() - step;\n+    finish = finish - (finish % step) + offset;\n+\n+    while (!found && header.nNonce < finish) {\n+        const uint32_t next = (finish - header.nNonce < 5000*step) ? finish : header.nNonce + 5000*step;\n+        do {\n+            if (!(UintToArith256(header.GetHash()) > target)) {\n+                if (!found.exchange(true)) {\n+                    header_orig.nNonce = header.nNonce;\n+                }\n+                return;\n+            }\n+            header.nNonce += step;\n+        } while(header.nNonce != next);\n+    }\n+}\n+\n+static int Grind(int argc, char* argv[], std::string& strPrint)\n+{\n+    if (argc != 1) {\n+        strPrint = \"Must specify block header to grind\";\n+        return 1;\n+    }\n+\n+    CBlockHeader header;\n+    if (!DecodeHexBlockHeader(header, argv[0])) {\n+        strPrint = \"Could not decode block header\";\n+        return 1;\n+    }\n+\n+    uint32_t nBits = header.nBits;\n+    std::atomic<bool> found{false};\n+\n+    std::vector<std::thread> threads;\n+    int n_tasks = std::max(1u, std::thread::hardware_concurrency());\n+    for (int i = 0; i < n_tasks; ++i) {\n+        threads.emplace_back( grind_task, nBits, std::ref(header), i, n_tasks, std::ref(found) );\n+    }\n+    for (auto& t : threads) {\n+        t.join();\n+    }\n+    if (!found) {\n+        strPrint = \"Could not satisfy difficulty target\";\n+        return 1;\n+    }\n+\n+    CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n+    ss << header;\n+    strPrint = HexStr(ss);\n+    return 0;\n+}\n+\n+static int CommandLineUtil(int argc, char* argv[])\n+{\n+    if (argc <= 1) return 1;\n+\n+    std::string strPrint;\n+    int nRet = 0;\n+\n+    try {\n+        while (argc > 1 && IsSwitchChar(argv[1][0]) && (argv[1][1] != 0)) {\n+            --argc;\n+            ++argv;\n+        }\n+\n+        char* command = argv[1];\n+        if (strcmp(command, \"grind\") == 0) {",
      "path": "src/bitcoin-util.cpp",
      "position": 158,
      "original_position": 163,
      "commit_id": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "original_commit_id": "e077aa7055e71f08a7d2cfbb29702832899fee04",
      "in_reply_to_id": 492742101,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I was thinking it would make sense for `bitcoin-util` would have subcommands like git, each with their own different options (like `--amend` for `git commit` vs `--continue` for `git rebase`). `bitcoin-util grind` could have a `-jobs=8` argument specifying how many jobs to run in parallel, eg, which presumably wouldn't be appropriate elsewhere.",
      "created_at": "2020-10-01T18:16:18Z",
      "updated_at": "2021-01-12T08:35:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#discussion_r498431698",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/498431698"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 158,
      "original_line": 158,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/506898283",
      "pull_request_review_id": 510970758,
      "id": 506898283,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjg5ODI4Mw==",
      "diff_hunk": "@@ -818,6 +824,10 @@ static RPCHelpMan getblocktemplate()\n     UniValue aRules(UniValue::VARR);\n     aRules.push_back(\"csv\");\n     if (!fPreSegWit) aRules.push_back(\"!segwit\");\n+    if (consensusParams.signet_blocks) {\n+        aRules.push_back(\"!signet\");",
      "path": "src/rpc/mining.cpp",
      "position": 49,
      "original_position": 27,
      "commit_id": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "original_commit_id": "dd62762ff2d4eac87ce12dff0e8f7ac3dd535f39",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It would be useful to add a comment for non mining experts, such as yours truly, to explain what this does (especially the `!` part, which I guess doesn't mean \"not\" here). I found the discussion around `!segwit` rather confusing: https://github.com/bitcoin/bitcoin/pull/17946",
      "created_at": "2020-10-17T09:02:54Z",
      "updated_at": "2021-01-12T08:35:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#discussion_r506898283",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/506898283"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 825,
      "original_line": 825,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/506899582",
      "pull_request_review_id": 510970758,
      "id": 506899582,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjg5OTU4Mg==",
      "diff_hunk": "@@ -667,11 +667,13 @@ static RPCHelpMan getblocktemplate()\n     if(!node.connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n-    if (node.connman->GetNodeCount(CConnman::CONNECTIONS_ALL) == 0)\n-        throw JSONRPCError(RPC_CLIENT_NOT_CONNECTED, PACKAGE_NAME \" is not connected!\");\n+    if (!Params().IsTestChain()) {\n+        if (node.connman->GetNodeCount(CConnman::CONNECTIONS_ALL) == 0)",
      "path": "src/rpc/mining.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "original_commit_id": "0857bf9e6cb23792de94cfd164289d3eb08c608f",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Could add missing brackets since you're touching this area.",
      "created_at": "2020-10-17T09:08:58Z",
      "updated_at": "2021-01-12T08:35:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#discussion_r506899582",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/506899582"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 671,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/506905640",
      "pull_request_review_id": 510970758,
      "id": 506905640,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjkwNTY0MA==",
      "diff_hunk": "@@ -0,0 +1,420 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import argparse\n+import base64\n+import json\n+import logging\n+import struct\n+import sys\n+import time\n+import subprocess\n+\n+from binascii import unhexlify\n+from io import BytesIO\n+\n+sys.path.insert(0, \"../test/functional/\")\n+\n+from test_framework.blocktools import WITNESS_COMMITMENT_HEADER, script_BIP34_coinbase_height # noqa: E402\n+from test_framework.messages import CBlock, CBlockHeader, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, ToHex, deser_string, hash256, ser_compact_size, ser_string, ser_uint256, uint256_from_str # noqa: E402\n+from test_framework.script import CScriptOp # noqa: E402\n+\n+logging.basicConfig(\n+    format='%(asctime)s %(levelname)s %(message)s',\n+    level=logging.INFO,\n+    datefmt='%Y-%m-%d %H:%M:%S')\n+\n+SIGNET_HEADER = b\"\\xec\\xc7\\xda\\xa2\"\n+PSBT_SIGNET_BLOCK = b\"\\xfc\\x06signetb\"    # proprietary PSBT global field holding the block being signed\n+\n+# #### some helpers that could go into test_framework\n+\n+# like FromHex, but without the hex part\n+def FromBinary(cls, stream):\n+    \"\"\"deserialize a binary stream (or bytes object) into an object\"\"\"\n+    # handle bytes object by turning it into a stream\n+    was_bytes = isinstance(stream, bytes)\n+    if was_bytes:\n+        stream = BytesIO(stream)\n+    obj = cls()\n+    obj.deserialize(stream)\n+    if was_bytes:\n+        assert len(stream.read()) == 0\n+    return obj\n+\n+class PSBTMap:\n+    \"\"\"Class for serializing and deserializing PSBT maps\"\"\"\n+\n+    def __init__(self, map=None):\n+        self.map = map if map is not None else {}\n+\n+    def deserialize(self, f):\n+        m = {}\n+        while True:\n+            k = deser_string(f)\n+            if len(k) == 0:\n+                break\n+            v = deser_string(f)\n+            if len(k) == 1:\n+                k = k[0]\n+            assert k not in m\n+            m[k] = v\n+        self.map = m\n+\n+    def serialize(self):\n+        m = b\"\"\n+        for k,v in self.map.items():\n+            if isinstance(k, int) and 0 <= k and k <= 255:\n+                k = bytes([k])\n+            m += ser_compact_size(len(k)) + k\n+            m += ser_compact_size(len(v)) + v\n+        m += b\"\\x00\"\n+        return m\n+\n+class PSBT:\n+    \"\"\"Class for serializing and deserializing PSBTs\"\"\"\n+\n+    def __init__(self):\n+        self.g = PSBTMap()\n+        self.i = []\n+        self.o = []\n+        self.tx = None\n+\n+    def deserialize(self, f):\n+        assert f.read(5) == b\"psbt\\xff\"\n+        self.g = FromBinary(PSBTMap, f)\n+        assert 0 in self.g.map\n+        self.tx = FromBinary(CTransaction, self.g.map[0])\n+        self.i = [FromBinary(PSBTMap, f) for _ in self.tx.vin]\n+        self.o = [FromBinary(PSBTMap, f) for _ in self.tx.vout]\n+        return self\n+\n+    def serialize(self):\n+        assert isinstance(self.g, PSBTMap)\n+        assert isinstance(self.i, list) and all(isinstance(x, PSBTMap) for x in self.i)\n+        assert isinstance(self.o, list) and all(isinstance(x, PSBTMap) for x in self.o)\n+        assert 0 in self.g.map\n+        tx = FromBinary(CTransaction, self.g.map[0])\n+        assert len(tx.vin) == len(self.i)\n+        assert len(tx.vout) == len(self.o)\n+\n+        psbt = [x.serialize() for x in [self.g] + self.i + self.o]\n+        return b\"psbt\\xff\" + b\"\".join(psbt)\n+\n+    def to_base64(self):\n+        return base64.b64encode(self.serialize()).decode(\"utf8\")\n+\n+    @classmethod\n+    def from_base64(cls, b64psbt):\n+        return FromBinary(cls, base64.b64decode(b64psbt))\n+\n+# #####\n+\n+def create_coinbase(height, value, spk):\n+    cb = CTransaction()\n+    cb.vin = [CTxIn(COutPoint(0, 0xffffffff), script_BIP34_coinbase_height(height), 0xffffffff)]\n+    cb.vout = [CTxOut(value, spk)]\n+    return cb\n+\n+def get_witness_script(witness_root, witness_nonce):\n+    commitment = uint256_from_str(hash256(ser_uint256(witness_root) + ser_uint256(witness_nonce)))\n+    return b\"\\x6a\" + CScriptOp.encode_op_pushdata(WITNESS_COMMITMENT_HEADER + ser_uint256(commitment))\n+\n+def signet_txs(block, challenge):\n+    # assumes signet solution has not been added yet so does not need\n+    # to be removed\n+\n+    txs = block.vtx[:]\n+    txs[0] = CTransaction(txs[0])\n+    txs[0].vout[-1].scriptPubKey += CScriptOp.encode_op_pushdata(SIGNET_HEADER)\n+    hashes = []\n+    for tx in txs:\n+        tx.rehash()\n+        hashes.append(ser_uint256(tx.sha256))\n+    mroot = block.get_merkle_root(hashes)\n+\n+    sd = b\"\"\n+    sd += struct.pack(\"<i\", block.nVersion)\n+    sd += ser_uint256(block.hashPrevBlock)\n+    sd += ser_uint256(mroot)\n+    sd += struct.pack(\"<I\", block.nTime)\n+\n+    to_spend = CTransaction()\n+    to_spend.nVersion = 0\n+    to_spend.nLockTime = 0\n+    to_spend.vin = [CTxIn(COutPoint(0, 0xFFFFFFFF), b\"\\x00\" + CScriptOp.encode_op_pushdata(sd), 0)]\n+    to_spend.vout = [CTxOut(0, challenge)]\n+    to_spend.rehash()\n+\n+    spend = CTransaction()\n+    spend.nVersion = 0\n+    spend.nLockTime = 0\n+    spend.vin = [CTxIn(COutPoint(to_spend.sha256, 0), b\"\", 0)]\n+    spend.vout = [CTxOut(0, b\"\\x6a\")]\n+\n+    return spend, to_spend\n+\n+def do_createpsbt(block, signme, spendme):\n+    psbt = PSBT()\n+    psbt.g = PSBTMap( {0: signme.serialize(),\n+                       PSBT_SIGNET_BLOCK: block.serialize()\n+                     } )\n+    psbt.i = [ PSBTMap( {0: spendme.serialize(),\n+                         3: bytes([1,0,0,0])})\n+             ]\n+    psbt.o = [ PSBTMap() ]\n+    return psbt.to_base64()\n+\n+def do_decode_psbt(b64psbt):\n+    psbt = PSBT.from_base64(b64psbt)\n+\n+    assert len(psbt.tx.vin) == 1\n+    assert len(psbt.tx.vout) == 1\n+    assert PSBT_SIGNET_BLOCK in psbt.g.map\n+\n+    scriptSig = psbt.i[0].map.get(7, b\"\")\n+    scriptWitness = psbt.i[0].map.get(8, b\"\\x00\")\n+\n+    return FromBinary(CBlock, psbt.g.map[PSBT_SIGNET_BLOCK]), ser_string(scriptSig) + scriptWitness\n+\n+def finish_block(block, signet_solution, grind_cmd):\n+    block.vtx[0].vout[-1].scriptPubKey += CScriptOp.encode_op_pushdata(SIGNET_HEADER + signet_solution)\n+    block.vtx[0].rehash()\n+    block.hashMerkleRoot = block.calc_merkle_root()\n+    if grind_cmd is None:\n+        block.solve()\n+    else:\n+        headhex = CBlockHeader.serialize(block).hex()\n+        cmd = grind_cmd.split(\" \") + [headhex]\n+        newheadhex = subprocess.run(cmd, stdout=subprocess.PIPE, input=b\"\", check=True).stdout.strip()\n+        newhead = FromHex(CBlockHeader(), newheadhex.decode('utf8'))\n+        block.nNonce = newhead.nNonce\n+        block.rehash()\n+    return block\n+\n+def generate_psbt(tmpl, reward_spk, *, blocktime=None):\n+    signet_spk = tmpl[\"signet_challenge\"]\n+    signet_spk_bin = unhexlify(signet_spk)\n+\n+    cbtx = create_coinbase(height=tmpl[\"height\"], value=tmpl[\"coinbasevalue\"], spk=reward_spk)\n+    cbtx.vin[0].nSequence = 2**32-2\n+    cbtx.rehash()\n+\n+    block = CBlock()\n+    block.nVersion = tmpl[\"version\"]\n+    block.hashPrevBlock = int(tmpl[\"previousblockhash\"], 16)\n+    block.nTime = tmpl[\"curtime\"] if blocktime is None else blocktime\n+    if block.nTime < tmpl[\"mintime\"]:\n+        block.nTime = tmpl[\"mintime\"]\n+    block.nBits = int(tmpl[\"bits\"], 16)\n+    block.nNonce = 0\n+    block.vtx = [cbtx] + [FromHex(CTransaction(), t[\"data\"]) for t in tmpl[\"transactions\"]]\n+\n+    witnonce = 0\n+    witroot = block.calc_witness_merkle_root()\n+    cbwit = CTxInWitness()\n+    cbwit.scriptWitness.stack = [ser_uint256(witnonce)]\n+    block.vtx[0].wit.vtxinwit = [cbwit]\n+    block.vtx[0].vout.append(CTxOut(0, get_witness_script(witroot, witnonce)))\n+\n+    signme, spendme = signet_txs(block, signet_spk_bin)\n+\n+    return do_createpsbt(block, signme, spendme)\n+\n+def get_reward_address(args, height):\n+    if args.address is not None:\n+        return args.address\n+\n+    if '*' not in args.descriptor:\n+        addr = json.loads(args.bcli(\"deriveaddresses\", args.descriptor))[0]\n+        args.address = addr\n+        return addr\n+\n+    remove = [k for k in args.derived_addresses.keys() if k+20 <= height]\n+    for k in remove:\n+        del args.derived_addresses[k]\n+\n+    addr = args.derived_addresses.get(height, None)\n+    if addr is None:\n+        addrs = json.loads(args.bcli(\"deriveaddresses\", args.descriptor, \"[%d,%d]\" % (height, height+20)))\n+        addr = addrs[0]\n+        for k, a in enumerate(addrs):\n+            args.derived_addresses[height+k] = a\n+\n+    return addr\n+\n+def get_reward_addr_spk(args, height):\n+    assert args.address is not None or args.descriptor is not None\n+\n+    if hasattr(args, \"reward_spk\"):\n+        return args.address, args.reward_spk\n+\n+    reward_addr = get_reward_address(args, height)\n+    reward_spk = unhexlify(json.loads(args.bcli(\"getaddressinfo\", reward_addr))[\"scriptPubKey\"])\n+    if args.address is not None:\n+        # will always be the same, so cache\n+        args.reward_spk = reward_spk\n+\n+    return reward_addr, reward_spk\n+\n+def do_genpsbt(args):\n+    tmpl = json.load(sys.stdin)\n+    _, reward_spk = get_reward_addr_spk(args, tmpl[\"height\"])\n+    psbt = generate_psbt(tmpl, reward_spk)\n+    print(psbt)\n+\n+def do_solvepsbt(args):\n+    block, signet_solution = do_decode_psbt(sys.stdin.read())\n+    block = finish_block(block, signet_solution, args.grind_cmd)\n+    print(ToHex(block))\n+\n+def do_generate(args):\n+    if args.N != int(args.N) or args.N < -1:\n+       logging.error(\"N must be an integer, and at least -1\")\n+       return 1\n+\n+    if args.target_mining_time is not None:\n+        if args.target_mining_time <= 0 or args.target_mining_time > 600:\n+            logging.error(\"Target mining time must be between 1 and 600\")\n+            return 1\n+\n+    mi = json.loads(args.bcli(\"getmininginfo\"))",
      "path": "contrib/signet/generate.py",
      "position": null,
      "original_position": 283,
      "commit_id": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "original_commit_id": "f2ee4a95b3d9eac7b717f2ed4316dcb5df2d2795",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is not Python 3.5.6 friendly:\r\n```\r\nJSON object must be str, not 'bytes'\r\n```",
      "created_at": "2020-10-17T09:24:29Z",
      "updated_at": "2021-01-12T08:35:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#discussion_r506905640",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/506905640"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 286,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/506908363",
      "pull_request_review_id": 510970758,
      "id": 506908363,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjkwODM2Mw==",
      "diff_hunk": "@@ -0,0 +1,420 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import argparse\n+import base64\n+import json\n+import logging\n+import struct\n+import sys\n+import time\n+import subprocess\n+\n+from binascii import unhexlify\n+from io import BytesIO\n+\n+sys.path.insert(0, \"../test/functional/\")\n+\n+from test_framework.blocktools import WITNESS_COMMITMENT_HEADER, script_BIP34_coinbase_height # noqa: E402\n+from test_framework.messages import CBlock, CBlockHeader, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, ToHex, deser_string, hash256, ser_compact_size, ser_string, ser_uint256, uint256_from_str # noqa: E402\n+from test_framework.script import CScriptOp # noqa: E402\n+\n+logging.basicConfig(\n+    format='%(asctime)s %(levelname)s %(message)s',\n+    level=logging.INFO,\n+    datefmt='%Y-%m-%d %H:%M:%S')\n+\n+SIGNET_HEADER = b\"\\xec\\xc7\\xda\\xa2\"\n+PSBT_SIGNET_BLOCK = b\"\\xfc\\x06signetb\"    # proprietary PSBT global field holding the block being signed\n+\n+# #### some helpers that could go into test_framework\n+\n+# like FromHex, but without the hex part\n+def FromBinary(cls, stream):\n+    \"\"\"deserialize a binary stream (or bytes object) into an object\"\"\"\n+    # handle bytes object by turning it into a stream\n+    was_bytes = isinstance(stream, bytes)\n+    if was_bytes:\n+        stream = BytesIO(stream)\n+    obj = cls()\n+    obj.deserialize(stream)\n+    if was_bytes:\n+        assert len(stream.read()) == 0\n+    return obj\n+\n+class PSBTMap:\n+    \"\"\"Class for serializing and deserializing PSBT maps\"\"\"\n+\n+    def __init__(self, map=None):\n+        self.map = map if map is not None else {}\n+\n+    def deserialize(self, f):\n+        m = {}\n+        while True:\n+            k = deser_string(f)\n+            if len(k) == 0:\n+                break\n+            v = deser_string(f)\n+            if len(k) == 1:\n+                k = k[0]\n+            assert k not in m\n+            m[k] = v\n+        self.map = m\n+\n+    def serialize(self):\n+        m = b\"\"\n+        for k,v in self.map.items():\n+            if isinstance(k, int) and 0 <= k and k <= 255:\n+                k = bytes([k])\n+            m += ser_compact_size(len(k)) + k\n+            m += ser_compact_size(len(v)) + v\n+        m += b\"\\x00\"\n+        return m\n+\n+class PSBT:\n+    \"\"\"Class for serializing and deserializing PSBTs\"\"\"\n+\n+    def __init__(self):\n+        self.g = PSBTMap()\n+        self.i = []\n+        self.o = []\n+        self.tx = None\n+\n+    def deserialize(self, f):\n+        assert f.read(5) == b\"psbt\\xff\"\n+        self.g = FromBinary(PSBTMap, f)\n+        assert 0 in self.g.map\n+        self.tx = FromBinary(CTransaction, self.g.map[0])\n+        self.i = [FromBinary(PSBTMap, f) for _ in self.tx.vin]\n+        self.o = [FromBinary(PSBTMap, f) for _ in self.tx.vout]\n+        return self\n+\n+    def serialize(self):\n+        assert isinstance(self.g, PSBTMap)\n+        assert isinstance(self.i, list) and all(isinstance(x, PSBTMap) for x in self.i)\n+        assert isinstance(self.o, list) and all(isinstance(x, PSBTMap) for x in self.o)\n+        assert 0 in self.g.map\n+        tx = FromBinary(CTransaction, self.g.map[0])\n+        assert len(tx.vin) == len(self.i)\n+        assert len(tx.vout) == len(self.o)\n+\n+        psbt = [x.serialize() for x in [self.g] + self.i + self.o]\n+        return b\"psbt\\xff\" + b\"\".join(psbt)\n+\n+    def to_base64(self):\n+        return base64.b64encode(self.serialize()).decode(\"utf8\")\n+\n+    @classmethod\n+    def from_base64(cls, b64psbt):\n+        return FromBinary(cls, base64.b64decode(b64psbt))\n+\n+# #####\n+\n+def create_coinbase(height, value, spk):\n+    cb = CTransaction()\n+    cb.vin = [CTxIn(COutPoint(0, 0xffffffff), script_BIP34_coinbase_height(height), 0xffffffff)]\n+    cb.vout = [CTxOut(value, spk)]\n+    return cb\n+\n+def get_witness_script(witness_root, witness_nonce):\n+    commitment = uint256_from_str(hash256(ser_uint256(witness_root) + ser_uint256(witness_nonce)))\n+    return b\"\\x6a\" + CScriptOp.encode_op_pushdata(WITNESS_COMMITMENT_HEADER + ser_uint256(commitment))\n+\n+def signet_txs(block, challenge):\n+    # assumes signet solution has not been added yet so does not need\n+    # to be removed\n+\n+    txs = block.vtx[:]\n+    txs[0] = CTransaction(txs[0])\n+    txs[0].vout[-1].scriptPubKey += CScriptOp.encode_op_pushdata(SIGNET_HEADER)\n+    hashes = []\n+    for tx in txs:\n+        tx.rehash()\n+        hashes.append(ser_uint256(tx.sha256))\n+    mroot = block.get_merkle_root(hashes)\n+\n+    sd = b\"\"\n+    sd += struct.pack(\"<i\", block.nVersion)\n+    sd += ser_uint256(block.hashPrevBlock)\n+    sd += ser_uint256(mroot)\n+    sd += struct.pack(\"<I\", block.nTime)\n+\n+    to_spend = CTransaction()\n+    to_spend.nVersion = 0\n+    to_spend.nLockTime = 0\n+    to_spend.vin = [CTxIn(COutPoint(0, 0xFFFFFFFF), b\"\\x00\" + CScriptOp.encode_op_pushdata(sd), 0)]\n+    to_spend.vout = [CTxOut(0, challenge)]\n+    to_spend.rehash()\n+\n+    spend = CTransaction()\n+    spend.nVersion = 0\n+    spend.nLockTime = 0\n+    spend.vin = [CTxIn(COutPoint(to_spend.sha256, 0), b\"\", 0)]\n+    spend.vout = [CTxOut(0, b\"\\x6a\")]\n+\n+    return spend, to_spend\n+\n+def do_createpsbt(block, signme, spendme):\n+    psbt = PSBT()\n+    psbt.g = PSBTMap( {0: signme.serialize(),\n+                       PSBT_SIGNET_BLOCK: block.serialize()\n+                     } )\n+    psbt.i = [ PSBTMap( {0: spendme.serialize(),\n+                         3: bytes([1,0,0,0])})\n+             ]\n+    psbt.o = [ PSBTMap() ]\n+    return psbt.to_base64()\n+\n+def do_decode_psbt(b64psbt):\n+    psbt = PSBT.from_base64(b64psbt)\n+\n+    assert len(psbt.tx.vin) == 1\n+    assert len(psbt.tx.vout) == 1\n+    assert PSBT_SIGNET_BLOCK in psbt.g.map\n+\n+    scriptSig = psbt.i[0].map.get(7, b\"\")\n+    scriptWitness = psbt.i[0].map.get(8, b\"\\x00\")\n+\n+    return FromBinary(CBlock, psbt.g.map[PSBT_SIGNET_BLOCK]), ser_string(scriptSig) + scriptWitness\n+\n+def finish_block(block, signet_solution, grind_cmd):\n+    block.vtx[0].vout[-1].scriptPubKey += CScriptOp.encode_op_pushdata(SIGNET_HEADER + signet_solution)\n+    block.vtx[0].rehash()\n+    block.hashMerkleRoot = block.calc_merkle_root()\n+    if grind_cmd is None:\n+        block.solve()\n+    else:\n+        headhex = CBlockHeader.serialize(block).hex()\n+        cmd = grind_cmd.split(\" \") + [headhex]\n+        newheadhex = subprocess.run(cmd, stdout=subprocess.PIPE, input=b\"\", check=True).stdout.strip()\n+        newhead = FromHex(CBlockHeader(), newheadhex.decode('utf8'))\n+        block.nNonce = newhead.nNonce\n+        block.rehash()\n+    return block\n+\n+def generate_psbt(tmpl, reward_spk, *, blocktime=None):\n+    signet_spk = tmpl[\"signet_challenge\"]\n+    signet_spk_bin = unhexlify(signet_spk)\n+\n+    cbtx = create_coinbase(height=tmpl[\"height\"], value=tmpl[\"coinbasevalue\"], spk=reward_spk)\n+    cbtx.vin[0].nSequence = 2**32-2\n+    cbtx.rehash()\n+\n+    block = CBlock()\n+    block.nVersion = tmpl[\"version\"]\n+    block.hashPrevBlock = int(tmpl[\"previousblockhash\"], 16)\n+    block.nTime = tmpl[\"curtime\"] if blocktime is None else blocktime\n+    if block.nTime < tmpl[\"mintime\"]:\n+        block.nTime = tmpl[\"mintime\"]\n+    block.nBits = int(tmpl[\"bits\"], 16)\n+    block.nNonce = 0\n+    block.vtx = [cbtx] + [FromHex(CTransaction(), t[\"data\"]) for t in tmpl[\"transactions\"]]\n+\n+    witnonce = 0\n+    witroot = block.calc_witness_merkle_root()\n+    cbwit = CTxInWitness()\n+    cbwit.scriptWitness.stack = [ser_uint256(witnonce)]\n+    block.vtx[0].wit.vtxinwit = [cbwit]\n+    block.vtx[0].vout.append(CTxOut(0, get_witness_script(witroot, witnonce)))\n+\n+    signme, spendme = signet_txs(block, signet_spk_bin)\n+\n+    return do_createpsbt(block, signme, spendme)\n+\n+def get_reward_address(args, height):\n+    if args.address is not None:\n+        return args.address\n+\n+    if '*' not in args.descriptor:\n+        addr = json.loads(args.bcli(\"deriveaddresses\", args.descriptor))[0]\n+        args.address = addr\n+        return addr\n+\n+    remove = [k for k in args.derived_addresses.keys() if k+20 <= height]\n+    for k in remove:\n+        del args.derived_addresses[k]\n+\n+    addr = args.derived_addresses.get(height, None)\n+    if addr is None:\n+        addrs = json.loads(args.bcli(\"deriveaddresses\", args.descriptor, \"[%d,%d]\" % (height, height+20)))\n+        addr = addrs[0]\n+        for k, a in enumerate(addrs):\n+            args.derived_addresses[height+k] = a\n+\n+    return addr\n+\n+def get_reward_addr_spk(args, height):\n+    assert args.address is not None or args.descriptor is not None\n+\n+    if hasattr(args, \"reward_spk\"):\n+        return args.address, args.reward_spk\n+\n+    reward_addr = get_reward_address(args, height)\n+    reward_spk = unhexlify(json.loads(args.bcli(\"getaddressinfo\", reward_addr))[\"scriptPubKey\"])\n+    if args.address is not None:\n+        # will always be the same, so cache\n+        args.reward_spk = reward_spk\n+\n+    return reward_addr, reward_spk\n+\n+def do_genpsbt(args):\n+    tmpl = json.load(sys.stdin)\n+    _, reward_spk = get_reward_addr_spk(args, tmpl[\"height\"])\n+    psbt = generate_psbt(tmpl, reward_spk)\n+    print(psbt)\n+\n+def do_solvepsbt(args):\n+    block, signet_solution = do_decode_psbt(sys.stdin.read())\n+    block = finish_block(block, signet_solution, args.grind_cmd)\n+    print(ToHex(block))\n+\n+def do_generate(args):\n+    if args.N != int(args.N) or args.N < -1:\n+       logging.error(\"N must be an integer, and at least -1\")\n+       return 1\n+\n+    if args.target_mining_time is not None:\n+        if args.target_mining_time <= 0 or args.target_mining_time > 600:\n+            logging.error(\"Target mining time must be between 1 and 600\")\n+            return 1\n+\n+    mi = json.loads(args.bcli(\"getmininginfo\"))\n+    nextblock = mi[\"blocks\"] + 1\n+    mined_blocks = 0\n+    last_mine_time = 0\n+\n+    TARGET = 600.0*2016/2015 # 10 minutes, adjusted for the off-by-one bug\n+\n+    if args.backdate:\n+        start = args.backdate\n+        logging.debug(\"Setting start time to %d (-backdate=%d)\", start, args.backdate)\n+    else:\n+        start = int(time.time()) - 1\n+        start -= start % args.block_time\n+        start += args.block_time\n+\n+    while args.N <= 0 or mined_blocks < args.N:\n+        # sleep\n+        if args.target_mining_time:\n+            block_time = TARGET * (last_mine_time / args.target_mining_time)\n+            block_time = max(1, min(int(block_time), 3600)) # don't be too fast or too slow\n+        else:\n+            block_time = args.block_time\n+\n+        if block_time > 0:\n+            next_time = start + block_time\n+            sleep_for = next_time - time.time()\n+            if sleep_for > 0:\n+                time.sleep(sleep_for)\n+            start = next_time\n+\n+        # gbt\n+        tmpl = json.loads(args.bcli(\"getblocktemplate\", '{\"rules\":[\"signet\",\"segwit\"]}'))\n+        logging.debug(\"GBT template: %s\", tmpl)\n+\n+        if tmpl[\"mintime\"] > start:\n+            logging.info(\"Updating time from %d to %d\", start, tmpl[\"mintime\"])\n+            now = time.time()\n+            start = tmpl[\"mintime\"]\n+            if start > now:\n+                logging.error(\"GBT mintime is in the future: %d is %d seconds later than %d\", start, (start-now), now)\n+                return 1\n+\n+        # work out if we should actually mine\n+        if args.secondary and tmpl[\"height\"] > nextblock:\n+            if nextblock is not None:\n+                logging.info(\"Chain height increased (%d to %d), waiting\", nextblock, tmpl[\"height\"]-1)\n+            nextblock = tmpl[\"height\"]\n+            continue\n+        else:\n+            nextblock = tmpl[\"height\"] + 1\n+\n+        # address for reward\n+        reward_addr, reward_spk = get_reward_addr_spk(args, tmpl[\"height\"])\n+\n+        # mine block\n+        logging.debug(\"Mining block start=%s\", start)\n+        mining_start = time.time()\n+        mined_blocks += 1\n+        psbt = generate_psbt(tmpl, reward_spk, blocktime=start)\n+        psbt_signed = json.loads(args.bcli(\"-stdin\", \"walletprocesspsbt\", input=psbt.encode('utf8')))\n+        if not psbt_signed.get(\"complete\",False):\n+            sys.stderr.write(\"PSBT signing failed\")",
      "path": "contrib/signet/generate.py",
      "position": null,
      "original_position": 344,
      "commit_id": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "original_commit_id": "f2ee4a95b3d9eac7b717f2ed4316dcb5df2d2795",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Dumping the PSBT result is useful here for debugging.",
      "created_at": "2020-10-17T09:30:44Z",
      "updated_at": "2021-01-12T08:35:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#discussion_r506908363",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/506908363"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 348,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509498819",
      "pull_request_review_id": 514023871,
      "id": 509498819,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ5ODgxOQ==",
      "diff_hunk": "@@ -0,0 +1,420 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import argparse\n+import base64\n+import json\n+import logging\n+import struct\n+import sys\n+import time\n+import subprocess\n+\n+from binascii import unhexlify\n+from io import BytesIO\n+\n+sys.path.insert(0, \"../test/functional/\")",
      "path": "contrib/signet/generate.py",
      "position": null,
      "original_position": 18,
      "commit_id": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "original_commit_id": "f2ee4a95b3d9eac7b717f2ed4316dcb5df2d2795",
      "in_reply_to_id": null,
      "user": {
        "login": "decryp2kanon",
        "id": 60179867,
        "node_id": "MDQ6VXNlcjYwMTc5ODY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/60179867?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/decryp2kanon",
        "html_url": "https://github.com/decryp2kanon",
        "followers_url": "https://api.github.com/users/decryp2kanon/followers",
        "following_url": "https://api.github.com/users/decryp2kanon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/decryp2kanon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/decryp2kanon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/decryp2kanon/subscriptions",
        "organizations_url": "https://api.github.com/users/decryp2kanon/orgs",
        "repos_url": "https://api.github.com/users/decryp2kanon/repos",
        "events_url": "https://api.github.com/users/decryp2kanon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/decryp2kanon/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nsys.path.insert(0, \"../../test/functional/\")\r\n```\r\n\r\nin my case, it was wrong path.\r\n```\r\ncd ./contrib/signet/\r\n./generate.py --help\r\n```",
      "created_at": "2020-10-21T17:47:49Z",
      "updated_at": "2021-01-12T08:35:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#discussion_r509498819",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509498819"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 18,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509517747",
      "pull_request_review_id": 514033341,
      "id": 509517747,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTUxNzc0Nw==",
      "diff_hunk": "@@ -0,0 +1,420 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import argparse\n+import base64\n+import json\n+import logging\n+import struct\n+import sys\n+import time\n+import subprocess\n+\n+from binascii import unhexlify\n+from io import BytesIO\n+\n+sys.path.insert(0, \"../test/functional/\")",
      "path": "contrib/signet/generate.py",
      "position": null,
      "original_position": 18,
      "commit_id": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "original_commit_id": "f2ee4a95b3d9eac7b717f2ed4316dcb5df2d2795",
      "in_reply_to_id": 509498819,
      "user": {
        "login": "jsarenik",
        "id": 244565,
        "node_id": "MDQ6VXNlcjI0NDU2NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/244565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jsarenik",
        "html_url": "https://github.com/jsarenik",
        "followers_url": "https://api.github.com/users/jsarenik/followers",
        "following_url": "https://api.github.com/users/jsarenik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jsarenik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jsarenik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jsarenik/subscriptions",
        "organizations_url": "https://api.github.com/users/jsarenik/orgs",
        "repos_url": "https://api.github.com/users/jsarenik/repos",
        "events_url": "https://api.github.com/users/jsarenik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jsarenik/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, the paths are a bit confusing. It is meant to be run from main source root. See for example https://en.bitcoin.it/wiki/Signet:Custom:Script",
      "created_at": "2020-10-21T17:56:12Z",
      "updated_at": "2021-01-12T08:35:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#discussion_r509517747",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509517747"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 18,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509525665",
      "pull_request_review_id": 514036577,
      "id": 509525665,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTUyNTY2NQ==",
      "diff_hunk": "@@ -0,0 +1,420 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import argparse\n+import base64\n+import json\n+import logging\n+import struct\n+import sys\n+import time\n+import subprocess\n+\n+from binascii import unhexlify\n+from io import BytesIO\n+\n+sys.path.insert(0, \"../test/functional/\")",
      "path": "contrib/signet/generate.py",
      "position": null,
      "original_position": 18,
      "commit_id": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "original_commit_id": "f2ee4a95b3d9eac7b717f2ed4316dcb5df2d2795",
      "in_reply_to_id": 509498819,
      "user": {
        "login": "jsarenik",
        "id": 244565,
        "node_id": "MDQ6VXNlcjI0NDU2NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/244565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jsarenik",
        "html_url": "https://github.com/jsarenik",
        "followers_url": "https://api.github.com/users/jsarenik/followers",
        "following_url": "https://api.github.com/users/jsarenik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jsarenik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jsarenik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jsarenik/subscriptions",
        "organizations_url": "https://api.github.com/users/jsarenik/orgs",
        "repos_url": "https://api.github.com/users/jsarenik/repos",
        "events_url": "https://api.github.com/users/jsarenik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jsarenik/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "And the general documentation for Custom Signet is at https://en.bitcoin.it/wiki/Signet#Custom_Signet",
      "created_at": "2020-10-21T18:00:10Z",
      "updated_at": "2021-01-12T08:35:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#discussion_r509525665",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509525665"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 18,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509843913",
      "pull_request_review_id": 514318207,
      "id": 509843913,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg0MzkxMw==",
      "diff_hunk": "@@ -0,0 +1,420 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import argparse\n+import base64\n+import json\n+import logging\n+import struct\n+import sys\n+import time\n+import subprocess\n+\n+from binascii import unhexlify\n+from io import BytesIO\n+\n+sys.path.insert(0, \"../test/functional/\")",
      "path": "contrib/signet/generate.py",
      "position": null,
      "original_position": 18,
      "commit_id": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "original_commit_id": "f2ee4a95b3d9eac7b717f2ed4316dcb5df2d2795",
      "in_reply_to_id": 509498819,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should be fixed",
      "created_at": "2020-10-22T02:34:46Z",
      "updated_at": "2021-01-12T08:35:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#discussion_r509843913",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509843913"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 18,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509844298",
      "pull_request_review_id": 514318633,
      "id": 509844298,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg0NDI5OA==",
      "diff_hunk": "@@ -0,0 +1,420 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import argparse\n+import base64\n+import json\n+import logging\n+import struct\n+import sys\n+import time\n+import subprocess\n+\n+from binascii import unhexlify\n+from io import BytesIO\n+\n+sys.path.insert(0, \"../test/functional/\")\n+\n+from test_framework.blocktools import WITNESS_COMMITMENT_HEADER, script_BIP34_coinbase_height # noqa: E402\n+from test_framework.messages import CBlock, CBlockHeader, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, ToHex, deser_string, hash256, ser_compact_size, ser_string, ser_uint256, uint256_from_str # noqa: E402\n+from test_framework.script import CScriptOp # noqa: E402\n+\n+logging.basicConfig(\n+    format='%(asctime)s %(levelname)s %(message)s',\n+    level=logging.INFO,\n+    datefmt='%Y-%m-%d %H:%M:%S')\n+\n+SIGNET_HEADER = b\"\\xec\\xc7\\xda\\xa2\"\n+PSBT_SIGNET_BLOCK = b\"\\xfc\\x06signetb\"    # proprietary PSBT global field holding the block being signed\n+\n+# #### some helpers that could go into test_framework\n+\n+# like FromHex, but without the hex part\n+def FromBinary(cls, stream):\n+    \"\"\"deserialize a binary stream (or bytes object) into an object\"\"\"\n+    # handle bytes object by turning it into a stream\n+    was_bytes = isinstance(stream, bytes)\n+    if was_bytes:\n+        stream = BytesIO(stream)\n+    obj = cls()\n+    obj.deserialize(stream)\n+    if was_bytes:\n+        assert len(stream.read()) == 0\n+    return obj\n+\n+class PSBTMap:\n+    \"\"\"Class for serializing and deserializing PSBT maps\"\"\"\n+\n+    def __init__(self, map=None):\n+        self.map = map if map is not None else {}\n+\n+    def deserialize(self, f):\n+        m = {}\n+        while True:\n+            k = deser_string(f)\n+            if len(k) == 0:\n+                break\n+            v = deser_string(f)\n+            if len(k) == 1:\n+                k = k[0]\n+            assert k not in m\n+            m[k] = v\n+        self.map = m\n+\n+    def serialize(self):\n+        m = b\"\"\n+        for k,v in self.map.items():\n+            if isinstance(k, int) and 0 <= k and k <= 255:\n+                k = bytes([k])\n+            m += ser_compact_size(len(k)) + k\n+            m += ser_compact_size(len(v)) + v\n+        m += b\"\\x00\"\n+        return m\n+\n+class PSBT:\n+    \"\"\"Class for serializing and deserializing PSBTs\"\"\"\n+\n+    def __init__(self):\n+        self.g = PSBTMap()\n+        self.i = []\n+        self.o = []\n+        self.tx = None\n+\n+    def deserialize(self, f):\n+        assert f.read(5) == b\"psbt\\xff\"\n+        self.g = FromBinary(PSBTMap, f)\n+        assert 0 in self.g.map\n+        self.tx = FromBinary(CTransaction, self.g.map[0])\n+        self.i = [FromBinary(PSBTMap, f) for _ in self.tx.vin]\n+        self.o = [FromBinary(PSBTMap, f) for _ in self.tx.vout]\n+        return self\n+\n+    def serialize(self):\n+        assert isinstance(self.g, PSBTMap)\n+        assert isinstance(self.i, list) and all(isinstance(x, PSBTMap) for x in self.i)\n+        assert isinstance(self.o, list) and all(isinstance(x, PSBTMap) for x in self.o)\n+        assert 0 in self.g.map\n+        tx = FromBinary(CTransaction, self.g.map[0])\n+        assert len(tx.vin) == len(self.i)\n+        assert len(tx.vout) == len(self.o)\n+\n+        psbt = [x.serialize() for x in [self.g] + self.i + self.o]\n+        return b\"psbt\\xff\" + b\"\".join(psbt)\n+\n+    def to_base64(self):\n+        return base64.b64encode(self.serialize()).decode(\"utf8\")\n+\n+    @classmethod\n+    def from_base64(cls, b64psbt):\n+        return FromBinary(cls, base64.b64decode(b64psbt))\n+\n+# #####\n+\n+def create_coinbase(height, value, spk):\n+    cb = CTransaction()\n+    cb.vin = [CTxIn(COutPoint(0, 0xffffffff), script_BIP34_coinbase_height(height), 0xffffffff)]\n+    cb.vout = [CTxOut(value, spk)]\n+    return cb\n+\n+def get_witness_script(witness_root, witness_nonce):\n+    commitment = uint256_from_str(hash256(ser_uint256(witness_root) + ser_uint256(witness_nonce)))\n+    return b\"\\x6a\" + CScriptOp.encode_op_pushdata(WITNESS_COMMITMENT_HEADER + ser_uint256(commitment))\n+\n+def signet_txs(block, challenge):\n+    # assumes signet solution has not been added yet so does not need\n+    # to be removed\n+\n+    txs = block.vtx[:]\n+    txs[0] = CTransaction(txs[0])\n+    txs[0].vout[-1].scriptPubKey += CScriptOp.encode_op_pushdata(SIGNET_HEADER)\n+    hashes = []\n+    for tx in txs:\n+        tx.rehash()\n+        hashes.append(ser_uint256(tx.sha256))\n+    mroot = block.get_merkle_root(hashes)\n+\n+    sd = b\"\"\n+    sd += struct.pack(\"<i\", block.nVersion)\n+    sd += ser_uint256(block.hashPrevBlock)\n+    sd += ser_uint256(mroot)\n+    sd += struct.pack(\"<I\", block.nTime)\n+\n+    to_spend = CTransaction()\n+    to_spend.nVersion = 0\n+    to_spend.nLockTime = 0\n+    to_spend.vin = [CTxIn(COutPoint(0, 0xFFFFFFFF), b\"\\x00\" + CScriptOp.encode_op_pushdata(sd), 0)]\n+    to_spend.vout = [CTxOut(0, challenge)]\n+    to_spend.rehash()\n+\n+    spend = CTransaction()\n+    spend.nVersion = 0\n+    spend.nLockTime = 0\n+    spend.vin = [CTxIn(COutPoint(to_spend.sha256, 0), b\"\", 0)]\n+    spend.vout = [CTxOut(0, b\"\\x6a\")]\n+\n+    return spend, to_spend\n+\n+def do_createpsbt(block, signme, spendme):\n+    psbt = PSBT()\n+    psbt.g = PSBTMap( {0: signme.serialize(),\n+                       PSBT_SIGNET_BLOCK: block.serialize()\n+                     } )\n+    psbt.i = [ PSBTMap( {0: spendme.serialize(),\n+                         3: bytes([1,0,0,0])})\n+             ]\n+    psbt.o = [ PSBTMap() ]\n+    return psbt.to_base64()\n+\n+def do_decode_psbt(b64psbt):\n+    psbt = PSBT.from_base64(b64psbt)\n+\n+    assert len(psbt.tx.vin) == 1\n+    assert len(psbt.tx.vout) == 1\n+    assert PSBT_SIGNET_BLOCK in psbt.g.map\n+\n+    scriptSig = psbt.i[0].map.get(7, b\"\")\n+    scriptWitness = psbt.i[0].map.get(8, b\"\\x00\")\n+\n+    return FromBinary(CBlock, psbt.g.map[PSBT_SIGNET_BLOCK]), ser_string(scriptSig) + scriptWitness\n+\n+def finish_block(block, signet_solution, grind_cmd):\n+    block.vtx[0].vout[-1].scriptPubKey += CScriptOp.encode_op_pushdata(SIGNET_HEADER + signet_solution)\n+    block.vtx[0].rehash()\n+    block.hashMerkleRoot = block.calc_merkle_root()\n+    if grind_cmd is None:\n+        block.solve()\n+    else:\n+        headhex = CBlockHeader.serialize(block).hex()\n+        cmd = grind_cmd.split(\" \") + [headhex]\n+        newheadhex = subprocess.run(cmd, stdout=subprocess.PIPE, input=b\"\", check=True).stdout.strip()\n+        newhead = FromHex(CBlockHeader(), newheadhex.decode('utf8'))\n+        block.nNonce = newhead.nNonce\n+        block.rehash()\n+    return block\n+\n+def generate_psbt(tmpl, reward_spk, *, blocktime=None):\n+    signet_spk = tmpl[\"signet_challenge\"]\n+    signet_spk_bin = unhexlify(signet_spk)\n+\n+    cbtx = create_coinbase(height=tmpl[\"height\"], value=tmpl[\"coinbasevalue\"], spk=reward_spk)\n+    cbtx.vin[0].nSequence = 2**32-2\n+    cbtx.rehash()\n+\n+    block = CBlock()\n+    block.nVersion = tmpl[\"version\"]\n+    block.hashPrevBlock = int(tmpl[\"previousblockhash\"], 16)\n+    block.nTime = tmpl[\"curtime\"] if blocktime is None else blocktime\n+    if block.nTime < tmpl[\"mintime\"]:\n+        block.nTime = tmpl[\"mintime\"]\n+    block.nBits = int(tmpl[\"bits\"], 16)\n+    block.nNonce = 0\n+    block.vtx = [cbtx] + [FromHex(CTransaction(), t[\"data\"]) for t in tmpl[\"transactions\"]]\n+\n+    witnonce = 0\n+    witroot = block.calc_witness_merkle_root()\n+    cbwit = CTxInWitness()\n+    cbwit.scriptWitness.stack = [ser_uint256(witnonce)]\n+    block.vtx[0].wit.vtxinwit = [cbwit]\n+    block.vtx[0].vout.append(CTxOut(0, get_witness_script(witroot, witnonce)))\n+\n+    signme, spendme = signet_txs(block, signet_spk_bin)\n+\n+    return do_createpsbt(block, signme, spendme)\n+\n+def get_reward_address(args, height):\n+    if args.address is not None:\n+        return args.address\n+\n+    if '*' not in args.descriptor:\n+        addr = json.loads(args.bcli(\"deriveaddresses\", args.descriptor))[0]\n+        args.address = addr\n+        return addr\n+\n+    remove = [k for k in args.derived_addresses.keys() if k+20 <= height]\n+    for k in remove:\n+        del args.derived_addresses[k]\n+\n+    addr = args.derived_addresses.get(height, None)\n+    if addr is None:\n+        addrs = json.loads(args.bcli(\"deriveaddresses\", args.descriptor, \"[%d,%d]\" % (height, height+20)))\n+        addr = addrs[0]\n+        for k, a in enumerate(addrs):\n+            args.derived_addresses[height+k] = a\n+\n+    return addr\n+\n+def get_reward_addr_spk(args, height):\n+    assert args.address is not None or args.descriptor is not None\n+\n+    if hasattr(args, \"reward_spk\"):\n+        return args.address, args.reward_spk\n+\n+    reward_addr = get_reward_address(args, height)\n+    reward_spk = unhexlify(json.loads(args.bcli(\"getaddressinfo\", reward_addr))[\"scriptPubKey\"])\n+    if args.address is not None:\n+        # will always be the same, so cache\n+        args.reward_spk = reward_spk\n+\n+    return reward_addr, reward_spk\n+\n+def do_genpsbt(args):\n+    tmpl = json.load(sys.stdin)\n+    _, reward_spk = get_reward_addr_spk(args, tmpl[\"height\"])\n+    psbt = generate_psbt(tmpl, reward_spk)\n+    print(psbt)\n+\n+def do_solvepsbt(args):\n+    block, signet_solution = do_decode_psbt(sys.stdin.read())\n+    block = finish_block(block, signet_solution, args.grind_cmd)\n+    print(ToHex(block))\n+\n+def do_generate(args):\n+    if args.N != int(args.N) or args.N < -1:\n+       logging.error(\"N must be an integer, and at least -1\")\n+       return 1\n+\n+    if args.target_mining_time is not None:\n+        if args.target_mining_time <= 0 or args.target_mining_time > 600:\n+            logging.error(\"Target mining time must be between 1 and 600\")\n+            return 1\n+\n+    mi = json.loads(args.bcli(\"getmininginfo\"))\n+    nextblock = mi[\"blocks\"] + 1\n+    mined_blocks = 0\n+    last_mine_time = 0\n+\n+    TARGET = 600.0*2016/2015 # 10 minutes, adjusted for the off-by-one bug\n+\n+    if args.backdate:\n+        start = args.backdate\n+        logging.debug(\"Setting start time to %d (-backdate=%d)\", start, args.backdate)\n+    else:\n+        start = int(time.time()) - 1\n+        start -= start % args.block_time\n+        start += args.block_time\n+\n+    while args.N <= 0 or mined_blocks < args.N:\n+        # sleep\n+        if args.target_mining_time:\n+            block_time = TARGET * (last_mine_time / args.target_mining_time)\n+            block_time = max(1, min(int(block_time), 3600)) # don't be too fast or too slow\n+        else:\n+            block_time = args.block_time\n+\n+        if block_time > 0:\n+            next_time = start + block_time\n+            sleep_for = next_time - time.time()\n+            if sleep_for > 0:\n+                time.sleep(sleep_for)\n+            start = next_time\n+\n+        # gbt\n+        tmpl = json.loads(args.bcli(\"getblocktemplate\", '{\"rules\":[\"signet\",\"segwit\"]}'))\n+        logging.debug(\"GBT template: %s\", tmpl)\n+\n+        if tmpl[\"mintime\"] > start:\n+            logging.info(\"Updating time from %d to %d\", start, tmpl[\"mintime\"])\n+            now = time.time()\n+            start = tmpl[\"mintime\"]\n+            if start > now:\n+                logging.error(\"GBT mintime is in the future: %d is %d seconds later than %d\", start, (start-now), now)\n+                return 1\n+\n+        # work out if we should actually mine\n+        if args.secondary and tmpl[\"height\"] > nextblock:\n+            if nextblock is not None:\n+                logging.info(\"Chain height increased (%d to %d), waiting\", nextblock, tmpl[\"height\"]-1)\n+            nextblock = tmpl[\"height\"]\n+            continue\n+        else:\n+            nextblock = tmpl[\"height\"] + 1\n+\n+        # address for reward\n+        reward_addr, reward_spk = get_reward_addr_spk(args, tmpl[\"height\"])\n+\n+        # mine block\n+        logging.debug(\"Mining block start=%s\", start)\n+        mining_start = time.time()\n+        mined_blocks += 1\n+        psbt = generate_psbt(tmpl, reward_spk, blocktime=start)\n+        psbt_signed = json.loads(args.bcli(\"-stdin\", \"walletprocesspsbt\", input=psbt.encode('utf8')))\n+        if not psbt_signed.get(\"complete\",False):\n+            sys.stderr.write(\"PSBT signing failed\")",
      "path": "contrib/signet/generate.py",
      "position": null,
      "original_position": 344,
      "commit_id": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "original_commit_id": "f2ee4a95b3d9eac7b717f2ed4316dcb5df2d2795",
      "in_reply_to_id": 506908363,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should dump `psbt` now if debug logging is enabled. That will contain the whole block as well, so it will be long.",
      "created_at": "2020-10-22T02:36:10Z",
      "updated_at": "2021-01-12T08:35:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#discussion_r509844298",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509844298"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 348,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509844423",
      "pull_request_review_id": 514318774,
      "id": 509844423,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg0NDQyMw==",
      "diff_hunk": "@@ -0,0 +1,420 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import argparse\n+import base64\n+import json\n+import logging\n+import struct\n+import sys\n+import time\n+import subprocess\n+\n+from binascii import unhexlify\n+from io import BytesIO\n+\n+sys.path.insert(0, \"../test/functional/\")\n+\n+from test_framework.blocktools import WITNESS_COMMITMENT_HEADER, script_BIP34_coinbase_height # noqa: E402\n+from test_framework.messages import CBlock, CBlockHeader, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, ToHex, deser_string, hash256, ser_compact_size, ser_string, ser_uint256, uint256_from_str # noqa: E402\n+from test_framework.script import CScriptOp # noqa: E402\n+\n+logging.basicConfig(\n+    format='%(asctime)s %(levelname)s %(message)s',\n+    level=logging.INFO,\n+    datefmt='%Y-%m-%d %H:%M:%S')\n+\n+SIGNET_HEADER = b\"\\xec\\xc7\\xda\\xa2\"\n+PSBT_SIGNET_BLOCK = b\"\\xfc\\x06signetb\"    # proprietary PSBT global field holding the block being signed\n+\n+# #### some helpers that could go into test_framework\n+\n+# like FromHex, but without the hex part\n+def FromBinary(cls, stream):\n+    \"\"\"deserialize a binary stream (or bytes object) into an object\"\"\"\n+    # handle bytes object by turning it into a stream\n+    was_bytes = isinstance(stream, bytes)\n+    if was_bytes:\n+        stream = BytesIO(stream)\n+    obj = cls()\n+    obj.deserialize(stream)\n+    if was_bytes:\n+        assert len(stream.read()) == 0\n+    return obj\n+\n+class PSBTMap:\n+    \"\"\"Class for serializing and deserializing PSBT maps\"\"\"\n+\n+    def __init__(self, map=None):\n+        self.map = map if map is not None else {}\n+\n+    def deserialize(self, f):\n+        m = {}\n+        while True:\n+            k = deser_string(f)\n+            if len(k) == 0:\n+                break\n+            v = deser_string(f)\n+            if len(k) == 1:\n+                k = k[0]\n+            assert k not in m\n+            m[k] = v\n+        self.map = m\n+\n+    def serialize(self):\n+        m = b\"\"\n+        for k,v in self.map.items():\n+            if isinstance(k, int) and 0 <= k and k <= 255:\n+                k = bytes([k])\n+            m += ser_compact_size(len(k)) + k\n+            m += ser_compact_size(len(v)) + v\n+        m += b\"\\x00\"\n+        return m\n+\n+class PSBT:\n+    \"\"\"Class for serializing and deserializing PSBTs\"\"\"\n+\n+    def __init__(self):\n+        self.g = PSBTMap()\n+        self.i = []\n+        self.o = []\n+        self.tx = None\n+\n+    def deserialize(self, f):\n+        assert f.read(5) == b\"psbt\\xff\"\n+        self.g = FromBinary(PSBTMap, f)\n+        assert 0 in self.g.map\n+        self.tx = FromBinary(CTransaction, self.g.map[0])\n+        self.i = [FromBinary(PSBTMap, f) for _ in self.tx.vin]\n+        self.o = [FromBinary(PSBTMap, f) for _ in self.tx.vout]\n+        return self\n+\n+    def serialize(self):\n+        assert isinstance(self.g, PSBTMap)\n+        assert isinstance(self.i, list) and all(isinstance(x, PSBTMap) for x in self.i)\n+        assert isinstance(self.o, list) and all(isinstance(x, PSBTMap) for x in self.o)\n+        assert 0 in self.g.map\n+        tx = FromBinary(CTransaction, self.g.map[0])\n+        assert len(tx.vin) == len(self.i)\n+        assert len(tx.vout) == len(self.o)\n+\n+        psbt = [x.serialize() for x in [self.g] + self.i + self.o]\n+        return b\"psbt\\xff\" + b\"\".join(psbt)\n+\n+    def to_base64(self):\n+        return base64.b64encode(self.serialize()).decode(\"utf8\")\n+\n+    @classmethod\n+    def from_base64(cls, b64psbt):\n+        return FromBinary(cls, base64.b64decode(b64psbt))\n+\n+# #####\n+\n+def create_coinbase(height, value, spk):\n+    cb = CTransaction()\n+    cb.vin = [CTxIn(COutPoint(0, 0xffffffff), script_BIP34_coinbase_height(height), 0xffffffff)]\n+    cb.vout = [CTxOut(value, spk)]\n+    return cb\n+\n+def get_witness_script(witness_root, witness_nonce):\n+    commitment = uint256_from_str(hash256(ser_uint256(witness_root) + ser_uint256(witness_nonce)))\n+    return b\"\\x6a\" + CScriptOp.encode_op_pushdata(WITNESS_COMMITMENT_HEADER + ser_uint256(commitment))\n+\n+def signet_txs(block, challenge):\n+    # assumes signet solution has not been added yet so does not need\n+    # to be removed\n+\n+    txs = block.vtx[:]\n+    txs[0] = CTransaction(txs[0])\n+    txs[0].vout[-1].scriptPubKey += CScriptOp.encode_op_pushdata(SIGNET_HEADER)\n+    hashes = []\n+    for tx in txs:\n+        tx.rehash()\n+        hashes.append(ser_uint256(tx.sha256))\n+    mroot = block.get_merkle_root(hashes)\n+\n+    sd = b\"\"\n+    sd += struct.pack(\"<i\", block.nVersion)\n+    sd += ser_uint256(block.hashPrevBlock)\n+    sd += ser_uint256(mroot)\n+    sd += struct.pack(\"<I\", block.nTime)\n+\n+    to_spend = CTransaction()\n+    to_spend.nVersion = 0\n+    to_spend.nLockTime = 0\n+    to_spend.vin = [CTxIn(COutPoint(0, 0xFFFFFFFF), b\"\\x00\" + CScriptOp.encode_op_pushdata(sd), 0)]\n+    to_spend.vout = [CTxOut(0, challenge)]\n+    to_spend.rehash()\n+\n+    spend = CTransaction()\n+    spend.nVersion = 0\n+    spend.nLockTime = 0\n+    spend.vin = [CTxIn(COutPoint(to_spend.sha256, 0), b\"\", 0)]\n+    spend.vout = [CTxOut(0, b\"\\x6a\")]\n+\n+    return spend, to_spend\n+\n+def do_createpsbt(block, signme, spendme):\n+    psbt = PSBT()\n+    psbt.g = PSBTMap( {0: signme.serialize(),\n+                       PSBT_SIGNET_BLOCK: block.serialize()\n+                     } )\n+    psbt.i = [ PSBTMap( {0: spendme.serialize(),\n+                         3: bytes([1,0,0,0])})\n+             ]\n+    psbt.o = [ PSBTMap() ]\n+    return psbt.to_base64()\n+\n+def do_decode_psbt(b64psbt):\n+    psbt = PSBT.from_base64(b64psbt)\n+\n+    assert len(psbt.tx.vin) == 1\n+    assert len(psbt.tx.vout) == 1\n+    assert PSBT_SIGNET_BLOCK in psbt.g.map\n+\n+    scriptSig = psbt.i[0].map.get(7, b\"\")\n+    scriptWitness = psbt.i[0].map.get(8, b\"\\x00\")\n+\n+    return FromBinary(CBlock, psbt.g.map[PSBT_SIGNET_BLOCK]), ser_string(scriptSig) + scriptWitness\n+\n+def finish_block(block, signet_solution, grind_cmd):\n+    block.vtx[0].vout[-1].scriptPubKey += CScriptOp.encode_op_pushdata(SIGNET_HEADER + signet_solution)\n+    block.vtx[0].rehash()\n+    block.hashMerkleRoot = block.calc_merkle_root()\n+    if grind_cmd is None:\n+        block.solve()\n+    else:\n+        headhex = CBlockHeader.serialize(block).hex()\n+        cmd = grind_cmd.split(\" \") + [headhex]\n+        newheadhex = subprocess.run(cmd, stdout=subprocess.PIPE, input=b\"\", check=True).stdout.strip()\n+        newhead = FromHex(CBlockHeader(), newheadhex.decode('utf8'))\n+        block.nNonce = newhead.nNonce\n+        block.rehash()\n+    return block\n+\n+def generate_psbt(tmpl, reward_spk, *, blocktime=None):\n+    signet_spk = tmpl[\"signet_challenge\"]\n+    signet_spk_bin = unhexlify(signet_spk)\n+\n+    cbtx = create_coinbase(height=tmpl[\"height\"], value=tmpl[\"coinbasevalue\"], spk=reward_spk)\n+    cbtx.vin[0].nSequence = 2**32-2\n+    cbtx.rehash()\n+\n+    block = CBlock()\n+    block.nVersion = tmpl[\"version\"]\n+    block.hashPrevBlock = int(tmpl[\"previousblockhash\"], 16)\n+    block.nTime = tmpl[\"curtime\"] if blocktime is None else blocktime\n+    if block.nTime < tmpl[\"mintime\"]:\n+        block.nTime = tmpl[\"mintime\"]\n+    block.nBits = int(tmpl[\"bits\"], 16)\n+    block.nNonce = 0\n+    block.vtx = [cbtx] + [FromHex(CTransaction(), t[\"data\"]) for t in tmpl[\"transactions\"]]\n+\n+    witnonce = 0\n+    witroot = block.calc_witness_merkle_root()\n+    cbwit = CTxInWitness()\n+    cbwit.scriptWitness.stack = [ser_uint256(witnonce)]\n+    block.vtx[0].wit.vtxinwit = [cbwit]\n+    block.vtx[0].vout.append(CTxOut(0, get_witness_script(witroot, witnonce)))\n+\n+    signme, spendme = signet_txs(block, signet_spk_bin)\n+\n+    return do_createpsbt(block, signme, spendme)\n+\n+def get_reward_address(args, height):\n+    if args.address is not None:\n+        return args.address\n+\n+    if '*' not in args.descriptor:\n+        addr = json.loads(args.bcli(\"deriveaddresses\", args.descriptor))[0]\n+        args.address = addr\n+        return addr\n+\n+    remove = [k for k in args.derived_addresses.keys() if k+20 <= height]\n+    for k in remove:\n+        del args.derived_addresses[k]\n+\n+    addr = args.derived_addresses.get(height, None)\n+    if addr is None:\n+        addrs = json.loads(args.bcli(\"deriveaddresses\", args.descriptor, \"[%d,%d]\" % (height, height+20)))\n+        addr = addrs[0]\n+        for k, a in enumerate(addrs):\n+            args.derived_addresses[height+k] = a\n+\n+    return addr\n+\n+def get_reward_addr_spk(args, height):\n+    assert args.address is not None or args.descriptor is not None\n+\n+    if hasattr(args, \"reward_spk\"):\n+        return args.address, args.reward_spk\n+\n+    reward_addr = get_reward_address(args, height)\n+    reward_spk = unhexlify(json.loads(args.bcli(\"getaddressinfo\", reward_addr))[\"scriptPubKey\"])\n+    if args.address is not None:\n+        # will always be the same, so cache\n+        args.reward_spk = reward_spk\n+\n+    return reward_addr, reward_spk\n+\n+def do_genpsbt(args):\n+    tmpl = json.load(sys.stdin)\n+    _, reward_spk = get_reward_addr_spk(args, tmpl[\"height\"])\n+    psbt = generate_psbt(tmpl, reward_spk)\n+    print(psbt)\n+\n+def do_solvepsbt(args):\n+    block, signet_solution = do_decode_psbt(sys.stdin.read())\n+    block = finish_block(block, signet_solution, args.grind_cmd)\n+    print(ToHex(block))\n+\n+def do_generate(args):\n+    if args.N != int(args.N) or args.N < -1:\n+       logging.error(\"N must be an integer, and at least -1\")\n+       return 1\n+\n+    if args.target_mining_time is not None:\n+        if args.target_mining_time <= 0 or args.target_mining_time > 600:\n+            logging.error(\"Target mining time must be between 1 and 600\")\n+            return 1\n+\n+    mi = json.loads(args.bcli(\"getmininginfo\"))",
      "path": "contrib/signet/generate.py",
      "position": null,
      "original_position": 283,
      "commit_id": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "original_commit_id": "f2ee4a95b3d9eac7b717f2ed4316dcb5df2d2795",
      "in_reply_to_id": 506905640,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`args.bcli` / `bitcoin_cli` always returns a string now",
      "created_at": "2020-10-22T02:36:37Z",
      "updated_at": "2021-01-12T08:35:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#discussion_r509844423",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509844423"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 286,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509844454",
      "pull_request_review_id": 514318826,
      "id": 509844454,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg0NDQ1NA==",
      "diff_hunk": "@@ -667,11 +667,13 @@ static RPCHelpMan getblocktemplate()\n     if(!node.connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n-    if (node.connman->GetNodeCount(CConnman::CONNECTIONS_ALL) == 0)\n-        throw JSONRPCError(RPC_CLIENT_NOT_CONNECTED, PACKAGE_NAME \" is not connected!\");\n+    if (!Params().IsTestChain()) {\n+        if (node.connman->GetNodeCount(CConnman::CONNECTIONS_ALL) == 0)",
      "path": "src/rpc/mining.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "original_commit_id": "0857bf9e6cb23792de94cfd164289d3eb08c608f",
      "in_reply_to_id": 506899582,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-10-22T02:36:48Z",
      "updated_at": "2021-01-12T08:35:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#discussion_r509844454",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509844454"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 671,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509844501",
      "pull_request_review_id": 514318874,
      "id": 509844501,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg0NDUwMQ==",
      "diff_hunk": "@@ -818,6 +824,10 @@ static RPCHelpMan getblocktemplate()\n     UniValue aRules(UniValue::VARR);\n     aRules.push_back(\"csv\");\n     if (!fPreSegWit) aRules.push_back(\"!segwit\");\n+    if (consensusParams.signet_blocks) {\n+        aRules.push_back(\"!signet\");",
      "path": "src/rpc/mining.cpp",
      "position": 49,
      "original_position": 27,
      "commit_id": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "original_commit_id": "dd62762ff2d4eac87ce12dff0e8f7ac3dd535f39",
      "in_reply_to_id": 506898283,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added a comment",
      "created_at": "2020-10-22T02:37:00Z",
      "updated_at": "2021-01-12T08:35:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#discussion_r509844501",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/509844501"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 825,
      "original_line": 825,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/510721007",
      "pull_request_review_id": 515451445,
      "id": 510721007,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDcyMTAwNw==",
      "diff_hunk": "@@ -0,0 +1,222 @@\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <arith_uint256.h>\n+#include <clientversion.h>\n+#include <coins.h>\n+#include <consensus/consensus.h>\n+#include <core_io.h>\n+#include <key_io.h>\n+#include <policy/rbf.h>\n+#include <primitives/transaction.h>\n+#include <script/script.h>\n+#include <script/sign.h>\n+#include <script/signingprovider.h>\n+#include <univalue.h>\n+#include <util/moneystr.h>\n+#include <util/rbf.h>\n+#include <util/strencodings.h>\n+#include <util/string.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+\n+#include <functional>\n+#include <memory>\n+#include <stdio.h>\n+#include <thread>\n+\n+#include <boost/algorithm/string.hpp>\n+\n+static const int CONTINUE_EXECUTION=-1;\n+\n+const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static void SetupBitcoinUtilArgs(ArgsManager &argsman)\n+{\n+    SetupHelpOptions(argsman);\n+\n+    SetupChainParamsBaseOptions(argsman);\n+}\n+\n+//\n+// This function returns either one of EXIT_ codes when it's expected to stop the process or\n+// CONTINUE_EXECUTION when it's expected to continue further.\n+//\n+static int AppInitUtil(int argc, char* argv[])\n+{\n+    //\n+    // Parameters\n+    //\n+    SetupBitcoinUtilArgs(gArgs);\n+    std::string error;\n+    if (!gArgs.ParseParameters(argc, argv, error)) {\n+        tfm::format(std::cerr, \"Error parsing command line arguments: %s\\n\", error);\n+        return EXIT_FAILURE;\n+    }\n+\n+    // Check for -chain, -testnet or -regtest parameter (Params() calls are only valid after this clause)\n+    try {\n+        SelectParams(gArgs.GetChainName());\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\n\", e.what());\n+        return EXIT_FAILURE;\n+    }\n+\n+    if (argc < 2 || HelpRequested(gArgs)) {\n+        // First part of help message is specific to this utility\n+        std::string strUsage = PACKAGE_NAME \" bitcoin-tx utility version \" + FormatFullVersion() + \"\\n\\n\" +\n+            \"Usage:  bitcoin-util [options] [commands]  Do stuff\\n\" +\n+            \"\\n\";\n+        strUsage += gArgs.GetHelpMessage();\n+\n+        tfm::format(std::cout, \"%s\", strUsage);\n+\n+        if (argc < 2) {\n+            tfm::format(std::cerr, \"Error: too few parameters\\n\");\n+            return EXIT_FAILURE;\n+        }\n+        return EXIT_SUCCESS;\n+    }\n+    return CONTINUE_EXECUTION;\n+}\n+\n+static void grind_task(uint32_t nBits, CBlockHeader& header_orig, uint32_t offset, uint32_t step, std::atomic<bool>& found)\n+{\n+    arith_uint256 target;\n+    bool neg, over;\n+    target.SetCompact(nBits, &neg, &over);\n+    if (target == 0 || neg || over) return;\n+    CBlockHeader header = header_orig; // working copy\n+    header.nNonce = offset;\n+\n+    uint32_t finish = std::numeric_limits<uint32_t>::max() - step;\n+    finish = finish - (finish % step) + offset;\n+\n+    while (!found && header.nNonce < finish) {\n+        const uint32_t next = (finish - header.nNonce < 5000*step) ? finish : header.nNonce + 5000*step;\n+        do {\n+            if (!(UintToArith256(header.GetHash()) > target)) {\n+                if (!found.exchange(true)) {\n+                    header_orig.nNonce = header.nNonce;\n+                }\n+                return;\n+            }\n+            header.nNonce += step;\n+        } while(header.nNonce != next);\n+    }\n+}\n+\n+static int Grind(int argc, char* argv[], std::string& strPrint)\n+{\n+    if (argc != 1) {\n+        strPrint = \"Must specify block header to grind\";\n+        return 1;\n+    }\n+\n+    CBlockHeader header;\n+    if (!DecodeHexBlockHeader(header, argv[0])) {\n+        strPrint = \"Could not decode block header\";\n+        return 1;\n+    }\n+\n+    uint32_t nBits = header.nBits;\n+    std::atomic<bool> found{false};\n+\n+    std::vector<std::thread> threads;\n+    int n_tasks = std::max(1u, std::thread::hardware_concurrency());\n+    for (int i = 0; i < n_tasks; ++i) {\n+        threads.emplace_back( grind_task, nBits, std::ref(header), i, n_tasks, std::ref(found) );\n+    }\n+    for (auto& t : threads) {\n+        t.join();\n+    }\n+    if (!found) {\n+        strPrint = \"Could not satisfy difficulty target\";\n+        return 1;\n+    }\n+\n+    CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n+    ss << header;\n+    strPrint = HexStr(ss);\n+    return 0;\n+}\n+\n+static int CommandLineUtil(int argc, char* argv[])\n+{\n+    if (argc <= 1) return 1;\n+\n+    std::string strPrint;\n+    int nRet = 0;\n+\n+    try {\n+        while (argc > 1 && IsSwitchChar(argv[1][0]) && (argv[1][1] != 0)) {\n+            --argc;\n+            ++argv;\n+        }\n+\n+        char* command = argv[1];\n+        if (strcmp(command, \"grind\") == 0) {",
      "path": "src/bitcoin-util.cpp",
      "position": 158,
      "original_position": 163,
      "commit_id": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "original_commit_id": "e077aa7055e71f08a7d2cfbb29702832899fee04",
      "in_reply_to_id": 492742101,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The wallet tool is doing exactly that already with argsman. E.g. it has the `info` subcommand, or a dump subcommand with conditional options like -dumpfile (#19137)",
      "created_at": "2020-10-23T08:29:06Z",
      "updated_at": "2021-01-12T08:35:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#discussion_r510721007",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/510721007"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 158,
      "original_line": 158,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/533854178",
      "pull_request_review_id": 542451420,
      "id": 533854178,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg1NDE3OA==",
      "diff_hunk": "@@ -661,6 +667,27 @@ bitcoin_wallet_SOURCES += bitcoin-wallet-res.rc\n endif\n #\n \n+# bitcoin-util binary #\n+bitcoin_util_SOURCES = bitcoin-util.cpp\n+bitcoin_util_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+bitcoin_util_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+bitcoin_util_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+\n+if TARGET_WINDOWS\n+bitcoin_util_SOURCES += bitcoin-util-res.rc\n+endif\n+\n+bitcoin_util_LDADD = \\\n+  $(LIBUNIVALUE) \\\n+  $(LIBBITCOIN_COMMON) \\\n+  $(LIBBITCOIN_UTIL) \\\n+  $(LIBBITCOIN_CONSENSUS) \\",
      "path": "src/Makefile.am",
      "position": 40,
      "original_position": 40,
      "commit_id": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "original_commit_id": "066ee99cea331ae55ccf52873d3dcde636bb8128",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "\"grind\" needs libconsensus for both `primitives/block.h` for the block header definition and `arith_uint256.h` for converting nbits to a target and comparing the target to a sha256. Since libconsensus isn't linked into bitcoin-cli, that probably rules out `bitcoin-cli --grind=HEADER` as an alternative.\r\n\r\nMaking `bitcoin-tx -grind HEADER` work seems plausible; should look something like https://github.com/ajtowns/bitcoin/commits/202009-signet-generate-util2tx \r\n\r\nLong term I think `bitcoin-util` is a good idea, but it might be better to introduce it in its own PR, in which case putting the functionality in `bitcoin-tx` in the meantime seems plausible? Thoughts?",
      "created_at": "2020-12-02T02:29:12Z",
      "updated_at": "2021-01-12T08:35:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#discussion_r533854178",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/533854178"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 683,
      "original_line": 683,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/533942834",
      "pull_request_review_id": 542551610,
      "id": 533942834,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk0MjgzNA==",
      "diff_hunk": "@@ -661,6 +667,27 @@ bitcoin_wallet_SOURCES += bitcoin-wallet-res.rc\n endif\n #\n \n+# bitcoin-util binary #\n+bitcoin_util_SOURCES = bitcoin-util.cpp\n+bitcoin_util_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+bitcoin_util_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+bitcoin_util_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+\n+if TARGET_WINDOWS\n+bitcoin_util_SOURCES += bitcoin-util-res.rc\n+endif\n+\n+bitcoin_util_LDADD = \\\n+  $(LIBUNIVALUE) \\\n+  $(LIBBITCOIN_COMMON) \\\n+  $(LIBBITCOIN_UTIL) \\\n+  $(LIBBITCOIN_CONSENSUS) \\",
      "path": "src/Makefile.am",
      "position": 40,
      "original_position": 40,
      "commit_id": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "original_commit_id": "066ee99cea331ae55ccf52873d3dcde636bb8128",
      "in_reply_to_id": 533854178,
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`bitcoin-tx --grind` feels weird to me. Grinding is unrelated to transactions. Unless we decide `bitcoin-util` is not desired, I think introducing it here makes more sense, personally.",
      "created_at": "2020-12-02T07:15:44Z",
      "updated_at": "2021-01-12T08:35:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#discussion_r533942834",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/533942834"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 683,
      "original_line": 683,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534484267",
      "pull_request_review_id": 543240392,
      "id": 534484267,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ4NDI2Nw==",
      "diff_hunk": "@@ -17,3 +17,64 @@ Syntax: `getcoins.py [-h|--help] [-c|--cmd=<bitcoin-cli path>] [-f|--faucet=<fau\n If using the default network, invoking the script with no arguments should be sufficient under normal\n circumstances, but if multiple people are behind the same IP address, the faucet will by default only\n accept one claim per day. See `--password` above.\n+\n+miner\n+=====\n+\n+To mine the first block in your custom chain, you can run:\n+\n+  cd src/\n+  CLI=\"./bitcoin-cli -conf=mysignet.conf\"\n+  MINER=\"..contrib/signet/miner\"\n+  GRIND=\"./bitcoin-util grind\"\n+  ADDR=$($CLI -signet getnewaddress)\n+  $MINER --cli=\"$CLI\" generate --grind-cmd=\"$GRIND\" --address=\"$ADDR\" --set-block-time=-1\n+\n+This will mine a block with the current timestamp. If you want to backdate the chain, you can give a different timestamp to --set-block-time.\n+\n+You will then need to pick a difficulty target. Since signet chains are primarily protected by a signature rather than proof of work, there is no need to spend as much energy as possible mining, however you may wish to choose to spend more time than the absolute minimum. The calibrate subcommand can be used to pick a target, eg:\n+\n+  $MINER calibrate --grind-cmd=\"$GRIND\"\n+  nbits=1e00f403 for 25s average mining time\n+\n+It defaults to estimating an nbits value resulting in 25s average time to find a block, but the --seconds parameter can be used to pick a different target, or the --nbits parameter can be used to estimate how long it will take for a given difficulty.\n+\n+Using the --ongoing parameter will then cause the signet miner to create blocks indefinitely. It will pick the time between blocks so that difficulty is adjusted to match the provided --nbits value.\n+\n+  $MINER --cli=\"$CLI\" generate --grind-cmd=\"$GRIND\" --address=\"$ADDR\" --nbits=1e00f403 --ongoing\n+\n+Other options\n+-------------\n+\n+The --debug and --quiet options are available to control how noisy the signet miner's output is. Note that the --debug, --quiet and --cli parameters must all appear before the subcommand (generate, calibrate, etc) if used.\n+\n+Instead of specifying --ongoing, you can specify --max-blocks=N to mine N blocks and stop.\n+\n+Instead of using a single address, a ranged descriptor may be provided instead (via the --descriptor parameter), with the reward for the block at height H being sent to the H'th address generated from the descriptor.\n+\n+Instead of calculating a specific nbits value, --min-nbits can be specified instead, in which case the mininmum signet difficulty will be targeted.\n+\n+By default, the signet miner mines blocks at fixed intervals with minimal variation. If you want blocks to appear more randomly, as they do in mainnet, specify the --poisson option.\n+\n+Using the --multiminer parameter allows mining to be distributed amongst multiple miners. For example, if you have 3 miners and want to share blocks between them, specify --multiminer=1/3 on one, --multiminer=2/3 on another, and --multiminer=3/3 on the last one. If you want one to do 10% of blocks and two others to do 45% each, --multiminer=1-10/100 on the first, and --multiminer=11-55 and --multiminer=56-100 on the others. Note that which miner mines which block is determined by the previous block hash, so occassional runs of one miner doing many blocks in a row is to be expected.",
      "path": "contrib/signet/README.md",
      "position": null,
      "original_position": 43,
      "commit_id": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "original_commit_id": "066ee99cea331ae55ccf52873d3dcde636bb8128",
      "in_reply_to_id": null,
      "user": {
        "login": "muxator",
        "id": 4067621,
        "node_id": "MDQ6VXNlcjQwNjc2MjE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4067621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/muxator",
        "html_url": "https://github.com/muxator",
        "followers_url": "https://api.github.com/users/muxator/followers",
        "following_url": "https://api.github.com/users/muxator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/muxator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/muxator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/muxator/subscriptions",
        "organizations_url": "https://api.github.com/users/muxator/orgs",
        "repos_url": "https://api.github.com/users/muxator/repos",
        "events_url": "https://api.github.com/users/muxator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/muxator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "\"occassional runs\" -> \"occasional runs\"",
      "created_at": "2020-12-02T21:12:07Z",
      "updated_at": "2021-01-12T08:35:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#discussion_r534484267",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534484267"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534508383",
      "pull_request_review_id": 543240392,
      "id": 534508383,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDUwODM4Mw==",
      "diff_hunk": "@@ -0,0 +1,639 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import argparse\n+import base64\n+import json\n+import logging\n+import math\n+import os.path\n+import re\n+import struct\n+import sys\n+import time\n+import subprocess\n+\n+from binascii import unhexlify\n+from io import BytesIO\n+\n+PATH_BASE_CONTRIB_SIGNET = os.path.abspath(os.path.dirname(__file__))",
      "path": "contrib/signet/miner",
      "position": null,
      "original_position": 21,
      "commit_id": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "original_commit_id": "066ee99cea331ae55ccf52873d3dcde636bb8128",
      "in_reply_to_id": null,
      "user": {
        "login": "muxator",
        "id": 4067621,
        "node_id": "MDQ6VXNlcjQwNjc2MjE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4067621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/muxator",
        "html_url": "https://github.com/muxator",
        "followers_url": "https://api.github.com/users/muxator/followers",
        "following_url": "https://api.github.com/users/muxator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/muxator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/muxator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/muxator/subscriptions",
        "organizations_url": "https://api.github.com/users/muxator/orgs",
        "repos_url": "https://api.github.com/users/muxator/repos",
        "events_url": "https://api.github.com/users/muxator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/muxator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hi,\r\n\r\nI usually run my binaries putting a symlink to them in a directory somewhere in my PATH (let's say `/home/.local/bin`, but it can be anything, really).\r\n\r\nWhen doing this with `miner`, however, it won't work:\r\n\r\n```\r\n$ ln -s <base>/contrib/signet/miner /tmp/miner\r\n$ /tmp/miner --help\r\nTraceback (most recent call last):\r\n  File \"/tmp/miner\", line 25, in <module>\r\n    from test_framework.blocktools import WITNESS_COMMITMENT_HEADER, script_BIP34_coinbase_height # noqa: E402\r\nModuleNotFoundError: No module named 'test_framework'\r\n```\r\n\r\nThe reason is that, when computing the absolute path to the directory containing `miner`, links are not followed. This would work if it included an invocation to [`realpath()`](https://docs.python.org/3/library/os.path.html#os.path.realpath), for example:\r\n\r\n```diff\r\ndiff --git a/contrib/signet/miner b/contrib/signet/miner\r\n--- a/contrib/signet/miner\r\n+++ b/contrib/signet/miner\r\n@@ -18,7 +18,7 @@ import subprocess\r\n from binascii import unhexlify\r\n from io import BytesIO\r\n \r\n-PATH_BASE_CONTRIB_SIGNET = os.path.abspath(os.path.dirname(__file__))\r\n+PATH_BASE_CONTRIB_SIGNET = os.path.abspath(os.path.dirname(os.path.realpath(__file__)))\r\n PATH_BASE_TEST_FUNCTIONAL = os.path.join(PATH_BASE_CONTRIB_SIGNET, \"..\", \"..\", \"test\", \"functional\")\r\n sys.path.insert(0, PATH_BASE_TEST_FUNCTIONAL)\r\n```\r\n\r\nOn my copy, I also called `abspath()` when computing the final value for `PATH_BASE_TEST_FUNCTIONAL`, but that's just a question of taste, because I prefer `<base>/test/functional` instead of  `<base>/contrib/signet/../../test/functional` in my include path (it's more explicit to debug if something goes wrong).\r\n\r\n\r\nThe final version would be:\r\n```diff\r\ndiff --git a/contrib/signet/miner b/contrib/signet/miner\r\n--- a/contrib/signet/miner\r\n+++ b/contrib/signet/miner\r\n@@ -18,8 +18,8 @@ import subprocess\r\n from binascii import unhexlify\r\n from io import BytesIO\r\n \r\n-PATH_BASE_CONTRIB_SIGNET = os.path.abspath(os.path.dirname(__file__))\r\n-PATH_BASE_TEST_FUNCTIONAL = os.path.join(PATH_BASE_CONTRIB_SIGNET, \"..\", \"..\", \"test\", \"functional\")\r\n+PATH_BASE_CONTRIB_SIGNET = os.path.abspath(os.path.dirname(os.path.realpath(__file__)))\r\n+PATH_BASE_TEST_FUNCTIONAL = os.path.abspath(os.path.join(PATH_BASE_CONTRIB_SIGNET, \"..\", \"..\", \"test\", \"functional\"))\r\n sys.path.insert(0, PATH_BASE_TEST_FUNCTIONAL)\r\n \r\n from test_framework.blocktools import WITNESS_COMMITMENT_HEADER, script_BIP34_coinbase_height # noqa: E402\r\n```\r\n\r\nFrom my experience with other Python projects, there should not be any undesired side effects, but I am not the expert here.\r\nDo you think supporting this use case makes sense?\r\n\r\nThanks!\r\n",
      "created_at": "2020-12-02T21:56:54Z",
      "updated_at": "2021-01-12T08:35:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#discussion_r534508383",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534508383"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 21,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534624308",
      "pull_request_review_id": 543398371,
      "id": 534624308,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDYyNDMwOA==",
      "diff_hunk": "@@ -17,3 +17,64 @@ Syntax: `getcoins.py [-h|--help] [-c|--cmd=<bitcoin-cli path>] [-f|--faucet=<fau\n If using the default network, invoking the script with no arguments should be sufficient under normal\n circumstances, but if multiple people are behind the same IP address, the faucet will by default only\n accept one claim per day. See `--password` above.\n+\n+miner\n+=====\n+\n+To mine the first block in your custom chain, you can run:\n+\n+  cd src/\n+  CLI=\"./bitcoin-cli -conf=mysignet.conf\"\n+  MINER=\"..contrib/signet/miner\"\n+  GRIND=\"./bitcoin-util grind\"\n+  ADDR=$($CLI -signet getnewaddress)\n+  $MINER --cli=\"$CLI\" generate --grind-cmd=\"$GRIND\" --address=\"$ADDR\" --set-block-time=-1\n+\n+This will mine a block with the current timestamp. If you want to backdate the chain, you can give a different timestamp to --set-block-time.\n+\n+You will then need to pick a difficulty target. Since signet chains are primarily protected by a signature rather than proof of work, there is no need to spend as much energy as possible mining, however you may wish to choose to spend more time than the absolute minimum. The calibrate subcommand can be used to pick a target, eg:\n+\n+  $MINER calibrate --grind-cmd=\"$GRIND\"\n+  nbits=1e00f403 for 25s average mining time\n+\n+It defaults to estimating an nbits value resulting in 25s average time to find a block, but the --seconds parameter can be used to pick a different target, or the --nbits parameter can be used to estimate how long it will take for a given difficulty.\n+\n+Using the --ongoing parameter will then cause the signet miner to create blocks indefinitely. It will pick the time between blocks so that difficulty is adjusted to match the provided --nbits value.\n+\n+  $MINER --cli=\"$CLI\" generate --grind-cmd=\"$GRIND\" --address=\"$ADDR\" --nbits=1e00f403 --ongoing\n+\n+Other options\n+-------------\n+\n+The --debug and --quiet options are available to control how noisy the signet miner's output is. Note that the --debug, --quiet and --cli parameters must all appear before the subcommand (generate, calibrate, etc) if used.\n+\n+Instead of specifying --ongoing, you can specify --max-blocks=N to mine N blocks and stop.\n+\n+Instead of using a single address, a ranged descriptor may be provided instead (via the --descriptor parameter), with the reward for the block at height H being sent to the H'th address generated from the descriptor.\n+\n+Instead of calculating a specific nbits value, --min-nbits can be specified instead, in which case the mininmum signet difficulty will be targeted.\n+\n+By default, the signet miner mines blocks at fixed intervals with minimal variation. If you want blocks to appear more randomly, as they do in mainnet, specify the --poisson option.\n+\n+Using the --multiminer parameter allows mining to be distributed amongst multiple miners. For example, if you have 3 miners and want to share blocks between them, specify --multiminer=1/3 on one, --multiminer=2/3 on another, and --multiminer=3/3 on the last one. If you want one to do 10% of blocks and two others to do 45% each, --multiminer=1-10/100 on the first, and --multiminer=11-55 and --multiminer=56-100 on the others. Note that which miner mines which block is determined by the previous block hash, so occassional runs of one miner doing many blocks in a row is to be expected.",
      "path": "contrib/signet/README.md",
      "position": null,
      "original_position": 43,
      "commit_id": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "original_commit_id": "066ee99cea331ae55ccf52873d3dcde636bb8128",
      "in_reply_to_id": 534484267,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-12-03T02:40:08Z",
      "updated_at": "2021-01-12T08:35:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#discussion_r534624308",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534624308"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534624389",
      "pull_request_review_id": 543398442,
      "id": 534624389,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDYyNDM4OQ==",
      "diff_hunk": "@@ -0,0 +1,639 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import argparse\n+import base64\n+import json\n+import logging\n+import math\n+import os.path\n+import re\n+import struct\n+import sys\n+import time\n+import subprocess\n+\n+from binascii import unhexlify\n+from io import BytesIO\n+\n+PATH_BASE_CONTRIB_SIGNET = os.path.abspath(os.path.dirname(__file__))",
      "path": "contrib/signet/miner",
      "position": null,
      "original_position": 21,
      "commit_id": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "original_commit_id": "066ee99cea331ae55ccf52873d3dcde636bb8128",
      "in_reply_to_id": 534508383,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2020-12-03T02:40:19Z",
      "updated_at": "2021-01-12T08:35:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#discussion_r534624389",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/534624389"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 21,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537539255",
      "pull_request_review_id": 546188593,
      "id": 537539255,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUzOTI1NQ==",
      "diff_hunk": "@@ -0,0 +1,639 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import argparse\n+import base64\n+import json\n+import logging\n+import math\n+import os.path\n+import re\n+import struct\n+import sys\n+import time\n+import subprocess\n+\n+from binascii import unhexlify\n+from io import BytesIO\n+\n+PATH_BASE_CONTRIB_SIGNET = os.path.abspath(os.path.dirname(os.path.realpath(__file__)))\n+PATH_BASE_TEST_FUNCTIONAL = os.path.abspath(os.path.join(PATH_BASE_CONTRIB_SIGNET, \"..\", \"..\", \"test\", \"functional\"))\n+sys.path.insert(0, PATH_BASE_TEST_FUNCTIONAL)\n+\n+from test_framework.blocktools import WITNESS_COMMITMENT_HEADER, script_BIP34_coinbase_height # noqa: E402\n+from test_framework.messages import CBlock, CBlockHeader, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, ToHex, deser_string, hash256, ser_compact_size, ser_string, ser_uint256, uint256_from_str # noqa: E402\n+from test_framework.script import CScriptOp # noqa: E402\n+\n+logging.basicConfig(\n+    format='%(asctime)s %(levelname)s %(message)s',\n+    level=logging.INFO,\n+    datefmt='%Y-%m-%d %H:%M:%S')\n+\n+SIGNET_HEADER = b\"\\xec\\xc7\\xda\\xa2\"\n+PSBT_SIGNET_BLOCK = b\"\\xfc\\x06signetb\"    # proprietary PSBT global field holding the block being signed\n+RE_MULTIMINER = re.compile(\"^(\\d+)(-(\\d+))?/(\\d+)$\")\n+\n+# #### some helpers that could go into test_framework\n+\n+# like FromHex, but without the hex part\n+def FromBinary(cls, stream):\n+    \"\"\"deserialize a binary stream (or bytes object) into an object\"\"\"\n+    # handle bytes object by turning it into a stream\n+    was_bytes = isinstance(stream, bytes)\n+    if was_bytes:\n+        stream = BytesIO(stream)\n+    obj = cls()\n+    obj.deserialize(stream)\n+    if was_bytes:\n+        assert len(stream.read()) == 0\n+    return obj\n+\n+class PSBTMap:\n+    \"\"\"Class for serializing and deserializing PSBT maps\"\"\"\n+\n+    def __init__(self, map=None):\n+        self.map = map if map is not None else {}\n+\n+    def deserialize(self, f):\n+        m = {}\n+        while True:\n+            k = deser_string(f)\n+            if len(k) == 0:\n+                break\n+            v = deser_string(f)\n+            if len(k) == 1:\n+                k = k[0]\n+            assert k not in m\n+            m[k] = v\n+        self.map = m\n+\n+    def serialize(self):\n+        m = b\"\"\n+        for k,v in self.map.items():\n+            if isinstance(k, int) and 0 <= k and k <= 255:\n+                k = bytes([k])\n+            m += ser_compact_size(len(k)) + k\n+            m += ser_compact_size(len(v)) + v\n+        m += b\"\\x00\"\n+        return m\n+\n+class PSBT:\n+    \"\"\"Class for serializing and deserializing PSBTs\"\"\"\n+\n+    def __init__(self):\n+        self.g = PSBTMap()\n+        self.i = []\n+        self.o = []\n+        self.tx = None\n+\n+    def deserialize(self, f):\n+        assert f.read(5) == b\"psbt\\xff\"\n+        self.g = FromBinary(PSBTMap, f)\n+        assert 0 in self.g.map\n+        self.tx = FromBinary(CTransaction, self.g.map[0])\n+        self.i = [FromBinary(PSBTMap, f) for _ in self.tx.vin]\n+        self.o = [FromBinary(PSBTMap, f) for _ in self.tx.vout]\n+        return self\n+\n+    def serialize(self):\n+        assert isinstance(self.g, PSBTMap)\n+        assert isinstance(self.i, list) and all(isinstance(x, PSBTMap) for x in self.i)\n+        assert isinstance(self.o, list) and all(isinstance(x, PSBTMap) for x in self.o)\n+        assert 0 in self.g.map\n+        tx = FromBinary(CTransaction, self.g.map[0])\n+        assert len(tx.vin) == len(self.i)\n+        assert len(tx.vout) == len(self.o)\n+\n+        psbt = [x.serialize() for x in [self.g] + self.i + self.o]\n+        return b\"psbt\\xff\" + b\"\".join(psbt)\n+\n+    def to_base64(self):\n+        return base64.b64encode(self.serialize()).decode(\"utf8\")\n+\n+    @classmethod\n+    def from_base64(cls, b64psbt):\n+        return FromBinary(cls, base64.b64decode(b64psbt))\n+\n+# #####\n+\n+def create_coinbase(height, value, spk):\n+    cb = CTransaction()\n+    cb.vin = [CTxIn(COutPoint(0, 0xffffffff), script_BIP34_coinbase_height(height), 0xffffffff)]\n+    cb.vout = [CTxOut(value, spk)]\n+    return cb\n+\n+def get_witness_script(witness_root, witness_nonce):\n+    commitment = uint256_from_str(hash256(ser_uint256(witness_root) + ser_uint256(witness_nonce)))\n+    return b\"\\x6a\" + CScriptOp.encode_op_pushdata(WITNESS_COMMITMENT_HEADER + ser_uint256(commitment))\n+\n+def signet_txs(block, challenge):\n+    # assumes signet solution has not been added yet so does not need\n+    # to be removed\n+\n+    txs = block.vtx[:]\n+    txs[0] = CTransaction(txs[0])\n+    txs[0].vout[-1].scriptPubKey += CScriptOp.encode_op_pushdata(SIGNET_HEADER)\n+    hashes = []\n+    for tx in txs:\n+        tx.rehash()\n+        hashes.append(ser_uint256(tx.sha256))\n+    mroot = block.get_merkle_root(hashes)\n+\n+    sd = b\"\"\n+    sd += struct.pack(\"<i\", block.nVersion)\n+    sd += ser_uint256(block.hashPrevBlock)\n+    sd += ser_uint256(mroot)\n+    sd += struct.pack(\"<I\", block.nTime)\n+\n+    to_spend = CTransaction()\n+    to_spend.nVersion = 0\n+    to_spend.nLockTime = 0\n+    to_spend.vin = [CTxIn(COutPoint(0, 0xFFFFFFFF), b\"\\x00\" + CScriptOp.encode_op_pushdata(sd), 0)]\n+    to_spend.vout = [CTxOut(0, challenge)]\n+    to_spend.rehash()\n+\n+    spend = CTransaction()\n+    spend.nVersion = 0\n+    spend.nLockTime = 0\n+    spend.vin = [CTxIn(COutPoint(to_spend.sha256, 0), b\"\", 0)]\n+    spend.vout = [CTxOut(0, b\"\\x6a\")]\n+\n+    return spend, to_spend\n+\n+def do_createpsbt(block, signme, spendme):\n+    psbt = PSBT()\n+    psbt.g = PSBTMap( {0: signme.serialize(),\n+                       PSBT_SIGNET_BLOCK: block.serialize()\n+                     } )\n+    psbt.i = [ PSBTMap( {0: spendme.serialize(),\n+                         3: bytes([1,0,0,0])})\n+             ]\n+    psbt.o = [ PSBTMap() ]\n+    return psbt.to_base64()\n+\n+def do_decode_psbt(b64psbt):\n+    psbt = PSBT.from_base64(b64psbt)\n+\n+    assert len(psbt.tx.vin) == 1\n+    assert len(psbt.tx.vout) == 1\n+    assert PSBT_SIGNET_BLOCK in psbt.g.map\n+\n+    scriptSig = psbt.i[0].map.get(7, b\"\")\n+    scriptWitness = psbt.i[0].map.get(8, b\"\\x00\")\n+\n+    return FromBinary(CBlock, psbt.g.map[PSBT_SIGNET_BLOCK]), ser_string(scriptSig) + scriptWitness\n+\n+def finish_block(block, signet_solution, grind_cmd):\n+    block.vtx[0].vout[-1].scriptPubKey += CScriptOp.encode_op_pushdata(SIGNET_HEADER + signet_solution)\n+    block.vtx[0].rehash()\n+    block.hashMerkleRoot = block.calc_merkle_root()\n+    if grind_cmd is None:\n+        block.solve()\n+    else:\n+        headhex = CBlockHeader.serialize(block).hex()\n+        cmd = grind_cmd.split(\" \") + [headhex]\n+        newheadhex = subprocess.run(cmd, stdout=subprocess.PIPE, input=b\"\", check=True).stdout.strip()\n+        newhead = FromHex(CBlockHeader(), newheadhex.decode('utf8'))\n+        block.nNonce = newhead.nNonce\n+        block.rehash()\n+    return block\n+\n+def generate_psbt(tmpl, reward_spk, *, blocktime=None):\n+    signet_spk = tmpl[\"signet_challenge\"]\n+    signet_spk_bin = unhexlify(signet_spk)\n+\n+    cbtx = create_coinbase(height=tmpl[\"height\"], value=tmpl[\"coinbasevalue\"], spk=reward_spk)\n+    cbtx.vin[0].nSequence = 2**32-2\n+    cbtx.rehash()\n+\n+    block = CBlock()\n+    block.nVersion = tmpl[\"version\"]\n+    block.hashPrevBlock = int(tmpl[\"previousblockhash\"], 16)\n+    block.nTime = tmpl[\"curtime\"] if blocktime is None else blocktime\n+    if block.nTime < tmpl[\"mintime\"]:\n+        block.nTime = tmpl[\"mintime\"]\n+    block.nBits = int(tmpl[\"bits\"], 16)\n+    block.nNonce = 0\n+    block.vtx = [cbtx] + [FromHex(CTransaction(), t[\"data\"]) for t in tmpl[\"transactions\"]]\n+\n+    witnonce = 0\n+    witroot = block.calc_witness_merkle_root()\n+    cbwit = CTxInWitness()\n+    cbwit.scriptWitness.stack = [ser_uint256(witnonce)]\n+    block.vtx[0].wit.vtxinwit = [cbwit]\n+    block.vtx[0].vout.append(CTxOut(0, get_witness_script(witroot, witnonce)))\n+\n+    signme, spendme = signet_txs(block, signet_spk_bin)\n+\n+    return do_createpsbt(block, signme, spendme)\n+\n+def get_reward_address(args, height):\n+    if args.address is not None:\n+        return args.address\n+\n+    if '*' not in args.descriptor:\n+        addr = json.loads(args.bcli(\"deriveaddresses\", args.descriptor))[0]\n+        args.address = addr\n+        return addr\n+\n+    remove = [k for k in args.derived_addresses.keys() if k+20 <= height]\n+    for k in remove:\n+        del args.derived_addresses[k]\n+\n+    addr = args.derived_addresses.get(height, None)\n+    if addr is None:\n+        addrs = json.loads(args.bcli(\"deriveaddresses\", args.descriptor, \"[%d,%d]\" % (height, height+20)))\n+        addr = addrs[0]\n+        for k, a in enumerate(addrs):\n+            args.derived_addresses[height+k] = a\n+\n+    return addr\n+\n+def get_reward_addr_spk(args, height):\n+    assert args.address is not None or args.descriptor is not None\n+\n+    if hasattr(args, \"reward_spk\"):\n+        return args.address, args.reward_spk\n+\n+    reward_addr = get_reward_address(args, height)\n+    reward_spk = unhexlify(json.loads(args.bcli(\"getaddressinfo\", reward_addr))[\"scriptPubKey\"])\n+    if args.address is not None:\n+        # will always be the same, so cache\n+        args.reward_spk = reward_spk\n+\n+    return reward_addr, reward_spk\n+\n+def do_genpsbt(args):\n+    tmpl = json.load(sys.stdin)\n+    _, reward_spk = get_reward_addr_spk(args, tmpl[\"height\"])\n+    psbt = generate_psbt(tmpl, reward_spk)\n+    print(psbt)\n+\n+def do_solvepsbt(args):\n+    block, signet_solution = do_decode_psbt(sys.stdin.read())\n+    block = finish_block(block, signet_solution, args.grind_cmd)\n+    print(ToHex(block))\n+\n+def nbits_to_target(nbits):\n+    shift = (nbits >> 24) & 0xff\n+    return (nbits & 0x00ffffff) * 2**(8*(shift - 3))\n+\n+def target_to_nbits(target):\n+    tstr = \"{0:x}\".format(target)\n+    if len(tstr) < 6:\n+        tstr = (\"000000\"+tstr)[-6:]\n+    if len(tstr) % 2 != 0:\n+        tstr = \"0\" + tstr\n+    if int(tstr[0],16) >= 0x8:\n+        # avoid \"negative\"\n+        tstr = \"00\" + tstr\n+    fix = int(tstr[:6], 16)\n+    sz = len(tstr)//2\n+    if tstr[6:] != \"0\"*(sz*2-6):\n+        fix += 1\n+\n+    return int(\"%02x%06x\" % (sz,fix), 16)\n+\n+def seconds_to_hms(s):\n+    if s == 0:\n+        return \"0s\"\n+    neg = (s < 0)\n+    if neg:\n+        s = -s\n+    out = \"\"\n+    if s % 60 > 0:\n+        out = \"%ds\" % (s % 60)\n+    s //= 60\n+    if s % 60 > 0:\n+        out = \"%dm%s\" % (s % 60, out)\n+    s //= 60\n+    if s > 0:\n+        out = \"%dh%s\" % (s, out)\n+    if neg:\n+        out = \"-\" + out\n+    return out\n+\n+def next_block_delta(last_nbits, last_hash, ultimate_target, do_poisson):\n+    # strategy:\n+    #  1) work out how far off our desired target we are\n+    #  2) cap it to a factor of 4 since that's the best we can do in a single retarget period\n+    #  3) use that to work out the desired average interval in this retarget period\n+    #  4) if doing poisson, use the last hash to pick a uniformly random number in [0,1), and work out a random multiplier to vary the average by\n+    #  5) cap the resulting interval between 1 second and 1 hour to avoid extremes\n+\n+    INTERVAL = 600.0*2016/2015 # 10 minutes, adjusted for the off-by-one bug\n+\n+    current_target = nbits_to_target(last_nbits)\n+    retarget_factor = ultimate_target / current_target\n+    retarget_factor = max(0.25, min(retarget_factor, 4.0))\n+\n+    avg_interval = INTERVAL * retarget_factor\n+\n+    if do_poisson:\n+        det_rand = int(last_hash[-8:], 16) * 2**-32\n+        this_interval_variance = -math.log1p(-det_rand)\n+    else:\n+        this_interval_variance = 1\n+\n+    this_interval = avg_interval * this_interval_variance\n+    this_interval = max(1, min(this_interval, 3600))\n+\n+    return this_interval\n+\n+def next_block_is_mine(last_hash, my_blocks):\n+    det_rand = int(last_hash[-16:-8], 16)\n+    return my_blocks[0] <= (det_rand % my_blocks[2]) < my_blocks[1]\n+\n+def do_generate(args):\n+    if args.max_blocks is not None:\n+        if args.ongoing:\n+            logging.error(\"Cannot specify both --ongoing and --max-blocks\")\n+            return 1\n+        if args.max_blocks < 1:\n+            logging.error(\"N must be a positive integer\")\n+            return 1\n+        max_blocks = args.max_blocks\n+    elif args.ongoing:\n+        max_blocks = None\n+    else:\n+        max_blocks = 1\n+\n+    if args.set_block_time is not None and max_blocks != 1:\n+        logging.error(\"Cannot specify --ongoing or --max-blocks > 1 when using --set-block-time\")\n+        return 1\n+    if args.set_block_time is not None and args.set_block_time < 0:\n+        args.set_block_time = time.time()\n+        logging.info(\"Treating negative block time as current time (%d)\" % (args.set_block_time))\n+\n+    if args.min_nbits:\n+        if args.nbits is not None:\n+            logging.error(\"Cannot specify --nbits and --min-nbits\")\n+            return 1\n+        args.nbits = \"1e0377ae\"\n+        logging.info(\"Using nbits=%s\" % (args.nbits))\n+\n+    if args.set_block_time is None:\n+        if args.nbits is None or len(args.nbits) != 8:\n+            logging.error(\"Must specify --nbits (use calibrate command to determine value)\")\n+            return 1\n+\n+    if args.multiminer is None:\n+       my_blocks = (0,1,1)\n+    else:\n+        if not args.ongoing:\n+            logging.error(\"Cannot specify --multiminer without --ongoing\")\n+            return 1\n+        m = RE_MULTIMINER.match(args.multiminer)\n+        if m is None:\n+            logging.error(\"--multiminer argument must be k/m or j-k/m\")\n+            return 1\n+        start,_,stop,total = m.groups()\n+        if stop is None:\n+            stop = start\n+        start, stop, total = map(int, (start, stop, total))\n+        if stop < start or start <= 0 or total < stop or total == 0:\n+            logging.error(\"Inconsistent values for --multiminer\")\n+            return 1\n+        my_blocks = (start-1, stop, total)\n+\n+    ultimate_target = nbits_to_target(int(args.nbits,16))\n+\n+    mined_blocks = 0\n+    bestheader = {\"hash\": None}\n+    lastheader = None\n+    while max_blocks is None or mined_blocks < max_blocks:\n+\n+        # current status?\n+        bci = json.loads(args.bcli(\"getblockchaininfo\"))\n+\n+        if bestheader[\"hash\"] != bci[\"bestblockhash\"]:\n+            bestheader = json.loads(args.bcli(\"getblockheader\", bci[\"bestblockhash\"]))\n+\n+        if lastheader is None:\n+            lastheader = bestheader[\"hash\"]\n+        elif bestheader[\"hash\"] != lastheader:\n+            next_delta = next_block_delta(int(bestheader[\"bits\"], 16), bestheader[\"hash\"], ultimate_target, args.poisson)\n+            next_delta += bestheader[\"time\"] - time.time()\n+            next_is_mine = next_block_is_mine(bestheader[\"hash\"], my_blocks)\n+            logging.info(\"Received new block at height %d; next in %s (%s)\", bestheader[\"height\"], seconds_to_hms(next_delta), (\"mine\" if next_is_mine else \"backup\"))\n+            lastheader = bestheader[\"hash\"]\n+\n+        # when is the next block due to be mined?\n+        now = time.time()\n+        if args.set_block_time is not None:\n+            logging.debug(\"Setting start time to %d\", args.set_block_time)\n+            mine_time = args.set_block_time\n+            action_time = now\n+            is_mine = True\n+        elif bestheader[\"height\"] == 0:\n+            logging.error(\"When mining first block in a new signet, must specify --set-block-time\")\n+            return 1\n+        else:\n+\n+            time_delta = next_block_delta(int(bestheader[\"bits\"], 16), bci[\"bestblockhash\"], ultimate_target, args.poisson)\n+            mine_time = bestheader[\"time\"] + time_delta\n+\n+            is_mine = next_block_is_mine(bci[\"bestblockhash\"], my_blocks)\n+\n+            action_time = mine_time\n+            if not is_mine:\n+                action_time += args.backup_delay\n+\n+            if args.standby_delay > 0:\n+                action_time += args.standby_delay\n+            elif mined_blocks == 0:\n+                # for non-standby, always mine immediately on startup,\n+                # even if the next block shouldn't be ours\n+                action_time = now\n+\n+        # don't want fractional times so round down\n+        mine_time = int(mine_time)\n+        action_time = int(action_time)\n+\n+        # can't mine a block 2h in the future; 1h55m for some safety\n+        action_time = max(action_time, mine_time - 6900)\n+\n+        # ready to go? otherwise sleep and check for new block\n+        if now < action_time:\n+            sleep_for = min(action_time - now, 60)\n+            if mine_time < now:\n+                # someone else might have mined the block,\n+                # so check frequently, so we don't end up late\n+                # mining the next block if it's ours\n+                sleep_for = min(20, sleep_for)\n+            minestr = \"mine\" if is_mine else \"backup\"\n+            logging.debug(\"Sleeping for %s, next block due in %s (%s)\" % (seconds_to_hms(sleep_for), seconds_to_hms(mine_time - now), minestr))\n+            time.sleep(sleep_for)\n+            continue\n+\n+        # gbt\n+        tmpl = json.loads(args.bcli(\"getblocktemplate\", '{\"rules\":[\"signet\",\"segwit\"]}'))\n+        if tmpl[\"previousblockhash\"] != bci[\"bestblockhash\"]:\n+            logging.warning(\"GBT based off unexpected block (%s not %s), retrying\", tmpl[\"previousblockhash\"], bci[\"bestblockhash\"])\n+            time.sleep(1)\n+            continue\n+\n+        logging.debug(\"GBT template: %s\", tmpl)\n+\n+        if tmpl[\"mintime\"] > mine_time:\n+            logging.info(\"Updating block time from %d to %d\", mine_time, tmpl[\"mintime\"])\n+            mine_time = tmpl[\"mintime\"]\n+            if mine_time > now:\n+                logging.error(\"GBT mintime is in the future: %d is %d seconds later than %d\", mine_time, (mine_time-now), now)\n+                return 1\n+\n+        # address for reward\n+        reward_addr, reward_spk = get_reward_addr_spk(args, tmpl[\"height\"])\n+\n+        # mine block\n+        logging.debug(\"Mining block delta=%s start=%s mine=%s\", seconds_to_hms(mine_time-bestheader[\"time\"]), mine_time, is_mine)\n+        mined_blocks += 1\n+        psbt = generate_psbt(tmpl, reward_spk, blocktime=mine_time)\n+        psbt_signed = json.loads(args.bcli(\"-stdin\", \"walletprocesspsbt\", input=psbt.encode('utf8')))\n+        if not psbt_signed.get(\"complete\",False):\n+            logging.debug(\"Generated PSBT: %s\" % (psbt,))\n+            sys.stderr.write(\"PSBT signing failed\")\n+            return 1\n+        block, signet_solution = do_decode_psbt(psbt_signed[\"psbt\"])\n+        block = finish_block(block, signet_solution, args.grind_cmd)\n+\n+        # submit block\n+        r = args.bcli(\"-stdin\", \"submitblock\", input=ToHex(block).encode('utf8'))\n+\n+        # report\n+        bstr = \"block\" if is_mine else \"backup block\"\n+\n+        next_delta = next_block_delta(block.nBits, block.hash, ultimate_target, args.poisson)\n+        next_delta += block.nTime - time.time()\n+        next_is_mine = next_block_is_mine(block.hash, my_blocks)\n+\n+        logging.debug(\"Block hash %s payout to %s\", block.hash, reward_addr)\n+        logging.info(\"Mined %s at height %d; next in %s (%s)\", bstr, tmpl[\"height\"], seconds_to_hms(next_delta), (\"mine\" if next_is_mine else \"backup\"))\n+        if r != \"\":\n+            logging.warning(\"submitblock returned %s for height %d hash %s\", r, tmpl[\"height\"], block.hash)\n+        lastheader = block.hash\n+\n+def do_calibrate(args):\n+    if args.nbits is not None and args.seconds is not None:\n+        sys.stderr.write(\"Can only specify one of --nbits or --seconds\\n\")\n+        return 1\n+    if args.nbits is not None and len(args.nbits) != 8:\n+        sys.stderr.write(\"Must specify 8 hex digits for --nbits\")\n+        return 1\n+\n+    TRIALS = 600 # gets variance down pretty low\n+    TRIAL_BITS = 0x1e3ea75f # takes about 5m to do 600 trials\n+    #TRIAL_BITS = 0x1e7ea75f # XXX\n+\n+    header = CBlockHeader()\n+    header.nBits = TRIAL_BITS\n+    targ = nbits_to_target(header.nBits)\n+\n+    start = time.time()\n+    count = 0\n+    #CHECKS=[]\n+    for i in range(TRIALS):\n+        header.nTime = i\n+        header.nNonce = 0\n+        headhex = header.serialize().hex()\n+        cmd = args.grind_cmd.split(\" \") + [headhex]",
      "path": "contrib/signet/miner",
      "position": 541,
      "original_position": 541,
      "commit_id": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "original_commit_id": "6258e7eb3c9c4cb519cb519d640b73a059b1cc11",
      "in_reply_to_id": null,
      "user": {
        "login": "muxator",
        "id": 4067621,
        "node_id": "MDQ6VXNlcjQwNjc2MjE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4067621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/muxator",
        "html_url": "https://github.com/muxator",
        "followers_url": "https://api.github.com/users/muxator/followers",
        "following_url": "https://api.github.com/users/muxator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/muxator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/muxator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/muxator/subscriptions",
        "organizations_url": "https://api.github.com/users/muxator/orgs",
        "repos_url": "https://api.github.com/users/muxator/repos",
        "events_url": "https://api.github.com/users/muxator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/muxator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If `miner calibrate` is called without any additional arguments, there is a stack trace:\r\n\r\n```\r\n$ ./miner calibrate \r\nTraceback (most recent call last):\r\n  File \"./miner\", line 637, in <module>\r\n    main()\r\n  File \"./miner\", line 631, in main\r\n    return args.fn(args)\r\n  File \"./miner\", line 541, in do_calibrate\r\n    cmd = args.grind_cmd.split(\" \") + [headhex]\r\nAttributeError: 'NoneType' object has no attribute 'split'\r\n```\r\n\r\nOne possible way to fix it could be making `--grind-cmd` required for the calibrate command. For `--solvepsbt` and `--generate`, apparently, this is not needed, since `finish_block()` checks for `None` already.\r\n\r\n```diff\r\ndiff --git a/contrib/signet/miner b/contrib/signet/miner\r\n--- a/contrib/signet/miner\r\n+++ b/contrib/signet/miner\r\n@@ -604,8 +604,8 @@ def main():\r\n         sp.add_argument(\"--address\", default=None, type=str, help=\"Address for block reward payment\")\r\n         sp.add_argument(\"--descriptor\", default=None, type=str, help=\"Descriptor for block reward payment\")\r\n \r\n-    for sp in [solvepsbt, generate, calibrate]:\r\n-        sp.add_argument(\"--grind-cmd\", default=None, type=str, help=\"Command to grind a block header for proof-of-work\")\r\n+    for (sp, is_required) in [(solvepsbt, False), (generate, False), (calibrate, True)]:\r\n+        sp.add_argument(\"--grind-cmd\", default=None, type=str, required=is_required, help=\"Command to grind a block header for proof-of-work\")\r\n \r\n     args = parser.parse_args(sys.argv[1:])\r\n```\r\n\r\nBehaviour after the proposed change:\r\n```\r\n$ ./miner calibrate \r\nusage: miner calibrate [-h] [--nbits NBITS] [--seconds SECONDS] --grind-cmd GRIND_CMD\r\nminer calibrate: error: the following arguments are required: --grind-cmd\r\n```\r\n",
      "created_at": "2020-12-07T14:15:40Z",
      "updated_at": "2021-01-12T08:35:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#discussion_r537539255",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537539255"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 541,
      "original_line": 541,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537540628",
      "pull_request_review_id": 546190187,
      "id": 537540628,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU0MDYyOA==",
      "diff_hunk": "@@ -0,0 +1,639 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import argparse\n+import base64\n+import json\n+import logging\n+import math\n+import os.path\n+import re\n+import struct\n+import sys\n+import time\n+import subprocess\n+\n+from binascii import unhexlify\n+from io import BytesIO\n+\n+PATH_BASE_CONTRIB_SIGNET = os.path.abspath(os.path.dirname(os.path.realpath(__file__)))\n+PATH_BASE_TEST_FUNCTIONAL = os.path.abspath(os.path.join(PATH_BASE_CONTRIB_SIGNET, \"..\", \"..\", \"test\", \"functional\"))\n+sys.path.insert(0, PATH_BASE_TEST_FUNCTIONAL)\n+\n+from test_framework.blocktools import WITNESS_COMMITMENT_HEADER, script_BIP34_coinbase_height # noqa: E402\n+from test_framework.messages import CBlock, CBlockHeader, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, ToHex, deser_string, hash256, ser_compact_size, ser_string, ser_uint256, uint256_from_str # noqa: E402\n+from test_framework.script import CScriptOp # noqa: E402\n+\n+logging.basicConfig(\n+    format='%(asctime)s %(levelname)s %(message)s',\n+    level=logging.INFO,\n+    datefmt='%Y-%m-%d %H:%M:%S')\n+\n+SIGNET_HEADER = b\"\\xec\\xc7\\xda\\xa2\"\n+PSBT_SIGNET_BLOCK = b\"\\xfc\\x06signetb\"    # proprietary PSBT global field holding the block being signed\n+RE_MULTIMINER = re.compile(\"^(\\d+)(-(\\d+))?/(\\d+)$\")\n+\n+# #### some helpers that could go into test_framework\n+\n+# like FromHex, but without the hex part\n+def FromBinary(cls, stream):\n+    \"\"\"deserialize a binary stream (or bytes object) into an object\"\"\"\n+    # handle bytes object by turning it into a stream\n+    was_bytes = isinstance(stream, bytes)\n+    if was_bytes:\n+        stream = BytesIO(stream)\n+    obj = cls()\n+    obj.deserialize(stream)\n+    if was_bytes:\n+        assert len(stream.read()) == 0\n+    return obj\n+\n+class PSBTMap:\n+    \"\"\"Class for serializing and deserializing PSBT maps\"\"\"\n+\n+    def __init__(self, map=None):\n+        self.map = map if map is not None else {}\n+\n+    def deserialize(self, f):\n+        m = {}\n+        while True:\n+            k = deser_string(f)\n+            if len(k) == 0:\n+                break\n+            v = deser_string(f)\n+            if len(k) == 1:\n+                k = k[0]\n+            assert k not in m\n+            m[k] = v\n+        self.map = m\n+\n+    def serialize(self):\n+        m = b\"\"\n+        for k,v in self.map.items():\n+            if isinstance(k, int) and 0 <= k and k <= 255:\n+                k = bytes([k])\n+            m += ser_compact_size(len(k)) + k\n+            m += ser_compact_size(len(v)) + v\n+        m += b\"\\x00\"\n+        return m\n+\n+class PSBT:\n+    \"\"\"Class for serializing and deserializing PSBTs\"\"\"\n+\n+    def __init__(self):\n+        self.g = PSBTMap()\n+        self.i = []\n+        self.o = []\n+        self.tx = None\n+\n+    def deserialize(self, f):\n+        assert f.read(5) == b\"psbt\\xff\"\n+        self.g = FromBinary(PSBTMap, f)\n+        assert 0 in self.g.map\n+        self.tx = FromBinary(CTransaction, self.g.map[0])\n+        self.i = [FromBinary(PSBTMap, f) for _ in self.tx.vin]\n+        self.o = [FromBinary(PSBTMap, f) for _ in self.tx.vout]\n+        return self\n+\n+    def serialize(self):\n+        assert isinstance(self.g, PSBTMap)\n+        assert isinstance(self.i, list) and all(isinstance(x, PSBTMap) for x in self.i)\n+        assert isinstance(self.o, list) and all(isinstance(x, PSBTMap) for x in self.o)\n+        assert 0 in self.g.map\n+        tx = FromBinary(CTransaction, self.g.map[0])\n+        assert len(tx.vin) == len(self.i)\n+        assert len(tx.vout) == len(self.o)\n+\n+        psbt = [x.serialize() for x in [self.g] + self.i + self.o]\n+        return b\"psbt\\xff\" + b\"\".join(psbt)\n+\n+    def to_base64(self):\n+        return base64.b64encode(self.serialize()).decode(\"utf8\")\n+\n+    @classmethod\n+    def from_base64(cls, b64psbt):\n+        return FromBinary(cls, base64.b64decode(b64psbt))\n+\n+# #####\n+\n+def create_coinbase(height, value, spk):\n+    cb = CTransaction()\n+    cb.vin = [CTxIn(COutPoint(0, 0xffffffff), script_BIP34_coinbase_height(height), 0xffffffff)]\n+    cb.vout = [CTxOut(value, spk)]\n+    return cb\n+\n+def get_witness_script(witness_root, witness_nonce):\n+    commitment = uint256_from_str(hash256(ser_uint256(witness_root) + ser_uint256(witness_nonce)))\n+    return b\"\\x6a\" + CScriptOp.encode_op_pushdata(WITNESS_COMMITMENT_HEADER + ser_uint256(commitment))\n+\n+def signet_txs(block, challenge):\n+    # assumes signet solution has not been added yet so does not need\n+    # to be removed\n+\n+    txs = block.vtx[:]\n+    txs[0] = CTransaction(txs[0])\n+    txs[0].vout[-1].scriptPubKey += CScriptOp.encode_op_pushdata(SIGNET_HEADER)\n+    hashes = []\n+    for tx in txs:\n+        tx.rehash()\n+        hashes.append(ser_uint256(tx.sha256))\n+    mroot = block.get_merkle_root(hashes)\n+\n+    sd = b\"\"\n+    sd += struct.pack(\"<i\", block.nVersion)\n+    sd += ser_uint256(block.hashPrevBlock)\n+    sd += ser_uint256(mroot)\n+    sd += struct.pack(\"<I\", block.nTime)\n+\n+    to_spend = CTransaction()\n+    to_spend.nVersion = 0\n+    to_spend.nLockTime = 0\n+    to_spend.vin = [CTxIn(COutPoint(0, 0xFFFFFFFF), b\"\\x00\" + CScriptOp.encode_op_pushdata(sd), 0)]\n+    to_spend.vout = [CTxOut(0, challenge)]\n+    to_spend.rehash()\n+\n+    spend = CTransaction()\n+    spend.nVersion = 0\n+    spend.nLockTime = 0\n+    spend.vin = [CTxIn(COutPoint(to_spend.sha256, 0), b\"\", 0)]\n+    spend.vout = [CTxOut(0, b\"\\x6a\")]\n+\n+    return spend, to_spend\n+\n+def do_createpsbt(block, signme, spendme):\n+    psbt = PSBT()\n+    psbt.g = PSBTMap( {0: signme.serialize(),\n+                       PSBT_SIGNET_BLOCK: block.serialize()\n+                     } )\n+    psbt.i = [ PSBTMap( {0: spendme.serialize(),\n+                         3: bytes([1,0,0,0])})\n+             ]\n+    psbt.o = [ PSBTMap() ]\n+    return psbt.to_base64()\n+\n+def do_decode_psbt(b64psbt):\n+    psbt = PSBT.from_base64(b64psbt)\n+\n+    assert len(psbt.tx.vin) == 1\n+    assert len(psbt.tx.vout) == 1\n+    assert PSBT_SIGNET_BLOCK in psbt.g.map\n+\n+    scriptSig = psbt.i[0].map.get(7, b\"\")\n+    scriptWitness = psbt.i[0].map.get(8, b\"\\x00\")\n+\n+    return FromBinary(CBlock, psbt.g.map[PSBT_SIGNET_BLOCK]), ser_string(scriptSig) + scriptWitness\n+\n+def finish_block(block, signet_solution, grind_cmd):\n+    block.vtx[0].vout[-1].scriptPubKey += CScriptOp.encode_op_pushdata(SIGNET_HEADER + signet_solution)\n+    block.vtx[0].rehash()\n+    block.hashMerkleRoot = block.calc_merkle_root()\n+    if grind_cmd is None:\n+        block.solve()\n+    else:\n+        headhex = CBlockHeader.serialize(block).hex()\n+        cmd = grind_cmd.split(\" \") + [headhex]\n+        newheadhex = subprocess.run(cmd, stdout=subprocess.PIPE, input=b\"\", check=True).stdout.strip()\n+        newhead = FromHex(CBlockHeader(), newheadhex.decode('utf8'))\n+        block.nNonce = newhead.nNonce\n+        block.rehash()\n+    return block\n+\n+def generate_psbt(tmpl, reward_spk, *, blocktime=None):\n+    signet_spk = tmpl[\"signet_challenge\"]\n+    signet_spk_bin = unhexlify(signet_spk)\n+\n+    cbtx = create_coinbase(height=tmpl[\"height\"], value=tmpl[\"coinbasevalue\"], spk=reward_spk)\n+    cbtx.vin[0].nSequence = 2**32-2\n+    cbtx.rehash()\n+\n+    block = CBlock()\n+    block.nVersion = tmpl[\"version\"]\n+    block.hashPrevBlock = int(tmpl[\"previousblockhash\"], 16)\n+    block.nTime = tmpl[\"curtime\"] if blocktime is None else blocktime\n+    if block.nTime < tmpl[\"mintime\"]:\n+        block.nTime = tmpl[\"mintime\"]\n+    block.nBits = int(tmpl[\"bits\"], 16)\n+    block.nNonce = 0\n+    block.vtx = [cbtx] + [FromHex(CTransaction(), t[\"data\"]) for t in tmpl[\"transactions\"]]\n+\n+    witnonce = 0\n+    witroot = block.calc_witness_merkle_root()\n+    cbwit = CTxInWitness()\n+    cbwit.scriptWitness.stack = [ser_uint256(witnonce)]\n+    block.vtx[0].wit.vtxinwit = [cbwit]\n+    block.vtx[0].vout.append(CTxOut(0, get_witness_script(witroot, witnonce)))\n+\n+    signme, spendme = signet_txs(block, signet_spk_bin)\n+\n+    return do_createpsbt(block, signme, spendme)\n+\n+def get_reward_address(args, height):\n+    if args.address is not None:\n+        return args.address\n+\n+    if '*' not in args.descriptor:\n+        addr = json.loads(args.bcli(\"deriveaddresses\", args.descriptor))[0]\n+        args.address = addr\n+        return addr\n+\n+    remove = [k for k in args.derived_addresses.keys() if k+20 <= height]\n+    for k in remove:\n+        del args.derived_addresses[k]\n+\n+    addr = args.derived_addresses.get(height, None)\n+    if addr is None:\n+        addrs = json.loads(args.bcli(\"deriveaddresses\", args.descriptor, \"[%d,%d]\" % (height, height+20)))\n+        addr = addrs[0]\n+        for k, a in enumerate(addrs):\n+            args.derived_addresses[height+k] = a\n+\n+    return addr\n+\n+def get_reward_addr_spk(args, height):\n+    assert args.address is not None or args.descriptor is not None\n+\n+    if hasattr(args, \"reward_spk\"):\n+        return args.address, args.reward_spk\n+\n+    reward_addr = get_reward_address(args, height)\n+    reward_spk = unhexlify(json.loads(args.bcli(\"getaddressinfo\", reward_addr))[\"scriptPubKey\"])\n+    if args.address is not None:\n+        # will always be the same, so cache\n+        args.reward_spk = reward_spk\n+\n+    return reward_addr, reward_spk\n+\n+def do_genpsbt(args):\n+    tmpl = json.load(sys.stdin)\n+    _, reward_spk = get_reward_addr_spk(args, tmpl[\"height\"])\n+    psbt = generate_psbt(tmpl, reward_spk)\n+    print(psbt)\n+\n+def do_solvepsbt(args):\n+    block, signet_solution = do_decode_psbt(sys.stdin.read())\n+    block = finish_block(block, signet_solution, args.grind_cmd)\n+    print(ToHex(block))\n+\n+def nbits_to_target(nbits):\n+    shift = (nbits >> 24) & 0xff\n+    return (nbits & 0x00ffffff) * 2**(8*(shift - 3))\n+\n+def target_to_nbits(target):\n+    tstr = \"{0:x}\".format(target)\n+    if len(tstr) < 6:\n+        tstr = (\"000000\"+tstr)[-6:]\n+    if len(tstr) % 2 != 0:\n+        tstr = \"0\" + tstr\n+    if int(tstr[0],16) >= 0x8:\n+        # avoid \"negative\"\n+        tstr = \"00\" + tstr\n+    fix = int(tstr[:6], 16)\n+    sz = len(tstr)//2\n+    if tstr[6:] != \"0\"*(sz*2-6):\n+        fix += 1\n+\n+    return int(\"%02x%06x\" % (sz,fix), 16)\n+\n+def seconds_to_hms(s):\n+    if s == 0:\n+        return \"0s\"\n+    neg = (s < 0)\n+    if neg:\n+        s = -s\n+    out = \"\"\n+    if s % 60 > 0:\n+        out = \"%ds\" % (s % 60)\n+    s //= 60\n+    if s % 60 > 0:\n+        out = \"%dm%s\" % (s % 60, out)\n+    s //= 60\n+    if s > 0:\n+        out = \"%dh%s\" % (s, out)\n+    if neg:\n+        out = \"-\" + out\n+    return out\n+\n+def next_block_delta(last_nbits, last_hash, ultimate_target, do_poisson):\n+    # strategy:\n+    #  1) work out how far off our desired target we are\n+    #  2) cap it to a factor of 4 since that's the best we can do in a single retarget period\n+    #  3) use that to work out the desired average interval in this retarget period\n+    #  4) if doing poisson, use the last hash to pick a uniformly random number in [0,1), and work out a random multiplier to vary the average by\n+    #  5) cap the resulting interval between 1 second and 1 hour to avoid extremes\n+\n+    INTERVAL = 600.0*2016/2015 # 10 minutes, adjusted for the off-by-one bug\n+\n+    current_target = nbits_to_target(last_nbits)\n+    retarget_factor = ultimate_target / current_target\n+    retarget_factor = max(0.25, min(retarget_factor, 4.0))\n+\n+    avg_interval = INTERVAL * retarget_factor\n+\n+    if do_poisson:\n+        det_rand = int(last_hash[-8:], 16) * 2**-32\n+        this_interval_variance = -math.log1p(-det_rand)\n+    else:\n+        this_interval_variance = 1\n+\n+    this_interval = avg_interval * this_interval_variance\n+    this_interval = max(1, min(this_interval, 3600))\n+\n+    return this_interval\n+\n+def next_block_is_mine(last_hash, my_blocks):\n+    det_rand = int(last_hash[-16:-8], 16)\n+    return my_blocks[0] <= (det_rand % my_blocks[2]) < my_blocks[1]\n+\n+def do_generate(args):\n+    if args.max_blocks is not None:\n+        if args.ongoing:\n+            logging.error(\"Cannot specify both --ongoing and --max-blocks\")\n+            return 1\n+        if args.max_blocks < 1:\n+            logging.error(\"N must be a positive integer\")\n+            return 1\n+        max_blocks = args.max_blocks\n+    elif args.ongoing:\n+        max_blocks = None\n+    else:\n+        max_blocks = 1\n+\n+    if args.set_block_time is not None and max_blocks != 1:\n+        logging.error(\"Cannot specify --ongoing or --max-blocks > 1 when using --set-block-time\")\n+        return 1\n+    if args.set_block_time is not None and args.set_block_time < 0:\n+        args.set_block_time = time.time()\n+        logging.info(\"Treating negative block time as current time (%d)\" % (args.set_block_time))\n+\n+    if args.min_nbits:\n+        if args.nbits is not None:\n+            logging.error(\"Cannot specify --nbits and --min-nbits\")\n+            return 1\n+        args.nbits = \"1e0377ae\"\n+        logging.info(\"Using nbits=%s\" % (args.nbits))\n+\n+    if args.set_block_time is None:\n+        if args.nbits is None or len(args.nbits) != 8:\n+            logging.error(\"Must specify --nbits (use calibrate command to determine value)\")\n+            return 1\n+\n+    if args.multiminer is None:\n+       my_blocks = (0,1,1)\n+    else:\n+        if not args.ongoing:\n+            logging.error(\"Cannot specify --multiminer without --ongoing\")\n+            return 1\n+        m = RE_MULTIMINER.match(args.multiminer)\n+        if m is None:\n+            logging.error(\"--multiminer argument must be k/m or j-k/m\")\n+            return 1\n+        start,_,stop,total = m.groups()\n+        if stop is None:\n+            stop = start\n+        start, stop, total = map(int, (start, stop, total))\n+        if stop < start or start <= 0 or total < stop or total == 0:\n+            logging.error(\"Inconsistent values for --multiminer\")\n+            return 1\n+        my_blocks = (start-1, stop, total)\n+\n+    ultimate_target = nbits_to_target(int(args.nbits,16))\n+\n+    mined_blocks = 0\n+    bestheader = {\"hash\": None}\n+    lastheader = None\n+    while max_blocks is None or mined_blocks < max_blocks:\n+\n+        # current status?\n+        bci = json.loads(args.bcli(\"getblockchaininfo\"))\n+\n+        if bestheader[\"hash\"] != bci[\"bestblockhash\"]:\n+            bestheader = json.loads(args.bcli(\"getblockheader\", bci[\"bestblockhash\"]))\n+\n+        if lastheader is None:\n+            lastheader = bestheader[\"hash\"]\n+        elif bestheader[\"hash\"] != lastheader:\n+            next_delta = next_block_delta(int(bestheader[\"bits\"], 16), bestheader[\"hash\"], ultimate_target, args.poisson)\n+            next_delta += bestheader[\"time\"] - time.time()\n+            next_is_mine = next_block_is_mine(bestheader[\"hash\"], my_blocks)\n+            logging.info(\"Received new block at height %d; next in %s (%s)\", bestheader[\"height\"], seconds_to_hms(next_delta), (\"mine\" if next_is_mine else \"backup\"))\n+            lastheader = bestheader[\"hash\"]\n+\n+        # when is the next block due to be mined?\n+        now = time.time()\n+        if args.set_block_time is not None:\n+            logging.debug(\"Setting start time to %d\", args.set_block_time)\n+            mine_time = args.set_block_time\n+            action_time = now\n+            is_mine = True\n+        elif bestheader[\"height\"] == 0:\n+            logging.error(\"When mining first block in a new signet, must specify --set-block-time\")\n+            return 1\n+        else:\n+\n+            time_delta = next_block_delta(int(bestheader[\"bits\"], 16), bci[\"bestblockhash\"], ultimate_target, args.poisson)\n+            mine_time = bestheader[\"time\"] + time_delta\n+\n+            is_mine = next_block_is_mine(bci[\"bestblockhash\"], my_blocks)\n+\n+            action_time = mine_time\n+            if not is_mine:\n+                action_time += args.backup_delay\n+\n+            if args.standby_delay > 0:\n+                action_time += args.standby_delay\n+            elif mined_blocks == 0:\n+                # for non-standby, always mine immediately on startup,\n+                # even if the next block shouldn't be ours\n+                action_time = now\n+\n+        # don't want fractional times so round down\n+        mine_time = int(mine_time)\n+        action_time = int(action_time)\n+\n+        # can't mine a block 2h in the future; 1h55m for some safety\n+        action_time = max(action_time, mine_time - 6900)\n+\n+        # ready to go? otherwise sleep and check for new block\n+        if now < action_time:\n+            sleep_for = min(action_time - now, 60)\n+            if mine_time < now:\n+                # someone else might have mined the block,\n+                # so check frequently, so we don't end up late\n+                # mining the next block if it's ours\n+                sleep_for = min(20, sleep_for)\n+            minestr = \"mine\" if is_mine else \"backup\"\n+            logging.debug(\"Sleeping for %s, next block due in %s (%s)\" % (seconds_to_hms(sleep_for), seconds_to_hms(mine_time - now), minestr))\n+            time.sleep(sleep_for)\n+            continue\n+\n+        # gbt\n+        tmpl = json.loads(args.bcli(\"getblocktemplate\", '{\"rules\":[\"signet\",\"segwit\"]}'))\n+        if tmpl[\"previousblockhash\"] != bci[\"bestblockhash\"]:\n+            logging.warning(\"GBT based off unexpected block (%s not %s), retrying\", tmpl[\"previousblockhash\"], bci[\"bestblockhash\"])\n+            time.sleep(1)\n+            continue\n+\n+        logging.debug(\"GBT template: %s\", tmpl)\n+\n+        if tmpl[\"mintime\"] > mine_time:\n+            logging.info(\"Updating block time from %d to %d\", mine_time, tmpl[\"mintime\"])\n+            mine_time = tmpl[\"mintime\"]\n+            if mine_time > now:\n+                logging.error(\"GBT mintime is in the future: %d is %d seconds later than %d\", mine_time, (mine_time-now), now)\n+                return 1\n+\n+        # address for reward\n+        reward_addr, reward_spk = get_reward_addr_spk(args, tmpl[\"height\"])\n+\n+        # mine block\n+        logging.debug(\"Mining block delta=%s start=%s mine=%s\", seconds_to_hms(mine_time-bestheader[\"time\"]), mine_time, is_mine)\n+        mined_blocks += 1\n+        psbt = generate_psbt(tmpl, reward_spk, blocktime=mine_time)\n+        psbt_signed = json.loads(args.bcli(\"-stdin\", \"walletprocesspsbt\", input=psbt.encode('utf8')))\n+        if not psbt_signed.get(\"complete\",False):\n+            logging.debug(\"Generated PSBT: %s\" % (psbt,))\n+            sys.stderr.write(\"PSBT signing failed\")\n+            return 1\n+        block, signet_solution = do_decode_psbt(psbt_signed[\"psbt\"])\n+        block = finish_block(block, signet_solution, args.grind_cmd)\n+\n+        # submit block\n+        r = args.bcli(\"-stdin\", \"submitblock\", input=ToHex(block).encode('utf8'))\n+\n+        # report\n+        bstr = \"block\" if is_mine else \"backup block\"\n+\n+        next_delta = next_block_delta(block.nBits, block.hash, ultimate_target, args.poisson)\n+        next_delta += block.nTime - time.time()\n+        next_is_mine = next_block_is_mine(block.hash, my_blocks)\n+\n+        logging.debug(\"Block hash %s payout to %s\", block.hash, reward_addr)\n+        logging.info(\"Mined %s at height %d; next in %s (%s)\", bstr, tmpl[\"height\"], seconds_to_hms(next_delta), (\"mine\" if next_is_mine else \"backup\"))\n+        if r != \"\":\n+            logging.warning(\"submitblock returned %s for height %d hash %s\", r, tmpl[\"height\"], block.hash)\n+        lastheader = block.hash\n+\n+def do_calibrate(args):\n+    if args.nbits is not None and args.seconds is not None:\n+        sys.stderr.write(\"Can only specify one of --nbits or --seconds\\n\")\n+        return 1\n+    if args.nbits is not None and len(args.nbits) != 8:\n+        sys.stderr.write(\"Must specify 8 hex digits for --nbits\")",
      "path": "contrib/signet/miner",
      "position": 523,
      "original_position": 523,
      "commit_id": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "original_commit_id": "6258e7eb3c9c4cb519cb519d640b73a059b1cc11",
      "in_reply_to_id": null,
      "user": {
        "login": "muxator",
        "id": 4067621,
        "node_id": "MDQ6VXNlcjQwNjc2MjE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4067621?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/muxator",
        "html_url": "https://github.com/muxator",
        "followers_url": "https://api.github.com/users/muxator/followers",
        "following_url": "https://api.github.com/users/muxator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/muxator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/muxator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/muxator/subscriptions",
        "organizations_url": "https://api.github.com/users/muxator/orgs",
        "repos_url": "https://api.github.com/users/muxator/repos",
        "events_url": "https://api.github.com/users/muxator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/muxator/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "A trailing `'\\n'` at the end of this line would make is consistent with the previous `sys.stderr.write()`:\r\n\r\n```diff\r\ndiff --git a/contrib/signet/miner b/contrib/signet/miner\r\n--- a/contrib/signet/miner\r\n+++ b/contrib/signet/miner\r\n@@ -520,7 +520,7 @@ def do_calibrate(args):\r\n         sys.stderr.write(\"Can only specify one of --nbits or --seconds\\n\")\r\n         return 1\r\n     if args.nbits is not None and len(args.nbits) != 8:\r\n-        sys.stderr.write(\"Must specify 8 hex digits for --nbits\")\r\n+        sys.stderr.write(\"Must specify 8 hex digits for --nbits\\n\")\r\n         return 1\r\n \r\n     TRIALS = 600 # gets variance down pretty low\r\n```\r\n",
      "created_at": "2020-12-07T14:17:27Z",
      "updated_at": "2021-01-12T08:35:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#discussion_r537540628",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537540628"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 523,
      "original_line": 523,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/545502442",
      "pull_request_review_id": 555100424,
      "id": 545502442,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTUwMjQ0Mg==",
      "diff_hunk": "@@ -17,3 +17,64 @@ Syntax: `getcoins.py [-h|--help] [-c|--cmd=<bitcoin-cli path>] [-f|--faucet=<fau\n If using the default network, invoking the script with no arguments should be sufficient under normal\n circumstances, but if multiple people are behind the same IP address, the faucet will by default only\n accept one claim per day. See `--password` above.\n+\n+miner\n+=====\n+\n+To mine the first block in your custom chain, you can run:\n+\n+  cd src/\n+  CLI=\"./bitcoin-cli -conf=mysignet.conf\"\n+  MINER=\"..contrib/signet/miner\"",
      "path": "contrib/signet/README.md",
      "position": null,
      "original_position": 12,
      "commit_id": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "original_commit_id": "69c6e47a3f929478a7f842ca3880bcae3c28a134",
      "in_reply_to_id": null,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "typo here, should be ../contrib!",
      "created_at": "2020-12-18T00:53:13Z",
      "updated_at": "2021-01-12T08:35:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#discussion_r545502442",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/545502442"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/545502587",
      "pull_request_review_id": 555100424,
      "id": 545502587,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTUwMjU4Nw==",
      "diff_hunk": "@@ -17,3 +17,64 @@ Syntax: `getcoins.py [-h|--help] [-c|--cmd=<bitcoin-cli path>] [-f|--faucet=<fau\n If using the default network, invoking the script with no arguments should be sufficient under normal\n circumstances, but if multiple people are behind the same IP address, the faucet will by default only\n accept one claim per day. See `--password` above.\n+\n+miner\n+=====\n+\n+To mine the first block in your custom chain, you can run:\n+\n+  cd src/",
      "path": "contrib/signet/README.md",
      "position": null,
      "original_position": 10,
      "commit_id": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "original_commit_id": "69c6e47a3f929478a7f842ca3880bcae3c28a134",
      "in_reply_to_id": null,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "maybe just make this a one-liner with some ; or && 's?",
      "created_at": "2020-12-18T00:53:42Z",
      "updated_at": "2021-01-12T08:35:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#discussion_r545502587",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/545502587"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/545504097",
      "pull_request_review_id": 555100424,
      "id": 545504097,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTUwNDA5Nw==",
      "diff_hunk": "@@ -17,3 +17,64 @@ Syntax: `getcoins.py [-h|--help] [-c|--cmd=<bitcoin-cli path>] [-f|--faucet=<fau\n If using the default network, invoking the script with no arguments should be sufficient under normal\n circumstances, but if multiple people are behind the same IP address, the faucet will by default only\n accept one claim per day. See `--password` above.\n+\n+miner\n+=====\n+\n+To mine the first block in your custom chain, you can run:\n+\n+  cd src/\n+  CLI=\"./bitcoin-cli -conf=mysignet.conf\"\n+  MINER=\"..contrib/signet/miner\"\n+  GRIND=\"./bitcoin-util grind\"\n+  ADDR=$($CLI -signet getnewaddress)\n+  $MINER --cli=\"$CLI\" generate --grind-cmd=\"$GRIND\" --address=\"$ADDR\" --set-block-time=-1\n+\n+This will mine a block with the current timestamp. If you want to backdate the chain, you can give a different timestamp to --set-block-time.\n+\n+You will then need to pick a difficulty target. Since signet chains are primarily protected by a signature rather than proof of work, there is no need to spend as much energy as possible mining, however you may wish to choose to spend more time than the absolute minimum. The calibrate subcommand can be used to pick a target, eg:\n+\n+  $MINER calibrate --grind-cmd=\"$GRIND\"\n+  nbits=1e00f403 for 25s average mining time\n+\n+It defaults to estimating an nbits value resulting in 25s average time to find a block, but the --seconds parameter can be used to pick a different target, or the --nbits parameter can be used to estimate how long it will take for a given difficulty.\n+\n+Using the --ongoing parameter will then cause the signet miner to create blocks indefinitely. It will pick the time between blocks so that difficulty is adjusted to match the provided --nbits value.\n+\n+  $MINER --cli=\"$CLI\" generate --grind-cmd=\"$GRIND\" --address=\"$ADDR\" --nbits=1e00f403 --ongoing\n+\n+Other options\n+-------------\n+\n+The --debug and --quiet options are available to control how noisy the signet miner's output is. Note that the --debug, --quiet and --cli parameters must all appear before the subcommand (generate, calibrate, etc) if used.\n+\n+Instead of specifying --ongoing, you can specify --max-blocks=N to mine N blocks and stop.\n+\n+Instead of using a single address, a ranged descriptor may be provided instead (via the --descriptor parameter), with the reward for the block at height H being sent to the H'th address generated from the descriptor.\n+\n+Instead of calculating a specific nbits value, --min-nbits can be specified instead, in which case the mininmum signet difficulty will be targeted.\n+\n+By default, the signet miner mines blocks at fixed intervals with minimal variation. If you want blocks to appear more randomly, as they do in mainnet, specify the --poisson option.",
      "path": "contrib/signet/README.md",
      "position": 41,
      "original_position": 41,
      "commit_id": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "original_commit_id": "69c6e47a3f929478a7f842ca3880bcae3c28a134",
      "in_reply_to_id": null,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "How can i set this fixed interval? Slightly confused the difference between nbits and the interval itself. It sounds like interval is every 5 minutes try to mine a 25 seconds difficult block? What if I just want \"blocks every 30 seconds\"?",
      "created_at": "2020-12-18T00:58:18Z",
      "updated_at": "2021-01-12T08:35:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#discussion_r545504097",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/545504097"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 57,
      "original_line": 57,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/545637073",
      "pull_request_review_id": 555266281,
      "id": 545637073,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYzNzA3Mw==",
      "diff_hunk": "@@ -17,3 +17,64 @@ Syntax: `getcoins.py [-h|--help] [-c|--cmd=<bitcoin-cli path>] [-f|--faucet=<fau\n If using the default network, invoking the script with no arguments should be sufficient under normal\n circumstances, but if multiple people are behind the same IP address, the faucet will by default only\n accept one claim per day. See `--password` above.\n+\n+miner\n+=====\n+\n+To mine the first block in your custom chain, you can run:\n+\n+  cd src/\n+  CLI=\"./bitcoin-cli -conf=mysignet.conf\"\n+  MINER=\"..contrib/signet/miner\"\n+  GRIND=\"./bitcoin-util grind\"\n+  ADDR=$($CLI -signet getnewaddress)\n+  $MINER --cli=\"$CLI\" generate --grind-cmd=\"$GRIND\" --address=\"$ADDR\" --set-block-time=-1\n+\n+This will mine a block with the current timestamp. If you want to backdate the chain, you can give a different timestamp to --set-block-time.\n+\n+You will then need to pick a difficulty target. Since signet chains are primarily protected by a signature rather than proof of work, there is no need to spend as much energy as possible mining, however you may wish to choose to spend more time than the absolute minimum. The calibrate subcommand can be used to pick a target, eg:\n+\n+  $MINER calibrate --grind-cmd=\"$GRIND\"\n+  nbits=1e00f403 for 25s average mining time\n+\n+It defaults to estimating an nbits value resulting in 25s average time to find a block, but the --seconds parameter can be used to pick a different target, or the --nbits parameter can be used to estimate how long it will take for a given difficulty.\n+\n+Using the --ongoing parameter will then cause the signet miner to create blocks indefinitely. It will pick the time between blocks so that difficulty is adjusted to match the provided --nbits value.\n+\n+  $MINER --cli=\"$CLI\" generate --grind-cmd=\"$GRIND\" --address=\"$ADDR\" --nbits=1e00f403 --ongoing\n+\n+Other options\n+-------------\n+\n+The --debug and --quiet options are available to control how noisy the signet miner's output is. Note that the --debug, --quiet and --cli parameters must all appear before the subcommand (generate, calibrate, etc) if used.\n+\n+Instead of specifying --ongoing, you can specify --max-blocks=N to mine N blocks and stop.\n+\n+Instead of using a single address, a ranged descriptor may be provided instead (via the --descriptor parameter), with the reward for the block at height H being sent to the H'th address generated from the descriptor.\n+\n+Instead of calculating a specific nbits value, --min-nbits can be specified instead, in which case the mininmum signet difficulty will be targeted.\n+\n+By default, the signet miner mines blocks at fixed intervals with minimal variation. If you want blocks to appear more randomly, as they do in mainnet, specify the --poisson option.",
      "path": "contrib/signet/README.md",
      "position": 41,
      "original_position": 41,
      "commit_id": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "original_commit_id": "69c6e47a3f929478a7f842ca3880bcae3c28a134",
      "in_reply_to_id": 545504097,
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> $GENERATE --cli=\"$CLI\" \"$@\" generate --grind-cmd=\"$GRIND\" --address=\"$ADDR\" --nbits=$NBITS --multiminer=$MULTIMINER --ongoing --poisson\r\n\r\nis what it looks like on my end. I think you want --ongoing --poisson.",
      "created_at": "2020-12-18T08:10:33Z",
      "updated_at": "2021-01-12T08:35:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#discussion_r545637073",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/545637073"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 57,
      "original_line": 57,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546029382",
      "pull_request_review_id": 555738751,
      "id": 546029382,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAyOTM4Mg==",
      "diff_hunk": "@@ -17,3 +17,64 @@ Syntax: `getcoins.py [-h|--help] [-c|--cmd=<bitcoin-cli path>] [-f|--faucet=<fau\n If using the default network, invoking the script with no arguments should be sufficient under normal\n circumstances, but if multiple people are behind the same IP address, the faucet will by default only\n accept one claim per day. See `--password` above.\n+\n+miner\n+=====\n+\n+To mine the first block in your custom chain, you can run:\n+\n+  cd src/\n+  CLI=\"./bitcoin-cli -conf=mysignet.conf\"\n+  MINER=\"..contrib/signet/miner\"\n+  GRIND=\"./bitcoin-util grind\"\n+  ADDR=$($CLI -signet getnewaddress)\n+  $MINER --cli=\"$CLI\" generate --grind-cmd=\"$GRIND\" --address=\"$ADDR\" --set-block-time=-1\n+\n+This will mine a block with the current timestamp. If you want to backdate the chain, you can give a different timestamp to --set-block-time.\n+\n+You will then need to pick a difficulty target. Since signet chains are primarily protected by a signature rather than proof of work, there is no need to spend as much energy as possible mining, however you may wish to choose to spend more time than the absolute minimum. The calibrate subcommand can be used to pick a target, eg:\n+\n+  $MINER calibrate --grind-cmd=\"$GRIND\"\n+  nbits=1e00f403 for 25s average mining time\n+\n+It defaults to estimating an nbits value resulting in 25s average time to find a block, but the --seconds parameter can be used to pick a different target, or the --nbits parameter can be used to estimate how long it will take for a given difficulty.\n+\n+Using the --ongoing parameter will then cause the signet miner to create blocks indefinitely. It will pick the time between blocks so that difficulty is adjusted to match the provided --nbits value.\n+\n+  $MINER --cli=\"$CLI\" generate --grind-cmd=\"$GRIND\" --address=\"$ADDR\" --nbits=1e00f403 --ongoing\n+\n+Other options\n+-------------\n+\n+The --debug and --quiet options are available to control how noisy the signet miner's output is. Note that the --debug, --quiet and --cli parameters must all appear before the subcommand (generate, calibrate, etc) if used.\n+\n+Instead of specifying --ongoing, you can specify --max-blocks=N to mine N blocks and stop.\n+\n+Instead of using a single address, a ranged descriptor may be provided instead (via the --descriptor parameter), with the reward for the block at height H being sent to the H'th address generated from the descriptor.\n+\n+Instead of calculating a specific nbits value, --min-nbits can be specified instead, in which case the mininmum signet difficulty will be targeted.\n+\n+By default, the signet miner mines blocks at fixed intervals with minimal variation. If you want blocks to appear more randomly, as they do in mainnet, specify the --poisson option.",
      "path": "contrib/signet/README.md",
      "position": 41,
      "original_position": 41,
      "commit_id": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "original_commit_id": "69c6e47a3f929478a7f842ca3880bcae3c28a134",
      "in_reply_to_id": 545504097,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think --poisson is the right thing, as --poisson just adds noise?\r\n\r\nI guess the parameter is standby delay, which defaults to 0?\r\n\r\nWhere I think I'm confused is how setting nbits works because we use the next_block_delta to define how long to wait before mining (via sleeping), but then the grind command conceivably takes est_time(nbits) to mine? so it feels like we're double delaying based on nbits?",
      "created_at": "2020-12-18T18:59:06Z",
      "updated_at": "2021-01-12T08:35:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#discussion_r546029382",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546029382"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 57,
      "original_line": 57,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546094865",
      "pull_request_review_id": 555818857,
      "id": 546094865,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA5NDg2NQ==",
      "diff_hunk": "@@ -17,3 +17,64 @@ Syntax: `getcoins.py [-h|--help] [-c|--cmd=<bitcoin-cli path>] [-f|--faucet=<fau\n If using the default network, invoking the script with no arguments should be sufficient under normal\n circumstances, but if multiple people are behind the same IP address, the faucet will by default only\n accept one claim per day. See `--password` above.\n+\n+miner\n+=====\n+\n+To mine the first block in your custom chain, you can run:\n+\n+  cd src/\n+  CLI=\"./bitcoin-cli -conf=mysignet.conf\"\n+  MINER=\"..contrib/signet/miner\"\n+  GRIND=\"./bitcoin-util grind\"\n+  ADDR=$($CLI -signet getnewaddress)\n+  $MINER --cli=\"$CLI\" generate --grind-cmd=\"$GRIND\" --address=\"$ADDR\" --set-block-time=-1\n+\n+This will mine a block with the current timestamp. If you want to backdate the chain, you can give a different timestamp to --set-block-time.\n+\n+You will then need to pick a difficulty target. Since signet chains are primarily protected by a signature rather than proof of work, there is no need to spend as much energy as possible mining, however you may wish to choose to spend more time than the absolute minimum. The calibrate subcommand can be used to pick a target, eg:\n+\n+  $MINER calibrate --grind-cmd=\"$GRIND\"\n+  nbits=1e00f403 for 25s average mining time\n+\n+It defaults to estimating an nbits value resulting in 25s average time to find a block, but the --seconds parameter can be used to pick a different target, or the --nbits parameter can be used to estimate how long it will take for a given difficulty.\n+\n+Using the --ongoing parameter will then cause the signet miner to create blocks indefinitely. It will pick the time between blocks so that difficulty is adjusted to match the provided --nbits value.\n+\n+  $MINER --cli=\"$CLI\" generate --grind-cmd=\"$GRIND\" --address=\"$ADDR\" --nbits=1e00f403 --ongoing\n+\n+Other options\n+-------------\n+\n+The --debug and --quiet options are available to control how noisy the signet miner's output is. Note that the --debug, --quiet and --cli parameters must all appear before the subcommand (generate, calibrate, etc) if used.\n+\n+Instead of specifying --ongoing, you can specify --max-blocks=N to mine N blocks and stop.\n+\n+Instead of using a single address, a ranged descriptor may be provided instead (via the --descriptor parameter), with the reward for the block at height H being sent to the H'th address generated from the descriptor.\n+\n+Instead of calculating a specific nbits value, --min-nbits can be specified instead, in which case the mininmum signet difficulty will be targeted.",
      "path": "contrib/signet/README.md",
      "position": 39,
      "original_position": 39,
      "commit_id": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "original_commit_id": "69c6e47a3f929478a7f842ca3880bcae3c28a134",
      "in_reply_to_id": null,
      "user": {
        "login": "gruve-p",
        "id": 11212268,
        "node_id": "MDQ6VXNlcjExMjEyMjY4",
        "avatar_url": "https://avatars.githubusercontent.com/u/11212268?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gruve-p",
        "html_url": "https://github.com/gruve-p",
        "followers_url": "https://api.github.com/users/gruve-p/followers",
        "following_url": "https://api.github.com/users/gruve-p/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gruve-p/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gruve-p/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gruve-p/subscriptions",
        "organizations_url": "https://api.github.com/users/gruve-p/orgs",
        "repos_url": "https://api.github.com/users/gruve-p/repos",
        "events_url": "https://api.github.com/users/gruve-p/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gruve-p/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "mininmum > minimum",
      "created_at": "2020-12-18T21:17:11Z",
      "updated_at": "2021-01-12T08:35:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#discussion_r546094865",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546094865"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 55,
      "original_line": 55,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546095728",
      "pull_request_review_id": 555819911,
      "id": 546095728,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA5NTcyOA==",
      "diff_hunk": "@@ -17,3 +17,64 @@ Syntax: `getcoins.py [-h|--help] [-c|--cmd=<bitcoin-cli path>] [-f|--faucet=<fau\n If using the default network, invoking the script with no arguments should be sufficient under normal\n circumstances, but if multiple people are behind the same IP address, the faucet will by default only\n accept one claim per day. See `--password` above.\n+\n+miner\n+=====\n+\n+To mine the first block in your custom chain, you can run:\n+\n+  cd src/\n+  CLI=\"./bitcoin-cli -conf=mysignet.conf\"\n+  MINER=\"..contrib/signet/miner\"\n+  GRIND=\"./bitcoin-util grind\"\n+  ADDR=$($CLI -signet getnewaddress)\n+  $MINER --cli=\"$CLI\" generate --grind-cmd=\"$GRIND\" --address=\"$ADDR\" --set-block-time=-1\n+\n+This will mine a block with the current timestamp. If you want to backdate the chain, you can give a different timestamp to --set-block-time.\n+\n+You will then need to pick a difficulty target. Since signet chains are primarily protected by a signature rather than proof of work, there is no need to spend as much energy as possible mining, however you may wish to choose to spend more time than the absolute minimum. The calibrate subcommand can be used to pick a target, eg:\n+\n+  $MINER calibrate --grind-cmd=\"$GRIND\"\n+  nbits=1e00f403 for 25s average mining time\n+\n+It defaults to estimating an nbits value resulting in 25s average time to find a block, but the --seconds parameter can be used to pick a different target, or the --nbits parameter can be used to estimate how long it will take for a given difficulty.\n+\n+Using the --ongoing parameter will then cause the signet miner to create blocks indefinitely. It will pick the time between blocks so that difficulty is adjusted to match the provided --nbits value.\n+\n+  $MINER --cli=\"$CLI\" generate --grind-cmd=\"$GRIND\" --address=\"$ADDR\" --nbits=1e00f403 --ongoing\n+\n+Other options\n+-------------\n+\n+The --debug and --quiet options are available to control how noisy the signet miner's output is. Note that the --debug, --quiet and --cli parameters must all appear before the subcommand (generate, calibrate, etc) if used.\n+\n+Instead of specifying --ongoing, you can specify --max-blocks=N to mine N blocks and stop.\n+\n+Instead of using a single address, a ranged descriptor may be provided instead (via the --descriptor parameter), with the reward for the block at height H being sent to the H'th address generated from the descriptor.\n+\n+Instead of calculating a specific nbits value, --min-nbits can be specified instead, in which case the mininmum signet difficulty will be targeted.\n+\n+By default, the signet miner mines blocks at fixed intervals with minimal variation. If you want blocks to appear more randomly, as they do in mainnet, specify the --poisson option.",
      "path": "contrib/signet/README.md",
      "position": 41,
      "original_position": 41,
      "commit_id": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "original_commit_id": "69c6e47a3f929478a7f842ca3880bcae3c28a134",
      "in_reply_to_id": 545504097,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You can't choose the interval; the difficulty will just get adjusted so the interval levels out at around 10 minutes. What you can target is a difficulty, so that once you reach that difficulty you keep mining a block every 10 minutes so that you stay at that difficulty. If you're not already at that difficulty, you instead choose a shorter/longer interval, so the difficulty is increased/decreased at the next retarget.\r\n\r\nIf you want to mine a bunch of blocks to get the chain started, then backdating via `--set-block-time` works. You could also use `--nbits=170f1372` (current mainnet nbits) which would make it try to raise the difficulty by mining quickly (though not faster than an average of 2m30).\r\n\r\nThere's no double delay, because everything operates on the block time field -- ie, last block had timestamp T, next block has timestamp T+INTERVAL. The standby-delay and backup-delay parameters mean you won't start mining the block until T+INTERVAL+DELAY, and you won't finish mining the block until T+INTERVAL+DELAY+GRINDTIME, but those delays don't affect the following block, which will have a timestamp of T+INTERVAL+INTERVAL2 (though again you might not start mining it for a further DELAY, and it won't be finished until GRINDTIME has also passed)",
      "created_at": "2020-12-18T21:19:16Z",
      "updated_at": "2021-01-12T08:35:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#discussion_r546095728",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546095728"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 57,
      "original_line": 57,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546106217",
      "pull_request_review_id": 555833068,
      "id": 546106217,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjEwNjIxNw==",
      "diff_hunk": "@@ -17,3 +17,64 @@ Syntax: `getcoins.py [-h|--help] [-c|--cmd=<bitcoin-cli path>] [-f|--faucet=<fau\n If using the default network, invoking the script with no arguments should be sufficient under normal\n circumstances, but if multiple people are behind the same IP address, the faucet will by default only\n accept one claim per day. See `--password` above.\n+\n+miner\n+=====\n+\n+To mine the first block in your custom chain, you can run:\n+\n+  cd src/\n+  CLI=\"./bitcoin-cli -conf=mysignet.conf\"\n+  MINER=\"..contrib/signet/miner\"\n+  GRIND=\"./bitcoin-util grind\"\n+  ADDR=$($CLI -signet getnewaddress)\n+  $MINER --cli=\"$CLI\" generate --grind-cmd=\"$GRIND\" --address=\"$ADDR\" --set-block-time=-1\n+\n+This will mine a block with the current timestamp. If you want to backdate the chain, you can give a different timestamp to --set-block-time.\n+\n+You will then need to pick a difficulty target. Since signet chains are primarily protected by a signature rather than proof of work, there is no need to spend as much energy as possible mining, however you may wish to choose to spend more time than the absolute minimum. The calibrate subcommand can be used to pick a target, eg:\n+\n+  $MINER calibrate --grind-cmd=\"$GRIND\"\n+  nbits=1e00f403 for 25s average mining time",
      "path": "contrib/signet/README.md",
      "position": null,
      "original_position": 22,
      "commit_id": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "original_commit_id": "69c6e47a3f929478a7f842ca3880bcae3c28a134",
      "in_reply_to_id": null,
      "user": {
        "login": "gruve-p",
        "id": 11212268,
        "node_id": "MDQ6VXNlcjExMjEyMjY4",
        "avatar_url": "https://avatars.githubusercontent.com/u/11212268?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gruve-p",
        "html_url": "https://github.com/gruve-p",
        "followers_url": "https://api.github.com/users/gruve-p/followers",
        "following_url": "https://api.github.com/users/gruve-p/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gruve-p/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gruve-p/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gruve-p/subscriptions",
        "organizations_url": "https://api.github.com/users/gruve-p/orgs",
        "repos_url": "https://api.github.com/users/gruve-p/repos",
        "events_url": "https://api.github.com/users/gruve-p/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gruve-p/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nbits=1e00f403 > --nbits=1e00f403",
      "created_at": "2020-12-18T21:46:54Z",
      "updated_at": "2021-01-12T08:35:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#discussion_r546106217",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546106217"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546269021",
      "pull_request_review_id": 555960447,
      "id": 546269021,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI2OTAyMQ==",
      "diff_hunk": "@@ -17,3 +17,64 @@ Syntax: `getcoins.py [-h|--help] [-c|--cmd=<bitcoin-cli path>] [-f|--faucet=<fau\n If using the default network, invoking the script with no arguments should be sufficient under normal\n circumstances, but if multiple people are behind the same IP address, the faucet will by default only\n accept one claim per day. See `--password` above.\n+\n+miner\n+=====\n+\n+To mine the first block in your custom chain, you can run:\n+\n+  cd src/\n+  CLI=\"./bitcoin-cli -conf=mysignet.conf\"\n+  MINER=\"..contrib/signet/miner\"\n+  GRIND=\"./bitcoin-util grind\"\n+  ADDR=$($CLI -signet getnewaddress)\n+  $MINER --cli=\"$CLI\" generate --grind-cmd=\"$GRIND\" --address=\"$ADDR\" --set-block-time=-1\n+\n+This will mine a block with the current timestamp. If you want to backdate the chain, you can give a different timestamp to --set-block-time.\n+\n+You will then need to pick a difficulty target. Since signet chains are primarily protected by a signature rather than proof of work, there is no need to spend as much energy as possible mining, however you may wish to choose to spend more time than the absolute minimum. The calibrate subcommand can be used to pick a target, eg:\n+\n+  $MINER calibrate --grind-cmd=\"$GRIND\"\n+  nbits=1e00f403 for 25s average mining time\n+\n+It defaults to estimating an nbits value resulting in 25s average time to find a block, but the --seconds parameter can be used to pick a different target, or the --nbits parameter can be used to estimate how long it will take for a given difficulty.\n+\n+Using the --ongoing parameter will then cause the signet miner to create blocks indefinitely. It will pick the time between blocks so that difficulty is adjusted to match the provided --nbits value.\n+\n+  $MINER --cli=\"$CLI\" generate --grind-cmd=\"$GRIND\" --address=\"$ADDR\" --nbits=1e00f403 --ongoing\n+\n+Other options\n+-------------\n+\n+The --debug and --quiet options are available to control how noisy the signet miner's output is. Note that the --debug, --quiet and --cli parameters must all appear before the subcommand (generate, calibrate, etc) if used.\n+\n+Instead of specifying --ongoing, you can specify --max-blocks=N to mine N blocks and stop.\n+\n+Instead of using a single address, a ranged descriptor may be provided instead (via the --descriptor parameter), with the reward for the block at height H being sent to the H'th address generated from the descriptor.\n+\n+Instead of calculating a specific nbits value, --min-nbits can be specified instead, in which case the mininmum signet difficulty will be targeted.\n+\n+By default, the signet miner mines blocks at fixed intervals with minimal variation. If you want blocks to appear more randomly, as they do in mainnet, specify the --poisson option.",
      "path": "contrib/signet/README.md",
      "position": 41,
      "original_position": 41,
      "commit_id": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "original_commit_id": "69c6e47a3f929478a7f842ca3880bcae3c28a134",
      "in_reply_to_id": 545504097,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ahhh this makes sense I didn't realize normal difficulty adjustment rules are still used.\r\n\r\nThis text could go great in the Readme btw :)\r\n\r\nMaybe incl a shell script template to backdate 100 blocks on start to seed a usable wallet?",
      "created_at": "2020-12-19T18:36:17Z",
      "updated_at": "2021-01-12T08:35:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#discussion_r546269021",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546269021"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 57,
      "original_line": 57,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546270432",
      "pull_request_review_id": 555961313,
      "id": 546270432,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI3MDQzMg==",
      "diff_hunk": "@@ -17,3 +17,64 @@ Syntax: `getcoins.py [-h|--help] [-c|--cmd=<bitcoin-cli path>] [-f|--faucet=<fau\n If using the default network, invoking the script with no arguments should be sufficient under normal\n circumstances, but if multiple people are behind the same IP address, the faucet will by default only\n accept one claim per day. See `--password` above.\n+\n+miner\n+=====\n+\n+To mine the first block in your custom chain, you can run:\n+\n+  cd src/\n+  CLI=\"./bitcoin-cli -conf=mysignet.conf\"\n+  MINER=\"..contrib/signet/miner\"\n+  GRIND=\"./bitcoin-util grind\"\n+  ADDR=$($CLI -signet getnewaddress)\n+  $MINER --cli=\"$CLI\" generate --grind-cmd=\"$GRIND\" --address=\"$ADDR\" --set-block-time=-1\n+\n+This will mine a block with the current timestamp. If you want to backdate the chain, you can give a different timestamp to --set-block-time.\n+\n+You will then need to pick a difficulty target. Since signet chains are primarily protected by a signature rather than proof of work, there is no need to spend as much energy as possible mining, however you may wish to choose to spend more time than the absolute minimum. The calibrate subcommand can be used to pick a target, eg:\n+\n+  $MINER calibrate --grind-cmd=\"$GRIND\"\n+  nbits=1e00f403 for 25s average mining time",
      "path": "contrib/signet/README.md",
      "position": null,
      "original_position": 22,
      "commit_id": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "original_commit_id": "69c6e47a3f929478a7f842ca3880bcae3c28a134",
      "in_reply_to_id": 546106217,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That line is an example of output of the command",
      "created_at": "2020-12-19T18:51:39Z",
      "updated_at": "2021-01-12T08:35:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#discussion_r546270432",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546270432"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546271175",
      "pull_request_review_id": 555961726,
      "id": 546271175,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI3MTE3NQ==",
      "diff_hunk": "@@ -17,3 +17,64 @@ Syntax: `getcoins.py [-h|--help] [-c|--cmd=<bitcoin-cli path>] [-f|--faucet=<fau\n If using the default network, invoking the script with no arguments should be sufficient under normal\n circumstances, but if multiple people are behind the same IP address, the faucet will by default only\n accept one claim per day. See `--password` above.\n+\n+miner\n+=====\n+\n+To mine the first block in your custom chain, you can run:\n+\n+  cd src/\n+  CLI=\"./bitcoin-cli -conf=mysignet.conf\"\n+  MINER=\"..contrib/signet/miner\"\n+  GRIND=\"./bitcoin-util grind\"\n+  ADDR=$($CLI -signet getnewaddress)\n+  $MINER --cli=\"$CLI\" generate --grind-cmd=\"$GRIND\" --address=\"$ADDR\" --set-block-time=-1\n+\n+This will mine a block with the current timestamp. If you want to backdate the chain, you can give a different timestamp to --set-block-time.\n+\n+You will then need to pick a difficulty target. Since signet chains are primarily protected by a signature rather than proof of work, there is no need to spend as much energy as possible mining, however you may wish to choose to spend more time than the absolute minimum. The calibrate subcommand can be used to pick a target, eg:\n+\n+  $MINER calibrate --grind-cmd=\"$GRIND\"\n+  nbits=1e00f403 for 25s average mining time\n+\n+It defaults to estimating an nbits value resulting in 25s average time to find a block, but the --seconds parameter can be used to pick a different target, or the --nbits parameter can be used to estimate how long it will take for a given difficulty.\n+\n+Using the --ongoing parameter will then cause the signet miner to create blocks indefinitely. It will pick the time between blocks so that difficulty is adjusted to match the provided --nbits value.\n+\n+  $MINER --cli=\"$CLI\" generate --grind-cmd=\"$GRIND\" --address=\"$ADDR\" --nbits=1e00f403 --ongoing\n+\n+Other options\n+-------------\n+\n+The --debug and --quiet options are available to control how noisy the signet miner's output is. Note that the --debug, --quiet and --cli parameters must all appear before the subcommand (generate, calibrate, etc) if used.\n+\n+Instead of specifying --ongoing, you can specify --max-blocks=N to mine N blocks and stop.\n+\n+Instead of using a single address, a ranged descriptor may be provided instead (via the --descriptor parameter), with the reward for the block at height H being sent to the H'th address generated from the descriptor.\n+\n+Instead of calculating a specific nbits value, --min-nbits can be specified instead, in which case the mininmum signet difficulty will be targeted.\n+\n+By default, the signet miner mines blocks at fixed intervals with minimal variation. If you want blocks to appear more randomly, as they do in mainnet, specify the --poisson option.",
      "path": "contrib/signet/README.md",
      "position": 41,
      "original_position": 41,
      "commit_id": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "original_commit_id": "69c6e47a3f929478a7f842ca3880bcae3c28a134",
      "in_reply_to_id": 545504097,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think just `START=$(date +%s -d\"1000 minutes ago\")` and `--set-block-time=$START` would work for that -- even with poisson timing you should end up mining 100+ blocks before you catch up with real time. Maybe something like that should just be the default if you're mining the first block of a signet chain?",
      "created_at": "2020-12-19T18:59:08Z",
      "updated_at": "2021-01-12T08:35:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#discussion_r546271175",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546271175"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 57,
      "original_line": 57,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546448915",
      "pull_request_review_id": 556069812,
      "id": 546448915,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ0ODkxNQ==",
      "diff_hunk": "@@ -17,3 +17,64 @@ Syntax: `getcoins.py [-h|--help] [-c|--cmd=<bitcoin-cli path>] [-f|--faucet=<fau\n If using the default network, invoking the script with no arguments should be sufficient under normal\n circumstances, but if multiple people are behind the same IP address, the faucet will by default only\n accept one claim per day. See `--password` above.\n+\n+miner\n+=====\n+\n+To mine the first block in your custom chain, you can run:\n+\n+  cd src/\n+  CLI=\"./bitcoin-cli -conf=mysignet.conf\"\n+  MINER=\"..contrib/signet/miner\"\n+  GRIND=\"./bitcoin-util grind\"\n+  ADDR=$($CLI -signet getnewaddress)\n+  $MINER --cli=\"$CLI\" generate --grind-cmd=\"$GRIND\" --address=\"$ADDR\" --set-block-time=-1\n+\n+This will mine a block with the current timestamp. If you want to backdate the chain, you can give a different timestamp to --set-block-time.\n+\n+You will then need to pick a difficulty target. Since signet chains are primarily protected by a signature rather than proof of work, there is no need to spend as much energy as possible mining, however you may wish to choose to spend more time than the absolute minimum. The calibrate subcommand can be used to pick a target, eg:\n+\n+  $MINER calibrate --grind-cmd=\"$GRIND\"\n+  nbits=1e00f403 for 25s average mining time",
      "path": "contrib/signet/README.md",
      "position": null,
      "original_position": 22,
      "commit_id": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "original_commit_id": "69c6e47a3f929478a7f842ca3880bcae3c28a134",
      "in_reply_to_id": 546106217,
      "user": {
        "login": "gruve-p",
        "id": 11212268,
        "node_id": "MDQ6VXNlcjExMjEyMjY4",
        "avatar_url": "https://avatars.githubusercontent.com/u/11212268?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gruve-p",
        "html_url": "https://github.com/gruve-p",
        "followers_url": "https://api.github.com/users/gruve-p/followers",
        "following_url": "https://api.github.com/users/gruve-p/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gruve-p/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gruve-p/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gruve-p/subscriptions",
        "organizations_url": "https://api.github.com/users/gruve-p/orgs",
        "repos_url": "https://api.github.com/users/gruve-p/repos",
        "events_url": "https://api.github.com/users/gruve-p/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gruve-p/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The formatting looks strange when reading the README.md",
      "created_at": "2020-12-20T23:00:18Z",
      "updated_at": "2021-01-12T08:35:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#discussion_r546448915",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546448915"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546448958",
      "pull_request_review_id": 556069857,
      "id": 546448958,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ0ODk1OA==",
      "diff_hunk": "@@ -17,3 +17,64 @@ Syntax: `getcoins.py [-h|--help] [-c|--cmd=<bitcoin-cli path>] [-f|--faucet=<fau\n If using the default network, invoking the script with no arguments should be sufficient under normal\n circumstances, but if multiple people are behind the same IP address, the faucet will by default only\n accept one claim per day. See `--password` above.\n+\n+miner\n+=====\n+\n+To mine the first block in your custom chain, you can run:\n+\n+  cd src/\n+  CLI=\"./bitcoin-cli -conf=mysignet.conf\"\n+  MINER=\"..contrib/signet/miner\"\n+  GRIND=\"./bitcoin-util grind\"\n+  ADDR=$($CLI -signet getnewaddress)\n+  $MINER --cli=\"$CLI\" generate --grind-cmd=\"$GRIND\" --address=\"$ADDR\" --set-block-time=-1\n+\n+This will mine a block with the current timestamp. If you want to backdate the chain, you can give a different timestamp to --set-block-time.\n+\n+You will then need to pick a difficulty target. Since signet chains are primarily protected by a signature rather than proof of work, there is no need to spend as much energy as possible mining, however you may wish to choose to spend more time than the absolute minimum. The calibrate subcommand can be used to pick a target, eg:\n+\n+  $MINER calibrate --grind-cmd=\"$GRIND\"\n+  nbits=1e00f403 for 25s average mining time\n+\n+It defaults to estimating an nbits value resulting in 25s average time to find a block, but the --seconds parameter can be used to pick a different target, or the --nbits parameter can be used to estimate how long it will take for a given difficulty.\n+\n+Using the --ongoing parameter will then cause the signet miner to create blocks indefinitely. It will pick the time between blocks so that difficulty is adjusted to match the provided --nbits value.\n+\n+  $MINER --cli=\"$CLI\" generate --grind-cmd=\"$GRIND\" --address=\"$ADDR\" --nbits=1e00f403 --ongoing\n+\n+Other options\n+-------------\n+\n+The --debug and --quiet options are available to control how noisy the signet miner's output is. Note that the --debug, --quiet and --cli parameters must all appear before the subcommand (generate, calibrate, etc) if used.\n+\n+Instead of specifying --ongoing, you can specify --max-blocks=N to mine N blocks and stop.\n+\n+Instead of using a single address, a ranged descriptor may be provided instead (via the --descriptor parameter), with the reward for the block at height H being sent to the H'th address generated from the descriptor.\n+\n+Instead of calculating a specific nbits value, --min-nbits can be specified instead, in which case the mininmum signet difficulty will be targeted.\n+\n+By default, the signet miner mines blocks at fixed intervals with minimal variation. If you want blocks to appear more randomly, as they do in mainnet, specify the --poisson option.\n+\n+Using the --multiminer parameter allows mining to be distributed amongst multiple miners. For example, if you have 3 miners and want to share blocks between them, specify --multiminer=1/3 on one, --multiminer=2/3 on another, and --multiminer=3/3 on the last one. If you want one to do 10% of blocks and two others to do 45% each, --multiminer=1-10/100 on the first, and --multiminer=11-55 and --multiminer=56-100 on the others. Note that which miner mines which block is determined by the previous block hash, so occasional runs of one miner doing many blocks in a row is to be expected.\n+\n+When --multiminer is used, if a miner is down and does not mine a block within five minutes of when it is due, the other miners will automatically act as redundant backups ensuring the chain does not halt. The --backup-delay parameter can be used to change how long a given miner waits, allowing one to be the primary backup (after five minutes) and another to be the secondary backup (after six minutes, eg).\n+\n+The --standby-delay parameter can be used to make a backup miner that only mines if a block doesn't arrive on time. This can be combined with --multiminer if desired. Setting --standby-delay also prevents the first block from being mined immediately.\n+\n+Advanced usage\n+--------------\n+\n+The process generate follows internally is to get a block template, convert that into a PSBT, sign the PSBT, move the signature from the signed PSBT into the block template's coinbase, grind proof of work for the block, and then submit the block to the network.\n+\n+These steps can instead be done explicitly:\n+\n+  $CLI -signet getblocktemplate '{\"rules\": [\"signet\",\"segwit\"]}' |\n+    $MINER --cli=\"$CLI\" genpsbt --address=\"$ADDR\" |\n+    $CLI -signet -stdin walletprocesspsbt |\n+    jq -r .psbt |\n+    $MINER --cli=\"$CLI\" solvepsbt --grind-cmd=\"$GRIND\" |\n+    $CLI -signet -stdin submitblock",
      "path": "contrib/signet/README.md",
      "position": null,
      "original_position": 61,
      "commit_id": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "original_commit_id": "69c6e47a3f929478a7f842ca3880bcae3c28a134",
      "in_reply_to_id": null,
      "user": {
        "login": "gruve-p",
        "id": 11212268,
        "node_id": "MDQ6VXNlcjExMjEyMjY4",
        "avatar_url": "https://avatars.githubusercontent.com/u/11212268?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gruve-p",
        "html_url": "https://github.com/gruve-p",
        "followers_url": "https://api.github.com/users/gruve-p/followers",
        "following_url": "https://api.github.com/users/gruve-p/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gruve-p/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gruve-p/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gruve-p/subscriptions",
        "organizations_url": "https://api.github.com/users/gruve-p/orgs",
        "repos_url": "https://api.github.com/users/gruve-p/repos",
        "events_url": "https://api.github.com/users/gruve-p/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gruve-p/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe fix the formatting here also",
      "created_at": "2020-12-20T23:00:55Z",
      "updated_at": "2021-01-12T08:35:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#discussion_r546448958",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546448958"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
        }
      },
      "start_line": null,
      "original_start_line": 72,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546449001",
      "pull_request_review_id": 556069857,
      "id": 546449001,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ0OTAwMQ==",
      "diff_hunk": "@@ -17,3 +17,64 @@ Syntax: `getcoins.py [-h|--help] [-c|--cmd=<bitcoin-cli path>] [-f|--faucet=<fau\n If using the default network, invoking the script with no arguments should be sufficient under normal\n circumstances, but if multiple people are behind the same IP address, the faucet will by default only\n accept one claim per day. See `--password` above.\n+\n+miner\n+=====\n+\n+To mine the first block in your custom chain, you can run:\n+\n+  cd src/\n+  CLI=\"./bitcoin-cli -conf=mysignet.conf\"\n+  MINER=\"..contrib/signet/miner\"\n+  GRIND=\"./bitcoin-util grind\"\n+  ADDR=$($CLI -signet getnewaddress)\n+  $MINER --cli=\"$CLI\" generate --grind-cmd=\"$GRIND\" --address=\"$ADDR\" --set-block-time=-1",
      "path": "contrib/signet/README.md",
      "position": null,
      "original_position": 15,
      "commit_id": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "original_commit_id": "69c6e47a3f929478a7f842ca3880bcae3c28a134",
      "in_reply_to_id": null,
      "user": {
        "login": "gruve-p",
        "id": 11212268,
        "node_id": "MDQ6VXNlcjExMjEyMjY4",
        "avatar_url": "https://avatars.githubusercontent.com/u/11212268?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gruve-p",
        "html_url": "https://github.com/gruve-p",
        "followers_url": "https://api.github.com/users/gruve-p/followers",
        "following_url": "https://api.github.com/users/gruve-p/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gruve-p/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gruve-p/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gruve-p/subscriptions",
        "organizations_url": "https://api.github.com/users/gruve-p/orgs",
        "repos_url": "https://api.github.com/users/gruve-p/repos",
        "events_url": "https://api.github.com/users/gruve-p/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gruve-p/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Formatting here also",
      "created_at": "2020-12-20T23:01:22Z",
      "updated_at": "2021-01-12T08:35:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#discussion_r546449001",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546449001"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
        }
      },
      "start_line": null,
      "original_start_line": 27,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 31,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546477754",
      "pull_request_review_id": 556096225,
      "id": 546477754,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ3Nzc1NA==",
      "diff_hunk": "@@ -17,3 +17,64 @@ Syntax: `getcoins.py [-h|--help] [-c|--cmd=<bitcoin-cli path>] [-f|--faucet=<fau\n If using the default network, invoking the script with no arguments should be sufficient under normal\n circumstances, but if multiple people are behind the same IP address, the faucet will by default only\n accept one claim per day. See `--password` above.\n+\n+miner\n+=====\n+\n+To mine the first block in your custom chain, you can run:\n+\n+  cd src/\n+  CLI=\"./bitcoin-cli -conf=mysignet.conf\"\n+  MINER=\"..contrib/signet/miner\"\n+  GRIND=\"./bitcoin-util grind\"\n+  ADDR=$($CLI -signet getnewaddress)\n+  $MINER --cli=\"$CLI\" generate --grind-cmd=\"$GRIND\" --address=\"$ADDR\" --set-block-time=-1\n+\n+This will mine a block with the current timestamp. If you want to backdate the chain, you can give a different timestamp to --set-block-time.\n+\n+You will then need to pick a difficulty target. Since signet chains are primarily protected by a signature rather than proof of work, there is no need to spend as much energy as possible mining, however you may wish to choose to spend more time than the absolute minimum. The calibrate subcommand can be used to pick a target, eg:\n+\n+  $MINER calibrate --grind-cmd=\"$GRIND\"\n+  nbits=1e00f403 for 25s average mining time",
      "path": "contrib/signet/README.md",
      "position": null,
      "original_position": 22,
      "commit_id": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "original_commit_id": "69c6e47a3f929478a7f842ca3880bcae3c28a134",
      "in_reply_to_id": 546106217,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah, apparently 4 spaces is the standard, not wordpress's 2 spaces. Fixed.",
      "created_at": "2020-12-21T02:20:55Z",
      "updated_at": "2021-01-12T08:35:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#discussion_r546477754",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546477754"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546769938",
      "pull_request_review_id": 556462996,
      "id": 546769938,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc2OTkzOA==",
      "diff_hunk": "@@ -17,3 +17,64 @@ Syntax: `getcoins.py [-h|--help] [-c|--cmd=<bitcoin-cli path>] [-f|--faucet=<fau\n If using the default network, invoking the script with no arguments should be sufficient under normal\n circumstances, but if multiple people are behind the same IP address, the faucet will by default only\n accept one claim per day. See `--password` above.\n+\n+miner\n+=====\n+\n+To mine the first block in your custom chain, you can run:\n+\n+    cd src/\n+    CLI=\"./bitcoin-cli -conf=mysignet.conf\"\n+    MINER=\"..contrib/signet/miner\"",
      "path": "contrib/signet/README.md",
      "position": 12,
      "original_position": 12,
      "commit_id": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "original_commit_id": "f19148a9ddab01af80067982f2639dbee2cdbf52",
      "in_reply_to_id": null,
      "user": {
        "login": "gruve-p",
        "id": 11212268,
        "node_id": "MDQ6VXNlcjExMjEyMjY4",
        "avatar_url": "https://avatars.githubusercontent.com/u/11212268?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gruve-p",
        "html_url": "https://github.com/gruve-p",
        "followers_url": "https://api.github.com/users/gruve-p/followers",
        "following_url": "https://api.github.com/users/gruve-p/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gruve-p/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gruve-p/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gruve-p/subscriptions",
        "organizations_url": "https://api.github.com/users/gruve-p/orgs",
        "repos_url": "https://api.github.com/users/gruve-p/repos",
        "events_url": "https://api.github.com/users/gruve-p/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gruve-p/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "MINER=\"..contrib/signet/miner\" > MINER=\"../contrib/signet/miner\"",
      "created_at": "2020-12-21T15:29:35Z",
      "updated_at": "2021-01-12T08:35:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#discussion_r546769938",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546769938"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 28,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/548214153",
      "pull_request_review_id": 558216806,
      "id": 548214153,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODIxNDE1Mw==",
      "diff_hunk": "@@ -0,0 +1,222 @@\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <arith_uint256.h>\n+#include <clientversion.h>\n+#include <coins.h>\n+#include <consensus/consensus.h>\n+#include <core_io.h>\n+#include <key_io.h>\n+#include <policy/rbf.h>\n+#include <primitives/transaction.h>\n+#include <script/script.h>\n+#include <script/sign.h>\n+#include <script/signingprovider.h>\n+#include <univalue.h>\n+#include <util/moneystr.h>\n+#include <util/rbf.h>\n+#include <util/strencodings.h>\n+#include <util/string.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+\n+#include <functional>\n+#include <memory>\n+#include <stdio.h>\n+#include <thread>\n+\n+#include <boost/algorithm/string.hpp>\n+\n+static const int CONTINUE_EXECUTION=-1;\n+\n+const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static void SetupBitcoinUtilArgs(ArgsManager &argsman)\n+{\n+    SetupHelpOptions(argsman);\n+\n+    SetupChainParamsBaseOptions(argsman);\n+}\n+\n+//\n+// This function returns either one of EXIT_ codes when it's expected to stop the process or\n+// CONTINUE_EXECUTION when it's expected to continue further.\n+//\n+static int AppInitUtil(int argc, char* argv[])\n+{\n+    //\n+    // Parameters\n+    //\n+    SetupBitcoinUtilArgs(gArgs);\n+    std::string error;\n+    if (!gArgs.ParseParameters(argc, argv, error)) {\n+        tfm::format(std::cerr, \"Error parsing command line arguments: %s\\n\", error);\n+        return EXIT_FAILURE;\n+    }\n+\n+    // Check for -chain, -testnet or -regtest parameter (Params() calls are only valid after this clause)\n+    try {\n+        SelectParams(gArgs.GetChainName());\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\n\", e.what());\n+        return EXIT_FAILURE;\n+    }\n+\n+    if (argc < 2 || HelpRequested(gArgs)) {\n+        // First part of help message is specific to this utility\n+        std::string strUsage = PACKAGE_NAME \" bitcoin-tx utility version \" + FormatFullVersion() + \"\\n\\n\" +\n+            \"Usage:  bitcoin-util [options] [commands]  Do stuff\\n\" +\n+            \"\\n\";\n+        strUsage += gArgs.GetHelpMessage();\n+\n+        tfm::format(std::cout, \"%s\", strUsage);\n+\n+        if (argc < 2) {\n+            tfm::format(std::cerr, \"Error: too few parameters\\n\");\n+            return EXIT_FAILURE;\n+        }\n+        return EXIT_SUCCESS;\n+    }\n+    return CONTINUE_EXECUTION;\n+}\n+\n+static void grind_task(uint32_t nBits, CBlockHeader& header_orig, uint32_t offset, uint32_t step, std::atomic<bool>& found)\n+{\n+    arith_uint256 target;\n+    bool neg, over;\n+    target.SetCompact(nBits, &neg, &over);\n+    if (target == 0 || neg || over) return;\n+    CBlockHeader header = header_orig; // working copy\n+    header.nNonce = offset;\n+\n+    uint32_t finish = std::numeric_limits<uint32_t>::max() - step;\n+    finish = finish - (finish % step) + offset;\n+\n+    while (!found && header.nNonce < finish) {\n+        const uint32_t next = (finish - header.nNonce < 5000*step) ? finish : header.nNonce + 5000*step;\n+        do {\n+            if (!(UintToArith256(header.GetHash()) > target)) {\n+                if (!found.exchange(true)) {\n+                    header_orig.nNonce = header.nNonce;\n+                }\n+                return;\n+            }\n+            header.nNonce += step;\n+        } while(header.nNonce != next);\n+    }\n+}\n+\n+static int Grind(int argc, char* argv[], std::string& strPrint)\n+{\n+    if (argc != 1) {\n+        strPrint = \"Must specify block header to grind\";\n+        return 1;\n+    }\n+\n+    CBlockHeader header;\n+    if (!DecodeHexBlockHeader(header, argv[0])) {\n+        strPrint = \"Could not decode block header\";\n+        return 1;\n+    }\n+\n+    uint32_t nBits = header.nBits;\n+    std::atomic<bool> found{false};\n+\n+    std::vector<std::thread> threads;\n+    int n_tasks = std::max(1u, std::thread::hardware_concurrency());\n+    for (int i = 0; i < n_tasks; ++i) {\n+        threads.emplace_back( grind_task, nBits, std::ref(header), i, n_tasks, std::ref(found) );\n+    }\n+    for (auto& t : threads) {\n+        t.join();\n+    }\n+    if (!found) {\n+        strPrint = \"Could not satisfy difficulty target\";\n+        return 1;\n+    }\n+\n+    CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n+    ss << header;\n+    strPrint = HexStr(ss);\n+    return 0;\n+}\n+\n+static int CommandLineUtil(int argc, char* argv[])\n+{\n+    if (argc <= 1) return 1;\n+\n+    std::string strPrint;\n+    int nRet = 0;\n+\n+    try {\n+        while (argc > 1 && IsSwitchChar(argv[1][0]) && (argv[1][1] != 0)) {\n+            --argc;\n+            ++argv;\n+        }\n+\n+        char* command = argv[1];\n+        if (strcmp(command, \"grind\") == 0) {",
      "path": "src/bitcoin-util.cpp",
      "position": 158,
      "original_position": 163,
      "commit_id": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "original_commit_id": "e077aa7055e71f08a7d2cfbb29702832899fee04",
      "in_reply_to_id": 492742101,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This seems worth addressing still: https://github.com/bitcoin/bitcoin/pull/19937/commits/e6473d274fe01d58c9eed75bc56415fcce6d63db#r492742101",
      "created_at": "2020-12-23T20:34:31Z",
      "updated_at": "2021-01-12T08:35:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#discussion_r548214153",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/548214153"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 158,
      "original_line": 158,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/555054277",
      "pull_request_review_id": 565363327,
      "id": 555054277,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTA1NDI3Nw==",
      "diff_hunk": "@@ -714,6 +718,13 @@ static RPCHelpMan getblocktemplate()\n         // TODO: Maybe recheck connections/IBD and (if something wrong) send an expires-immediately template to stop miners?\n     }\n \n+    const Consensus::Params& consensusParams = Params().GetConsensus();\n+\n+    // GBT must be called with 'signet' set in the rules for signet chains",
      "path": "src/rpc/mining.cpp",
      "position": 26,
      "original_position": 26,
      "commit_id": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "original_commit_id": "f19148a9ddab01af80067982f2639dbee2cdbf52",
      "in_reply_to_id": null,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What happens when `signet` rules are set when calling `getblocktemplate` on a non-signet network, I suppose this is (or should be) an error?",
      "created_at": "2021-01-11T13:42:54Z",
      "updated_at": "2021-01-12T08:35:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#discussion_r555054277",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/555054277"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 723,
      "original_line": 723,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/555055992",
      "pull_request_review_id": 565365554,
      "id": 555055992,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTA1NTk5Mg==",
      "diff_hunk": "@@ -0,0 +1,217 @@\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <arith_uint256.h>\n+#include <clientversion.h>\n+#include <coins.h>\n+#include <consensus/consensus.h>\n+#include <core_io.h>\n+#include <key_io.h>\n+#include <policy/rbf.h>\n+#include <primitives/transaction.h>\n+#include <script/script.h>\n+#include <script/sign.h>\n+#include <script/signingprovider.h>\n+#include <univalue.h>\n+#include <util/moneystr.h>\n+#include <util/rbf.h>\n+#include <util/strencodings.h>\n+#include <util/string.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+\n+#include <functional>\n+#include <memory>\n+#include <stdio.h>\n+#include <thread>\n+\n+#include <boost/algorithm/string.hpp>\n+\n+static const int CONTINUE_EXECUTION=-1;\n+\n+const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static void SetupBitcoinUtilArgs(ArgsManager &argsman)\n+{\n+    SetupHelpOptions(argsman);\n+\n+    SetupChainParamsBaseOptions(argsman);\n+}\n+\n+// This function returns either one of EXIT_ codes when it's expected to stop the process or\n+// CONTINUE_EXECUTION when it's expected to continue further.\n+static int AppInitUtil(int argc, char* argv[])\n+{\n+    SetupBitcoinUtilArgs(gArgs);\n+    std::string error;\n+    if (!gArgs.ParseParameters(argc, argv, error)) {\n+        tfm::format(std::cerr, \"Error parsing command line arguments: %s\\n\", error);\n+        return EXIT_FAILURE;\n+    }\n+\n+    // Check for chain settings (Params() calls are only valid after this clause)\n+    try {\n+        SelectParams(gArgs.GetChainName());\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\n\", e.what());\n+        return EXIT_FAILURE;\n+    }\n+\n+    if (argc < 2 || HelpRequested(gArgs)) {\n+        // First part of help message is specific to this utility\n+        std::string strUsage = PACKAGE_NAME \" bitcoin-util utility version \" + FormatFullVersion() + \"\\n\\n\" +\n+            \"Usage:  bitcoin-util [options] [commands]  Do stuff\\n\" +\n+            \"\\n\";\n+        strUsage += gArgs.GetHelpMessage();\n+\n+        tfm::format(std::cout, \"%s\", strUsage);\n+\n+        if (argc < 2) {\n+            tfm::format(std::cerr, \"Error: too few parameters\\n\");\n+            return EXIT_FAILURE;\n+        }\n+        return EXIT_SUCCESS;\n+    }\n+    return CONTINUE_EXECUTION;\n+}\n+\n+static void grind_task(uint32_t nBits, CBlockHeader& header_orig, uint32_t offset, uint32_t step, std::atomic<bool>& found)\n+{\n+    arith_uint256 target;\n+    bool neg, over;\n+    target.SetCompact(nBits, &neg, &over);\n+    if (target == 0 || neg || over) return;\n+    CBlockHeader header = header_orig; // working copy\n+    header.nNonce = offset;\n+\n+    uint32_t finish = std::numeric_limits<uint32_t>::max() - step;\n+    finish = finish - (finish % step) + offset;\n+\n+    while (!found && header.nNonce < finish) {\n+        const uint32_t next = (finish - header.nNonce < 5000*step) ? finish : header.nNonce + 5000*step;\n+        do {\n+            if (UintToArith256(header.GetHash()) <= target) {\n+                if (!found.exchange(true)) {\n+                    header_orig.nNonce = header.nNonce;\n+                }\n+                return;\n+            }\n+            header.nNonce += step;\n+        } while(header.nNonce != next);\n+    }\n+}\n+\n+static int Grind(int argc, char* argv[], std::string& strPrint)\n+{\n+    if (argc != 1) {\n+        strPrint = \"Must specify block header to grind\";\n+        return 1;\n+    }\n+\n+    CBlockHeader header;\n+    if (!DecodeHexBlockHeader(header, argv[0])) {\n+        strPrint = \"Could not decode block header\";\n+        return 1;\n+    }\n+\n+    uint32_t nBits = header.nBits;\n+    std::atomic<bool> found{false};\n+\n+    std::vector<std::thread> threads;\n+    int n_tasks = std::max(1u, std::thread::hardware_concurrency());\n+    for (int i = 0; i < n_tasks; ++i) {\n+        threads.emplace_back( grind_task, nBits, std::ref(header), i, n_tasks, std::ref(found) );\n+    }\n+    for (auto& t : threads) {\n+        t.join();\n+    }\n+    if (!found) {\n+        strPrint = \"Could not satisfy difficulty target\";\n+        return 1;\n+    }\n+\n+    CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n+    ss << header;\n+    strPrint = HexStr(ss);\n+    return 0;\n+}\n+\n+static int CommandLineUtil(int argc, char* argv[])\n+{\n+    if (argc <= 1) return 1;\n+\n+    std::string strPrint;\n+    int nRet = 0;\n+\n+    try {\n+        while (argc > 1 && IsSwitchChar(argv[1][0]) && (argv[1][1] != 0)) {\n+            --argc;\n+            ++argv;\n+        }\n+\n+        char* command = argv[1];\n+        if (strcmp(command, \"grind\") == 0) {\n+            nRet = Grind(argc-2, argv+2, strPrint);\n+        } else {\n+            strPrint = strprintf(\"Unknown command %s\", command);\n+            nRet = 1;\n+        }\n+    }\n+    catch (const std::exception& e) {\n+        strPrint = std::string(\"error: \") + e.what();\n+        nRet = EXIT_FAILURE;\n+    }\n+    catch (...) {\n+        PrintExceptionContinue(nullptr, \"CommandLineUtil()\");\n+        throw;\n+    }\n+\n+    if (strPrint != \"\") {\n+        tfm::format(nRet == 0 ? std::cout : std::cerr, \"%s\\n\", strPrint);\n+    }\n+    return nRet;\n+}\n+\n+int main(int argc, char* argv[])\n+{\n+    if (argc < 0) {\n+        /* this nonsense is needed or you get linker errors because\n+         * ArgsManager does these ops but for some reason they're not\n+         * available.\n+         * \"argc < 0\" should be enough to be unreachable, but not\n+         * so unreachable that it's optimised away entirely\n+         */\n+        try { UniValue uv; uv[\"txid\"]; uv.get_str(); uv.write(4); } catch (...) { }",
      "path": "src/bitcoin-util.cpp",
      "position": null,
      "original_position": 189,
      "commit_id": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "original_commit_id": "f19148a9ddab01af80067982f2639dbee2cdbf52",
      "in_reply_to_id": null,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this is awful. Can someone of the build system people please weigh in here?",
      "created_at": "2021-01-11T13:45:35Z",
      "updated_at": "2021-01-12T08:35:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#discussion_r555055992",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/555055992"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 189,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/555072470",
      "pull_request_review_id": 565387622,
      "id": 555072470,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTA3MjQ3MA==",
      "diff_hunk": "@@ -0,0 +1,217 @@\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <arith_uint256.h>\n+#include <clientversion.h>\n+#include <coins.h>\n+#include <consensus/consensus.h>\n+#include <core_io.h>\n+#include <key_io.h>\n+#include <policy/rbf.h>\n+#include <primitives/transaction.h>\n+#include <script/script.h>\n+#include <script/sign.h>\n+#include <script/signingprovider.h>\n+#include <univalue.h>\n+#include <util/moneystr.h>\n+#include <util/rbf.h>\n+#include <util/strencodings.h>\n+#include <util/string.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+\n+#include <functional>\n+#include <memory>\n+#include <stdio.h>\n+#include <thread>\n+\n+#include <boost/algorithm/string.hpp>\n+\n+static const int CONTINUE_EXECUTION=-1;\n+\n+const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static void SetupBitcoinUtilArgs(ArgsManager &argsman)\n+{\n+    SetupHelpOptions(argsman);\n+\n+    SetupChainParamsBaseOptions(argsman);\n+}\n+\n+// This function returns either one of EXIT_ codes when it's expected to stop the process or\n+// CONTINUE_EXECUTION when it's expected to continue further.\n+static int AppInitUtil(int argc, char* argv[])\n+{\n+    SetupBitcoinUtilArgs(gArgs);\n+    std::string error;\n+    if (!gArgs.ParseParameters(argc, argv, error)) {\n+        tfm::format(std::cerr, \"Error parsing command line arguments: %s\\n\", error);\n+        return EXIT_FAILURE;\n+    }\n+\n+    // Check for chain settings (Params() calls are only valid after this clause)\n+    try {\n+        SelectParams(gArgs.GetChainName());\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\n\", e.what());\n+        return EXIT_FAILURE;\n+    }\n+\n+    if (argc < 2 || HelpRequested(gArgs)) {\n+        // First part of help message is specific to this utility\n+        std::string strUsage = PACKAGE_NAME \" bitcoin-util utility version \" + FormatFullVersion() + \"\\n\\n\" +\n+            \"Usage:  bitcoin-util [options] [commands]  Do stuff\\n\" +\n+            \"\\n\";\n+        strUsage += gArgs.GetHelpMessage();\n+\n+        tfm::format(std::cout, \"%s\", strUsage);\n+\n+        if (argc < 2) {\n+            tfm::format(std::cerr, \"Error: too few parameters\\n\");\n+            return EXIT_FAILURE;\n+        }\n+        return EXIT_SUCCESS;\n+    }\n+    return CONTINUE_EXECUTION;\n+}\n+\n+static void grind_task(uint32_t nBits, CBlockHeader& header_orig, uint32_t offset, uint32_t step, std::atomic<bool>& found)\n+{\n+    arith_uint256 target;\n+    bool neg, over;\n+    target.SetCompact(nBits, &neg, &over);\n+    if (target == 0 || neg || over) return;\n+    CBlockHeader header = header_orig; // working copy\n+    header.nNonce = offset;\n+\n+    uint32_t finish = std::numeric_limits<uint32_t>::max() - step;\n+    finish = finish - (finish % step) + offset;\n+\n+    while (!found && header.nNonce < finish) {\n+        const uint32_t next = (finish - header.nNonce < 5000*step) ? finish : header.nNonce + 5000*step;\n+        do {\n+            if (UintToArith256(header.GetHash()) <= target) {\n+                if (!found.exchange(true)) {\n+                    header_orig.nNonce = header.nNonce;\n+                }\n+                return;\n+            }\n+            header.nNonce += step;\n+        } while(header.nNonce != next);\n+    }\n+}\n+\n+static int Grind(int argc, char* argv[], std::string& strPrint)\n+{\n+    if (argc != 1) {\n+        strPrint = \"Must specify block header to grind\";\n+        return 1;\n+    }\n+\n+    CBlockHeader header;\n+    if (!DecodeHexBlockHeader(header, argv[0])) {\n+        strPrint = \"Could not decode block header\";\n+        return 1;\n+    }\n+\n+    uint32_t nBits = header.nBits;\n+    std::atomic<bool> found{false};\n+\n+    std::vector<std::thread> threads;\n+    int n_tasks = std::max(1u, std::thread::hardware_concurrency());\n+    for (int i = 0; i < n_tasks; ++i) {\n+        threads.emplace_back( grind_task, nBits, std::ref(header), i, n_tasks, std::ref(found) );\n+    }\n+    for (auto& t : threads) {\n+        t.join();\n+    }\n+    if (!found) {\n+        strPrint = \"Could not satisfy difficulty target\";\n+        return 1;\n+    }\n+\n+    CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n+    ss << header;\n+    strPrint = HexStr(ss);\n+    return 0;\n+}\n+\n+static int CommandLineUtil(int argc, char* argv[])\n+{\n+    if (argc <= 1) return 1;\n+\n+    std::string strPrint;\n+    int nRet = 0;\n+\n+    try {\n+        while (argc > 1 && IsSwitchChar(argv[1][0]) && (argv[1][1] != 0)) {\n+            --argc;\n+            ++argv;\n+        }\n+\n+        char* command = argv[1];\n+        if (strcmp(command, \"grind\") == 0) {\n+            nRet = Grind(argc-2, argv+2, strPrint);\n+        } else {\n+            strPrint = strprintf(\"Unknown command %s\", command);\n+            nRet = 1;\n+        }\n+    }\n+    catch (const std::exception& e) {\n+        strPrint = std::string(\"error: \") + e.what();\n+        nRet = EXIT_FAILURE;\n+    }\n+    catch (...) {\n+        PrintExceptionContinue(nullptr, \"CommandLineUtil()\");\n+        throw;\n+    }\n+\n+    if (strPrint != \"\") {\n+        tfm::format(nRet == 0 ? std::cout : std::cerr, \"%s\\n\", strPrint);\n+    }\n+    return nRet;\n+}\n+\n+int main(int argc, char* argv[])\n+{\n+    if (argc < 0) {\n+        /* this nonsense is needed or you get linker errors because\n+         * ArgsManager does these ops but for some reason they're not\n+         * available.\n+         * \"argc < 0\" should be enough to be unreachable, but not\n+         * so unreachable that it's optimised away entirely\n+         */\n+        try { UniValue uv; uv[\"txid\"]; uv.get_str(); uv.write(4); } catch (...) { }",
      "path": "src/bitcoin-util.cpp",
      "position": null,
      "original_position": 189,
      "commit_id": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "original_commit_id": "f19148a9ddab01af80067982f2639dbee2cdbf52",
      "in_reply_to_id": 555055992,
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This works for me:\r\n```diff\r\ndiff --git a/src/Makefile.am b/src/Makefile.am\r\nindex b974bed66..f37db7bde 100644\r\n--- a/src/Makefile.am\r\n+++ b/src/Makefile.am\r\n@@ -677,9 +677,9 @@ bitcoin_util_SOURCES += bitcoin-util-res.rc\r\n endif\r\n \r\n bitcoin_util_LDADD = \\\r\n-  $(LIBUNIVALUE) \\\r\n   $(LIBBITCOIN_COMMON) \\\r\n   $(LIBBITCOIN_UTIL) \\\r\n+  $(LIBUNIVALUE) \\\r\n   $(LIBBITCOIN_CONSENSUS) \\\r\n   $(LIBBITCOIN_CRYPTO) \\\r\n   $(LIBSECP256K1)\r\ndiff --git a/src/bitcoin-util.cpp b/src/bitcoin-util.cpp\r\nindex ff6bedec0..f7e670f4e 100644\r\n--- a/src/bitcoin-util.cpp\r\n+++ b/src/bitcoin-util.cpp\r\n@@ -179,16 +179,6 @@ static int CommandLineUtil(int argc, char* argv[])\r\n \r\n int main(int argc, char* argv[])\r\n {\r\n-    if (argc < 0) {\r\n-        /* this nonsense is needed or you get linker errors because\r\n-         * ArgsManager does these ops but for some reason they're not\r\n-         * available.\r\n-         * \"argc < 0\" should be enough to be unreachable, but not\r\n-         * so unreachable that it's optimised away entirely\r\n-         */\r\n-        try { UniValue uv; uv[\"txid\"]; uv.get_str(); uv.write(4); } catch (...) { }\r\n-    }\r\n-\r\n     SetupEnvironment();\r\n \r\n     try {\r\n```",
      "created_at": "2021-01-11T14:11:37Z",
      "updated_at": "2021-01-12T08:35:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#discussion_r555072470",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/555072470"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 189,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/555586016",
      "pull_request_review_id": 566027933,
      "id": 555586016,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTU4NjAxNg==",
      "diff_hunk": "@@ -714,6 +718,13 @@ static RPCHelpMan getblocktemplate()\n         // TODO: Maybe recheck connections/IBD and (if something wrong) send an expires-immediately template to stop miners?\n     }\n \n+    const Consensus::Params& consensusParams = Params().GetConsensus();\n+\n+    // GBT must be called with 'signet' set in the rules for signet chains",
      "path": "src/rpc/mining.cpp",
      "position": 26,
      "original_position": 26,
      "commit_id": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "original_commit_id": "f19148a9ddab01af80067982f2639dbee2cdbf52",
      "in_reply_to_id": 555054277,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The way I read BIP9 is that by including \"signet\" in the rules when doing a GBT request, that just indicates you can handle it if signet rules are active -- if they're not active, then there's no reason why you can't handle that too. So adding signet to rules on mainnet should be fine as far as bitcoind is concerned -- it will just return a regular template without any signet stuff, just as if you'd indicated support for .. extension block mining or something.",
      "created_at": "2021-01-12T08:21:15Z",
      "updated_at": "2021-01-12T08:35:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#discussion_r555586016",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/555586016"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 723,
      "original_line": 723,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/555594416",
      "pull_request_review_id": 566038911,
      "id": 555594416,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTU5NDQxNg==",
      "diff_hunk": "@@ -0,0 +1,217 @@\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <arith_uint256.h>\n+#include <clientversion.h>\n+#include <coins.h>\n+#include <consensus/consensus.h>\n+#include <core_io.h>\n+#include <key_io.h>\n+#include <policy/rbf.h>\n+#include <primitives/transaction.h>\n+#include <script/script.h>\n+#include <script/sign.h>\n+#include <script/signingprovider.h>\n+#include <univalue.h>\n+#include <util/moneystr.h>\n+#include <util/rbf.h>\n+#include <util/strencodings.h>\n+#include <util/string.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+\n+#include <functional>\n+#include <memory>\n+#include <stdio.h>\n+#include <thread>\n+\n+#include <boost/algorithm/string.hpp>\n+\n+static const int CONTINUE_EXECUTION=-1;\n+\n+const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static void SetupBitcoinUtilArgs(ArgsManager &argsman)\n+{\n+    SetupHelpOptions(argsman);\n+\n+    SetupChainParamsBaseOptions(argsman);\n+}\n+\n+// This function returns either one of EXIT_ codes when it's expected to stop the process or\n+// CONTINUE_EXECUTION when it's expected to continue further.\n+static int AppInitUtil(int argc, char* argv[])\n+{\n+    SetupBitcoinUtilArgs(gArgs);\n+    std::string error;\n+    if (!gArgs.ParseParameters(argc, argv, error)) {\n+        tfm::format(std::cerr, \"Error parsing command line arguments: %s\\n\", error);\n+        return EXIT_FAILURE;\n+    }\n+\n+    // Check for chain settings (Params() calls are only valid after this clause)\n+    try {\n+        SelectParams(gArgs.GetChainName());\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\n\", e.what());\n+        return EXIT_FAILURE;\n+    }\n+\n+    if (argc < 2 || HelpRequested(gArgs)) {\n+        // First part of help message is specific to this utility\n+        std::string strUsage = PACKAGE_NAME \" bitcoin-util utility version \" + FormatFullVersion() + \"\\n\\n\" +\n+            \"Usage:  bitcoin-util [options] [commands]  Do stuff\\n\" +\n+            \"\\n\";\n+        strUsage += gArgs.GetHelpMessage();\n+\n+        tfm::format(std::cout, \"%s\", strUsage);\n+\n+        if (argc < 2) {\n+            tfm::format(std::cerr, \"Error: too few parameters\\n\");\n+            return EXIT_FAILURE;\n+        }\n+        return EXIT_SUCCESS;\n+    }\n+    return CONTINUE_EXECUTION;\n+}\n+\n+static void grind_task(uint32_t nBits, CBlockHeader& header_orig, uint32_t offset, uint32_t step, std::atomic<bool>& found)\n+{\n+    arith_uint256 target;\n+    bool neg, over;\n+    target.SetCompact(nBits, &neg, &over);\n+    if (target == 0 || neg || over) return;\n+    CBlockHeader header = header_orig; // working copy\n+    header.nNonce = offset;\n+\n+    uint32_t finish = std::numeric_limits<uint32_t>::max() - step;\n+    finish = finish - (finish % step) + offset;\n+\n+    while (!found && header.nNonce < finish) {\n+        const uint32_t next = (finish - header.nNonce < 5000*step) ? finish : header.nNonce + 5000*step;\n+        do {\n+            if (UintToArith256(header.GetHash()) <= target) {\n+                if (!found.exchange(true)) {\n+                    header_orig.nNonce = header.nNonce;\n+                }\n+                return;\n+            }\n+            header.nNonce += step;\n+        } while(header.nNonce != next);\n+    }\n+}\n+\n+static int Grind(int argc, char* argv[], std::string& strPrint)\n+{\n+    if (argc != 1) {\n+        strPrint = \"Must specify block header to grind\";\n+        return 1;\n+    }\n+\n+    CBlockHeader header;\n+    if (!DecodeHexBlockHeader(header, argv[0])) {\n+        strPrint = \"Could not decode block header\";\n+        return 1;\n+    }\n+\n+    uint32_t nBits = header.nBits;\n+    std::atomic<bool> found{false};\n+\n+    std::vector<std::thread> threads;\n+    int n_tasks = std::max(1u, std::thread::hardware_concurrency());\n+    for (int i = 0; i < n_tasks; ++i) {\n+        threads.emplace_back( grind_task, nBits, std::ref(header), i, n_tasks, std::ref(found) );\n+    }\n+    for (auto& t : threads) {\n+        t.join();\n+    }\n+    if (!found) {\n+        strPrint = \"Could not satisfy difficulty target\";\n+        return 1;\n+    }\n+\n+    CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n+    ss << header;\n+    strPrint = HexStr(ss);\n+    return 0;\n+}\n+\n+static int CommandLineUtil(int argc, char* argv[])\n+{\n+    if (argc <= 1) return 1;\n+\n+    std::string strPrint;\n+    int nRet = 0;\n+\n+    try {\n+        while (argc > 1 && IsSwitchChar(argv[1][0]) && (argv[1][1] != 0)) {\n+            --argc;\n+            ++argv;\n+        }\n+\n+        char* command = argv[1];\n+        if (strcmp(command, \"grind\") == 0) {\n+            nRet = Grind(argc-2, argv+2, strPrint);\n+        } else {\n+            strPrint = strprintf(\"Unknown command %s\", command);\n+            nRet = 1;\n+        }\n+    }\n+    catch (const std::exception& e) {\n+        strPrint = std::string(\"error: \") + e.what();\n+        nRet = EXIT_FAILURE;\n+    }\n+    catch (...) {\n+        PrintExceptionContinue(nullptr, \"CommandLineUtil()\");\n+        throw;\n+    }\n+\n+    if (strPrint != \"\") {\n+        tfm::format(nRet == 0 ? std::cout : std::cerr, \"%s\\n\", strPrint);\n+    }\n+    return nRet;\n+}\n+\n+int main(int argc, char* argv[])\n+{\n+    if (argc < 0) {\n+        /* this nonsense is needed or you get linker errors because\n+         * ArgsManager does these ops but for some reason they're not\n+         * available.\n+         * \"argc < 0\" should be enough to be unreachable, but not\n+         * so unreachable that it's optimised away entirely\n+         */\n+        try { UniValue uv; uv[\"txid\"]; uv.get_str(); uv.write(4); } catch (...) { }",
      "path": "src/bitcoin-util.cpp",
      "position": null,
      "original_position": 189,
      "commit_id": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "original_commit_id": "f19148a9ddab01af80067982f2639dbee2cdbf52",
      "in_reply_to_id": 555055992,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks @fanquake !",
      "created_at": "2021-01-12T08:36:11Z",
      "updated_at": "2021-01-12T08:36:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#discussion_r555594416",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/555594416"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 189,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/555703682",
      "pull_request_review_id": 566180283,
      "id": 555703682,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTcwMzY4Mg==",
      "diff_hunk": "@@ -714,6 +718,13 @@ static RPCHelpMan getblocktemplate()\n         // TODO: Maybe recheck connections/IBD and (if something wrong) send an expires-immediately template to stop miners?\n     }\n \n+    const Consensus::Params& consensusParams = Params().GetConsensus();\n+\n+    // GBT must be called with 'signet' set in the rules for signet chains",
      "path": "src/rpc/mining.cpp",
      "position": 26,
      "original_position": 26,
      "commit_id": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "original_commit_id": "f19148a9ddab01af80067982f2639dbee2cdbf52",
      "in_reply_to_id": 555054277,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, clear.",
      "created_at": "2021-01-12T11:31:38Z",
      "updated_at": "2021-01-12T11:31:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#discussion_r555703682",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/555703682"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 723,
      "original_line": 723,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568095138",
      "pull_request_review_id": 580707262,
      "id": 568095138,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODA5NTEzOA==",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <arith_uint256.h>\n+#include <clientversion.h>\n+#include <coins.h>\n+#include <consensus/consensus.h>\n+#include <core_io.h>\n+#include <key_io.h>\n+#include <policy/rbf.h>\n+#include <primitives/transaction.h>\n+#include <script/script.h>\n+#include <script/sign.h>\n+#include <script/signingprovider.h>\n+#include <univalue.h>\n+#include <util/moneystr.h>\n+#include <util/rbf.h>\n+#include <util/strencodings.h>\n+#include <util/string.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+\n+#include <functional>\n+#include <memory>\n+#include <stdio.h>\n+#include <thread>\n+\n+#include <boost/algorithm/string.hpp>",
      "path": "src/bitcoin-util.cpp",
      "position": 33,
      "original_position": 33,
      "commit_id": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "original_commit_id": "595a34dbea01954cb0372b0210d2fd64357a1762",
      "in_reply_to_id": null,
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not sure if this `include` is required.",
      "created_at": "2021-02-01T19:49:10Z",
      "updated_at": "2021-02-01T19:49:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/19937#discussion_r568095138",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568095138"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19937"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 33,
      "original_line": 33,
      "side": "RIGHT"
    }
  ]
}